uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeModelParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _OWORD v4[10];

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  memset(v4, 0, sizeof(v4));
  DWORD1(v4[0]) = 1;
  std::string::operator=((std::string *)a1, a2);
  xgboost::gbm::GBTreeModelParam::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220DF6B4C(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeTrainParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  std::string v9;
  std::string v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  std::string __stra;
  std::string v16;

  qword_253F36AF0 = 0;
  qword_253F36AF8 = 0;
  *(_OWORD *)&stru_253F36AB8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36AB8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36AD8 = 0u;
  qword_253F36AE8 = (uint64_t)&qword_253F36AF0;
  std::string::operator=(&stru_253F36AB8, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "updater_seq");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36AB8, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v16, "grow_colmaker,prune");
  std::string::operator=((std::string *)(v1 + 104), &v16);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v14, "Tree updater sequence.");
  std::string::operator=((std::string *)(v1 + 72), &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "process_type");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &off_24E6BB6D0;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 32;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36AB8, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v16, "default");
  dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)&v16.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v14, "update");
  dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)&v14.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(&v13, "Whether to run the normal boosting process that creates new trees, or to update the trees in an existing model.");
  std::string::operator=((std::string *)(v3 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "updater_seq");
  std::string::basic_string[abi:ne180100]<0>(&__stra, "updater");
  dmlc::parameter::ParamManager::AddAlias((uint64_t)&stru_253F36AB8, (const void **)&v16.__r_.__value_.__l.__data_, (const void **)&__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "predictor");
  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 128) = v5 + 136;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = v5 + 160;
  *(_WORD *)(v5 + 108) = 0;
  *(_QWORD *)v5 = &off_24E6BB750;
  *(_BYTE *)(v5 + 120) = 1;
  *(_QWORD *)(v5 + 168) = 0;
  std::string::operator=((std::string *)(v5 + 24), &__stra);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_40;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "int");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
LABEL_40:
  *(_QWORD *)(v5 + 96) = 36;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36AB8, (const void **)&__stra.__r_.__value_.__l.__data_, v5);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v16, "auto");
  dmlc::parameter::FieldEntry<int>::add_enum(v5, (const void **)&v16.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v14, "cpu_predictor");
  dmlc::parameter::FieldEntry<int>::add_enum(v5, (const void **)&v14.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(&v13, "gpu_predictor");
  dmlc::parameter::FieldEntry<int>::add_enum(v5, (const void **)&v13.__r_.__value_.__l.__data_, 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "oneapi_predictor");
  dmlc::parameter::FieldEntry<int>::add_enum(v5, (const void **)__p, 3);
  std::string::basic_string[abi:ne180100]<0>(&v10, "Predictor algorithm type");
  std::string::operator=((std::string *)(v5 + 72), &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "tree_method");
  v7 = operator new();
  *(_BYTE *)(v7 + 8) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 128) = v7 + 136;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = v7 + 160;
  *(_WORD *)(v7 + 108) = 0;
  *(_QWORD *)v7 = &off_24E6BB7D0;
  *(_BYTE *)(v7 + 120) = 1;
  *(_QWORD *)(v7 + 168) = 0;
  std::string::operator=((std::string *)(v7 + 24), &__stra);
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_59;
  }
  else if (*(_BYTE *)(v7 + 71))
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "int");
  v8 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 64) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
LABEL_59:
  *(_QWORD *)(v7 + 96) = 40;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36AB8, (const void **)&__stra.__r_.__value_.__l.__data_, v7);
  *(_DWORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v16, "auto");
  dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)&v16.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v14, "approx");
  dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)&v14.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(&v13, "exact");
  dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)&v13.__r_.__value_.__l.__data_, 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "hist");
  dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)__p, 3);
  std::string::basic_string[abi:ne180100]<0>(&v10, "gpu_hist");
  dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)&v10.__r_.__value_.__l.__data_, 5);
  std::string::basic_string[abi:ne180100]<0>(&v9, "Choice of tree construction method.");
  std::string::operator=((std::string *)(v7 + 72), &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220DF72E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 65) < 0)
    operator delete(*(void **)(v33 - 88));
  if (*(char *)(v33 - 17) < 0)
    operator delete(*(void **)(v33 - 40));
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_253F36AB8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntry<int>::add_enum(uint64_t a1, const void **a2, int a3)
{
  uint64_t **v6;
  uint64_t *i;
  int v8;
  uint64_t **v9;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::runtime_error *exception;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  std::string v30;
  __int128 *v31[33];
  int v32;

  v32 = a3;
  v6 = (uint64_t **)(a1 + 128);
  if (*(_QWORD *)(a1 + 144)
    && std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 128, a2))
  {
LABEL_9:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Enum ", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    v13 = *((char *)a2 + 23);
    if (v13 >= 0)
      v14 = (uint64_t)a2;
    else
      v14 = (uint64_t)*a2;
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)a2 + 23);
    else
      v15 = (uint64_t)a2[1];
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" exisit!", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")\n", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Enums: ", 7);
    v19 = *(_QWORD **)(a1 + 128);
    if (v19 != (_QWORD *)(a1 + 136))
    {
      do
      {
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
        v22 = *((char *)v19 + 55);
        if (v22 >= 0)
          v23 = (uint64_t)(v19 + 4);
        else
          v23 = v19[4];
        if (v22 >= 0)
          v24 = *((unsigned __int8 *)v19 + 55);
        else
          v24 = v19[5];
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"), ", 3);
        v27 = (_QWORD *)v19[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v19[2];
            v29 = *v28 == (_QWORD)v19;
            v19 = v28;
          }
          while (!v29);
        }
        v19 = v28;
      }
      while (v28 != (_QWORD *)(a1 + 136));
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v30);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  for (i = *(uint64_t **)(a1 + 160); i; i = (uint64_t *)*i)
  {
    v8 = *((_DWORD *)i + 8);
    if (v8 <= a3)
    {
      if (v8 >= a3)
        goto LABEL_9;
      ++i;
    }
  }
  v31[0] = (__int128 *)a2;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, v31)+ 14) = a3;
  v31[0] = (__int128 *)&v32;
  v9 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 152), &v32, (uint64_t)&std::piecewise_construct, (_DWORD **)v31);
  std::string::operator=((std::string *)(v9 + 5), (const std::string *)a2);
  *(_BYTE *)(a1 + 120) = 1;
  return a1;
}

void sub_220DF76D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t **std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_220DF7954(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void xgboost::tree::TrainParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  void **v23;
  std::string *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  std::string *v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  void **v68;
  std::string *v69;
  std::string __p;
  std::string v71;
  std::string __str;
  std::string v73;

  std::string::basic_string[abi:ne180100]<0>(&__str, "learning_rate");
  v3 = operator new();
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v3 + 24), &__str);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v3);
  v5 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 80))(v3, 0.0);
  *(_DWORD *)(v5 + 104) = 1050253722;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Learning rate(step size) of update.");
  std::string::operator=((std::string *)(v5 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "min_split_loss");
  v6 = operator new();
  *(_QWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_QWORD *)v6 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v6 + 24), &__str);
  if (*(char *)(v6 + 71) < 0)
  {
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v6 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v7 = (void **)(v6 + 48);
  if (*(char *)(v6 + 71) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v6 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v6);
  v8 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v6 + 80))(v6, 0.0);
  *(_DWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Minimum loss reduction required to make a further partition.");
  std::string::operator=((std::string *)(v8 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_depth");
  v9 = operator new();
  *(_BYTE *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_WORD *)(v9 + 108) = 0;
  *(_QWORD *)v9 = &unk_24E6B5E08;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 128) = v9 + 136;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 152) = v9 + 160;
  *(_QWORD *)(v9 + 168) = 0;
  std::string::operator=((std::string *)(v9 + 24), &__str);
  if (*(char *)(v9 + 71) < 0)
  {
    if (*(_QWORD *)(v9 + 56))
      goto LABEL_30;
  }
  else if (*(_BYTE *)(v9 + 71))
  {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int");
  v10 = (void **)(v9 + 48);
  if (*(char *)(v9 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_30:
  *(_QWORD *)(v9 + 96) = 12;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v9);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 80))(v9, 0);
  *(_DWORD *)(v11 + 104) = 6;
  *(_BYTE *)(v11 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Maximum depth of the tree; 0 indicates no limit; a limit is required for depthwise policy");
  std::string::operator=((std::string *)(v11 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_leaves");
  v12 = operator new();
  *(_BYTE *)(v12 + 8) = 0;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_WORD *)(v12 + 108) = 0;
  *(_QWORD *)v12 = &unk_24E6B5E08;
  *(_BYTE *)(v12 + 120) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 128) = v12 + 136;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = v12 + 160;
  *(_QWORD *)(v12 + 168) = 0;
  std::string::operator=((std::string *)(v12 + 24), &__str);
  if (*(char *)(v12 + 71) < 0)
  {
    if (*(_QWORD *)(v12 + 56))
      goto LABEL_41;
  }
  else if (*(_BYTE *)(v12 + 71))
  {
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int");
  v13 = (void **)(v12 + 48);
  if (*(char *)(v12 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v12 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_41:
  *(_QWORD *)(v12 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v12);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 80))(v12, 0);
  *(_DWORD *)(v14 + 104) = 0;
  *(_BYTE *)(v14 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Maximum number of leaves; 0 indicates no limit.");
  std::string::operator=((std::string *)(v14 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_bin");
  v15 = operator new();
  *(_BYTE *)(v15 + 8) = 0;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_WORD *)(v15 + 108) = 0;
  *(_QWORD *)v15 = &unk_24E6B5E08;
  *(_BYTE *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 136) = 0;
  *(_QWORD *)(v15 + 128) = v15 + 136;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 152) = v15 + 160;
  *(_QWORD *)(v15 + 168) = 0;
  std::string::operator=((std::string *)(v15 + 24), &__str);
  if (*(char *)(v15 + 71) < 0)
  {
    if (*(_QWORD *)(v15 + 56))
      goto LABEL_52;
  }
  else if (*(_BYTE *)(v15 + 71))
  {
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int");
  v16 = (void **)(v15 + 48);
  if (*(char *)(v15 + 71) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v15 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_52:
  *(_QWORD *)(v15 + 96) = 20;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 80))(v15, 2);
  *(_DWORD *)(v17 + 104) = 256;
  *(_BYTE *)(v17 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "if using histogram-based algorithm, maximum number of bins per feature");
  std::string::operator=((std::string *)(v17 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "grow_policy");
  v18 = operator new();
  *(_BYTE *)(v18 + 8) = 0;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_WORD *)(v18 + 108) = 0;
  *(_QWORD *)v18 = &unk_24E6B5E08;
  *(_BYTE *)(v18 + 120) = 0;
  *(_QWORD *)(v18 + 136) = 0;
  *(_QWORD *)(v18 + 128) = v18 + 136;
  *(_QWORD *)(v18 + 160) = 0;
  *(_QWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 152) = v18 + 160;
  *(_QWORD *)(v18 + 168) = 0;
  std::string::operator=((std::string *)(v18 + 24), &__str);
  if (*(char *)(v18 + 71) < 0)
  {
    if (*(_QWORD *)(v18 + 56))
      goto LABEL_63;
  }
  else if (*(_BYTE *)(v18 + 71))
  {
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int");
  v19 = (void **)(v18 + 48);
  if (*(char *)(v18 + 71) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v18 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_63:
  *(_QWORD *)(v18 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v18);
  *(_DWORD *)(v18 + 104) = 0;
  *(_BYTE *)(v18 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "depthwise");
  v20 = dmlc::parameter::FieldEntry<int>::add_enum(v18, (const void **)&v73.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "lossguide");
  v21 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v20, (const void **)&v71.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Tree growing policy. 0: favor splitting at nodes closest to the node, i.e. grow depth-wise. 1: favor splitting at nodes with highest loss change. (cf. LightGBM)");
  std::string::operator=(v21 + 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_cat_to_onehot");
  v22 = operator new();
  *(_QWORD *)(v22 + 112) = 0;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_QWORD *)v22 = &unk_24E6BC7E8;
  std::string::operator=((std::string *)(v22 + 24), &__str);
  if (*(char *)(v22 + 71) < 0)
  {
    if (*(_QWORD *)(v22 + 56))
      goto LABEL_78;
  }
  else if (*(_BYTE *)(v22 + 71))
  {
    goto LABEL_78;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int (non-negative)");
  v23 = (void **)(v22 + 48);
  if (*(char *)(v22 + 71) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v22 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_78:
  *(_QWORD *)(v22 + 96) = 28;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v22);
  *(_DWORD *)(v22 + 104) = 4;
  *(_BYTE *)(v22 + 8) = 1;
  v24 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 80))(v22, 1);
  std::string::basic_string[abi:ne180100]<0>(&v73, "Maximum number of categories to use one-hot encoding based split.");
  std::string::operator=(v24 + 3, &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "min_child_weight");
  v25 = operator new();
  *(_QWORD *)(v25 + 112) = 0;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)v25 = 0u;
  *(_QWORD *)v25 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v25 + 24), &__str);
  if (*(char *)(v25 + 71) < 0)
  {
    if (*(_QWORD *)(v25 + 56))
      goto LABEL_89;
  }
  else if (*(_BYTE *)(v25 + 71))
  {
    goto LABEL_89;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v26 = (void **)(v25 + 48);
  if (*(char *)(v25 + 71) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v25 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_89:
  *(_QWORD *)(v25 + 96) = 32;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v25);
  v27 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v25 + 80))(v25, 0.0);
  *(_DWORD *)(v27 + 104) = 1065353216;
  *(_BYTE *)(v27 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Minimum sum of instance weight(hessian) needed in a child.");
  std::string::operator=((std::string *)(v27 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "reg_lambda");
  v28 = operator new();
  *(_QWORD *)(v28 + 112) = 0;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_OWORD *)v28 = 0u;
  *(_QWORD *)v28 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v28 + 24), &__str);
  if (*(char *)(v28 + 71) < 0)
  {
    if (*(_QWORD *)(v28 + 56))
      goto LABEL_100;
  }
  else if (*(_BYTE *)(v28 + 71))
  {
    goto LABEL_100;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v29 = (void **)(v28 + 48);
  if (*(char *)(v28 + 71) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v28 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_100:
  *(_QWORD *)(v28 + 96) = 36;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v28);
  v30 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v28 + 80))(v28, 0.0);
  *(_DWORD *)(v30 + 104) = 1065353216;
  *(_BYTE *)(v30 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "L2 regularization on leaf weight");
  std::string::operator=((std::string *)(v30 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "reg_alpha");
  v31 = operator new();
  *(_QWORD *)(v31 + 112) = 0;
  *(_OWORD *)(v31 + 80) = 0u;
  *(_OWORD *)(v31 + 96) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)v31 = 0u;
  *(_QWORD *)v31 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v31 + 24), &__str);
  if (*(char *)(v31 + 71) < 0)
  {
    if (*(_QWORD *)(v31 + 56))
      goto LABEL_111;
  }
  else if (*(_BYTE *)(v31 + 71))
  {
    goto LABEL_111;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v32 = (void **)(v31 + 48);
  if (*(char *)(v31 + 71) < 0)
    operator delete(*v32);
  *(_OWORD *)v32 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v31 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_111:
  *(_QWORD *)(v31 + 96) = 40;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v31);
  v33 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v31 + 80))(v31, 0.0);
  *(_DWORD *)(v33 + 104) = 0;
  *(_BYTE *)(v33 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "L1 regularization on leaf weight");
  std::string::operator=((std::string *)(v33 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_delta_step");
  v34 = operator new();
  *(_QWORD *)(v34 + 112) = 0;
  *(_OWORD *)(v34 + 80) = 0u;
  *(_OWORD *)(v34 + 96) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)v34 = 0u;
  *(_QWORD *)v34 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v34 + 24), &__str);
  if (*(char *)(v34 + 71) < 0)
  {
    if (*(_QWORD *)(v34 + 56))
      goto LABEL_122;
  }
  else if (*(_BYTE *)(v34 + 71))
  {
    goto LABEL_122;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v35 = (void **)(v34 + 48);
  if (*(char *)(v34 + 71) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v34 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_122:
  *(_QWORD *)(v34 + 96) = 44;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v34);
  v36 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v34 + 80))(v34, 0.0);
  *(_DWORD *)(v36 + 104) = 0;
  *(_BYTE *)(v36 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Maximum delta step we allow each tree's weight estimate to be. If the value is set to 0, it means there is no constraint");
  std::string::operator=((std::string *)(v36 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "subsample");
  v37 = operator new();
  *(_QWORD *)(v37 + 112) = 0;
  *(_OWORD *)(v37 + 80) = 0u;
  *(_OWORD *)(v37 + 96) = 0u;
  *(_OWORD *)(v37 + 48) = 0u;
  *(_OWORD *)(v37 + 64) = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  *(_OWORD *)v37 = 0u;
  *(_QWORD *)v37 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v37 + 24), &__str);
  if (*(char *)(v37 + 71) < 0)
  {
    if (*(_QWORD *)(v37 + 56))
      goto LABEL_133;
  }
  else if (*(_BYTE *)(v37 + 71))
  {
    goto LABEL_133;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v38 = (void **)(v37 + 48);
  if (*(char *)(v37 + 71) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v37 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_133:
  *(_QWORD *)(v37 + 96) = 48;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v37);
  v39 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v37 + 72))(v37, 0.0, 1.0);
  *(_DWORD *)(v39 + 104) = 1065353216;
  *(_BYTE *)(v39 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Row subsample ratio of training instance.");
  std::string::operator=((std::string *)(v39 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "sampling_method");
  v40 = operator new();
  *(_BYTE *)(v40 + 8) = 0;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_WORD *)(v40 + 108) = 0;
  *(_QWORD *)v40 = &unk_24E6B5E08;
  *(_BYTE *)(v40 + 120) = 0;
  *(_QWORD *)(v40 + 136) = 0;
  *(_QWORD *)(v40 + 128) = v40 + 136;
  *(_QWORD *)(v40 + 160) = 0;
  *(_QWORD *)(v40 + 144) = 0;
  *(_QWORD *)(v40 + 152) = v40 + 160;
  *(_QWORD *)(v40 + 168) = 0;
  std::string::operator=((std::string *)(v40 + 24), &__str);
  if (*(char *)(v40 + 71) < 0)
  {
    if (*(_QWORD *)(v40 + 56))
      goto LABEL_144;
  }
  else if (*(_BYTE *)(v40 + 71))
  {
    goto LABEL_144;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "int");
  v41 = (void **)(v40 + 48);
  if (*(char *)(v40 + 71) < 0)
    operator delete(*v41);
  *(_OWORD *)v41 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v40 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_144:
  *(_QWORD *)(v40 + 96) = 52;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v40);
  *(_DWORD *)(v40 + 104) = 0;
  *(_BYTE *)(v40 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "uniform");
  v42 = dmlc::parameter::FieldEntry<int>::add_enum(v40, (const void **)&v73.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v71, "gradient_based");
  v43 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v42, (const void **)&v71.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Sampling method. 0: select random training instances uniformly. 1: select random training instances with higher probability when the gradient and hessian are larger. (cf. CatBoost)");
  std::string::operator=(v43 + 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "colsample_bynode");
  v44 = operator new();
  *(_QWORD *)(v44 + 112) = 0;
  *(_OWORD *)(v44 + 80) = 0u;
  *(_OWORD *)(v44 + 96) = 0u;
  *(_OWORD *)(v44 + 48) = 0u;
  *(_OWORD *)(v44 + 64) = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_OWORD *)v44 = 0u;
  *(_QWORD *)v44 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v44 + 24), &__str);
  if (*(char *)(v44 + 71) < 0)
  {
    if (*(_QWORD *)(v44 + 56))
      goto LABEL_159;
  }
  else if (*(_BYTE *)(v44 + 71))
  {
    goto LABEL_159;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v45 = (void **)(v44 + 48);
  if (*(char *)(v44 + 71) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v44 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_159:
  *(_QWORD *)(v44 + 96) = 56;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v44);
  v46 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v44 + 72))(v44, 0.0, 1.0);
  *(_DWORD *)(v46 + 104) = 1065353216;
  *(_BYTE *)(v46 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Subsample ratio of columns, resample on each node (split).");
  std::string::operator=((std::string *)(v46 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "colsample_bylevel");
  v47 = operator new();
  *(_QWORD *)(v47 + 112) = 0;
  *(_OWORD *)(v47 + 80) = 0u;
  *(_OWORD *)(v47 + 96) = 0u;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_OWORD *)(v47 + 64) = 0u;
  *(_OWORD *)(v47 + 16) = 0u;
  *(_OWORD *)(v47 + 32) = 0u;
  *(_OWORD *)v47 = 0u;
  *(_QWORD *)v47 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v47 + 24), &__str);
  if (*(char *)(v47 + 71) < 0)
  {
    if (*(_QWORD *)(v47 + 56))
      goto LABEL_170;
  }
  else if (*(_BYTE *)(v47 + 71))
  {
    goto LABEL_170;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v48 = (void **)(v47 + 48);
  if (*(char *)(v47 + 71) < 0)
    operator delete(*v48);
  *(_OWORD *)v48 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v47 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_170:
  *(_QWORD *)(v47 + 96) = 60;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v47);
  v49 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v47 + 72))(v47, 0.0, 1.0);
  *(_DWORD *)(v49 + 104) = 1065353216;
  *(_BYTE *)(v49 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Subsample ratio of columns, resample on each level.");
  std::string::operator=((std::string *)(v49 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "colsample_bytree");
  v50 = operator new();
  *(_QWORD *)(v50 + 112) = 0;
  *(_OWORD *)(v50 + 80) = 0u;
  *(_OWORD *)(v50 + 96) = 0u;
  *(_OWORD *)(v50 + 48) = 0u;
  *(_OWORD *)(v50 + 64) = 0u;
  *(_OWORD *)(v50 + 16) = 0u;
  *(_OWORD *)(v50 + 32) = 0u;
  *(_OWORD *)v50 = 0u;
  *(_QWORD *)v50 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v50 + 24), &__str);
  if (*(char *)(v50 + 71) < 0)
  {
    if (*(_QWORD *)(v50 + 56))
      goto LABEL_181;
  }
  else if (*(_BYTE *)(v50 + 71))
  {
    goto LABEL_181;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v51 = (void **)(v50 + 48);
  if (*(char *)(v50 + 71) < 0)
    operator delete(*v51);
  *(_OWORD *)v51 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v50 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_181:
  *(_QWORD *)(v50 + 96) = 64;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v50);
  v52 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v50 + 72))(v50, 0.0, 1.0);
  *(_DWORD *)(v52 + 104) = 1065353216;
  *(_BYTE *)(v52 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Subsample ratio of columns, resample on each tree construction.");
  std::string::operator=((std::string *)(v52 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "sketch_eps");
  v53 = operator new();
  *(_QWORD *)(v53 + 112) = 0;
  *(_OWORD *)(v53 + 80) = 0u;
  *(_OWORD *)(v53 + 96) = 0u;
  *(_OWORD *)(v53 + 48) = 0u;
  *(_OWORD *)(v53 + 64) = 0u;
  *(_OWORD *)(v53 + 16) = 0u;
  *(_OWORD *)(v53 + 32) = 0u;
  *(_OWORD *)v53 = 0u;
  *(_QWORD *)v53 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v53 + 24), &__str);
  if (*(char *)(v53 + 71) < 0)
  {
    if (*(_QWORD *)(v53 + 56))
      goto LABEL_192;
  }
  else if (*(_BYTE *)(v53 + 71))
  {
    goto LABEL_192;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v54 = (void **)(v53 + 48);
  if (*(char *)(v53 + 71) < 0)
    operator delete(*v54);
  *(_OWORD *)v54 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v53 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_192:
  *(_QWORD *)(v53 + 96) = 68;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v53);
  v55 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v53 + 72))(v53, 0.0, 1.0);
  *(_DWORD *)(v55 + 104) = 1022739087;
  *(_BYTE *)(v55 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "EXP Param: Sketch accuracy of approximate algorithm.");
  std::string::operator=((std::string *)(v55 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "sketch_ratio");
  v56 = operator new();
  *(_QWORD *)(v56 + 112) = 0;
  *(_OWORD *)(v56 + 80) = 0u;
  *(_OWORD *)(v56 + 96) = 0u;
  *(_OWORD *)(v56 + 48) = 0u;
  *(_OWORD *)(v56 + 64) = 0u;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_OWORD *)(v56 + 32) = 0u;
  *(_OWORD *)v56 = 0u;
  *(_QWORD *)v56 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v56 + 24), &__str);
  if (*(char *)(v56 + 71) < 0)
  {
    if (*(_QWORD *)(v56 + 56))
      goto LABEL_203;
  }
  else if (*(_BYTE *)(v56 + 71))
  {
    goto LABEL_203;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "float");
  v57 = (void **)(v56 + 48);
  if (*(char *)(v56 + 71) < 0)
    operator delete(*v57);
  *(_OWORD *)v57 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v56 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_203:
  *(_QWORD *)(v56 + 96) = 72;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v56);
  v58 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v56 + 80))(v56, 0.0);
  *(_DWORD *)(v58 + 104) = 0x40000000;
  *(_BYTE *)(v58 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "EXP Param: Sketch accuracy related parameter of approximate algorithm.");
  std::string::operator=((std::string *)(v58 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "cache_opt");
  v59 = operator new();
  *(_OWORD *)(v59 + 80) = 0u;
  *(_OWORD *)(v59 + 96) = 0u;
  *(_OWORD *)(v59 + 48) = 0u;
  *(_OWORD *)(v59 + 64) = 0u;
  *(_OWORD *)(v59 + 16) = 0u;
  *(_OWORD *)(v59 + 32) = 0u;
  *(_OWORD *)v59 = 0u;
  *(_QWORD *)v59 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v59 + 24), &__str);
  if (*(char *)(v59 + 71) < 0)
  {
    if (*(_QWORD *)(v59 + 56))
      goto LABEL_214;
  }
  else if (*(_BYTE *)(v59 + 71))
  {
    goto LABEL_214;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "BOOLean");
  v60 = (void **)(v59 + 48);
  if (*(char *)(v59 + 71) < 0)
    operator delete(*v60);
  *(_OWORD *)v60 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v59 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_214:
  *(_QWORD *)(v59 + 96) = 76;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v59);
  *(_BYTE *)(v59 + 104) = 1;
  *(_BYTE *)(v59 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "EXP Param: Cache aware optimization.");
  std::string::operator=((std::string *)(v59 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "refresh_leaf");
  v61 = operator new();
  *(_OWORD *)(v61 + 80) = 0u;
  *(_OWORD *)(v61 + 96) = 0u;
  *(_OWORD *)(v61 + 48) = 0u;
  *(_OWORD *)(v61 + 64) = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_OWORD *)(v61 + 32) = 0u;
  *(_OWORD *)v61 = 0u;
  *(_QWORD *)v61 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v61 + 24), &__str);
  if (*(char *)(v61 + 71) < 0)
  {
    if (*(_QWORD *)(v61 + 56))
      goto LABEL_225;
  }
  else if (*(_BYTE *)(v61 + 71))
  {
    goto LABEL_225;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "BOOLean");
  v62 = (void **)(v61 + 48);
  if (*(char *)(v61 + 71) < 0)
    operator delete(*v62);
  *(_OWORD *)v62 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v61 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_225:
  *(_QWORD *)(v61 + 96) = 77;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v61);
  *(_BYTE *)(v61 + 104) = 1;
  *(_BYTE *)(v61 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Whether the refresh updater needs to update leaf values.");
  std::string::operator=((std::string *)(v61 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "monotone_constraints");
  v63 = operator new();
  *(_OWORD *)(v63 + 96) = 0u;
  *(_OWORD *)(v63 + 112) = 0u;
  *(_OWORD *)(v63 + 64) = 0u;
  *(_OWORD *)(v63 + 80) = 0u;
  *(_OWORD *)(v63 + 32) = 0u;
  *(_OWORD *)(v63 + 48) = 0u;
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(_QWORD *)v63 = &off_24E6BD3A8;
  std::string::operator=((std::string *)(v63 + 24), &__str);
  if (*(char *)(v63 + 71) < 0)
  {
    if (*(_QWORD *)(v63 + 56))
      goto LABEL_236;
  }
  else if (*(_BYTE *)(v63 + 71))
  {
    goto LABEL_236;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, (char *)&unk_220F8364E);
  v64 = (void **)(v63 + 48);
  if (*(char *)(v63 + 71) < 0)
    operator delete(*v64);
  *(_OWORD *)v64 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v63 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_236:
  *(_QWORD *)(v63 + 96) = 80;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v63);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v63 + 104), 0, 0, 0);
  *(_BYTE *)(v63 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "Constraint of variable monotonicity");
  std::string::operator=((std::string *)(v63 + 72), &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "interaction_constraints");
  v65 = operator new();
  *(_OWORD *)(v65 + 96) = 0u;
  *(_OWORD *)(v65 + 112) = 0u;
  *(_OWORD *)(v65 + 64) = 0u;
  *(_OWORD *)(v65 + 80) = 0u;
  *(_OWORD *)(v65 + 32) = 0u;
  *(_OWORD *)(v65 + 48) = 0u;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)(v65 + 16) = 0u;
  *(_QWORD *)v65 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v65 + 24), &__str);
  if (*(char *)(v65 + 71) < 0)
  {
    if (*(_QWORD *)(v65 + 56))
      goto LABEL_247;
  }
  else if (*(_BYTE *)(v65 + 71))
  {
    goto LABEL_247;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "string");
  v66 = (void **)(v65 + 48);
  if (*(char *)(v65 + 71) < 0)
    operator delete(*v66);
  *(_OWORD *)v66 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v65 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_247:
  *(_QWORD *)(v65 + 96) = 104;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v65);
  std::string::basic_string[abi:ne180100]<0>(&v73, (char *)&unk_220F8364E);
  std::string::operator=((std::string *)(v65 + 104), &v73);
  *(_BYTE *)(v65 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v71, "Constraints for interaction representing permitted interactions.The constraints must be specified in the form of a nest list,e.g. [[0, 1], [2, 3, 4]], where each inner list is a group ofindices of features that are allowed to interact with each other.See tutorial for more information");
  std::string::operator=((std::string *)(v65 + 72), &v71);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "sparse_threshold");
  v67 = operator new();
  *(_QWORD *)(v67 + 128) = 0;
  *(_OWORD *)(v67 + 96) = 0u;
  *(_OWORD *)(v67 + 112) = 0u;
  *(_OWORD *)(v67 + 64) = 0u;
  *(_OWORD *)(v67 + 80) = 0u;
  *(_OWORD *)(v67 + 32) = 0u;
  *(_OWORD *)(v67 + 48) = 0u;
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  *(_QWORD *)v67 = &off_24E6BD488;
  std::string::operator=((std::string *)(v67 + 24), &__str);
  if (*(char *)(v67 + 71) < 0)
  {
    if (*(_QWORD *)(v67 + 56))
      goto LABEL_260;
  }
  else if (*(_BYTE *)(v67 + 71))
  {
    goto LABEL_260;
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "double");
  v68 = (void **)(v67 + 48);
  if (*(char *)(v67 + 71) < 0)
    operator delete(*v68);
  *(_OWORD *)v68 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
  *(_QWORD *)(v67 + 64) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
LABEL_260:
  *(_QWORD *)(v67 + 96) = 128;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v67);
  v69 = (std::string *)(*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v67 + 72))(v67, 0.0, 1.0);
  v69[4].__r_.__value_.__l.__size_ = 0x3FC999999999999ALL;
  v69->__r_.__value_.__s.__data_[8] = 1;
  std::string::basic_string[abi:ne180100]<0>(&v73, "percentage threshold for treating a feature as sparse");
  std::string::operator=(v69 + 3, &v73);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "reg_lambda");
  std::string::basic_string[abi:ne180100]<0>(&__str, "lambda");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v73.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "reg_alpha");
  std::string::basic_string[abi:ne180100]<0>(&__str, "alpha");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v73.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "min_split_loss");
  std::string::basic_string[abi:ne180100]<0>(&__str, "gamma");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v73.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v73, "learning_rate");
  std::string::basic_string[abi:ne180100]<0>(&__str, "eta");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v73.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_220DF9618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t *dmlc::parameter::ParamManager::AddEntry(uint64_t a1, const void **a2, uint64_t a3)
{
  char **v6;
  uint64_t **v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *result;
  char v33;
  const void **v34;

  v6 = (char **)(a1 + 24);
  *(_QWORD *)(a3 + 16) = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
  v7 = (uint64_t **)(a1 + 48);
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"key ", 4);
    v11 = *((char *)a2 + 23);
    if (v11 >= 0)
      v12 = (uint64_t)a2;
    else
      v12 = (uint64_t)*a2;
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a2 + 23);
    else
      v13 = (uint64_t)a2[1];
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" has already been registered in ", 32);
    v16 = *(char *)(a1 + 23);
    if (v16 >= 0)
      v17 = a1;
    else
      v17 = *(_QWORD *)a1;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 23);
    else
      v18 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v20 >= v19)
  {
    v22 = ((char *)v20 - *v6) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v23 = v19 - (_QWORD)*v6;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 40, v25);
    else
      v26 = 0;
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = a3;
    v21 = v27 + 1;
    v30 = *(char **)(a1 + 24);
    v29 = *(char **)(a1 + 32);
    if (v29 != v30)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v27 = v31;
      }
      while (v29 != v30);
      v29 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v27;
    *(_QWORD *)(a1 + 32) = v21;
    *(_QWORD *)(a1 + 40) = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v20 = a3;
    v21 = v20 + 1;
  }
  *(_QWORD *)(a1 + 32) = v21;
  v34 = a2;
  result = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
  result[7] = a3;
  return result;
}

void sub_220DF99A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_220DF9BF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::set_lower_bound(uint64_t result, float a2)
{
  *(float *)(result + 112) = a2;
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t *dmlc::parameter::ParamManager::AddAlias(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t **v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *result;
  const void **v31;

  v6 = (uint64_t **)(a1 + 48);
  if (!std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>(a1 + 48, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"key ", 4);
    v10 = *((char *)a2 + 23);
    if (v10 >= 0)
      v11 = (uint64_t)a2;
    else
      v11 = (uint64_t)*a2;
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)a2 + 23);
    else
      v12 = (uint64_t)a2[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" has not been registered in ", 28);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
  }
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v6, a3))
  {
    v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Alias ", 6);
    v21 = *((char *)a3 + 23);
    if (v21 >= 0)
      v22 = (uint64_t)a3;
    else
      v22 = (uint64_t)*a3;
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)a3 + 23);
    else
      v23 = (uint64_t)a3[1];
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" has already been registered in ", 32);
    v26 = *(char *)(a1 + 23);
    if (v26 >= 0)
      v27 = a1;
    else
      v27 = *(_QWORD *)a1;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a1 + 23);
    else
      v28 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
  }
  v31 = a2;
  v29 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v31)[7];
  v31 = a3;
  result = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  result[7] = v29;
  return result;
}

void sub_220DF9DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::set_lower_bound(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::set_range(uint64_t result, float a2, float a3)
{
  *(float *)(result + 112) = a2;
  *(float *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned int>,unsigned int>::set_lower_bound(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<double>,double>::set_range(uint64_t result, double a2, double a3)
{
  *(double *)(result + 120) = a2;
  *(double *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

void _GLOBAL__sub_I_auc_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  std::string __str;
  void *__p[2];
  char v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "auc");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Receiver Operating Characteristic Area Under the Curve.");
  std::string::operator=(v1 + 1, &__str);
  v11[0] = &off_24E6BA5F0;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v2 = v12;
  if (v12 == v11)
  {
    v3 = 4;
    v2 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_EvalAUC__ = (uint64_t)v1;
  v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "aucpr");
  v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v4, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Area under PR curve for both classification and rank.");
  std::string::operator=(v5 + 1, &__str);
  v11[0] = &off_24E6BA6E8;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_AUCPR__ = (uint64_t)v5;
}

void sub_220DFA080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_survival_metric_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  std::string __str;
  void *__p[2];
  char v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "aft-nloglik");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log likelihood of Accelerated Failure Time model.");
  std::string::operator=(v1 + 1, &__str);
  v11[0] = &off_24E6BE8D8;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v2 = v12;
  if (v12 == v11)
  {
    v3 = 4;
    v2 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_AFTNLogLik__ = (uint64_t)v1;
  v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "interval-regression-accuracy");
  v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v4, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_220F8364E);
  std::string::operator=(v5 + 1, &__str);
  v11[0] = &off_24E6BEAD8;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_IntervalRegressionAccuracy__ = (uint64_t)v5;
}

void sub_220DFA2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_multiclass_metric_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  std::string __str;
  void *__p[2];
  char v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "merror");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Multiclass classification error.");
  std::string::operator=(v1 + 1, &__str);
  v11[0] = &off_24E6BAE98;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v2 = v12;
  if (v12 == v11)
  {
    v3 = 4;
    v2 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_MatchError__ = (uint64_t)v1;
  v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mlogloss");
  v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v4, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Multiclass negative loglikelihood.");
  std::string::operator=(v5 + 1, &__str);
  v11[0] = &off_24E6BAF90;
  v12 = v11;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_MultiLogLoss__ = (uint64_t)v5;
}

void sub_220DFA500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_rank_metric_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string __str;
  void *__p[2];
  char v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "ams");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "AMS metric for higgs.");
  std::string::operator=(v1 + 1, &__str);
  v23[0] = &off_24E6B5EB8;
  v24 = v23;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v23);
  v2 = v24;
  if (v24 == v23)
  {
    v3 = 4;
    v2 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_AMS__ = (uint64_t)v1;
  v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "pre");
  v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v4, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "precision@k for rank.");
  std::string::operator=(v5 + 1, &__str);
  v23[0] = &off_24E6B5FC0;
  v24 = v23;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v23);
  v6 = v24;
  if (v24 == v23)
  {
    v7 = 4;
    v6 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_Precision__ = (uint64_t)v5;
  v8 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "ndcg");
  v9 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v8, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "ndcg@k for rank.");
  std::string::operator=(v9 + 1, &__str);
  v23[0] = &off_24E6B6140;
  v24 = v23;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v9[3].__r_.__value_.__r.__words, (uint64_t)v23);
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_NDCG__ = (uint64_t)v9;
  v12 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "map");
  v13 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v12, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "map@k for rank.");
  std::string::operator=(v13 + 1, &__str);
  v23[0] = &off_24E6B6228;
  v24 = v23;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v13[3].__r_.__value_.__r.__words, (uint64_t)v23);
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_33;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_MAP__ = (uint64_t)v13;
  v16 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "cox-nloglik");
  v17 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v16, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log partial likelihood of Cox proportional hazards model.");
  std::string::operator=(v17 + 1, &__str);
  v23[0] = &off_24E6B6310;
  v24 = v23;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v17[3].__r_.__value_.__r.__words, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_42;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_Cox__ = (uint64_t)v17;
}

void sub_220DFA968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_elementwise_metric_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 *v24;
  std::string *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  std::string *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  std::string *v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 *v36;
  std::string *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  std::string *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string __str;
  void *__p[2];
  char v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rmse");
  v1 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Rooted mean square error.");
  std::string::operator=(v1 + 1, &__str);
  v47[0] = &off_24E6B8C38;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v2 = v48;
  if (v48 == v47)
  {
    v3 = 4;
    v2 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_RMSE__ = (uint64_t)v1;
  v4 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rmsle");
  v5 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v4, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Rooted mean square log error.");
  std::string::operator=(v5 + 1, &__str);
  v47[0] = &off_24E6B8D18;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v5[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v6 = v48;
  if (v48 == v47)
  {
    v7 = 4;
    v6 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_RMSLE__ = (uint64_t)v5;
  v8 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mae");
  v9 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v8, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean absolute error.");
  std::string::operator=(v9 + 1, &__str);
  v47[0] = &off_24E6B8DF8;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v9[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v10 = v48;
  if (v48 == v47)
  {
    v11 = 4;
    v10 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_MAE__ = (uint64_t)v9;
  v12 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mape");
  v13 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v12, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean absolute percentage error.");
  std::string::operator=(v13 + 1, &__str);
  v47[0] = &off_24E6B8ED8;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v13[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v14 = v48;
  if (v48 == v47)
  {
    v15 = 4;
    v14 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_33;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_MAPE__ = (uint64_t)v13;
  v16 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "logloss");
  v17 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v16, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative loglikelihood for logistic regression.");
  std::string::operator=(v17 + 1, &__str);
  v47[0] = &off_24E6B8FB8;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v17[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v18 = v48;
  if (v48 == v47)
  {
    v19 = 4;
    v18 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_42;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_LogLoss__ = (uint64_t)v17;
  v20 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "mphe");
  v21 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v20, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Mean Pseudo-huber error.");
  std::string::operator=(v21 + 1, &__str);
  v47[0] = &off_24E6B9098;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v21[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v22 = v48;
  if (v48 == v47)
  {
    v23 = 4;
    v22 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_51;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_51:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_PseudoErrorLoss__ = (uint64_t)v21;
  v24 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "poisson-nloglik");
  v25 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v24, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative loglikelihood for poisson regression.");
  std::string::operator=(v25 + 1, &__str);
  v47[0] = &off_24E6B9178;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v25[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v26 = v48;
  if (v48 == v47)
  {
    v27 = 4;
    v26 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_60;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_60:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_PossionNegLoglik__ = (uint64_t)v25;
  v28 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gamma-deviance");
  v29 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v28, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Residual deviance for gamma regression.");
  std::string::operator=(v29 + 1, &__str);
  v47[0] = &off_24E6B9258;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v29[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v30 = v48;
  if (v48 == v47)
  {
    v31 = 4;
    v30 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_69;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_69:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_GammaDeviance__ = (uint64_t)v29;
  v32 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gamma-nloglik");
  v33 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v32, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Negative log-likelihood for gamma regression.");
  std::string::operator=(v33 + 1, &__str);
  v47[0] = &off_24E6B9338;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v33[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v34 = v48;
  if (v48 == v47)
  {
    v35 = 4;
    v34 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_78;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_78:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_GammaNLogLik__ = (uint64_t)v33;
  v36 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "error");
  v37 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v36, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Binary classification error.");
  std::string::operator=(v37 + 1, &__str);
  v47[0] = &off_24E6B9418;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v37[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v38 = v48;
  if (v48 == v47)
  {
    v39 = 4;
    v38 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_87;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_87:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_Error__ = (uint64_t)v37;
  v40 = dmlc::Registry<xgboost::MetricReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "tweedie-nloglik");
  v41 = (std::string *)dmlc::Registry<xgboost::MetricReg>::__REGISTER__((uint64_t **)v40, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "tweedie-nloglik@rho for tweedie regression.");
  std::string::operator=(v41 + 1, &__str);
  v47[0] = &off_24E6B94F8;
  v48 = v47;
  std::function<xgboost::Metric * ()(char const*)>::operator=(v41[3].__r_.__value_.__r.__words, (uint64_t)v47);
  v42 = v48;
  if (v48 == v47)
  {
    v43 = 4;
    v42 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_96;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_96:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(__p[0]);
  xgboost::metric::__make_MetricReg_TweedieNLogLik__ = (uint64_t)v41;
}

void sub_220DFB250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::Metric * ()(char const*)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<xgboost::Metric * ()(char const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

__int128 *dmlc::Registry<xgboost::MetricReg>::Get()
{
  unsigned __int8 v0;

  {
    qword_253F37428 = 0;
    dmlc::Registry<xgboost::MetricReg>::Get(void)::inst = 0u;
    unk_253F37400 = 0u;
    xmmword_253F37410 = 0u;
    qword_253F37420 = (uint64_t)&qword_253F37428;
    qword_253F37430 = 0;
    unk_253F37438 = 850045863;
    xmmword_253F37440 = 0u;
    unk_253F37450 = 0u;
    xmmword_253F37460 = 0u;
    qword_253F37470 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::MetricReg>::~Registry, &dmlc::Registry<xgboost::MetricReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::MetricReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::MetricReg>::__REGISTER__(uint64_t **a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v34;

  v4 = (std::mutex *)(a1 + 9);
  std::mutex::lock((std::mutex *)(a1 + 9));
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)(a1 + 6), (const void **)a2))
  {
    v34 = a2;
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7];
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    std::string::operator=((std::string *)v5, (const std::string *)a2);
    v34 = a2;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7] = v5;
    v6 = (unint64_t)a1[5];
    v7 = a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[3];
      v10 = ((char *)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 5), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = (char *)(v15 + 1);
      v18 = (char *)a1[3];
      v17 = (char *)a1[4];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = (uint64_t *)v8;
      a1[5] = (uint64_t *)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = (char *)(v7 + 1);
    }
    v20 = (unint64_t)a1[2];
    a1[4] = (uint64_t *)v8;
    v21 = a1[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = v21 - *a1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)*a1;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v5;
      v22 = (char *)(v28 + 1);
      v31 = (char *)*a1;
      v30 = (char *)a1[1];
      if (v30 != (char *)*a1)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a1;
      }
      *a1 = v28;
      a1[1] = (uint64_t *)v22;
      a1[2] = (uint64_t *)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v21 = v5;
      v22 = (char *)(v21 + 1);
    }
    a1[1] = (uint64_t *)v22;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_220DFB6E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5FC0;
}

{
  *a2 = &off_24E6B8D18;
}

{
  *a2 = &off_24E6BA5F0;
}

{
  *a2 = &off_24E6BAF90;
}

{
  *a2 = &off_24E6BEAD8;
}

void std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5EB8;
}

{
  *a2 = &off_24E6B8C38;
}

{
  *a2 = &off_24E6BAE98;
}

{
  *a2 = &off_24E6BE8D8;
}

void std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B6140;
}

{
  *a2 = &off_24E6B8DF8;
}

{
  *a2 = &off_24E6BA6E8;
}

void std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B6310;
}

{
  *a2 = &off_24E6B8FB8;
}

void std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B6228;
}

{
  *a2 = &off_24E6B8ED8;
}

void std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B94F8;
}

void std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B9418;
}

void std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B9338;
}

void std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B9258;
}

void std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B9178;
}

void std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B9098;
}

void _GLOBAL__sub_I_hinge_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:hinge");
  v1 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Hinge loss. Expects labels to be in [0,1f]");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BAB18;
  v8 = v7;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::obj::__make_ObjFunctionReg_HingeObj__ = (uint64_t)v1;
}

void sub_220DFB9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_aft_obj_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "survival:aft");
  v1 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "AFT loss function");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6B8B30;
  v8 = v7;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::obj::__make_ObjFunctionReg_AFTObj__ = (uint64_t)v1;
}

void sub_220DFBB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_multiclass_obj_cc(xgboost::obj::SoftmaxMultiClassParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __str;
  void *__p[2];
  char v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "multi:softmax");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Softmax for multi-class classification, output class index.");
  std::string::operator=(v2 + 1, &__str);
  v12[0] = &off_24E6BAD10;
  v13 = v12;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v12);
  v3 = v13;
  if (v13 == v12)
  {
    v4 = 4;
    v3 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
  qword_253F36A00 = (uint64_t)v2;
  v5 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "multi:softprob");
  v6 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v5, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Softmax for multi-class classification, output probability distribution.");
  std::string::operator=(v6 + 1, &__str);
  v12[0] = &off_24E6BAE18;
  v13 = v12;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
  qword_253F36A08 = (uint64_t)v6;
}

void sub_220DFBD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(xgboost::obj::SoftmaxMultiClassParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_10);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_10))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SoftmaxMultiClassParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::SoftmaxMultiClassParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::obj::SoftmaxMultiClassParam>::~ParamManagerSingleton, &stru_253F36A10, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_10);
  }
  return &stru_253F36A10;
}

void sub_220DFBE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_10);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::SoftmaxMultiClassParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  std::string *v3;
  std::string __p;
  std::string __stra;

  qword_253F36A48 = 0;
  qword_253F36A50 = 0;
  *(_OWORD *)&stru_253F36A10.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36A10.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36A30 = 0u;
  qword_253F36A40 = (uint64_t)&qword_253F36A48;
  std::string::operator=(&stru_253F36A10, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  v1 = operator new();
  *(_BYTE *)(v1 + 8) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 108) = 0;
  *(_QWORD *)v1 = &unk_24E6B5E08;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 128) = v1 + 136;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = v1 + 160;
  *(_QWORD *)(v1 + 168) = 0;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36A10, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  v3 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 80))(v1, 1);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of output class in the multi-class classification.");
  std::string::operator=(v3 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFC03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36A10);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_rank_obj_cc(xgboost::obj::LambdaRankParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  std::string __str;
  void *__p[2];
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  xgboost::obj::LambdaRankParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:pairwise");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Pairwise rank objective.");
  std::string::operator=(v2 + 1, &__str);
  v16[0] = &off_24E6B97F8;
  v17 = v16;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v16);
  v3 = v17;
  if (v17 == v16)
  {
    v4 = 4;
    v3 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(__p[0]);
  qword_253F368C8 = (uint64_t)v2;
  v5 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:ndcg");
  v6 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v5, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "LambdaRank with NDCG as objective.");
  std::string::operator=(v6 + 1, &__str);
  v16[0] = &off_24E6B9900;
  v17 = v16;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v16);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(__p[0]);
  qword_253F368D0 = (uint64_t)v6;
  v9 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "rank:map");
  v10 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v9, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "LambdaRank with MAP as objective.");
  std::string::operator=(v10 + 1, &__str);
  v16[0] = &off_24E6B9A08;
  v17 = v16;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v10[3].__r_.__value_.__r.__words, (uint64_t)v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(__p[0]);
  qword_253F368D8 = (uint64_t)v10;
}

void sub_220DFC300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *xgboost::obj::LambdaRankParam::__MANAGER__(xgboost::obj::LambdaRankParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_7);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_7))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LambdaRankParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::LambdaRankParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::obj::LambdaRankParam>::~ParamManagerSingleton, &xmmword_253F368E0, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_7);
  }
  return &xmmword_253F368E0;
}

void sub_220DFC42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_7);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::LambdaRankParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  std::string *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string __p;
  std::string __stra;

  qword_253F36918 = 0;
  qword_253F36920 = 0;
  xmmword_253F368E0 = 0u;
  *(_OWORD *)algn_253F368F0 = 0u;
  xmmword_253F36900 = 0u;
  qword_253F36910 = (uint64_t)&qword_253F36918;
  std::string::operator=((std::string *)&xmmword_253F368E0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_pairsample");
  v1 = operator new();
  *(_QWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5730;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, (char *)&unk_220F8364E);
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F368E0, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  v3 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 80))(v1, 1);
  v3[4].__r_.__value_.__l.__size_ = 1;
  v3->__r_.__value_.__s.__data_[8] = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of pair generated for each instance.");
  std::string::operator=(v3 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fix_list_weight");
  v4 = operator new();
  *(_QWORD *)(v4 + 112) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)v4 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v4 + 24), &__p);
  if (*(char *)(v4 + 71) < 0)
  {
    if (*(_QWORD *)(v4 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v4 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "float");
  v5 = (void **)(v4 + 48);
  if (*(char *)(v4 + 71) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v4 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F368E0, (const void **)&__p.__r_.__value_.__l.__data_, v4);
  v6 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v4 + 80))(v4, 0.0);
  *(_DWORD *)(v6 + 104) = 0;
  *(_BYTE *)(v6 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Normalize the weight of each list by this value, if equals 0, no effect will happen");
  std::string::operator=((std::string *)(v6 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFC6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_253F368E0);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::set_lower_bound(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  *(_BYTE *)(result + 112) = 1;
  return result;
}

void _GLOBAL__sub_I_regression_obj_cc(xgboost::obj::RegLossParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  std::string *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  std::string *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 *v25;
  std::string *v26;
  xgboost::obj::PoissonRegressionParam *v27;
  uint64_t v28;
  __int128 *v29;
  std::string *v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 *v33;
  std::string *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 *v37;
  std::string *v38;
  xgboost::obj::TweedieRegressionParam *v39;
  uint64_t v40;
  __int128 *v41;
  std::string *v42;
  _QWORD *v43;
  uint64_t v44;
  std::string __str;
  void *__p[2];
  char v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  xgboost::obj::RegLossParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:squarederror");
  v2 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with squared error.");
  std::string::operator=(v2 + 1, &__str);
  v48[0] = &off_24E6B4980;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v3 = v49;
  if (v49 == v48)
  {
    v4 = 4;
    v3 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360D0 = (uint64_t)v2;
  v5 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:squaredlogerror");
  v6 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v5, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with root mean squared logarithmic error.");
  std::string::operator=(v6 + 1, &__str);
  v48[0] = &off_24E6B4AB0;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v6[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v7 = v49;
  if (v49 == v48)
  {
    v8 = 4;
    v7 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360D8 = (uint64_t)v6;
  v9 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:logistic");
  v10 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v9, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for probability regression task.");
  std::string::operator=(v10 + 1, &__str);
  v48[0] = &off_24E6B4BB8;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v10[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v11 = v49;
  if (v49 == v48)
  {
    v12 = 4;
    v11 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360E0 = (uint64_t)v10;
  v13 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:logistic");
  v14 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v13, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for binary classification task.");
  std::string::operator=(v14 + 1, &__str);
  v48[0] = &off_24E6B4CC0;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v14[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v15 = v49;
  if (v49 == v48)
  {
    v16 = 4;
    v15 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_33:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360E8 = (uint64_t)v14;
  v17 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "binary:logitraw");
  v18 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v17, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Logistic regression for classification, output score before logistic transformation.");
  std::string::operator=(v18 + 1, &__str);
  v48[0] = &off_24E6B4DC8;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v18[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v19 = v49;
  if (v49 == v48)
  {
    v20 = 4;
    v19 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_42;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360F0 = (uint64_t)v18;
  v21 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:linear");
  v22 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v21, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression with squared error.");
  std::string::operator=(v22 + 1, &__str);
  v48[0] = &off_24E6B4ED0;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v22[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v23 = v49;
  if (v49 == v48)
  {
    v24 = 4;
    v23 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_51:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F360F8 = (uint64_t)v22;
  v25 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:pseudohubererror");
  v26 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v25, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Regression Pseudo Huber error.");
  std::string::operator=(v26 + 1, &__str);
  v48[0] = &off_24E6B4F50;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v26[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v27 = (xgboost::obj::PoissonRegressionParam *)v49;
  if (v49 == v48)
  {
    v28 = 4;
    v27 = (xgboost::obj::PoissonRegressionParam *)v48;
  }
  else
  {
    if (!v49)
      goto LABEL_60;
    v28 = 5;
  }
  v27 = (xgboost::obj::PoissonRegressionParam *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_60:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F36100 = (uint64_t)v26;
  xgboost::obj::PoissonRegressionParam::__MANAGER__(v27);
  v29 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "count:poisson");
  v30 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v29, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Poisson regression for count data.");
  std::string::operator=(v30 + 1, &__str);
  v48[0] = &off_24E6B5058;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v30[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v31 = v49;
  if (v49 == v48)
  {
    v32 = 4;
    v31 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_69;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_69:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F36110 = (uint64_t)v30;
  v33 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "survival:cox");
  v34 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v33, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Cox regression for censored survival data (negative labels are considered censored).");
  std::string::operator=(v34 + 1, &__str);
  v48[0] = &off_24E6B5160;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v34[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v35 = v49;
  if (v49 == v48)
  {
    v36 = 4;
    v35 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_78;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_78:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F36118 = (uint64_t)v34;
  v37 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:gamma");
  v38 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v37, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Gamma regression for severity data.");
  std::string::operator=(v38 + 1, &__str);
  v48[0] = &off_24E6B5268;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v38[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v39 = (xgboost::obj::TweedieRegressionParam *)v49;
  if (v49 == v48)
  {
    v40 = 4;
    v39 = (xgboost::obj::TweedieRegressionParam *)v48;
  }
  else
  {
    if (!v49)
      goto LABEL_87;
    v40 = 5;
  }
  v39 = (xgboost::obj::TweedieRegressionParam *)(*(uint64_t (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_87:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F36120 = (uint64_t)v38;
  xgboost::obj::TweedieRegressionParam::__MANAGER__(v39);
  v41 = dmlc::Registry<xgboost::ObjFunctionReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "reg:tweedie");
  v42 = (std::string *)dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__((uint64_t **)v41, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tweedie regression for insurance data.");
  std::string::operator=(v42 + 1, &__str);
  v48[0] = &off_24E6B5370;
  v49 = v48;
  std::function<xgboost::ObjFunction * ()(void)>::operator=(v42[3].__r_.__value_.__r.__words, (uint64_t)v48);
  v43 = v49;
  if (v49 == v48)
  {
    v44 = 4;
    v43 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_96;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_96:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(__p[0]);
  qword_253F36130 = (uint64_t)v42;
}

void sub_220DFCFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::ObjFunction * ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

__int128 *dmlc::Registry<xgboost::ObjFunctionReg>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37180 = 0;
    dmlc::Registry<xgboost::ObjFunctionReg>::Get(void)::inst = 0u;
    *(_OWORD *)algn_253F37158 = 0u;
    xmmword_253F37168 = 0u;
    qword_253F37178 = (uint64_t)&qword_253F37180;
    qword_253F37188 = 0;
    unk_253F37190 = 850045863;
    xmmword_253F37198 = 0u;
    unk_253F371A8 = 0u;
    xmmword_253F371B8 = 0u;
    qword_253F371C8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::ObjFunctionReg>::~Registry, &dmlc::Registry<xgboost::ObjFunctionReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::ObjFunctionReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::ObjFunctionReg>::__REGISTER__(uint64_t **a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v34;

  v4 = (std::mutex *)(a1 + 9);
  std::mutex::lock((std::mutex *)(a1 + 9));
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)(a1 + 6), (const void **)a2))
  {
    v34 = a2;
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7];
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    std::string::operator=((std::string *)v5, (const std::string *)a2);
    v34 = a2;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7] = v5;
    v6 = (unint64_t)a1[5];
    v7 = a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[3];
      v10 = ((char *)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 5), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = (char *)(v15 + 1);
      v18 = (char *)a1[3];
      v17 = (char *)a1[4];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = (uint64_t *)v8;
      a1[5] = (uint64_t *)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = (char *)(v7 + 1);
    }
    v20 = (unint64_t)a1[2];
    a1[4] = (uint64_t *)v8;
    v21 = a1[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = v21 - *a1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)*a1;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v5;
      v22 = (char *)(v28 + 1);
      v31 = (char *)*a1;
      v30 = (char *)a1[1];
      if (v30 != (char *)*a1)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a1;
      }
      *a1 = v28;
      a1[1] = (uint64_t *)v22;
      a1[2] = (uint64_t *)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v21 = v5;
      v22 = (char *)(v21 + 1);
    }
    a1[1] = (uint64_t *)v22;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_220DFD434(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4980;
}

{
  *a2 = &off_24E6B8B30;
}

{
  *a2 = &off_24E6B97F8;
}

{
  *a2 = &off_24E6BAB18;
}

{
  *a2 = &off_24E6BAD10;
}

void std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4AB0;
}

{
  *a2 = &off_24E6B9900;
}

{
  *a2 = &off_24E6BAE18;
}

void std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4BB8;
}

{
  *a2 = &off_24E6B9A08;
}

void std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5370;
}

void std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5268;
}

void std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5160;
}

void std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5058;
}

void std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4F50;
}

void std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4ED0;
}

void std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4DC8;
}

void std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B4CC0;
}

std::string *xgboost::obj::TweedieRegressionParam::__MANAGER__(xgboost::obj::TweedieRegressionParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36128);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36128))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TweedieRegressionParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::TweedieRegressionParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::obj::TweedieRegressionParam>::~ParamManagerSingleton, &stru_253F361C8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36128);
  }
  return &stru_253F361C8;
}

void sub_220DFD64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36128);
  _Unwind_Resume(a1);
}

__int128 *xgboost::obj::PoissonRegressionParam::__MANAGER__(xgboost::obj::PoissonRegressionParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36108);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36108))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PoissonRegressionParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::PoissonRegressionParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::obj::PoissonRegressionParam>::~ParamManagerSingleton, &xmmword_253F36180, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36108);
  }
  return &xmmword_253F36180;
}

void sub_220DFD714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36108);
  _Unwind_Resume(a1);
}

std::string *xgboost::obj::RegLossParam::__MANAGER__(xgboost::obj::RegLossParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "RegLossParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::obj::RegLossParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::obj::RegLossParam>::~ParamManagerSingleton, &stru_253F36138, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals);
  }
  return &stru_253F36138;
}

void sub_220DFD7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::TweedieRegressionParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  std::string __p;
  std::string __stra;

  qword_253F36200 = 0;
  qword_253F36208 = 0;
  *(_OWORD *)&stru_253F361C8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F361C8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F361E8 = 0u;
  qword_253F361F8 = (uint64_t)&qword_253F36200;
  std::string::operator=(&stru_253F361C8, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "tweedie_variance_power");
  v1 = operator new();
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)v1 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "float");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F361C8, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  v3 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v1 + 72))(v1, 1.0, 2.0);
  *(_DWORD *)(v3 + 104) = 1069547520;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Tweedie variance power.  Must be between in range [1, 2).");
  std::string::operator=((std::string *)(v3 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFD988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F361C8);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::PoissonRegressionParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  std::string __p;
  std::string __stra;

  qword_253F361B8 = 0;
  qword_253F361C0 = 0;
  xmmword_253F36180 = 0u;
  *(_OWORD *)algn_253F36190 = 0u;
  xmmword_253F361A0 = 0u;
  qword_253F361B0 = (uint64_t)&qword_253F361B8;
  std::string::operator=((std::string *)&xmmword_253F36180, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_delta_step");
  v1 = operator new();
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)v1 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "float");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36180, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  v3 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v1 + 80))(v1, 0.0);
  *(_DWORD *)(v3 + 104) = 1060320051;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Maximum delta step we allow each weight estimation to be. This parameter is required for possion regression.");
  std::string::operator=((std::string *)(v3 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFDB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_253F36180);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::obj::RegLossParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  std::string *v3;
  std::string __p;
  std::string __stra;

  qword_253F36170 = 0;
  qword_253F36178 = 0;
  *(_OWORD *)&stru_253F36138.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36138.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36158 = 0u;
  qword_253F36168 = (uint64_t)&qword_253F36170;
  std::string::operator=(&stru_253F36138, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale_pos_weight");
  v1 = operator new();
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)v1 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "float");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36138, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  *(_DWORD *)(v1 + 104) = 1065353216;
  *(_BYTE *)(v1 + 8) = 1;
  v3 = (std::string *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v1 + 80))(v1, 0.0);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Scale the weight of positive examples by this factor");
  std::string::operator=(v3 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFDD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36138);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_colmaker_cc(xgboost::tree::ColMakerTrainParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  std::string __str;
  void *__p[2];
  char v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  xgboost::tree::ColMakerTrainParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_colmaker");
  v2 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Grow tree with parallelization over columns.");
  std::string::operator=(v2 + 1, &__str);
  v8[0] = &off_24E6B7F10;
  v9 = v8;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_ColMaker__ = (uint64_t)v2;
}

void sub_220DFDE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *xgboost::tree::ColMakerTrainParam::__MANAGER__(xgboost::tree::ColMakerTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_3);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ColMakerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::ColMakerTrainParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::tree::ColMakerTrainParam>::~ParamManagerSingleton, &stru_253F36758, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_3);
  }
  return &stru_253F36758;
}

void sub_220DFDF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_3);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::tree::ColMakerTrainParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string __stra;
  std::string v15;

  qword_253F36790 = 0;
  qword_253F36798 = 0;
  *(_OWORD *)&stru_253F36758.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36758.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36778 = 0u;
  qword_253F36788 = (uint64_t)&qword_253F36790;
  std::string::operator=(&stru_253F36758, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "opt_dense_col");
  v1 = operator new();
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)v1 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "float");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36758, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  v3 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v1 + 72))(v1, 0.0, 1.0);
  *(_DWORD *)(v3 + 104) = 1065353216;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v15, "EXP Param: speed optimization for dense column.");
  std::string::operator=((std::string *)(v3 + 72), &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "default_direction");
  v4 = operator new();
  *(_BYTE *)(v4 + 8) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_WORD *)(v4 + 108) = 0;
  *(_QWORD *)v4 = &unk_24E6B5E08;
  *(_BYTE *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 128) = v4 + 136;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = v4 + 160;
  *(_QWORD *)(v4 + 168) = 0;
  std::string::operator=((std::string *)(v4 + 24), &__stra);
  if (*(char *)(v4 + 71) < 0)
  {
    if (*(_QWORD *)(v4 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v4 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "int");
  v5 = (void **)(v4 + 48);
  if (*(char *)(v4 + 71) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v4 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36758, (const void **)&__stra.__r_.__value_.__l.__data_, v4);
  *(_DWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v15, "learn");
  v6 = dmlc::parameter::FieldEntry<int>::add_enum(v4, (const void **)&v15.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v12, "left");
  v7 = dmlc::parameter::FieldEntry<int>::add_enum(v6, (const void **)v12, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "right");
  v8 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)__p, 2);
  std::string::basic_string[abi:ne180100]<0>(&v9, "Default direction choice when encountering a missing value");
  std::string::operator=(v8 + 3, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220DFE2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36758);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_approx_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree constructor that uses approximate histogram construction for each node.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BBAE8;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_GlobalHistMaker__ = (uint64_t)v1;
}

void sub_220DFE4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_refresh_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "refresh");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Refresher that refreshes the weight and statistics according to data.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BA9A8;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_TreeRefresher__ = (uint64_t)v1;
}

void sub_220DFE61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_quantile_hist_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_quantile_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Grow tree using quantized histogram.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BC0D0;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_QuantileHistMaker__ = (uint64_t)v1;
}

void sub_220DFE794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_sync_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "sync");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Syncher that synchronize the tree in all distributed nodes.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BAC20;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_TreeSyncher__ = (uint64_t)v1;
}

void sub_220DFE90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_histmaker_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "grow_local_histmaker");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree constructor that uses approximate histogram construction.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6BB108;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_LocalHistMaker__ = (uint64_t)v1;
}

void sub_220DFEA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_prune_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::TreeUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "prune");
  v1 = (std::string *)dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Pruner that prune the tree according to statistics.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6B5618;
  v8 = v7;
  std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::tree::__make_TreeUpdaterReg_TreePruner__ = (uint64_t)v1;
}

void sub_220DFEBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5618;
}

{
  *a2 = &off_24E6B7F10;
}

{
  *a2 = &off_24E6BA9A8;
}

{
  *a2 = &off_24E6BAC20;
}

{
  *a2 = &off_24E6BB108;
}

{
  *a2 = &off_24E6BBAE8;
}

{
  *a2 = &off_24E6BC0D0;
}

__int128 *dmlc::Registry<xgboost::TreeUpdaterReg>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37860 = 0;
    dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst = 0u;
    unk_253F37838 = 0u;
    xmmword_253F37848 = 0u;
    qword_253F37858 = (uint64_t)&qword_253F37860;
    qword_253F37868 = 0;
    unk_253F37870 = 850045863;
    xmmword_253F37878 = 0u;
    unk_253F37888 = 0u;
    xmmword_253F37898 = 0u;
    qword_253F378A8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::TreeUpdaterReg>::~Registry, &dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::TreeUpdaterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::TreeUpdaterReg>::__REGISTER__(uint64_t **a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v34;

  v4 = (std::mutex *)(a1 + 9);
  std::mutex::lock((std::mutex *)(a1 + 9));
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)(a1 + 6), (const void **)a2))
  {
    v34 = a2;
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7];
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    std::string::operator=((std::string *)v5, (const std::string *)a2);
    v34 = a2;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7] = v5;
    v6 = (unint64_t)a1[5];
    v7 = a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[3];
      v10 = ((char *)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 5), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = (char *)(v15 + 1);
      v18 = (char *)a1[3];
      v17 = (char *)a1[4];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = (uint64_t *)v8;
      a1[5] = (uint64_t *)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = (char *)(v7 + 1);
    }
    v20 = (unint64_t)a1[2];
    a1[4] = (uint64_t *)v8;
    v21 = a1[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = v21 - *a1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)*a1;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v5;
      v22 = (char *)(v28 + 1);
      v31 = (char *)*a1;
      v30 = (char *)a1[1];
      if (v30 != (char *)*a1)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a1;
      }
      *a1 = v28;
      a1[1] = (uint64_t *)v22;
      a1[2] = (uint64_t *)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v21 = v5;
      v22 = (char *)(v21 + 1);
    }
    a1[1] = (uint64_t *)v22;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_220DFF07C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_updater_shotgun_cc()
{
  __int128 *v0;
  std::string *v1;
  _QWORD *v2;
  uint64_t v3;
  std::string __str;
  void *__p[2];
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "shotgun");
  v1 = (std::string *)dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__((uint64_t **)v0, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Update linear model according to shotgun coordinate descent algorithm.");
  std::string::operator=(v1 + 1, &__str);
  v7[0] = &off_24E6B8108;
  v8 = v7;
  std::function<xgboost::LinearUpdater * ()(void)>::operator=(v1[3].__r_.__value_.__r.__words, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(__p[0]);
  xgboost::linear::__make_LinearUpdaterReg_ShotgunUpdater__ = (uint64_t)v1;
}

void sub_220DFF19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_updater_coordinate_cc(xgboost::linear::CoordinateParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  std::string __str;
  void *__p[2];
  char v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  xgboost::linear::CoordinateParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "coord_descent");
  v2 = (std::string *)dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Update linear model according to coordinate descent algorithm.");
  std::string::operator=(v2 + 1, &__str);
  v8[0] = &off_24E6B5B18;
  v9 = v8;
  std::function<xgboost::LinearUpdater * ()(void)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  xgboost::linear::__make_LinearUpdaterReg_CoordinateUpdater__ = (uint64_t)v2;
}

void sub_220DFF318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::LinearUpdater * ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B5B18;
}

{
  *a2 = &off_24E6B8108;
}

__int128 *dmlc::Registry<xgboost::LinearUpdaterReg>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F378E8 = 0;
    dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst = 0u;
    unk_253F378C0 = 0u;
    xmmword_253F378D0 = 0u;
    qword_253F378E0 = (uint64_t)&qword_253F378E8;
    qword_253F378F0 = 0;
    unk_253F378F8 = 850045863;
    xmmword_253F37900 = 0u;
    unk_253F37910 = 0u;
    xmmword_253F37920 = 0u;
    qword_253F37930 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::LinearUpdaterReg>::~Registry, &dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::LinearUpdaterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::LinearUpdaterReg>::__REGISTER__(uint64_t **a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v34;

  v4 = (std::mutex *)(a1 + 9);
  std::mutex::lock((std::mutex *)(a1 + 9));
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)(a1 + 6), (const void **)a2))
  {
    v34 = a2;
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7];
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    std::string::operator=((std::string *)v5, (const std::string *)a2);
    v34 = a2;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7] = v5;
    v6 = (unint64_t)a1[5];
    v7 = a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[3];
      v10 = ((char *)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 5), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = (char *)(v15 + 1);
      v18 = (char *)a1[3];
      v17 = (char *)a1[4];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = (uint64_t *)v8;
      a1[5] = (uint64_t *)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = (char *)(v7 + 1);
    }
    v20 = (unint64_t)a1[2];
    a1[4] = (uint64_t *)v8;
    v21 = a1[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = v21 - *a1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)*a1;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v5;
      v22 = (char *)(v28 + 1);
      v31 = (char *)*a1;
      v30 = (char *)a1[1];
      if (v30 != (char *)*a1)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a1;
      }
      *a1 = v28;
      a1[1] = (uint64_t *)v22;
      a1[2] = (uint64_t *)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v21 = v5;
      v22 = (char *)(v21 + 1);
    }
    a1[1] = (uint64_t *)v22;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_220DFF734(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *xgboost::linear::CoordinateParam::__MANAGER__(xgboost::linear::CoordinateParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CoordinateParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::linear::CoordinateParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::linear::CoordinateParam>::~ParamManagerSingleton, &stru_253F36268, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_1);
  }
  return &stru_253F36268;
}

void sub_220DFF7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::linear::CoordinateParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  std::string __p;
  std::string __stra;

  qword_253F362A0 = 0;
  qword_253F362A8 = 0;
  *(_OWORD *)&stru_253F36268.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36268.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36288 = 0u;
  qword_253F36298 = (uint64_t)&qword_253F362A0;
  std::string::operator=(&stru_253F36268, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "top_k");
  v1 = operator new();
  *(_BYTE *)(v1 + 8) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 108) = 0;
  *(_QWORD *)v1 = &unk_24E6B5E08;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 128) = v1 + 136;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = v1 + 160;
  *(_QWORD *)(v1 + 168) = 0;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36268, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 80))(v1, 0);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "The number of top features to select in 'thrifty' feature_selector. The value of zero means using all the features.");
  std::string::operator=((std::string *)(v3 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220DFF9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36268);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_gblinear_cc(xgboost::gbm::GBLinearTrainParam *a1)
{
  __int128 *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  std::string __str;
  void *__p[2];
  char v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
  v1 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gblinear");
  v2 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t **)v1, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Linear booster, implement generalized linear model.");
  std::string::operator=(v2 + 1, &__str);
  v8[0] = &off_24E6B57E0;
  v9 = v8;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v2[3].__r_.__value_.__r.__words, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  xgboost::gbm::__make_GradientBoosterReg_GBLinear__ = (uint64_t)v2;
}

void sub_220DFFB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *xgboost::gbm::GBLinearTrainParam::__MANAGER__(xgboost::gbm::GBLinearTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBLinearTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBLinearTrainParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBLinearTrainParam>::~ParamManagerSingleton, &stru_253F36218, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_0);
  }
  return &stru_253F36218;
}

void sub_220DFFC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBLinearTrainParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  std::string v8;
  std::string __stra;
  std::string v10;

  qword_253F36250 = 0;
  qword_253F36258 = 0;
  *(_OWORD *)&stru_253F36218.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36218.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36238 = 0u;
  qword_253F36248 = (uint64_t)&qword_253F36250;
  std::string::operator=(&stru_253F36218, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "updater");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36218, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v10, "shotgun");
  std::string::operator=((std::string *)(v1 + 104), &v10);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "Update algorithm for linear model. One of shotgun/coord_descent");
  std::string::operator=((std::string *)(v1 + 72), &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "tolerance");
  v3 = operator new();
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "float");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 32;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36218, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  v5 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 80))(v3, 0.0);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v10, "Stop if largest weight update is smaller than this number.");
  std::string::operator=((std::string *)(v5 + 72), &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "max_row_perbatch");
  v6 = operator new();
  *(_QWORD *)(v6 + 128) = 0;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)v6 = &unk_24E6B5730;
  std::string::operator=((std::string *)(v6 + 24), &__stra);
  if (*(char *)(v6 + 71) < 0)
  {
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_32;
  }
  else if (*(_BYTE *)(v6 + 71))
  {
    goto LABEL_32;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, (char *)&unk_220F8364E);
  v7 = (void **)(v6 + 48);
  if (*(char *)(v6 + 71) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
LABEL_32:
  *(_QWORD *)(v6 + 96) = 40;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36218, (const void **)&__stra.__r_.__value_.__l.__data_, v6);
  *(_QWORD *)(v6 + 104) = -1;
  *(_BYTE *)(v6 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v10, "Maximum rows per batch.");
  std::string::operator=((std::string *)(v6 + 72), &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220DFFFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a21 < 0)
    operator delete(__p);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36218);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_gbtree_cc(xgboost::gbm::GBTreeModelParam *a1)
{
  xgboost::gbm::GBTreeTrainParam *v1;
  std::string *v2;
  __int128 *v3;
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 *v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  std::string __str;
  void *__p[2];
  char v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = (xgboost::gbm::GBTreeTrainParam *)xgboost::gbm::GBTreeModelParam::__MANAGER__(a1);
  v2 = xgboost::gbm::GBTreeTrainParam::__MANAGER__(v1);
  xgboost::gbm::DartTrainParam::__MANAGER__((xgboost::gbm::DartTrainParam *)v2);
  v3 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree");
  v4 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t **)v3, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree booster, gradient boosted trees.");
  std::string::operator=(v4 + 1, &__str);
  v14[0] = &off_24E6BB850;
  v15 = v14;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v4[3].__r_.__value_.__r.__words, (uint64_t)v14);
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p[0]);
  qword_253F36AA8 = (uint64_t)v4;
  v7 = dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(__p, "dart");
  v8 = (std::string *)dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__((uint64_t **)v7, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Tree booster, dart.");
  std::string::operator=(v8 + 1, &__str);
  v14[0] = &off_24E6BB8D0;
  v15 = v14;
  std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(v8[3].__r_.__value_.__r.__words, (uint64_t)v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_15;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p[0]);
  qword_253F36AB0 = (uint64_t)v8;
}

void sub_220E00240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

__int128 *dmlc::Registry<xgboost::GradientBoosterReg>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37970 = 0;
    dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst = 0u;
    unk_253F37948 = 0u;
    xmmword_253F37958 = 0u;
    qword_253F37968 = (uint64_t)&qword_253F37970;
    qword_253F37978 = 0;
    unk_253F37980 = 850045863;
    xmmword_253F37988 = 0u;
    unk_253F37998 = 0u;
    xmmword_253F379A8 = 0u;
    qword_253F379B8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::GradientBoosterReg>::~Registry, &dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::GradientBoosterReg>::Get(void)::inst;
}

uint64_t dmlc::Registry<xgboost::GradientBoosterReg>::__REGISTER__(uint64_t **a1, __int128 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v34;

  v4 = (std::mutex *)(a1 + 9);
  std::mutex::lock((std::mutex *)(a1 + 9));
  if (std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)(a1 + 6), (const void **)a2))
  {
    v34 = a2;
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7];
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    std::string::operator=((std::string *)v5, (const std::string *)a2);
    v34 = a2;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v34)[7] = v5;
    v6 = (unint64_t)a1[5];
    v7 = a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[3];
      v10 = ((char *)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 5), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = (char *)(v15 + 1);
      v18 = (char *)a1[3];
      v17 = (char *)a1[4];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = (uint64_t *)v8;
      a1[5] = (uint64_t *)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v8 = (char *)(v7 + 1);
    }
    v20 = (unint64_t)a1[2];
    a1[4] = (uint64_t *)v8;
    v21 = a1[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = v21 - *a1;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v24 = v20 - (_QWORD)*a1;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v26);
      else
        v27 = 0;
      v28 = (uint64_t *)&v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v5;
      v22 = (char *)(v28 + 1);
      v31 = (char *)*a1;
      v30 = (char *)a1[1];
      if (v30 != (char *)*a1)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a1;
      }
      *a1 = v28;
      a1[1] = (uint64_t *)v22;
      a1[2] = (uint64_t *)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v21 = v5;
      v22 = (char *)(v21 + 1);
    }
    a1[1] = (uint64_t *)v22;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_220E00644(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::gbm::$_7,std::allocator<xgboost::gbm::$_7>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BB8D0;
}

void std::__function::__func<xgboost::gbm::$_6,std::allocator<xgboost::gbm::$_6>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BB850;
}

void std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6B57E0;
}

std::string *xgboost::gbm::GBTreeTrainParam::__MANAGER__(xgboost::gbm::GBTreeTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_12);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_12))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBTreeTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeTrainParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeTrainParam>::~ParamManagerSingleton, &stru_253F36AB8, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_12);
  }
  return &stru_253F36AB8;
}

void sub_220E00730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_12);
  _Unwind_Resume(a1);
}

void *xgboost::gbm::GBTreeModelParam::__MANAGER__(xgboost::gbm::GBTreeModelParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GBTreeModelParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeModelParam>::ParamManagerSingleton((uint64_t)&xgboost::gbm::GBTreeModelParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::GBTreeModelParam>::~ParamManagerSingleton, &xgboost::gbm::GBTreeModelParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::gbm::GBTreeModelParam::__MANAGER__(void)::inst;
}

void sub_220E00804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *xgboost::gbm::DartTrainParam::__MANAGER__(xgboost::gbm::DartTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36AA0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36AA0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "DartTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DartTrainParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DartTrainParam>::~ParamManagerSingleton, &xmmword_253F36B00, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36AA0);
  }
  return &xmmword_253F36B00;
}

void sub_220E008CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36AA0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DartTrainParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  std::string __p;
  void *v21[2];
  char v22;
  std::string __stra;
  std::string v24;

  qword_253F36B38 = 0;
  qword_253F36B40 = 0;
  xmmword_253F36B00 = 0u;
  *(_OWORD *)algn_253F36B10 = 0u;
  xmmword_253F36B20 = 0u;
  qword_253F36B30 = (uint64_t)&qword_253F36B38;
  std::string::operator=((std::string *)&xmmword_253F36B00, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "sample_type");
  v1 = operator new();
  *(_BYTE *)(v1 + 8) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 108) = 0;
  *(_QWORD *)v1 = &unk_24E6B5E08;
  *(_BYTE *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 128) = v1 + 136;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = v1 + 160;
  *(_QWORD *)(v1 + 168) = 0;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "int");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  *(_DWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "uniform");
  v3 = dmlc::parameter::FieldEntry<int>::add_enum(v1, (const void **)&v24.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v21, "weighted");
  v4 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)v21, 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Different types of sampling algorithm.");
  std::string::operator=(v4 + 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "normalize_type");
  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_WORD *)(v5 + 108) = 0;
  *(_QWORD *)v5 = &unk_24E6B5E08;
  *(_BYTE *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 128) = v5 + 136;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = v5 + 160;
  *(_QWORD *)(v5 + 168) = 0;
  std::string::operator=((std::string *)(v5 + 24), &__stra);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_23;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "int");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_23:
  *(_QWORD *)(v5 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v5);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "tree");
  v7 = dmlc::parameter::FieldEntry<int>::add_enum(v5, (const void **)&v24.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v21, "forest");
  v8 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v7, (const void **)v21, 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Different types of normalization algorithm.");
  std::string::operator=(v8 + 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "rate_drop");
  v9 = operator new();
  *(_QWORD *)(v9 + 112) = 0;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_QWORD *)v9 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v9 + 24), &__stra);
  if (*(char *)(v9 + 71) < 0)
  {
    if (*(_QWORD *)(v9 + 56))
      goto LABEL_38;
  }
  else if (*(_BYTE *)(v9 + 71))
  {
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "float");
  v10 = (void **)(v9 + 48);
  if (*(char *)(v9 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_38:
  *(_QWORD *)(v9 + 96) = 12;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v9);
  v11 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v9 + 72))(v9, 0.0, 1.0);
  *(_DWORD *)(v11 + 104) = 0;
  *(_BYTE *)(v11 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "Fraction of trees to drop during the dropout.");
  std::string::operator=((std::string *)(v11 + 72), &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "one_drop");
  v12 = operator new();
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_QWORD *)v12 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v12 + 24), &__stra);
  if (*(char *)(v12 + 71) < 0)
  {
    if (*(_QWORD *)(v12 + 56))
      goto LABEL_49;
  }
  else if (*(_BYTE *)(v12 + 71))
  {
    goto LABEL_49;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "BOOLean");
  v13 = (void **)(v12 + 48);
  if (*(char *)(v12 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v12 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_49:
  *(_QWORD *)(v12 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v12);
  *(_BYTE *)(v12 + 104) = 0;
  *(_BYTE *)(v12 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "Whether at least one tree should always be dropped during the dropout.");
  std::string::operator=((std::string *)(v12 + 72), &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "skip_drop");
  v14 = operator new();
  *(_QWORD *)(v14 + 112) = 0;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_QWORD *)v14 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v14 + 24), &__stra);
  if (*(char *)(v14 + 71) < 0)
  {
    if (*(_QWORD *)(v14 + 56))
      goto LABEL_60;
  }
  else if (*(_BYTE *)(v14 + 71))
  {
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "float");
  v15 = (void **)(v14 + 48);
  if (*(char *)(v14 + 71) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v14 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_60:
  *(_QWORD *)(v14 + 96) = 20;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v14);
  v16 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v14 + 72))(v14, 0.0, 1.0);
  *(_DWORD *)(v16 + 104) = 0;
  *(_BYTE *)(v16 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "Probability of skipping the dropout during a boosting iteration.");
  std::string::operator=((std::string *)(v16 + 72), &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "learning_rate");
  v17 = operator new();
  *(_QWORD *)(v17 + 112) = 0;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)v17 = 0u;
  *(_QWORD *)v17 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v17 + 24), &__stra);
  if (*(char *)(v17 + 71) < 0)
  {
    if (*(_QWORD *)(v17 + 56))
      goto LABEL_71;
  }
  else if (*(_BYTE *)(v17 + 71))
  {
    goto LABEL_71;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "float");
  v18 = (void **)(v17 + 48);
  if (*(char *)(v17 + 71) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *(_QWORD *)(v17 + 64) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
LABEL_71:
  *(_QWORD *)(v17 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B00, (const void **)&__stra.__r_.__value_.__l.__data_, v17);
  v19 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v17 + 80))(v17, 0.0);
  *(_DWORD *)(v19 + 104) = 1050253722;
  *(_BYTE *)(v19 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v24, "Learning rate(step size) of update.");
  std::string::operator=((std::string *)(v19 + 72), &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v24, "learning_rate");
  std::string::basic_string[abi:ne180100]<0>(&__stra, "eta");
  dmlc::parameter::ParamManager::AddAlias((uint64_t)&xmmword_253F36B00, (const void **)&v24.__r_.__value_.__l.__data_, (const void **)&__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_220E01158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_253F36B00);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_tree_model_cc(xgboost::TreeParam *a1)
{
  xgboost::tree::TrainParam *v1;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  std::string *v5;
  xgboost::GraphvizParam *v6;
  uint64_t v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  std::string __str;
  std::string __p;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = (xgboost::tree::TrainParam *)xgboost::TreeParam::__MANAGER__(a1);
  xgboost::tree::TrainParam::__MANAGER__(v1);
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "text");
  v2 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__(&__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump text representation of tree");
  std::string::operator=(v2 + 1, &__str);
  v13[0] = &off_24E6BD538;
  v14 = v13;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v2[3].__r_.__value_.__r.__words, v13);
  v3 = v14;
  if (v14 == v13)
  {
    v4 = 4;
    v3 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36C40 = (uint64_t)v2;
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "json");
  v5 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__(&__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump json representation of tree");
  std::string::operator=(v5 + 1, &__str);
  v13[0] = &off_24E6BD6D0;
  v14 = v13;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v5[3].__r_.__value_.__r.__words, v13);
  v6 = (xgboost::GraphvizParam *)v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = (xgboost::GraphvizParam *)v13;
  }
  else
  {
    if (!v14)
      goto LABEL_15;
    v7 = 5;
  }
  v6 = (xgboost::GraphvizParam *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_15:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36C48 = (uint64_t)v5;
  xgboost::GraphvizParam::__MANAGER__(v6);
  dmlc::Registry<xgboost::TreeGenReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "dot");
  v8 = (std::string *)dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__(&__p);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Dump graphviz representation of tree");
  std::string::operator=(v8 + 1, &__str);
  v13[0] = &off_24E6BD7D8;
  v14 = v13;
  std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(v8[3].__r_.__value_.__r.__words, v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_24;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36C58 = (uint64_t)v8;
}

void sub_220E014BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_220E01748(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

__int128 *dmlc::Registry<xgboost::TreeGenReg>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_14);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_14))
  {
    qword_253F37058 = 0;
    qword_253F37050 = 0;
    xmmword_253F37018 = 0u;
    *(_OWORD *)&qword_253F37028 = 0u;
    xmmword_253F37038 = 0u;
    qword_253F37048 = (uint64_t)&qword_253F37050;
    qword_253F37060 = 850045863;
    xmmword_253F37068 = 0u;
    xmmword_253F37078 = 0u;
    xmmword_253F37088 = 0u;
    qword_253F37098 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::TreeGenReg>::~Registry, &xmmword_253F37018, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_14);
  }
  return &xmmword_253F37018;
}

uint64_t dmlc::Registry<xgboost::TreeGenReg>::__REGISTER__(std::string *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  std::string *v25;

  std::mutex::lock((std::mutex *)&qword_253F37060);
  v2 = qword_253F37050;
  if (!qword_253F37050)
  {
LABEL_6:
    v3 = operator new();
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    std::string::operator=((std::string *)v3, a1);
    v25 = a1;
    std::__tree<std::__value_type<std::string,xgboost::TreeGenReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::TreeGenReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::TreeGenReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7] = v3;
    v4 = (char *)xmmword_253F37038;
    if ((unint64_t)xmmword_253F37038 >= *((_QWORD *)&xmmword_253F37038 + 1))
    {
      v6 = qword_253F37030;
      v7 = ((uint64_t)xmmword_253F37038 - qword_253F37030) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]();
      v9 = *((_QWORD *)&xmmword_253F37038 + 1) - qword_253F37030;
      if ((*((_QWORD *)&xmmword_253F37038 + 1) - qword_253F37030) >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          goto LABEL_43;
        v11 = (char *)operator new(8 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = (uint64_t *)&v11[8 * v7];
      *v12 = v3;
      v5 = v12 + 1;
      if (v4 != (char *)v6)
      {
        do
        {
          v13 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *--v12 = v13;
        }
        while (v4 != (char *)v6);
        v4 = (char *)qword_253F37030;
      }
      qword_253F37030 = (uint64_t)v12;
      *(_QWORD *)&xmmword_253F37038 = v5;
      *((_QWORD *)&xmmword_253F37038 + 1) = &v11[8 * v10];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)xmmword_253F37038 = v3;
      v5 = v4 + 8;
    }
    *(_QWORD *)&xmmword_253F37038 = v5;
    v14 = (char *)*((_QWORD *)&xmmword_253F37018 + 1);
    if (*((_QWORD *)&xmmword_253F37018 + 1) < (unint64_t)qword_253F37028)
    {
      **((_QWORD **)&xmmword_253F37018 + 1) = v3;
      v15 = v14 + 8;
LABEL_41:
      *((_QWORD *)&xmmword_253F37018 + 1) = v15;
      goto LABEL_42;
    }
    v16 = (char *)xmmword_253F37018;
    v17 = (uint64_t)(*((_QWORD *)&xmmword_253F37018 + 1) - xmmword_253F37018) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<xgboost::TreeGenReg const*>::__throw_length_error[abi:ne180100]();
    v19 = qword_253F37028 - xmmword_253F37018;
    if ((qword_253F37028 - (uint64_t)xmmword_253F37018) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (!v20)
    {
      v21 = 0;
      goto LABEL_36;
    }
    if (!(v20 >> 61))
    {
      v21 = (char *)operator new(8 * v20);
LABEL_36:
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v3;
      v15 = v22 + 1;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v22 = v23;
        }
        while (v14 != v16);
        v14 = (char *)xmmword_253F37018;
      }
      *(_QWORD *)&xmmword_253F37018 = v22;
      *((_QWORD *)&xmmword_253F37018 + 1) = v15;
      qword_253F37028 = (uint64_t)&v21[8 * v20];
      if (v14)
        operator delete(v14);
      goto LABEL_41;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, (const void **)&a1->__r_.__value_.__l.__data_, (const void **)(v2 + 32)))
  {
LABEL_5:
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_6;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, (const void **)(v2 + 32), (const void **)&a1->__r_.__value_.__l.__data_))
  {
    v2 += 8;
    goto LABEL_5;
  }
  v25 = a1;
  v3 = std::__tree<std::__value_type<std::string,xgboost::TreeGenReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::TreeGenReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::TreeGenReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7];
LABEL_42:
  std::mutex::unlock((std::mutex *)&qword_253F37060);
  return v3;
}

void sub_220E01A98(_Unwind_Exception *a1)
{
  std::mutex::unlock((std::mutex *)&qword_253F37060);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,xgboost::TreeGenReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::TreeGenReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::TreeGenReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F37050;
  if (!qword_253F37050)
  {
    v5 = &qword_253F37050;
    v6 = &qword_253F37050;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F37048)
    {
      qword_253F37048 = *(_QWORD *)qword_253F37048;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F37050, v12);
    ++qword_253F37058;
    return v9;
  }
  v5 = &qword_253F37050;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37058, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E01BEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::$_3,std::allocator<xgboost::$_3>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BD7D8;
}

void std::__function::__func<xgboost::$_2,std::allocator<xgboost::$_2>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BD6D0;
}

void std::__function::__func<xgboost::$_1,std::allocator<xgboost::$_1>,xgboost::TreeGenerator * ()(xgboost::FeatureMap const&,std::string,BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BD538;
}

void *xgboost::TreeParam::__MANAGER__(xgboost::TreeParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TreeParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::TreeParam>::ParamManagerSingleton((uint64_t)&xgboost::TreeParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::TreeParam>::~ParamManagerSingleton, &xgboost::TreeParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::TreeParam::__MANAGER__(void)::inst;
}

void sub_220E01CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *xgboost::tree::TrainParam::__MANAGER__(xgboost::tree::TrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::TrainParam>::ParamManagerSingleton((uint64_t)&xgboost::tree::TrainParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::tree::TrainParam>::~ParamManagerSingleton, &xgboost::tree::TrainParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::tree::TrainParam::__MANAGER__(void)::inst;
}

void sub_220E01DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *xgboost::GraphvizParam::__MANAGER__(xgboost::GraphvizParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36C50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36C50))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GraphvizParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::GraphvizParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::GraphvizParam>::~ParamManagerSingleton, &stru_253F36FD0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36C50);
  }
  return &stru_253F36FD0;
}

void sub_220E01E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36C50);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::TreeParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _DWORD v12[7];

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v4 = 0x100000001;
  std::string::operator=((std::string *)a1, a2);
  xgboost::TreeParam::__DECLARE__((uint64_t)&v4, a1);
  return a1;
}

void sub_220E01F1C(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::tree::TrainParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[28];
  int v5;
  void *v6[2];
  void *__p[2];
  __int128 v8;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  v5 = 4;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  std::string::operator=((std::string *)a1, a2);
  xgboost::tree::TrainParam::__DECLARE__((uint64_t)v4, a1);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[1]);
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return a1;
}

void sub_220E01FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  dmlc::parameter::ParamManager *v2;
  va_list va;

  va_start(va, a2);
  xgboost::tree::TrainParam::~TrainParam((void **)va);
  dmlc::parameter::ParamManager::~ParamManager(v2);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::GraphvizParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  std::string v13;
  std::string __stra;
  std::string v15;

  qword_253F37010 = 0;
  qword_253F37008 = 0;
  *(_OWORD *)&stru_253F36FD0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36FD0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36FF0 = 0u;
  qword_253F37000 = (uint64_t)&qword_253F37008;
  std::string::operator=(&stru_253F36FD0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "yes_color");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v15, "#0000FF");
  std::string::operator=((std::string *)(v1 + 104), &v15);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Edge color when meets the node condition.");
  std::string::operator=((std::string *)(v1 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "no_color");
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)v3 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 32;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  std::string::basic_string[abi:ne180100]<0>(&v15, "#FF0000");
  std::string::operator=((std::string *)(v3 + 104), &v15);
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Edge color when doesn't meet the node condition.");
  std::string::operator=((std::string *)(v3 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "rankdir");
  v5 = operator new();
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v5 + 24), &__stra);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_34;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_34:
  *(_QWORD *)(v5 + 96) = 56;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v5);
  std::string::basic_string[abi:ne180100]<0>(&v15, "TB");
  std::string::operator=((std::string *)(v5 + 104), &v15);
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Passed to graphiz via graph_attr.");
  std::string::operator=((std::string *)(v5 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "condition_node_params");
  v7 = operator new();
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)v7 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v7 + 24), &__stra);
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_47;
  }
  else if (*(_BYTE *)(v7 + 71))
  {
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v8 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_47:
  *(_QWORD *)(v7 + 96) = 80;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v7);
  std::string::basic_string[abi:ne180100]<0>(&v15, (char *)&unk_220F8364E);
  std::string::operator=((std::string *)(v7 + 104), &v15);
  *(_BYTE *)(v7 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Conditional node configuration");
  std::string::operator=((std::string *)(v7 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "leaf_node_params");
  v9 = operator new();
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)v9 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v9 + 24), &__stra);
  if (*(char *)(v9 + 71) < 0)
  {
    if (*(_QWORD *)(v9 + 56))
      goto LABEL_60;
  }
  else if (*(_BYTE *)(v9 + 71))
  {
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v10 = (void **)(v9 + 48);
  if (*(char *)(v9 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_60:
  *(_QWORD *)(v9 + 96) = 104;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v9);
  std::string::basic_string[abi:ne180100]<0>(&v15, (char *)&unk_220F8364E);
  std::string::operator=((std::string *)(v9 + 104), &v15);
  *(_BYTE *)(v9 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Leaf node configuration");
  std::string::operator=((std::string *)(v9 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "graph_attrs");
  v11 = operator new();
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)v11 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v11 + 24), &__stra);
  if (*(char *)(v11 + 71) < 0)
  {
    if (*(_QWORD *)(v11 + 56))
      goto LABEL_73;
  }
  else if (*(_BYTE *)(v11 + 71))
  {
    goto LABEL_73;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "string");
  v12 = (void **)(v11 + 48);
  if (*(char *)(v11 + 71) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v11 + 64) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
LABEL_73:
  *(_QWORD *)(v11 + 96) = 128;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36FD0, (const void **)&__stra.__r_.__value_.__l.__data_, v11);
  std::string::basic_string[abi:ne180100]<0>(&v15, (char *)&unk_220F8364E);
  std::string::operator=((std::string *)(v11 + 104), &v15);
  *(_BYTE *)(v11 + 8) = 1;
  std::string::operator=((std::string *)(v11 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220E02784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 97) < 0)
    operator delete(*(void **)(v9 - 120));
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  if (*(char *)(v9 - 73) < 0)
    operator delete(*(void **)(v9 - 96));
  xgboost::GraphvizParam::~GraphvizParam(&a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36FD0);
  _Unwind_Resume(a1);
}

std::string *xgboost::gbm::DeprecatedGBLinearModelParam::__MANAGER__(xgboost::gbm::DeprecatedGBLinearModelParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_4);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "DeprecatedGBLinearModelParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::~ParamManagerSingleton, &stru_253F367A8, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_4);
  }
  return &stru_253F367A8;
}

void sub_220E028F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_4);
  _Unwind_Resume(a1);
}

std::string *dmlc::parameter::ParamManagerSingleton<xgboost::gbm::DeprecatedGBLinearModelParam>::ParamManagerSingleton(std::string *__str)
{
  qword_253F367E0 = 0;
  qword_253F367E8 = 0;
  *(_OWORD *)&stru_253F367A8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F367A8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F367C8 = 0u;
  qword_253F367D8 = (uint64_t)&qword_253F367E0;
  return std::string::operator=(&stru_253F367A8, __str);
}

void sub_220E02964(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F367A8);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_data_cc(dmlc::data::LibSVMParserParam *a1)
{
  std::string *v1;
  std::string *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t k;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t m;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  std::string __p;
  std::string *p_p;

  v1 = dmlc::data::LibSVMParserParam::__MANAGER__(a1);
  v2 = dmlc::data::LibFMParserParam::__MANAGER__((dmlc::data::LibFMParserParam *)v1);
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v2);
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "libsvm");
  v3 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v3 + 72) = &dmlc::data::CreateLibSVMParser<unsigned int,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F362F8 = v3;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "libsvm");
  v4 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v4 + 72) = &dmlc::data::CreateLibSVMParser<unsigned long long,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36300 = v4;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "libfm");
  v5 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v5 + 72) = &dmlc::data::CreateLibFMParser<unsigned int,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36308 = v5;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "libfm");
  v6 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v6 + 72) = &dmlc::data::CreateLibFMParser<unsigned long long,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36310 = v6;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  v7 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v7 + 72) = &dmlc::data::CreateCSVParser<unsigned int,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36318 = v7;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  v8 = dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__(&__p);
  *(_QWORD *)(v8 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,float>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36320 = v8;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  std::mutex::lock((std::mutex *)&qword_253F364F0);
  for (i = qword_253F364E0; i; i = *(_QWORD *)i)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(i + 32)))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, (const void **)(i + 32), (const void **)&__p.__r_.__value_.__l.__data_))
      {
        p_p = &__p;
        v10 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7];
        goto LABEL_54;
      }
      i += 8;
    }
  }
  v10 = operator new();
  *(_QWORD *)(v10 + 96) = 0;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  std::string::operator=((std::string *)v10, &__p);
  p_p = &__p;
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7] = v10;
  v11 = (char *)xmmword_253F364C8;
  if ((unint64_t)xmmword_253F364C8 >= *((_QWORD *)&xmmword_253F364C8 + 1))
  {
    v13 = qword_253F364C0;
    v14 = ((uint64_t)xmmword_253F364C8 - qword_253F364C0) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&xmmword_253F364C8 + 1) - qword_253F364C0;
    if ((*((_QWORD *)&xmmword_253F364C8 + 1) - qword_253F364C0) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        goto LABEL_186;
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    *v19 = v10;
    v12 = v19 + 1;
    if (v11 != (char *)v13)
    {
      do
      {
        v20 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v19 = v20;
      }
      while (v11 != (char *)v13);
      v11 = (char *)qword_253F364C0;
    }
    qword_253F364C0 = (uint64_t)v19;
    *(_QWORD *)&xmmword_253F364C8 = v12;
    *((_QWORD *)&xmmword_253F364C8 + 1) = &v18[8 * v17];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)xmmword_253F364C8 = v10;
    v12 = v11 + 8;
  }
  *(_QWORD *)&xmmword_253F364C8 = v12;
  v21 = (char *)*((_QWORD *)&xmmword_253F364A8 + 1);
  if (*((_QWORD *)&xmmword_253F364A8 + 1) >= (unint64_t)qword_253F364B8)
  {
    v23 = (char *)xmmword_253F364A8;
    v24 = (uint64_t)(*((_QWORD *)&xmmword_253F364A8 + 1) - xmmword_253F364A8) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v26 = qword_253F364B8 - xmmword_253F364A8;
    if ((qword_253F364B8 - (uint64_t)xmmword_253F364A8) >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (!v27)
    {
      v28 = 0;
      goto LABEL_48;
    }
    if (!(v27 >> 61))
    {
      v28 = (char *)operator new(8 * v27);
LABEL_48:
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v10;
      v22 = v29 + 1;
      if (v21 != v23)
      {
        do
        {
          v30 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v29 = v30;
        }
        while (v21 != v23);
        v21 = (char *)xmmword_253F364A8;
      }
      *(_QWORD *)&xmmword_253F364A8 = v29;
      *((_QWORD *)&xmmword_253F364A8 + 1) = v22;
      qword_253F364B8 = (uint64_t)&v28[8 * v27];
      if (v21)
        operator delete(v21);
      goto LABEL_53;
    }
LABEL_186:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  **((_QWORD **)&xmmword_253F364A8 + 1) = v10;
  v22 = v21 + 8;
LABEL_53:
  *((_QWORD *)&xmmword_253F364A8 + 1) = v22;
LABEL_54:
  std::mutex::unlock((std::mutex *)&qword_253F364F0);
  *(_QWORD *)(v10 + 72) = &dmlc::data::CreateCSVParser<unsigned int,int>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36328 = v10;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  std::mutex::lock((std::mutex *)&qword_253F36688);
  for (j = qword_253F36678; j; j = *(_QWORD *)j)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(j + 32)))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, (const void **)(j + 32), (const void **)&__p.__r_.__value_.__l.__data_))
      {
        p_p = &__p;
        v32 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7];
        goto LABEL_97;
      }
      j += 8;
    }
  }
  v32 = operator new();
  *(_QWORD *)(v32 + 96) = 0;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  std::string::operator=((std::string *)v32, &__p);
  p_p = &__p;
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7] = v32;
  v33 = (char *)xmmword_253F36660;
  if ((unint64_t)xmmword_253F36660 >= *((_QWORD *)&xmmword_253F36660 + 1))
  {
    v35 = qword_253F36658;
    v36 = ((uint64_t)xmmword_253F36660 - qword_253F36658) >> 3;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v38 = *((_QWORD *)&xmmword_253F36660 + 1) - qword_253F36658;
    if ((*((_QWORD *)&xmmword_253F36660 + 1) - qword_253F36658) >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 61)
        goto LABEL_187;
      v40 = (char *)operator new(8 * v39);
    }
    else
    {
      v40 = 0;
    }
    v41 = (uint64_t *)&v40[8 * v36];
    *v41 = v32;
    v34 = v41 + 1;
    if (v33 != (char *)v35)
    {
      do
      {
        v42 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v41 = v42;
      }
      while (v33 != (char *)v35);
      v33 = (char *)qword_253F36658;
    }
    qword_253F36658 = (uint64_t)v41;
    *(_QWORD *)&xmmword_253F36660 = v34;
    *((_QWORD *)&xmmword_253F36660 + 1) = &v40[8 * v39];
    if (v33)
      operator delete(v33);
  }
  else
  {
    *(_QWORD *)xmmword_253F36660 = v32;
    v34 = v33 + 8;
  }
  *(_QWORD *)&xmmword_253F36660 = v34;
  v43 = (char *)*((_QWORD *)&xmmword_253F36640 + 1);
  if (*((_QWORD *)&xmmword_253F36640 + 1) >= (unint64_t)qword_253F36650)
  {
    v45 = (char *)xmmword_253F36640;
    v46 = (uint64_t)(*((_QWORD *)&xmmword_253F36640 + 1) - xmmword_253F36640) >> 3;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v48 = qword_253F36650 - xmmword_253F36640;
    if ((qword_253F36650 - (uint64_t)xmmword_253F36640) >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (!v49)
    {
      v50 = 0;
      goto LABEL_91;
    }
    if (!(v49 >> 61))
    {
      v50 = (char *)operator new(8 * v49);
LABEL_91:
      v51 = (uint64_t *)&v50[8 * v46];
      *v51 = v32;
      v44 = v51 + 1;
      if (v43 != v45)
      {
        do
        {
          v52 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *--v51 = v52;
        }
        while (v43 != v45);
        v43 = (char *)xmmword_253F36640;
      }
      *(_QWORD *)&xmmword_253F36640 = v51;
      *((_QWORD *)&xmmword_253F36640 + 1) = v44;
      qword_253F36650 = (uint64_t)&v50[8 * v49];
      if (v43)
        operator delete(v43);
      goto LABEL_96;
    }
LABEL_187:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  **((_QWORD **)&xmmword_253F36640 + 1) = v32;
  v44 = v43 + 8;
LABEL_96:
  *((_QWORD *)&xmmword_253F36640 + 1) = v44;
LABEL_97:
  std::mutex::unlock((std::mutex *)&qword_253F36688);
  *(_QWORD *)(v32 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,int>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36330 = v32;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  std::mutex::lock((std::mutex *)&qword_253F36578);
  for (k = qword_253F36568; k; k = *(_QWORD *)k)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(k + 32)))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, (const void **)(k + 32), (const void **)&__p.__r_.__value_.__l.__data_))
      {
        p_p = &__p;
        v54 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7];
        goto LABEL_140;
      }
      k += 8;
    }
  }
  v54 = operator new();
  *(_QWORD *)(v54 + 96) = 0;
  *(_OWORD *)(v54 + 64) = 0u;
  *(_OWORD *)(v54 + 80) = 0u;
  *(_OWORD *)(v54 + 32) = 0u;
  *(_OWORD *)(v54 + 48) = 0u;
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  std::string::operator=((std::string *)v54, &__p);
  p_p = &__p;
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7] = v54;
  v55 = (char *)xmmword_253F36550;
  if ((unint64_t)xmmword_253F36550 >= *((_QWORD *)&xmmword_253F36550 + 1))
  {
    v57 = qword_253F36548;
    v58 = ((uint64_t)xmmword_253F36550 - qword_253F36548) >> 3;
    v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v60 = *((_QWORD *)&xmmword_253F36550 + 1) - qword_253F36548;
    if ((*((_QWORD *)&xmmword_253F36550 + 1) - qword_253F36548) >> 2 > v59)
      v59 = v60 >> 2;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v59;
    if (v61)
    {
      if (v61 >> 61)
        goto LABEL_188;
      v62 = (char *)operator new(8 * v61);
    }
    else
    {
      v62 = 0;
    }
    v63 = (uint64_t *)&v62[8 * v58];
    *v63 = v54;
    v56 = v63 + 1;
    if (v55 != (char *)v57)
    {
      do
      {
        v64 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *--v63 = v64;
      }
      while (v55 != (char *)v57);
      v55 = (char *)qword_253F36548;
    }
    qword_253F36548 = (uint64_t)v63;
    *(_QWORD *)&xmmword_253F36550 = v56;
    *((_QWORD *)&xmmword_253F36550 + 1) = &v62[8 * v61];
    if (v55)
      operator delete(v55);
  }
  else
  {
    *(_QWORD *)xmmword_253F36550 = v54;
    v56 = v55 + 8;
  }
  *(_QWORD *)&xmmword_253F36550 = v56;
  v65 = (char *)*((_QWORD *)&xmmword_253F36530 + 1);
  if (*((_QWORD *)&xmmword_253F36530 + 1) >= (unint64_t)qword_253F36540)
  {
    v67 = (char *)xmmword_253F36530;
    v68 = (uint64_t)(*((_QWORD *)&xmmword_253F36530 + 1) - xmmword_253F36530) >> 3;
    v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v70 = qword_253F36540 - xmmword_253F36530;
    if ((qword_253F36540 - (uint64_t)xmmword_253F36530) >> 2 > v69)
      v69 = v70 >> 2;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
      v71 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    if (!v71)
    {
      v72 = 0;
      goto LABEL_134;
    }
    if (!(v71 >> 61))
    {
      v72 = (char *)operator new(8 * v71);
LABEL_134:
      v73 = (uint64_t *)&v72[8 * v68];
      *v73 = v54;
      v66 = v73 + 1;
      if (v65 != v67)
      {
        do
        {
          v74 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *--v73 = v74;
        }
        while (v65 != v67);
        v65 = (char *)xmmword_253F36530;
      }
      *(_QWORD *)&xmmword_253F36530 = v73;
      *((_QWORD *)&xmmword_253F36530 + 1) = v66;
      qword_253F36540 = (uint64_t)&v72[8 * v71];
      if (v65)
        operator delete(v65);
      goto LABEL_139;
    }
LABEL_188:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  **((_QWORD **)&xmmword_253F36530 + 1) = v54;
  v66 = v65 + 8;
LABEL_139:
  *((_QWORD *)&xmmword_253F36530 + 1) = v66;
LABEL_140:
  std::mutex::unlock((std::mutex *)&qword_253F36578);
  *(_QWORD *)(v54 + 72) = &dmlc::data::CreateCSVParser<unsigned int,long long>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36338 = v54;
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__p, "csv");
  std::mutex::lock((std::mutex *)&qword_253F36710);
  for (m = qword_253F36700; m; m = *(_QWORD *)m)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(m + 32)))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, (const void **)(m + 32), (const void **)&__p.__r_.__value_.__l.__data_))
      {
        p_p = &__p;
        v76 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7];
        goto LABEL_183;
      }
      m += 8;
    }
  }
  v76 = operator new();
  *(_QWORD *)(v76 + 96) = 0;
  *(_OWORD *)(v76 + 64) = 0u;
  *(_OWORD *)(v76 + 80) = 0u;
  *(_OWORD *)(v76 + 32) = 0u;
  *(_OWORD *)(v76 + 48) = 0u;
  *(_OWORD *)v76 = 0u;
  *(_OWORD *)(v76 + 16) = 0u;
  std::string::operator=((std::string *)v76, &__p);
  p_p = &__p;
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&p_p)[7] = v76;
  v77 = (char *)xmmword_253F366E8;
  if ((unint64_t)xmmword_253F366E8 >= *((_QWORD *)&xmmword_253F366E8 + 1))
  {
    v79 = qword_253F366E0;
    v80 = ((uint64_t)xmmword_253F366E8 - qword_253F366E0) >> 3;
    v81 = v80 + 1;
    if ((unint64_t)(v80 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v82 = *((_QWORD *)&xmmword_253F366E8 + 1) - qword_253F366E0;
    if ((*((_QWORD *)&xmmword_253F366E8 + 1) - qword_253F366E0) >> 2 > v81)
      v81 = v82 >> 2;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
      v83 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v83 = v81;
    if (v83)
    {
      if (v83 >> 61)
        goto LABEL_189;
      v84 = (char *)operator new(8 * v83);
    }
    else
    {
      v84 = 0;
    }
    v85 = (uint64_t *)&v84[8 * v80];
    *v85 = v76;
    v78 = v85 + 1;
    if (v77 != (char *)v79)
    {
      do
      {
        v86 = *((_QWORD *)v77 - 1);
        v77 -= 8;
        *--v85 = v86;
      }
      while (v77 != (char *)v79);
      v77 = (char *)qword_253F366E0;
    }
    qword_253F366E0 = (uint64_t)v85;
    *(_QWORD *)&xmmword_253F366E8 = v78;
    *((_QWORD *)&xmmword_253F366E8 + 1) = &v84[8 * v83];
    if (v77)
      operator delete(v77);
  }
  else
  {
    *(_QWORD *)xmmword_253F366E8 = v76;
    v78 = v77 + 8;
  }
  *(_QWORD *)&xmmword_253F366E8 = v78;
  v87 = (char *)*((_QWORD *)&xmmword_253F366C8 + 1);
  if (*((_QWORD *)&xmmword_253F366C8 + 1) >= (unint64_t)qword_253F366D8)
  {
    v89 = (char *)xmmword_253F366C8;
    v90 = (uint64_t)(*((_QWORD *)&xmmword_253F366C8 + 1) - xmmword_253F366C8) >> 3;
    v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v92 = qword_253F366D8 - xmmword_253F366C8;
    if ((qword_253F366D8 - (uint64_t)xmmword_253F366C8) >> 2 > v91)
      v91 = v92 >> 2;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v93 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v93 = v91;
    if (!v93)
    {
      v94 = 0;
      goto LABEL_177;
    }
    if (!(v93 >> 61))
    {
      v94 = (char *)operator new(8 * v93);
LABEL_177:
      v95 = (uint64_t *)&v94[8 * v90];
      *v95 = v76;
      v88 = v95 + 1;
      if (v87 != v89)
      {
        do
        {
          v96 = *((_QWORD *)v87 - 1);
          v87 -= 8;
          *--v95 = v96;
        }
        while (v87 != v89);
        v87 = (char *)xmmword_253F366C8;
      }
      *(_QWORD *)&xmmword_253F366C8 = v95;
      *((_QWORD *)&xmmword_253F366C8 + 1) = v88;
      qword_253F366D8 = (uint64_t)&v94[8 * v93];
      if (v87)
        operator delete(v87);
      goto LABEL_182;
    }
LABEL_189:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  **((_QWORD **)&xmmword_253F366C8 + 1) = v76;
  v88 = v87 + 8;
LABEL_182:
  *((_QWORD *)&xmmword_253F366C8 + 1) = v88;
LABEL_183:
  std::mutex::unlock((std::mutex *)&qword_253F36710);
  *(_QWORD *)(v76 + 72) = &dmlc::data::CreateCSVParser<unsigned long long,long long>;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  qword_253F36340 = v76;
}

void sub_220E03600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex::unlock((std::mutex *)&qword_253F36710);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362E0))
  {
    qword_253F365F8 = 0;
    qword_253F365F0 = 0;
    xmmword_253F365B8 = 0u;
    *(_OWORD *)&qword_253F365C8 = 0u;
    xmmword_253F365D8 = 0u;
    qword_253F365E8 = (uint64_t)&qword_253F365F0;
    qword_253F36600 = 850045863;
    qword_253F36638 = 0;
    xmmword_253F36608 = 0u;
    unk_253F36618 = 0u;
    xmmword_253F36628 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::~Registry, &xmmword_253F365B8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362E0);
  }
  return &xmmword_253F365B8;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::__REGISTER__(std::string *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  std::string *v25;

  std::mutex::lock((std::mutex *)&qword_253F36600);
  v2 = qword_253F365F0;
  if (!qword_253F365F0)
  {
LABEL_6:
    v3 = operator new();
    *(_QWORD *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    std::string::operator=((std::string *)v3, a1);
    v25 = a1;
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7] = v3;
    v4 = (char *)xmmword_253F365D8;
    if ((unint64_t)xmmword_253F365D8 >= *((_QWORD *)&xmmword_253F365D8 + 1))
    {
      v6 = qword_253F365D0;
      v7 = ((uint64_t)xmmword_253F365D8 - qword_253F365D0) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v9 = *((_QWORD *)&xmmword_253F365D8 + 1) - qword_253F365D0;
      if ((*((_QWORD *)&xmmword_253F365D8 + 1) - qword_253F365D0) >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          goto LABEL_43;
        v11 = (char *)operator new(8 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = (uint64_t *)&v11[8 * v7];
      *v12 = v3;
      v5 = v12 + 1;
      if (v4 != (char *)v6)
      {
        do
        {
          v13 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *--v12 = v13;
        }
        while (v4 != (char *)v6);
        v4 = (char *)qword_253F365D0;
      }
      qword_253F365D0 = (uint64_t)v12;
      *(_QWORD *)&xmmword_253F365D8 = v5;
      *((_QWORD *)&xmmword_253F365D8 + 1) = &v11[8 * v10];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)xmmword_253F365D8 = v3;
      v5 = v4 + 8;
    }
    *(_QWORD *)&xmmword_253F365D8 = v5;
    v14 = (char *)*((_QWORD *)&xmmword_253F365B8 + 1);
    if (*((_QWORD *)&xmmword_253F365B8 + 1) < (unint64_t)qword_253F365C8)
    {
      **((_QWORD **)&xmmword_253F365B8 + 1) = v3;
      v15 = v14 + 8;
LABEL_41:
      *((_QWORD *)&xmmword_253F365B8 + 1) = v15;
      goto LABEL_42;
    }
    v16 = (char *)xmmword_253F365B8;
    v17 = (uint64_t)(*((_QWORD *)&xmmword_253F365B8 + 1) - xmmword_253F365B8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v19 = qword_253F365C8 - xmmword_253F365B8;
    if ((qword_253F365C8 - (uint64_t)xmmword_253F365B8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (!v20)
    {
      v21 = 0;
      goto LABEL_36;
    }
    if (!(v20 >> 61))
    {
      v21 = (char *)operator new(8 * v20);
LABEL_36:
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v3;
      v15 = v22 + 1;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v22 = v23;
        }
        while (v14 != v16);
        v14 = (char *)xmmword_253F365B8;
      }
      *(_QWORD *)&xmmword_253F365B8 = v22;
      *((_QWORD *)&xmmword_253F365B8 + 1) = v15;
      qword_253F365C8 = (uint64_t)&v21[8 * v20];
      if (v14)
        operator delete(v14);
      goto LABEL_41;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, (const void **)&a1->__r_.__value_.__l.__data_, (const void **)(v2 + 32)))
  {
LABEL_5:
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_6;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, (const void **)(v2 + 32), (const void **)&a1->__r_.__value_.__l.__data_))
  {
    v2 += 8;
    goto LABEL_5;
  }
  v25 = a1;
  v3 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7];
LABEL_42:
  std::mutex::unlock((std::mutex *)&qword_253F36600);
  return v3;
}

void sub_220E039D4(_Unwind_Exception *a1)
{
  std::mutex::unlock((std::mutex *)&qword_253F36600);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F365F0;
  if (!qword_253F365F0)
  {
    v5 = &qword_253F365F0;
    v6 = &qword_253F365F0;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F365E8)
    {
      qword_253F365E8 = *(_QWORD *)qword_253F365E8;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F365F0, v12);
    ++qword_253F365F8;
    return v9;
  }
  v5 = &qword_253F365F0;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E03B28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362C8))
  {
    xmmword_253F36420 = 0u;
    *(_OWORD *)&qword_253F36430 = 0u;
    xmmword_253F36440 = 0u;
    qword_253F36450 = (uint64_t)&qword_253F36458;
    qword_253F36458 = 0;
    qword_253F36460 = 0;
    unk_253F36468 = 850045863;
    qword_253F364A0 = 0;
    xmmword_253F36470 = 0u;
    unk_253F36480 = 0u;
    xmmword_253F36490 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::~Registry, &xmmword_253F36420, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362C8);
  }
  return &xmmword_253F36420;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::__REGISTER__(std::string *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  std::string *v25;

  std::mutex::lock((std::mutex *)&unk_253F36468);
  v2 = qword_253F36458;
  if (!qword_253F36458)
  {
LABEL_6:
    v3 = operator new();
    *(_QWORD *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    std::string::operator=((std::string *)v3, a1);
    v25 = a1;
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7] = v3;
    v4 = (char *)xmmword_253F36440;
    if ((unint64_t)xmmword_253F36440 >= *((_QWORD *)&xmmword_253F36440 + 1))
    {
      v6 = qword_253F36438;
      v7 = ((uint64_t)xmmword_253F36440 - qword_253F36438) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v9 = *((_QWORD *)&xmmword_253F36440 + 1) - qword_253F36438;
      if ((*((_QWORD *)&xmmword_253F36440 + 1) - qword_253F36438) >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          goto LABEL_43;
        v11 = (char *)operator new(8 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = (uint64_t *)&v11[8 * v7];
      *v12 = v3;
      v5 = v12 + 1;
      if (v4 != (char *)v6)
      {
        do
        {
          v13 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *--v12 = v13;
        }
        while (v4 != (char *)v6);
        v4 = (char *)qword_253F36438;
      }
      qword_253F36438 = (uint64_t)v12;
      *(_QWORD *)&xmmword_253F36440 = v5;
      *((_QWORD *)&xmmword_253F36440 + 1) = &v11[8 * v10];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)xmmword_253F36440 = v3;
      v5 = v4 + 8;
    }
    *(_QWORD *)&xmmword_253F36440 = v5;
    v14 = (char *)*((_QWORD *)&xmmword_253F36420 + 1);
    if (*((_QWORD *)&xmmword_253F36420 + 1) < (unint64_t)qword_253F36430)
    {
      **((_QWORD **)&xmmword_253F36420 + 1) = v3;
      v15 = v14 + 8;
LABEL_41:
      *((_QWORD *)&xmmword_253F36420 + 1) = v15;
      goto LABEL_42;
    }
    v16 = (char *)xmmword_253F36420;
    v17 = (uint64_t)(*((_QWORD *)&xmmword_253F36420 + 1) - xmmword_253F36420) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v19 = qword_253F36430 - xmmword_253F36420;
    if ((qword_253F36430 - (uint64_t)xmmword_253F36420) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (!v20)
    {
      v21 = 0;
      goto LABEL_36;
    }
    if (!(v20 >> 61))
    {
      v21 = (char *)operator new(8 * v20);
LABEL_36:
      v22 = (uint64_t *)&v21[8 * v17];
      *v22 = v3;
      v15 = v22 + 1;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v22 = v23;
        }
        while (v14 != v16);
        v14 = (char *)xmmword_253F36420;
      }
      *(_QWORD *)&xmmword_253F36420 = v22;
      *((_QWORD *)&xmmword_253F36420 + 1) = v15;
      qword_253F36430 = (uint64_t)&v21[8 * v20];
      if (v14)
        operator delete(v14);
      goto LABEL_41;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, (const void **)&a1->__r_.__value_.__l.__data_, (const void **)(v2 + 32)))
  {
LABEL_5:
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_6;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, (const void **)(v2 + 32), (const void **)&a1->__r_.__value_.__l.__data_))
  {
    v2 += 8;
    goto LABEL_5;
  }
  v25 = a1;
  v3 = std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((const void **)&a1->__r_.__value_.__l.__data_, (__int128 **)&v25)[7];
LABEL_42:
  std::mutex::unlock((std::mutex *)&unk_253F36468);
  return v3;
}

void sub_220E03E78(_Unwind_Exception *a1)
{
  std::mutex::unlock((std::mutex *)&unk_253F36468);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F36458;
  if (!qword_253F36458)
  {
    v5 = &qword_253F36458;
    v6 = &qword_253F36458;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F36450)
    {
      qword_253F36450 = *(_QWORD *)qword_253F36450;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F36458, v12);
    ++qword_253F36460;
    return v9;
  }
  v5 = &qword_253F36458;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E03FCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F36700;
  if (!qword_253F36700)
  {
    v5 = &qword_253F36700;
    v6 = &qword_253F36700;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F366F8)
    {
      qword_253F366F8 = *(_QWORD *)qword_253F366F8;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F36700, v12);
    ++qword_253F36708;
    return v9;
  }
  v5 = &qword_253F36700;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E04118(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned long long,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F36678;
  if (!qword_253F36678)
  {
    v5 = &qword_253F36678;
    v6 = &qword_253F36678;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F36670)
    {
      qword_253F36670 = *(_QWORD *)qword_253F36670;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F36678, v12);
    ++qword_253F36680;
    return v9;
  }
  v5 = &qword_253F36678;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E04264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,long long> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F36568;
  if (!qword_253F36568)
  {
    v5 = &qword_253F36568;
    v6 = &qword_253F36568;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F36560)
    {
      qword_253F36560 = *(_QWORD *)qword_253F36560;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F36568, v12);
    ++qword_253F36570;
    return v9;
  }
  v5 = &qword_253F36568;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E043B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,int> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(const void **a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  __int128 *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t *v12;

  v3 = qword_253F364E0;
  if (!qword_253F364E0)
  {
    v5 = &qword_253F364E0;
    v6 = &qword_253F364E0;
LABEL_10:
    v8 = *a2;
    v9 = operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v11 = *v8;
      v9[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v9[7] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v6;
    *v5 = (uint64_t)v9;
    v12 = v9;
    if (*(_QWORD *)qword_253F364D8)
    {
      qword_253F364D8 = *(_QWORD *)qword_253F364D8;
      v12 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_253F364E0, v12);
    ++qword_253F364E8;
    return v9;
  }
  v5 = &qword_253F364E0;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_10;
  }
  v9 = (_QWORD *)*v5;
  if (!*v5)
    goto LABEL_10;
  return v9;
}

void sub_220E044FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362F0))
  {
    qword_253F36708 = 0;
    qword_253F36700 = 0;
    xmmword_253F366C8 = 0u;
    *(_OWORD *)&qword_253F366D8 = 0u;
    xmmword_253F366E8 = 0u;
    qword_253F366F8 = (uint64_t)&qword_253F36700;
    qword_253F36710 = 850045863;
    qword_253F36748 = 0;
    xmmword_253F36718 = 0u;
    unk_253F36728 = 0u;
    xmmword_253F36738 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::~Registry, &xmmword_253F366C8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362F0);
  }
  return &xmmword_253F366C8;
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362E8))
  {
    qword_253F36680 = 0;
    qword_253F36678 = 0;
    xmmword_253F36640 = 0u;
    *(_OWORD *)&qword_253F36650 = 0u;
    xmmword_253F36660 = 0u;
    qword_253F36670 = (uint64_t)&qword_253F36678;
    qword_253F36688 = 850045863;
    qword_253F366C0 = 0;
    xmmword_253F36690 = 0u;
    unk_253F366A0 = 0u;
    xmmword_253F366B0 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::~Registry, &xmmword_253F36640, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362E8);
  }
  return &xmmword_253F36640;
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362D8))
  {
    qword_253F36570 = 0;
    qword_253F36568 = 0;
    xmmword_253F36530 = 0u;
    *(_OWORD *)&qword_253F36540 = 0u;
    xmmword_253F36550 = 0u;
    qword_253F36560 = (uint64_t)&qword_253F36568;
    qword_253F36578 = 850045863;
    qword_253F365B0 = 0;
    xmmword_253F36580 = 0u;
    unk_253F36590 = 0u;
    xmmword_253F365A0 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::~Registry, &xmmword_253F36530, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362D8);
  }
  return &xmmword_253F36530;
}

__int128 *dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253F362D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F362D0))
  {
    qword_253F364E8 = 0;
    qword_253F364E0 = 0;
    xmmword_253F364A8 = 0u;
    *(_OWORD *)&qword_253F364B8 = 0u;
    xmmword_253F364C8 = 0u;
    qword_253F364D8 = (uint64_t)&qword_253F364E0;
    qword_253F364F0 = 850045863;
    qword_253F36528 = 0;
    xmmword_253F364F8 = 0u;
    unk_253F36508 = 0u;
    xmmword_253F36518 = 0u;
    __cxa_atexit((void (*)(void *))dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::~Registry, &xmmword_253F364A8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362D0);
  }
  return &xmmword_253F364A8;
}

std::string *dmlc::data::LibSVMParserParam::__MANAGER__(dmlc::data::LibSVMParserParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LibSVMParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::LibSVMParserParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<dmlc::data::LibSVMParserParam>::~ParamManagerSingleton, &stru_253F36348, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  return &stru_253F36348;
}

void sub_220E04820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::LibSVMParserParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  std::string v5;
  std::string __stra;
  std::string v7;

  qword_253F36380 = 0;
  qword_253F36388 = 0;
  *(_OWORD *)&stru_253F36348.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36348.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36368 = 0u;
  qword_253F36378 = (uint64_t)&qword_253F36380;
  std::string::operator=(&stru_253F36348, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 0;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36348, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v7, "libsvm");
  std::string::operator=((std::string *)(v1 + 104), &v7);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "File format");
  std::string::operator=((std::string *)(v1 + 72), &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "indexing_mode");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &unk_24E6B5E08;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36348, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v7, "If >0, treat all feature indices as 1-based. If =0, treat all feature indices as 0-based. If <0, use heuristic to automatically detect mode of indexing. See https://en.wikipedia.org/wiki/Array_data_type#Index_origin for more details on indexing modes.");
  std::string::operator=((std::string *)(v3 + 72), &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220E04B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a21 < 0)
    operator delete(__p);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36348);
  _Unwind_Resume(a1);
}

std::string *dmlc::data::LibFMParserParam::__MANAGER__(dmlc::data::LibFMParserParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F362B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F362B8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LibFMParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::LibFMParserParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<dmlc::data::LibFMParserParam>::~ParamManagerSingleton, &stru_253F36390, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362B8);
  }
  return &stru_253F36390;
}

void sub_220E04C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F362B8);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::LibFMParserParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  std::string v5;
  std::string __stra;
  std::string v7;

  qword_253F363C8 = 0;
  qword_253F363D0 = 0;
  *(_OWORD *)&stru_253F36390.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36390.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F363B0 = 0u;
  qword_253F363C0 = (uint64_t)&qword_253F363C8;
  std::string::operator=(&stru_253F36390, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 0;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36390, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v7, "libfm");
  std::string::operator=((std::string *)(v1 + 104), &v7);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "File format");
  std::string::operator=((std::string *)(v1 + 72), &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "indexing_mode");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &unk_24E6B5E08;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v7, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36390, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v7, "If >0, treat all field and feature indices as 1-based. If =0, treat all field and feature indices as 0-based. If <0, use heuristic to automatically detect mode of indexing. See https://en.wikipedia.org/wiki/Array_data_type#Index_origin for more details on indexing modes.");
  std::string::operator=((std::string *)(v3 + 72), &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220E04EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a21 < 0)
    operator delete(__p);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36390);
  _Unwind_Resume(a1);
}

std::string *dmlc::data::CSVParserParam::__MANAGER__(dmlc::data::CSVParserParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F362C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F362C0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CSVParserParam");
    dmlc::parameter::ParamManagerSingleton<dmlc::data::CSVParserParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<dmlc::data::CSVParserParam>::~ParamManagerSingleton, &stru_253F363D8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F362C0);
  }
  return &stru_253F363D8;
}

void sub_220E04FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F362C0);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<dmlc::data::CSVParserParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  std::string v9;
  std::string __stra;
  std::string v11;

  qword_253F36410 = 0;
  qword_253F36418 = 0;
  *(_OWORD *)&stru_253F363D8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F363D8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F363F8 = 0u;
  qword_253F36408 = (uint64_t)&qword_253F36410;
  std::string::operator=(&stru_253F363D8, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "format");
  v1 = operator new();
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "string");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 0;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F363D8, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  std::string::basic_string[abi:ne180100]<0>(&v11, "csv");
  std::string::operator=((std::string *)(v1 + 104), &v11);
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v9, "File format.");
  std::string::operator=((std::string *)(v1 + 72), &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "label_column");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &unk_24E6B5E08;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
LABEL_21:
  *(_QWORD *)(v3 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F363D8, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = -1;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v11, "Column index (0-based) that will put into label.");
  std::string::operator=((std::string *)(v3 + 72), &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "delimiter");
  v5 = operator new();
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v5 + 24), &__stra);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_32;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_32;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "string");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
LABEL_32:
  *(_QWORD *)(v5 + 96) = 32;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F363D8, (const void **)&__stra.__r_.__value_.__l.__data_, v5);
  std::string::basic_string[abi:ne180100]<0>(&v11, ",");
  std::string::operator=((std::string *)(v5 + 104), &v11);
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v9, "Delimiter used in the csv file.");
  std::string::operator=((std::string *)(v5 + 72), &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "weight_column");
  v7 = operator new();
  *(_BYTE *)(v7 + 8) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_WORD *)(v7 + 108) = 0;
  *(_QWORD *)v7 = &unk_24E6B5E08;
  *(_BYTE *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 128) = v7 + 136;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = v7 + 160;
  *(_QWORD *)(v7 + 168) = 0;
  std::string::operator=((std::string *)(v7 + 24), &__stra);
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_45;
  }
  else if (*(_BYTE *)(v7 + 71))
  {
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "int");
  v8 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 64) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
LABEL_45:
  *(_QWORD *)(v7 + 96) = 56;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F363D8, (const void **)&__stra.__r_.__value_.__l.__data_, v7);
  *(_DWORD *)(v7 + 104) = -1;
  *(_BYTE *)(v7 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v11, "Column index that will put into instance weights.");
  std::string::operator=((std::string *)(v7 + 72), &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220E05554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  dmlc::data::CSVParserParam::~CSVParserParam(&a10);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F363D8);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_cpu_predictor_cc()
{
  __int128 *v0;
  const void **i;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 **v25;
  __int128 **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  std::string __str;
  _QWORD v32[3];
  _QWORD *v33;
  __int128 *v34[3];
  __int128 **v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::PredictorReg>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "cpu_predictor");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  for (i = (const void **)*((_QWORD *)v0 + 7); i; i = (const void **)*i)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, i + 4))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), i + 4, (const void **)&__str.__r_.__value_.__l.__data_))
      {
        v34[0] = (__int128 *)&__str;
        v2 = std::__tree<std::__value_type<std::string,xgboost::PredictorReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::PredictorReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::PredictorReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v34)[7];
        goto LABEL_42;
      }
      ++i;
    }
  }
  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  std::string::operator=((std::string *)v2, &__str);
  v34[0] = (__int128 *)&__str;
  std::__tree<std::__value_type<std::string,xgboost::PredictorReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::PredictorReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::PredictorReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v34)[7] = v2;
  v4 = (uint64_t *)*((_QWORD *)v0 + 4);
  v3 = *((_QWORD *)v0 + 5);
  if ((unint64_t)v4 >= v3)
  {
    v6 = (_QWORD *)*((_QWORD *)v0 + 3);
    v7 = v4 - v6;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        goto LABEL_62;
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = (uint64_t *)&v11[8 * v7];
    *v12 = v2;
    v5 = v12 + 1;
    if (v4 != v6)
    {
      do
      {
        v13 = *--v4;
        *--v12 = v13;
      }
      while (v4 != v6);
      v4 = (uint64_t *)*((_QWORD *)v0 + 3);
    }
    *((_QWORD *)v0 + 3) = v12;
    *((_QWORD *)v0 + 4) = v5;
    *((_QWORD *)v0 + 5) = &v11[8 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)v0 + 4) = v5;
  v15 = (uint64_t *)*((_QWORD *)v0 + 1);
  v14 = *((_QWORD *)v0 + 2);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(uint64_t **)v0;
    v18 = ((uint64_t)v15 - *(_QWORD *)v0) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (!v21)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (!(v21 >> 61))
    {
      v22 = (char *)operator new(8 * v21);
LABEL_36:
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v2;
      v16 = v23 + 1;
      if (v15 != v17)
      {
        do
        {
          v24 = *--v15;
          *--v23 = v24;
        }
        while (v15 != v17);
        v15 = *(uint64_t **)v0;
      }
      *(_QWORD *)v0 = v23;
      *((_QWORD *)v0 + 1) = v16;
      *((_QWORD *)v0 + 2) = &v22[8 * v21];
      if (v15)
        operator delete(v15);
      goto LABEL_41;
    }
LABEL_62:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v15 = v2;
  v16 = v15 + 1;
LABEL_41:
  *((_QWORD *)v0 + 1) = v16;
LABEL_42:
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Make predictions using CPU.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v32[0] = &off_24E6BA7E0;
  v33 = v32;
  v34[0] = (__int128 *)&off_24E6BA7E0;
  v25 = (__int128 **)(v2 + 72);
  v26 = v34;
  v35 = v34;
  if (v34 == (__int128 **)(v2 + 72))
  {
    v27 = 4;
  }
  else
  {
    v26 = *(__int128 ***)(v2 + 96);
    if (v26 == v25)
    {
      v36[0] = &off_24E6BA7E0;
      v35 = 0;
      (*((void (**)(uint64_t, __int128 **))*v25 + 3))(v2 + 72, v34);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96));
      *(_QWORD *)(v2 + 96) = 0;
      v35 = v34;
      (*(void (**)(uint64_t, _QWORD *))(v36[0] + 24))((uint64_t)v36, (_QWORD *)(v2 + 72));
      (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
      *(_QWORD *)(v2 + 96) = v25;
      v26 = v35;
    }
    else
    {
      *(_QWORD *)(v2 + 72) = &off_24E6BA7E0;
      v35 = v26;
      *(_QWORD *)(v2 + 96) = v25;
    }
    if (v26 == v34)
    {
      v27 = 4;
      v26 = v34;
    }
    else
    {
      if (!v26)
        goto LABEL_52;
      v27 = 5;
    }
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_52:
  v28 = v33;
  if (v33 == v32)
  {
    v29 = 4;
    v28 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_57;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_57:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  xgboost::predictor::__make_PredictorReg_CPUPredictor__ = v2;
}

void sub_220E05A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  std::mutex::unlock(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::PredictorReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::PredictorReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::PredictorReg *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_220E05B8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<xgboost::PredictorReg>::Get()
{
  unsigned __int8 v0;

  {
    qword_253F377D8 = 0;
    dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst = 0u;
    *(_OWORD *)algn_253F377B0 = 0u;
    xmmword_253F377C0 = 0u;
    qword_253F377D0 = (uint64_t)&qword_253F377D8;
    qword_253F377E0 = 0;
    unk_253F377E8 = 850045863;
    xmmword_253F377F0 = 0u;
    unk_253F37800 = 0u;
    xmmword_253F37810 = 0u;
    qword_253F37820 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::PredictorReg>::~Registry, &dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::PredictorReg>::Get(void)::inst;
}

void _GLOBAL__sub_I_gradient_index_format_cc()
{
  __int128 *v0;
  const void **i;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 **v25;
  __int128 **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  std::string __str;
  _QWORD v32[3];
  _QWORD *v33;
  __int128 *v34[3];
  __int128 **v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  for (i = (const void **)*((_QWORD *)v0 + 7); i; i = (const void **)*i)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, i + 4))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), i + 4, (const void **)&__str.__r_.__value_.__l.__data_))
      {
        v34[0] = (__int128 *)&__str;
        v2 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v34)[7];
        goto LABEL_42;
      }
      ++i;
    }
  }
  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  std::string::operator=((std::string *)v2, &__str);
  v34[0] = (__int128 *)&__str;
  std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v34)[7] = v2;
  v4 = (uint64_t *)*((_QWORD *)v0 + 4);
  v3 = *((_QWORD *)v0 + 5);
  if ((unint64_t)v4 >= v3)
  {
    v6 = (_QWORD *)*((_QWORD *)v0 + 3);
    v7 = v4 - v6;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        goto LABEL_62;
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = (uint64_t *)&v11[8 * v7];
    *v12 = v2;
    v5 = v12 + 1;
    if (v4 != v6)
    {
      do
      {
        v13 = *--v4;
        *--v12 = v13;
      }
      while (v4 != v6);
      v4 = (uint64_t *)*((_QWORD *)v0 + 3);
    }
    *((_QWORD *)v0 + 3) = v12;
    *((_QWORD *)v0 + 4) = v5;
    *((_QWORD *)v0 + 5) = &v11[8 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)v0 + 4) = v5;
  v15 = (uint64_t *)*((_QWORD *)v0 + 1);
  v14 = *((_QWORD *)v0 + 2);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(uint64_t **)v0;
    v18 = ((uint64_t)v15 - *(_QWORD *)v0) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (!v21)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (!(v21 >> 61))
    {
      v22 = (char *)operator new(8 * v21);
LABEL_36:
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v2;
      v16 = v23 + 1;
      if (v15 != v17)
      {
        do
        {
          v24 = *--v15;
          *--v23 = v24;
        }
        while (v15 != v17);
        v15 = *(uint64_t **)v0;
      }
      *(_QWORD *)v0 = v23;
      *((_QWORD *)v0 + 1) = v16;
      *((_QWORD *)v0 + 2) = &v22[8 * v21];
      if (v15)
        operator delete(v15);
      goto LABEL_41;
    }
LABEL_62:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v15 = v2;
  v16 = v15 + 1;
LABEL_41:
  *((_QWORD *)v0 + 1) = v16;
LABEL_42:
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw GHistIndex binary data format.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v32[0] = &off_24E6BBD50;
  v33 = v32;
  v34[0] = (__int128 *)&off_24E6BBD50;
  v25 = (__int128 **)(v2 + 72);
  v26 = v34;
  v35 = v34;
  if (v34 == (__int128 **)(v2 + 72))
  {
    v27 = 4;
  }
  else
  {
    v26 = *(__int128 ***)(v2 + 96);
    if (v26 == v25)
    {
      v36[0] = &off_24E6BBD50;
      v35 = 0;
      (*((void (**)(uint64_t, __int128 **))*v25 + 3))(v2 + 72, v34);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96));
      *(_QWORD *)(v2 + 96) = 0;
      v35 = v34;
      (*(void (**)(uint64_t, _QWORD *))(v36[0] + 24))((uint64_t)v36, (_QWORD *)(v2 + 72));
      (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
      *(_QWORD *)(v2 + 96) = v25;
      v26 = v35;
    }
    else
    {
      *(_QWORD *)(v2 + 72) = &off_24E6BBD50;
      v35 = v26;
      *(_QWORD *)(v2 + 96) = v25;
    }
    if (v26 == v34)
    {
      v27 = 4;
      v26 = v34;
    }
    else
    {
      if (!v26)
        goto LABEL_52;
      v27 = 5;
    }
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_52:
  v28 = v33;
  if (v33 == v32)
  {
    v29 = 4;
    v28 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_57;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_57:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  xgboost::data::__make_GHistIndexPageFmt_raw__ = v2;
}

void sub_220E0604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  std::mutex::unlock(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_220E061D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37318 = 0;
    dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get(void)::inst = 0u;
    *(_OWORD *)algn_253F372F0 = 0u;
    xmmword_253F37300 = 0u;
    qword_253F37310 = (uint64_t)&qword_253F37318;
    qword_253F37320 = 0;
    unk_253F37328 = 850045863;
    xmmword_253F37330 = 0u;
    unk_253F37340 = 0u;
    xmmword_253F37350 = 0u;
    qword_253F37360 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::~Registry, &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::Get(void)::inst;
}

void _GLOBAL__sub_I_sparse_page_raw_format_cc()
{
  __int128 *v0;
  const void **i;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 **v25;
  __int128 **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 *v30;
  const void **j;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 **v55;
  __int128 **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 *v60;
  const void **k;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  __int128 **v85;
  __int128 **v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::string __p;
  std::string __str;
  _QWORD v92[3];
  _QWORD *v93;
  __int128 *v94[3];
  __int128 **v95;
  _QWORD v96[4];

  v96[3] = *MEMORY[0x24BDAC8D0];
  v0 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v0 + 72));
  for (i = (const void **)*((_QWORD *)v0 + 7); i; i = (const void **)*i)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), (const void **)&__str.__r_.__value_.__l.__data_, i + 4))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v0 + 4), i + 4, (const void **)&__str.__r_.__value_.__l.__data_))
      {
        v94[0] = (__int128 *)&__str;
        v2 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7];
        goto LABEL_42;
      }
      ++i;
    }
  }
  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  std::string::operator=((std::string *)v2, &__str);
  v94[0] = (__int128 *)&__str;
  std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v0 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7] = v2;
  v4 = (uint64_t *)*((_QWORD *)v0 + 4);
  v3 = *((_QWORD *)v0 + 5);
  if ((unint64_t)v4 >= v3)
  {
    v6 = (_QWORD *)*((_QWORD *)v0 + 3);
    v7 = v4 - v6;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        goto LABEL_182;
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = (uint64_t *)&v11[8 * v7];
    *v12 = v2;
    v5 = v12 + 1;
    if (v4 != v6)
    {
      do
      {
        v13 = *--v4;
        *--v12 = v13;
      }
      while (v4 != v6);
      v4 = (uint64_t *)*((_QWORD *)v0 + 3);
    }
    *((_QWORD *)v0 + 3) = v12;
    *((_QWORD *)v0 + 4) = v5;
    *((_QWORD *)v0 + 5) = &v11[8 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)v0 + 4) = v5;
  v15 = (uint64_t *)*((_QWORD *)v0 + 1);
  v14 = *((_QWORD *)v0 + 2);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(uint64_t **)v0;
    v18 = ((uint64_t)v15 - *(_QWORD *)v0) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (!v21)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (!(v21 >> 61))
    {
      v22 = (char *)operator new(8 * v21);
LABEL_36:
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v2;
      v16 = v23 + 1;
      if (v15 != v17)
      {
        do
        {
          v24 = *--v15;
          *--v23 = v24;
        }
        while (v15 != v17);
        v15 = *(uint64_t **)v0;
      }
      *(_QWORD *)v0 = v23;
      *((_QWORD *)v0 + 1) = v16;
      *((_QWORD *)v0 + 2) = &v22[8 * v21];
      if (v15)
        operator delete(v15);
      goto LABEL_41;
    }
LABEL_182:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v15 = v2;
  v16 = v15 + 1;
LABEL_41:
  *((_QWORD *)v0 + 1) = v16;
LABEL_42:
  std::mutex::unlock((std::mutex *)((char *)v0 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v2 + 24), &__p);
  v92[0] = &off_24E6BEBB8;
  v93 = v92;
  v94[0] = (__int128 *)&off_24E6BEBB8;
  v25 = (__int128 **)(v2 + 72);
  v26 = v94;
  v95 = v94;
  if (v94 == (__int128 **)(v2 + 72))
  {
    v27 = 4;
  }
  else
  {
    v26 = *(__int128 ***)(v2 + 96);
    if (v26 == v25)
    {
      v96[0] = &off_24E6BEBB8;
      v95 = 0;
      (*((void (**)(uint64_t, __int128 **))*v25 + 3))(v2 + 72, v94);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96));
      *(_QWORD *)(v2 + 96) = 0;
      v95 = v94;
      (*(void (**)(uint64_t, _QWORD *))(v96[0] + 24))((uint64_t)v96, (_QWORD *)(v2 + 72));
      (*(void (**)(_QWORD *))(v96[0] + 32))(v96);
      *(_QWORD *)(v2 + 96) = v25;
      v26 = v95;
    }
    else
    {
      *(_QWORD *)(v2 + 72) = &off_24E6BEBB8;
      v95 = v26;
      *(_QWORD *)(v2 + 96) = v25;
    }
    if (v26 == v94)
    {
      v27 = 4;
      v26 = v94;
    }
    else
    {
      if (!v26)
        goto LABEL_52;
      v27 = 5;
    }
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_52:
  v28 = v93;
  if (v93 == v92)
  {
    v29 = 4;
    v28 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_57;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_57:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  _MergedGlobals_16 = v2;
  v30 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v30 + 72));
  for (j = (const void **)*((_QWORD *)v30 + 7); j; j = (const void **)*j)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v30 + 4), (const void **)&__str.__r_.__value_.__l.__data_, j + 4))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v30 + 4), j + 4, (const void **)&__str.__r_.__value_.__l.__data_))
      {
        v94[0] = (__int128 *)&__str;
        v32 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v30 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7];
        goto LABEL_102;
      }
      ++j;
    }
  }
  v32 = operator new();
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  std::string::operator=((std::string *)v32, &__str);
  v94[0] = (__int128 *)&__str;
  std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v30 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7] = v32;
  v34 = (uint64_t *)*((_QWORD *)v30 + 4);
  v33 = *((_QWORD *)v30 + 5);
  if ((unint64_t)v34 >= v33)
  {
    v36 = (_QWORD *)*((_QWORD *)v30 + 3);
    v37 = v34 - v36;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v39 = v33 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 61)
        goto LABEL_183;
      v41 = (char *)operator new(8 * v40);
    }
    else
    {
      v41 = 0;
    }
    v42 = (uint64_t *)&v41[8 * v37];
    *v42 = v32;
    v35 = v42 + 1;
    if (v34 != v36)
    {
      do
      {
        v43 = *--v34;
        *--v42 = v43;
      }
      while (v34 != v36);
      v34 = (uint64_t *)*((_QWORD *)v30 + 3);
    }
    *((_QWORD *)v30 + 3) = v42;
    *((_QWORD *)v30 + 4) = v35;
    *((_QWORD *)v30 + 5) = &v41[8 * v40];
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v34 = v32;
    v35 = v34 + 1;
  }
  *((_QWORD *)v30 + 4) = v35;
  v45 = (uint64_t *)*((_QWORD *)v30 + 1);
  v44 = *((_QWORD *)v30 + 2);
  if ((unint64_t)v45 >= v44)
  {
    v47 = *(uint64_t **)v30;
    v48 = ((uint64_t)v45 - *(_QWORD *)v30) >> 3;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v50 = v44 - (_QWORD)v47;
    if (v50 >> 2 > v49)
      v49 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (!v51)
    {
      v52 = 0;
      goto LABEL_96;
    }
    if (!(v51 >> 61))
    {
      v52 = (char *)operator new(8 * v51);
LABEL_96:
      v53 = (uint64_t *)&v52[8 * v48];
      *v53 = v32;
      v46 = v53 + 1;
      if (v45 != v47)
      {
        do
        {
          v54 = *--v45;
          *--v53 = v54;
        }
        while (v45 != v47);
        v45 = *(uint64_t **)v30;
      }
      *(_QWORD *)v30 = v53;
      *((_QWORD *)v30 + 1) = v46;
      *((_QWORD *)v30 + 2) = &v52[8 * v51];
      if (v45)
        operator delete(v45);
      goto LABEL_101;
    }
LABEL_183:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v45 = v32;
  v46 = v45 + 1;
LABEL_101:
  *((_QWORD *)v30 + 1) = v46;
LABEL_102:
  std::mutex::unlock((std::mutex *)((char *)v30 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v32 + 24), &__p);
  v92[0] = &off_24E6BECA0;
  v93 = v92;
  v94[0] = (__int128 *)&off_24E6BECA0;
  v55 = (__int128 **)(v32 + 72);
  v56 = v94;
  v95 = v94;
  if (v94 == (__int128 **)(v32 + 72))
  {
    v57 = 4;
  }
  else
  {
    v56 = *(__int128 ***)(v32 + 96);
    if (v56 == v55)
    {
      v96[0] = &off_24E6BECA0;
      v95 = 0;
      (*((void (**)(uint64_t, __int128 **))*v55 + 3))(v32 + 72, v94);
      (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 96) + 32))(*(_QWORD *)(v32 + 96));
      *(_QWORD *)(v32 + 96) = 0;
      v95 = v94;
      (*(void (**)(uint64_t, _QWORD *))(v96[0] + 24))((uint64_t)v96, (_QWORD *)(v32 + 72));
      (*(void (**)(_QWORD *))(v96[0] + 32))(v96);
      *(_QWORD *)(v32 + 96) = v55;
      v56 = v95;
    }
    else
    {
      *(_QWORD *)(v32 + 72) = &off_24E6BECA0;
      v95 = v56;
      *(_QWORD *)(v32 + 96) = v55;
    }
    if (v56 == v94)
    {
      v57 = 4;
      v56 = v94;
    }
    else
    {
      if (!v56)
        goto LABEL_112;
      v57 = 5;
    }
  }
  (*((void (**)(void))*v56 + v57))();
LABEL_112:
  v58 = v93;
  if (v93 == v92)
  {
    v59 = 4;
    v58 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_117;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_117:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  qword_253F370B8 = v32;
  v60 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  std::string::basic_string[abi:ne180100]<0>(&__str, "raw");
  std::mutex::lock((std::mutex *)((char *)v60 + 72));
  for (k = (const void **)*((_QWORD *)v60 + 7); k; k = (const void **)*k)
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v60 + 4), (const void **)&__str.__r_.__value_.__l.__data_, k + 4))
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v60 + 4), k + 4, (const void **)&__str.__r_.__value_.__l.__data_))
      {
        v94[0] = (__int128 *)&__str;
        v62 = std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v60 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7];
        goto LABEL_162;
      }
      ++k;
    }
  }
  v62 = operator new();
  *(_OWORD *)(v62 + 96) = 0u;
  *(_OWORD *)(v62 + 112) = 0u;
  *(_OWORD *)(v62 + 64) = 0u;
  *(_OWORD *)(v62 + 80) = 0u;
  *(_OWORD *)(v62 + 32) = 0u;
  *(_OWORD *)(v62 + 48) = 0u;
  *(_OWORD *)v62 = 0u;
  *(_OWORD *)(v62 + 16) = 0u;
  std::string::operator=((std::string *)v62, &__str);
  v94[0] = (__int128 *)&__str;
  std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v60 + 6, (const void **)&__str.__r_.__value_.__l.__data_, v94)[7] = v62;
  v64 = (uint64_t *)*((_QWORD *)v60 + 4);
  v63 = *((_QWORD *)v60 + 5);
  if ((unint64_t)v64 >= v63)
  {
    v66 = (_QWORD *)*((_QWORD *)v60 + 3);
    v67 = v64 - v66;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v69 = v63 - (_QWORD)v66;
    if (v69 >> 2 > v68)
      v68 = v69 >> 2;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 61)
        goto LABEL_184;
      v71 = (char *)operator new(8 * v70);
    }
    else
    {
      v71 = 0;
    }
    v72 = (uint64_t *)&v71[8 * v67];
    *v72 = v62;
    v65 = v72 + 1;
    if (v64 != v66)
    {
      do
      {
        v73 = *--v64;
        *--v72 = v73;
      }
      while (v64 != v66);
      v64 = (uint64_t *)*((_QWORD *)v60 + 3);
    }
    *((_QWORD *)v60 + 3) = v72;
    *((_QWORD *)v60 + 4) = v65;
    *((_QWORD *)v60 + 5) = &v71[8 * v70];
    if (v64)
      operator delete(v64);
  }
  else
  {
    *v64 = v62;
    v65 = v64 + 1;
  }
  *((_QWORD *)v60 + 4) = v65;
  v75 = (uint64_t *)*((_QWORD *)v60 + 1);
  v74 = *((_QWORD *)v60 + 2);
  if ((unint64_t)v75 >= v74)
  {
    v77 = *(uint64_t **)v60;
    v78 = ((uint64_t)v75 - *(_QWORD *)v60) >> 3;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v80 = v74 - (_QWORD)v77;
    if (v80 >> 2 > v79)
      v79 = v80 >> 2;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
      v81 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v81 = v79;
    if (!v81)
    {
      v82 = 0;
      goto LABEL_156;
    }
    if (!(v81 >> 61))
    {
      v82 = (char *)operator new(8 * v81);
LABEL_156:
      v83 = (uint64_t *)&v82[8 * v78];
      *v83 = v62;
      v76 = v83 + 1;
      if (v75 != v77)
      {
        do
        {
          v84 = *--v75;
          *--v83 = v84;
        }
        while (v75 != v77);
        v75 = *(uint64_t **)v60;
      }
      *(_QWORD *)v60 = v83;
      *((_QWORD *)v60 + 1) = v76;
      *((_QWORD *)v60 + 2) = &v82[8 * v81];
      if (v75)
        operator delete(v75);
      goto LABEL_161;
    }
LABEL_184:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v75 = v62;
  v76 = v75 + 1;
LABEL_161:
  *((_QWORD *)v60 + 1) = v76;
LABEL_162:
  std::mutex::unlock((std::mutex *)((char *)v60 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Raw binary data format.");
  std::string::operator=((std::string *)(v62 + 24), &__p);
  v92[0] = &off_24E6BED88;
  v93 = v92;
  v94[0] = (__int128 *)&off_24E6BED88;
  v85 = (__int128 **)(v62 + 72);
  v86 = v94;
  v95 = v94;
  if (v94 == (__int128 **)(v62 + 72))
  {
    v87 = 4;
  }
  else
  {
    v86 = *(__int128 ***)(v62 + 96);
    if (v86 == v85)
    {
      v96[0] = &off_24E6BED88;
      v95 = 0;
      (*((void (**)(uint64_t, __int128 **))*v85 + 3))(v62 + 72, v94);
      (*(void (**)(_QWORD))(**(_QWORD **)(v62 + 96) + 32))(*(_QWORD *)(v62 + 96));
      *(_QWORD *)(v62 + 96) = 0;
      v95 = v94;
      (*(void (**)(uint64_t, _QWORD *))(v96[0] + 24))((uint64_t)v96, (_QWORD *)(v62 + 72));
      (*(void (**)(_QWORD *))(v96[0] + 32))(v96);
      *(_QWORD *)(v62 + 96) = v85;
      v86 = v95;
    }
    else
    {
      *(_QWORD *)(v62 + 72) = &off_24E6BED88;
      v95 = v86;
      *(_QWORD *)(v62 + 96) = v85;
    }
    if (v86 == v94)
    {
      v87 = 4;
      v86 = v94;
    }
    else
    {
      if (!v86)
        goto LABEL_172;
      v87 = 5;
    }
  }
  (*((void (**)(void))*v86 + v87))();
LABEL_172:
  v88 = v93;
  if (v93 == v92)
  {
    v89 = 4;
    v88 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_177;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_177:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  qword_253F370C0 = v62;
}

void sub_220E06DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::mutex *v20;

  std::mutex::unlock(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::CSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_220E06FAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_220E070E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::data::SparsePageFormatReg<xgboost::SparsePage> *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_220E0721C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F373A0 = 0;
    dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get(void)::inst = 0u;
    unk_253F37378 = 0u;
    xmmword_253F37388 = 0u;
    qword_253F37398 = (uint64_t)&qword_253F373A0;
    qword_253F373A8 = 0;
    unk_253F373B0 = 850045863;
    xmmword_253F373B8 = 0u;
    unk_253F373C8 = 0u;
    xmmword_253F373D8 = 0u;
    qword_253F373E8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::~Registry, &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get(void)::inst;
}

__int128 *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37290 = 0;
    dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get(void)::inst = 0u;
    unk_253F37268 = 0u;
    xmmword_253F37278 = 0u;
    qword_253F37288 = (uint64_t)&qword_253F37290;
    qword_253F37298 = 0;
    unk_253F372A0 = 850045863;
    xmmword_253F372A8 = 0u;
    unk_253F372B8 = 0u;
    xmmword_253F372C8 = 0u;
    qword_253F372D8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::~Registry, &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get(void)::inst;
}

__int128 *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_253F37208 = 0;
    dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get(void)::inst = 0u;
    unk_253F371E0 = 0u;
    xmmword_253F371F0 = 0u;
    qword_253F37200 = (uint64_t)&qword_253F37208;
    qword_253F37210 = 0;
    unk_253F37218 = 850045863;
    xmmword_253F37220 = 0u;
    unk_253F37230 = 0u;
    xmmword_253F37240 = 0u;
    qword_253F37250 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::~Registry, &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get(void)::inst, &dword_220DF6000);
  }
  return &dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get(void)::inst;
}

void *xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(xgboost::tree::CPUHistMakerTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CPUHistMakerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::tree::CPUHistMakerTrainParam>::ParamManagerSingleton((uint64_t)&xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::tree::CPUHistMakerTrainParam>::~ParamManagerSingleton, &xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::tree::CPUHistMakerTrainParam::__MANAGER__(void)::inst;
}

void sub_220E0749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::tree::CPUHistMakerTrainParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[2];

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  std::string::operator=((std::string *)a1, a2);
  xgboost::tree::CPUHistMakerTrainParam::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220E07524(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

void *xgboost::PesudoHuberParam::__MANAGER__(xgboost::PesudoHuberParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PesudoHuberParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::PesudoHuberParam>::ParamManagerSingleton((uint64_t)&xgboost::PesudoHuberParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::PesudoHuberParam>::~ParamManagerSingleton, &xgboost::PesudoHuberParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::PesudoHuberParam::__MANAGER__(void)::inst;
}

void sub_220E075DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::PesudoHuberParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[4];
  int v5;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  v5 = 1065353216;
  std::string::operator=((std::string *)a1, a2);
  xgboost::PesudoHuberParam::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220E0766C(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

void *xgboost::GlobalConfiguration::__MANAGER__(xgboost::GlobalConfiguration *this)
{
  unsigned __int8 v1;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GlobalConfiguration");
    dmlc::parameter::ParamManagerSingleton<xgboost::GlobalConfiguration>::ParamManagerSingleton((uint64_t)&xgboost::GlobalConfiguration::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::GlobalConfiguration>::~ParamManagerSingleton, &xgboost::GlobalConfiguration::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::GlobalConfiguration::__MANAGER__(void)::inst;
}

void sub_220E07724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::GlobalConfiguration>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[4];
  int v5;
  char v6;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  v5 = 1;
  v6 = 0;
  std::string::operator=((std::string *)a1, a2);
  xgboost::GlobalConfiguration::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220E077B8(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::set_range(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 112) = a2;
  *(_DWORD *)(result + 116) = a3;
  *(_WORD *)(result + 108) = 257;
  return result;
}

void *xgboost::common::AFTParam::__MANAGER__(xgboost::common::AFTParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AFTParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::common::AFTParam>::ParamManagerSingleton((uint64_t)&xgboost::common::AFTParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::common::AFTParam>::~ParamManagerSingleton, &xgboost::common::AFTParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::common::AFTParam::__MANAGER__(void)::inst;
}

void sub_220E07880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::common::AFTParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[12];

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  std::string::operator=((std::string *)a1, a2);
  xgboost::common::AFTParam::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220E07908(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_learner_cc(xgboost::LearnerModelParamLegacy *a1)
{
  __int128 *v1;
  std::string *v2;

  v1 = xgboost::LearnerModelParamLegacy::__MANAGER__(a1);
  v2 = xgboost::LearnerTrainParam::__MANAGER__((xgboost::LearnerTrainParam *)v1);
  xgboost::GenericParameter::__MANAGER__((xgboost::GenericParameter *)v2);
  std::string::basic_string[abi:ne180100]<0>(&xgboost::LearnerConfiguration::kEvalMetric, "eval_metric");
  return __cxa_atexit(MEMORY[0x24BEDACF0], &xgboost::LearnerConfiguration::kEvalMetric, &dword_220DF6000);
}

__int128 *xgboost::LearnerModelParamLegacy::__MANAGER__(xgboost::LearnerModelParamLegacy *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_13);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LearnerModelParamLegacy");
    dmlc::parameter::ParamManagerSingleton<xgboost::LearnerModelParamLegacy>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::LearnerModelParamLegacy>::~ParamManagerSingleton, &xmmword_253F36B60, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_13);
  }
  return &xmmword_253F36B60;
}

void sub_220E07A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_13);
  _Unwind_Resume(a1);
}

std::string *xgboost::LearnerTrainParam::__MANAGER__(xgboost::LearnerTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36B50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36B50))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LearnerTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::LearnerTrainParam>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::LearnerTrainParam>::~ParamManagerSingleton, &stru_253F36BA8, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36B50);
  }
  return &stru_253F36BA8;
}

void sub_220E07ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36B50);
  _Unwind_Resume(a1);
}

std::string *xgboost::GenericParameter::__MANAGER__(xgboost::GenericParameter *this)
{
  unsigned __int8 v1;
  std::string __p;

  v1 = atomic_load((unsigned __int8 *)&qword_253F36B58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F36B58))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "GenericParameter");
    dmlc::parameter::ParamManagerSingleton<xgboost::GenericParameter>::ParamManagerSingleton(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::GenericParameter>::~ParamManagerSingleton, &stru_253F36BF0, &dword_220DF6000);
    __cxa_guard_release(&qword_253F36B58);
  }
  return &stru_253F36BF0;
}

void sub_220E07B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F36B58);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::LearnerModelParamLegacy>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  std::string *v7;
  uint64_t v8;
  void **v9;
  std::string *v10;
  std::string __p;
  std::string __stra;

  qword_253F36B98 = 0;
  qword_253F36BA0 = 0;
  xmmword_253F36B60 = 0u;
  *(_OWORD *)algn_253F36B70 = 0u;
  xmmword_253F36B80 = 0u;
  qword_253F36B90 = (uint64_t)&qword_253F36B98;
  std::string::operator=((std::string *)&xmmword_253F36B60, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_score");
  v1 = operator new();
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)v1 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "float");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 0;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B60, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  *(_DWORD *)(v1 + 104) = 1056964608;
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Global bias of the model.");
  std::string::operator=((std::string *)(v1 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_feature");
  v3 = operator new();
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6BC7E8;
  std::string::operator=((std::string *)(v3 + 24), &__p);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int (non-negative)");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B60, (const void **)&__p.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of features in training data, this parameter will be automatically detected by learner.");
  std::string::operator=((std::string *)(v3 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_class");
  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_WORD *)(v5 + 108) = 0;
  *(_QWORD *)v5 = &unk_24E6B5E08;
  *(_BYTE *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 128) = v5 + 136;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = v5 + 160;
  *(_QWORD *)(v5 + 168) = 0;
  std::string::operator=((std::string *)(v5 + 24), &__p);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_30;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_30:
  *(_QWORD *)(v5 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B60, (const void **)&__p.__r_.__value_.__l.__data_, v5);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v7 = (std::string *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 80))(v5, 0);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of class option for multi-class classifier.  By default equals 0 and corresponds to binary classifier.");
  std::string::operator=(v7 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_target");
  v8 = operator new();
  *(_QWORD *)(v8 + 112) = 0;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)v8 = &unk_24E6BC7E8;
  std::string::operator=((std::string *)(v8 + 24), &__p);
  if (*(char *)(v8 + 71) < 0)
  {
    if (*(_QWORD *)(v8 + 56))
      goto LABEL_41;
  }
  else if (*(_BYTE *)(v8 + 71))
  {
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int (non-negative)");
  v9 = (void **)(v8 + 48);
  if (*(char *)(v8 + 71) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_41:
  *(_QWORD *)(v8 + 96) = 28;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&xmmword_253F36B60, (const void **)&__p.__r_.__value_.__l.__data_, v8);
  *(_DWORD *)(v8 + 104) = 1;
  *(_BYTE *)(v8 + 8) = 1;
  v10 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, 1);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of target for multi-target regression.");
  std::string::operator=(v10 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220E080A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&xmmword_253F36B60);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::LearnerTrainParam>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  std::string v9;
  void *__p[2];
  char v11;
  std::string v12;
  std::string __stra;
  std::string v14;

  qword_253F36BE0 = 0;
  qword_253F36BE8 = 0;
  *(_OWORD *)&stru_253F36BA8.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36BA8.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36BC8 = 0u;
  qword_253F36BD8 = (uint64_t)&qword_253F36BE0;
  std::string::operator=(&stru_253F36BA8, __str);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "dsplit");
  v1 = operator new();
  *(_BYTE *)(v1 + 8) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 128) = v1 + 136;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = v1 + 160;
  *(_WORD *)(v1 + 108) = 0;
  *(_QWORD *)v1 = &off_24E6BC898;
  *(_BYTE *)(v1 + 120) = 1;
  *(_QWORD *)(v1 + 168) = 0;
  std::string::operator=((std::string *)(v1 + 24), &__stra);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "int");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BA8, (const void **)&__stra.__r_.__value_.__l.__data_, v1);
  *(_DWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v14, "auto");
  dmlc::parameter::FieldEntry<int>::add_enum(v1, (const void **)&v14.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&v12, "col");
  dmlc::parameter::FieldEntry<int>::add_enum(v1, (const void **)&v12.__r_.__value_.__l.__data_, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "row");
  dmlc::parameter::FieldEntry<int>::add_enum(v1, (const void **)__p, 2);
  std::string::basic_string[abi:ne180100]<0>(&v9, "Data split mode for distributed training.");
  std::string::operator=((std::string *)(v1 + 72), &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "disable_default_eval_metric");
  v3 = operator new();
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v3 + 24), &__stra);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_25;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "BOOLean");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
LABEL_25:
  *(_QWORD *)(v3 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BA8, (const void **)&__stra.__r_.__value_.__l.__data_, v3);
  *(_BYTE *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v14, "Flag to disable default metric. Set to >0 to disable");
  std::string::operator=((std::string *)(v3 + 72), &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "booster");
  v5 = operator new();
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v5 + 24), &__stra);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_36;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "string");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
LABEL_36:
  *(_QWORD *)(v5 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BA8, (const void **)&__stra.__r_.__value_.__l.__data_, v5);
  std::string::basic_string[abi:ne180100]<0>(&v14, "gbtree");
  std::string::operator=((std::string *)(v5 + 104), &v14);
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v12, "Gradient booster used for training.");
  std::string::operator=((std::string *)(v5 + 72), &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "objective");
  v7 = operator new();
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)v7 = &unk_24E6B5A38;
  std::string::operator=((std::string *)(v7 + 24), &__stra);
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_49;
  }
  else if (*(_BYTE *)(v7 + 71))
  {
    goto LABEL_49;
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "string");
  v8 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 64) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
LABEL_49:
  *(_QWORD *)(v7 + 96) = 40;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BA8, (const void **)&__stra.__r_.__value_.__l.__data_, v7);
  std::string::basic_string[abi:ne180100]<0>(&v14, "reg:squarederror");
  std::string::operator=((std::string *)(v7 + 104), &v14);
  *(_BYTE *)(v7 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v12, "Objective function used for obtaining gradient.");
  std::string::operator=((std::string *)(v7 + 72), &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_220E086BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  xgboost::LearnerTrainParam::~LearnerTrainParam(&a10);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36BA8);
  _Unwind_Resume(a1);
}

void dmlc::parameter::ParamManagerSingleton<xgboost::GenericParameter>::ParamManagerSingleton(std::string *__str)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  std::string *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  std::string __p;
  std::string __stra;

  qword_253F36C28 = 0;
  qword_253F36C30 = 0;
  *(_OWORD *)&stru_253F36BF0.__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&stru_253F36BF0.__r_.__value_.__r.__words[2] = 0u;
  xmmword_253F36C10 = 0u;
  qword_253F36C20 = (uint64_t)&qword_253F36C28;
  std::string::operator=(&stru_253F36BF0, __str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "seed");
  v1 = operator new();
  *(_QWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)v1 = &off_24E6BC918;
  std::string::operator=((std::string *)(v1 + 24), &__p);
  if (*(char *)(v1 + 71) < 0)
  {
    if (*(_QWORD *)(v1 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v1 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "long");
  v2 = (void **)(v1 + 48);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v1 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v1);
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Random number seed during training.");
  std::string::operator=((std::string *)(v1 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "seed");
  std::string::basic_string[abi:ne180100]<0>(&__p, "random_state");
  dmlc::parameter::ParamManager::AddAlias((uint64_t)&stru_253F36BF0, (const void **)&__stra.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "seed_per_iteration");
  v3 = operator new();
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v3 + 24), &__p);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_23;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "BOOLean");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_23:
  *(_QWORD *)(v3 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v3);
  *(_BYTE *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Seed PRNG determnisticly via iterator number.");
  std::string::operator=((std::string *)(v3 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nthread");
  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_WORD *)(v5 + 108) = 0;
  *(_QWORD *)v5 = &unk_24E6B5E08;
  *(_BYTE *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 128) = v5 + 136;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = v5 + 160;
  *(_QWORD *)(v5 + 168) = 0;
  std::string::operator=((std::string *)(v5 + 24), &__p);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_34;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_34:
  *(_QWORD *)(v5 + 96) = 20;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v5);
  *(_DWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Number of threads to use.");
  std::string::operator=((std::string *)(v5 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "nthread");
  std::string::basic_string[abi:ne180100]<0>(&__p, "n_jobs");
  dmlc::parameter::ParamManager::AddAlias((uint64_t)&stru_253F36BF0, (const void **)&__stra.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "gpu_id");
  v7 = operator new();
  *(_BYTE *)(v7 + 8) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_WORD *)(v7 + 108) = 0;
  *(_QWORD *)v7 = &unk_24E6B5E08;
  *(_BYTE *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 128) = v7 + 136;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = v7 + 160;
  *(_QWORD *)(v7 + 168) = 0;
  std::string::operator=((std::string *)(v7 + 24), &__p);
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(_QWORD *)(v7 + 56))
      goto LABEL_49;
  }
  else if (*(_BYTE *)(v7 + 71))
  {
    goto LABEL_49;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "int");
  v8 = (void **)(v7 + 48);
  if (*(char *)(v7 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_49:
  *(_QWORD *)(v7 + 96) = 24;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v7);
  *(_DWORD *)(v7 + 104) = -1;
  *(_BYTE *)(v7 + 8) = 1;
  v9 = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, 0xFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(&__stra, "The primary GPU device ordinal.");
  std::string::operator=(v9 + 3, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fail_on_invalid_gpu_id");
  v10 = operator new();
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_QWORD *)v10 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v10 + 24), &__p);
  if (*(char *)(v10 + 71) < 0)
  {
    if (*(_QWORD *)(v10 + 56))
      goto LABEL_60;
  }
  else if (*(_BYTE *)(v10 + 71))
  {
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "BOOLean");
  v11 = (void **)(v10 + 48);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v10 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_60:
  *(_QWORD *)(v10 + 96) = 28;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v10);
  *(_BYTE *)(v10 + 104) = 0;
  *(_BYTE *)(v10 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Fail with error when gpu_id is invalid.");
  std::string::operator=((std::string *)(v10 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "validate_parameters");
  v12 = operator new();
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_QWORD *)v12 = &unk_24E6BBA60;
  std::string::operator=((std::string *)(v12 + 24), &__p);
  if (*(char *)(v12 + 71) < 0)
  {
    if (*(_QWORD *)(v12 + 56))
      goto LABEL_71;
  }
  else if (*(_BYTE *)(v12 + 71))
  {
    goto LABEL_71;
  }
  std::string::basic_string[abi:ne180100]<0>(&__stra, "BOOLean");
  v13 = (void **)(v12 + 48);
  if (*(char *)(v12 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
  *(_QWORD *)(v12 + 64) = *((_QWORD *)&__stra.__r_.__value_.__l + 2);
LABEL_71:
  *(_QWORD *)(v12 + 96) = 29;
  dmlc::parameter::ParamManager::AddEntry((uint64_t)&stru_253F36BF0, (const void **)&__p.__r_.__value_.__l.__data_, v12);
  *(_BYTE *)(v12 + 104) = 0;
  *(_BYTE *)(v12 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__stra, "Enable checking whether parameters are used or not.");
  std::string::operator=((std::string *)(v12 + 72), &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220E08F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  dmlc::parameter::ParamManager::~ParamManager((dmlc::parameter::ParamManager *)&stru_253F36BF0);
  _Unwind_Resume(a1);
}

void *xgboost::linear::LinearTrainParam::__MANAGER__(xgboost::linear::LinearTrainParam *this)
{
  unsigned __int8 v1;
  std::string __p;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LinearTrainParam");
    dmlc::parameter::ParamManagerSingleton<xgboost::linear::LinearTrainParam>::ParamManagerSingleton((uint64_t)&xgboost::linear::LinearTrainParam::__MANAGER__(void)::inst, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))dmlc::parameter::ParamManagerSingleton<xgboost::linear::LinearTrainParam>::~ParamManagerSingleton, &xgboost::linear::LinearTrainParam::__MANAGER__(void)::inst, &dword_220DF6000);
  }
  return &xgboost::linear::LinearTrainParam::__MANAGER__(void)::inst;
}

void sub_220E09098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::ParamManagerSingleton<xgboost::linear::LinearTrainParam>::ParamManagerSingleton(uint64_t a1, const std::string *a2)
{
  _BYTE v4[28];

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  v4[0] = 0;
  std::string::operator=((std::string *)a1, a2);
  xgboost::linear::LinearTrainParam::__DECLARE__((uint64_t)v4, a1);
  return a1;
}

void sub_220E09120(_Unwind_Exception *a1)
{
  dmlc::parameter::ParamManager *v1;

  dmlc::parameter::ParamManager::~ParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_regression_obj__(xgboost::obj *this)
{
  return 0;
}

void dmlc::parameter::ParamManager::~ParamManager(dmlc::parameter::ParamManager *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *((_QWORD *)this + 3);
        v2 = *((_QWORD *)this + 4);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)this + 48, *((char **)this + 7));
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24E6B45A0, MEMORY[0x24BEDAAF0]);
}

void sub_220E0932C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void dmlc::parameter::FieldEntry<float>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

float dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::SetDefault(uint64_t a1, uint64_t a2)
{
  float result;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::runtime_error *exception;
  std::string v18;
  _QWORD v19[33];

  if (!*(_BYTE *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    v5 = *(char *)(a1 + 47);
    if (v5 >= 0)
      v6 = a1 + 24;
    else
      v6 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 47);
    else
      v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    v12 = *(_QWORD *)(a1 + 48);
    v11 = a1 + 48;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  result = *(float *)(a1 + 104);
  *(float *)(a2 + *(_QWORD *)(a1 + 96)) = result;
  return result;
}

void sub_220E094D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntry<float>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v18;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v21[33];
  std::string::size_type v22;
  char v23;

  v22 = 0;
  *(float *)(a2 + *(_QWORD *)(a1 + 96)) = dmlc::stof(a3, &v22);
  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  __p.__r_.__value_.__r.__words[0] = v4;
  if (v22 > v4)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(v21);
    if (v21[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"pos <= value.length()", 21);
      v9 = *(char *)(v21[0] + 23);
      v10 = v9 >= 0 ? v21[0] : *(_QWORD *)v21[0];
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v21[0] + 23) : *(_QWORD *)(v21[0] + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v13 = v21[0];
      v21[0] = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v21, v13);
    }
  }
  v14 = *(unsigned __int8 *)(a3 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a3 + 8);
  if (v22 < v14)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Some trailing characters could not be parsed: '", 47);
    std::string::basic_string(&__p, (const std::string *)a3, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"'", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
}

void sub_220E09720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  __break(1u);
}

void sub_220E09994(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a15);
    __cxa_end_catch();
    JUMPOUT(0x220E09A54);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_220E09A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  JUMPOUT(0x220E09A40);
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<float>,float>::Check(uint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(float *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 108))
  {
    v3 = *(float *)(result + 112);
    if (*(_BYTE *)(result + 109))
    {
      if (v2 < v3 || v2 > *(float *)(result + 116))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 109) && v2 > *(float *)(result + 116))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220E09EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, float))(*a1 + 64))(a1, v5, *(float *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220E09FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220E0A170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<float>,float>::PrintDefaultValueString(float *a1)
{
  return (*(uint64_t (**)(float *, float))(*(_QWORD *)a1 + 64))(a1, a1[26]);
}

uint64_t dmlc::parameter::FieldEntry<float>::PrintValue(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = 9;
  return std::ostream::operator<<();
}

void dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(void **this)
{
  *this = &unk_24E6B5538;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_220E0A2F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x227666FE4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](a1 + 112);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x227666D74](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x227666D80](v13);
  return a1;
}

void sub_220E0A5BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x227666D80](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x220E0A59CLL);
}

void sub_220E0A604(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_220E0A738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void dmlc::ParamError::~ParamError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x227667068);
}

void dmlc::Error::~Error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x227667068);
}

float dmlc::stof(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  float v4;
  std::logic_error *exception;
  struct type_info *v8;
  void (*v9)(void *);
  uint64_t v10;

  if (*(char *)(a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  v10 = 0;
  v4 = dmlc::ParseFloat<float,true>(v3, &v10);
  if (*__error() == 34 && v4 == INFINITY)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Out of range value");
    v8 = (struct type_info *)off_24E6B45A8;
    v9 = (void (*)(void *))MEMORY[0x24BEDAB00];
    goto LABEL_14;
  }
  if (v10 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "No conversion could be performed");
    v8 = (struct type_info *)off_24E6B45B0;
    v9 = (void (*)(void *))MEMORY[0x24BEDAB88];
LABEL_14:
    __cxa_throw(exception, v8, v9);
  }
  if (a2)
    *a2 = v10 - v3;
  return v4;
}

void sub_220E0A928(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

float dmlc::ParseFloat<float,true>(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  unsigned int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  float result;
  float v13;
  uint64_t v14;
  _BYTE *v15;
  char *j;
  int v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  std::string *Entry;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;

  for (i = a1 + 4; ; ++i)
  {
    v4 = *(unsigned __int8 *)(i - 4);
    if (v4 > 0x20 || ((1 << v4) & 0x100003600) == 0)
      break;
  }
  v6 = 0;
  v7 = v4 == 45 || v4 == 43;
  v8 = v7;
  if (v7)
    v9 = i + 1;
  else
    v9 = i;
  v10 = v9 + 4;
  while ((*(unsigned __int8 *)(v9 + v6 - 4) | 0x20) == aInfinity[v6])
  {
    if (++v6 == 8)
      goto LABEL_22;
  }
  v10 = i + v8 + v6 - 4;
  if ((_DWORD)v6 != 8 && (_DWORD)v6 != 3)
  {
    v14 = 0;
    v15 = (_BYTE *)(i + v8 - 1);
    while ((*(unsigned __int8 *)(i + v8 + v14 - 4) | 0x20) == aNan[v14])
    {
      if (++v14 == 3)
      {
        if (*v15 == 40)
        {
          for (j = (char *)(i + v8); ; ++j)
          {
            v17 = *j;
            if ((v17 - 48) >= 0xA && v17 != 95 && (v17 & 0xFFFFFFDF) - 65 > 0x19)
              break;
          }
          v51 = 41;
          if (v17 != 41)
          {
            dmlc::LogCheckFormat<char,char>(j, &v51, &v52);
            if (v52)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././strtonum.h");
              v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
              v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: ", 14);
              v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"*p == ')'", 9);
              v34 = *(char *)(v52 + 23);
              v35 = v34 >= 0 ? v52 : *(_QWORD *)v52;
              v36 = v34 >= 0 ? *(unsigned __int8 *)(v52 + 23) : *(_QWORD *)(v52 + 8);
              v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
              v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Invalid NAN literal", 19);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
              v39 = v52;
              v52 = 0;
              if (v39)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v52, v39);
            }
          }
          v15 = j + 1;
        }
        if (a2)
          *a2 = (uint64_t)v15;
        return NAN;
      }
    }
    v19 = i + v8;
    v22 = *(unsigned __int8 *)(v19 - 4);
    v21 = v19 - 4;
    v20 = v22;
    if (v22 - 48 > 9)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      do
      {
        v23 = 10 * v23 + v20 - 48;
        v24 = *(unsigned __int8 *)++v21;
        v20 = v24;
      }
      while (v24 - 48 < 0xA);
    }
    result = (float)(unint64_t)v23;
    if (v20 == 46)
    {
      v20 = *(unsigned __int8 *)(v21 + 1);
      if (v20 - 48 > 9)
      {
        v29 = 0.0;
        ++v21;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v27 = 1;
        do
        {
          v28 = 10 * v26 + v20 - 48;
          if (v25 < 0x13)
          {
            v27 *= 10;
            v26 = v28;
          }
          v20 = *(unsigned __int8 *)(v21 + v25++ + 2);
        }
        while (v20 - 48 < 0xA);
        v29 = (double)v26 / (double)v27;
        v21 += v25 + 1;
      }
      result = v29 + result;
    }
    if ((v20 | 0x20) != 0x65)
    {
      v44 = v21;
      goto LABEL_96;
    }
    v41 = *(unsigned __int8 *)(v21 + 1);
    v42 = v41 == 45 || v41 == 43;
    v43 = 1;
    if (v42)
    {
      v43 = 2;
      v44 = v21 + 2;
    }
    else
    {
      v44 = v21 + 1;
    }
    v20 = *(unsigned __int8 *)(v21 + v43);
    v45 = 1.0;
    if (v20 - 48 > 9)
    {
LABEL_93:
      if (v41 == 45)
        result = result / v45;
      else
        result = result * v45;
LABEL_96:
      if ((v20 | 0x20) == 0x66)
        v49 = v44 + 1;
      else
        v49 = v44;
      if (a2)
        *a2 = v49;
      v13 = -result;
      v11 = v4 == 45;
      goto LABEL_25;
    }
    v46 = 0;
    do
    {
      v46 = v20 + 10 * v46 - 48;
      v47 = *(unsigned __int8 *)++v44;
      v20 = v47;
    }
    while (v47 - 48 < 0xA);
    if (v46 >= 0x27)
    {
LABEL_79:
      *__error() = 34;
      if (a2)
        *a2 = v44;
      return INFINITY;
    }
    if (v46 == 38)
    {
      v48 = result > 3.4028;
      if (v41 == 45)
        v48 = result < 1.1755;
      if (v48)
        goto LABEL_79;
    }
    else
    {
      v45 = 1.0;
      if (v46 <= 7)
        goto LABEL_91;
    }
    v45 = 1.0;
    do
    {
      v45 = v45 * 100000000.0;
      v46 -= 8;
    }
    while (v46 > 7);
LABEL_91:
    while (v46)
    {
      v45 = v45 * 10.0;
      --v46;
    }
    goto LABEL_93;
  }
LABEL_22:
  if (a2)
    *a2 = v10;
  v11 = v4 == 45;
  result = INFINITY;
  v13 = -INFINITY;
LABEL_25:
  if (v11)
    return v13;
  return result;
}

void sub_220E0ADC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogCheckFormat<char,char>@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;
  char v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (", 2);
  v15 = *a1;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v15, 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
  v15 = *a2;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v15, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
  v10 = operator new();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a3 = v10;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220E0AF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x227667068](v9, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<unsigned long,unsigned long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E0B070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::LogMessageFatal::Entry::Init(std::string *this, const char *a2)
{
  _QWORD *v4;
  dmlc::DateLogger *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string __p;
  _BYTE v14[9];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_220F8364E);
  std::string::operator=(this + 3, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&this->__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(this->__r_.__value_.__r.__words[0] - 24)), 0);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)"[", 1);
  v5 = dmlc::DateLogger::HumanDate((dmlc::DateLogger *)v14);
  v6 = strlen((const char *)v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
  v9 = strlen(a2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
}

void sub_220E0B1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogMessageFatal::Entry::ThreadLocal(dmlc::LogMessageFatal::Entry *this)
{
  uint64_t (*v1)(_QWORD);
  void *v3;

  {
    v3 = (void *)dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result(&dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    _tlv_atexit((void (__cdecl *)(void *))dmlc::LogMessageFatal::Entry::~Entry, v3);
  }
  return dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result(&dmlc::LogMessageFatal::Entry::ThreadLocal(void)::result);
}

void dmlc::LogMessageFatal::Entry::~Entry(dmlc::LogMessageFatal::Entry *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)this = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4]((char *)this + 112);
}

dmlc::DateLogger *dmlc::DateLogger::HumanDate(dmlc::DateLogger *this)
{
  tm *v2;
  tm v4;
  time_t v5;

  v5 = time(0);
  v2 = localtime_r(&v5, &v4);
  snprintf((char *)this, 9uLL, "%02d:%02d:%02d", v2->tm_hour, v2->tm_min, v2->tm_sec);
  return this;
}

void dmlc::LogMessageFatal::~LogMessageFatal(dmlc::LogMessageFatal *this)
{
  _QWORD *Entry;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v11;
  uint64_t v12;

  Entry = (_QWORD *)dmlc::LogMessageFatal::GetEntry(this);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Entry, (uint64_t)"\n", 1);
  v4 = getenv("DMLC_LOG_STACK_TRACE_DEPTH");
  if (v4 && (v12 = 0, sscanf(v4, "%zu", &v12) == 1))
    v5 = v12 + 1;
  else
    v5 = 10;
  dmlc::StackTrace(1uLL, v5);
  if ((v11 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v7 = v11;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  dmlc::LogMessageFatal::GetEntry(this);
  dmlc::LogMessageFatal::Entry::Finalize(exception);
}

void sub_220E0B46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t dmlc::StackTrace(unint64_t this, unint64_t a2)
{
  int v4;
  char **v5;
  char **v6;
  int v7;
  unint64_t v8;
  dmlc **v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p[2];
  unsigned __int8 v17;
  void **v18[3];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  std::vector<void *>::vector(v18, a2);
  v4 = backtrace(v18[0], a2);
  if (v4 > this)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Stack trace:\n", 13);
  v5 = backtrace_symbols(v18[0], v4);
  v6 = v5;
  if (v5)
  {
    v7 = v4 - this;
    if (v4 > (int)this)
    {
      v8 = (int)this - this;
      v9 = (dmlc **)&v5[(int)this];
      do
      {
        dmlc::Demangle(*v9, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  [bt] (", 8);
        v10 = (_QWORD *)std::ostream::operator<<();
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
        if ((v17 & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if ((v17 & 0x80u) == 0)
          v13 = v17;
        else
          v13 = (uint64_t)__p[1];
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
        if ((char)v17 < 0)
          operator delete(__p[0]);
        ++v8;
        ++v9;
        --v7;
      }
      while (v7);
    }
  }
  free(v6);
  std::stringbuf::str();
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  v19[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v19[1] = MEMORY[0x24BEDB848] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v21);
}

void sub_220E0B66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void dmlc::LogMessageFatal::Entry::Finalize(std::runtime_error *a1@<X8>)
{
  std::string v3;

  std::stringbuf::str();
  std::runtime_error::runtime_error(a1, &v3);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_220E0B714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void dmlc::Demangle(dmlc *this@<X0>, _QWORD *a2@<X8>)
{
  int64_t size;
  std::string *p_str;
  char *v7;
  int64_t v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  char *v16;
  char *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;
  void *v29[2];
  unsigned __int8 v30;
  size_t outlen;
  int status;
  void *__dst[2];
  unsigned __int8 v34;
  std::string v35;
  std::string v36;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)this);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (size >= 2)
  {
    v7 = (char *)p_str + size;
    v8 = size;
    v9 = p_str;
    do
    {
      v10 = (char *)memchr(v9, 95, v8 - 1);
      if (!v10)
        break;
      if (*(_WORD *)v10 == 23135)
      {
        if (v10 == v7)
          break;
        v11 = v10 - (char *)p_str;
        if (v10 - (char *)p_str == -1)
          break;
        if (size <= v11)
        {
LABEL_25:
          v14 = -1;
        }
        else
        {
          v12 = (unsigned __int8 *)v10;
LABEL_17:
          v13 = 0;
          while (*v12 != asc_220F83685[v13])
          {
            if (++v13 == 2)
            {
              if (++v12 != (unsigned __int8 *)v7)
                goto LABEL_17;
              goto LABEL_25;
            }
          }
          if (v12 == (unsigned __int8 *)v7)
            goto LABEL_25;
          v14 = v12 - (unsigned __int8 *)p_str;
          if (!v14)
            break;
        }
        std::string::basic_string(&v36, &__str, 0, v11, (std::allocator<char> *)v26);
        std::string::basic_string(&v35, &__str, v11, v14 - v11, (std::allocator<char> *)v26);
        std::string::basic_string[abi:ne180100](__dst, (uint64_t *)&__str, v14);
        status = 0;
        outlen = -1;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v35;
        else
          v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
        v16 = __cxa_demangle((const char *)v15, 0, &outlen, &status);
        v17 = v16;
        if (v16 && !status && outlen)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, v16);
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v36;
          else
            v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          else
            v19 = v36.__r_.__value_.__l.__size_;
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v18, v19);
          if ((v30 & 0x80u) == 0)
            v21 = v29;
          else
            v21 = (void **)v29[0];
          if ((v30 & 0x80u) == 0)
            v22 = v30;
          else
            v22 = (uint64_t)v29[1];
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          if ((v34 & 0x80u) == 0)
            v24 = __dst;
          else
            v24 = (void **)__dst[0];
          if ((v34 & 0x80u) == 0)
            v25 = v34;
          else
            v25 = (uint64_t)__dst[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::stringbuf::str();
          v26[0] = *MEMORY[0x24BEDB800];
          *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
          v26[1] = MEMORY[0x24BEDB848] + 16;
          if (v27 < 0)
            operator delete((void *)v26[9]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x227666FE4](&v28);
          if ((char)v30 < 0)
            operator delete(v29[0]);
          free(v17);
          if ((char)v34 < 0)
            operator delete(__dst[0]);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          goto LABEL_69;
        }
        if (v16)
          free(v16);
        if ((char)v34 < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        break;
      }
      v9 = (std::string *)(v10 + 1);
      v8 = v7 - (char *)v9;
    }
    while (v7 - (char *)v9 >= 2);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)this);
LABEL_69:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_220E0BA68(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 177) < 0)
    operator delete(*(void **)(v2 - 200));
  free(v1);
  if (*(char *)(v2 - 137) < 0)
    operator delete(*(void **)(v2 - 160));
  if (*(char *)(v2 - 113) < 0)
    operator delete(*(void **)(v2 - 136));
  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  if (*(char *)(v2 - 65) < 0)
    operator delete(*(void **)(v2 - 88));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<void *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_220E0BB60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<void *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24E6B45A8, MEMORY[0x24BEDAB00]);
}

void sub_220E0BC54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 < a3)
      goto LABEL_15;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3)
LABEL_15:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v7;
    v8 = __dst;
    if (v6 == a3)
      goto LABEL_14;
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  return __dst;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x227667068);
  }
}

void dmlc::ParamFieldInfo::~ParamFieldInfo(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::__function::__value_func<xgboost::ObjFunction * ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_220E0C208(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4980;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8B30;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B97F8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAB18;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAD10;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4A00;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6BAD80;
  *(_BYTE *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 0;
  xgboost::HostDeviceVector<int>::HostDeviceVector((std::vector<int> **)(v0 + 32), 0, 0);
  return v0;
}

void sub_220E0C2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

{
}

{
}

{
}

_QWORD *xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4A00;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  return a1;
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4A00;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (_BYTE *)(a1 + 24));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E0C404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "reg:squarederror");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::RegLossParam>(v10, (void *)(a1 + 24));
  std::string::basic_string[abi:ne180100]<0>(v8, "reg_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E0C554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (_BYTE *)(a1 + 24), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  float **v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *Entry;
  _QWORD *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  std::string *v36;
  _QWORD *v37;
  std::exception_ptr v38;
  std::mutex v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v9 = ((*a2)[1] - **a2) >> 2;
  v38.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v38);
  v10 = *(float ***)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v12 = *v10;
  **v10 = 1.0;
  v13 = **(_QWORD **)(a3 + 72);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
  v15 = 0.0;
  if (v14 == v13)
    v15 = 1.0;
  v12[1] = *(float *)(a1 + 28);
  v12[2] = v15;
  if (v9 <= 1)
    v16 = 1;
  else
    v16 = v9;
  if (v11 < 0)
    v16 = 1;
  v17 = v9 / v16;
  if (v9 % v16)
    ++v17;
  v18 = *(_QWORD *)(a3 + 40);
  if (v18 <= 1)
    v18 = 1;
  if (v11 < 0)
  {
    v38.__ptr_ = 0;
    v39.__m_.__sig = 850045863;
    memset(v39.__m_.__opaque, 0, sizeof(v39.__m_.__opaque));
    v21 = v10[1];
    v22 = *(_QWORD *)*a5;
    if (!v22 && *(_QWORD *)(*a5 + 8)
      || (v23 = **a2) == 0 && (*a2)[1]
      || (v24 = *(uint64_t **)(a3 + 24), (v25 = *v24) == 0) && v24[1]
      || !v13 && v14
      || (unint64_t)((char *)v21 - (char *)v12) < 5
      || (char *)v21 - (char *)v12 == 8)
    {
      std::terminate();
    }
    for (i = 0; i != v16; ++i)
    {
      v27 = i * v17;
      v28 = i * v17 + v17;
      if (v28 >= v9)
        v28 = v9;
      if (v27 < v28)
      {
        v29 = v12[1];
        v30 = v12[2];
        do
        {
          v31 = 1.0;
          if (v30 == 0.0)
            v31 = *(float *)(v13 + 4 * (v27 / v18));
          v32 = *(float *)(v25 + 4 * v27);
          if (v32 == 1.0)
            v33 = v29;
          else
            v33 = 1.0;
          v34 = v31 * v33;
          v35 = (float *)(v22 + 8 * v27);
          *v35 = (float)(*(float *)(v23 + 4 * v27) - v32) * v34;
          v35[1] = v34;
          ++v27;
        }
        while (v27 != v28);
      }
    }
    dmlc::OMPException::Rethrow(&v38);
    std::mutex::~mutex(&v39);
    std::exception_ptr::~exception_ptr(&v38);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v37 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)&unk_220F8364E, 0);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
  }
}

void sub_220E0C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::DefaultEvalMetric()
{
  return "rmse";
}

void xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::exception_ptr v5;
  std::mutex v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (!v4 || (unint64_t)(v2 - v3) < 4)
      std::terminate();
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_220E0C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::ObjFunction::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Task()
{
  return 256;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LinearSquareLoss>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

uint64_t xgboost::ObjFunction::Targets(xgboost::ObjFunction *this, const xgboost::MetaInfo *a2)
{
  std::string *Entry;
  _QWORD *v3;
  char v5;

  if (*((_QWORD *)a2 + 5) >= 2uLL)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/objective.h");
    v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"multioutput is not supported by current objective function", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  }
  return 1;
}

void sub_220E0CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::FromJson<xgboost::obj::RegLossParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, _BYTE *a3)
{
  xgboost::obj::RegLossParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = (xgboost::obj::RegLossParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      v5 = (xgboost::obj::RegLossParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  if (*a3)
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::RegLossParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36138, (uint64_t)a3, v13, v14, 0, a1, 0);
  }
  else
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::RegLossParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36138, (uint64_t)a3, v13, v14, a1, 0);
    *a3 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E0CBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD **v16;
  _QWORD *v17[2];
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  int64_t v24;
  char v25;

  if (a1[3] == 3)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v20);
  v5 = std::string::insert(&v20, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v21, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x300000000;
  v15[0] = &off_24E6BE1D0;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v19 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v10 = v19;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24 = v11->__r_.__value_.__r.__words[2];
  v23 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v24 >= 0)
    v13 = &v23;
  else
    v13 = (__int128 *)v23;
  if (v24 >= 0)
    v14 = HIBYTE(v24);
  else
    v14 = *((_QWORD *)&v23 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v15[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v16, v17[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
}

void sub_220E0CE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v32, a13);
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v33 - 49));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void *xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (!a1[3])
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v4 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v19, " to ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v15[0] = off_24E6BE2B8;
  memset(&v15[1], 0, 32);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v9 = v17;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22 = v10->__r_.__value_.__r.__words[2];
  v21 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v12 = &v21;
  else
    v12 = (__int128 *)v21;
  if (v22 >= 0)
    v13 = HIBYTE(v22);
  else
    v13 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v12, v13);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220E0D16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_220E0D324(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, std::vector<std::pair<std::string, std::string>> *a6, uint64_t **a7)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::runtime_error *exception;
  std::string v43;
  std::string v44;
  void *__p;
  char v46;
  uint64_t v47[2];

  if (a3 != a4)
  {
    v9 = a3;
    v10 = a1 + 48;
    v11 = a1 + 56;
    while (1)
    {
      v47[0] = 0;
      v12 = (void **)(v9 + 4);
      v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v10, (const void **)v9 + 4);
      if (v11 == v13)
        break;
      v14 = *(_QWORD *)(v13 + 56);
      v47[0] = v14;
      if (!v14)
        goto LABEL_8;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v14 + 24))(v14, a2, v9 + 7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47[0] + 32))(v47[0], a2);
      if (a7)
        std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(a7, (unint64_t *)v47, v47);
LABEL_47:
      v30 = (_QWORD *)v9[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v9[2];
          v32 = *v31 == (_QWORD)v9;
          v9 = v31;
        }
        while (!v32);
      }
      v9 = v31;
      if (v31 == a4)
        return;
    }
    v47[0] = 0;
LABEL_8:
    if (a6)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&v44, (__int128 *)v9 + 2);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a6, (__int128 *)&v44);
      if (v46 < 0)
        operator delete(__p);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
    }
    else if (a5)
    {
      if (a5 != 2)
        goto LABEL_54;
      v15 = *((unsigned __int8 *)v9 + 55);
      if (*((char *)v9 + 55) < 0)
      {
        v17 = v9[5];
        if (v17 <= 4)
          goto LABEL_54;
        v18 = (char *)*v12;
        v16 = (char *)*v12 + v17;
      }
      else
      {
        if (v15 < 5)
          goto LABEL_54;
        v16 = (char *)v12 + v15;
        v17 = *((unsigned __int8 *)v9 + 55);
        v18 = (char *)(v9 + 4);
      }
      v19 = v18;
      while (1)
      {
        v20 = (char *)memchr(v19, 95, v17 - 1);
        if (!v20)
          goto LABEL_54;
        if (*(_WORD *)v20 == 24415)
          break;
        v19 = v20 + 1;
        v17 = v16 - v19;
        if (v16 - v19 < 2)
          goto LABEL_54;
      }
      if (v20 == v16 || v20 != v18)
        goto LABEL_54;
      if ((v15 & 0x80) != 0)
      {
        v21 = (_BYTE *)v9[4];
        v22 = v9[5];
      }
      else
      {
        v21 = v9 + 4;
        v22 = v15;
      }
      v23 = &v21[v22];
      if (v22)
      {
        v24 = v21;
        v25 = &v21[v22];
        do
        {
          if (*v24 == 95)
          {
            v26 = 1u;
            while (v26 != 2)
            {
              if (&v24[v26] == v23)
                goto LABEL_42;
              v27 = v24[v26];
              v28 = asc_220F8384B[v26++];
              if (v27 != v28)
                goto LABEL_33;
            }
            v25 = v24;
          }
LABEL_33:
          ++v24;
        }
        while (v24 != v23);
      }
      else
      {
        v25 = v21;
      }
LABEL_42:
      v29 = v25 - v21;
      if (v25 == v23)
        v29 = -1;
      if ((v15 & 0x80) != 0)
        v15 = v9[5];
      if (v29 != v15 - 2)
      {
LABEL_54:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Cannot find argument '", 22);
        v34 = *((char *)v9 + 55);
        if (v34 >= 0)
          v35 = (uint64_t)(v9 + 4);
        else
          v35 = v9[4];
        if (v34 >= 0)
          v36 = *((unsigned __int8 *)v9 + 55);
        else
          v36 = v9[5];
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"', Possible Arguments:\n", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"----------------\n", 17);
        dmlc::parameter::ParamManager::PrintDocString(a1, &v44);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v43);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    goto LABEL_47;
  }
}

void sub_220E0D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_220E0D8CC(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void dmlc::parameter::ParamManager::PrintDocString(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  void *v19[2];
  unsigned __int8 v20;
  void *v21;
  char v22;
  void *v23[2];
  unsigned __int8 v24;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v2)
  {
    v5 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v2 + 8 * v5) + 48))(v19);
      if ((v20 & 0x80u) == 0)
        v6 = v19;
      else
        v6 = (void **)v19[0];
      if ((v20 & 0x80u) == 0)
        v7 = v20;
      else
        v7 = (uint64_t)v19[1];
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" : ", 3);
      if ((v24 & 0x80u) == 0)
        v10 = v23;
      else
        v10 = (void **)v23[0];
      if ((v24 & 0x80u) == 0)
        v11 = v24;
      else
        v11 = (uint64_t)v23[1];
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      v28 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v28, 1);
      v13 = v27;
      v14 = v27;
      if ((v27 & 0x80u) != 0)
        v13 = v26;
      if (v13)
      {
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
        if ((v27 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v27 & 0x80u) == 0)
          v17 = v27;
        else
          v17 = v26;
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
        v28 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v28, 1);
        v14 = v27;
      }
      if ((v14 & 0x80) != 0)
        operator delete(__p);
      if ((char)v24 < 0)
        operator delete(v23[0]);
      if (v22 < 0)
        operator delete(v21);
      if ((char)v20 < 0)
        operator delete(v19[0]);
      ++v5;
      v2 = *(_QWORD *)(a1 + 24);
    }
    while (v5 < (*(_QWORD *)(a1 + 32) - v2) >> 3);
  }
}

void sub_220E0DAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::ParamFieldInfo::~ParamFieldInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_220E0DF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, std::vector<std::pair<std::string, std::string>> *a5, int a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD **v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t i;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26[2];

  v26[0] = 0;
  v26[1] = 0;
  v25 = (uint64_t *)v26;
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, a2, a3, a4, a6, a5, &v25);
  v8 = *(_QWORD **)(a1 + 48);
  v9 = (_QWORD *)(a1 + 56);
  if (v8 != (_QWORD *)(a1 + 56))
  {
    do
    {
      v10 = v26[0];
      v11 = v8[7];
      if (!v26[0])
        goto LABEL_11;
      v12 = v26;
      do
      {
        v13 = v10;
        v14 = v12;
        v15 = v10[4];
        v16 = v10 + 1;
        if (v15 >= v11)
        {
          v16 = v13;
          v12 = (_QWORD **)v13;
        }
        v10 = (_QWORD *)*v16;
      }
      while (v10);
      if (v12 == v26)
        goto LABEL_11;
      if (v15 < v11)
        v13 = v14;
      if (v11 < v13[4])
LABEL_11:
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
      v17 = (_QWORD *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v8[2];
          v19 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
    }
    while (v18 != v9);
    v8 = *(_QWORD **)(a1 + 48);
  }
  if (v8 != v9)
  {
    do
    {
      v20 = v26[0];
      for (i = v8[7]; v20; v20 = (_QWORD *)*v20)
      {
        v22 = v20[4];
        if (i >= v22)
        {
          if (v22 >= i)
            goto LABEL_26;
          ++v20;
        }
      }
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)i + 16))(i, a2);
LABEL_26:
      v23 = (_QWORD *)v8[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v8[2];
          v19 = *v24 == (_QWORD)v8;
          v8 = v24;
        }
        while (!v19);
      }
      v8 = v24;
    }
    while (v24 != v9);
  }
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&v25, v26[0]);
}

void sub_220E0E0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1, *a2);
    std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *xgboost::Json::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_DWORD *)(v4 + 12) = 0;
  *(_QWORD *)v4 = off_24E6BE2B8;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0x500000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24E6BE468;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(a2 + 16);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

{
  uint64_t v4;
  unsigned int *v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0x400000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = off_24E6BE218;
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v4 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(v4 + 32) = v7;
  do
    v8 = __ldxr(v5);
  while (__stxr(v8 + 1, v5));
  v9 = (unsigned int *)*a1;
  *a1 = v4;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return a1;
}

void xgboost::ToJson<xgboost::obj::RegLossParam>(uint64_t **a1, void *a2)
{
  uint64_t **v3;
  _QWORD **v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  std::vector<std::pair<std::string, std::string>> v9;
  char v10;
  _QWORD **v11;
  _QWORD *v12[2];
  std::vector<std::pair<std::string, std::string>> *v13;

  a1[1] = (uint64_t *)0x300000000;
  *a1 = (uint64_t *)&off_24E6BE1D0;
  a1[3] = 0;
  a1[2] = (uint64_t *)(a1 + 3);
  v3 = a1 + 2;
  a1[4] = 0;
  xgboost::obj::RegLossParam::__MANAGER__((xgboost::obj::RegLossParam *)a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36138, a2, &v9);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v11, (const void **)&v9.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v9.__end_->first.__r_.__value_.__l.__data_);
  v13 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v4 = v11;
  if (v11 != v12)
  {
    do
    {
      xgboost::JsonString::JsonString(&v9, (__int128 *)(v4 + 7));
      v13 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 4);
      v5 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
      xgboost::Json::operator=(v5 + 7, (uint64_t)&v9);
      v9.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v10 < 0)
        operator delete(v9.__end_cap_.__value_);
      v6 = v4[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v4[2];
          v8 = *v7 == v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_220E0E410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

unsigned int **xgboost::Json::operator=(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (unsigned int *)operator new();
  *((_QWORD *)v4 + 1) = 0x300000000;
  v5 = v4 + 2;
  *(_QWORD *)v4 = &off_24E6BE1D0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 2) = v4 + 6;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::swap((uint64_t *)(a2 + 16), (uint64_t)(v4 + 4));
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = *a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (unsigned int *)operator new();
  *((_QWORD *)v4 + 1) = 0x200000000;
  v5 = v4 + 2;
  *(_QWORD *)v4 = &off_24E6BE3A8;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = *a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

void dmlc::parameter::ParamManager::GetDict(dmlc::parameter::ParamManager *this@<X0>, void *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v3;
  char *v4;
  char *v7;
  char *v8;
  BOOL v9;
  void *v10[2];
  uint64_t v11;
  std::string v12;
  __int128 __p;
  uint64_t v14;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (char *)this + 56;
  if (v3 != (_QWORD *)((char *)this + 56))
  {
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, void *))(*(_QWORD *)v3[7] + 40))(v10, v3[7], a2);
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v3[4], v3[5]);
      else
        v12 = *(std::string *)(v3 + 4);
      __p = *(_OWORD *)v10;
      v14 = v11;
      v10[1] = 0;
      v11 = 0;
      v10[0] = 0;
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3, (__int128 *)&v12);
      if (SHIBYTE(v14) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      if (SHIBYTE(v11) < 0)
        operator delete(v10[0]);
      v7 = (char *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)v3[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
}

void sub_220E0E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,std::string> &>((uint64_t **)a1, v4, v6, (__int128 *)v6);
      v6 += 6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_220E0E714(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,std::string> &>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_220E0E9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_220E0EA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::JsonString::JsonString(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  a1[1] = 0;
  *a1 = off_24E6BE2B8;
  v3 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,xgboost::Json>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_220E0EBA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,xgboost::Json>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  v4 = (_QWORD *)operator new();
  v4[1] = 0x600000000;
  v5 = (unsigned int *)(v4 + 1);
  *v4 = &off_24E6BE408;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return this;
}

void sub_220E0EC58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xgboost::Json>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,xgboost::Json>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::obj::RegLossParam *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::obj::RegLossParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36138, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::obj::RegLossParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36138, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220E0ED54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t **a7)
{
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  const void *v30;
  uint64_t v31;
  _QWORD *v32;
  std::runtime_error *exception;
  uint64_t v34;
  std::string v37;
  _QWORD v38[33];
  uint64_t v39[2];

  v34 = (uint64_t)result;
  if (a3 != a4)
  {
    v9 = a3;
    v11 = (uint64_t)(result + 6);
    v12 = result + 7;
    while (1)
    {
      v39[0] = 0;
      result = (_QWORD *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v11, (const void **)v9);
      if (v12 == result)
        break;
      result = (_QWORD *)result[7];
      v39[0] = (uint64_t)result;
      if (!result)
        goto LABEL_8;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*result + 24))(result, a2, v9 + 24);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39[0] + 32))(v39[0], a2);
      if (a7)
        result = std::__tree<dmlc::parameter::FieldAccessEntry *>::__emplace_unique_key_args<dmlc::parameter::FieldAccessEntry *,dmlc::parameter::FieldAccessEntry * const&>(a7, (unint64_t *)v39, v39);
LABEL_47:
      v9 += 48;
      if (v9 == a4)
        return result;
    }
    v39[0] = 0;
LABEL_8:
    if (a6)
    {
      v13 = a6[1];
      if (v13 >= a6[2])
      {
        result = (_QWORD *)std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(a6, (__int128 *)v9);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)a6[1], (__int128 *)v9);
        result = (_QWORD *)(v13 + 48);
        a6[1] = v13 + 48;
      }
      a6[1] = (uint64_t)result;
    }
    else if (a5)
    {
      if (a5 != 2)
        goto LABEL_49;
      v14 = *(unsigned __int8 *)(v9 + 23);
      if (*(char *)(v9 + 23) < 0)
      {
        v16 = *(_QWORD *)(v9 + 8);
        if (v16 <= 4)
          goto LABEL_49;
        v17 = *(_QWORD **)v9;
        v15 = (char *)(*(_QWORD *)v9 + v16);
      }
      else
      {
        if (v14 < 5)
          goto LABEL_49;
        v15 = (char *)(v9 + v14);
        v16 = *(unsigned __int8 *)(v9 + 23);
        v17 = (_QWORD *)v9;
      }
      v18 = v17;
      while (1)
      {
        result = memchr(v18, 95, v16 - 1);
        if (!result)
          goto LABEL_49;
        if (*(_WORD *)result == 24415)
          break;
        v18 = (char *)result + 1;
        v16 = v15 - (_BYTE *)v18;
        if (v15 - (_BYTE *)v18 < 2)
          goto LABEL_49;
      }
      if (result == (_QWORD *)v15 || result != v17)
        goto LABEL_49;
      if ((v14 & 0x80) != 0)
      {
        v19 = *(char **)v9;
        v20 = *(_QWORD *)(v9 + 8);
      }
      else
      {
        v19 = (char *)v9;
        v20 = v14;
      }
      v21 = &v19[v20];
      if (v20)
      {
        v22 = v19;
        v23 = &v19[v20];
        do
        {
          if (*v22 == 95)
          {
            v24 = 1u;
            while (v24 != 2)
            {
              if (&v22[v24] == v21)
                goto LABEL_42;
              v25 = v22[v24];
              v26 = asc_220F8384B[v24++];
              if (v25 != v26)
                goto LABEL_33;
            }
            v23 = v22;
          }
LABEL_33:
          ++v22;
        }
        while (v22 != v21);
      }
      else
      {
        v23 = v19;
      }
LABEL_42:
      v27 = v23 - v19;
      if (v23 == v21)
        v27 = -1;
      if ((v14 & 0x80) != 0)
        v14 = *(_QWORD *)(v9 + 8);
      if (v27 != v14 - 2)
      {
LABEL_49:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v38);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Cannot find argument '", 22);
        v29 = *(char *)(v9 + 23);
        if (v29 >= 0)
          v30 = (const void *)v9;
        else
          v30 = *(const void **)v9;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(v9 + 23);
        else
          v31 = *(_QWORD *)(v9 + 8);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"', Possible Arguments:\n", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"----------------\n", 17);
        dmlc::parameter::ParamManager::PrintDocString(v34, v38);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v37);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    goto LABEL_47;
  }
  return result;
}

void sub_220E0F098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::pair<std::string, std::string> *v10;
  uint64_t v11;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9)
    v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  return v11;
}

void sub_220E0F1DC(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_220E0F268(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  _QWORD **v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t i;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26[2];

  v26[0] = 0;
  v26[1] = 0;
  v25 = (uint64_t *)v26;
  dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(a1, a2, a3, a4, a6, a5, &v25);
  v8 = (_QWORD *)a1[6];
  v9 = a1 + 7;
  if (v8 != a1 + 7)
  {
    do
    {
      v10 = v26[0];
      v11 = v8[7];
      if (!v26[0])
        goto LABEL_11;
      v12 = v26;
      do
      {
        v13 = v10;
        v14 = v12;
        v15 = v10[4];
        v16 = v10 + 1;
        if (v15 >= v11)
        {
          v16 = v13;
          v12 = (_QWORD **)v13;
        }
        v10 = (_QWORD *)*v16;
      }
      while (v10);
      if (v12 == v26)
        goto LABEL_11;
      if (v15 < v11)
        v13 = v14;
      if (v11 < v13[4])
LABEL_11:
        (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
      v17 = (_QWORD *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v8[2];
          v19 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
    }
    while (v18 != v9);
    v8 = (_QWORD *)a1[6];
  }
  if (v8 != v9)
  {
    do
    {
      v20 = v26[0];
      for (i = v8[7]; v20; v20 = (_QWORD *)*v20)
      {
        v22 = v20[4];
        if (i >= v22)
        {
          if (v22 >= i)
            goto LABEL_26;
          ++v20;
        }
      }
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)i + 16))(i, a2);
LABEL_26:
      v23 = (_QWORD *)v8[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v8[2];
          v19 = *v24 == (_QWORD)v8;
          v8 = v24;
        }
        while (!v19);
      }
      v8 = v24;
    }
    while (v24 != v9);
  }
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&v25, v26[0]);
}

void sub_220E0F414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void xgboost::obj::`anonymous namespace'::CheckRegInputs(_QWORD *a1, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1[4];
  if (v35 != *a1)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v36);
    if (v36)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"info.labels.Shape(0) == info.num_row_", 37);
      v8 = *(char *)(v36 + 23);
      v9 = v8 >= 0 ? v36 : *(_QWORD *)v36;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid shape of labels.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v13 = v36;
      v36 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v13);
    }
  }
  v35 = (uint64_t)(*(_QWORD *)(a1[3] + 8) - *(_QWORD *)a1[3]) >> 2;
  if (v35 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v36);
    if (v36)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"info.labels.Size() == preds.Size()", 34);
      v18 = *(char *)(v36 + 23);
      v19 = v18 >= 0 ? v36 : *(_QWORD *)v36;
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid shape of labels.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v23 = v36;
      v36 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v23);
    }
  }
  v24 = *(_QWORD *)(a1[9] + 8) - *(_QWORD *)a1[9];
  if (v24)
  {
    v35 = v24 >> 2;
    if (v24 >> 2 != *a1)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v36);
      if (v36)
      {
        v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
        dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"info.weights_.Size() == info.num_row_", 37);
        v29 = *(char *)(v36 + 23);
        if (v29 >= 0)
          v30 = v36;
        else
          v30 = *(_QWORD *)v36;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(v36 + 23);
        else
          v31 = *(_QWORD *)(v36 + 8);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
        v34 = v36;
        v36 = 0;
        if (v34)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v34);
      }
    }
  }
}

void sub_220E0F6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogCheckFormat<unsigned long,unsigned long long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E0F854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::OMPException::Rethrow(std::exception_ptr *this)
{
  std::exception_ptr v1;
  std::exception_ptr v2;

  if (this->__ptr_)
  {
    std::exception_ptr::exception_ptr(&v2, this);
    v1.__ptr_ = &v2;
    std::rethrow_exception(v1);
    __break(1u);
  }
}

void sub_220E0F8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<int,int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E0F9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4AB0;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9900;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAE18;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4B20;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6BAD80;
  *(_BYTE *)(v0 + 16) = 1;
  *(_BYTE *)(v0 + 20) = 0;
  xgboost::HostDeviceVector<int>::HostDeviceVector((std::vector<int> **)(v0 + 32), 0, 0);
  return v0;
}

void sub_220E0FB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

{
}

_QWORD *xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4B20;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  return a1;
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4B20;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (_BYTE *)(a1 + 24));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E0FC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "reg:squaredlogerror");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::RegLossParam>(v10, (void *)(a1 + 24));
  std::string::basic_string[abi:ne180100]<0>(v8, "reg_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E0FDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (_BYTE *)(a1 + 24), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::GetGradient(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  std::string *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::exception_ptr v51;
  std::mutex v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v9 = ((*a2)[1] - **a2) >> 2;
  v51.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v51);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v12 = *(float **)v10;
  **(_DWORD **)v10 = 1065353216;
  v13 = (uint64_t *)a3[9];
  v15 = *v13;
  v14 = v13[1];
  v16 = 0.0;
  if (v14 == *v13)
    v16 = 1.0;
  v12[1] = *(float *)(a1 + 28);
  v12[2] = v16;
  if (v9 <= 1)
    v17 = 1;
  else
    v17 = v9;
  if (v11 < 0)
    v18 = 1;
  else
    v18 = v17;
  if (v9 % v18)
    v19 = v9 / v18 + 1;
  else
    v19 = v9 / v18;
  if (a3[5] <= 1uLL)
    v20 = 1;
  else
    v20 = a3[5];
  if (v11 < 0)
  {
    v51.__ptr_ = 0;
    v52.__m_.__sig = 850045863;
    memset(v52.__m_.__opaque, 0, sizeof(v52.__m_.__opaque));
    v23 = *(_QWORD *)(v10 + 8);
    v24 = *a5;
    v25 = *(_QWORD *)*a5;
    if (!v25 && *(_QWORD *)(v24 + 8)
      || (v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (_QWORD)v12) < 5
      || v23 - (_QWORD)v12 == 8)
    {
      std::terminate();
    }
    v48 = a1;
    v30 = 0;
    v49 = v19;
    v50 = v18;
    do
    {
      v31 = v30 * v19;
      v32 = v9;
      if (v30 * v19 + v19 < v9)
        v9 = v30 * v19 + v19;
      if (v31 < v9)
      {
        v34 = v12[1];
        v33 = v12[2];
        do
        {
          v35 = 1.0;
          if (v33 == 0.0)
            v35 = *(float *)(v15 + 4 * (v31 / v20));
          v36 = *(float *)(v27 + 4 * v31);
          v37 = *(float *)(v29 + 4 * v31);
          if (v37 == 1.0)
            v38 = v34;
          else
            v38 = 1.0;
          if (v37 <= -1.0)
            *v12 = 0.0;
          v39 = v35 * v38;
          v40 = fmaxf(v36, -1.0);
          v41 = log1pf(v40);
          v42 = log1pf(v37);
          v43 = v39 * (float)((float)(v41 - v42) / (float)(v40 + 1.0));
          v44 = (float)((float)(v42 - v41) + 1.0) / ((float)(v40 + 1.0) * (float)(v40 + 1.0));
          v45 = (float *)(v25 + 8 * v31);
          *v45 = v43;
          v45[1] = v39 * fmaxf(v44, 0.000001);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      v19 = v49;
      v9 = v32;
    }
    while (v30 != v50);
    dmlc::OMPException::Rethrow(&v51);
    std::mutex::~mutex(&v52);
    std::exception_ptr::~exception_ptr(&v51);
    a1 = v48;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v47 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"label must be greater than -1 for rmsle so that log(label + 1) can be valid.", 76);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
}

void sub_220E101D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::mutex::~mutex(a10);
  std::exception_ptr::~exception_ptr(&a14);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::DefaultEvalMetric()
{
  return "rmsle";
}

void xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::exception_ptr v5;
  std::mutex v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (!v4 || (unint64_t)(v2 - v3) < 4)
      std::terminate();
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_220E102EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::SquaredLogError>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

void std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4BB8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9A08;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4C28;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

void sub_220E103BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

{
}

_QWORD *xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4C28;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  return a1;
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4C28;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (_BYTE *)(a1 + 24));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E10514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "reg:logistic");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::RegLossParam>(v10, (void *)(a1 + 24));
  std::string::basic_string[abi:ne180100]<0>(v8, "reg_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E10664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (_BYTE *)(a1 + 24), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::GetGradient(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::exception_ptr v49;
  std::mutex v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v12 = *(float **)v10;
  **(_DWORD **)v10 = 1065353216;
  v13 = (uint64_t *)a3[9];
  v15 = *v13;
  v14 = v13[1];
  v16 = 0.0;
  if (v14 == *v13)
    v16 = 1.0;
  v12[1] = *(float *)(a1 + 28);
  v12[2] = v16;
  if (v9 <= 1)
    v17 = 1;
  else
    v17 = v9;
  if (v11 < 0)
    v18 = 1;
  else
    v18 = v17;
  if (v9 % v18)
    v19 = v9 / v18 + 1;
  else
    v19 = v9 / v18;
  if (a3[5] <= 1uLL)
    v20 = 1;
  else
    v20 = a3[5];
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    v23 = *(_QWORD *)(v10 + 8);
    v24 = *a5;
    v25 = *(_QWORD *)*a5;
    if (!v25 && *(_QWORD *)(v24 + 8)
      || (v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (_QWORD)v12) < 5
      || v23 - (_QWORD)v12 == 8)
    {
      std::terminate();
    }
    v46 = a1;
    v30 = 0;
    v47 = v19;
    v48 = v18;
    do
    {
      v31 = v30 * v19;
      v32 = v9;
      if (v30 * v19 + v19 < v9)
        v9 = v30 * v19 + v19;
      if (v31 < v9)
      {
        v33 = v12[1];
        v34 = v12[2];
        do
        {
          v35 = *(float *)(v27 + 4 * v31);
          if (v35 >= -88.7)
            v36 = -v35;
          else
            v36 = 88.7;
          v37 = expf(v36);
          v38 = 1.0;
          if (v34 == 0.0)
            v38 = *(float *)(v15 + 4 * (v31 / v20));
          v39 = *(float *)(v29 + 4 * v31);
          if (v39 == 1.0)
            v40 = v33;
          else
            v40 = 1.0;
          if (v39 < 0.0 || v39 > 1.0)
            *v12 = 0.0;
          v42 = 1.0 / (float)((float)(v37 + 1.0) + 1.0e-16);
          v43 = (float *)(v25 + 8 * v31);
          *v43 = (float)(v42 - v39) * (float)(v38 * v40);
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * (float)(v38 * v40);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      v19 = v47;
      v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_220E10A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr(&a14);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::DefaultEvalMetric()
{
  return "rmse";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  float v6;
  std::exception_ptr v7;
  std::mutex v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        if (*v3 >= -88.7)
          v6 = -*v3;
        else
          v6 = 88.7;
        *v3++ = 1.0 / (float)((float)(expf(v6) + 1.0) + 1.0e-16);
        if (!--v5)
          goto LABEL_13;
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_220E10BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRegression>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

float xgboost::obj::LogisticRegression::ProbToMargin(xgboost::obj::LogisticRegression *this, float a2)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if (a2 <= 0.0 || a2 >= 1.0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/./regression_loss.h");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: base_score > 0.0f && base_score < 1.0f", 52);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"base_score must be in (0,1) for logistic loss, got: ", 52);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
  }
  return -logf((float)(1.0 / a2) + -1.0);
}

void sub_220E10CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4CC0;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4D30;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

void sub_220E10D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_3,std::allocator<xgboost::obj::$_3>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

_QWORD *xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4D30;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  return a1;
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4D30;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (_BYTE *)(a1 + 24));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E10ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "binary:logistic");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::RegLossParam>(v10, (void *)(a1 + 24));
  std::string::basic_string[abi:ne180100]<0>(v8, "reg_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E1101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (_BYTE *)(a1 + 24), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::GetGradient(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::exception_ptr v49;
  std::mutex v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v12 = *(float **)v10;
  **(_DWORD **)v10 = 1065353216;
  v13 = (uint64_t *)a3[9];
  v15 = *v13;
  v14 = v13[1];
  v16 = 0.0;
  if (v14 == *v13)
    v16 = 1.0;
  v12[1] = *(float *)(a1 + 28);
  v12[2] = v16;
  if (v9 <= 1)
    v17 = 1;
  else
    v17 = v9;
  if (v11 < 0)
    v18 = 1;
  else
    v18 = v17;
  if (v9 % v18)
    v19 = v9 / v18 + 1;
  else
    v19 = v9 / v18;
  if (a3[5] <= 1uLL)
    v20 = 1;
  else
    v20 = a3[5];
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    v23 = *(_QWORD *)(v10 + 8);
    v24 = *a5;
    v25 = *(_QWORD *)*a5;
    if (!v25 && *(_QWORD *)(v24 + 8)
      || (v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (_QWORD)v12) < 5
      || v23 - (_QWORD)v12 == 8)
    {
      std::terminate();
    }
    v46 = a1;
    v30 = 0;
    v47 = v19;
    v48 = v18;
    do
    {
      v31 = v30 * v19;
      v32 = v9;
      if (v30 * v19 + v19 < v9)
        v9 = v30 * v19 + v19;
      if (v31 < v9)
      {
        v33 = v12[1];
        v34 = v12[2];
        do
        {
          v35 = *(float *)(v27 + 4 * v31);
          if (v35 >= -88.7)
            v36 = -v35;
          else
            v36 = 88.7;
          v37 = expf(v36);
          v38 = 1.0;
          if (v34 == 0.0)
            v38 = *(float *)(v15 + 4 * (v31 / v20));
          v39 = *(float *)(v29 + 4 * v31);
          if (v39 == 1.0)
            v40 = v33;
          else
            v40 = 1.0;
          if (v39 < 0.0 || v39 > 1.0)
            *v12 = 0.0;
          v42 = 1.0 / (float)((float)(v37 + 1.0) + 1.0e-16);
          v43 = (float *)(v25 + 8 * v31);
          *v43 = (float)(v42 - v39) * (float)(v38 * v40);
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * (float)(v38 * v40);
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      v19 = v47;
      v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_220E11424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr(&a14);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::DefaultEvalMetric()
{
  return "logloss";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  float v6;
  std::exception_ptr v7;
  std::mutex v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        if (*v3 >= -88.7)
          v6 = -*v3;
        else
          v6 = 88.7;
        *v3++ = 1.0 / (float)((float)(expf(v6) + 1.0) + 1.0e-16);
        if (!--v5)
          goto LABEL_13;
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_220E11590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Task()
{
  return 1;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticClassification>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

void std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4DC8;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4E38;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

void sub_220E11660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407B1BEDF6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_4,std::allocator<xgboost::obj::$_4>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

_QWORD *xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4E38;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  return a1;
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::~RegLossObj(_QWORD *a1)
{
  *a1 = &off_24E6B4E38;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(a1 + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "reg_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::RegLossParam>(&v7, *v4, (_BYTE *)(a1 + 24));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E117B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "binary:logitraw");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::RegLossParam>(v10, (void *)(a1 + 24));
  std::string::basic_string[abi:ne180100]<0>(v8, "reg_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E11908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::RegLossParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::RegLossParam *)v2, (_BYTE *)(a1 + 24), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::GetGradient(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v40;
  float v41;
  float v42;
  float *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::exception_ptr v49;
  std::mutex v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v9 = ((*a2)[1] - **a2) >> 2;
  v49.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v9, &v49);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v12 = *(float **)v10;
  **(_DWORD **)v10 = 1065353216;
  v13 = (uint64_t *)a3[9];
  v15 = *v13;
  v14 = v13[1];
  v16 = 0.0;
  if (v14 == *v13)
    v16 = 1.0;
  v12[1] = *(float *)(a1 + 28);
  v12[2] = v16;
  if (v9 <= 1)
    v17 = 1;
  else
    v17 = v9;
  if (v11 < 0)
    v18 = 1;
  else
    v18 = v17;
  if (v9 % v18)
    v19 = v9 / v18 + 1;
  else
    v19 = v9 / v18;
  if (a3[5] <= 1uLL)
    v20 = 1;
  else
    v20 = a3[5];
  if (v11 < 0)
  {
    v49.__ptr_ = 0;
    v50.__m_.__sig = 850045863;
    memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
    v23 = *(_QWORD *)(v10 + 8);
    v24 = *a5;
    v25 = *(_QWORD *)*a5;
    if (!v25 && *(_QWORD *)(v24 + 8)
      || (v26 = *a2, (v27 = **a2) == 0) && v26[1]
      || (v28 = (uint64_t *)a3[3], (v29 = *v28) == 0) && v28[1]
      || !v15 && v14
      || (unint64_t)(v23 - (_QWORD)v12) < 5
      || v23 - (_QWORD)v12 == 8)
    {
      std::terminate();
    }
    v46 = a1;
    v30 = 0;
    v47 = v19;
    v48 = v18;
    do
    {
      v31 = v30 * v19;
      v32 = v9;
      if (v30 * v19 + v19 < v9)
        v9 = v30 * v19 + v19;
      if (v31 < v9)
      {
        v33 = v12[1];
        v34 = v12[2];
        do
        {
          v35 = 1.0;
          if (v34 == 0.0)
            v35 = *(float *)(v15 + 4 * (v31 / v20));
          v36 = *(float *)(v27 + 4 * v31);
          v37 = *(float *)(v29 + 4 * v31);
          if (v37 == 1.0)
            v38 = v33;
          else
            v38 = 1.0;
          if (v37 < 0.0 || v37 > 1.0)
            *v12 = 0.0;
          v40 = v35 * v38;
          v41 = -v36;
          if (v36 < -88.7)
            v41 = 88.7;
          v42 = 1.0 / (float)((float)(expf(v41) + 1.0) + 1.0e-16);
          v43 = (float *)(v25 + 8 * v31);
          *v43 = (float)(v42 - v37) * v40;
          v43[1] = fmaxf(v42 * (float)(1.0 - v42), 1.0e-16) * v40;
          ++v31;
        }
        while (v31 != v9);
      }
      ++v30;
      v19 = v47;
      v9 = v32;
    }
    while (v30 != v48);
    dmlc::OMPException::Rethrow(&v49);
    std::mutex::~mutex(&v50);
    std::exception_ptr::~exception_ptr(&v49);
    a1 = v46;
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
  if (***(float ***)(a1 + 16) == 0.0)
  {
    v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"label must be in [0,1] for logistic regression", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
  }
}

void sub_220E11D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr(&a14);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::DefaultEvalMetric()
{
  return "logloss";
}

void xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::PredTransform(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::exception_ptr v5;
  std::mutex v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (!v4 || (unint64_t)(v2 - v3) < 4)
      std::terminate();
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_220E11E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Task()
{
  return 0;
}

uint64_t xgboost::obj::RegLossObj<xgboost::obj::LogisticRaw>::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

void std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4ED0;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;
  void *__p[2];
  char v3;
  _QWORD v4[34];

  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v4, (uint64_t)__p, 203, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"reg:linear is now deprecated in favor of reg:squarederror.", 58);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v4);
    if (v3 < 0)
      operator delete(__p[0]);
  }
  v0 = operator new();
  *(_QWORD *)v0 = &off_24E6B4A00;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(v0 + 16), 3uLL, 0.0);
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

void sub_220E11F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_5,std::allocator<xgboost::obj::$_5>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B4F50;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24E6B4FC0;
  *(_DWORD *)(result + 20) = 1065353216;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_6,std::allocator<xgboost::obj::$_6>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::PseudoHuberRegression::~PseudoHuberRegression(xgboost::obj::PseudoHuberRegression *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::PseudoHuberRegression::LoadConfig(xgboost::obj::PseudoHuberRegression *this, const xgboost::Json *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  _DWORD **v7;
  std::vector<std::pair<std::string, std::string>> v8;
  void *__p[2];
  char v10;
  std::vector<std::pair<std::string, std::string>> *v11;

  v4 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
  v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v4 + 16), (const void **)__p);
  v6 = v4 + 24;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v6 != (char *)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
    v7 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
    xgboost::FromJson<xgboost::PesudoHuberParam>(v7, (xgboost::obj::PseudoHuberRegression *)((char *)this + 16), &v8);
    v11 = &v8;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_220E121B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::PseudoHuberRegression::SaveConfig(xgboost::obj::PseudoHuberRegression *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  _QWORD v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "reg:pseudohubererror");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::PesudoHuberParam>((xgboost::obj::PseudoHuberRegression *)((char *)this + 16), (uint64_t)v10);
  std::string::basic_string[abi:ne180100]<0>(v8, "pseduo_huber_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E12304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::PseudoHuberRegression::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];
  void **v3;

  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::PesudoHuberParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::PseudoHuberRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int8x8_t v45;
  unint64_t i;
  float v47;
  unint64_t v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  int8x8_t v54;
  unint64_t j;
  unint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  unint64_t v59;
  float v60;
  unint64_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67[2];
  _QWORD v68[6];
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  float v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  std::exception_ptr v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  std::exception_ptr v101;
  std::mutex v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v88 = *(float *)(a1 + 20);
  v101.__ptr_ = 0;
  if (v88 == 0.0)
  {
    dmlc::LogCheckFormat<float,double>(v67);
    if (v67[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v101);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v101);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"slope != 0.0", 12);
      v21 = *(char *)(v67[0] + 23);
      v22 = v21 >= 0 ? v67[0] : *(_QWORD *)v67[0];
      v23 = v21 >= 0 ? *(unsigned __int8 *)(v67[0] + 23) : *(_QWORD *)(v67[0] + 8);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"slope for pseudo huber cannot be 0.", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v101);
      v26 = v67[0];
      v67[0] = 0;
      if (v26)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v67, v26);
    }
  }
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v9 < 0)
  {
    v15 = *(uint64_t **)(a3 + 24);
    v14 = *(_QWORD *)(a3 + 32);
    v16 = *v15;
    v27 = v15[1] - *v15;
    v11 = v27 >> 2;
    v13 = *(_QWORD *)(a3 + 40);
    if (v27)
      v12 = v13 * v14;
    else
      v12 = 0;
    v10 = *v15;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v14 = *(_QWORD *)(a3 + 32);
    v13 = *(_QWORD *)(a3 + 40);
    v15 = *(uint64_t **)(a3 + 24);
    v16 = *v15;
  }
  v28 = (v15[1] - v16) >> 2;
  v67[0] = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v28, v67);
  v29 = *(_QWORD *)*a5;
  v30 = *(_QWORD *)(*a5 + 8);
  if (!v29 && v30 || (v31 = **a2, v32 = (*a2)[1], !v31) && v32)
LABEL_61:
    std::terminate();
  v33 = (v30 - v29) >> 3;
  v34 = *(_QWORD *)(a1 + 8);
  v35 = (v32 - v31) >> 2;
  if (*(_DWORD *)(v34 + 24) == -1)
  {
    v37 = **(_QWORD **)(a3 + 72);
    v36 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v37) >> 2;
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  v67[0] = v13;
  v67[1] = 1;
  v68[0] = v14;
  v68[1] = v13;
  v68[2] = v11;
  v68[3] = v10;
  v68[4] = v10;
  v68[5] = v12;
  v69 = v9;
  v70 = 1;
  v71 = v35;
  v72 = v35;
  v73 = v31;
  v74 = v31;
  v75 = v35;
  v76 = -1;
  v77 = v88;
  v78 = v36;
  v79 = v37;
  v80 = 1065353216;
  v81 = 1;
  v82 = v33;
  v83 = v33;
  v84 = v29;
  v85 = v29;
  v86 = v33;
  v87 = -1;
  if (*(_DWORD *)(v34 + 24) != -1)
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v101);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/common.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v101);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v101);
  }
  v89 = v13;
  v90 = 1;
  v91[0] = v14;
  v91[1] = v13;
  v92 = v11;
  v93 = v10;
  v94 = v10;
  v95 = v12;
  v96 = v9;
  if (v11 == v12)
    goto LABEL_38;
  v40 = 0;
  v101.__ptr_ = (void *)v13;
  v102.__m_.__sig = 1;
  while (*(void **)((char *)&v89 + v40) == *(void **)((char *)&v101.__ptr_ + v40))
  {
    v40 += 8;
    if (v40 == 16)
      goto LABEL_38;
  }
  v41 = 0;
  v101.__ptr_ = (void *)1;
  v102.__m_.__sig = v14;
  do
  {
    v42 = *(uint64_t *)((char *)&v89 + v41);
    v43 = *(uint64_t *)((char *)&v101.__ptr_ + v41);
    v44 = v42 != v43 || v41 == 8;
    v41 += 8;
  }
  while (!v44);
  if (v42 == v43)
  {
LABEL_38:
    v101.__ptr_ = 0;
    v102.__m_.__sig = 850045863;
    v45 = 0;
    memset(v102.__m_.__opaque, 0, sizeof(v102.__m_.__opaque));
    if (v12)
    {
      for (i = 0; i != v12; ++i)
      {
        v47 = *(float *)(v10 + 4 * i);
        v99 = 2;
        v100 = v68;
        v48 = xgboost::linalg::UnravelIndex<2ul>(i, &v99, v45);
        if (v70 * i >= v72)
          goto LABEL_47;
        v49 = (float *)&v80;
        if (v78)
        {
          if (v78 <= v48)
            goto LABEL_61;
          v49 = (float *)(v79 + 4 * v48);
        }
        if (v81 * i >= v83)
LABEL_47:
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        v50 = *(float *)(v74 + 4 * v70 * i) - v47;
        v51 = sqrtf((float)((float)(v50 * v50) / (float)(v77 * v77)) + 1.0);
        v52 = (float)((float)(v77 * v77) / (float)((float)((float)(v77 * v77) + (float)(v50 * v50)) * v51)) * *v49;
        *(float *)v45.i32 = (float)(v50 / v51) * *v49;
        v53 = v85 + 8 * v81 * i;
        *(_DWORD *)v53 = v45.i32[0];
        *(float *)(v53 + 4) = v52;
      }
    }
  }
  else
  {
    v101.__ptr_ = 0;
    v102.__m_.__sig = 850045863;
    v54 = 0;
    memset(v102.__m_.__opaque, 0, sizeof(v102.__m_.__opaque));
    if (v12)
    {
      for (j = 0; j != v12; ++j)
      {
        v97.__ptr_ = (void *)2;
        v98 = v91;
        v56 = xgboost::linalg::UnravelIndex<2ul>(j, &v97, v54);
        v59 = v89 * v56 + v90 * v58;
        if (v59 >= v92)
          goto LABEL_59;
        v60 = *(float *)(v94 + 4 * v59);
        v99 = 2;
        v100 = v68;
        v61 = xgboost::linalg::UnravelIndex<2ul>(j, &v99, v57);
        if (v70 * j >= v72)
          goto LABEL_59;
        v62 = (float *)&v80;
        if (v78)
        {
          if (v78 <= v61)
            goto LABEL_61;
          v62 = (float *)(v79 + 4 * v61);
        }
        if (v81 * j >= v83)
LABEL_59:
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        v63 = *(float *)(v74 + 4 * v70 * j) - v60;
        v64 = sqrtf((float)((float)(v63 * v63) / (float)(v77 * v77)) + 1.0);
        v65 = (float)((float)(v77 * v77) / (float)((float)((float)(v77 * v77) + (float)(v63 * v63)) * v64)) * *v62;
        *(float *)v54.i32 = (float)(v63 / v64) * *v62;
        v66 = v85 + 8 * v81 * j;
        *(_DWORD *)v66 = v54.i32[0];
        *(float *)(v66 + 4) = v65;
      }
    }
  }
  dmlc::OMPException::Rethrow(&v101);
  std::mutex::~mutex(&v102);
  std::exception_ptr::~exception_ptr(&v101);
}

void sub_220E12A60()
{
  __cxa_end_catch();
  JUMPOUT(0x220E12AB0);
}

void sub_220E12A6C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E12AB0);
}

void sub_220E12A80()
{
  __cxa_end_catch();
  JUMPOUT(0x220E12AB0);
}

void sub_220E12A8C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E12AB0);
}

void sub_220E12AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(a1);
}

void sub_220E12AAC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 - 184));
  _Unwind_Resume(a1);
}

void sub_220E12AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_220E12ADC()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  JUMPOUT(0x220E12AE8);
}

void sub_220E12B00(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

const char *xgboost::obj::PseudoHuberRegression::DefaultEvalMetric(xgboost::obj::PseudoHuberRegression *this)
{
  return "mphe";
}

uint64_t xgboost::obj::PseudoHuberRegression::Task(xgboost::obj::PseudoHuberRegression *this)
{
  return 0;
}

uint64_t xgboost::obj::PseudoHuberRegression::Targets(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= 1uLL)
    return 1;
  else
    return *(_QWORD *)(a2 + 40);
}

void xgboost::FromJson<xgboost::PesudoHuberParam>(_DWORD **a1@<X0>, xgboost::PesudoHuberParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)v5[2];
  v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E12C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::PesudoHuberParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    v6 = xgboost::PesudoHuberParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E12CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::PesudoHuberParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v6 = xgboost::PesudoHuberParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, a3, 0);
}

void sub_220E12D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::PesudoHuberParam>(xgboost::PesudoHuberParam *a1@<X0>, uint64_t a2@<X8>)
{
  dmlc::parameter::ParamManager *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  std::vector<std::pair<std::string, std::string>> v10;
  char v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::vector<std::pair<std::string, std::string>> *v14;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = (dmlc::parameter::ParamManager *)xgboost::PesudoHuberParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict(v4, a1, &v10);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v12, (const void **)&v10.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v10.__end_->first.__r_.__value_.__l.__data_);
  v14 = &v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v5 = v12;
  if (v12 != v13)
  {
    do
    {
      xgboost::JsonString::JsonString(&v10, (__int128 *)(v5 + 7));
      v14 = (std::vector<std::pair<std::string, std::string>> *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
      xgboost::Json::operator=(v6 + 7, (uint64_t)&v10);
      v10.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v11 < 0)
        operator delete(v10.__end_cap_.__value_);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_220E12EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::PesudoHuberParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::PesudoHuberParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E12FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::PesudoHuberParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::PesudoHuberParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220E13014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<float,double>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E13144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t xgboost::linalg::UnravelIndex<2ul>(unint64_t a1, _QWORD *a2, int8x8_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v3 = a2[1];
  if (HIDWORD(a1))
  {
    v6[0] = *a2;
    v6[1] = v3;
    return xgboost::linalg::detail::UnravelImpl<unsigned long long,2>(a1, v6);
  }
  else
  {
    v5[0] = *a2;
    v5[1] = v3;
    return xgboost::linalg::detail::UnravelImpl<unsigned int,2>(a1, v5, a3);
  }
}

unint64_t xgboost::linalg::detail::UnravelImpl<unsigned long long,2>(unint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  char v3;

  if (*a2 < 2uLL)
    std::terminate();
  v2 = *(_QWORD *)(a2[1] + 8);
  v3 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v2 - 1)));
  if ((v2 & (v2 - 1)) != 0)
    return a1 / v2;
  else
    return a1 >> v3;
}

uint64_t xgboost::linalg::detail::UnravelImpl<unsigned int,2>(unsigned int a1, _QWORD *a2, int8x8_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (*a2 < 2uLL)
    std::terminate();
  v3 = *(_DWORD *)(a2[1] + 8);
  a3.i32[0] = v3 - 1;
  v4 = a1 >> vaddlv_u8((uint8x8_t)vcnt_s8(a3));
  if ((v3 & (v3 - 1)) != 0)
    return a1 / v3;
  else
    return v4;
}

uint64_t xgboost::linalg::TensorView<float const,2>::operator()<unsigned long &,unsigned long &>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = *a1 * *a2 + a1[1] * *a3;
  if (v3 >= a1[4])
    __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
  return a1[6] + 4 * v3;
}

void std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5058;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24E6B50C8;
  xgboost::HostDeviceVector<int>::HostDeviceVector((std::vector<int> **)(v0 + 24), 0, 0);
  return v0;
}

void sub_220E13360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C40F6D66BA0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_7,std::allocator<xgboost::obj::$_7>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::PoissonRegression::~PoissonRegression(xgboost::obj::PoissonRegression *this)
{
  *(_QWORD *)this = &off_24E6B50C8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 3);
}

{
  *(_QWORD *)this = &off_24E6B50C8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 3);
  JUMPOUT(0x227667068);
}

void xgboost::obj::PoissonRegression::LoadConfig(xgboost::obj::PoissonRegression *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  xgboost::obj::PoissonRegressionParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _BYTE *v13;
  int v14;
  void *__p[2];
  char v16;
  std::vector<std::pair<std::string, std::string>> v17;
  std::vector<std::pair<std::string, std::string>> *v18;
  _QWORD *v19[2];
  __int128 *v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "poisson_regression_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = (xgboost::obj::PoissonRegressionParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v20 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      v5 = (xgboost::obj::PoissonRegressionParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  v14 = *((unsigned __int8 *)this + 16);
  v13 = (char *)this + 16;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::PoissonRegressionParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F36180, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F36180, (uint64_t)v13, v18, v19, &v17, 0);
    *v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_220E135D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::SaveConfig(xgboost::obj::PoissonRegression *this, xgboost::Json *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int **v11;
  void *v12[2];
  uint64_t *v13;
  _QWORD *v14[2];
  void *v15;
  const void **v16;
  void *v17[2];
  uint64_t *v18;
  void *__p;
  _QWORD *v20;
  char v21;
  void **v22;

  std::string::basic_string[abi:ne180100]<0>(v12, "count:poisson");
  v16 = 0;
  v15 = off_24E6BE2B8;
  *(_OWORD *)v17 = *(_OWORD *)v12;
  v18 = v13;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Json::operator=(v4, (uint64_t)&v15);
  if (v21 < 0)
    operator delete(__p);
  v15 = off_24E6BE2B8;
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  v12[1] = (void *)0x300000000;
  v12[0] = &off_24E6BE1D0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  xgboost::obj::PoissonRegressionParam::__MANAGER__((xgboost::obj::PoissonRegressionParam *)v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xmmword_253F36180, (char *)this + 16, (std::vector<std::pair<std::string, std::string>> *)&v15);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v15, v16);
  v22 = &v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v6 = (char *)__p;
  if (__p != &v20)
  {
    do
    {
      xgboost::JsonString::JsonString(&v15, (__int128 *)(v6 + 56));
      v22 = (void **)(v6 + 32);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v15);
      v15 = off_24E6BE2B8;
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (char *)&v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v20);
  std::string::basic_string[abi:ne180100]<0>(&v15, "poisson_regression_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v15);
  xgboost::Json::operator=(v11, (uint64_t)v12);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v15);
  v12[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E13860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _QWORD *a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v31, a16);
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::Configure(_BYTE *a1, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v3 = a1 + 16;
  if (a1[16])
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    xgboost::obj::PoissonRegressionParam::__MANAGER__((xgboost::obj::PoissonRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F36180, (uint64_t)v3, *a2, a2[1], 0, &v4, 0);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    xgboost::obj::PoissonRegressionParam::__MANAGER__((xgboost::obj::PoissonRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F36180, (uint64_t)v3, *a2, a2[1], &v4, 0);
    *v3 = 1;
  }
  v7 = (void **)&v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_220E139D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::obj::PoissonRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::vector<int> *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  std::string *v38;
  _QWORD *v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  std::string *v78;
  _QWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::vector<int>::value_type __x[2];
  std::mutex v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v9 = **(_QWORD **)(a3 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  LODWORD(v85) = 0;
  v11 = v10 - v9;
  v86 = v11 >> 2;
  if (!v11)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"info.labels.Size() != 0U", 24);
      v44 = *(char *)(*(_QWORD *)__x + 23);
      v45 = v44 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"label set cannot be empty", 25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
      v49 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v49)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v49);
    }
  }
  v86 = ((*a2)[1] - **a2) >> 2;
  v85 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  if (v86 != v85)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v16 = *(char *)(*(_QWORD *)__x + 23);
      v17 = v16 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"labels are not correctly provided", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
      v21 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v21)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v21);
    }
  }
  v86 = ((*a2)[1] - **a2) >> 2;
  *(_QWORD *)__x = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v86, __x);
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v23 = *(std::vector<int> **)(a1 + 24);
  __x[0] = 0;
  std::vector<int>::resize(v23, 1uLL, __x);
  v24 = **(void ***)(a1 + 24);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - (_QWORD)v24;
  if (v25 >= 1)
    memset_pattern16(v24, &unk_220F5E2F0, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
  v26 = v86;
  v83 = **(_QWORD **)(a3 + 72);
  v84 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
  v27 = v84 - v83;
  if (v84 != v83)
  {
    v85 = v27 >> 2;
    if (v27 >> 2 != v86)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
      if (*(_QWORD *)__x)
      {
        v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"info.weights_.Size() == ndata", 29);
        v32 = *(char *)(*(_QWORD *)__x + 23);
        v33 = v32 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
        v34 = v32 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v85);
        v37 = *(_QWORD *)__x;
        *(_QWORD *)__x = 0;
        if (v37)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v37);
      }
    }
    v26 = v86;
  }
  if (v22 < 0)
  {
    v80 = a1;
    v50 = *(float *)(a1 + 20);
    *(_QWORD *)__x = 0;
    v88.__m_.__sig = 850045863;
    memset(v88.__m_.__opaque, 0, sizeof(v88.__m_.__opaque));
    if (v26)
    {
      v51 = *(_QWORD *)(a1 + 24);
      v53 = *(_DWORD **)v51;
      v52 = *(_DWORD **)(v51 + 8);
      if (*(_QWORD *)v51 || !v52)
      {
        v54 = *(_QWORD *)*a5;
        v55 = *(_QWORD *)(*a5 + 8);
        if (v54 || !v55)
        {
          v56 = *a2;
          v58 = **a2;
          v57 = v56[1];
          if (v58 || !v57)
          {
            v59 = *(uint64_t **)(a3 + 24);
            v61 = *v59;
            v60 = v59[1];
            if (v61 || !v60)
            {
              v81 = v52;
              v62 = *(uint64_t **)(a3 + 72);
              v64 = *v62;
              v63 = v62[1];
              v82 = v64;
              if (v64 || !v63)
              {
                v65 = 0;
                v66 = (v55 - v54) >> 3;
                v67 = (v57 - v58) >> 2;
                v68 = (v60 - v61) >> 2;
                v69 = (v63 - v64) >> 2;
                v70 = (float *)(v54 + 4);
                while (v67 != v65)
                {
                  v71 = *(float *)(v58 + 4 * v65);
                  if (v84 == v83)
                  {
                    v72 = 1.0;
                  }
                  else
                  {
                    if (v69 <= v65)
                      break;
                    v72 = *(float *)(v82 + 4 * v65);
                  }
                  if (v68 == v65)
                    break;
                  v73 = *(float *)(v61 + 4 * v65);
                  if (v73 < 0.0)
                  {
                    if (v81 == v53)
                      break;
                    *v53 = 0;
                  }
                  if (v66 == v65)
                    break;
                  v74 = expf(v50 + v71) * v72;
                  *(v70 - 1) = v72 * (float)(expf(v71) - v73);
                  *v70 = v74;
                  ++v65;
                  v70 += 2;
                  if (v26 == v65)
                    goto LABEL_60;
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_60:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v88);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    a1 = v80;
  }
  else
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  v75 = *(_QWORD *)(a1 + 24);
  v76 = *(_DWORD **)v75;
  v77 = *(_DWORD **)(v75 + 8);
  if (*(_DWORD **)v75 != v77)
  {
    do
    {
      if (!*v76)
      {
        v78 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v79 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"PoissonRegression: label must be nonnegative", 44);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v76;
    }
    while (v76 != v77);
  }
}

void sub_220E13FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex *v19;

  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::PoissonRegression::DefaultEvalMetric(xgboost::obj::PoissonRegression *this)
{
  return "poisson-nloglik";
}

void xgboost::obj::PoissonRegression::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  std::exception_ptr v6;
  std::mutex v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        *v3 = expf(*v3);
        ++v3;
        if (!--v5)
          goto LABEL_10;
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_220E14124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::PoissonRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t xgboost::obj::PoissonRegression::Task(xgboost::obj::PoissonRegression *this)
{
  return 0;
}

uint64_t dmlc::LogCheckFormat<unsigned long,unsigned int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E14270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5160;
  return result;
}

_QWORD *std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6B51D0;
  result[1] = 0;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_8,std::allocator<xgboost::obj::$_8>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::CoxRegression::~CoxRegression(xgboost::obj::CoxRegression *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::CoxRegression::SaveConfig(xgboost::obj::CoxRegression *this, xgboost::Json *a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  uint64_t v7;
  _QWORD v8[2];
  void *v9[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(v6, "survival:cox");
  v8[1] = 0;
  *(_OWORD *)v9 = *(_OWORD *)v6;
  v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v8);
  if (v5 < 0)
    operator delete(__p[0]);
  v8[0] = off_24E6BE2B8;
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_220E1443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::CoxRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  float v53;
  float v54;
  double v55;
  double v56;
  float v57;
  double v58;
  float v59;
  float *v60;
  std::string *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string *Entry;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  float v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v8 = **(_QWORD **)(a3 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  LODWORD(v78) = 0;
  v10 = v9 - v8;
  v79 = v10 >> 2;
  if (!v10)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v80);
    if (v80)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v67 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: ", 14);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"info.labels.Size() != 0U", 24);
      v70 = *(char *)(v80 + 23);
      v71 = v70 >= 0 ? v80 : *(_QWORD *)v80;
      v72 = v70 >= 0 ? *(unsigned __int8 *)(v80 + 23) : *(_QWORD *)(v80 + 8);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"label set cannot be empty", 25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v75 = v80;
      v80 = 0;
      if (v75)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, v75);
    }
  }
  v79 = ((*a2)[1] - **a2) >> 2;
  v78 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  if (v79 != v78)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v80);
    if (v80)
    {
      v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v15 = *(char *)(v80 + 23);
      v16 = v15 >= 0 ? v80 : *(_QWORD *)v80;
      v17 = v15 >= 0 ? *(unsigned __int8 *)(v80 + 23) : *(_QWORD *)(v80 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"labels are not correctly provided", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
      v20 = v80;
      v80 = 0;
      if (v20)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, v20);
    }
  }
  v21 = *a2;
  v22 = ((*a2)[1] - **a2) >> 2;
  v80 = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v22, &v80);
  v23 = (_QWORD *)*a5;
  v24 = xgboost::MetaInfo::LabelAbsSort((xgboost::MetaInfo *)a3);
  v25 = (v21[1] - *v21) >> 2;
  v80 = v25;
  v26 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - **(_QWORD **)(a3 + 72);
  if (v26)
  {
    v78 = v26 >> 2;
    if (v26 >> 2 != v25)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v79);
      if (v79)
      {
        v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
        dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"info.weights_.Size() == ndata", 29);
        v31 = *(char *)(v79 + 23);
        v32 = v31 >= 0 ? v79 : *(_QWORD *)v79;
        v33 = v31 >= 0 ? *(unsigned __int8 *)(v79 + 23) : *(_QWORD *)(v79 + 8);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v78);
        v36 = v79;
        v79 = 0;
        if (v36)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v79, v36);
      }
    }
    v25 = v80;
  }
  if (v25)
  {
    v37 = *(uint64_t **)v24;
    v38 = *v21;
    v39 = 0.0;
    do
    {
      v40 = *v37++;
      v39 = v39 + expf(*(float *)(v38 + 4 * v40));
      --v25;
    }
    while (v25);
    v41 = 0;
    v42 = *(uint64_t **)(a3 + 24);
    v43 = *v42;
    v44 = (v42[1] - *v42) >> 2;
    v45 = *(_QWORD *)(a3 + 40);
    v77 = 0.0;
    v46 = 0.0;
    v47 = 0.0;
    v48 = 0.0;
    v49 = 0.0;
    do
    {
      v50 = *(_QWORD *)(*(_QWORD *)v24 + 8 * v41);
      v51 = exp(*(float *)(*v21 + 4 * v50));
      v52 = **(_QWORD **)(a3 + 72);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == v52)
        v53 = 1.0;
      else
        v53 = *(float *)(v52 + 4 * v50);
      if (v50 * v45 >= v44)
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      v76 = v53;
      v54 = *(float *)(v43 + 4 * v50 * v45);
      v55 = fabsf(v54);
      if (v46 >= v55)
      {
        v77 = v77 + v47;
        v56 = 1.0;
        if (v46 > v55)
        {
          v61 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          dmlc::LogMessageFatal::Entry::Init(v61, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
          v62 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Check failed: last_abs_y <= abs_y", 33);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)": ", 2);
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"CoxRegression: labels must be in sorted order, ", 47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"MetaInfo::LabelArgsort failed!", 30);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
        }
      }
      else
      {
        v39 = v39 - (v77 + v47);
        v77 = 0.0;
        v56 = 1.0;
      }
      if (v54 > 0.0)
      {
        v49 = v49 + v56 / v39;
        v48 = v48 + v56 / (v39 * v39);
      }
      if (v50 >= (uint64_t)(v23[1] - *v23) >> 3)
        std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
      v58 = 0.0;
      if (v54 > 0.0)
        v58 = v56;
      v59 = -(v58 - v51 * v49) * v76;
      v60 = (float *)(*v23 + 8 * v50);
      *v60 = v59;
      v57 = (-(v51 * v51) * v48 + v51 * v49) * v76;
      v60[1] = v57;
      ++v41;
      v46 = v55;
      v47 = v51;
    }
    while (v41 < v80);
  }
}

void sub_220E149CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

const char *xgboost::obj::CoxRegression::DefaultEvalMetric(xgboost::obj::CoxRegression *this)
{
  return "cox-nloglik";
}

void xgboost::obj::CoxRegression::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  std::exception_ptr v5;
  std::mutex v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = **a2;
  v3 = (char *)(*a2)[1] - (char *)v2;
  v5.__ptr_ = 0;
  v6.__m_.__sig = 850045863;
  memset(v6.__m_.__opaque, 0, sizeof(v6.__m_.__opaque));
  if (v3 >= 1)
  {
    v4 = v3 >> 2;
    do
    {
      *v2 = expf(*v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  dmlc::OMPException::Rethrow(&v5);
  std::mutex::~mutex(&v6);
  std::exception_ptr::~exception_ptr(&v5);
}

void sub_220E14B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::CoxRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t xgboost::obj::CoxRegression::Task(xgboost::obj::CoxRegression *this)
{
  return 0;
}

char *xgboost::MetaInfo::LabelAbsSort(xgboost::MetaInfo *this)
{
  char *v1;
  unint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v1 = (char *)this + 184;
  v2 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) - **((_QWORD **)this + 3)) >> 2;
  if (v2 != (uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3)
  {
    std::vector<unsigned long>::resize((uint64_t)this + 184, v2);
    v4 = (uint64_t *)*((_QWORD *)this + 23);
    v5 = (uint64_t *)*((_QWORD *)this + 24);
    if (v4 != v5)
    {
      v6 = 0;
      v7 = (uint64_t *)*((_QWORD *)this + 23);
      do
        *v7++ = v6++;
      while (v7 != v5);
    }
    v12 = (uint64_t *)*((_QWORD *)this + 3);
    if ((char *)v5 - (char *)v4 < 1025)
    {
      v8 = 0;
      v10 = 0;
    }
    else
    {
      v8 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v5 - v4);
      v10 = v9;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v4, v5, &v12, v5 - v4, v8, v10);
    if (v8)
      operator delete(v8);
  }
  return v1;
}

void sub_220E14C38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned long>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *a1, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *a1;
      if (fabsf(*(float *)(**a3 + 4 * v9)) < fabsf(*(float *)(**a3 + 4 * *a1)))
      {
        *a1 = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &a1[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(a5, &a5[v14], &a5[v14], &a5[a4], a1, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>((char *)a1, (char *)&a1[a4 >> 1], (uint64_t)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3);
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t *v12;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = **a3;
      v6 = result;
      do
      {
        v7 = v6;
        v6 = v3;
        v8 = *v3;
        v9 = *v7;
        v10 = fabsf(*(float *)(v5 + 4 * v8));
        if (v10 < fabsf(*(float *)(v5 + 4 * v9)))
        {
          v11 = v4;
          while (1)
          {
            *(uint64_t *)((char *)result + v11 + 8) = v9;
            if (!v11)
              break;
            v9 = *(uint64_t *)((char *)result + v11 - 8);
            v11 -= 8;
            if (v10 >= fabsf(*(float *)(v5 + 4 * v9)))
            {
              v12 = (uint64_t *)((char *)result + v11 + 8);
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *v12 = v8;
        }
        v3 = v6 + 1;
        v4 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      if (fabsf(*(float *)(**a3 + 4 * v10)) >= fabsf(*(float *)(**a3 + 4 * *result)))
      {
        *a5 = *result;
        v11 = *(a2 - 1);
      }
      else
      {
        *a5 = v10;
        v11 = *result;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD **a6)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;

  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    v6 = *a6;
    while (a3 != a4)
    {
      v7 = *a3;
      v8 = fabsf(*(float *)(*v6 + 4 * *a3));
      v9 = fabsf(*(float *)(*v6 + 4 * *result));
      if (v8 >= v9)
        v7 = *result;
      result += v8 >= v9;
      a3 += v8 < v9;
      *a5++ = v7;
      if (result == a2)
        goto LABEL_9;
    }
    if (result != a2)
    {
      v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *a1, char *a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;

  if (a6)
  {
    v9 = a6;
    do
    {
      if (a5 <= a8 || v9 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(a1, a2, a3, a4, a5, v9, a7);
        return;
      }
      if (!a5)
        return;
      v13 = 0;
      v14 = **a4;
      v15 = fabsf(*(float *)(v14 + 4 * *(_QWORD *)a2));
      v16 = -a5;
      while (1)
      {
        v17 = *(_QWORD *)&a1[v13];
        if (v15 < fabsf(*(float *)(v14 + 4 * v17)))
          break;
        v13 += 8;
        if (__CFADD__(v16++, 1))
          return;
      }
      v46 = a8;
      v47 = a4;
      v45 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          *(_QWORD *)&a1[v13] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v17;
          return;
        }
        if (v16 <= 0)
          v30 = -v16;
        else
          v30 = 1 - v16;
        v29 = v30 >> 1;
        v22 = &a1[8 * (v30 >> 1) + v13];
        v21 = a2;
        if (a2 != (char *)a3)
        {
          v31 = (a3 - (uint64_t)a2) >> 3;
          v32 = fabsf(*(float *)(v14 + 4 * *(_QWORD *)v22));
          v21 = a2;
          do
          {
            v33 = v31 >> 1;
            v34 = &v21[8 * (v31 >> 1)];
            v36 = *(_QWORD *)v34;
            v35 = v34 + 8;
            v31 += ~(v31 >> 1);
            if (fabsf(*(float *)(v14 + 4 * v36)) < v32)
              v21 = v35;
            else
              v31 = v33;
          }
          while (v31);
        }
        v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0)
          v19 = v9;
        else
          v19 = v9 + 1;
        v20 = v19 >> 1;
        v21 = &a2[8 * (v19 >> 1)];
        v22 = a2;
        if (a2 - a1 != v13)
        {
          v23 = (a2 - a1 - v13) >> 3;
          v24 = fabsf(*(float *)(v14 + 4 * *(_QWORD *)v21));
          v22 = &a1[v13];
          do
          {
            v25 = v23 >> 1;
            v26 = &v22[8 * (v23 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 8;
            v23 += ~(v23 >> 1);
            if (v24 < fabsf(*(float *)(v14 + 4 * v28)))
              v23 = v25;
            else
              v22 = v27;
          }
          while (v23);
        }
        v29 = (v22 - a1 - v13) >> 3;
      }
      a5 = -(v29 + v16);
      v37 = v9 - v20;
      v38 = v29;
      v39 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v22, a2, v21);
      v40 = v38;
      v41 = v39;
      if (v40 + v20 >= v9 - (v40 + v20) - v16)
      {
        v44 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(v39, v21, v45, v47, a5, v37, a7, v46);
        a2 = v22;
        a4 = v47;
        v37 = v20;
        a8 = v46;
        a5 = v44;
        a3 = (uint64_t)v41;
        a1 += v13;
      }
      else
      {
        v42 = v22;
        a4 = v47;
        v43 = v20;
        a8 = v46;
        std::__inplace_merge<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(&a1[v13], v42, v39, v47, v40, v43, a7, v46);
        a1 = v41;
        a2 = v21;
        a3 = v45;
      }
      v9 = v37;
    }
    while (v37);
  }
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (result != a2)
  {
    v4 = *result++;
    *a3 = v4;
    if (result != a2)
    {
      v5 = 0;
      v6 = **a4;
      v7 = a3;
      v8 = a3;
      do
      {
        v10 = *v8++;
        v9 = v10;
        if (fabsf(*(float *)(v6 + 4 * *result)) >= fabsf(*(float *)(v6 + 4 * v10)))
        {
          *v8 = *result;
        }
        else
        {
          v7[1] = v9;
          v11 = a3;
          if (v7 != a3)
          {
            v12 = v5;
            while (1)
            {
              v11 = (uint64_t *)((char *)a3 + v12);
              v13 = *(uint64_t *)((char *)a3 + v12 - 8);
              if (fabsf(*(float *)(v6 + 4 * *result)) >= fabsf(*(float *)(v6 + 4 * v13)))
                break;
              *v11 = v13;
              v12 -= 8;
              if (!v12)
              {
                v11 = a3;
                break;
              }
            }
          }
          *v11 = *result;
        }
        ++result;
        v5 += 8;
        v7 = v8;
      }
      while (result != a2);
    }
  }
  return result;
}

uint64_t *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD **a6)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;

  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    v6 = *a6;
    while (a3 != a4)
    {
      v7 = *a3;
      v8 = fabsf(*(float *)(*v6 + 4 * *a3));
      v9 = fabsf(*(float *)(*v6 + 4 * *result));
      if (v8 >= v9)
        v7 = *result;
      a3 += v8 < v9;
      result += v8 >= v9;
      *a5++ = v7;
      if (result == a2)
        goto LABEL_9;
    }
    if (result != a2)
    {
      v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &,std::__wrap_iter<unsigned long *>>(char *__dst, char *a2, uint64_t a3, _QWORD **a4, uint64_t a5, uint64_t a6, char *__src)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  float v16;
  float v17;
  _QWORD **v18;

  v7 = a2;
  v8 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      v12 = 0;
      do
      {
        *(_QWORD *)&__src[v12] = *(_QWORD *)&__dst[v12];
        v12 += 8;
      }
      while (&__dst[v12] != a2);
      if (v12)
      {
        v13 = *a4;
        v14 = __src;
        while (v7 != (char *)a3)
        {
          v15 = *(_QWORD *)v7;
          v16 = fabsf(*(float *)(*v13 + 4 * *(_QWORD *)v7));
          v17 = fabsf(*(float *)(*v13 + 4 * *(_QWORD *)v14));
          if (v16 >= v17)
            v15 = *(_QWORD *)v14;
          v7 += 8 * (v16 < v17);
          v14 += 8 * (v16 >= v17);
          *(_QWORD *)v8 = v15;
          v8 += 8;
          if (&__src[v12] == v14)
            return;
        }
        memmove(v8, v14, __src - v14 + v12);
      }
    }
  }
  else
  {
    v9 = __src;
    if (a2 != (char *)a3)
    {
      v9 = __src;
      v10 = a2;
      do
      {
        v11 = *(_QWORD *)v10;
        v10 += 8;
        *(_QWORD *)v9 = v11;
        v9 += 8;
      }
      while (v10 != (char *)a3);
    }
    v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>((uint64_t)v9, (uint64_t)v9, (uint64_t)__src, (uint64_t)__src, (uint64_t)a2, (uint64_t)a2, (uint64_t)v8, (uint64_t)v8, a3, a3, &v18);
  }
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<xgboost::MetaInfo::LabelAbsSort(void)::{lambda(unsigned long,unsigned long)#1} &>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<unsigned long *>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>,std::reverse_iterator<std::__wrap_iter<unsigned long *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD ***a11)
{
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 != a4)
  {
    v11 = *a11;
    v12 = (_QWORD *)(a10 - 8);
    while (a6 != a8)
    {
      v13 = *(_QWORD *)(a2 - 8);
      if (fabsf(*(float *)(**v11 + 4 * v13)) >= fabsf(*(float *)(**v11 + 4 * *(_QWORD *)(a6 - 8))))
      {
        a2 -= 8;
      }
      else
      {
        v13 = *(_QWORD *)(a6 - 8);
        a6 -= 8;
      }
      *v12-- = v13;
      if (a2 == a4)
        return;
    }
    v14 = 0;
    do
    {
      v12[v14] = *(_QWORD *)(a2 + v14 * 8 - 8);
      --v14;
    }
    while (a2 + v14 * 8 != a4);
  }
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5268;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = &off_24E6B52D8;
  *(_QWORD *)(v0 + 8) = 0;
  xgboost::HostDeviceVector<int>::HostDeviceVector((std::vector<int> **)(v0 + 16), 0, 0);
  return v0;
}

void sub_220E159C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0xE1C400868AB68);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_9,std::allocator<xgboost::obj::$_9>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::GammaRegression::~GammaRegression(xgboost::obj::GammaRegression *this)
{
  *(_QWORD *)this = &off_24E6B52D8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 2);
}

{
  *(_QWORD *)this = &off_24E6B52D8;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 2);
  JUMPOUT(0x227667068);
}

void xgboost::obj::GammaRegression::SaveConfig(xgboost::obj::GammaRegression *this, xgboost::Json *a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  uint64_t v7;
  _QWORD v8[2];
  void *v9[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(v6, "reg:gamma");
  v8[1] = 0;
  *(_OWORD *)v9 = *(_OWORD *)v6;
  v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v8);
  if (v5 < 0)
    operator delete(__p[0]);
  v8[0] = off_24E6BE2B8;
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_220E15B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::GammaRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::vector<int> *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  std::string *v38;
  _QWORD *v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  std::string *v77;
  _QWORD *v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  std::vector<int>::value_type __x[2];
  std::mutex v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v9 = **(_QWORD **)(a3 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  LODWORD(v84) = 0;
  v11 = v10 - v9;
  v85 = v11 >> 2;
  if (!v11)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"info.labels.Size() != 0U", 24);
      v44 = *(char *)(*(_QWORD *)__x + 23);
      v45 = v44 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"label set cannot be empty", 25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v85);
      v49 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v49)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v49);
    }
  }
  v85 = ((*a2)[1] - **a2) >> 2;
  v84 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  if (v85 != v84)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v85);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v16 = *(char *)(*(_QWORD *)__x + 23);
      v17 = v16 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"labels are not correctly provided", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v85);
      v21 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v21)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v21);
    }
  }
  v85 = ((*a2)[1] - **a2) >> 2;
  *(_QWORD *)__x = 0;
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v85, __x);
  v23 = *(std::vector<int> **)(a1 + 16);
  __x[0] = 0;
  std::vector<int>::resize(v23, 1uLL, __x);
  v24 = **(void ***)(a1 + 16);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - (_QWORD)v24;
  if (v25 >= 1)
    memset_pattern16(v24, &unk_220F5E2F0, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
  v26 = v85;
  v82 = **(_QWORD **)(a3 + 72);
  v83 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
  v27 = v83 - v82;
  if (v83 != v82)
  {
    v84 = v27 >> 2;
    if (v27 >> 2 != v85)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
      if (*(_QWORD *)__x)
      {
        v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"info.weights_.Size() == ndata", 29);
        v32 = *(char *)(*(_QWORD *)__x + 23);
        v33 = v32 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
        v34 = v32 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
        v37 = *(_QWORD *)__x;
        *(_QWORD *)__x = 0;
        if (v37)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v37);
      }
    }
    v26 = v85;
  }
  if (v22 < 0)
  {
    v79 = a1;
    *(_QWORD *)__x = 0;
    v87.__m_.__sig = 850045863;
    memset(v87.__m_.__opaque, 0, sizeof(v87.__m_.__opaque));
    if (v26)
    {
      v50 = *(_QWORD *)(a1 + 16);
      v52 = *(_DWORD **)v50;
      v51 = *(_DWORD **)(v50 + 8);
      if (*(_QWORD *)v50 || !v51)
      {
        v53 = *(_QWORD *)*a5;
        v54 = *(_QWORD *)(*a5 + 8);
        if (v53 || !v54)
        {
          v55 = *a2;
          v57 = **a2;
          v56 = v55[1];
          if (v57 || !v56)
          {
            v58 = *(uint64_t **)(a3 + 24);
            v60 = *v58;
            v59 = v58[1];
            if (v60 || !v59)
            {
              v80 = v51;
              v61 = *(uint64_t **)(a3 + 72);
              v63 = *v61;
              v62 = v61[1];
              v81 = v63;
              if (v63 || !v62)
              {
                v64 = 0;
                v65 = (v54 - v53) >> 3;
                v66 = (v56 - v57) >> 2;
                v67 = (v59 - v60) >> 2;
                v68 = (v62 - v63) >> 2;
                v69 = (float *)(v53 + 4);
                while (v66 != v64)
                {
                  v70 = *(float *)(v57 + 4 * v64);
                  if (v83 == v82)
                  {
                    v71 = 1.0;
                  }
                  else
                  {
                    if (v68 <= v64)
                      break;
                    v71 = *(float *)(v81 + 4 * v64);
                  }
                  if (v67 == v64)
                    break;
                  v72 = *(float *)(v60 + 4 * v64);
                  if (v72 <= 0.0)
                  {
                    if (v80 == v52)
                      break;
                    *v52 = 0;
                  }
                  if (v65 == v64)
                    break;
                  v73 = v72 / expf(v70);
                  *(v69 - 1) = v71 * (float)(1.0 - v73);
                  *v69 = v71 * v73;
                  ++v64;
                  v69 += 2;
                  if (v26 == v64)
                    goto LABEL_60;
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_60:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v87);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    a1 = v79;
  }
  else
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  v74 = *(_QWORD *)(a1 + 16);
  v75 = *(_DWORD **)v74;
  v76 = *(_DWORD **)(v74 + 8);
  if (*(_DWORD **)v74 != v76)
  {
    do
    {
      if (!*v75)
      {
        v77 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v77, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v78 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"GammaRegression: label must be positive.", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v75;
    }
    while (v75 != v76);
  }
}

void sub_220E16160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex *v19;

  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::GammaRegression::DefaultEvalMetric(xgboost::obj::GammaRegression *this)
{
  return "gamma-nloglik";
}

void xgboost::obj::GammaRegression::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  std::exception_ptr v6;
  std::mutex v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        *v3 = expf(*v3);
        ++v3;
        if (!--v5)
          goto LABEL_10;
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_220E162DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::GammaRegression::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t xgboost::obj::GammaRegression::Task(xgboost::obj::GammaRegression *this)
{
  return 0;
}

void std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5370;
  return result;
}

uint64_t std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)v0 = off_24E6B53E0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  xgboost::HostDeviceVector<int>::HostDeviceVector((std::vector<int> **)(v0 + 48), 0, 0);
  return v0;
}

void sub_220E163D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  MEMORY[0x227667068](v1, 0x10F3C402E5B548ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::obj::$_10,std::allocator<xgboost::obj::$_10>,xgboost::ObjFunction * ()(void)>::target_type()
{
}

void xgboost::obj::TweedieRegression::~TweedieRegression(xgboost::obj::TweedieRegression *this)
{
  *(_QWORD *)this = off_24E6B53E0;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 6);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_24E6B53E0;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 6);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x227667068);
}

void xgboost::obj::TweedieRegression::LoadConfig(xgboost::obj::TweedieRegression *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  xgboost::obj::TweedieRegressionParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _BYTE *v13;
  int v14;
  void *__p[2];
  char v16;
  std::vector<std::pair<std::string, std::string>> v17;
  std::vector<std::pair<std::string, std::string>> *v18;
  _QWORD *v19[2];
  __int128 *v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "tweedie_regression_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = (xgboost::obj::TweedieRegressionParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v20 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      v5 = (xgboost::obj::TweedieRegressionParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  v14 = *((unsigned __int8 *)this + 40);
  v13 = (char *)this + 40;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::TweedieRegressionParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F361C8, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F361C8, (uint64_t)v13, v18, v19, &v17, 0);
    *v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_220E16670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::obj::TweedieRegression::SaveConfig(xgboost::obj::TweedieRegression *this, xgboost::Json *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int **v11;
  void *v12[2];
  uint64_t *v13;
  _QWORD *v14[2];
  void *v15;
  const void **v16;
  void *v17[2];
  uint64_t *v18;
  void *__p;
  _QWORD *v20;
  char v21;
  void **v22;

  std::string::basic_string[abi:ne180100]<0>(v12, "reg:tweedie");
  v16 = 0;
  v15 = off_24E6BE2B8;
  *(_OWORD *)v17 = *(_OWORD *)v12;
  v18 = v13;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Json::operator=(v4, (uint64_t)&v15);
  if (v21 < 0)
    operator delete(__p);
  v15 = off_24E6BE2B8;
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  v12[1] = (void *)0x300000000;
  v12[0] = &off_24E6BE1D0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  xgboost::obj::TweedieRegressionParam::__MANAGER__((xgboost::obj::TweedieRegressionParam *)v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F361C8, (char *)this + 40, (std::vector<std::pair<std::string, std::string>> *)&v15);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v15, v16);
  v22 = &v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v6 = (char *)__p;
  if (__p != &v20)
  {
    do
    {
      xgboost::JsonString::JsonString(&v15, (__int128 *)(v6 + 56));
      v22 = (void **)(v6 + 32);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v15);
      v15 = off_24E6BE2B8;
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (char *)&v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v20);
  std::string::basic_string[abi:ne180100]<0>(&v15, "tweedie_regression_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v15);
  xgboost::Json::operator=(v11, (uint64_t)v12);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v15);
  v12[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E16900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _QWORD *a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v31, a16);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  void **v5;
  __int128 v7;
  uint64_t v8;
  void **v9[11];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_BYTE *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    xgboost::obj::TweedieRegressionParam::__MANAGER__((xgboost::obj::TweedieRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F361C8, (uint64_t)v4, *a2, a2[1], 0, &v12, 0);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    xgboost::obj::TweedieRegressionParam::__MANAGER__((xgboost::obj::TweedieRegressionParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F361C8, (uint64_t)v4, *a2, a2[1], &v12, 0);
    *v4 = 1;
  }
  v9[0] = (void **)&v12;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v9);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"tweedie-nloglik@", 16);
  std::ostream::operator<<();
  std::stringbuf::str();
  v5 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9[0] = *(void ***)MEMORY[0x24BEDB800];
  *(void ***)((char *)v9 + (unint64_t)*(v9[0] - 3)) = *(void ***)(MEMORY[0x24BEDB800] + 24);
  v9[1] = (void **)(MEMORY[0x24BEDB848] + 16);
  if (v10 < 0)
    operator delete(v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v11);
}

void sub_220E16B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  a13 = (void **)(v13 - 56);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void xgboost::obj::TweedieRegression::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::vector<int> *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  std::string *v38;
  _QWORD *v39;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float v70;
  float v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  std::string *v81;
  _QWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  std::vector<int>::value_type __x[2];
  std::mutex v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v9 = **(_QWORD **)(a3 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  LODWORD(v88) = 0;
  v11 = v10 - v9;
  v89 = v11 >> 2;
  if (!v11)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: ", 14);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"info.labels.Size() != 0U", 24);
      v44 = *(char *)(*(_QWORD *)__x + 23);
      v45 = v44 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v46 = v44 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"label set cannot be empty", 25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v89);
      v49 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v49)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v49);
    }
  }
  v89 = ((*a2)[1] - **a2) >> 2;
  v88 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  if (v89 != v88)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v16 = *(char *)(*(_QWORD *)__x + 23);
      v17 = v16 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v18 = v16 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"labels are not correctly provided", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v89);
      v21 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v21)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v21);
    }
  }
  v89 = ((*a2)[1] - **a2) >> 2;
  *(_QWORD *)__x = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v89, __x);
  v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v23 = *(std::vector<int> **)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::resize(v23, 1uLL, __x);
  v24 = **(void ***)(a1 + 48);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - (_QWORD)v24;
  if (v25 >= 1)
    memset_pattern16(v24, &unk_220F5E2F0, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
  v26 = v89;
  v86 = **(_QWORD **)(a3 + 72);
  v87 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
  v27 = v87 - v86;
  if (v87 != v86)
  {
    v88 = v27 >> 2;
    if (v27 >> 2 != v89)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
      if (*(_QWORD *)__x)
      {
        v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"info.weights_.Size() == ndata", 29);
        v32 = *(char *)(*(_QWORD *)__x + 23);
        v33 = v32 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
        v34 = v32 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v88);
        v37 = *(_QWORD *)__x;
        *(_QWORD *)__x = 0;
        if (v37)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v37);
      }
    }
    v26 = v89;
  }
  if (v22 < 0)
  {
    v83 = a1;
    v50 = *(float *)(a1 + 44);
    *(_QWORD *)__x = 0;
    v91.__m_.__sig = 850045863;
    memset(v91.__m_.__opaque, 0, sizeof(v91.__m_.__opaque));
    if (v26)
    {
      v51 = *(_QWORD *)(a1 + 48);
      v53 = *(_DWORD **)v51;
      v52 = *(_DWORD **)(v51 + 8);
      if (*(_QWORD *)v51 || !v52)
      {
        v54 = *(_QWORD *)*a5;
        v55 = *(_QWORD *)(*a5 + 8);
        if (v54 || !v55)
        {
          v56 = *a2;
          v58 = **a2;
          v57 = v56[1];
          if (v58 || !v57)
          {
            v59 = *(uint64_t **)(a3 + 24);
            v61 = *v59;
            v60 = v59[1];
            if (v61 || !v60)
            {
              v84 = v52;
              v62 = *(uint64_t **)(a3 + 72);
              v64 = *v62;
              v63 = v62[1];
              v85 = v64;
              if (v64 || !v63)
              {
                v65 = 0;
                v66 = (v55 - v54) >> 3;
                v67 = (v57 - v58) >> 2;
                v68 = (v60 - v61) >> 2;
                v69 = (v63 - v64) >> 2;
                v70 = 1.0 - v50;
                v71 = 2.0 - v50;
                v72 = (float *)(v54 + 4);
                while (v67 != v65)
                {
                  v73 = *(float *)(v58 + 4 * v65);
                  if (v87 == v86)
                  {
                    v74 = 1.0;
                  }
                  else
                  {
                    if (v69 <= v65)
                      break;
                    v74 = *(float *)(v85 + 4 * v65);
                  }
                  if (v68 == v65)
                    break;
                  v75 = *(float *)(v61 + 4 * v65);
                  if (v75 < 0.0)
                  {
                    if (v84 == v53)
                      break;
                    *v53 = 0;
                  }
                  if (v66 == v65)
                    break;
                  v76 = expf(v70 * v73);
                  v77 = expf(v71 * v73);
                  *(v72 - 1) = v74 * (float)(v77 - (float)(v75 * v76));
                  *v72 = v74 * (float)((float)(v71 * v77) + (float)((float)-(float)(v75 * v70) * v76));
                  ++v65;
                  v72 += 2;
                  if (v26 == v65)
                    goto LABEL_60;
                }
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_60:
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v91);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    a1 = v83;
  }
  else
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  v78 = *(_QWORD *)(a1 + 48);
  v79 = *(_DWORD **)v78;
  v80 = *(_DWORD **)(v78 + 8);
  if (*(_DWORD **)v78 != v80)
  {
    do
    {
      if (!*v79)
      {
        v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/regression_obj.cu");
        v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"TweedieRegression: label must be nonnegative", 44);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      }
      ++v79;
    }
    while (v79 != v80);
  }
}

void sub_220E17148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::exception_ptr a19)
{
  std::mutex *v19;

  std::mutex::~mutex(v19);
  std::exception_ptr::~exception_ptr(&a19);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::DefaultEvalMetric(xgboost::obj::TweedieRegression *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void xgboost::obj::TweedieRegression::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  std::exception_ptr v6;
  std::mutex v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        *v3 = expf(*v3);
        ++v3;
        if (!--v5)
          goto LABEL_10;
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_220E172D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::TweedieRegression::Task(xgboost::obj::TweedieRegression *this)
{
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_prune__(xgboost::tree *this)
{
  return 0;
}

void std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__function::__value_func<xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_220E17480(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5618;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B7F10;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BA9A8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAC20;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BB108;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BBAE8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BC0D0;
  return result;
}

uint64_t std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string __p;

  v2 = *a2;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = off_24E6B5698;
  *(_BYTE *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 52) = 4;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v3 + 160));
  std::string::basic_string[abi:ne180100]<0>(&__p, "sync");
  v4 = xgboost::TreeUpdater::Create((uint64_t)&__p, *(_QWORD *)(v3 + 8), v2);
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "TreePruner");
  std::string::operator=((std::string *)(v3 + 160), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

{
  __int16 v2;
  uint64_t v3;
  std::string __str;

  v2 = *a2;
  v3 = operator new();
  *(_QWORD *)v3 = off_24E6BBB58;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 44) = 4;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v3 + 152));
  *(_QWORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost6common13ColumnSamplerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(v3 + 248));
  *(_WORD *)(v3 + 264) = v2;
  std::string::basic_string[abi:ne180100]<0>(&__str, "GlobalApproxUpdater");
  std::string::operator=((std::string *)(v3 + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v3;
}

void sub_220E175CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  char **v17;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  xgboost::common::Monitor::~Monitor(v17);
  xgboost::tree::TrainParam::~TrainParam(v16);
  v19 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  MEMORY[0x227667068](v15, 0x10F3C40AD1C881BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

{
}

void xgboost::tree::TrainParam::~TrainParam(void **this)
{
  void *v2;

  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
}

void xgboost::tree::TreePruner::~TreePruner(xgboost::tree::TreePruner *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24E6B5698;
  xgboost::common::Monitor::~Monitor((char **)this + 20);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24E6B5698;
  xgboost::common::Monitor::~Monitor((char **)this + 20);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x227667068);
}

void xgboost::tree::TreePruner::LoadConfig(xgboost::tree::TreePruner *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::TreePruner *)((char *)this + 24), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E17820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::TreePruner::SaveConfig(xgboost::tree::TreePruner *this, xgboost::Json *a2)
{
  unsigned int **v3;
  void *__p[2];
  char v5;
  _QWORD v6[2];
  _QWORD *v7[3];

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::TreePruner *)((char *)this + 24), (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v3 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  v6[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v7, v7[1]);
}

void sub_220E178C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::TreePruner::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v5[3];
  void **v6;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 24), a2, v5);
  v6 = (void **)v5;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t xgboost::tree::TreePruner::CanModifyTree(xgboost::tree::TreePruner *this)
{
  return 1;
}

void xgboost::tree::TreePruner::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  void *v25[2];
  char v26;
  void *__p[2];
  char v28;

  std::string::basic_string[abi:ne180100]<0>(__p, "PrunerUpdate");
  xgboost::common::Monitor::Start();
  v22 = a2;
  v23 = a3;
  if (v28 < 0)
    operator delete(__p[0]);
  v8 = *(float *)(a1 + 28);
  v10 = *a4;
  v9 = a4[1];
  v24 = a4;
  *(float *)(a1 + 28) = v8 / (float)(unint64_t)(v9 - *a4);
  if (v9 != v10)
  {
    v11 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    do
    {
      v12 = *v10;
      v13 = *(_DWORD *)(*v10 + 12);
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(v12 + 160);
          v17 = (int *)(v16 + 20 * v14);
          if (v17[1] == -1 && *(_DWORD *)(v16 + 20 * v14 + 12) != -1)
          {
            v18 = *v17;
            if (*v17 == -1)
            {
              v19 = 0;
            }
            else
            {
              v19 = 0;
              do
              {
                ++v19;
                v18 = *(_DWORD *)(v16 + 20 * (v18 & 0x7FFFFFFF));
              }
              while (v18 != -1);
            }
            v15 = xgboost::tree::TreePruner::TryPruneLeaf((xgboost::tree::TreePruner *)a1, (xgboost::RegTree *)v12, v14, v19, v15);
            v13 = *(_DWORD *)(v12 + 12);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      if (*(int *)(v11 + 4) > 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v25, 101, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"tree pruning end, ", 18);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" extra nodes, ", 14);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" pruned nodes, max_depth=", 25);
        xgboost::RegTree::MaxDepth((xgboost::RegTree *)v12, 0);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
        if (v26 < 0)
          operator delete(v25[0]);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  *(float *)(a1 + 28) = v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t **))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v22, v23, v24);
  std::string::basic_string[abi:ne180100]<0>(__p, "PrunerUpdate");
  xgboost::common::Monitor::Stop();
  if (v28 < 0)
    operator delete(__p[0]);
}

void sub_220E17BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::TreeUpdater::UpdatePredictionCache()
{
  return 0;
}

const char *xgboost::tree::TreePruner::Name(xgboost::tree::TreePruner *this)
{
  return "prune";
}

std::chrono::steady_clock::time_point *xgboost::common::Monitor::Monitor(std::chrono::steady_clock::time_point *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, (char *)&unk_220F8364E);
  v2[4] = 0;
  v2[3] = v2 + 4;
  v2[6] = 0;
  v2[7] = 0;
  v2[5] = 0;
  this[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  return this;
}

void xgboost::common::Monitor::~Monitor(char **this)
{
  xgboost::common::Monitor::Print((xgboost::common::Monitor *)this);
  this[7] += std::chrono::steady_clock::now().__d_.__rep_ - (_QWORD)this[6];
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void xgboost::FromJson<xgboost::tree::TrainParam>(_DWORD **a1@<X0>, xgboost::tree::TrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)v5[2];
  v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E17DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,xgboost::Json>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::TrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    v6 = xgboost::tree::TrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E17EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::tree::TrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v6 = xgboost::tree::TrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, a3, 0);
}

void sub_220E17F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::tree::TrainParam>(xgboost::tree::TrainParam *a1@<X0>, uint64_t a2@<X8>)
{
  dmlc::parameter::ParamManager *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  std::vector<std::pair<std::string, std::string>> v10;
  char v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::vector<std::pair<std::string, std::string>> *v14;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = (dmlc::parameter::ParamManager *)xgboost::tree::TrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict(v4, a1, &v10);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v12, (const void **)&v10.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v10.__end_->first.__r_.__value_.__l.__data_);
  v14 = &v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v5 = v12;
  if (v12 != v13)
  {
    do
    {
      xgboost::JsonString::JsonString(&v10, (__int128 *)(v5 + 7));
      v14 = (std::vector<std::pair<std::string, std::string>> *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
      xgboost::Json::operator=(v6 + 7, (uint64_t)&v10);
      v10.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v11 < 0)
        operator delete(v10.__end_cap_.__value_);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_220E18098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::tree::TrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::tree::TrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E18188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::tree::TrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::tree::TrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220E181F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::TreePruner::TryPruneLeaf(xgboost::tree::TreePruner *this, xgboost::RegTree *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  char v28;

  v10 = *((_QWORD *)a2 + 20);
  if (*(_DWORD *)(v10 + 20 * a3 + 4) != -1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: tree[nid].IsLeaf()", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
    v10 = *((_QWORD *)a2 + 20);
  }
  v11 = *(_DWORD *)(v10 + 20 * a3);
  if (v11 != -1)
  {
    v12 = v11 & 0x7FFFFFFF;
    v13 = *(_DWORD *)(v10 + 20 * v12 + 4);
    if (v13 == -1)
    {
      v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_prune.cc");
      v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !tree[pid].IsLeaf()", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
      v10 = *((_QWORD *)a2 + 20);
      v13 = *(_DWORD *)(v10 + 20 * v12 + 4);
    }
    v14 = *(_DWORD *)(v10 + 20 * v12 + 8);
    if (*(_DWORD *)(v10 + 20 * v13 + 4) == -1 && v14 != -1 && *(_DWORD *)(v10 + 20 * v14 + 4) == -1)
    {
      v16 = *((_QWORD *)a2 + 26);
      if (*((float *)this + 8) > *(float *)(v16 + 16 * v12) || (v17 = *((_DWORD *)this + 9)) != 0 && v17 < a4)
      {
        v18 = *((float *)this + 7) * *(float *)(v16 + 16 * v12 + 8);
        xgboost::RegTree::DeleteNode(a2, v13);
        xgboost::RegTree::DeleteNode(a2, *(_DWORD *)(*((_QWORD *)a2 + 20) + 20 * v12 + 8));
        v19 = *((_QWORD *)a2 + 20) + 20 * v12;
        *(float *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 4) = -1;
        return xgboost::tree::TreePruner::TryPruneLeaf(this, a2, v12, a4 - 1, (int)a5 + 2);
      }
    }
  }
  return a5;
}

void sub_220E18410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

void xgboost::RegTree::DeleteNode(xgboost::RegTree *this, int a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int *v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;

  v29 = 1;
  v30 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>(&v28);
    if (v28)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/tree_model.h");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nid >= 1", 8);
      v20 = *(char *)(v28 + 23);
      v21 = v20 >= 0 ? v28 : *(_QWORD *)v28;
      v22 = v20 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(_QWORD *)(v28 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
      v24 = v28;
      v28 = 0;
      if (v24)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v28, v24);
    }
  }
  v4 = *((_QWORD *)this + 25);
  v5 = *((_QWORD *)this + 20) + 20 * (*(_DWORD *)(*((_QWORD *)this + 20) + 20 * a2) & 0x7FFFFFFF);
  v7 = *(_DWORD *)(v5 + 4);
  v6 = (_DWORD *)(v5 + 4);
  if (v7 != a2)
    ++v6;
  *v6 = -1;
  v8 = (int *)*((_QWORD *)this + 24);
  if ((unint64_t)v8 >= v4)
  {
    v10 = (int *)*((_QWORD *)this + 23);
    v11 = v8 - v10;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v10;
    v13 = (uint64_t)(v4 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 200, v14);
      v10 = (int *)*((_QWORD *)this + 23);
      v8 = (int *)*((_QWORD *)this + 24);
    }
    else
    {
      v15 = 0;
    }
    v25 = (int *)&v15[4 * v11];
    v26 = &v15[4 * v14];
    *v25 = a2;
    v9 = v25 + 1;
    while (v8 != v10)
    {
      v27 = *--v8;
      *--v25 = v27;
    }
    *((_QWORD *)this + 23) = v25;
    *((_QWORD *)this + 24) = v9;
    *((_QWORD *)this + 25) = v26;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a2;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 24) = v9;
  *(_DWORD *)(*((_QWORD *)this + 20) + 20 * a2 + 12) = -1;
  ++*((_DWORD *)this + 4);
}

void sub_220E1862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  uint64_t v12;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t xgboost::RegTree::MaxDepth(xgboost::RegTree *this, int a2)
{
  unsigned int v4;
  int v5;

  if (*(_DWORD *)(*((_QWORD *)this + 20) + 20 * a2 + 4) == -1)
    return 0;
  v4 = xgboost::RegTree::MaxDepth(this, *(_DWORD *)(*((_QWORD *)this + 20) + 20 * a2 + 4)) + 1;
  v5 = xgboost::RegTree::MaxDepth(this, *(_DWORD *)(*((_QWORD *)this + 20) + 20 * a2 + 8));
  if ((int)v4 <= v5 + 1)
    return (v5 + 1);
  else
    return v4;
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SketchContainerImpl(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, char a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int64x2_t v42;
  char *v43;
  std::string *Entry;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  std::string *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v70;
  std::string __str;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  int64x2_t v77;
  char *v78;
  uint64_t v79;

  v10 = a1;
  v70 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>((_QWORD *)(a1 + 48), a4, 0, a4, *a4);
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  v10 += 72;
  *(_QWORD *)(v10 + 16) = 0;
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v10 + 24) = a3;
  *(_BYTE *)(v10 + 28) = a5;
  *(_DWORD *)(v10 + 32) = a6;
  *(_BYTE *)(v10 + 36) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v10 + 40));
  v11 = a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "SketchContainerImpl");
  std::string::operator=((std::string *)(v10 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v74 = 0;
  v14 = v12 - v13;
  v75 = v14 >> 3;
  if (!v14)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v76);
    if (v76)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"columns_size_.size() != 0", 25);
      v48 = *((char *)v76 + 23);
      v49 = v48 >= 0 ? (uint64_t)v76 : *v76;
      v50 = v48 >= 0 ? *((unsigned __int8 *)v76 + 23) : v76[1];
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v75);
      v52 = (uint64_t)v76;
      v76 = 0;
      if (v52)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v76, v52);
    }
  }
  v15 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  v16 = v15 >> 3;
  v17 = *(char **)a1;
  v18 = *(char **)(a1 + 8);
  v19 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v18[-*(_QWORD *)a1] >> 3);
  v20 = (v15 >> 3) - v19;
  if (v15 >> 3 <= v19)
  {
    if (v15 >> 3 < v19)
    {
      v43 = &v17[136 * v16];
      while (v18 != v43)
      {
        v18 -= 136;
        std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](a1 + 16, (uint64_t)v18);
      }
      *(_QWORD *)(a1 + 8) = v43;
    }
  }
  else
  {
    v21 = *(char **)(a1 + 16);
    if (0xF0F0F0F0F0F0F0F1 * ((v21 - v18) >> 3) >= v20)
    {
      v53 = 136 * ((136 * v20 - 136) / 0x88) + 136;
      bzero(v18, v53);
      *(_QWORD *)(a1 + 8) = &v18[v53];
    }
    else
    {
      if ((unint64_t)v15 >= 0xF0F0F0F0F0F0F09)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0xE1E1E1E1E1E1E1E2 * ((v21 - v17) >> 3) > v16)
        v16 = 0xE1E1E1E1E1E1E1E2 * ((v21 - v17) >> 3);
      if (0xF0F0F0F0F0F0F0F1 * ((v21 - v17) >> 3) >= 0xF0F0F0F0F0F0F0)
        v22 = 0x1E1E1E1E1E1E1E1;
      else
        v22 = v16;
      v79 = a1 + 16;
      if (v22 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = (char *)operator new(136 * v22);
      v24 = &v23[136 * v19];
      v76 = v23;
      v77.i64[0] = (uint64_t)v24;
      v25 = &v23[136 * v22];
      v78 = v25;
      v26 = 136 * ((136 * v20 - 136) / 0x88) + 136;
      bzero(v24, v26);
      v27 = &v24[v26];
      v77.i64[1] = (uint64_t)&v24[v26];
      if (v18 == v17)
      {
        v42 = vdupq_n_s64((unint64_t)v18);
        v11 = a1;
      }
      else
      {
        v28 = 0;
        do
        {
          v29 = &v24[v28];
          v30 = &v24[v28];
          *((_QWORD *)v30 - 17) = 0;
          *((_QWORD *)v30 - 16) = 0;
          v31 = &v24[v28 - 136];
          *((_QWORD *)v31 + 2) = 0;
          std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>(v31, *(const void **)&v18[v28 - 136], *(_QWORD *)&v18[v28 - 128], (uint64_t)(*(_QWORD *)&v18[v28 - 128] - *(_QWORD *)&v18[v28 - 136]) >> 3);
          *((_QWORD *)v29 - 14) = *(_QWORD *)&v18[v28 - 112];
          v32 = *(_OWORD *)&v18[v28 - 104];
          *((_QWORD *)v29 - 11) = 0;
          v33 = &v24[v28 - 88];
          *((_OWORD *)v33 - 1) = v32;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = 0;
          v35 = *(_BYTE **)&v18[v28 - 88];
          v34 = *(_BYTE **)&v18[v28 - 80];
          v36 = v34 - v35;
          if (v34 != v35)
          {
            if (v36 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v36 >> 4);
            v38 = &v24[v28];
            *(_QWORD *)v33 = v37;
            *((_QWORD *)v38 - 10) = v37;
            *((_QWORD *)v38 - 9) = &v37[16 * v39];
            memmove(v37, v35, v36);
            *((_QWORD *)v38 - 10) = &v37[16 * (v36 >> 4)];
          }
          v40 = &v24[v28];
          *((_QWORD *)v40 - 8) = 0;
          *((_QWORD *)v40 - 7) = 0;
          v41 = &v24[v28 - 64];
          *((_QWORD *)v41 + 2) = 0;
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(v41, *(const void **)&v18[v28 - 64], *(_QWORD *)&v18[v28 - 56], (uint64_t)(*(_QWORD *)&v18[v28 - 56] - *(_QWORD *)&v18[v28 - 64]) >> 4);
          xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer((uint64_t)&v24[v28 - 40], (uint64_t)&v18[v28 - 40]);
          v28 -= 136;
        }
        while (&v18[v28] != v17);
        v11 = a1;
        v42 = *(int64x2_t *)a1;
        v21 = *(char **)(a1 + 16);
        v24 += v28;
        v27 = (char *)v77.i64[1];
        v25 = v78;
      }
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v27;
      v77 = v42;
      *(_QWORD *)(v11 + 16) = v25;
      v78 = v21;
      v76 = (_QWORD *)v42.i64[0];
      std::__split_buffer<xgboost::common::WQuantileSketch<float,float>>::~__split_buffer((uint64_t)&v76);
    }
  }
  v54 = *(_DWORD *)(v11 + 104);
  v73 = 1;
  v74 = v54;
  if (v54 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v76);
    if (v76)
    {
      v60 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      dmlc::LogMessageFatal::Entry::Init(v60, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v61 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v75);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: ", 14);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"n_threads_ >= 1", 15);
      v64 = *((char *)v76 + 23);
      v65 = v64 >= 0 ? (uint64_t)v76 : *v76;
      v66 = v64 >= 0 ? *((unsigned __int8 *)v76 + 23) : v76[1];
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v75);
      v68 = (uint64_t)v76;
      v76 = 0;
      if (v68)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v76, v68);
    }
  }
  std::vector<std::set<float>>::resize(v70, (uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3);
  v56 = *(_QWORD *)(v11 + 48);
  v55 = *(_QWORD *)(v11 + 56);
  if (v56 == v55)
  {
    v58 = 0;
  }
  else
  {
    v57 = v56 + 1;
    do
    {
      v58 = *(_BYTE *)(v57 - 1) == 1;
      v59 = *(_BYTE *)(v57 - 1) == 1 || v57 == v55;
      ++v57;
    }
    while (!v59);
  }
  *(_BYTE *)(v11 + 108) = v58;
  return v11;
}

{
  return __ZN7xgboost6common19SketchContainerImplINS0_15WQuantileSketchIffEEEC2ENSt3__16vectorImNS5_9allocatorImEEEEiNS0_4SpanIKNS_11FeatureTypeELm18446744073709551615EEEbi(a1, a2, a3, a4, a5, a6);
}

void sub_220E18C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xgboost::common::Monitor *a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  char **v23;
  void *v25;
  void *v26;

  xgboost::common::Monitor::~Monitor(v23);
  v25 = *a11;
  if (*a11)
  {
    *(_QWORD *)(a14 + 80) = v25;
    operator delete(v25);
  }
  v26 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a14 + 56) = v26;
    operator delete(v26);
  }
  a22 = a13;
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = a14;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void std::vector<std::set<float>>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *i;
  char *v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3) >= v7)
    {
      v27 = &v4[24 * v7];
      v28 = 24 * a2 - 8 * ((v4 - (_BYTE *)*a1) >> 3);
      v29 = v4 + 8;
      do
      {
        *v29 = 0;
        v29[1] = 0;
        *(v29 - 1) = v29;
        v29 += 3;
        v28 -= 24;
      }
      while (v28);
      a1[1] = v27;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(24 * v11);
    v13 = &v12[24 * v6];
    v14 = &v12[24 * a2];
    v15 = v13 + 8;
    v16 = 24 * a2 - 24 * v6;
    do
    {
      *v15 = 0;
      v15[1] = 0;
      *(v15 - 1) = v15;
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
    v17 = &v12[24 * v11];
    if (v4 == v5)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (!v4)
        return;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v13[v18];
        *((_QWORD *)v19 - 3) = *(_QWORD *)&v4[v18 - 24];
        v20 = &v4[v18 - 16];
        v21 = *(_QWORD *)v20;
        *(_QWORD *)&v13[v18 - 16] = *(_QWORD *)v20;
        v22 = (uint64_t)&v13[v18 - 16];
        v23 = *(_QWORD *)&v4[v18 - 8];
        *((_QWORD *)v19 - 1) = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 16) = v22;
          *(_QWORD *)&v4[v18 - 24] = v20;
          *(_QWORD *)v20 = 0;
          *(_QWORD *)&v4[v18 - 8] = 0;
        }
        else
        {
          *((_QWORD *)v19 - 3) = v22;
        }
        v18 -= 24;
      }
      while (&v4[v18] != v5);
      v4 = (char *)*a1;
      v24 = (char *)a1[1];
      *a1 = &v13[v18];
      a1[1] = v14;
      a1[2] = v17;
      if (v24 != v4)
      {
        do
        {
          v25 = v24 - 24;
          std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v24 - 24), *((_QWORD **)v24 - 2));
          v24 = v25;
        }
        while (v25 != v4);
      }
      if (!v4)
        return;
    }
    operator delete(v4);
    return;
  }
  if (a2 < v6)
  {
    for (i = &v5[24 * a2]; v4 != i; v4 -= 24)
      std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
    a1[1] = i;
  }
}

BOOL xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::UseGroup(_QWORD *a1)
{
  return a1[7] - a1[6] >= 8uLL && *a1 != (uint64_t)(*(_QWORD *)(a1[9] + 8) - *(_QWORD *)a1[9]) >> 2;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(uint64_t **a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[4];
  void **v18;

  v4 = a3;
  v7 = a1[1];
  v8 = **a1;
  v9 = ((*a1)[1] - v8) >> 3;
  v17[0] = v9;
  v17[1] = v8;
  v11 = v7;
  v10 = *v7;
  v17[2] = (v11[1] - v10) >> 3;
  v17[3] = v10;
  std::vector<std::vector<unsigned long>>::vector(&v15, a3);
  v12 = v15;
  for (i = v16; v12 != i; v12 += 3)
  {
    v18 = 0;
    std::vector<unsigned long>::resize((uint64_t)v12, a2, &v18);
  }
  if (v9)
    v14 = v9 - 1;
  else
    v14 = 0;
  xgboost::common::ParallelFor<unsigned long,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1}>(v14, v4, 2, 0, (uint64_t)&v15, (uint64_t)v17);
  v18 = 0;
  std::vector<unsigned long>::vector(a4, a2, &v18);
  xgboost::common::ParallelFor<unsigned int,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda#1}>(a2, v4, 2, 0, &v15, a4);
  v18 = (void **)&v15;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_220E1911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  a16 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::LoadBalance(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  std::vector<unsigned int>::value_type __x[2];
  void *__p;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v8 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 3;
  v39 = v8;
  std::vector<std::vector<unsigned long>>::vector(&v37, a3);
  v9 = v37;
  for (i = v38; v9 != i; v9 += 24)
  {
    __p = 0;
    std::vector<unsigned long>::resize(v9, a2, &__p);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize((uint64_t **)a1, (uint64_t *)&__p, a2, a3);
  __x[0] = 0;
  std::vector<unsigned int>::vector(a4, a3 + 1, __x);
  *(_QWORD *)__x = 0;
  v11 = (uint64_t *)__p;
  v12 = v36;
  if (__p == v36)
  {
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    v15 = vcvtpd_u64_f64((double)(unint64_t)v8 / (double)a3);
    do
    {
      if (v14 >= a4->__end_ - a4->__begin_)
LABEL_28:
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v16 = *v11;
      ++a4->__begin_[v14];
      *(_QWORD *)__x = v16 + v13;
      if (v16 + v13 > v39)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v33);
        if (v33)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"count <= total_entries", 22);
          v21 = *(char *)(v33 + 23);
          v22 = v21 >= 0 ? v33 : *(_QWORD *)v33;
          v23 = v21 >= 0 ? *(unsigned __int8 *)(v33 + 23) : *(_QWORD *)(v33 + 8);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
          v25 = v33;
          v33 = 0;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v25);
        }
      }
      v13 = *(_QWORD *)__x;
      if (*(_QWORD *)__x > v15)
      {
        *(_QWORD *)__x = 0;
        if (v14 + 1 >= a4->__end_ - a4->__begin_)
          goto LABEL_28;
        v13 = 0;
        a4->__begin_[v14 + 1] = a4->__begin_[v14];
        ++v14;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v26 = a4->__end_ - a4->__begin_;
  if (v14 < v26 - 1)
  {
    v27 = &a4->__begin_[v14];
    v30 = *v27;
    v28 = v27 + 1;
    v29 = v30;
    v31 = ~v14 + v26;
    do
    {
      *v28++ = v29;
      --v31;
    }
    while (v31);
  }
  if (__p)
  {
    v36 = (uint64_t *)__p;
    operator delete(__p);
  }
  __p = &v37;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_220E19408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SearchGroupIndFromRow(uint64_t *a1, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  char v21;
  uint64_t v22;
  unint64_t v23;

  v23 = a2;
  if (*(unsigned int *)(a1[1] - 4) <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v22);
    if (v22)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"base_rowid < group_ptr.back()", 29);
      v7 = *(char *)(v22 + 23);
      v8 = v7 >= 0 ? v22 : *(_QWORD *)v22;
      v9 = v7 >= 0 ? *(unsigned __int8 *)(v22 + 23) : *(_QWORD *)(v22 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Row: ", 5);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is not found in any group.", 27);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
      v13 = v22;
      v22 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v22, v13);
    }
  }
  v14 = a1[1] - 4;
  if (v14 != *a1)
  {
    v15 = (v14 - *a1) >> 2;
    v14 = *a1;
    do
    {
      v16 = v15 >> 1;
      v17 = (unsigned int *)(v14 + 4 * (v15 >> 1));
      v19 = *v17;
      v18 = v17 + 1;
      v15 += ~(v15 >> 1);
      if (v23 < v19)
        v15 = v16;
      else
        v14 = (uint64_t)v18;
    }
    while (v15);
  }
  return ((unint64_t)(v14 - *a1) >> 2) - 1;
}

void sub_220E195E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::GatherSketchInfo(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, uint64_t a5)
{
  rabit::engine *v9;
  void *Engine;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  rabit::engine *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *Entry;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  int v88;
  uint64_t v89;
  rabit::engine *v90;
  uint64_t v91;
  unint64_t v92[2];
  int v93;
  void *__p;
  char *v95;
  char *v96;
  __int128 v97;
  unint64_t v98;

  *(_QWORD *)&v97 = 0;
  std::vector<unsigned long>::resize((uint64_t)a3, 1uLL, &v97);
  Engine = rabit::engine::GetEngine(v9);
  v90 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)Engine + 72))(Engine);
  v11 = rabit::engine::GetEngine(v90);
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 64))(v11);
  v91 = a1[1];
  v88 = v12;
  v89 = *a1;
  __p = 0;
  v95 = 0;
  v96 = 0;
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = a1[6];
      v17 = a1[7] - v16;
      if (v17)
      {
        if (v17 <= v15)
LABEL_89:
          std::terminate();
        v18 = *(unsigned __int8 *)(v16 + v15);
        v19 = (unint64_t)v96;
        if (v18 == 1)
        {
          if (v14 >= v96)
          {
            v23 = (char *)__p;
            v29 = (v14 - (_BYTE *)__p) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v31 = v96 - (_BYTE *)__p;
            if ((v96 - (_BYTE *)__p) >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v30;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v96, v27);
              v23 = (char *)__p;
              v14 = v95;
            }
            else
            {
              v28 = 0;
            }
            v32 = &v28[8 * v29];
            *(_QWORD *)v32 = 0;
            v22 = v32 + 8;
            while (v14 != v23)
            {
              v34 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *((_QWORD *)v32 - 1) = v34;
              v32 -= 8;
            }
LABEL_36:
            __p = v32;
            v95 = v22;
            v96 = &v28[8 * v27];
            if (v23)
              operator delete(v23);
            goto LABEL_38;
          }
          *(_QWORD *)v14 = 0;
          v20 = v14 + 8;
          goto LABEL_11;
        }
      }
      else
      {
        v19 = (unint64_t)v96;
      }
      v21 = (_QWORD *)(v13 + 40 * v15 + 8);
      if ((unint64_t)v14 >= v19)
      {
        v23 = (char *)__p;
        v24 = (v14 - (_BYTE *)__p) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v26 = v19 - (_QWORD)__p;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v96, v27);
          v23 = (char *)__p;
          v14 = v95;
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v24];
        *(_QWORD *)v32 = *v21;
        v22 = v32 + 8;
        while (v14 != v23)
        {
          v33 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v32 - 1) = v33;
          v32 -= 8;
        }
        goto LABEL_36;
      }
      *(_QWORD *)v14 = *v21;
      v20 = v14 + 8;
LABEL_11:
      v22 = v20;
LABEL_38:
      v95 = v22;
      ++v15;
      v13 = *a2;
      v14 = v22;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  v35 = 0xF0F0F0F0F0F0F0F1 * ((v91 - v89) >> 3) + 1;
  *(_QWORD *)&v97 = 0;
  std::vector<unsigned long>::resize((uint64_t)a4, v35 * (int)v90, &v97);
  v37 = v95;
  v38 = *a4;
  if (__p != v95)
  {
    v39 = v38 + 8 * v35 * v88;
    v40 = (uint64_t *)((char *)__p + 8);
    v41 = *(_QWORD *)__p;
    *(_QWORD *)(v39 + 8) = *(_QWORD *)__p;
    if (v40 != (uint64_t *)v37)
    {
      v42 = (_QWORD *)(v39 + 16);
      do
      {
        v43 = *v40++;
        v41 += v43;
        *v42++ = v41;
      }
      while (v40 != (uint64_t *)v37);
    }
  }
  v44 = a4[1];
  v45 = rabit::engine::GetEngine(v36);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v45 + 8))(v45, v38, 8, (v44 - v38) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  if ((int)v90 <= 0)
  {
    v51 = a3[1];
  }
  else
  {
    v46 = 0;
    do
    {
      v47 = ++v46 * v35 - 1;
      if (v47 >= (a4[1] - *a4) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v48 = *(_QWORD *)(*a4 + 8 * v47);
      v50 = a3[1];
      v49 = (unint64_t)a3[2];
      if ((unint64_t)v50 >= v49)
      {
        v52 = *a3;
        v53 = (v50 - *a3) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v55 = v49 - (_QWORD)v52;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a3 + 2), v56);
          v52 = *a3;
          v50 = a3[1];
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[8 * v53];
        *(_QWORD *)v58 = v48;
        v51 = v58 + 8;
        while (v50 != v52)
        {
          v59 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *((_QWORD *)v58 - 1) = v59;
          v58 -= 8;
        }
        *a3 = v58;
        a3[1] = v51;
        a3[2] = &v57[8 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v50 = v48;
        v51 = v50 + 8;
      }
      a3[1] = v51;
    }
    while (v46 != v90);
  }
  v60 = (uint64_t *)*a3;
  if (*a3 == v51)
  {
    v92[0] = 0;
    v93 = 1;
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v97);
    v62 = a5;
    if ((_QWORD)v97)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: ", 14);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"worker_segments.size() >= 1", 27);
      v68 = *(char *)(v97 + 23);
      v69 = v68 >= 0 ? v97 : *(_QWORD *)v97;
      v70 = v68 >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v92);
      v72 = v97;
      *(_QWORD *)&v97 = 0;
      if (v72)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v97, v72);
    }
  }
  else
  {
    v61 = (char *)(v60 + 1);
    v62 = a5;
    if (v60 + 1 != (uint64_t *)v51)
    {
      v63 = *v60;
      do
      {
        v63 += *(_QWORD *)v61;
        *(_QWORD *)v61 = v63;
        v61 += 8;
      }
      while (v61 != v51);
    }
  }
  v73 = *((_QWORD *)a3[1] - 1);
  v97 = 0uLL;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((void **)v62, v73, &v97);
  v74 = *(void **)v62;
  *(_QWORD *)&v97 = (uint64_t)(*(_QWORD *)(v62 + 8) - *(_QWORD *)v62) >> 4;
  *((_QWORD *)&v97 + 1) = v74;
  v75 = xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v92, &v97, *(_QWORD *)&(*a3)[8 * v88], *(_QWORD *)&(*a3)[8 * v88 + 8] - *(_QWORD *)&(*a3)[8 * v88]);
  v77 = *a2;
  v76 = a2[1];
  if (v76 != *a2)
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = v92;
    do
    {
      v82 = a1[6];
      v83 = a1[7] - v82;
      if (!v83)
        goto LABEL_84;
      if (v83 <= v79)
        goto LABEL_89;
      if (*(_BYTE *)(v82 + v79) != 1)
      {
LABEL_84:
        v75 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(&v97, *(_OWORD **)(v77 + v78), (_OWORD *)(*(_QWORD *)(v77 + v78) + 16 * *(_QWORD *)(v77 + v78 + 8)), v81, v80);
        v81 = (unint64_t *)*((_QWORD *)&v97 + 1);
        v80 = v98;
        v77 = *a2;
        v76 = a2[1];
      }
      ++v79;
      v78 += 40;
    }
    while (v79 < 0xCCCCCCCCCCCCCCCDLL * ((v76 - v77) >> 3));
  }
  v85 = *(void **)v62;
  v84 = *(_QWORD *)(v62 + 8);
  v86 = rabit::engine::GetEngine((rabit::engine *)v75);
  (*(void (**)(void *, void *, uint64_t, unint64_t, float (*)(float *, float *, int), _QWORD, _QWORD))(*(_QWORD *)v86 + 8))(v86, v85, 4, ((unint64_t)(v84 - (_QWORD)v85) >> 2) & 0x3FFFFFFFFFFFFFFCLL, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
  if (__p)
  {
    v95 = (char *)__p;
    operator delete(__p);
  }
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_15WQuantileSketchIffEEE16GatherSketchInfoERKNSt3__16vectorINS0_22QuantileSketchTemplateIffNS0_9WQSummaryIffEEE16SummaryContainerENS5_9allocatorISB_EEEEPNS6_ImNSC_ImEEEESJ_PNS6_INS9_5EntryENSC_ISK_EEEE(a1, a2, a3, a4, a5);
}

void sub_220E19C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(void **a1, unint64_t a2, _OWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = (v5 - (_BYTE *)*a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[16 * a2];
  }
  else
  {
    v9 = (uint64_t)(a1 + 2);
    v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 4)
    {
      v23 = &v5[16 * (a2 - v7)];
      v24 = 16 * a2 - 16 * v7;
      do
      {
        *(_OWORD *)v5 = *a3;
        v5 += 16;
        v24 -= 16;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = v10 - v6;
      v12 = (v10 - v6) >> 3;
      if (v12 <= a2)
        v12 = a2;
      if (v11 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v9, v13);
      v16 = &v14[16 * v7];
      v17 = &v14[16 * a2];
      v18 = 16 * a2 - 16 * v7;
      v19 = v16;
      do
      {
        *(_OWORD *)v19 = *a3;
        v19 += 16;
        v18 -= 16;
      }
      while (v18);
      v20 = &v14[16 * v15];
      v22 = (char *)*a1;
      v21 = (char *)a1[1];
      if (v21 != *a1)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
          v16 -= 16;
          v21 -= 16;
        }
        while (v21 != v22);
        v21 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

unint64_t *xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(unint64_t *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 == -1)
  {
    a4 = *a2 - a3;
    if (*a2 < a3)
      goto LABEL_8;
  }
  else if (a4 + a3 > *a2)
  {
    goto LABEL_8;
  }
  v4 = a2[1];
  *result = a4;
  result[1] = v4 + 16 * a3;
  if (a4 && !v4)
LABEL_8:
    std::terminate();
  return result;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::AllReduce(uint64_t *a1, __int128 *a2, std::vector<int> *a3)
{
  rabit::engine *v4;
  void *Engine;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *ptr;
  uint64_t v16;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  rabit::engine *v49;
  _BYTE *v50;
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  float v75;
  float *v76;
  unint64_t v77;
  float v78;
  float v79;
  float *v80;
  float v81;
  float *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  std::string *v93;
  _QWORD *v94;
  _QWORD *v95;
  rabit::engine *v96;
  void *v97;
  int v98;
  void *v99;
  unint64_t i;
  uint64_t v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  float32x2_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  std::string *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  std::string *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  int v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  void *v131;
  std::string *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  void *v137;
  uint64_t v138;
  _QWORD *v139;
  void *v140;
  std::mutex *v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  _BYTE *v149;
  uint64_t v150;
  void *v151;
  _BYTE *v152;
  void *v153;
  _BYTE *v154;
  void *v155[2];
  uint64_t v156;
  _QWORD v157[2];
  unint64_t v158;
  char v159;
  float32x2_t *v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  float32x2_t *v164;
  std::exception_ptr v165[2];
  void *__p[2];
  uint64_t v167;
  void *v168;
  unint64_t v169;
  std::exception_ptr v170[2];
  __int128 v171;
  uint64_t v172;
  std::exception_ptr v173;
  std::mutex v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v173, "AllReduce");
  v4 = (rabit::engine *)xgboost::common::Monitor::Start();
  if (v174.__m_.__opaque[7] < 0)
    operator delete(v173.__ptr_);
  v158 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  Engine = rabit::engine::GetEngine(v4);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v158, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  v165[0].__ptr_ = (void *)(0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  if ((void *)v158 != v165[0].__ptr_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v173);
    if (v173.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"n_columns == sketches_.size()", 29);
      v10 = *((char *)v173.__ptr_ + 23);
      v11 = v10 >= 0 ? v173.__ptr_ : *(void **)v173.__ptr_;
      v12 = v10 >= 0 ? *((unsigned __int8 *)v173.__ptr_ + 23) : *((_QWORD *)v173.__ptr_ + 1);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Number of columns differs across workers", 40);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v165);
      ptr = v173.__ptr_;
      v173.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v173, (uint64_t)ptr);
    }
  }
  v16 = a1[6];
  v157[0] = a1[7] - v16;
  v157[1] = v16;
  begin = a3->__begin_;
  end = a3->__end_;
  LODWORD(v170[0].__ptr_) = 0;
  v19 = (char *)end - (char *)begin;
  v165[0].__ptr_ = (void *)(v19 >> 2);
  if (v19)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v173);
    if (v173.__ptr_)
    {
      v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"num_cuts.size() == 0", 20);
      v24 = *((char *)v173.__ptr_ + 23);
      v25 = v24 >= 0 ? v173.__ptr_ : *(void **)v173.__ptr_;
      v26 = v24 >= 0 ? *((unsigned __int8 *)v173.__ptr_ + 23) : *((_QWORD *)v173.__ptr_ + 1);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v165);
      v28 = v173.__ptr_;
      v173.__ptr_ = 0;
      if (v28)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v173, (uint64_t)v28);
    }
  }
  std::vector<int>::resize(a3, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  v29 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v30 = *(_QWORD *)a2;
  v31 = *((_QWORD *)a2 + 1);
  v32 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - *(_QWORD *)a2) >> 3);
  v33 = v29 - v32;
  if (v29 <= v32)
  {
    if (v29 < v32)
    {
      v43 = v30 - 0x5A5A5A5A5A5A5A58 * ((a1[1] - *a1) >> 3);
      while (v31 != v43)
      {
        v44 = *(void **)(v31 - 24);
        if (v44)
        {
          *(_QWORD *)(v31 - 16) = v44;
          operator delete(v44);
        }
        v31 -= 40;
      }
      *((_QWORD *)a2 + 1) = v43;
    }
  }
  else
  {
    v34 = *((_QWORD *)a2 + 2);
    if (0xCCCCCCCCCCCCCCCDLL * ((v34 - v31) >> 3) >= v33)
    {
      v45 = 40 * ((40 * v33 - 40) / 0x28) + 40;
      bzero(*((void **)a2 + 1), v45);
      *((_QWORD *)a2 + 1) = v31 + v45;
    }
    else
    {
      if (v29 > 0x666666666666666)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((v34 - v30) >> 3);
      if (2 * v35 > v29)
        v29 = 2 * v35;
      if (v35 >= 0x333333333333333)
        v36 = 0x666666666666666;
      else
        v36 = v29;
      *(_QWORD *)&v174.__m_.__opaque[16] = a2 + 1;
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(v36);
      v38 = &v37[40 * v32];
      v173.__ptr_ = v37;
      v174.__m_.__sig = (uint64_t)v38;
      *(_QWORD *)&v174.__m_.__opaque[8] = &v37[40 * v39];
      v40 = 40 * ((40 * v33 - 40) / 0x28) + 40;
      bzero(v38, v40);
      *(_QWORD *)v174.__m_.__opaque = &v38[v40];
      v42 = *(_QWORD *)a2;
      v41 = *((_QWORD *)a2 + 1);
      v170[0].__ptr_ = v38;
      v170[1].__ptr_ = v38;
      *(_OWORD *)v155 = *(_OWORD *)&v170[0].__ptr_;
      v165[0].__ptr_ = a2 + 1;
      v165[1].__ptr_ = v155;
      __p[0] = v170;
      LOBYTE(__p[1]) = 0;
      while (v41 != v42)
      {
        v41 -= 40;
        xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer((uint64_t)(v38 - 40), v41);
        v38 = (char *)v170[1].__ptr_ - 40;
        v170[1].__ptr_ = (char *)v170[1].__ptr_ - 40;
      }
      LOBYTE(__p[1]) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v165);
      v46 = *((_QWORD *)a2 + 2);
      v47 = *(_OWORD *)v174.__m_.__opaque;
      v48 = *a2;
      *(_QWORD *)a2 = v38;
      *(_OWORD *)&v174.__m_.__sig = v48;
      *(__int128 *)((char *)a2 + 8) = v47;
      *(_QWORD *)&v174.__m_.__opaque[8] = v46;
      v173.__ptr_ = (void *)v48;
      std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v173);
    }
  }
  v155[0] = 0;
  v155[1] = 0;
  v156 = 0;
  v49 = (rabit::engine *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v155, (const void *)a1[9], a1[10], (a1[10] - a1[9]) >> 3);
  v50 = v155[0];
  v51 = v155[1];
  v52 = rabit::engine::GetEngine(v49);
  (*(void (**)(void *, _BYTE *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v52 + 8))(v52, v50, 8, (v51 - v50) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  v54 = *a1;
  v53 = a1[1];
  LODWORD(v165[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v170[0].__ptr_) = 1;
  if (SLODWORD(v165[0].__ptr_) < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v173);
    if (v173.__ptr_)
    {
      v123 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      dmlc::LogMessageFatal::Entry::Init(v123, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v124 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"Check failed: ", 14);
      v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"n_threads >= 1", 14);
      v127 = *((char *)v173.__ptr_ + 23);
      v128 = v127 >= 0 ? v173.__ptr_ : *(void **)v173.__ptr_;
      v129 = v127 >= 0 ? *((unsigned __int8 *)v173.__ptr_ + 23) : *((_QWORD *)v173.__ptr_ + 1);
      v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v128, v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v165);
      v131 = v173.__ptr_;
      v173.__ptr_ = 0;
      if (v131)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v173, (uint64_t)v131);
    }
  }
  v143 = (uint64_t *)a2;
  v173.__ptr_ = 0;
  v174.__m_.__sig = 850045863;
  memset(v174.__m_.__opaque, 0, sizeof(v174.__m_.__opaque));
  if (v53 != v54)
  {
    v55 = 0;
    v56 = 0xF0F0F0F0F0F0F0F1 * ((v53 - v54) >> 3);
    while (1)
    {
      v57 = vcvts_n_u32_f32((float)*((int *)a1 + 24), 3uLL);
      v58 = *((_QWORD *)v155[0] + v55);
      if (v58 >= v57)
        LODWORD(v59) = v57;
      else
        v59 = *((_QWORD *)v155[0] + v55);
      if (!v58)
        goto LABEL_103;
      v60 = a1[6];
      v61 = a1[7] - v60;
      if (!v61)
        break;
      if (v61 <= v55)
LABEL_173:
        std::terminate();
      if (*(_BYTE *)(v60 + v55) != 1)
        break;
      v59 = *(_QWORD *)(a1[3] + 24 * v55 + 16);
LABEL_102:
      a3->__begin_[v55] = v59;
LABEL_103:
      if (++v55 == v56)
        goto LABEL_104;
    }
    v167 = 0;
    *(_OWORD *)&v165[0].__ptr_ = 0u;
    *(_OWORD *)__p = 0u;
    v62 = (uint64_t *)(*a1 + 136 * v55);
    if (v62[7] == v62[6])
    {
      v64 = v62[1] - *v62;
      if (!v64)
        goto LABEL_63;
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v64 >> 3);
    }
    else
    {
      v63 = 2 * v62[5];
      if (!v63)
        goto LABEL_63;
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v63);
    }
    if (__p[1] == __p[0])
      v65 = 0;
    else
      v65 = __p[0];
    v165[0].__ptr_ = v65;
LABEL_63:
    v66 = v62[3];
    v67 = 126 - 2 * __clz(v66);
    if (v66)
      v68 = v67;
    else
      v68 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(*v62, (float *)(*v62 + 8 * v66), (uint64_t)&v159, v68, 1);
    v165[1].__ptr_ = 0;
    v69 = v62[3];
    if (v69)
    {
      v70 = 0;
      v71 = 0;
      v72 = *v62;
      v73 = (char *)v165[0].__ptr_;
      v74 = *v62 + 12;
      v75 = 0.0;
      do
      {
        v76 = (float *)(v72 + 8 * v71);
        v77 = v71 + 1;
        v79 = *v76;
        v78 = v76[1];
        if (v71 + 1 < v69)
        {
          v80 = (float *)(v74 + 8 * v71);
          while (*(v80 - 1) == v79)
          {
            v81 = *v80;
            v80 += 2;
            v78 = v78 + v81;
            if (v69 == ++v77)
            {
              v77 = v69;
              break;
            }
          }
        }
        v82 = (float *)&v73[16 * v70];
        *v82 = v75;
        v75 = v75 + v78;
        ++v70;
        v82[1] = v75;
        v82[2] = v78;
        v82[3] = v79;
        v71 = v77;
      }
      while (v77 < v69);
      v165[1].__ptr_ = (void *)v70;
    }
    else
    {
      v70 = 0;
    }
    v83 = v62[6];
    v84 = v62[5];
    if (v62[7] == v83)
    {
      if (v70 <= v84)
      {
LABEL_93:
        v89 = *(_QWORD *)a2;
        v90 = (_QWORD *)(*(_QWORD *)a2 + 40 * v55);
        v91 = v90 + 2;
        if ((int)v59 > (unint64_t)((uint64_t)(v90[3] - v90[2]) >> 4))
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v91, (int)v59);
          if (v90[3] == *v91)
            v92 = 0;
          else
            v92 = *v91;
          *v90 = v92;
          v89 = *(_QWORD *)a2;
        }
        if (!*(_QWORD *)(v89 + 40 * v55))
        {
          v93 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v170);
          dmlc::LogMessageFatal::Entry::Init(v93, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v94 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v170);
          v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Check failed: reduced[i].data", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v170);
          v89 = *(_QWORD *)a2;
        }
        xgboost::common::WQSummary<float,float>::SetPrune(v89 + 40 * v55, (uint64_t)v165, (int)v59);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_102;
      }
      if (v84 > (v62[15] - v62[14]) >> 4)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v62 + 14), v62[5]);
        if (v62[15] == v62[14])
          v88 = 0;
        else
          v88 = v62[14];
        v62[12] = v88;
        v84 = v62[5];
      }
      v85 = (uint64_t)(v62 + 12);
      xgboost::common::WQSummary<float,float>::SetPrune((uint64_t)(v62 + 12), (uint64_t)v165, v84);
    }
    else
    {
      xgboost::common::WQSummary<float,float>::SetPrune(v83, (uint64_t)v165, v84);
      v85 = v62[6];
      if ((unint64_t)(v62[7] - v85) >= 0x11)
      {
        v86 = 24;
        v87 = 1;
        do
        {
          if (*(_QWORD *)(v85 + v86))
          {
            if (*(_QWORD *)(v85 + 8))
            {
              xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)v165, (float32x2_t **)v85, (float32x2_t **)(v85 + v86 - 8));
              xgboost::common::WQSummary<float,float>::SetPrune(v62[6], (uint64_t)v165, v62[5]);
            }
            else
            {
              xgboost::common::WQSummary<float,float>::CopyFrom(v85, v85 + v86 - 8);
            }
          }
          ++v87;
          v85 = v62[6];
          v86 += 16;
        }
        while (v87 < (v62[7] - v85) >> 4);
      }
    }
    xgboost::common::WQSummary<float,float>::CopyFrom((uint64_t)v165, v85);
    goto LABEL_93;
  }
LABEL_104:
  dmlc::OMPException::Rethrow(&v173);
  std::mutex::~mutex(&v174);
  std::exception_ptr::~exception_ptr(&v173);
  v97 = rabit::engine::GetEngine(v96);
  v98 = (*(uint64_t (**)(void *))(*(_QWORD *)v97 + 72))(v97);
  if (v98 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v173, "AllReduce");
    xgboost::common::Monitor::Stop();
    if ((v174.__m_.__opaque[7] & 0x80000000) == 0)
      goto LABEL_152;
    v99 = v173.__ptr_;
    goto LABEL_151;
  }
  v173.__ptr_ = 0;
  std::vector<unsigned long>::vector(&v153, 1uLL, &v173);
  v173.__ptr_ = 0;
  std::vector<unsigned long>::vector(&v151, v98 * v158 + v98, &v173);
  v148 = 0;
  v149 = 0;
  v150 = 0;
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::GatherSketchInfo(a1, (uint64_t *)a2, (char **)&v153, (uint64_t *)&v151, (uint64_t)&v148);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::vector(&v146, v158);
  v141 = (std::mutex *)v158;
  LODWORD(v165[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v163) = 1;
  if (SLODWORD(v165[0].__ptr_) < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v173);
    if (v173.__ptr_)
    {
      v132 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      dmlc::LogMessageFatal::Entry::Init(v132, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v133 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v165);
      v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Check failed: ", 14);
      v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"n_threads >= 1", 14);
      v136 = *((char *)v173.__ptr_ + 23);
      v137 = v136 >= 0 ? v173.__ptr_ : *(void **)v173.__ptr_;
      v138 = v136 >= 0 ? *((unsigned __int8 *)v173.__ptr_ + 23) : *((_QWORD *)v173.__ptr_ + 1);
      v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v137, v138);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v165);
      v140 = v173.__ptr_;
      v173.__ptr_ = 0;
      if (v140)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v173, (uint64_t)v140);
    }
  }
  v173.__ptr_ = 0;
  v174.__m_.__sig = 850045863;
  memset(v174.__m_.__opaque, 0, sizeof(v174.__m_.__opaque));
  if (v141)
  {
    for (i = 0; (std::mutex *)i != v141; ++i)
    {
      v165[0].__ptr_ = (void *)((v149 - (_BYTE *)v148) >> 4);
      v165[1].__ptr_ = v148;
      __p[0] = (void *)((v154 - (_BYTE *)v153) >> 3);
      __p[1] = v153;
      v167 = (v152 - (_BYTE *)v151) >> 3;
      v168 = v151;
      v169 = v158;
      v101 = a1[6];
      v102 = a1[7] - v101;
      if (!v102)
        goto LABEL_113;
      if (v102 <= i)
        goto LABEL_173;
      if (*(_BYTE *)(v101 + i) != 1)
      {
LABEL_113:
        v142 = a3->__begin_[i];
        if (v98 >= 1)
        {
          v103 = 0;
          v104 = v142 & 0xFFFFFFFFFFFFFFFLL;
          while (1)
          {
            v105 = v164;
            if (!v164)
            {
              v113 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v162);
              dmlc::LogMessageFatal::Entry::Init(v113, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
              v114 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v162);
              v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Check failed: worker_feature.data()", 35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v162);
            }
            v106 = v163;
            v160 = v105;
            v161 = v163;
            if (0xCCCCCCCCCCCCCCCDLL * ((v147 - v146) >> 3) <= i)
              break;
            v107 = v146 + 40 * i;
            v108 = (uint64_t *)(v107 + 16);
            v109 = (_QWORD *)(v107 + 24);
            if (v104 > (uint64_t)(*(_QWORD *)(v107 + 24) - *(_QWORD *)(v107 + 16)) >> 4)
            {
              std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v108, v104);
              if (*v109 == *v108)
                v110 = 0;
              else
                v110 = *v108;
              *(_QWORD *)v107 = v110;
              v106 = v161;
            }
            v172 = 0;
            *(_OWORD *)&v170[0].__ptr_ = 0u;
            v171 = 0u;
            v111 = *(_QWORD *)(v107 + 8) + v106;
            if (v111)
            {
              std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)&v171, v111);
              if (*((_QWORD *)&v171 + 1) == (_QWORD)v171)
                v112 = 0;
              else
                v112 = (void *)v171;
              v170[0].__ptr_ = v112;
            }
            xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)v170, (float32x2_t **)v107, &v160);
            xgboost::common::WQSummary<float,float>::SetPrune(v107, (uint64_t)v170, (*v109 - *v108) >> 4);
            if ((_QWORD)v171)
            {
              *((_QWORD *)&v171 + 1) = v171;
              operator delete((void *)v171);
            }
            if (v98 == ++v103)
              goto LABEL_131;
          }
LABEL_142:
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
LABEL_131:
        v116 = *v143;
        v117 = 0xCCCCCCCCCCCCCCCDLL * ((v143[1] - *v143) >> 3);
        if (v117 <= i)
          goto LABEL_142;
        v118 = v116 + 40 * i;
        v120 = *(_QWORD *)(v118 + 16);
        v119 = (uint64_t *)(v118 + 16);
        if (v142 > (v119[1] - v120) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v119, v142);
          if (v119[1] == *v119)
            v121 = 0;
          else
            v121 = *v119;
          *(_QWORD *)(v116 + 40 * i) = v121;
          v116 = *v143;
          v117 = 0xCCCCCCCCCCCCCCCDLL * ((v143[1] - *v143) >> 3);
        }
        if (v117 <= i || 0xCCCCCCCCCCCCCCCDLL * ((v147 - v146) >> 3) <= i)
          goto LABEL_142;
        xgboost::common::WQSummary<float,float>::SetPrune(v116 + 40 * i, v146 + 40 * i, v142);
      }
    }
  }
  dmlc::OMPException::Rethrow(&v173);
  std::mutex::~mutex(&v174);
  std::exception_ptr::~exception_ptr(&v173);
  std::string::basic_string[abi:ne180100]<0>(v122, "AllReduce");
  xgboost::common::Monitor::Stop();
  if (v174.__m_.__opaque[7] < 0)
    operator delete(v173.__ptr_);
  v173.__ptr_ = &v146;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  v99 = v153;
  if (v153)
  {
    v154 = v153;
LABEL_151:
    operator delete(v99);
  }
LABEL_152:
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_15WQuantileSketchIffEEE9AllReduceEPNSt3__16vectorINS0_22QuantileSketchTemplateIffNS0_9WQSummaryIffEEE16SummaryContainerENS5_9allocatorISB_EEEEPNS6_IiNSC_IiEEEE(a1, a2, a3);
}

void sub_220E1AE00()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220E1AEDCLL);
}

void sub_220E1AE0C()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220E1AEDCLL);
}

void sub_220E1AE20()
{
  JUMPOUT(0x220E1AE78);
}

void sub_220E1AE8C()
{
  JUMPOUT(0x220E1AEECLL);
}

void sub_220E1AE98()
{
  JUMPOUT(0x220E1AF0CLL);
}

void sub_220E1AEA4()
{
  uint64_t v0;
  void *v1;

  if ((*(char *)(v0 - 145) & 0x80000000) == 0)
  {
    if (v1)
      operator delete(v1);
    JUMPOUT(0x220E1B00CLL);
  }
  JUMPOUT(0x220E1AF18);
}

void sub_220E1AEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a41);
  JUMPOUT(0x220E1AEC8);
}

void sub_220E1AF24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168, v1);
  if (v2)
    operator delete(v2);
  JUMPOUT(0x220E1B00CLL);
}

void sub_220E1AF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if ((*(char *)(v1 - 145) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  JUMPOUT(0x220E1AFE8);
}

void sub_220E1AF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a41);
  JUMPOUT(0x220E1AF6CLL);
}

void sub_220E1AF88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 168) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  _Unwind_Resume(a1);
}

void sub_220E1AFC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220E1AFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a41);
  std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(v41 - 168);
  _Unwind_Resume(a1);
}

void xgboost::common::`anonymous namespace'::AllreduceCategories(rabit::engine *a1, int a2, _QWORD *a3)
{
  void *Engine;
  rabit::engine *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  std::string *Entry;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *ptr;
  rabit::engine *v29;
  _BYTE *v30;
  _BYTE *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  rabit::engine *v39;
  _BYTE *v40;
  _BYTE *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  rabit::engine *v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  _BYTE *v58;
  _BYTE *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  unint64_t v81;
  int v82;
  uint64_t v84;
  _QWORD v85[2];
  unint64_t v86;
  _QWORD *v87;
  _QWORD v88[2];
  unint64_t v89;
  uint64_t v90;
  void *__p;
  _BYTE *v92;
  void *v93;
  _BYTE *v94;
  void *v95;
  _BYTE *v96;
  unint64_t v97;
  void *v98;
  _BYTE *v99;
  void *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106[2];
  std::exception_ptr v107;
  std::mutex v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  Engine = rabit::engine::GetEngine(a1);
  v6 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)Engine + 72))(Engine);
  v7 = rabit::engine::GetEngine(v6);
  v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 64))(v7);
  v82 = (int)v6;
  if ((_DWORD)v6 != 1)
  {
    v9 = v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) + 1;
    v107.__ptr_ = 0;
    std::vector<unsigned long>::vector(&v100, v10, &v107);
    v11 = (uint64_t *)v100;
    if (a3[1] != *a3)
    {
      v12 = (a3[1] - *a3) / 24;
      if (v12 <= 1)
        v12 = 1;
      v13 = (char *)v100 + 8;
      v14 = (uint64_t *)(*a3 + 16);
      do
      {
        v15 = *v14;
        v14 += 3;
        *v13++ = v15;
        --v12;
      }
      while (v12);
    }
    v16 = v101;
    v18 = v11 + 1;
    v17 = *v11;
    v19 = v11 == v101 || v18 == v101;
    if (!v19)
    {
      do
      {
        v17 += *v18;
        *v18++ = v17;
      }
      while (v18 != v16);
      v17 = *v11;
    }
    LODWORD(v85[0]) = 0;
    if (v17)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v107);
      if (v107.__ptr_)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v85);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v85);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"feature_ptr.front() == 0", 24);
        v24 = *((char *)v107.__ptr_ + 23);
        v25 = v24 >= 0 ? v107.__ptr_ : *(void **)v107.__ptr_;
        v26 = v24 >= 0 ? *((unsigned __int8 *)v107.__ptr_ + 23) : *((_QWORD *)v107.__ptr_ + 1);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v85);
        ptr = v107.__ptr_;
        v107.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v107, (uint64_t)ptr);
      }
    }
    v107.__ptr_ = 0;
    v29 = (rabit::engine *)std::vector<unsigned long>::vector(&v98, (((char *)v101 - (_BYTE *)v100) >> 3) * (int)v6, &v107);
    if (v101 != v100)
      v29 = (rabit::engine *)memmove((char *)v98 + 8 * ((unint64_t)((char *)v101 - (_BYTE *)v100) >> 3) * (int)v9, v100, (char *)v101 - (_BYTE *)v100);
    v31 = v98;
    v30 = v99;
    v32 = rabit::engine::GetEngine(v29);
    (*(void (**)(void *, _BYTE *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v32 + 8))(v32, v31, 8, (v30 - v31) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
    v97 = 0;
    v97 = *(v101 - 1);
    LODWORD(v107.__ptr_) = 0;
    std::vector<float>::vector(&v95, v97, &v107);
    v33 = (_QWORD *)*a3;
    v34 = (_QWORD *)a3[1];
    if ((_QWORD *)*a3 != v34)
    {
      v35 = v95;
      do
      {
        v36 = (_QWORD *)*v33;
        if ((_QWORD *)*v33 != v33 + 1)
        {
          do
          {
            *v35 = *((_DWORD *)v36 + 7);
            v37 = (_QWORD *)v36[1];
            if (v37)
            {
              do
              {
                v38 = v37;
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                v38 = (_QWORD *)v36[2];
                v19 = *v38 == (_QWORD)v36;
                v36 = v38;
              }
              while (!v19);
            }
            ++v35;
            v36 = v38;
          }
          while (v38 != v33 + 1);
        }
        v33 += 3;
      }
      while (v33 != v34);
    }
    v107.__ptr_ = 0;
    v39 = (rabit::engine *)std::vector<unsigned long>::vector(&v93, v82 + 1, &v107);
    v40 = v93;
    *((_QWORD *)v93 + (int)v9 + 1) = v97;
    v41 = v94;
    v42 = rabit::engine::GetEngine(v39);
    (*(void (**)(void *, _BYTE *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v42 + 8))(v42, v40, 8, (v41 - v40) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
    v43 = v94;
    if (v93 != v94)
    {
      v44 = (char *)v93 + 8;
      if ((char *)v93 + 8 != v94)
      {
        v45 = *(_QWORD *)v93;
        do
        {
          v45 += *v44;
          *v44++ = v45;
        }
        while (v44 != v43);
      }
    }
    v46 = *(v43 - 1);
    LODWORD(v107.__ptr_) = 0;
    v47 = (rabit::engine *)std::vector<float>::vector(&__p, v46, &v107);
    v48 = *((_QWORD *)v93 + (int)v9);
    v90 = 0;
    v90 = *((_QWORD *)v93 + (int)v9 + 1) - v48;
    if (v90 != v97)
    {
      v47 = (rabit::engine *)dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v107);
      if (v107.__ptr_)
      {
        v49 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v85);
        dmlc::LogMessageFatal::Entry::Init(v49, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v85);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: ", 14);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"rank_size == total", 18);
        v53 = *((char *)v107.__ptr_ + 23);
        v54 = v53 >= 0 ? v107.__ptr_ : *(void **)v107.__ptr_;
        v55 = v53 >= 0 ? *((unsigned __int8 *)v107.__ptr_ + 23) : *((_QWORD *)v107.__ptr_ + 1);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v85);
        v57 = v107.__ptr_;
        v107.__ptr_ = 0;
        if (v57)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v107, (uint64_t)v57);
      }
    }
    if (v96 != v95)
      v47 = (rabit::engine *)memmove((char *)__p + 4 * v48, v95, v96 - (_BYTE *)v95);
    v59 = __p;
    v58 = v92;
    v60 = rabit::engine::GetEngine(v47);
    (*(void (**)(void *, _BYTE *, uint64_t, int64_t, float (*)(float *, float *, int), _QWORD, _QWORD))(*(_QWORD *)v60 + 8))(v60, v59, 4, (v58 - v59) >> 2, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
    v85[0] = (v92 - (_BYTE *)__p) >> 2;
    v85[1] = __p;
    v86 = (v94 - (_BYTE *)v93) >> 3;
    v87 = v93;
    v88[0] = (v99 - (_BYTE *)v98) >> 3;
    v88[1] = v98;
    v62 = *a3;
    v61 = a3[1];
    v81 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *a3) >> 3);
    v89 = v81;
    LODWORD(v106[0]) = a2;
    LODWORD(v104) = 1;
    if (a2 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v107);
      if (v107.__ptr_)
      {
        v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v106);
        dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
        v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v106);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: ", 14);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"n_threads >= 1", 14);
        v76 = *((char *)v107.__ptr_ + 23);
        v77 = v76 >= 0 ? v107.__ptr_ : *(void **)v107.__ptr_;
        v78 = v76 >= 0 ? *((unsigned __int8 *)v107.__ptr_ + 23) : *((_QWORD *)v107.__ptr_ + 1);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v77, v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v106);
        v80 = v107.__ptr_;
        v107.__ptr_ = 0;
        if (v80)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v107, (uint64_t)v80);
      }
    }
    v107.__ptr_ = 0;
    v108.__m_.__sig = 850045863;
    memset(v108.__m_.__opaque, 0, sizeof(v108.__m_.__opaque));
    if (v61 != v62)
    {
      v63 = 0;
      v84 = v9;
      v64 = v9 + 1;
      do
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)a1 <= (unint64_t)v63)
            goto LABEL_83;
          if (*(_BYTE *)(*((_QWORD *)a1 + 1) + v63) == 1 && v82 >= 1)
          {
            v66 = 0;
            v67 = (v63 + 1);
            while (1)
            {
              v68 = v64;
              if (v66 != v84)
              {
                v68 = v66 + 1;
                if (v86 <= v66 + 1)
                  goto LABEL_83;
                xgboost::common::Span<float,18446744073709551615ul>::subspan(v85, v87[v66], v87[v68] - v87[v66], v106);
                xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v104, v88, (v89 + 1) * v66, v89 + 1);
                if (v104 <= v63 || v104 <= v67)
                  goto LABEL_83;
                xgboost::common::Span<float,18446744073709551615ul>::subspan(v106, *(_QWORD *)(v105 + 8 * v63), *(_QWORD *)(v105 + 8 * v67) - *(_QWORD *)(v105 + 8 * v63), &v102);
                v69 = v102;
                if (v102)
                  break;
              }
LABEL_70:
              v66 = v68;
              if (v68 >= v82)
                goto LABEL_71;
            }
            v70 = 0;
            v71 = v102;
            while (v70 < v71)
            {
              std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*a3 + 24 * v63), *(float *)(v103 + 4 * v70), *(float *)(v103 + 4 * v70));
              v71 = v102;
              if (v70 == v102)
                break;
              if (v69 == ++v70)
                goto LABEL_70;
            }
LABEL_83:
            std::terminate();
          }
        }
LABEL_71:
        ++v63;
      }
      while (v63 != v81);
    }
    dmlc::OMPException::Rethrow(&v107);
    std::mutex::~mutex(&v108);
    std::exception_ptr::~exception_ptr(&v107);
    if (__p)
    {
      v92 = __p;
      operator delete(__p);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    if (v100)
    {
      v101 = (uint64_t *)v100;
      operator delete(v100);
    }
  }
}

void sub_220E1B840()
{
  uint64_t v0;
  std::mutex *v1;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220E1B928);
}

void sub_220E1B880()
{
  JUMPOUT(0x220E1B978);
}

void sub_220E1B8A8()
{
  JUMPOUT(0x220E1B988);
}

void sub_220E1B8B0()
{
  uint64_t v0;
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  v1 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168);
  JUMPOUT(0x220E1B928);
}

void sub_220E1B8C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168, v1);
  JUMPOUT(0x220E1B978);
}

void sub_220E1B8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E1B8D8);
}

void sub_220E1B8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E1B8FCLL);
}

void sub_220E1B914(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E1B988);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::PushRowPage(uint64_t a1, uint64_t **a2, unsigned int *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  float *v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;
  char v67;
  std::vector<unsigned int> v68;
  unint64_t v69[2];
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned int v73;
  void *__p;
  std::mutex v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushRowPage");
  xgboost::common::Monitor::Start();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
  v7 = *(_QWORD *)a3;
  v8 = *((_QWORD *)a3 + 1);
  v73 = v8;
  v62 = *((_QWORD *)a3 + 2);
  LODWORD(v70) = *(_DWORD *)(a1 + 104);
  LODWORD(v68.__begin_) = 1;
  if ((int)v70 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
    if (__p)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"n_threads_ >= 1", 15);
      v23 = *((char *)__p + 23);
      v24 = v23 >= 0 ? __p : *(void **)__p;
      v25 = v23 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v27 = __p;
      __p = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v27);
    }
  }
  v70 = (void *)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  if (v70 != (void *)v73)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&__p);
    if (__p)
    {
      v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"sketches_.size() == n_columns", 29);
      v13 = *((char *)__p + 23);
      v14 = v13 >= 0 ? __p : *(void **)__p;
      v15 = v13 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v17 = __p;
      __p = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v17);
    }
  }
  if (*a4)
  {
    v18 = a4[1];
    v69[0] = *a4;
    v69[1] = v18;
  }
  else if (*(_BYTE *)(a1 + 100))
  {
  }
  else
  {
    v28 = *((_QWORD *)a3 + 9);
    v71 = 0;
    v72 = 0;
    v70 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v70, *(const void **)v28, *(_QWORD *)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 2);
  }
  if (v70 != v71)
  {
    v68.__begin_ = (std::vector<unsigned int>::pointer)((v71 - (_BYTE *)v70) >> 2);
    if (v68.__begin_ != *(std::vector<unsigned int>::pointer *)a3)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&__p);
      if (__p)
      {
        v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
        dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"weights.size() == info.num_row_", 31);
        v33 = *((char *)__p + 23);
        v34 = v33 >= 0 ? __p : *(void **)__p;
        v35 = v33 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v68);
        v37 = __p;
        __p = 0;
        if (v37)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v37);
      }
    }
  }
  v38 = (*a2)[1];
  v63 = *a2[1];
  v64 = **a2;
  v39 = a3[2];
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::LoadBalance(&v68, (uint64_t)a2, v39, *(int *)(a1 + 104));
  __p = 0;
  v75.__m_.__sig = 850045863;
  memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
  v41 = *v68.__begin_;
  v40 = v68.__begin_[1];
  if (v41 < v40 && v40 <= v39 && (unint64_t)(v38 - v64) >= 0x10)
  {
    v42 = 0;
    v43 = (v38 - v64) >> 3;
    v61 = v7 * v8;
    v58 = v43 != 0;
    v44 = v43 - 1;
    if (!v58)
      v44 = 0;
    if (v44 <= 1)
      v45 = 1;
    else
      v45 = v44;
    do
    {
      v46 = *(_QWORD *)(v64 + 8 * v42);
      v47 = *(_QWORD *)(v64 + 8 * v42 + 8);
      v48 = v47 - v46;
      if (!v63 && v47 != v46)
LABEL_81:
        std::terminate();
      if (v70 == v71)
        v49 = 1.0;
      else
        v49 = *((float *)v70 + (_QWORD)a2[2] + v42);
      if (v62 == v61)
      {
        v50 = 136 * v41;
        v51 = 24 * v41;
        v52 = v41;
        v53 = (float *)(v63 + 4 + 8 * v41 + 8 * v46);
        do
        {
          v54 = *(_QWORD *)(a1 + 48);
          v55 = *(_QWORD *)(a1 + 56) - v54;
          if (!v55)
            goto LABEL_58;
          if (v55 <= v52)
            goto LABEL_81;
          if (*(_BYTE *)(v54 + v52) == 1)
            std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(_QWORD *)(a1 + 24) + v51), *v53, *v53);
          else
LABEL_58:
            xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::Push(*(_QWORD *)a1 + v50, *v53, v49);
          ++v52;
          v53 += 2;
          v51 += 24;
          v50 += 136;
        }
        while (v40 != v52);
      }
      else if (v47 != v46)
      {
        v56 = (float *)(v63 + 4 + 8 * v46);
        do
        {
          v57 = *((unsigned int *)v56 - 1);
          v58 = v57 < v41 || v57 >= v40;
          if (!v58)
          {
            v59 = *(_QWORD *)(a1 + 48);
            v60 = *(_QWORD *)(a1 + 56) - v59;
            if (!v60)
              goto LABEL_71;
            if (v60 <= v57)
              goto LABEL_81;
            if (*(_BYTE *)(v59 + v57) == 1)
              std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(_QWORD *)(a1 + 24) + 24 * v57), *v56, *v56);
            else
LABEL_71:
              xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::Push(*(_QWORD *)a1 + 136 * v57, *v56, v49);
          }
          v56 += 2;
          --v48;
        }
        while (v48);
      }
      ++v42;
    }
    while (v42 != v45);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v66, "PushRowPage");
  xgboost::common::Monitor::Stop();
  if (v67 < 0)
    operator delete(v66);
  std::mutex::~mutex(&v75);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_15WQuantileSketchIffEEE11PushRowPageERKNS_10SparsePageERKNS_8MetaInfoENS0_4SpanIKfLm18446744073709551615EEE(a1, a2, a3, a4);
}

void sub_220E1BFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,std::exception_ptr a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::`anonymous namespace'::UnrollGroupWeights(xgboost::common::_anonymous_namespace_ *this, const xgboost::MetaInfo *a2)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v3 = (uint64_t *)*((_QWORD *)a2 + 9);
  if (*v3 == v3[1])
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v33 = v5;
    std::vector<float>::vector(this, v5);
    v6 = *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6);
    v31 = v6 >> 2;
    if ((unint64_t)v6 < 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v32);
      if (v32)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"group_ptr.size() >= 2", 21);
        v11 = *(char *)(v32 + 23);
        v12 = v11 >= 0 ? v32 : *(_QWORD *)v32;
        v13 = v11 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(_QWORD *)(v32 + 8);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
        v15 = v32;
        v32 = 0;
        if (v15)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v32, v15);
      }
    }
    if (v5 != *(_DWORD *)(*((_QWORD *)a2 + 7) - 4))
    {
      dmlc::LogCheckFormat<unsigned int,unsigned long>(&v32);
      if (v32)
      {
        v16 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        dmlc::LogMessageFatal::Entry::Init(v16, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: ", 14);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"group_ptr.back() == n_samples", 29);
        v20 = *(char *)(v32 + 23);
        v21 = v20 >= 0 ? v32 : *(_QWORD *)v32;
        v22 = v20 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(_QWORD *)(v32 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
        v24 = v32;
        v32 = 0;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v32, v24);
      }
    }
    v25 = v33;
    if (v33)
    {
      v26 = 0;
      v27 = 0;
      v28 = *v3;
      v29 = *(_QWORD *)this;
      v30 = *((_QWORD *)a2 + 6);
      do
      {
        *(_DWORD *)(v29 + 4 * v26) = *(_DWORD *)(v28 + 4 * v27);
        if (v26 == *(_DWORD *)(v30 + 4 * (v27 + 1)))
          ++v27;
        ++v26;
      }
      while (v25 != v26);
    }
  }
}

void sub_220E1C358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::`anonymous namespace'::MergeWeights(uint64_t *a1, _QWORD *a2, unint64_t *a3, int a4, int a5)
{
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *ptr;
  uint64_t *v19;
  uint64_t v20;
  std::string *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  int v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  std::string *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  unint64_t v65;
  int v66;
  std::exception_ptr v67;
  std::mutex v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v65 = *a3;
  if (v65 != *a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v67);
    if (v67.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"hessian.size() == info.num_row_", 31);
      v14 = *((char *)v67.__ptr_ + 23);
      v15 = v14 >= 0 ? v67.__ptr_ : *(void **)v67.__ptr_;
      v16 = v14 >= 0 ? *((unsigned __int8 *)v67.__ptr_ + 23) : *((_QWORD *)v67.__ptr_ + 1);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      ptr = v67.__ptr_;
      v67.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)ptr);
    }
  }
  std::vector<float>::vector(a1, *a3);
  v19 = (uint64_t *)a2[9];
  if (a4)
  {
    v20 = a2[7] - a2[6];
    v65 = v20 >> 2;
    v66 = 2;
    if ((unint64_t)v20 < 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v67);
      if (v67.__ptr_)
      {
        v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: ", 14);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"group_ptr.size() >= 2", 21);
        v25 = *((char *)v67.__ptr_ + 23);
        v26 = v25 >= 0 ? v67.__ptr_ : *(void **)v67.__ptr_;
        v27 = v25 >= 0 ? *((unsigned __int8 *)v67.__ptr_ + 23) : *((_QWORD *)v67.__ptr_ + 1);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
        v29 = v67.__ptr_;
        v67.__ptr_ = 0;
        if (v29)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)v29);
      }
    }
    v30 = *(_DWORD *)(a2[7] - 4);
    v65 = *a3;
    if (v65 != v30)
    {
      dmlc::LogCheckFormat<unsigned int,unsigned long>((uint64_t *)&v67);
      if (v67.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"group_ptr.back() == hessian.size()", 34);
        v35 = *((char *)v67.__ptr_ + 23);
        v36 = v35 >= 0 ? v67.__ptr_ : *(void **)v67.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v67.__ptr_ + 23) : *((_QWORD *)v67.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
        v39 = v67.__ptr_;
        v67.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)v39);
      }
    }
    v40 = *a3;
    if (*a3)
    {
      v41 = 0;
      v42 = 0;
      v43 = a3[1];
      v44 = *v19;
      v45 = v19[1];
      v46 = *a1;
      v47 = a2[6];
      do
      {
        if (v44 == v45)
          v48 = 1.0;
        else
          v48 = *(float *)(v44 + 4 * v42);
        *(float *)(v46 + 4 * v41) = *(float *)(v43 + 4 * v41) * v48;
        if (v41 == *(_DWORD *)(v47 + 4 * (v42 + 1)))
          ++v42;
        ++v41;
      }
      while (v40 != v41);
    }
  }
  else
  {
    v49 = *a3;
    LODWORD(v65) = a5;
    v66 = 1;
    if (a5 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v67);
      if (v67.__ptr_)
      {
        v56 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        dmlc::LogMessageFatal::Entry::Init(v56, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
        v57 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: ", 14);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"n_threads >= 1", 14);
        v60 = *((char *)v67.__ptr_ + 23);
        v61 = v60 >= 0 ? v67.__ptr_ : *(void **)v67.__ptr_;
        v62 = v60 >= 0 ? *((unsigned __int8 *)v67.__ptr_ + 23) : *((_QWORD *)v67.__ptr_ + 1);
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
        v64 = v67.__ptr_;
        v67.__ptr_ = 0;
        if (v64)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v67, (uint64_t)v64);
      }
    }
    v67.__ptr_ = 0;
    v68.__m_.__sig = 850045863;
    memset(v68.__m_.__opaque, 0, sizeof(v68.__m_.__opaque));
    if (v49)
    {
      v50 = 0;
      v51 = *a3;
      v52 = *v19;
      v53 = v19[1];
      v54 = *a1;
      do
      {
        if (v51 == v50)
          std::terminate();
        if (v52 == v53)
          v55 = 1.0;
        else
          v55 = *(float *)(v52 + 4 * v50);
        *(float *)(v54 + 4 * v50) = *(float *)(a3[1] + 4 * v50) * v55;
        ++v50;
      }
      while (v49 != v50);
    }
    dmlc::OMPException::Rethrow(&v67);
    std::mutex::~mutex(&v68);
    std::exception_ptr::~exception_ptr(&v67);
  }
}

void sub_220E1C820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::MakeCuts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  float v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  float *v37;
  uint64_t i;
  float v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  int v48;
  float *v49;
  float v50;
  uint64_t v51;
  float *v52;
  unint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  float *v61;
  int v62;
  uint64_t v63;
  std::string *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  std::string *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  std::string *Entry;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  _QWORD v104[3];
  std::vector<int> v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  int v109;
  std::exception_ptr v110;
  char v111;
  void *__p;
  std::mutex v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Start();
  if (v113.__m_.__opaque[7] < 0)
    operator delete(__p);
  v106 = 0uLL;
  v107 = 0;
  memset(&v105, 0, sizeof(v105));
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::AllReduce((uint64_t *)a1, &v106, &v105);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  LODWORD(__p) = 0;
  std::vector<float>::resize(v4, v5, &__p);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::vector(v104, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v106 + 1) - v106) >> 3));
  v6 = v106;
  v7 = *(_DWORD *)(a1 + 104);
  v108 = 1;
  v109 = v7;
  if (v7 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
    if (__p)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v96 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Check failed: ", 14);
      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"n_threads >= 1", 14);
      v99 = *((char *)__p + 23);
      v100 = v99 >= 0 ? __p : *(void **)__p;
      v101 = v99 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v100, v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v110);
      v103 = __p;
      __p = 0;
      if (v103)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v103);
    }
  }
  __p = 0;
  v113.__m_.__sig = 850045863;
  memset(v113.__m_.__opaque, 0, sizeof(v113.__m_.__opaque));
  if (*((_QWORD *)&v6 + 1) != (_QWORD)v6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56) - v10;
      if (!v11)
        goto LABEL_9;
      if (v11 <= v9)
LABEL_137:
        std::terminate();
      if (*(_BYTE *)(v10 + v9) != 1)
      {
LABEL_9:
        v12 = (uint64_t *)(v104[0] + v8);
        v13 = v105.__begin_[v9];
        if (*(_DWORD *)(a1 + 96) < v13)
          v13 = *(_DWORD *)(a1 + 96);
        v14 = v13 + 1;
        v15 = v12 + 2;
        if (v14 <= (v12[3] - v12[2]) >> 4)
        {
          v16 = *v12;
        }
        else
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v12 + 2), v14);
          if (v12[3] == *v15)
            v16 = 0;
          else
            v16 = *v15;
          *v12 = v16;
        }
        if (!v16)
        {
          v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v108);
          dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v108);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: a.data", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v108);
        }
        v17 = 0.00001;
        if (v105.__begin_[v9])
        {
          xgboost::common::WQSummary<float,float>::SetPrune((uint64_t)v12, v106 + v8, v14);
          v18 = *v12;
          if (!*v12 || !*(_QWORD *)(v106 + v8))
          {
            v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v111);
            dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
            v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v111);
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: a.data && reduced[fidx].data", 42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v111);
            v18 = *v12;
          }
          v17 = (float)(*(float *)(v18 + 12) - fabsf(*(float *)(v18 + 12))) + -0.00001;
        }
        *(float *)(**(_QWORD **)(a2 + 24) + 4 * v9) = v17;
      }
      ++v9;
      v8 += 40;
    }
    while ((*((_QWORD *)&v6 + 1) - (_QWORD)v6) / 40 != v9);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::mutex::~mutex(&v113);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  if (*((_QWORD *)&v106 + 1) == (_QWORD)v106)
  {
    v26 = -1.0;
  }
  else
  {
    v25 = 0;
    v26 = -1.0;
    do
    {
      v27 = v105.__begin_[v25];
      if (*(_DWORD *)(a1 + 96) < v27)
        v27 = *(_DWORD *)(a1 + 96);
      v28 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56) - v28;
      if (!v29)
        goto LABEL_38;
      if (v29 <= v25)
        goto LABEL_137;
      if (*(_BYTE *)(v28 + v25) == 1)
      {
        v30 = *(_QWORD *)(a1 + 24);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v30) >> 3) <= v25)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v31 = xgboost::common::AddCategories((unint64_t *)(v30 + 24 * v25), a2);
        if (v26 < v31)
          v26 = v31;
      }
      else
      {
LABEL_38:
        v32 = (_QWORD *)(v104[0] + 40 * v25);
        v33 = v32[1];
        if (v33 >= v27)
          v34 = v27;
        else
          v34 = v32[1];
        if (v34 >= 2)
        {
          v35 = *(_QWORD *)(a2 + 8);
          v36 = (_QWORD *)(v35 + 16);
          v37 = *(float **)(v35 + 8);
          for (i = 1; i != v34; ++i)
          {
            v39 = *(float *)(*v32 + 16 * i + 12);
            if (i == 1 || v39 > *(v37 - 1))
            {
              if ((unint64_t)v37 >= *v36)
              {
                v41 = *(float **)v35;
                v42 = ((uint64_t)v37 - *(_QWORD *)v35) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v44 = *v36 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v45);
                  v41 = *(float **)v35;
                  v37 = *(float **)(v35 + 8);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (float *)&v46[4 * v42];
                *v47 = v39;
                v40 = v47 + 1;
                while (v37 != v41)
                {
                  v48 = *((_DWORD *)v37-- - 1);
                  *((_DWORD *)v47-- - 1) = v48;
                }
                *(_QWORD *)v35 = v47;
                *(_QWORD *)(v35 + 8) = v40;
                *(_QWORD *)(v35 + 16) = &v46[4 * v45];
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *v37 = v39;
                v40 = v37 + 1;
              }
              *(_QWORD *)(v35 + 8) = v40;
              v37 = v40;
            }
          }
          v33 = v32[1];
        }
        if (v33)
          v49 = (float *)(*v32 + 16 * v33 - 4);
        else
          v49 = (float *)(**(_QWORD **)(a2 + 24) + 4 * v25);
        v50 = *v49 + (float)(fabsf(*v49) + 0.00001);
        v51 = *(_QWORD *)(a2 + 8);
        v52 = *(float **)(v51 + 8);
        v53 = *(_QWORD *)(v51 + 16);
        if ((unint64_t)v52 >= v53)
        {
          v55 = *(float **)v51;
          v56 = ((uint64_t)v52 - *(_QWORD *)v51) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v58 = v53 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v51 + 16, v59);
            v55 = *(float **)v51;
            v52 = *(float **)(v51 + 8);
          }
          else
          {
            v60 = 0;
          }
          v61 = (float *)&v60[4 * v56];
          *v61 = v50;
          v54 = v61 + 1;
          while (v52 != v55)
          {
            v62 = *((_DWORD *)v52-- - 1);
            *((_DWORD *)v61-- - 1) = v62;
          }
          *(_QWORD *)v51 = v61;
          *(_QWORD *)(v51 + 8) = v54;
          *(_QWORD *)(v51 + 16) = &v60[4 * v59];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *v52 = v50;
          v54 = v52 + 1;
        }
        *(_QWORD *)(v51 + 8) = v54;
      }
      v63 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8);
      v110.__ptr_ = (void *)(v63 >> 2);
      v109 = -1;
      if ((unint64_t)v63 > 0x3FFFFFFFCLL)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&__p);
        if (__p)
        {
          v64 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
          dmlc::LogMessageFatal::Entry::Init(v64, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: ", 14);
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"cuts->cut_values_.HostVector().size() <= std::numeric_limits<uint32_t>::max()", 77);
          v68 = *((char *)__p + 23);
          v69 = v68 >= 0 ? __p : *(void **)__p;
          v70 = v68 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v110);
          v72 = __p;
          __p = 0;
          if (v72)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v72);
        }
      }
      v73 = *(_QWORD *)(a2 + 16);
      LODWORD(v110.__ptr_) = (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 2;
      if (*(_DWORD *)(*(_QWORD *)(v73 + 8) - 4) >= LODWORD(v110.__ptr_))
      {
        dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)&__p);
        if (__p)
        {
          v74 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
          dmlc::LogMessageFatal::Entry::Init(v74, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v75 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
          v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: ", 14);
          v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"cut_size > cuts->cut_ptrs_.HostVector().back()", 46);
          v78 = *((char *)__p + 23);
          v79 = v78 >= 0 ? __p : *(void **)__p;
          v80 = v78 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v79, v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v109);
          v82 = __p;
          __p = 0;
          if (v82)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v82);
        }
      }
      v83 = *(_QWORD *)(a2 + 16);
      v84 = *(_DWORD **)(v83 + 8);
      v85 = *(_QWORD *)(v83 + 16);
      if ((unint64_t)v84 >= v85)
      {
        v87 = *(_DWORD **)v83;
        v88 = ((uint64_t)v84 - *(_QWORD *)v83) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v90 = v85 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v83 + 16, v91);
          v87 = *(_DWORD **)v83;
          v84 = *(_DWORD **)(v83 + 8);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(_DWORD *)v93 = v110.__ptr_;
        v86 = v93 + 4;
        while (v84 != v87)
        {
          v94 = *--v84;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(_QWORD *)v83 = v93;
        *(_QWORD *)(v83 + 8) = v86;
        *(_QWORD *)(v83 + 16) = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v84 = v110.__ptr_;
        v86 = v84 + 1;
      }
      *(_QWORD *)(v83 + 8) = v86;
      ++v25;
    }
    while (v25 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v106 + 1) - v106) >> 3));
  }
  *(_BYTE *)a2 = *(_BYTE *)(a1 + 108);
  *(float *)(a2 + 4) = v26;
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Stop();
  if (v113.__m_.__opaque[7] < 0)
    operator delete(__p);
  __p = v104;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v105.__begin_)
  {
    v105.__end_ = v105.__begin_;
    operator delete(v105.__begin_);
  }
  __p = &v106;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_15WQuantileSketchIffEEE8MakeCutsEPNS0_13HistogramCutsE(a1, a2);
}

void sub_220E1D304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex *v27;
  uint64_t v29;
  void *v30[3];
  uint64_t v31;
  uint64_t *v32;
  std::exception_ptr v33;

  std::mutex::~mutex(v27);
  std::exception_ptr::~exception_ptr(&v33);
  v32 = &v29;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  v30[0] = &v31;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void sub_220E1D370()
{
  JUMPOUT(0x220E1D438);
}

void sub_220E1D380(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  JUMPOUT(0x220E1D458);
}

void sub_220E1D39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v24;
  void *v25[3];
  uint64_t v26;
  uint64_t *v27;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  v23 = a22;
  a22 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a22, v23);
  v27 = &v24;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v25[0] = &v26;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void sub_220E1D3D4()
{
  JUMPOUT(0x220E1D3FCLL);
}

void sub_220E1D3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  v23 = a23;
  a23 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100](&a23);
  JUMPOUT(0x220E1D428);
}

void sub_220E1D3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E1D3FCLL);
}

uint64_t sub_220E1D414(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  return sub_220E1D418();
}

void sub_220E1D418()
{
  JUMPOUT(0x220E1D458);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

float xgboost::common::AddCategories(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  float *v6;
  float v7;
  unint64_t *v9;
  unint64_t *v10;
  BOOL v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *Entry;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  float *v32;
  float v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  uint64_t v44;
  _QWORD v45[11];
  char v46;
  uint64_t v47;

  v5 = a1 + 1;
  v4 = *a1;
  if ((unint64_t *)*a1 != a1 + 1)
  {
    v6 = (float *)*a1;
    while (1)
    {
      v7 = v6[7];
      if (v7 < 0.0 || v7 >= 16777000.0)
        break;
      v9 = (unint64_t *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (unint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unint64_t *)*((_QWORD *)v6 + 2);
          v11 = *v10 == (_QWORD)v6;
          v6 = (float *)v10;
        }
        while (!v11);
      }
      v6 = (float *)v10;
      if (v10 == v5)
        goto LABEL_14;
    }
    xgboost::common::InvalidCategory((xgboost::common *)a1);
    v4 = *a1;
  }
LABEL_14:
  if ((unint64_t *)v4 == v5)
  {
    v4 = (unint64_t)v5;
  }
  else
  {
    v12 = (float *)v4;
    while (1)
    {
      v13 = (float *)*((_QWORD *)v12 + 1);
      v14 = v12;
      if (v13)
      {
        do
        {
          v12 = v13;
          v13 = *(float **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v12 = (float *)*((_QWORD *)v14 + 2);
          v11 = *(_QWORD *)v12 == (_QWORD)v14;
          v14 = v12;
        }
        while (!v11);
      }
      if (v12 == (float *)v5)
        break;
      if (*(float *)(v4 + 28) < v12[7])
        v4 = (unint64_t)v12;
    }
  }
  v15 = *(_QWORD *)(a2 + 8);
  v16 = *(float *)(v4 + 28);
  if ((float)(v16 + 1.0) < (float)a1[2])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" (", 2);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vs. ", 5);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") ", 2);
    v19 = operator new();
    std::stringbuf::str();
    v44 = v19;
    v45[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v45 + *(_QWORD *)(v45[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v45[1] = MEMORY[0x24BEDB848] + 16;
    if (v46 < 0)
      operator delete((void *)v45[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x227666FE4](&v47);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v45);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/categorical.h");
    v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v45);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"max_cat + 1 >= n_categories", 27);
    v24 = *(char *)(v44 + 23);
    if (v24 >= 0)
      v25 = v44;
    else
      v25 = *(_QWORD *)v44;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(v44 + 23);
    else
      v26 = *(_QWORD *)(v44 + 8);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Maximum cateogry should not be lesser than the total number of categories.", 74);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v45);
    v29 = v44;
    v44 = 0;
    if (v29)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, v29);
  }
  if (((int)v16 & 0x80000000) == 0)
  {
    v30 = 0;
    v31 = (_QWORD *)(v15 + 16);
    v32 = *(float **)(v15 + 8);
    do
    {
      v33 = (float)v30;
      if ((unint64_t)v32 >= *v31)
      {
        v35 = *(float **)v15;
        v36 = ((uint64_t)v32 - *(_QWORD *)v15) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v38 = *v31 - (_QWORD)v35;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v15 + 16, v39);
          v35 = *(float **)v15;
          v32 = *(float **)(v15 + 8);
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v34 = v41 + 1;
        while (v32 != v35)
        {
          v42 = *((_DWORD *)v32-- - 1);
          *((_DWORD *)v41-- - 1) = v42;
        }
        *(_QWORD *)v15 = v41;
        *(_QWORD *)(v15 + 8) = v34;
        *(_QWORD *)(v15 + 16) = &v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v32 = v33;
        v34 = v32 + 1;
      }
      *(_QWORD *)(v15 + 8) = v34;
      v32 = v34;
      v11 = v30++ == (int)v16;
    }
    while (!v11);
  }
  return v16;
}

void sub_220E1D818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SketchContainerImpl(uint64_t a1, uint64_t a2, int a3, unint64_t *a4, char a5, int a6)
{
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  std::string *Entry;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  std::string __str;
  int v41;
  uint64_t v42;

  v11 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>((_QWORD *)(a1 + 48), a4, 0, a4, *a4);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 100) = a5;
  *(_DWORD *)(a1 + 104) = a6;
  *(_BYTE *)(a1 + 108) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(a1 + 112));
  std::string::basic_string[abi:ne180100]<0>(&__str, "SketchContainerImpl");
  std::string::operator=((std::string *)(a1 + 112), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v41 = 0;
  v14 = v12 - v13;
  v39 = v14 >> 3;
  if (!v14)
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v42);
    if (v42)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"columns_size_.size() != 0", 25);
      v24 = *(char *)(v42 + 23);
      v25 = v24 >= 0 ? v42 : *(_QWORD *)v42;
      v26 = v24 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v28 = v42;
      v42 = 0;
      if (v28)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v28);
    }
  }
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize((uint64_t *)a1, (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  LODWORD(v39) = *(_DWORD *)(a1 + 104);
  v41 = 1;
  if ((int)v39 < 1)
  {
    dmlc::LogCheckFormat<int,int>(&v42);
    if (v42)
    {
      v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"n_threads_ >= 1", 15);
      v33 = *(char *)(v42 + 23);
      v34 = v33 >= 0 ? v42 : *(_QWORD *)v42;
      v35 = v33 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v37 = v42;
      v42 = 0;
      if (v37)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v37);
    }
  }
  std::vector<std::set<float>>::resize(v11, (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  v16 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  if (v16 == v15)
  {
    v18 = 0;
  }
  else
  {
    v17 = v16 + 1;
    do
    {
      v18 = *(_BYTE *)(v17 - 1) == 1;
      v19 = *(_BYTE *)(v17 - 1) == 1 || v17 == v15;
      ++v17;
    }
    while (!v19);
  }
  *(_BYTE *)(a1 + 108) = v18;
  return a1;
}

{
  return __ZN7xgboost6common19SketchContainerImplINS0_16WXQuantileSketchIffEEEC2ENSt3__16vectorImNS5_9allocatorImEEEEiNS0_4SpanIKNS_11FeatureTypeELm18446744073709551615EEEbi(a1, a2, a3, a4, a5, a6);
}

void sub_220E1DB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void **v18;
  char **v19;
  void **v20;
  void *v22;
  void *v23;

  xgboost::common::Monitor::~Monitor(v19);
  v22 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v17 + 80) = v22;
    operator delete(v22);
  }
  v23 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v17 + 56) = v23;
    operator delete(v23);
  }
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v17;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

BOOL xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::UseGroup(_QWORD *a1)
{
  return a1[7] - a1[6] >= 8uLL && *a1 != (uint64_t)(*(_QWORD *)(a1[9] + 8) - *(_QWORD *)a1[9]) >> 2;
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::CalcColumnSize(uint64_t **a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  std::string *Entry;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  void *ptr;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t *v53;
  uint64_t *v54;
  std::exception_ptr v55;
  int v56;
  int v57;
  std::exception_ptr v58;
  std::mutex v59;
  uint64_t v60;

  v4 = a3;
  v60 = *MEMORY[0x24BDAC8D0];
  v7 = **a1;
  v8 = (*a1)[1];
  v9 = *a1[1];
  std::vector<std::vector<unsigned long>>::vector(&v53, a3);
  v10 = (uint64_t)v53;
  for (i = v54; (uint64_t *)v10 != i; v10 += 24)
  {
    v58.__ptr_ = 0;
    std::vector<unsigned long>::resize(v10, a2, &v58);
  }
  v12 = v8 - v7;
  v13 = (v8 - v7) >> 3;
  v14 = v13 != 0;
  v15 = v13 - 1;
  if (v14)
    v16 = v15;
  else
    v16 = 0;
  v56 = 1;
  v57 = v4;
  if (v4 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v58);
    if (v58.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: ", 14);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"n_threads >= 1", 14);
      v39 = *((char *)v58.__ptr_ + 23);
      v40 = v39 >= 0 ? v58.__ptr_ : *(void **)v58.__ptr_;
      v41 = v39 >= 0 ? *((unsigned __int8 *)v58.__ptr_ + 23) : *((_QWORD *)v58.__ptr_ + 1);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      ptr = v58.__ptr_;
      v58.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v58, (uint64_t)ptr);
    }
  }
  v58.__ptr_ = 0;
  v59.__m_.__sig = 850045863;
  memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
  if (v12 >= 0x10)
  {
    v24 = 0;
    do
    {
      if (v54 == v53)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v25 = (uint64_t *)(v7 + 8 * v24);
      v26 = *v25;
      v27 = v25[1];
      v28 = v27 - *v25;
      if (v28)
        v29 = v9 == 0;
      else
        v29 = 0;
      if (v29)
        std::terminate();
      if (v27 != v26)
      {
        v30 = (unsigned int *)(v9 + 8 * v26);
        v31 = *v53;
        v32 = (v53[1] - *v53) >> 3;
        do
        {
          v34 = *v30;
          v30 += 2;
          v33 = v34;
          if (v32 <= v34)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          ++*(_QWORD *)(v31 + 8 * v33);
          --v28;
        }
        while (v28);
      }
      ++v24;
    }
    while (v24 != v16);
  }
  dmlc::OMPException::Rethrow(&v58);
  std::mutex::~mutex(&v59);
  std::exception_ptr::~exception_ptr(&v58);
  v58.__ptr_ = 0;
  std::vector<unsigned long>::vector(a4, a2, &v58);
  v56 = 1;
  v57 = v4;
  if (v4 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v58);
    if (v58.__ptr_)
    {
      v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"n_threads >= 1", 14);
      v48 = *((char *)v58.__ptr_ + 23);
      v49 = v48 >= 0 ? v58.__ptr_ : *(void **)v58.__ptr_;
      v50 = v48 >= 0 ? *((unsigned __int8 *)v58.__ptr_ + 23) : *((_QWORD *)v58.__ptr_ + 1);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v49, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v52 = v58.__ptr_;
      v58.__ptr_ = 0;
      if (v52)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v58, (uint64_t)v52);
    }
  }
  v58.__ptr_ = 0;
  v59.__m_.__sig = 850045863;
  memset(v59.__m_.__opaque, 0, sizeof(v59.__m_.__opaque));
  if (a2)
  {
    v17 = 0;
    v18 = v53;
    v19 = v54;
    v20 = *a4;
    do
    {
      if (v18 != v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v17);
        v22 = v18;
        do
        {
          v23 = *v22;
          v22 += 3;
          v21 += *(_QWORD *)(v23 + 8 * v17);
          *(_QWORD *)(v20 + 8 * v17) = v21;
        }
        while (v22 != v19);
      }
      ++v17;
    }
    while (v17 != a2);
  }
  dmlc::OMPException::Rethrow(&v58);
  std::mutex::~mutex(&v59);
  std::exception_ptr::~exception_ptr(&v58);
  v58.__ptr_ = &v53;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_220E1E0D0()
{
  __cxa_end_catch();
  JUMPOUT(0x220E1E128);
}

void sub_220E1E0DC()
{
  __cxa_end_catch();
  JUMPOUT(0x220E1E128);
}

void sub_220E1E0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  a13 = (void **)&a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_220E1E0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v16 = a15;
  a15 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  JUMPOUT(0x220E1E1B4);
}

void sub_220E1E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;

  v16 = a15;
  a15 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  a13 = (void **)&a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_220E1E108(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::mutex *v16;
  void *v17;

  std::mutex::~mutex(v16);
  std::exception_ptr::~exception_ptr(&a15);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  JUMPOUT(0x220E1E1B4);
}

void sub_220E1E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, std::exception_ptr a15)
{
  std::mutex *v15;

  std::mutex::~mutex(v15);
  std::exception_ptr::~exception_ptr(&a15);
  a13 = &a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_220E1E13C()
{
  JUMPOUT(0x220E1E1C4);
}

void sub_220E1E144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E1E150);
}

void sub_220E1E17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E1E188);
}

void sub_220E1E1A0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E1E1C4);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::LoadBalance(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, std::vector<unsigned int> *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  std::vector<unsigned int>::value_type __x[2];
  void *__p;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v8 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 3;
  v39 = v8;
  std::vector<std::vector<unsigned long>>::vector(&v37, a3);
  v9 = v37;
  for (i = v38; v9 != i; v9 += 24)
  {
    __p = 0;
    std::vector<unsigned long>::resize(v9, a2, &__p);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::CalcColumnSize((uint64_t **)a1, (uint64_t *)&__p, a2, a3);
  __x[0] = 0;
  std::vector<unsigned int>::vector(a4, a3 + 1, __x);
  *(_QWORD *)__x = 0;
  v11 = (uint64_t *)__p;
  v12 = v36;
  if (__p == v36)
  {
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    v15 = vcvtpd_u64_f64((double)(unint64_t)v8 / (double)a3);
    do
    {
      if (v14 >= a4->__end_ - a4->__begin_)
LABEL_28:
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v16 = *v11;
      ++a4->__begin_[v14];
      *(_QWORD *)__x = v16 + v13;
      if (v16 + v13 > v39)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v33);
        if (v33)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"count <= total_entries", 22);
          v21 = *(char *)(v33 + 23);
          v22 = v21 >= 0 ? v33 : *(_QWORD *)v33;
          v23 = v21 >= 0 ? *(unsigned __int8 *)(v33 + 23) : *(_QWORD *)(v33 + 8);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
          v25 = v33;
          v33 = 0;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v25);
        }
      }
      v13 = *(_QWORD *)__x;
      if (*(_QWORD *)__x > v15)
      {
        *(_QWORD *)__x = 0;
        if (v14 + 1 >= a4->__end_ - a4->__begin_)
          goto LABEL_28;
        v13 = 0;
        a4->__begin_[v14 + 1] = a4->__begin_[v14];
        ++v14;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v26 = a4->__end_ - a4->__begin_;
  if (v14 < v26 - 1)
  {
    v27 = &a4->__begin_[v14];
    v30 = *v27;
    v28 = v27 + 1;
    v29 = v30;
    v31 = ~v14 + v26;
    do
    {
      *v28++ = v29;
      --v31;
    }
    while (v31);
  }
  if (__p)
  {
    v36 = (uint64_t *)__p;
    operator delete(__p);
  }
  __p = &v37;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_220E1E44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SearchGroupIndFromRow(uint64_t *a1, unint64_t a2)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  _DWORD *v18;
  unsigned int v19;
  char v21;
  uint64_t v22;
  unint64_t v23;

  v23 = a2;
  if (*(unsigned int *)(a1[1] - 4) <= a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v22);
    if (v22)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"base_rowid < group_ptr.back()", 29);
      v7 = *(char *)(v22 + 23);
      v8 = v7 >= 0 ? v22 : *(_QWORD *)v22;
      v9 = v7 >= 0 ? *(unsigned __int8 *)(v22 + 23) : *(_QWORD *)(v22 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Row: ", 5);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is not found in any group.", 27);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
      v13 = v22;
      v22 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v22, v13);
    }
  }
  v14 = a1[1] - 4;
  if (v14 != *a1)
  {
    v15 = (v14 - *a1) >> 2;
    v14 = *a1;
    do
    {
      v16 = v15 >> 1;
      v17 = (unsigned int *)(v14 + 4 * (v15 >> 1));
      v19 = *v17;
      v18 = v17 + 1;
      v15 += ~(v15 >> 1);
      if (v23 < v19)
        v15 = v16;
      else
        v14 = (uint64_t)v18;
    }
    while (v15);
  }
  return ((unint64_t)(v14 - *a1) >> 2) - 1;
}

void sub_220E1E624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::GatherSketchInfo(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, uint64_t a5)
{
  rabit::engine *v9;
  void *Engine;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  rabit::engine *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *Entry;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  int v88;
  uint64_t v89;
  rabit::engine *v90;
  uint64_t v91;
  unint64_t v92[2];
  int v93;
  void *__p;
  char *v95;
  char *v96;
  __int128 v97;
  unint64_t v98;

  *(_QWORD *)&v97 = 0;
  std::vector<unsigned long>::resize((uint64_t)a3, 1uLL, &v97);
  Engine = rabit::engine::GetEngine(v9);
  v90 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)Engine + 72))(Engine);
  v11 = rabit::engine::GetEngine(v90);
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 64))(v11);
  v91 = a1[1];
  v88 = v12;
  v89 = *a1;
  __p = 0;
  v95 = 0;
  v96 = 0;
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = a1[6];
      v17 = a1[7] - v16;
      if (v17)
      {
        if (v17 <= v15)
LABEL_89:
          std::terminate();
        v18 = *(unsigned __int8 *)(v16 + v15);
        v19 = (unint64_t)v96;
        if (v18 == 1)
        {
          if (v14 >= v96)
          {
            v23 = (char *)__p;
            v29 = (v14 - (_BYTE *)__p) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v31 = v96 - (_BYTE *)__p;
            if ((v96 - (_BYTE *)__p) >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v30;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v96, v27);
              v23 = (char *)__p;
              v14 = v95;
            }
            else
            {
              v28 = 0;
            }
            v32 = &v28[8 * v29];
            *(_QWORD *)v32 = 0;
            v22 = v32 + 8;
            while (v14 != v23)
            {
              v34 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *((_QWORD *)v32 - 1) = v34;
              v32 -= 8;
            }
LABEL_36:
            __p = v32;
            v95 = v22;
            v96 = &v28[8 * v27];
            if (v23)
              operator delete(v23);
            goto LABEL_38;
          }
          *(_QWORD *)v14 = 0;
          v20 = v14 + 8;
          goto LABEL_11;
        }
      }
      else
      {
        v19 = (unint64_t)v96;
      }
      v21 = (_QWORD *)(v13 + 40 * v15 + 8);
      if ((unint64_t)v14 >= v19)
      {
        v23 = (char *)__p;
        v24 = (v14 - (_BYTE *)__p) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v26 = v19 - (_QWORD)__p;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v96, v27);
          v23 = (char *)__p;
          v14 = v95;
        }
        else
        {
          v28 = 0;
        }
        v32 = &v28[8 * v24];
        *(_QWORD *)v32 = *v21;
        v22 = v32 + 8;
        while (v14 != v23)
        {
          v33 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v32 - 1) = v33;
          v32 -= 8;
        }
        goto LABEL_36;
      }
      *(_QWORD *)v14 = *v21;
      v20 = v14 + 8;
LABEL_11:
      v22 = v20;
LABEL_38:
      v95 = v22;
      ++v15;
      v13 = *a2;
      v14 = v22;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  v35 = 0xF0F0F0F0F0F0F0F1 * ((v91 - v89) >> 3) + 1;
  *(_QWORD *)&v97 = 0;
  std::vector<unsigned long>::resize((uint64_t)a4, v35 * (int)v90, &v97);
  v37 = v95;
  v38 = *a4;
  if (__p != v95)
  {
    v39 = v38 + 8 * v35 * v88;
    v40 = (uint64_t *)((char *)__p + 8);
    v41 = *(_QWORD *)__p;
    *(_QWORD *)(v39 + 8) = *(_QWORD *)__p;
    if (v40 != (uint64_t *)v37)
    {
      v42 = (_QWORD *)(v39 + 16);
      do
      {
        v43 = *v40++;
        v41 += v43;
        *v42++ = v41;
      }
      while (v40 != (uint64_t *)v37);
    }
  }
  v44 = a4[1];
  v45 = rabit::engine::GetEngine(v36);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v45 + 8))(v45, v38, 8, (v44 - v38) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  if ((int)v90 <= 0)
  {
    v51 = a3[1];
  }
  else
  {
    v46 = 0;
    do
    {
      v47 = ++v46 * v35 - 1;
      if (v47 >= (a4[1] - *a4) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v48 = *(_QWORD *)(*a4 + 8 * v47);
      v50 = a3[1];
      v49 = (unint64_t)a3[2];
      if ((unint64_t)v50 >= v49)
      {
        v52 = *a3;
        v53 = (v50 - *a3) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v55 = v49 - (_QWORD)v52;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a3 + 2), v56);
          v52 = *a3;
          v50 = a3[1];
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[8 * v53];
        *(_QWORD *)v58 = v48;
        v51 = v58 + 8;
        while (v50 != v52)
        {
          v59 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *((_QWORD *)v58 - 1) = v59;
          v58 -= 8;
        }
        *a3 = v58;
        a3[1] = v51;
        a3[2] = &v57[8 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v50 = v48;
        v51 = v50 + 8;
      }
      a3[1] = v51;
    }
    while (v46 != v90);
  }
  v60 = (uint64_t *)*a3;
  if (*a3 == v51)
  {
    v92[0] = 0;
    v93 = 1;
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v97);
    v62 = a5;
    if ((_QWORD)v97)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v92);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: ", 14);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"worker_segments.size() >= 1", 27);
      v68 = *(char *)(v97 + 23);
      v69 = v68 >= 0 ? v97 : *(_QWORD *)v97;
      v70 = v68 >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v92);
      v72 = v97;
      *(_QWORD *)&v97 = 0;
      if (v72)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v97, v72);
    }
  }
  else
  {
    v61 = (char *)(v60 + 1);
    v62 = a5;
    if (v60 + 1 != (uint64_t *)v51)
    {
      v63 = *v60;
      do
      {
        v63 += *(_QWORD *)v61;
        *(_QWORD *)v61 = v63;
        v61 += 8;
      }
      while (v61 != v51);
    }
  }
  v73 = *((_QWORD *)a3[1] - 1);
  v97 = 0uLL;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((void **)v62, v73, &v97);
  v74 = *(void **)v62;
  *(_QWORD *)&v97 = (uint64_t)(*(_QWORD *)(v62 + 8) - *(_QWORD *)v62) >> 4;
  *((_QWORD *)&v97 + 1) = v74;
  v75 = xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v92, &v97, *(_QWORD *)&(*a3)[8 * v88], *(_QWORD *)&(*a3)[8 * v88 + 8] - *(_QWORD *)&(*a3)[8 * v88]);
  v77 = *a2;
  v76 = a2[1];
  if (v76 != *a2)
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = v92;
    do
    {
      v82 = a1[6];
      v83 = a1[7] - v82;
      if (!v83)
        goto LABEL_84;
      if (v83 <= v79)
        goto LABEL_89;
      if (*(_BYTE *)(v82 + v79) != 1)
      {
LABEL_84:
        v75 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(&v97, *(_OWORD **)(v77 + v78), (_OWORD *)(*(_QWORD *)(v77 + v78) + 16 * *(_QWORD *)(v77 + v78 + 8)), v81, v80);
        v81 = (unint64_t *)*((_QWORD *)&v97 + 1);
        v80 = v98;
        v77 = *a2;
        v76 = a2[1];
      }
      ++v79;
      v78 += 40;
    }
    while (v79 < 0xCCCCCCCCCCCCCCCDLL * ((v76 - v77) >> 3));
  }
  v85 = *(void **)v62;
  v84 = *(_QWORD *)(v62 + 8);
  v86 = rabit::engine::GetEngine((rabit::engine *)v75);
  (*(void (**)(void *, void *, uint64_t, unint64_t, float (*)(float *, float *, int), _QWORD, _QWORD))(*(_QWORD *)v86 + 8))(v86, v85, 4, ((unint64_t)(v84 - (_QWORD)v85) >> 2) & 0x3FFFFFFFFFFFFFFCLL, rabit::op::Reducer<rabit::op::Sum,float>, 0, 0);
  if (__p)
  {
    v95 = (char *)__p;
    operator delete(__p);
  }
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_16WXQuantileSketchIffEEE16GatherSketchInfoERKNSt3__16vectorINS0_22QuantileSketchTemplateIffNS0_10WXQSummaryIffEEE16SummaryContainerENS5_9allocatorISB_EEEEPNS6_ImNSC_ImEEEESJ_PNS6_INS0_9WQSummaryIffE5EntryENSC_ISM_EEEE(a1, a2, a3, a4, a5);
}

void sub_220E1EC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::AllReduce(uint64_t *a1, uint64_t *a2, std::vector<int> *a3)
{
  rabit::engine *v3;
  void *Engine;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *ptr;
  uint64_t v15;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  rabit::engine *v28;
  _BYTE *v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD *v49;
  _QWORD *v50;
  rabit::engine *v51;
  void *v52;
  int v53;
  void *v54;
  unint64_t i;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  std::string *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  std::string *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  std::string *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  unint64_t v89;
  uint64_t v93;
  uint64_t v94;
  void *__p;
  _BYTE *v96;
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  void *v100;
  _BYTE *v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  _QWORD v105[2];
  unint64_t v106;
  _QWORD v107[2];
  char v108;
  unint64_t v109;
  uint64_t v110;
  std::exception_ptr v111[2];
  __int128 v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  std::exception_ptr v116;
  std::mutex v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v116, "AllReduce");
  v3 = (rabit::engine *)xgboost::common::Monitor::Start();
  if (v117.__m_.__opaque[7] < 0)
    operator delete(v116.__ptr_);
  v106 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  Engine = rabit::engine::GetEngine(v3);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v106, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  v111[0].__ptr_ = (void *)(0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  if ((void *)v106 != v111[0].__ptr_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v116);
    if (v116.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"n_columns == sketches_.size()", 29);
      v9 = *((char *)v116.__ptr_ + 23);
      v10 = v9 >= 0 ? v116.__ptr_ : *(void **)v116.__ptr_;
      v11 = v9 >= 0 ? *((unsigned __int8 *)v116.__ptr_ + 23) : *((_QWORD *)v116.__ptr_ + 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of columns differs across workers", 40);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      ptr = v116.__ptr_;
      v116.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v116, (uint64_t)ptr);
    }
  }
  v15 = a1[6];
  v105[0] = a1[7] - v15;
  v105[1] = v15;
  begin = a3->__begin_;
  end = a3->__end_;
  LODWORD(v102) = 0;
  v18 = (char *)end - (char *)begin;
  v111[0].__ptr_ = (void *)(v18 >> 2);
  if (v18)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v116);
    if (v116.__ptr_)
    {
      v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"num_cuts.size() == 0", 20);
      v23 = *((char *)v116.__ptr_ + 23);
      v24 = v23 >= 0 ? v116.__ptr_ : *(void **)v116.__ptr_;
      v25 = v23 >= 0 ? *((unsigned __int8 *)v116.__ptr_ + 23) : *((_QWORD *)v116.__ptr_ + 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      v27 = v116.__ptr_;
      v116.__ptr_ = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v116, (uint64_t)v27);
    }
  }
  std::vector<int>::resize(a3, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize(a2, 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3));
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v28 = (rabit::engine *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v102, (const void *)a1[9], a1[10], (a1[10] - a1[9]) >> 3);
  v30 = v102;
  v29 = v103;
  v31 = rabit::engine::GetEngine(v28);
  (*(void (**)(void *, _BYTE *, uint64_t, int64_t, uint64_t *(*)(uint64_t *, _QWORD *, int), _QWORD, _QWORD))(*(_QWORD *)v31 + 8))(v31, v30, 8, (v29 - v30) >> 3, rabit::op::Reducer<rabit::op::Sum,unsigned long>, 0, 0);
  v33 = *a1;
  v32 = a1[1];
  LODWORD(v111[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v100) = 1;
  if (SLODWORD(v111[0].__ptr_) < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v116);
    if (v116.__ptr_)
    {
      v71 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(v71, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v72 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Check failed: ", 14);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"n_threads >= 1", 14);
      v75 = *((char *)v116.__ptr_ + 23);
      v76 = v75 >= 0 ? v116.__ptr_ : *(void **)v116.__ptr_;
      v77 = v75 >= 0 ? *((unsigned __int8 *)v116.__ptr_ + 23) : *((_QWORD *)v116.__ptr_ + 1);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      v79 = v116.__ptr_;
      v116.__ptr_ = 0;
      if (v79)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v116, (uint64_t)v79);
    }
  }
  v116.__ptr_ = 0;
  v117.__m_.__sig = 850045863;
  memset(v117.__m_.__opaque, 0, sizeof(v117.__m_.__opaque));
  if (v32 != v33)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = (v32 - v33) / 136;
    v38 = 16;
    do
    {
      v39 = vcvts_n_u32_f32((float)*((int *)a1 + 24), 3uLL);
      v40 = *((_QWORD *)v102 + v36);
      if (v40 >= v39)
        LODWORD(v41) = v39;
      else
        v41 = *((_QWORD *)v102 + v36);
      if (v40)
      {
        v42 = a1[6];
        v43 = a1[7] - v42;
        if (!v43)
          goto LABEL_34;
        if (v43 <= v36)
LABEL_102:
          std::terminate();
        if (*(_BYTE *)(v42 + v36) == 1)
        {
          v41 = *(_QWORD *)(a1[3] + v38);
        }
        else
        {
LABEL_34:
          v113 = 0;
          *(_OWORD *)&v111[0].__ptr_ = 0u;
          v112 = 0u;
          xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::GetSummary((uint64_t *)(*a1 + v34), (uint64_t *)v111);
          v44 = *a2;
          v45 = *a2 + v35;
          v46 = (uint64_t *)(v45 + 16);
          if ((int)v41 > (unint64_t)((uint64_t)(*(_QWORD *)(v45 + 24) - *(_QWORD *)(v45 + 16)) >> 4))
          {
            std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v46, (int)v41);
            if (*(_QWORD *)(v45 + 24) == *v46)
              v47 = 0;
            else
              v47 = *v46;
            *(_QWORD *)(v44 + v35) = v47;
            v44 = *a2;
          }
          if (!*(_QWORD *)(v44 + v35))
          {
            v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v100);
            dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
            v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v100);
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: reduced[i].data", 29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v100);
            v44 = *a2;
          }
          xgboost::common::WXQSummary<float,float>::SetPrune((_QWORD *)(v44 + v35), (uint64_t *)v111, (int)v41);
          if ((_QWORD)v112)
          {
            *((_QWORD *)&v112 + 1) = v112;
            operator delete((void *)v112);
          }
        }
        a3->__begin_[v36] = v41;
      }
      ++v36;
      v38 += 24;
      v35 += 40;
      v34 += 136;
    }
    while (v37 != v36);
  }
  dmlc::OMPException::Rethrow(&v116);
  std::mutex::~mutex(&v117);
  std::exception_ptr::~exception_ptr(&v116);
  v52 = rabit::engine::GetEngine(v51);
  v53 = (*(uint64_t (**)(void *))(*(_QWORD *)v52 + 72))(v52);
  if (v53 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v116, "AllReduce");
    xgboost::common::Monitor::Stop();
    if ((v117.__m_.__opaque[7] & 0x80000000) == 0)
      goto LABEL_81;
    v54 = v116.__ptr_;
    goto LABEL_80;
  }
  v116.__ptr_ = 0;
  std::vector<unsigned long>::vector(&v100, 1uLL, &v116);
  v116.__ptr_ = 0;
  std::vector<unsigned long>::vector(&v98, v53 * v106 + v53, &v116);
  __p = 0;
  v96 = 0;
  v97 = 0;
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::GatherSketchInfo(a1, a2, (char **)&v100, (uint64_t *)&v98, (uint64_t)&__p);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::vector(&v93, v106);
  v89 = v106;
  LODWORD(v111[0].__ptr_) = *((_DWORD *)a1 + 26);
  LODWORD(v109) = 1;
  if (SLODWORD(v111[0].__ptr_) < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v116);
    if (v116.__ptr_)
    {
      v80 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      dmlc::LogMessageFatal::Entry::Init(v80, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v81 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v111);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Check failed: ", 14);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"n_threads >= 1", 14);
      v84 = *((char *)v116.__ptr_ + 23);
      v85 = v84 >= 0 ? v116.__ptr_ : *(void **)v116.__ptr_;
      v86 = v84 >= 0 ? *((unsigned __int8 *)v116.__ptr_ + 23) : *((_QWORD *)v116.__ptr_ + 1);
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v85, v86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v111);
      v88 = v116.__ptr_;
      v116.__ptr_ = 0;
      if (v88)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v116, (uint64_t)v88);
    }
  }
  v116.__ptr_ = 0;
  v117.__m_.__sig = 850045863;
  memset(v117.__m_.__opaque, 0, sizeof(v117.__m_.__opaque));
  if (v89)
  {
    for (i = 0; i != v89; ++i)
    {
      v111[0].__ptr_ = (void *)((v96 - (_BYTE *)__p) >> 4);
      v111[1].__ptr_ = __p;
      *(_QWORD *)&v112 = (v101 - (_BYTE *)v100) >> 3;
      *((_QWORD *)&v112 + 1) = v100;
      v113 = (v99 - (_BYTE *)v98) >> 3;
      v114 = v98;
      v115 = v106;
      v56 = a3->__begin_[i];
      v57 = a1[6];
      v58 = a1[7] - v57;
      if (!v58)
        goto LABEL_54;
      if (v58 <= i)
        goto LABEL_102;
      if (*(_BYTE *)(v57 + i) != 1)
      {
LABEL_54:
        if (v53 >= 1)
        {
          v59 = 0;
          while (1)
          {
            v60 = v110;
            if (!v110)
            {
              v61 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v108);
              dmlc::LogMessageFatal::Entry::Init(v61, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
              v62 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v108);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Check failed: worker_feature.data()", 35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v108);
            }
            v107[0] = v60;
            v107[1] = v109;
            if (0xCCCCCCCCCCCCCCCDLL * ((v94 - v93) >> 3) <= i)
              break;
            xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Reduce(v93 + 40 * i, (uint64_t)v107, (16 * v56) | 8);
            if (v53 == ++v59)
              goto LABEL_60;
          }
LABEL_71:
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
LABEL_60:
        v64 = *a2;
        v65 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        if (v65 <= i)
          goto LABEL_71;
        v66 = v64 + 40 * i;
        v68 = *(_QWORD *)(v66 + 16);
        v67 = (uint64_t *)(v66 + 16);
        if (v56 > (v67[1] - v68) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v67, v56);
          if (v67[1] == *v67)
            v69 = 0;
          else
            v69 = *v67;
          *(_QWORD *)(v64 + 40 * i) = v69;
          v64 = *a2;
          v65 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        }
        if (v65 <= i || 0xCCCCCCCCCCCCCCCDLL * ((v94 - v93) >> 3) <= i)
          goto LABEL_71;
        xgboost::common::WXQSummary<float,float>::SetPrune((_QWORD *)(v64 + 40 * i), (uint64_t *)(v93 + 40 * i), v56);
      }
    }
  }
  dmlc::OMPException::Rethrow(&v116);
  std::mutex::~mutex(&v117);
  std::exception_ptr::~exception_ptr(&v116);
  std::string::basic_string[abi:ne180100]<0>(v70, "AllReduce");
  xgboost::common::Monitor::Stop();
  if (v117.__m_.__opaque[7] < 0)
    operator delete(v116.__ptr_);
  v116.__ptr_ = &v93;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
  if (__p)
  {
    v96 = __p;
    operator delete(__p);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  v54 = v100;
  if (v100)
  {
    v101 = v100;
LABEL_80:
    operator delete(v54);
  }
LABEL_81:
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_16WXQuantileSketchIffEEE9AllReduceEPNSt3__16vectorINS0_22QuantileSketchTemplateIffNS0_10WXQSummaryIffEEE16SummaryContainerENS5_9allocatorISB_EEEEPNS6_IiNSC_IiEEEE(a1, a2, a3);
}

void sub_220E1F848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  __cxa_end_catch();
  sub_220E1F8BC(a1, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35);
}

void sub_220E1F870()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220E1FA24);
}

void sub_220E1F87C()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220E1FA24);
}

void sub_220E1F890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = (void **)&a17;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&a35);
  if (a20)
  {
    a21 = a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = a26;
    operator delete(a26);
  }
  JUMPOUT(0x220E1FA24);
}

void sub_220E1F8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  uint64_t v35;

  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v35 - 168));
  a35 = &a17;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void sub_220E1F8D4()
{
  JUMPOUT(0x220E1F934);
}

void sub_220E1F8E0()
{
  JUMPOUT(0x220E1F954);
}

void sub_220E1F8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;

  if ((*(char *)(v29 - 145) & 0x80000000) == 0)
  {
    if (a29)
      operator delete(a29);
    JUMPOUT(0x220E1FA3CLL);
  }
  JUMPOUT(0x220E1F960);
}

void sub_220E1F904()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 224));
  JUMPOUT(0x220E1F910);
}

void sub_220E1F96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  uint64_t v29;
  uint64_t v30;

  v30 = *(_QWORD *)(v29 - 168);
  *(_QWORD *)(v29 - 168) = 0;
  if (v30)
    std::default_delete<std::string>::operator()[abi:ne180100](v29 - 168, v30);
  if (a29)
    operator delete(a29);
  JUMPOUT(0x220E1FA3CLL);
}

void sub_220E1F994(_Unwind_Exception *a1)
{
  uint64_t v1;

  if ((*(char *)(v1 - 145) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  JUMPOUT(0x220E1FA30);
}

void sub_220E1F9A8()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 224));
  JUMPOUT(0x220E1F9B4);
}

void sub_220E1F9D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 168) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v2);
  _Unwind_Resume(a1);
}

void sub_220E1FA0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(_QWORD *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::PushRowPage(uint64_t a1, uint64_t **a2, unsigned int *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  std::string *Entry;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  float *v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;
  char v67;
  std::vector<unsigned int> v68;
  unint64_t v69[2];
  void *v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned int v73;
  void *__p;
  std::mutex v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushRowPage");
  xgboost::common::Monitor::Start();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
  v7 = *(_QWORD *)a3;
  v8 = *((_QWORD *)a3 + 1);
  v73 = v8;
  v62 = *((_QWORD *)a3 + 2);
  LODWORD(v70) = *(_DWORD *)(a1 + 104);
  LODWORD(v68.__begin_) = 1;
  if ((int)v70 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
    if (__p)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"n_threads_ >= 1", 15);
      v23 = *((char *)__p + 23);
      v24 = v23 >= 0 ? __p : *(void **)__p;
      v25 = v23 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v27 = __p;
      __p = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v27);
    }
  }
  v70 = (void *)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  if (v70 != (void *)v73)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&__p);
    if (__p)
    {
      v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"sketches_.size() == n_columns", 29);
      v13 = *((char *)__p + 23);
      v14 = v13 >= 0 ? __p : *(void **)__p;
      v15 = v13 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v17 = __p;
      __p = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v17);
    }
  }
  if (*a4)
  {
    v18 = a4[1];
    v69[0] = *a4;
    v69[1] = v18;
  }
  else if (*(_BYTE *)(a1 + 100))
  {
  }
  else
  {
    v28 = *((_QWORD *)a3 + 9);
    v71 = 0;
    v72 = 0;
    v70 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v70, *(const void **)v28, *(_QWORD *)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 2);
  }
  if (v70 != v71)
  {
    v68.__begin_ = (std::vector<unsigned int>::pointer)((v71 - (_BYTE *)v70) >> 2);
    if (v68.__begin_ != *(std::vector<unsigned int>::pointer *)a3)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&__p);
      if (__p)
      {
        v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
        dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
        v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v68);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"weights.size() == info.num_row_", 31);
        v33 = *((char *)__p + 23);
        v34 = v33 >= 0 ? __p : *(void **)__p;
        v35 = v33 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v68);
        v37 = __p;
        __p = 0;
        if (v37)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v37);
      }
    }
  }
  v38 = (*a2)[1];
  v63 = *a2[1];
  v64 = **a2;
  v39 = a3[2];
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::LoadBalance(&v68, (uint64_t)a2, v39, *(int *)(a1 + 104));
  __p = 0;
  v75.__m_.__sig = 850045863;
  memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
  v41 = *v68.__begin_;
  v40 = v68.__begin_[1];
  if (v41 < v40 && v40 <= v39 && (unint64_t)(v38 - v64) >= 0x10)
  {
    v42 = 0;
    v43 = (v38 - v64) >> 3;
    v61 = v7 * v8;
    v58 = v43 != 0;
    v44 = v43 - 1;
    if (!v58)
      v44 = 0;
    if (v44 <= 1)
      v45 = 1;
    else
      v45 = v44;
    do
    {
      v46 = *(_QWORD *)(v64 + 8 * v42);
      v47 = *(_QWORD *)(v64 + 8 * v42 + 8);
      v48 = v47 - v46;
      if (!v63 && v47 != v46)
LABEL_81:
        std::terminate();
      if (v70 == v71)
        v49 = 1.0;
      else
        v49 = *((float *)v70 + (_QWORD)a2[2] + v42);
      if (v62 == v61)
      {
        v50 = 136 * v41;
        v51 = 24 * v41;
        v52 = v41;
        v53 = (float *)(v63 + 4 + 8 * v41 + 8 * v46);
        do
        {
          v54 = *(_QWORD *)(a1 + 48);
          v55 = *(_QWORD *)(a1 + 56) - v54;
          if (!v55)
            goto LABEL_58;
          if (v55 <= v52)
            goto LABEL_81;
          if (*(_BYTE *)(v54 + v52) == 1)
            std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(_QWORD *)(a1 + 24) + v51), *v53, *v53);
          else
LABEL_58:
            xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::Push((uint64_t *)(*(_QWORD *)a1 + v50), *v53, v49);
          ++v52;
          v53 += 2;
          v51 += 24;
          v50 += 136;
        }
        while (v40 != v52);
      }
      else if (v47 != v46)
      {
        v56 = (float *)(v63 + 4 + 8 * v46);
        do
        {
          v57 = *((unsigned int *)v56 - 1);
          v58 = v57 < v41 || v57 >= v40;
          if (!v58)
          {
            v59 = *(_QWORD *)(a1 + 48);
            v60 = *(_QWORD *)(a1 + 56) - v59;
            if (!v60)
              goto LABEL_71;
            if (v60 <= v57)
              goto LABEL_81;
            if (*(_BYTE *)(v59 + v57) == 1)
              std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(_QWORD *)(a1 + 24) + 24 * v57), *v56, *v56);
            else
LABEL_71:
              xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::Push((uint64_t *)(*(_QWORD *)a1 + 136 * v57), *v56, v49);
          }
          v56 += 2;
          --v48;
        }
        while (v48);
      }
      ++v42;
    }
    while (v42 != v45);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v66, "PushRowPage");
  xgboost::common::Monitor::Stop();
  if (v67 < 0)
    operator delete(v66);
  std::mutex::~mutex(&v75);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_220E200C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,std::exception_ptr a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::MakeCuts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  std::string *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  float v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  float *v39;
  uint64_t i;
  float v41;
  float *v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  float *v49;
  int v50;
  float *v51;
  float v52;
  uint64_t v53;
  float *v54;
  unint64_t v55;
  float *v56;
  float *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  float *v63;
  int v64;
  uint64_t v65;
  std::string *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  std::string *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  _DWORD *v86;
  unint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  std::string *Entry;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  void *v105;
  _QWORD v106[3];
  std::vector<int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  std::exception_ptr v113;
  char v114;
  void *__p;
  std::mutex v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Start();
  if (v116.__m_.__opaque[7] < 0)
    operator delete(__p);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  memset(&v107, 0, sizeof(v107));
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::AllReduce((uint64_t *)a1, &v108, &v107);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  LODWORD(__p) = 0;
  std::vector<float>::resize(v4, v5, &__p);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::vector(v106, 0xCCCCCCCCCCCCCCCDLL * ((v109 - v108) >> 3));
  v7 = v108;
  v6 = v109;
  v8 = *(_DWORD *)(a1 + 104);
  v111 = 1;
  v112 = v8;
  if (v8 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
    if (__p)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v98 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: ", 14);
      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"n_threads >= 1", 14);
      v101 = *((char *)__p + 23);
      v102 = v101 >= 0 ? __p : *(void **)__p;
      v103 = v101 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)v102, v103);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v113);
      v105 = __p;
      __p = 0;
      if (v105)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v105);
    }
  }
  __p = 0;
  v116.__m_.__sig = 850045863;
  memset(v116.__m_.__opaque, 0, sizeof(v116.__m_.__opaque));
  if (v6 != v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = (v6 - v7) / 40;
    do
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56) - v12;
      if (!v13)
        goto LABEL_9;
      if (v13 <= v10)
LABEL_137:
        std::terminate();
      if (*(_BYTE *)(v12 + v10) != 1)
      {
LABEL_9:
        v14 = (uint64_t *)(v106[0] + v9);
        v15 = v107.__begin_[v10];
        if (*(_DWORD *)(a1 + 96) < v15)
          v15 = *(_DWORD *)(a1 + 96);
        v16 = v15 + 1;
        v17 = v14 + 2;
        if (v16 <= (v14[3] - v14[2]) >> 4)
        {
          v18 = *v14;
        }
        else
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v14 + 2), v16);
          if (v14[3] == *v17)
            v18 = 0;
          else
            v18 = *v17;
          *v14 = v18;
        }
        if (!v18)
        {
          v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v111);
          dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v111);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: a.data", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v111);
        }
        v19 = 0.00001;
        if (v107.__begin_[v10])
        {
          xgboost::common::WXQSummary<float,float>::SetPrune(v14, (uint64_t *)(v108 + v9), v16);
          v20 = *v14;
          if (!*v14 || !*(_QWORD *)(v108 + v9))
          {
            v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
            dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
            v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: a.data && reduced[fidx].data", 42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
            v20 = *v14;
          }
          v19 = (float)(*(float *)(v20 + 12) - fabsf(*(float *)(v20 + 12))) + -0.00001;
        }
        *(float *)(**(_QWORD **)(a2 + 24) + 4 * v10) = v19;
      }
      ++v10;
      v9 += 40;
    }
    while (v11 != v10);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::mutex::~mutex(&v116);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  if (v109 == v108)
  {
    v28 = -1.0;
  }
  else
  {
    v27 = 0;
    v28 = -1.0;
    do
    {
      v29 = v107.__begin_[v27];
      if (*(_DWORD *)(a1 + 96) < v29)
        v29 = *(_DWORD *)(a1 + 96);
      v30 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 56) - v30;
      if (!v31)
        goto LABEL_38;
      if (v31 <= v27)
        goto LABEL_137;
      if (*(_BYTE *)(v30 + v27) == 1)
      {
        v32 = *(_QWORD *)(a1 + 24);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v32) >> 3) <= v27)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v33 = xgboost::common::AddCategories((unint64_t *)(v32 + 24 * v27), a2);
        if (v28 < v33)
          v28 = v33;
      }
      else
      {
LABEL_38:
        v34 = (_QWORD *)(v106[0] + 40 * v27);
        v35 = v34[1];
        if (v35 >= v29)
          v36 = v29;
        else
          v36 = v34[1];
        if (v36 >= 2)
        {
          v37 = *(_QWORD *)(a2 + 8);
          v38 = (_QWORD *)(v37 + 16);
          v39 = *(float **)(v37 + 8);
          for (i = 1; i != v36; ++i)
          {
            v41 = *(float *)(*v34 + 16 * i + 12);
            if (i == 1 || v41 > *(v39 - 1))
            {
              if ((unint64_t)v39 >= *v38)
              {
                v43 = *(float **)v37;
                v44 = ((uint64_t)v39 - *(_QWORD *)v37) >> 2;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v46 = *v38 - (_QWORD)v43;
                if (v46 >> 1 > v45)
                  v45 = v46 >> 1;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                  v47 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v37 + 16, v47);
                  v43 = *(float **)v37;
                  v39 = *(float **)(v37 + 8);
                }
                else
                {
                  v48 = 0;
                }
                v49 = (float *)&v48[4 * v44];
                *v49 = v41;
                v42 = v49 + 1;
                while (v39 != v43)
                {
                  v50 = *((_DWORD *)v39-- - 1);
                  *((_DWORD *)v49-- - 1) = v50;
                }
                *(_QWORD *)v37 = v49;
                *(_QWORD *)(v37 + 8) = v42;
                *(_QWORD *)(v37 + 16) = &v48[4 * v47];
                if (v43)
                  operator delete(v43);
              }
              else
              {
                *v39 = v41;
                v42 = v39 + 1;
              }
              *(_QWORD *)(v37 + 8) = v42;
              v39 = v42;
            }
          }
          v35 = v34[1];
        }
        if (v35)
          v51 = (float *)(*v34 + 16 * v35 - 4);
        else
          v51 = (float *)(**(_QWORD **)(a2 + 24) + 4 * v27);
        v52 = *v51 + (float)(fabsf(*v51) + 0.00001);
        v53 = *(_QWORD *)(a2 + 8);
        v54 = *(float **)(v53 + 8);
        v55 = *(_QWORD *)(v53 + 16);
        if ((unint64_t)v54 >= v55)
        {
          v57 = *(float **)v53;
          v58 = ((uint64_t)v54 - *(_QWORD *)v53) >> 2;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v60 = v55 - (_QWORD)v57;
          if (v60 >> 1 > v59)
            v59 = v60 >> 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v53 + 16, v61);
            v57 = *(float **)v53;
            v54 = *(float **)(v53 + 8);
          }
          else
          {
            v62 = 0;
          }
          v63 = (float *)&v62[4 * v58];
          *v63 = v52;
          v56 = v63 + 1;
          while (v54 != v57)
          {
            v64 = *((_DWORD *)v54-- - 1);
            *((_DWORD *)v63-- - 1) = v64;
          }
          *(_QWORD *)v53 = v63;
          *(_QWORD *)(v53 + 8) = v56;
          *(_QWORD *)(v53 + 16) = &v62[4 * v61];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *v54 = v52;
          v56 = v54 + 1;
        }
        *(_QWORD *)(v53 + 8) = v56;
      }
      v65 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8);
      v113.__ptr_ = (void *)(v65 >> 2);
      v112 = -1;
      if ((unint64_t)v65 > 0x3FFFFFFFCLL)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&__p);
        if (__p)
        {
          v66 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
          dmlc::LogMessageFatal::Entry::Init(v66, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v67 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
          v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: ", 14);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"cuts->cut_values_.HostVector().size() <= std::numeric_limits<uint32_t>::max()", 77);
          v70 = *((char *)__p + 23);
          v71 = v70 >= 0 ? __p : *(void **)__p;
          v72 = v70 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v71, v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v113);
          v74 = __p;
          __p = 0;
          if (v74)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v74);
        }
      }
      v75 = *(_QWORD *)(a2 + 16);
      LODWORD(v113.__ptr_) = (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 2;
      if (*(_DWORD *)(*(_QWORD *)(v75 + 8) - 4) >= LODWORD(v113.__ptr_))
      {
        dmlc::LogCheckFormat<unsigned int,unsigned int>((uint64_t *)&__p);
        if (__p)
        {
          v76 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v112);
          dmlc::LogMessageFatal::Entry::Init(v76, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
          v77 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v112);
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: ", 14);
          v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"cut_size > cuts->cut_ptrs_.HostVector().back()", 46);
          v80 = *((char *)__p + 23);
          v81 = v80 >= 0 ? __p : *(void **)__p;
          v82 = v80 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v81, v82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v112);
          v84 = __p;
          __p = 0;
          if (v84)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v84);
        }
      }
      v85 = *(_QWORD *)(a2 + 16);
      v86 = *(_DWORD **)(v85 + 8);
      v87 = *(_QWORD *)(v85 + 16);
      if ((unint64_t)v86 >= v87)
      {
        v89 = *(_DWORD **)v85;
        v90 = ((uint64_t)v86 - *(_QWORD *)v85) >> 2;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v92 = v87 - (_QWORD)v89;
        if (v92 >> 1 > v91)
          v91 = v92 >> 1;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
          v93 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v93 = v91;
        if (v93)
        {
          v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v85 + 16, v93);
          v89 = *(_DWORD **)v85;
          v86 = *(_DWORD **)(v85 + 8);
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[4 * v90];
        *(_DWORD *)v95 = v113.__ptr_;
        v88 = v95 + 4;
        while (v86 != v89)
        {
          v96 = *--v86;
          *((_DWORD *)v95 - 1) = v96;
          v95 -= 4;
        }
        *(_QWORD *)v85 = v95;
        *(_QWORD *)(v85 + 8) = v88;
        *(_QWORD *)(v85 + 16) = &v94[4 * v93];
        if (v89)
          operator delete(v89);
      }
      else
      {
        *v86 = v113.__ptr_;
        v88 = v86 + 1;
      }
      *(_QWORD *)(v85 + 8) = v88;
      ++v27;
    }
    while (v27 < 0xCCCCCCCCCCCCCCCDLL * ((v109 - v108) >> 3));
  }
  *(_BYTE *)a2 = *(_BYTE *)(a1 + 108);
  *(float *)(a2 + 4) = v28;
  std::string::basic_string[abi:ne180100]<0>(&__p, "MakeCuts");
  xgboost::common::Monitor::Stop();
  if (v116.__m_.__opaque[7] < 0)
    operator delete(__p);
  __p = v106;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  __p = &v108;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

{
  __ZN7xgboost6common19SketchContainerImplINS0_16WXQuantileSketchIffEEE8MakeCutsEPNS0_13HistogramCutsE(a1, a2);
}

void sub_220E20C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::mutex *v27;
  uint64_t v29;
  void **v30[3];
  uint64_t v31;
  void **v32;
  std::exception_ptr v33;

  std::mutex::~mutex(v27);
  std::exception_ptr::~exception_ptr(&v33);
  v32 = (void **)&v29;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v32);
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  v30[0] = (void **)&v31;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void sub_220E20CC8()
{
  JUMPOUT(0x220E20D90);
}

void sub_220E20CD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  JUMPOUT(0x220E20DB0);
}

void sub_220E20CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v24;
  void **v25[3];
  uint64_t v26;
  void **v27;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  v23 = a22;
  a22 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a22, v23);
  v27 = (void **)&v24;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v25[0] = (void **)&v26;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void sub_220E20D2C()
{
  JUMPOUT(0x220E20D54);
}

void sub_220E20D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  v23 = a23;
  a23 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100](&a23);
  JUMPOUT(0x220E20D80);
}

void sub_220E20D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E20D54);
}

uint64_t sub_220E20D6C(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  return sub_220E20D70();
}

void sub_220E20D70()
{
  JUMPOUT(0x220E20DB0);
}

void xgboost::common::InvalidCategory(xgboost::common *this)
{
  std::string *Entry;
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v6;
  char v7;
  std::string v8;

  std::to_string(&v8, 0x1000000);
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/categorical.h");
  v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::operator+<char>();
  if ((v6 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v4 = v6;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_220E20E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::HostSketchContainer::HostSketchContainer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *Entry;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  void *ptr;
  std::string __str;
  unint64_t v43[2];
  void *__p;
  void *v45;
  uint64_t v46;
  int v47;
  std::exception_ptr v48;
  std::exception_ptr v49;
  std::mutex v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v45 = 0;
  v46 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v12 = **(_QWORD **)(a3 + 168);
  v43[0] = *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8) - v12;
  v43[1] = v12;
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::SketchContainerImpl(a1, (uint64_t)&__p, a2, v43, a5, a7);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "HostSketchContainer");
  std::string::operator=((std::string *)(a1 + 112), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v14 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 104);
  v47 = 1;
  LODWORD(v48.__ptr_) = v15;
  if (v15 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v49);
    if (v49.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: ", 14);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"n_threads >= 1", 14);
      v37 = *((char *)v49.__ptr_ + 23);
      v38 = v37 >= 0 ? v49.__ptr_ : *(void **)v49.__ptr_;
      v39 = v37 >= 0 ? *((unsigned __int8 *)v49.__ptr_ + 23) : *((_QWORD *)v49.__ptr_ + 1);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v38, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v48);
      ptr = v49.__ptr_;
      v49.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v49, (uint64_t)ptr);
    }
  }
  v49.__ptr_ = 0;
  v50.__m_.__sig = 850045863;
  memset(v50.__m_.__opaque, 0, sizeof(v50.__m_.__opaque));
  if (v13 != v14)
  {
    v16 = 0;
    do
    {
      v17 = *(int *)(a1 + 96);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16);
      if (v18 < v17)
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16);
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = v17;
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56) - v20;
      if (!v21)
        goto LABEL_16;
      if (v21 <= v16)
        std::terminate();
      if (*(_BYTE *)(v20 + v16) != 1)
      {
LABEL_16:
        v22 = 0;
        v23 = 1.0 / (float)((float)v19 * 8.0);
        v24 = (_QWORD *)(*(_QWORD *)a1 + 136 * v16);
        do
        {
          v25 = vcvtpd_u64_f64((double)++v22 / v23);
          if (v25 + 1 < v18)
            v26 = v25 + 1;
          else
            v26 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v16);
        }
        while (v26 << v22 < v18);
        v24[4] = v22;
        v24[5] = v26;
        v27 = (unint64_t)(v23 * (double)v26);
        if (v27 <= 1)
          v27 = 1;
        if (v22 > v27)
        {
          v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
          dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
          v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: nlevel <= std::max(static_cast<size_t>(1), static_cast<size_t>(limit_size * eps))", 95);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"invalid init parameter", 22);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
        }
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)v24, 1uLL);
        v24[3] = 0;
        v24[10] = v24[9];
        v24[7] = v24[6];
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize(*(_QWORD *)a1 + 136 * v16, 2 * *(_QWORD *)(*(_QWORD *)a1 + 136 * v16 + 40));
      }
      ++v16;
    }
    while (v16 != 0xF0F0F0F0F0F0F0F1 * ((v13 - v14) >> 3));
  }
  dmlc::OMPException::Rethrow(&v49);
  std::mutex::~mutex(&v50);
  std::exception_ptr::~exception_ptr(&v49);
  return a1;
}

void sub_220E212CC()
{
  uint64_t v0;
  std::mutex *v1;
  _Unwind_Exception *v2;
  std::exception_ptr v3;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v0);
  _Unwind_Resume(v2);
}

void sub_220E21310(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _Unwind_Exception *v16;

  if (a15 < 0)
    operator delete(__p);
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v15);
  _Unwind_Resume(v16);
}

void sub_220E21328(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x220E21388);
}

void sub_220E21340()
{
  JUMPOUT(0x220E21388);
}

void sub_220E21348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E21354);
}

uint64_t xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  xgboost::common::Monitor::~Monitor((char **)(a1 + 112));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 24);
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)a1;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void xgboost::common::SortedSketchContainer::PushColPage(uint64_t a1, uint64_t **a2, const xgboost::MetaInfo *a3, unint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  std::string *Entry;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  xgboost::common::SortedQuantile *v28;
  int v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55[2];
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  std::exception_ptr v60;
  void *__p;
  std::mutex v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushColPage");
  xgboost::common::Monitor::Start();
  if (v62.__m_.__opaque[7] < 0)
    operator delete(__p);
  if (*a4)
  {
    v8 = a4[1];
    v55[0] = *a4;
    v55[1] = v8;
  }
  else if (*(_BYTE *)(a1 + 100))
  {
  }
  else
  {
    v9 = *((_QWORD *)a3 + 9);
    v57 = 0;
    v58 = 0;
    v56 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v56, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  }
  v60.__ptr_ = (void *)((v57 - (_BYTE *)v56) >> 2);
  if (v60.__ptr_ != *(void **)a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&__p);
    if (__p)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.cc");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: ", 14);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"weights.size() == info.num_row_", 31);
      v14 = *((char *)__p + 23);
      v15 = v14 >= 0 ? __p : *(void **)__p;
      v16 = v14 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v60);
      v18 = __p;
      __p = 0;
      if (v18)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v18);
    }
  }
  v19 = **a2;
  v20 = (*a2)[1] - v19;
  v21 = *a2[1];
  v22 = (v20 >> 3) - 1;
  if (!(v20 >> 3))
    v22 = 0;
  v54 = v22;
  v23 = *(_DWORD *)(a1 + 104);
  v59 = 1;
  LODWORD(v60.__ptr_) = v23;
  if (v23 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
    if (__p)
    {
      v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
      dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"n_threads >= 1", 14);
      v48 = *((char *)__p + 23);
      v49 = v48 >= 0 ? __p : *(void **)__p;
      v50 = v48 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v49, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v60);
      v52 = __p;
      __p = 0;
      if (v52)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v52);
    }
  }
  __p = 0;
  v62.__m_.__sig = 850045863;
  memset(v62.__m_.__opaque, 0, sizeof(v62.__m_.__opaque));
  if ((unint64_t)v20 >= 0x10)
  {
    v24 = 0;
    v53 = v21 + 4;
    while (1)
    {
      v25 = (uint64_t *)(v19 + 8 * v24);
      v26 = *v25;
      v27 = v25[1];
      if (!v21 && v27 != v26)
LABEL_67:
        std::terminate();
      v28 = (xgboost::common::SortedQuantile *)(*(_QWORD *)(a1 + 176) + 48 * v24);
      v29 = *(_DWORD *)(a1 + 96);
      *((_QWORD *)v28 + 4) = 0xBFF0000000000000;
      v30 = (_QWORD *)*((_QWORD *)v28 + 5);
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      v31 = (v29 + 1);
      if (v31 > (uint64_t)(v30[15] - v30[14]) >> 4)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v30 + 14), v31);
        if (v30[15] == v30[14])
          v32 = 0;
        else
          v32 = v30[14];
        v30[12] = v32;
        v30 = (_QWORD *)*((_QWORD *)v28 + 5);
      }
      v33 = v27 - v26;
      v30[13] = 0;
      *(_QWORD *)v28 = 0;
      if (v27 != v26)
      {
        v34 = (unsigned int *)(v21 + 8 * v26);
        v35 = 0.0;
        v36 = v27 - v26;
        do
        {
          v37 = *v34;
          v34 += 2;
          v35 = v35 + *((float *)v56 + v37);
          --v36;
        }
        while (v36);
        *(double *)v28 = v35;
      }
      v38 = *(_QWORD *)(a1 + 48);
      v39 = *(_QWORD *)(a1 + 56) - v38;
      if (!v39)
        goto LABEL_70;
      if (v39 <= v24)
        goto LABEL_67;
      if (*(_BYTE *)(v38 + v24) == 1)
      {
        if (v27 != v26)
        {
          v40 = (float *)(v53 + 8 * v26);
          do
          {
            std::__tree<float>::__emplace_unique_key_args<float,float &>((uint64_t *)(*(_QWORD *)(a1 + 24) + 24 * v24), *v40, *v40);
            v40 += 2;
            --v33;
          }
          while (v33);
        }
      }
      else
      {
LABEL_70:
        if (v27 != v26)
        {
          v41 = (float *)(v53 + 8 * v26);
          do
          {
            xgboost::common::SortedQuantile::Push(v28, *v41, *((float *)v56 + *((unsigned int *)v41 - 1)), *(_DWORD *)(a1 + 96));
            v41 += 2;
            --v33;
          }
          while (v33);
        }
      }
      v42 = *(_QWORD *)(a1 + 48);
      v43 = *(_QWORD *)(a1 + 56) - v42;
      if (v43)
        break;
      if (v27 != v26)
        goto LABEL_55;
LABEL_56:
      if (++v24 == v54)
        goto LABEL_22;
    }
    if (v43 <= v24)
      goto LABEL_67;
    if (v27 == v26 || *(_BYTE *)(v42 + v24) == 1)
      goto LABEL_56;
LABEL_55:
    xgboost::common::SortedQuantile::Finalize(v28, *(_DWORD *)(a1 + 96));
    goto LABEL_56;
  }
LABEL_22:
  dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
  std::mutex::~mutex(&v62);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "PushColPage");
  xgboost::common::Monitor::Stop();
  if (v62.__m_.__opaque[7] < 0)
    operator delete(__p);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_220E2194C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  __cxa_end_catch();
  sub_220E219A0(a1, v21, v22, v23, v24, v25, v26, v27, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_220E2196C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15)
    operator delete(a15);
  JUMPOUT(0x220E21A28);
}

void sub_220E219A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::mutex::~mutex(a10);
  std::exception_ptr::~exception_ptr(&a20);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_220E219B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a25 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  JUMPOUT(0x220E21A0CLL);
}

void sub_220E219CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v20;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  v20 = a20;
  a20 = 0;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  JUMPOUT(0x220E21A00);
}

void sub_220E219E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E219ECLL);
}

void sub_220E21A14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_220E21A88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t dmlc::LogCheckFormat<unsigned int,unsigned long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E21C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_220E21CA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::common::Span<float,18446744073709551615ul>::subspan@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;

  if (a3 == -1)
  {
    a3 = *result - a2;
    if (*result < a2)
      goto LABEL_8;
  }
  else if (a3 + a2 > *result)
  {
    goto LABEL_8;
  }
  v4 = result[1];
  *a4 = a3;
  a4[1] = v4 + 4 * a2;
  if (a3 && !v4)
LABEL_8:
    std::terminate();
  return result;
}

unint64_t *xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(unint64_t *result, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 == -1)
  {
    a4 = *a2 - a3;
    if (*a2 < a3)
      goto LABEL_8;
  }
  else if (a4 + a3 > *a2)
  {
    goto LABEL_8;
  }
  v4 = a2[1];
  *result = a4;
  result[1] = v4 + 8 * a3;
  if (a4 && !v4)
LABEL_8:
    std::terminate();
  return result;
}

uint64_t *std::__tree<float>::__emplace_unique_key_args<float,float &>(uint64_t *result, float a2, float a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  float v8;
  float *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *(float *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *(_QWORD *)v5;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (float *)operator new(0x20uLL);
    v9[7] = a3;
    return std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E21E64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *(void **)(a2 + 112);
  if (v3)
  {
    *(_QWORD *)(a2 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(_QWORD *)(a2 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(_QWORD *)(a2 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

void std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<dmlc::parameter::FieldAccessEntry *>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t dmlc::LogCheckFormat<unsigned long,int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E220F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_220E221B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_220E22468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E224E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *rabit::op::Reducer<rabit::op::Sum,unsigned long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float rabit::op::Reducer<rabit::op::Sum,float>(float *a1, float *a2, int a3)
{
  uint64_t v3;
  float v4;
  float result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = v4 + *a2;
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *std::vector<xgboost::FeatureType>::vector<xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::FeatureType const,18446744073709551615ul>,true>,0>(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  _BYTE *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a4 != a2)
LABEL_9:
    std::terminate();
  v6 = a3;
  if (a5 != a3)
  {
    std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](a1, a5 - a3);
    v9 = (_BYTE *)a1[1];
    v10 = *a4;
    if (v6 > *a4)
      v10 = v6;
    do
    {
      if (v10 == v6)
        goto LABEL_9;
      *v9++ = *(_BYTE *)(a4[1] + v6++);
    }
    while (a5 != v6);
    a1[1] = v9;
  }
  return a1;
}

void sub_220E225DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::FeatureType>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E22694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

_QWORD *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E22780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
  }
  if (v5 == v4)
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a1;
}

void sub_220E22888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__split_buffer<xgboost::common::WQuantileSketch<float,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 136;
    std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void xgboost::common::ParallelFor<unsigned long,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1}>(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *ptr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::exception_ptr v27;
  std::mutex v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v27);
    if (v27.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"n_threads >= 1", 14);
      v16 = *((char *)v27.__ptr_ + 23);
      v17 = v16 >= 0 ? v27.__ptr_ : *(void **)v27.__ptr_;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v27.__ptr_ + 23) : *((_QWORD *)v27.__ptr_ + 1);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      ptr = v27.__ptr_;
      v27.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v27, (uint64_t)ptr);
    }
  }
  v27.__ptr_ = 0;
  v28.__m_.__sig = 850045863;
  memset(v28.__m_.__opaque, 0, sizeof(v28.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v11 = 0;
        do
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v11++);
        while (a1 != v11);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v21 = 0;
          do
            dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v21++);
          while (a1 != v21);
        }
      }
      else if (a1)
      {
        v24 = 0;
        do
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v24++);
        while (a1 != v24);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v22 = 0;
          do
            dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v22++);
          while (a1 != v22);
        }
      }
      else if (a1)
      {
        v25 = 0;
        do
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v25++);
        while (a1 != v25);
      }
      break;
    case 3:
      if (a1)
      {
        v23 = 0;
        do
          dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v27, a5, a6, v23++);
        while (a1 != v23);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v27);
  std::mutex::~mutex(&v28);
  std::exception_ptr::~exception_ptr(&v27);
}

void sub_220E22CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t *dmlc::OMPException::Run<xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned long)#1},unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;

  result = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v5 = (uint64_t *)(*(_QWORD *)(a3 + 8) + 8 * a4);
  v6 = *v5;
  v7 = v5[1];
  v8 = v7 - *v5;
  v9 = *(_QWORD *)(a3 + 24);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (v10)
    std::terminate();
  if (v7 != v6)
  {
    v11 = (unsigned int *)(v9 + 8 * v6);
    v12 = *result;
    v13 = (result[1] - *result) >> 3;
    do
    {
      v15 = *v11;
      v11 += 2;
      v14 = v15;
      if (v13 <= v15)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      ++*(_QWORD *)(v12 + 8 * v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void xgboost::common::ParallelFor<unsigned int,xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(xgboost::SparsePage const&,unsigned int,unsigned long)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t **a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *ptr;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  std::exception_ptr v63;
  std::mutex v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v62 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v63);
    if (v63.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/threading_utils.h");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"n_threads >= 1", 14);
      v22 = *((char *)v63.__ptr_ + 23);
      v23 = v22 >= 0 ? v63.__ptr_ : *(void **)v63.__ptr_;
      v24 = v22 >= 0 ? *((unsigned __int8 *)v63.__ptr_ + 23) : *((_QWORD *)v63.__ptr_ + 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
      ptr = v63.__ptr_;
      v63.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, (uint64_t)ptr);
    }
  }
  v63.__ptr_ = 0;
  v64.__m_.__sig = 850045863;
  memset(v64.__m_.__opaque, 0, sizeof(v64.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v11 = 0;
        v12 = *a5;
        v13 = a5[1];
        do
        {
          if (v12 != v13)
          {
            v14 = *a6;
            v15 = *(_QWORD *)(*a6 + 8 * v11);
            v16 = v12;
            do
            {
              v17 = *v16;
              v16 += 3;
              v15 += *(_QWORD *)(v17 + 8 * v11);
              *(_QWORD *)(v14 + 8 * v11) = v15;
            }
            while (v16 != v13);
          }
          ++v11;
        }
        while (v11 != a1);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v27 = 0;
          v28 = *a5;
          v29 = a5[1];
          do
          {
            if (v28 != v29)
            {
              v30 = *a6;
              v31 = *(_QWORD *)(*a6 + 8 * v27);
              v32 = v28;
              do
              {
                v33 = *v32;
                v32 += 3;
                v31 += *(_QWORD *)(v33 + 8 * v27);
                *(_QWORD *)(v30 + 8 * v27) = v31;
              }
              while (v32 != v29);
            }
            ++v27;
          }
          while (v27 != a1);
        }
      }
      else if (a1)
      {
        v48 = 0;
        v49 = *a5;
        v50 = a5[1];
        do
        {
          if (v49 != v50)
          {
            v51 = *a6;
            v52 = *(_QWORD *)(*a6 + 8 * v48);
            v53 = v49;
            do
            {
              v54 = *v53;
              v53 += 3;
              v52 += *(_QWORD *)(v54 + 8 * v48);
              *(_QWORD *)(v51 + 8 * v48) = v52;
            }
            while (v53 != v50);
          }
          ++v48;
        }
        while (v48 != a1);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v34 = 0;
          v35 = *a5;
          v36 = a5[1];
          do
          {
            if (v35 != v36)
            {
              v37 = *a6;
              v38 = *(_QWORD *)(*a6 + 8 * v34);
              v39 = v35;
              do
              {
                v40 = *v39;
                v39 += 3;
                v38 += *(_QWORD *)(v40 + 8 * v34);
                *(_QWORD *)(v37 + 8 * v34) = v38;
              }
              while (v39 != v36);
            }
            ++v34;
          }
          while (v34 != a1);
        }
      }
      else if (a1)
      {
        v55 = 0;
        v56 = *a5;
        v57 = a5[1];
        do
        {
          if (v56 != v57)
          {
            v58 = *a6;
            v59 = *(_QWORD *)(*a6 + 8 * v55);
            v60 = v56;
            do
            {
              v61 = *v60;
              v60 += 3;
              v59 += *(_QWORD *)(v61 + 8 * v55);
              *(_QWORD *)(v58 + 8 * v55) = v59;
            }
            while (v60 != v57);
          }
          ++v55;
        }
        while (v55 != a1);
      }
      break;
    case 3:
      if (a1)
      {
        v41 = 0;
        v42 = *a5;
        v43 = a5[1];
        do
        {
          if (v42 != v43)
          {
            v44 = *a6;
            v45 = *(_QWORD *)(*a6 + 8 * v41);
            v46 = v42;
            do
            {
              v47 = *v46;
              v46 += 3;
              v45 += *(_QWORD *)(v47 + 8 * v41);
              *(_QWORD *)(v44 + 8 * v41) = v45;
            }
            while (v46 != v43);
          }
          ++v41;
        }
        while (v41 != a1);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v63);
  std::mutex::~mutex(&v64);
  std::exception_ptr::~exception_ptr(&v63);
}

void sub_220E2319C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_220E23264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::WQSummary<float,float>::Entry *,xgboost::common::detail::SpanIterator<xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>,false>>(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v5 = *a4;
    v6 = 16 * a5;
    do
    {
      if (a5 >= v5 || (*(_OWORD *)(a4[1] + v6) = *a2, v5 = *a4, a5 == *a4))
        std::terminate();
      ++a2;
      ++a5;
      v6 += 16;
    }
    while (a2 != a3);
    a2 = a3;
  }
  *result = a2;
  result[1] = a4;
  result[2] = a5;
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Max,unsigned long>(unint64_t *result, unint64_t *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 40)
    {
      v5 = *(void **)(i + 16);
      if (v5)
      {
        *(_QWORD *)(i + 24) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 xgboost::common::WQSummary<float,float>::SetPrune(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  __n128 result;
  float v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 <= a3)
  {
    xgboost::common::WQSummary<float,float>::CopyFrom(a1, a2);
  }
  else
  {
    result.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a2 + 4);
    v5 = *(float *)(*(_QWORD *)a2 + 16 * v3 - 16);
    v6 = a3 - 1;
    *(_OWORD *)*(_QWORD *)a1 = *(_OWORD *)*(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = 1;
    if (a3 - 1 < 2)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = v5 - result.n128_f32[0];
      v9 = 1;
      v10 = 1;
      do
      {
        v11 = v10;
        v12 = (float)(result.n128_f32[0] + (float)((float)(v8 * (float)v9) / (float)v6))
            + (float)(result.n128_f32[0] + (float)((float)(v8 * (float)v9) / (float)v6));
        v14 = *(_OWORD **)a2;
        v13 = *(_QWORD *)(a2 + 8);
        v15 = v13 - 1;
        if (v11 <= v13 - 1)
          v10 = v13 - 1;
        else
          v10 = v11;
        v16 = (float *)&v14[v11 + 1] + 1;
        while (v10 != v11)
        {
          ++v11;
          v17 = *v16 + *(v16 - 1);
          v16 += 4;
          if (v12 < v17)
          {
            v10 = v11 - 1;
            break;
          }
        }
        if (v10 == v15)
          break;
        v18 = (float *)&v14[v10];
        v19 = (float *)&v14[v10 + 1];
        if (v12 >= (float)((float)(*v18 + v18[2]) + (float)(v19[1] - v19[2])))
        {
          if (v10 + 1 != v7)
          {
            v22 = *(_OWORD **)a1;
            v23 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v23 + 1;
            v22[v23] = *(_OWORD *)v19;
            v7 = v10 + 1;
          }
        }
        else if (v10 != v7)
        {
          v20 = *(_OWORD **)a1;
          v21 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v21 + 1;
          v20[v21] = *(_OWORD *)v18;
          v7 = v10;
        }
        ++v9;
      }
      while (v9 != v6);
    }
    v24 = *(_QWORD *)(a2 + 8) - 1;
    if (v7 != v24)
    {
      v25 = *(_OWORD **)a2;
      v26 = *(_OWORD **)a1;
      v27 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v27 + 1;
      result = (__n128)v25[v24];
      v26[v27] = result;
    }
  }
  return result;
}

void xgboost::common::WQSummary<float,float>::CopyFrom(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v4 = *(const void **)a2;
  if (v4)
  {
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      memcpy(v5, v4, 16 * v6);
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v37 = 0;
      if (v17)
      {
        dmlc::LogCheckFormat<unsigned long,int>(&v38);
        if (v38)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
          v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"this->size == 0", 15);
          v22 = *(char *)(v38 + 23);
          v23 = v22 >= 0 ? v38 : *(_QWORD *)v38;
          v24 = v22 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
          v26 = v38;
          v38 = 0;
          if (v26)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v26);
        }
      }
      v27 = *(_QWORD *)(a2 + 8);
      v37 = 0;
      if (v27)
      {
        dmlc::LogCheckFormat<unsigned long,int>(&v38);
        if (v38)
        {
          v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
          dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
          v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"src.size == 0", 13);
          v32 = *(char *)(v38 + 23);
          if (v32 >= 0)
            v33 = v38;
          else
            v33 = *(_QWORD *)v38;
          if (v32 >= 0)
            v34 = *(unsigned __int8 *)(v38 + 23);
          else
            v34 = *(_QWORD *)(v38 + 8);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
          v36 = v38;
          v38 = 0;
          if (v36)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v36);
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    v37 = 0;
    if (v7)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v38);
      if (v38)
      {
        v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"src.size == 0", 13);
        v12 = *(char *)(v38 + 23);
        v13 = v12 >= 0 ? v38 : *(_QWORD *)v38;
        v14 = v12 >= 0 ? *(unsigned __int8 *)(v38 + 23) : *(_QWORD *)(v38 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
        v16 = v38;
        v38 = 0;
        if (v16)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, v16);
      }
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_220E238E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::common::WQSummary<float,float>::SetCombine(float32x2_t **a1, float32x2_t **a2, float32x2_t **a3)
{
  float32x2_t *v5;
  float32x2_t **v6;
  float32x2_t *v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32_t v18;
  float32x2_t *v19;
  float32x2_t *v20;
  float32_t v21;
  __int32 v22;
  float32_t v23;
  __int32 v24;
  uint64_t v25;
  float v26;
  float32x2_t *v27;
  float32x2_t *v28;
  float32_t v29;
  float32x2_t v30;
  float32x2_t *v31;
  float v32;
  float32_t v33;
  float32x2_t v34;
  unint64_t v35;
  float *v36;
  float v37;
  unint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  BOOL v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string *Entry;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *__p[2];
  char v53;
  _QWORD v54[34];

  v5 = a2[1];
  if (!v5)
  {
    a2 = a3;
    goto LABEL_17;
  }
  v6 = a2;
  v7 = a3[1];
  if (!v7)
  {
LABEL_17:
    xgboost::common::WQSummary<float,float>::CopyFrom((uint64_t)a1, (uint64_t)a2);
    return;
  }
  v8 = 0;
  v9 = *a2;
  v10 = (uint64_t)&(*a2)[2 * (_QWORD)v5];
  v11 = *a3;
  v12 = (uint64_t)&(*a3)[2 * (_QWORD)v7];
  v13 = *a1;
  v14 = 0.0;
  v15 = 0.0;
  do
  {
    v16 = v9[1].f32[1];
    v17 = v11[1].f32[1];
    if (v16 == v17)
    {
      v18 = v9[1].f32[0] + v11[1].f32[0];
      v19 = &v13[v8];
      *v19 = vadd_f32(*v9, *v11);
      v19[1].f32[0] = v18;
      v19[1].f32[1] = v16;
      v15 = v9->f32[0] + v9[1].f32[0];
      v14 = v11->f32[0] + v11[1].f32[0];
      v9 += 2;
LABEL_9:
      v11 += 2;
      goto LABEL_10;
    }
    v20 = &v13[v8];
    if (v16 >= v17)
    {
      v23 = v11->f32[1] + (float)(v9->f32[1] - v9[1].f32[0]);
      v24 = v11[1].i32[0];
      v13[v8].f32[0] = v15 + v11->f32[0];
      v20->f32[1] = v23;
      v20[1].i32[0] = v24;
      v20[1].f32[1] = v17;
      v14 = v11->f32[0] + v11[1].f32[0];
      goto LABEL_9;
    }
    v21 = v9->f32[1] + (float)(v11->f32[1] - v11[1].f32[0]);
    v22 = v9[1].i32[0];
    v13[v8].f32[0] = v14 + v9->f32[0];
    v20->f32[1] = v21;
    v20[1].i32[0] = v22;
    v20[1].f32[1] = v16;
    v15 = v9->f32[0] + v9[1].f32[0];
    v9 += 2;
LABEL_10:
    v8 += 2;
  }
  while (v9 != (float32x2_t *)v10 && v11 != (float32x2_t *)v12);
  if (v9 == (float32x2_t *)v10)
  {
    v31 = &v13[v8];
  }
  else
  {
    v25 = 0;
    v26 = *(float *)(v12 - 12);
    do
    {
      v27 = &v9[v25];
      v28 = &v13[v25 + v8];
      v29 = v26 + v9[v25].f32[1];
      v30 = v9[v25 + 1];
      v28->f32[0] = v14 + v9[v25].f32[0];
      v28->f32[1] = v29;
      v28[1] = v30;
      v25 += 2;
    }
    while (&v27[2] != (float32x2_t *)v10);
    v31 = &v13[v8 + v25];
  }
  if (v11 != (float32x2_t *)v12)
  {
    v32 = *(float *)(v10 - 12);
    do
    {
      v33 = v32 + v11->f32[1];
      v34 = v11[1];
      v31->f32[0] = v15 + v11->f32[0];
      v31->f32[1] = v33;
      v31[1] = v34;
      v31 += 2;
      v11 += 2;
    }
    while (v11 != (float32x2_t *)v12);
  }
  v35 = ((char *)v31 - (char *)v13) >> 4;
  a1[1] = (float32x2_t *)v35;
  if (v31 == v13)
  {
    v37 = 0.0;
    v39 = 0.0;
    v40 = 0.0;
  }
  else
  {
    v36 = (float *)v13 + 1;
    v37 = 0.0;
    v38 = v35;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    do
    {
      if (*(v36 - 1) >= v42)
      {
        v42 = *(v36 - 1);
      }
      else
      {
        *(v36 - 1) = v42;
        if (v37 < (float)(v42 - v42))
          v37 = v42 - v42;
      }
      if (*v36 >= v41)
      {
        v41 = *v36;
      }
      else
      {
        *v36 = v41;
        if (v39 < (float)(v41 - v41))
          v39 = v41 - v41;
      }
      v43 = v42 + v36[1];
      if (v41 < v43)
      {
        *v36 = v43;
        if (v40 < (float)(v43 - v43))
          v40 = v43 - v43;
        v41 = v43;
      }
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  v45 = v37 <= 10.0 && v39 <= 10.0 && v40 <= 10.0;
  if (!v45 && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v54, (uint64_t)__p, 308, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"mingap=", 7);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", maxgap=", 9);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", wgap=", 7);
    std::ostream::operator<<();
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v54);
    if (v53 < 0)
      operator delete(__p[0]);
    v35 = (unint64_t)a1[1];
  }
  if ((float32x2_t *)v35 > (float32x2_t *)((char *)v6[1] + (_QWORD)a3[1]))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
    v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Check failed: size <= sa.size + sb.size", 39);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"bug in combine", 14);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v54);
  }
}

void sub_220E23D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 8), v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(float *)v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= *(float *)&v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *a1)
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(_QWORD *)a1))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::common::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  do
  {
    v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    v9 = &a1[v2];
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    v6 = v9 - 2;
  }
  if (v6 != a1)
    *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *a1)
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = *a4;
      if (*v8 >= *a4)
      {
        v11 = *((_DWORD *)a4 + 1);
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  int v9;
  _QWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 8);
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      v9 = *(_DWORD *)(a2 - 4);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - v7;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>(a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_220E24B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *xgboost::common::`anonymous namespace'::QuantileAllreduce<xgboost::common::WQSummary<float,float>::Entry>::Values(unint64_t *a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14[2];

  v4 = a3;
  v5 = a3 + 1;
  v6 = a2[2];
  if (v6 <= v5
    || v6 <= a3
    || (xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(v14, a2, *(_QWORD *)(a2[3] + 8 * a3), *(_QWORD *)(a2[3] + 8 * v5) - *(_QWORD *)(a2[3] + 8 * a3)), xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v12, a2 + 4, (a2[6] + 1) * v4, a2[6] + 1), v12 <= a4)|| (v10 = a4 + 1, v12 <= v10))
  {
    std::terminate();
  }
  return xgboost::common::Span<xgboost::common::WQSummary<float,float>::Entry,18446744073709551615ul>::subspan(a1, v14, *(_QWORD *)(v13 + 8 * a4), *(_QWORD *)(v13 + 8 * v10) - *(_QWORD *)(v13 + 8 * a4));
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::Push(uint64_t a1, float a2, float a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float *v21;
  unint64_t v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float32x2_t **v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  char v60;

  if (a3 != 0.0)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8) - v7;
    if (v6 == v9 >> 3 && *(float *)(v7 + 8 * v6 - 8) != a2)
    {
      if (v9 == 8)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize(a1, 2 * *(_QWORD *)(a1 + 40));
      }
      else
      {
        v10 = 2 * *(_QWORD *)(a1 + 40);
        if (v10 > (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 112, v10);
          if (*(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 112))
            v11 = 0;
          else
            v11 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 96) = v11;
          v7 = *(_QWORD *)a1;
          v6 = *(_QWORD *)(a1 + 24);
        }
        v12 = 126 - 2 * __clz(v6);
        if (v6)
          v13 = v12;
        else
          v13 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v7, (float *)(v7 + 8 * v6), (uint64_t)&v60, v13, 1);
        *(_QWORD *)(a1 + 104) = 0;
        v14 = *(_QWORD *)(a1 + 24);
        if (v14)
        {
          v15 = 0;
          v16 = 0;
          v17 = *(_QWORD *)a1;
          v18 = *(_QWORD *)(a1 + 96);
          v19 = *(_QWORD *)a1 + 12;
          v20 = 0.0;
          do
          {
            v21 = (float *)(v17 + 8 * v16);
            v22 = v16 + 1;
            v24 = *v21;
            v23 = v21[1];
            if (v16 + 1 < v14)
            {
              v25 = (float *)(v19 + 8 * v16);
              while (*(v25 - 1) == v24)
              {
                v26 = *v25;
                v25 += 2;
                v23 = v23 + v26;
                if (v14 == ++v22)
                {
                  v22 = v14;
                  break;
                }
              }
            }
            v27 = (float *)(v18 + 16 * v15);
            *v27 = v20;
            v20 = v20 + v23;
            ++v15;
            v27[1] = v20;
            v27[2] = v23;
            v27[3] = v24;
            v16 = v22;
          }
          while (v22 < v14);
          *(_QWORD *)(a1 + 104) = v15;
        }
        v28 = (float32x2_t **)(a1 + 96);
        *(_QWORD *)(a1 + 24) = 0;
        v29 = 2 * *(_QWORD *)(a1 + 40);
        if (v29 > (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 112, v29);
          if (*(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 112))
            v30 = 0;
          else
            v30 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 96) = v30;
        }
        v31 = 0;
        v32 = a1 + 72;
        v33 = *(_QWORD *)(a1 + 48);
        for (i = 1; ; ++i)
        {
          v35 = i + 1;
          if (i + 1 > (unint64_t)((*(_QWORD *)(a1 + 56) - v33) >> 4))
          {
            std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v32, *(_QWORD *)(a1 + 40) * v35);
            v36 = *(_QWORD *)(a1 + 48);
            v33 = *(_QWORD *)(a1 + 56);
            v37 = v33 - v36;
            v38 = (v33 - v36) >> 4;
            if (v35 <= v38)
            {
              if (v35 < v38)
              {
                v33 = v36 + 16 * v35;
                *(_QWORD *)(a1 + 56) = v33;
              }
            }
            else
            {
              v39 = 16 * v31 + 16;
              v40 = *(_QWORD *)(a1 + 64);
              if (v35 - v38 <= (v40 - v33) >> 4)
              {
                bzero(*(void **)(a1 + 56), ((v39 - v37) & 0xFFFFFFFFFFFFFFF0) + 16);
                v33 += 16 * (v35 - v38);
                *(_QWORD *)(a1 + 56) = v33;
                v32 = a1 + 72;
              }
              else
              {
                if (v35 >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v41 = v40 - v36;
                v42 = v41 >> 3;
                if (v41 >> 3 <= v35)
                  v42 = i + 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
                  v43 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v43 = v42;
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>>>(v43);
                v46 = v45;
                v47 = &v44[16 * v38];
                bzero(v47, ((v39 - v37) & 0xFFFFFFFFFFFFFFF0) + 16);
                v49 = *(char **)(a1 + 48);
                v48 = *(char **)(a1 + 56);
                if (v48 == v49)
                {
                  v32 = a1 + 72;
                }
                else
                {
                  v32 = a1 + 72;
                  do
                  {
                    *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
                    v47 -= 16;
                    v48 -= 16;
                  }
                  while (v48 != v49);
                  v48 = *(char **)(a1 + 48);
                }
                v50 = v46;
                v33 = (uint64_t)&v44[16 * v35];
                *(_QWORD *)(a1 + 48) = v47;
                *(_QWORD *)(a1 + 56) = v33;
                *(_QWORD *)(a1 + 64) = &v44[16 * v50];
                if (v48)
                {
                  operator delete(v48);
                  v33 = *(_QWORD *)(a1 + 56);
                }
              }
            }
            v51 = *(_QWORD *)(a1 + 48);
            if (v33 != v51)
            {
              v52 = (v33 - v51) >> 4;
              if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
                v53 = 0;
              else
                v53 = *(_QWORD *)(a1 + 72);
              if (v52 <= 1)
                v52 = 1;
              v54 = 16 * *(_QWORD *)(a1 + 40);
              v55 = *(_QWORD **)(a1 + 48);
              do
              {
                *v55 = v53;
                v55 += 2;
                v53 += v54;
                --v52;
              }
              while (v52);
              v33 = v51;
            }
          }
          v56 = v33 + 16 * i;
          if (!*(_QWORD *)(v56 + 8))
          {
            xgboost::common::WQSummary<float,float>::SetPrune(v56, (uint64_t)v28, *(_QWORD *)(a1 + 40));
            goto LABEL_62;
          }
          xgboost::common::WQSummary<float,float>::SetPrune(v33, (uint64_t)v28, *(_QWORD *)(a1 + 40));
          xgboost::common::WQSummary<float,float>::SetCombine(v28, *(float32x2_t ***)(a1 + 48), (float32x2_t **)(*(_QWORD *)(a1 + 48) + 16 * i));
          v33 = *(_QWORD *)(a1 + 48);
          if (*(_QWORD *)(a1 + 104) <= *(_QWORD *)(a1 + 40))
            break;
          *(_QWORD *)(v33 + 16 * i + 8) = 0;
          ++v31;
        }
        xgboost::common::WQSummary<float,float>::CopyFrom(v33 + 16 * i, (uint64_t)v28);
      }
    }
LABEL_62:
    v57 = *(_QWORD *)(a1 + 24);
    v58 = *(_QWORD *)a1;
    if (v57 && *(float *)(v58 + 8 * (v57 - 1)) == a2)
    {
      *(float *)(v58 + 8 * (v57 - 1) + 4) = *(float *)(v58 + 8 * (v57 - 1) + 4) + a3;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v57 + 1;
      v59 = (float *)(v58 + 8 * v57);
      *v59 = a2;
      v59[1] = a3;
    }
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t dmlc::LogCheckFormat<unsigned int,unsigned int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E2539C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::WXQuantileSketch<float,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 136 * ((136 * a2 - 136) / 0x88) + 136;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[136 * v8];
    v18 = &v12[136 * v11];
    v14 = 136 * ((136 * a2 - 136) / 0x88) + 136;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer(&v15);
  }
}

void sub_220E25520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::common::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 136;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::QuantileSketchTemplate(v7 - 136, v9);
      v7 = *((_QWORD *)&v15 + 1) - 136;
      *((_QWORD *)&v15 + 1) -= 136;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_220E25690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::QuantileSketchTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Queue::QEntry*,xgboost::common::WQSummary<float,float>::Queue::QEntry*>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<xgboost::common::WXQSummary<float,float>>::__init_with_size[abi:ne180100]<xgboost::common::WXQSummary<float,float>*,xgboost::common::WXQSummary<float,float>*>((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__init_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4);
  xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(a1 + 96, a2 + 96);
  return a1;
}

void sub_220E25748(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<xgboost::common::WXQSummary<float,float>>::__init_with_size[abi:ne180100]<xgboost::common::WXQSummary<float,float>*,xgboost::common::WXQSummary<float,float>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E257F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost::common::WQSummary<float,float>::Entry*,xgboost::common::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
  }
  if (v5 == v4)
    v4 = 0;
  *(_QWORD *)a1 = v4;
  return a1;
}

void sub_220E25884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost::common::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<xgboost::common::WXQuantileSketch<float,float>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<xgboost::common::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_220E25AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 40;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(v7 - 40, v9);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_220E25C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::GetSummary(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float *v16;
  unint64_t v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  if (a1[7] == a1[6])
    v4 = (a1[1] - *a1) >> 3;
  else
    v4 = 2 * a1[5];
  if (v4 > (a2[3] - a2[2]) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a2 + 2), v4);
    if (a2[3] == a2[2])
      v5 = 0;
    else
      v5 = a2[2];
    *a2 = v5;
  }
  v6 = a1[3];
  v7 = 126 - 2 * __clz(v6);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(*a1, (float *)(*a1 + 8 * v6), (uint64_t)&v29, v8, 1);
  a2[1] = 0;
  v9 = a1[3];
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *a1;
    v13 = *a2;
    v14 = *a1 + 12;
    v15 = 0.0;
    do
    {
      v16 = (float *)(v12 + 8 * v11);
      v17 = v11 + 1;
      v19 = *v16;
      v18 = v16[1];
      if (v11 + 1 < v9)
      {
        v20 = (float *)(v14 + 8 * v11);
        while (*(v20 - 1) == v19)
        {
          v21 = *v20;
          v20 += 2;
          v18 = v18 + v21;
          if (v9 == ++v17)
          {
            v17 = v9;
            break;
          }
        }
      }
      v22 = (float *)(v13 + 16 * v10);
      *v22 = v15;
      v15 = v15 + v18;
      ++v10;
      v22[1] = v15;
      v22[2] = v18;
      v22[3] = v19;
      v11 = v17;
    }
    while (v17 < v9);
    a2[1] = v10;
  }
  else
  {
    v10 = 0;
  }
  v23 = (_QWORD *)a1[6];
  v24 = a1[5];
  if ((_QWORD *)a1[7] == v23)
  {
    if (v10 <= v24)
      return;
    v25 = (uint64_t)(a1 + 12);
    if (v24 > (a1[15] - a1[14]) >> 4)
    {
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), a1[5]);
      if (a1[15] == a1[14])
        v28 = 0;
      else
        v28 = a1[14];
      a1[12] = v28;
      v24 = a1[5];
    }
    xgboost::common::WXQSummary<float,float>::SetPrune(a1 + 12, a2, v24);
  }
  else
  {
    xgboost::common::WXQSummary<float,float>::SetPrune(v23, a2, v24);
    v25 = a1[6];
    if ((unint64_t)(a1[7] - v25) >= 0x11)
    {
      v26 = 1;
      v27 = 24;
      do
      {
        if (*(_QWORD *)(v25 + v27))
        {
          if (*(_QWORD *)(v25 + 8))
          {
            xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)a2, (float32x2_t **)v25, (float32x2_t **)(v25 + v27 - 8));
            xgboost::common::WXQSummary<float,float>::SetPrune((_QWORD *)a1[6], a2, a1[5]);
          }
          else
          {
            xgboost::common::WQSummary<float,float>::CopyFrom(v25, v25 + v27 - 8);
          }
        }
        ++v26;
        v25 = a1[6];
        v27 += 16;
      }
      while (v26 < (a1[7] - v25) >> 4);
    }
  }
  xgboost::common::WQSummary<float,float>::CopyFrom((uint64_t)a2, v25);
}

void xgboost::common::WXQSummary<float,float>::SetPrune(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *Entry;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  unint64_t v40;
  float *v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  _QWORD v53[34];

  v5 = a2[1];
  if (v5 <= a3)
  {
    xgboost::common::WQSummary<float,float>::CopyFrom((uint64_t)a1, (uint64_t)a2);
  }
  else
  {
    v6 = *a2;
    if (a3 < 3 || (v7 = *(float *)(v6 + 4), v8 = v5 - 1, v9 = *(float *)(v6 + 16 * (v5 - 1)) - v7, v9 == 0.0))
    {
      *(_OWORD *)*a1 = *(_OWORD *)v6;
      *(_OWORD *)(*a1 + 16) = *(_OWORD *)(*a2 + 16 * a2[1] - 16);
      a1[1] = 2;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = a3 - 2;
      if (v9 >= 0.001)
        v14 = *(float *)(v6 + 16 * (v5 - 1)) - v7;
      else
        v14 = 0.001;
      v15 = (float)(v14 + v14) / (float)v13;
      v16 = v5 - 2;
      v17 = (float *)(v6 + 24);
      v18 = 0.0;
      do
      {
        v19 = v10 + 1;
        v20 = *(v17 - 1) - *v17;
        if ((float)(*(v17 - 2) + *v17) > (float)(v15 + v20))
        {
          if (v10 != v11)
            v18 = v18 + (float)(v20 - (float)(*(float *)(v6 + 16 * v11) + *(float *)(v6 + 16 * v11 + 8)));
          ++v12;
          v11 = v10 + 1;
        }
        v17 += 4;
        ++v10;
      }
      while (v16 != v19);
      if (v11 != v16)
        v18 = v18
            + (float)((float)(*(float *)(v6 + 16 * v8 + 4) - *(float *)(v6 + 16 * v8 + 8))
                    - (float)(*(float *)(v6 + 16 * v11) + *(float *)(v6 + 16 * v11 + 8)));
      v21 = v13 - v12;
      if (v13 <= v12)
      {
        v22 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
        if (*(int *)(v22 + 4) >= 2)
        {
          v23 = v22;
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v53, (uint64_t)__p, 425, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" check quantile stats, nbig=", 28);
          v24 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", n=", 4);
          std::ostream::operator<<();
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v53);
          if (v52 < 0)
            operator delete(__p[0]);
          if (*(int *)(v23 + 4) >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
            xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v53, (uint64_t)__p, 426, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" srcsize=", 9);
            v25 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", maxsize=", 10);
            v26 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", range=", 8);
            v27 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", chunk=", 8);
            std::ostream::operator<<();
            xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v53);
            if (v52 < 0)
              operator delete(__p[0]);
          }
        }
        xgboost::common::WQSummary<float,float>::Print((uint64_t)a2);
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v53);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v53);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: nbig < n", 22);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"quantile: too many large chunk", 30);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v53);
        v6 = *a2;
      }
      *(_OWORD *)*a1 = *(_OWORD *)v6;
      a1[1] = 1;
      v32 = a2[1];
      if (v32 >= 2)
      {
        v33 = 0;
        v34 = 0;
        v35 = *a2;
        v36 = 1;
        v37 = 1;
        do
        {
          if (v36 == v32 - 1
            || (float)(*(float *)(v35 + 16 * v36) + *(float *)(v35 + 16 * v36 + 8)) > (float)(v15
                                                                                            + (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8))))
          {
            if (v34 != v36 - 1 && v37 < v21)
            {
              v38 = (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8))
                  + (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8));
              while (1)
              {
                v39 = (float)(v7 + (float)((float)(v18 * (float)v37) / (float)v21))
                    + (float)(v7 + (float)((float)(v18 * (float)v37) / (float)v21));
                v35 = *a2;
                if (v39 >= v38)
                  break;
                v40 = v34 <= v36 ? v36 : v34;
                v41 = (float *)(v35 + 16 * v34 + 20);
                while (v40 != v34)
                {
                  ++v34;
                  v42 = *v41 + *(v41 - 1);
                  v41 += 4;
                  if (v39 < v42)
                  {
                    --v34;
                    goto LABEL_39;
                  }
                }
                v34 = v40;
LABEL_39:
                if (v34 == v36)
                  break;
                v43 = v35 + 16 * v34;
                v44 = v35 + 16 * (v34 + 1);
                if (v39 >= (float)((float)(*(float *)v43 + *(float *)(v43 + 8))
                                  + (float)(*(float *)(v44 + 4) - *(float *)(v44 + 8))))
                {
                  if (v34 + 1 != v33)
                  {
                    v47 = *a1;
                    v48 = a1[1];
                    a1[1] = v48 + 1;
                    *(_OWORD *)(v47 + 16 * v48) = *(_OWORD *)v44;
                    v33 = v34 + 1;
                  }
                }
                else if (v34 != v33)
                {
                  v45 = *a1;
                  v46 = a1[1];
                  a1[1] = v46 + 1;
                  *(_OWORD *)(v45 + 16 * v46) = *(_OWORD *)v43;
                  v33 = v34;
                }
                if (++v37 >= v21)
                {
                  v35 = *a2;
                  v37 = v13 - v12;
                  break;
                }
              }
            }
            if (v33 != v36)
            {
              v49 = *a1;
              v50 = a1[1];
              a1[1] = v50 + 1;
              *(_OWORD *)(v49 + 16 * v50) = *(_OWORD *)(v35 + 16 * v36);
              v35 = *a2;
            }
            v7 = v7
               + (float)((float)(*(float *)(v35 + 16 * v36) + *(float *)(v35 + 16 * v36 + 8))
                       - (float)(*(float *)(v35 + 16 * v36 + 4) - *(float *)(v35 + 16 * v36 + 8)));
            v32 = a2[1];
            v34 = v36;
            v33 = v36;
          }
          ++v36;
        }
        while (v36 < v32);
      }
    }
  }
}

void sub_220E26498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::WQSummary<float,float>::Print(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[33];
  int v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v8);
      v9 = 4;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
      v4 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] rmin=", 7);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", rmax=", 7);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", wmin=", 7);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", v=", 4);
      std::ostream::operator<<();
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v8);
      ++v3;
      v2 += 16;
    }
    while (v3 < *(_QWORD *)(a1 + 8));
  }
}

void sub_220E2660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>((uint64_t)(a1 + 2), a2);
    *a1 = v4;
    a1[2] = &v4[40 * v5];
    v6 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v6);
    a1[1] = &v4[v6];
  }
  return a1;
}

void sub_220E266D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;

  v5 = (unint64_t)(a3 - 8) >> 4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 16;
  if (v5 > (v8 - v7) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v6, v5);
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
      v9 = 0;
    else
      v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = v9;
  }
  v14 = 0;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  if (v10)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v10);
    if (__p[1] == __p[0])
      v11 = 0;
    else
      v11 = __p[0];
    *(_QWORD *)&v12 = v11;
  }
  xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)&v12, (float32x2_t **)a1, (float32x2_t **)a2);
  xgboost::common::WXQSummary<float,float>::SetPrune((_QWORD *)a1, (uint64_t *)&v12, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_220E2683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::Push(uint64_t *a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  unint64_t v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a3 != 0.0)
  {
    v36 = v6;
    v37 = v5;
    v38 = v3;
    v39 = v4;
    v10 = a1[3];
    v11 = *a1;
    v13 = a1[1] - v11;
    if (v10 == v13 >> 3 && *(float *)(v11 + 8 * v10 - 8) != a2)
    {
      if (v13 == 8)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)a1, 2 * a1[5]);
      }
      else
      {
        v14 = 2 * a1[5];
        if (v14 > (a1[15] - a1[14]) >> 4)
        {
          std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), v14);
          if (a1[15] == a1[14])
            v15 = 0;
          else
            v15 = a1[14];
          a1[12] = v15;
          v11 = *a1;
          v10 = a1[3];
        }
        v16 = 126 - 2 * __clz(v10);
        if (v10)
          v17 = v16;
        else
          v17 = 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost::common::WQSummary<float,float>::Queue::QEntry *,false>(v11, (float *)(v11 + 8 * v10), (uint64_t)&v35, v17, 1);
        a1[13] = 0;
        v18 = a1[3];
        if (v18)
        {
          v19 = 0;
          v20 = 0;
          v21 = *a1;
          v22 = a1[12];
          v23 = *a1 + 12;
          v24 = 0.0;
          do
          {
            v25 = (float *)(v21 + 8 * v20);
            v26 = v20 + 1;
            v28 = *v25;
            v27 = v25[1];
            if (v20 + 1 < v18)
            {
              v29 = (float *)(v23 + 8 * v20);
              while (*(v29 - 1) == v28)
              {
                v30 = *v29;
                v29 += 2;
                v27 = v27 + v30;
                if (v18 == ++v26)
                {
                  v26 = v18;
                  break;
                }
              }
            }
            v31 = (float *)(v22 + 16 * v19);
            *v31 = v24;
            v24 = v24 + v27;
            ++v19;
            v31[1] = v24;
            v31[2] = v27;
            v31[3] = v28;
            v20 = v26;
          }
          while (v26 < v18);
          a1[13] = v19;
        }
        a1[3] = 0;
        xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp((uint64_t)a1);
      }
    }
    v32 = a1[3];
    v33 = *a1;
    if (v32 && *(float *)(v33 + 8 * (v32 - 1)) == a2)
    {
      *(float *)(v33 + 8 * (v32 - 1) + 4) = *(float *)(v33 + 8 * (v32 - 1) + 4) + a3;
    }
    else
    {
      a1[3] = v32 + 1;
      v34 = (float *)(v33 + 8 * v32);
      *v34 = a2;
      v34[1] = a3;
    }
  }
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = (uint64_t *)(v2 - 16);
  v5 = 2 * *(_QWORD *)(v2 - 72);
  if (v5 > (*(_QWORD *)(v2 + 8) - v3) >> 4)
  {
    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v2, v5);
    if (*(_QWORD *)(a1 + 120) == *(_QWORD *)(a1 + 112))
      v6 = 0;
    else
      v6 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 96) = v6;
  }
  v7 = *(char **)(a1 + 48);
  for (i = 1; ; ++i)
  {
    if (i + 1 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v7) >> 4))
    {
      std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(a1 + 72, *(_QWORD *)(a1 + 40) * (i + 1));
      v15 = 0uLL;
      std::vector<xgboost::common::WXQSummary<float,float>>::resize(a1 + 48, i + 1, &v15);
      v7 = *(char **)(a1 + 48);
      v9 = *(char **)(a1 + 56);
      if (v9 == v7)
      {
        v7 = *(char **)(a1 + 56);
      }
      else
      {
        v10 = (v9 - v7) >> 4;
        if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
          v11 = 0;
        else
          v11 = *(_QWORD *)(a1 + 72);
        if (v10 <= 1)
          v10 = 1;
        v12 = 16 * *(_QWORD *)(a1 + 40);
        v13 = *(_QWORD **)(a1 + 48);
        do
        {
          *v13 = v11;
          v13 += 2;
          v11 += v12;
          --v10;
        }
        while (v10);
      }
    }
    v14 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)&v7[16 * i + 8])
    {
      xgboost::common::WXQSummary<float,float>::SetPrune(&v7[16 * i], v4, v14);
      return;
    }
    xgboost::common::WXQSummary<float,float>::SetPrune(v7, v4, v14);
    xgboost::common::WQSummary<float,float>::SetCombine((float32x2_t **)v4, *(float32x2_t ***)(a1 + 48), (float32x2_t **)(*(_QWORD *)(a1 + 48) + 16 * i));
    v7 = *(char **)(a1 + 48);
    if (*(_QWORD *)(a1 + 104) <= *(_QWORD *)(a1 + 40))
      break;
    *(_QWORD *)&v7[16 * i + 8] = 0;
  }
  xgboost::common::WQSummary<float,float>::CopyFrom((uint64_t)&v7[16 * i], (uint64_t)v4);
}

void std::vector<xgboost::common::WXQSummary<float,float>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::common::WXQSummary<float,float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::common::WXQSummary<float,float>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void xgboost::common::SortedQuantile::Push(xgboost::common::SortedQuantile *this, float a2, float a3, unsigned int a4)
{
  double v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  std::string *Entry;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  void *__p[2];
  char v38;
  uint64_t v39[34];
  unsigned int v40;

  v40 = a4;
  v7 = *((double *)this + 4);
  if (v7 == -1.0)
  {
    *((_QWORD *)this + 4) = 0;
    *((float *)this + 6) = a2;
    v8 = a3;
LABEL_3:
    *((double *)this + 2) = v8;
    return;
  }
  v9 = *((float *)this + 6);
  if (v9 == a2)
  {
    v8 = *((double *)this + 2) + a3;
    goto LABEL_3;
  }
  v11 = *((double *)this + 1);
  v10 = *((double *)this + 2);
  v12 = v11 + v10;
  if (v11 + v10 >= v7)
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 104);
    if (v13 == a4)
    {
      if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v39, (uint64_t)__p, 835, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"INFO: rmax=", 11);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", sum_total=", 12);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", naxt_goal=", 12);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", size=", 7);
        std::ostream::operator<<();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v39);
        if (v38 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v17 = a4;
      v18 = *(_QWORD *)(*((_QWORD *)this + 5) + 96);
      if (!v13 || v9 > *(float *)(v18 + 16 * v13 - 4))
      {
        v19 = v11;
        v20 = v12;
        v21 = (float *)(v18 + 16 * v13);
        *v21 = v19;
        v21[1] = v20;
        v22 = v10;
        v21[2] = v22;
        v21[3] = v9;
        if (v13 >= a4)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned int>(v39);
          if (v39[0])
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
            v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"sketch->temp.size < max_size", 28);
            v27 = *(char *)(v39[0] + 23);
            v28 = v27 >= 0 ? v39[0] : *(_QWORD *)v39[0];
            v29 = v27 >= 0 ? *(unsigned __int8 *)(v39[0] + 23) : *(_QWORD *)(v39[0] + 8);
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"invalid maximum size max_size=", 30);
            v32 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", stemp.size", 12);
            std::ostream::operator<<();
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
            v33 = v39[0];
            v39[0] = 0;
            if (v33)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v39, v33);
          }
        }
        v34 = *((_QWORD *)this + 5);
        v13 = *(_QWORD *)(v34 + 104) + 1;
        *(_QWORD *)(v34 + 104) = v13;
        v17 = v40;
        a4 = v40;
      }
      if (v13 == v17)
      {
        v35 = *(double *)this * 2.0 + 0.00000999999975;
      }
      else
      {
        v36 = *(double *)this * (double)v13 / (double)a4;
        v35 = v36;
      }
      *((double *)this + 4) = v35;
    }
  }
  *((double *)this + 1) = v12;
  *((double *)this + 2) = a3;
  *((float *)this + 6) = a2;
}

void sub_220E26FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SortedQuantile::Finalize(xgboost::common::SortedQuantile *this, unsigned int a2)
{
  double v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int v26;

  v26 = a2;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((_QWORD *)this + 5);
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6 || *((float *)this + 6) > *(float *)(*(_QWORD *)(v5 + 96) + 16 * v6 - 4))
  {
    if (v6 > a2)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>(&v25);
      if (v25)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/quantile.h");
        v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"sketch->temp.size <= max_size", 29);
        v11 = *(char *)(v25 + 23);
        if (v11 >= 0)
          v12 = v25;
        else
          v12 = *(_QWORD *)v25;
        if (v11 >= 0)
          v13 = *(unsigned __int8 *)(v25 + 23);
        else
          v13 = *(_QWORD *)(v25 + 8);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Finalize: invalid maximum size, max_size=", 41);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", stemp.size=", 13);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
        v17 = v25;
        v25 = 0;
        if (v17)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v25, v17);
      }
    }
    v18 = *((double *)this + 1);
    v19 = v3 + v4;
    v20 = *((double *)this + 2);
    v21 = *((_DWORD *)this + 6);
    v5 = *((_QWORD *)this + 5);
    v22 = *(_QWORD *)(v5 + 104);
    v23 = *(_QWORD *)(v5 + 96) + 16 * v22;
    *(float *)v23 = v18;
    *(float *)(v23 + 4) = v19;
    *(float *)(v23 + 8) = v20;
    *(_DWORD *)(v23 + 12) = v21;
    *(_QWORD *)(v5 + 104) = v22 + 1;
  }
  xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::PushTemp(v5);
}

void sub_220E27170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::__dmlc_registry_file_tag_gblinear__(xgboost::gbm *this)
{
  return 0;
}

void xgboost::gbm::LinearCheckLayer(xgboost::gbm *this)
{
  std::string *Entry;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v13 = (int)this;
  v11 = 0;
  if ((_DWORD)this)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v12);
    if (v12)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
      v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Check failed: ", 14);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"layer_begin == 0", 16);
      v5 = *(char *)(v12 + 23);
      if (v5 >= 0)
        v6 = v12;
      else
        v6 = *(_QWORD *)v12;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v12 + 23);
      else
        v7 = *(_QWORD *)(v12 + 8);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Linear booster does not support prediction range.", 49);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v11);
      v10 = v12;
      v12 = 0;
      if (v10)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v12, v10);
    }
  }
}

void sub_220E2728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogCheckFormat<unsigned int,int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E273DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<std::string>::~FieldEntry(void **this)
{
  *this = &unk_24E6B5AC0;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
}

{
  *this = &unk_24E6B5AC0;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
  JUMPOUT(0x227667068);
}

std::string *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::SetDefault(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::runtime_error *exception;
  std::string v18;
  _QWORD v19[33];

  if (!*(_BYTE *)(a1 + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Required parameter ", 19);
    v5 = *(char *)(a1 + 47);
    if (v5 >= 0)
      v6 = a1 + 24;
    else
      v6 = *(_QWORD *)(a1 + 24);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 47);
    else
      v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    v12 = *(_QWORD *)(a1 + 48);
    v11 = a1 + 48;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return std::string::operator=((std::string *)(a2 + *(_QWORD *)(a1 + 96)), (const std::string *)(a1 + 104));
}

void sub_220E275C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

std::string *dmlc::parameter::FieldEntry<std::string>::Set(uint64_t a1, uint64_t a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a2 + *(_QWORD *)(a1 + 96)), __str);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v4 = a2 + a1[12];
  if (*(char *)(v4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  else
    __p = *(std::string *)v4;
  (*(void (**)(_QWORD *, _QWORD *, std::string *))(*a1 + 64))(a1, v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v7[1] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v9);
}

void sub_220E27720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220E278D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::parameter::FieldEntry<std::string>::PrintDefaultValueString(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v12;
  char v13;

  v12 = 39;
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v12, 1);
  v6 = *(_QWORD *)(a1 + 104);
  v5 = a1 + 104;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  v13 = 39;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v13, 1);
}

_QWORD *dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::PrintValue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(char *)(a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *(_QWORD *)a3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::~FieldEntryBase(void **this)
{
  *this = &unk_24E6B5AC0;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
}

{
  *this = &unk_24E6B5AC0;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(this);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  uint64_t v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, a2 + *(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(uint64_t *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220E27CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

void dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<std::string>,std::string>::PrintDefaultValueString(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a1 + 127) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  else
    __p = *(std::string *)(a1 + 104);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220E27D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_220E27E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x227666FE4](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x227666CFC](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_220E2804C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x220E28018);
  }
  __cxa_rethrow();
}

void sub_220E280B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227666FE4](a1 + 120);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_220E281B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void dmlc::parameter::FieldEntry<unsigned long>::~FieldEntry(void **a1)
{
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry(a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::runtime_error *exception;
  std::string v17;
  _QWORD v18[33];

  v2 = result;
  if (!*(_BYTE *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    v4 = *(char *)(v2 + 47);
    if (v4 >= 0)
      v5 = v2 + 24;
    else
      v5 = *(_QWORD *)(v2 + 24);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(v2 + 47);
    else
      v6 = *(_QWORD *)(v2 + 32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v11 = *(_QWORD *)(v2 + 48);
    v10 = v2 + 48;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  *(_QWORD *)(a2 + *(_QWORD *)(result + 96)) = *(_QWORD *)(result + 104);
  return result;
}

void sub_220E28318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  _QWORD v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x227666D44](v34, a2 + *(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220E285F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::Check(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(_QWORD *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 112))
  {
    v3 = *(_QWORD *)(result + 120);
    if (*(_BYTE *)(result + 113))
    {
      if (v2 < v3 || v2 > *(_QWORD *)(result + 128))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 113) && v2 > *(_QWORD *)(result + 128))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220E28A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 64))(a1, v5, *(_QWORD *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220E28BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220E28D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::PrintDefaultValueString(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, a2, a1[13]);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::PrintValue()
{
  return std::ostream::operator<<();
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<unsigned long>,unsigned long>::set_range(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 120) = a2;
  *(_QWORD *)(result + 128) = a3;
  *(_WORD *)(result + 112) = 257;
  return result;
}

_QWORD *std::__function::__value_func<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_220E28F1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B57E0;
  return result;
}

uint64_t std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a3;
  v5 = operator new();
  *(_QWORD *)v5 = off_24E6B5860;
  *(_QWORD *)(v5 + 8) = &unk_24E6B5920;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = &off_24E6B89E8;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 164) = 0u;
  *(_QWORD *)(v5 + 184) = v3;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 216) = &off_24E6B89E8;
  *(_QWORD *)(v5 + 200) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 348) = 0u;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)(v5 + 424) = 0;
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 368) = v3;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 392) = 0;
  *(_BYTE *)(v5 + 400) = 0;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_BYTE *)(v5 + 464) = 0;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v5 + 472));
  *(_BYTE *)(v5 + 536) = 0;
  return v5;
}

void sub_220E29058(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = v2;
  v7 = *v5;
  *v5 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*(char *)(v1 + 431) < 0)
    operator delete(*v4);
  v8 = v3 + 16;
  *(_QWORD *)(v1 + 216) = v8;
  v9 = *(void **)(v1 + 376);
  if (v9)
  {
    *(_QWORD *)(v1 + 384) = v9;
    operator delete(v9);
  }
  *(_QWORD *)(v1 + 32) = v8;
  v10 = *(void **)(v1 + 192);
  if (v10)
  {
    *(_QWORD *)(v1 + 200) = v10;
    operator delete(v10);
  }
  MEMORY[0x227667068](v1, 0x10F3C40B0671724);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::gbm::$_0,std::allocator<xgboost::gbm::$_0>,xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::gbm::GBLinear::~GBLinear(xgboost::gbm::GBLinear *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_24E6B5860;
  *((_QWORD *)this + 1) = &unk_24E6B5920;
  xgboost::common::Monitor::~Monitor((char **)this + 59);
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  *((_QWORD *)this + 27) = &off_24E6B89E8;
  v3 = (void *)*((_QWORD *)this + 47);
  if (v3)
  {
    *((_QWORD *)this + 48) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 4) = &off_24E6B89E8;
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_24E6B5860;
  *((_QWORD *)this + 1) = &unk_24E6B5920;
  xgboost::common::Monitor::~Monitor((char **)this + 59);
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  *((_QWORD *)this + 27) = &off_24E6B89E8;
  v3 = (void *)*((_QWORD *)this + 47);
  if (v3)
  {
    *((_QWORD *)this + 48) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 4) = &off_24E6B89E8;
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x227667068);
}

void xgboost::gbm::GBLinear::LoadModel(void **this, const xgboost::Json *a2)
{
  _DWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const xgboost::Json *v18;
  void *__p[2];
  char v20;
  uint64_t v21;

  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  v6 = v5 + 2;
  v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 8)
    {
LABEL_7:
      dmlc::LogCheckFormat<std::string,char [9]>(&v21, (uint64_t)v6);
      goto LABEL_8;
    }
    v8 = (_QWORD *)*v6;
  }
  else
  {
    v8 = v5 + 2;
    if (v7 != 8)
      goto LABEL_7;
  }
  if (*v8 != 0x7261656E696C6267)
    goto LABEL_7;
  v21 = 0;
LABEL_8:
  if (v20 < 0)
    operator delete(__p[0]);
  if (v21)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"gblinear\"", 37);
    v13 = *(char *)(v21 + 23);
    v14 = v13 >= 0 ? v21 : *(_QWORD *)v21;
    v15 = v13 >= 0 ? *(unsigned __int8 *)(v21 + 23) : *(_QWORD *)(v21 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    v17 = v21;
    v21 = 0;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v21, v17);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model");
  v18 = (const xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  if (v20 < 0)
    operator delete(__p[0]);
  xgboost::gbm::GBLinearModel::LoadModel(this + 4, v18);
}

void sub_220E293E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::SaveModel(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  xgboost::Json *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;

  std::string::basic_string[abi:ne180100]<0>(v9, "gblinear");
  v12 = 0;
  *(_OWORD *)v13 = *(_OWORD *)v9;
  v14 = v10;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)&v11);
  if (v8 < 0)
    operator delete(__p[0]);
  v11 = off_24E6BE2B8;
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v12 = 0x300000000;
  v11 = &off_24E6BE1D0;
  v13[1] = 0;
  v14 = 0;
  v13[0] = &v13[1];
  std::string::basic_string[abi:ne180100]<0>(v9, "model");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v9);
  xgboost::Json::operator=(v5, (uint64_t)&v11);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v11 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v13, (_QWORD *)v13[1]);
  std::string::basic_string[abi:ne180100]<0>(&v11, "model");
  v6 = (xgboost::Json *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v11);
  if (SHIBYTE(v13[0]) < 0)
    operator delete(v11);
  xgboost::gbm::GBLinearModel::SaveModel((xgboost::gbm::GBLinear *)((char *)this + 32), v6);
}

void sub_220E295C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::gbm::GBLinearTrainParam *v4;
  uint64_t v5;
  uint64_t v6;
  std::string __str;
  _BYTE v8[24];
  void **v9;

  v4 = (xgboost::gbm::GBLinearTrainParam *)(a1 + 400);
  xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBLinearTrainParam *)v8, (_BYTE *)(a1 + 400), a2);
  v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  xgboost::gbm::GBLinearTrainParam::CheckGPUSupport(v4);
  v5 = xgboost::LinearUpdater::Create(a1 + 408, *(_QWORD *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 = *(_QWORD *)(a1 + 448);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "GBLinear");
  std::string::operator=((std::string *)(a1 + 472), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_220E2971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::Load(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t))
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = (**a2)(a2, a1 + 40, 136);
  if (v15 != 136)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v16);
    if (v16)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear_model.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"fi->Read(&param_, sizeof(param_)) == sizeof(param_)", 51);
      v8 = *(char *)(v16 + 23);
      v9 = v8 >= 0 ? v16 : *(_QWORD *)v16;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(_QWORD *)(v16 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
      v12 = v16;
      v16 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v16, v12);
    }
  }
  v16 = 0;
  if ((**a2)(a2, (uint64_t)&v16, 8) == 8)
  {
    v13 = (uint64_t *)(a1 + 192);
    v14 = v16;
    std::vector<float>::resize((uint64_t)v13, v16);
    if (v16)
      (**a2)(a2, *v13, 4 * v14);
  }
}

void sub_220E2988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::gbm::GBLinear::Save(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 40, 136);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192));
  return result;
}

void xgboost::GradientBooster::Slice(xgboost::GradientBooster *this, int a2, int a3, int a4, xgboost::GradientBooster *a5, BOOL *a6)
{
  std::string *Entry;
  _QWORD *v7;
  char v8;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/gbm.h");
  v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Slice is not supported by current booster.", 42);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
}

void sub_220E299A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::GradientBooster::AllowLazyCheckPoint(xgboost::GradientBooster *this)
{
  return 0;
}

uint64_t xgboost::gbm::GBLinear::BoostedRounds(xgboost::gbm::GBLinear *this)
{
  return *((unsigned int *)this + 44);
}

void xgboost::gbm::GBLinear::DoBoost(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float *v11;
  float v12;
  char *v13;
  float *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  void *__p[2];
  char v35;

  std::string::basic_string[abi:ne180100]<0>(__p, "DoBoost");
  xgboost::common::Monitor::Start();
  if (v35 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 192) == *(_QWORD *)(a1 + 200))
  {
    std::vector<float>::resize(a1 + 192, (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 8)+ *(_DWORD *)(*(_QWORD *)(a1 + 184) + 8) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4)));
    v6 = *(void **)(a1 + 192);
    v7 = *(_QWORD *)(a1 + 200) - (_QWORD)v6;
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  }
  if (!*(_BYTE *)(a1 + 464))
  {
    v8 = (**a2)(a2);
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
    {
      v10 = *(double *)(a1 + 456);
      v11 = **(float ***)(v8 + 72);
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(v8 + 72) + 8) == **(_QWORD **)(v8 + 72))
          v12 = 1.0;
        else
          v12 = *v11;
        v10 = v10 + v12;
        ++v11;
        --v9;
      }
      while (v9);
      *(double *)(a1 + 456) = v10;
    }
    *(_BYTE *)(a1 + 464) = 1;
  }
  if (*(float *)(a1 + 432) == 0.0)
    goto LABEL_16;
  if (!*(_BYTE *)(a1 + 536))
  {
    v13 = (char *)(a1 + 376);
    v14 = *(float **)(a1 + 376);
    v15 = (uint64_t)(*(_QWORD *)(a1 + 384) - (_QWORD)v14) >> 2;
    v16 = *(char **)(a1 + 192);
    v17 = *(_QWORD *)(a1 + 200);
    if (v15 == (v17 - (uint64_t)v16) >> 2)
    {
      if ((char *)v17 == v16)
      {
        v19 = 0.0;
      }
      else
      {
        if (v15 <= 1)
          v18 = 1;
        else
          v18 = (uint64_t)(*(_QWORD *)(a1 + 384) - (_QWORD)v14) >> 2;
        v19 = 0.0;
        v20 = *(float **)(a1 + 192);
        do
        {
          v21 = *v20++;
          v22 = v21;
          v23 = *v14++;
          v24 = vabds_f32(v22, v23);
          if (v19 < v24)
            v19 = v24;
          --v18;
        }
        while (v18);
      }
      v29 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 336) = v29;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 184);
      v30 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 272) = v30;
      v31 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 304) = v31;
      v32 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 240) = v32;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v13, v16, v17, v15);
      v33 = *(float *)(a1 + 432);
      *(_BYTE *)(a1 + 536) = v19 <= v33;
      if (v19 <= v33)
        goto LABEL_18;
    }
    else
    {
      v25 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 336) = v25;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 184);
      v26 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 272) = v26;
      v27 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a1 + 304) = v27;
      v28 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 240) = v28;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v13, v16, v17, (v17 - (uint64_t)v16) >> 2);
    }
LABEL_16:
    (*(void (**)(_QWORD, uint64_t, uint64_t (***)(_QWORD), uint64_t, double))(**(_QWORD **)(a1 + 448)
                                                                                               + 40))(*(_QWORD *)(a1 + 448), a3, a2, a1 + 32, *(double *)(a1 + 456));
  }
LABEL_18:
  ++*(_DWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(__p, "DoBoost");
  xgboost::common::Monitor::Stop();
  if (v35 < 0)
    operator delete(__p[0]);
}

void sub_220E29C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinear::PredictBatch(xgboost::gbm::GBLinear *this, xgboost::DMatrix *a2, xgboost::PredictionCacheEntry *a3, BOOL a4, xgboost::gbm *a5)
{
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *Entry;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  float *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::exception_ptr v73;
  void *__p;
  std::mutex v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatch");
  xgboost::common::Monitor::Start();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
  xgboost::gbm::LinearCheckLayer(a5);
  v9 = *(_QWORD **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatchInternal");
  xgboost::common::Monitor::Start();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
  if (*((_QWORD *)this + 24) == *((_QWORD *)this + 25))
  {
    std::vector<float>::resize((uint64_t)this + 192, (*(_DWORD *)(*((_QWORD *)this + 23) + 8)+ *(_DWORD *)(*((_QWORD *)this + 23) + 8) * *(_DWORD *)(*((_QWORD *)this + 23) + 4)));
    v10 = (void *)*((_QWORD *)this + 24);
    v11 = *((_QWORD *)this + 25) - (_QWORD)v10;
    if (v11 >= 1)
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
  v12 = (_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  v13 = (uint64_t *)v12[10];
  v15 = *v13;
  v14 = v13[1];
  v16 = v14 - *v13;
  v64 = v12[12];
  if (v14 == *v13)
    v17 = 0;
  else
    v17 = v64 * v12[11];
  v18 = *(_DWORD *)(*((_QWORD *)this + 23) + 8);
  v19 = (_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  v66 = (int)v18;
  std::vector<float>::resize((uint64_t)v9, *v19 * (int)v18);
  (*(void (**)(uint64_t *__return_ptr, xgboost::DMatrix *))(*(_QWORD *)a2 + 72))(&v71, a2);
  v69 = v71;
  v70 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v67, 0);
  v22 = v16 >> 2;
  v23 = v18;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v69) & 1) != 0)
  {
    v24 = xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v69);
    v65 = **(_QWORD **)v24;
    v25 = *(_QWORD *)(*(_QWORD *)v24 + 8) - v65;
    v26 = **(_QWORD **)(v24 + 8);
    if (v25 >> 3)
      v27 = (v25 >> 3) - 1;
    else
      v27 = 0;
    if (v17)
    {
      v73.__ptr_ = (void *)v17;
      if (v17 != v27 * v66)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&__p);
        if (__p)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
          v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"base_margin.Size() == nsize * ngroup", 36);
          v32 = *((char *)__p + 23);
          v33 = v32 >= 0 ? __p : *(void **)__p;
          v34 = v32 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
          v36 = __p;
          __p = 0;
          if (v36)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v36);
        }
      }
    }
    __p = 0;
    v75.__m_.__sig = 850045863;
    memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
    if ((unint64_t)v25 >= 0x10)
    {
      v37 = 0;
      do
      {
        if ((int)v66 >= 1)
        {
          v38 = 0;
          v39 = *(_QWORD *)(v24 + 16) + v37;
          v40 = v39 * v23;
          v41 = v39 * v64;
          v42 = (uint64_t *)(v65 + 8 * v37);
          do
          {
            if (v17)
            {
              if (v38 + v41 >= v22)
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              v43 = (float *)(v15 + 4 * (v38 + v41));
            }
            else
            {
              v43 = (float *)*((_QWORD *)this + 3);
            }
            v44 = *v42;
            v45 = v42[1];
            v46 = v45 - *v42;
            if (!v26 && v45 != *v42)
              std::terminate();
            v47 = *v43;
            v48 = *((_QWORD *)this + 23);
            v49 = *(_DWORD *)(v48 + 4);
            v50 = *(_DWORD *)(v48 + 8);
            v51 = *((_QWORD *)this + 24) + 4 * v38;
            v52 = v47 + *(float *)(v51 + 4 * v50 * v49);
            if (v45 != v44)
            {
              v53 = (float *)(v26 + 4 + 8 * v44);
              do
              {
                v54 = *((_DWORD *)v53 - 1);
                if (v54 < v49)
                  v52 = v52 + (float)(*v53 * *(float *)(v51 + 4 * v54 * (unint64_t)v50));
                v53 += 2;
                --v46;
              }
              while (v46);
            }
            *(float *)(*v9 + 4 * v40 + 4 * v38++) = v52;
          }
          while (v38 != v23);
        }
        ++v37;
      }
      while (v37 != v27);
    }
    dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
    std::mutex::~mutex(&v75);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v69);
  }
  v55 = v68;
  if (v68)
  {
    v56 = (unint64_t *)&v68->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v70;
  if (v70)
  {
    v59 = (unint64_t *)&v70->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v72;
  if (v72)
  {
    v62 = (unint64_t *)&v72->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatchInternal");
  xgboost::common::Monitor::Stop();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "PredictBatch");
  xgboost::common::Monitor::Stop();
  if (v75.__m_.__opaque[7] < 0)
    operator delete(__p);
}

void sub_220E2A21C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  JUMPOUT(0x220E2A2ECLL);
}

void sub_220E2A270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a24;
  a24 = 0;
  if (v25)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v25);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
  _Unwind_Resume(a1);
}

void sub_220E2A290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E2A29CLL);
}

void xgboost::GradientBooster::InplacePredict()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/gbm.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Inplace predict is not supported by current booster.", 52);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220E2A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinear::PredictInstance(_QWORD *a1, uint64_t *a2, uint64_t *a3, xgboost::gbm *this)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  float *v16;
  uint64_t v17;
  unsigned int v18;

  xgboost::gbm::LinearCheckLayer(this);
  v7 = a1[23];
  v8 = *(unsigned int *)(v7 + 8);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    if (a3[1] == *a3)
      v10 = 0;
    else
      v10 = *a3;
    v11 = (float *)a1[3];
    v12 = a1[24];
    v13 = *a2;
    v14 = *(_DWORD *)(v7 + 4);
    do
    {
      v15 = *v11 + *(float *)(v12 + 4 * v8 * v14 + 4 * v9);
      if (v13)
      {
        v16 = (float *)(a2[1] + 4);
        v17 = v13;
        do
        {
          v18 = *((_DWORD *)v16 - 1);
          if (v18 < v14)
            v15 = v15 + (float)(*v16 * *(float *)(v12 + 4 * v9 + 4 * v18 * (unint64_t)v8));
          v16 += 2;
          --v17;
        }
        while (v17);
      }
      *(float *)(v10 + 4 * v9++) = v15;
    }
    while (v9 != v8);
  }
}

void xgboost::gbm::GBLinear::PredictLeaf()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"gblinear does not support prediction of leaf index", 50);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220E2A480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinear::PredictContribution(_QWORD *a1, uint64_t a2, uint64_t *a3, xgboost::gbm *this)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  BOOL v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  float *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  std::exception_ptr v66;
  std::mutex v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v9 = a1[24];
  v10 = a1[25];
  v8 = (uint64_t)(a1 + 24);
  if (v9 == v10)
  {
    std::vector<float>::resize(v8, (*(_DWORD *)(a1[23] + 8) + *(_DWORD *)(a1[23] + 8) * *(_DWORD *)(a1[23] + 4)));
    v11 = (void *)a1[24];
    v12 = a1[25] - (_QWORD)v11;
    if (v12 >= 1)
      bzero(v11, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  }
  xgboost::gbm::LinearCheckLayer(this);
  v13 = (_QWORD *)(**(uint64_t (***)(uint64_t))a2)(a2);
  v14 = (uint64_t *)v13[10];
  v15 = v13[11];
  v17 = *v14;
  v16 = v14[1];
  v57 = v13[12];
  v18 = *(int *)(a1[23] + 8);
  v19 = (*(_DWORD *)(a1[23] + 4) + 1);
  v20 = *a3;
  v21 = (_QWORD *)(**(uint64_t (***)(uint64_t))a2)(a2);
  std::vector<float>::resize(v20, v19 * v18 * *v21);
  v22 = *(_QWORD *)(v20 + 8) - *(_QWORD *)v20;
  if (v22 >= 1)
    bzero(*(void **)v20, 4 * (((unint64_t)v22 >> 2) - ((unint64_t)v22 > 3)) + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v64, a2);
  v62 = v64;
  v63 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v60, 0);
  v26 = v16 == v17 || v57 * v15 == 0;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v62) & 1) != 0)
  {
    v27 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v62);
    v29 = **v27;
    v28 = (*v27)[1];
    v58 = v27;
    v59 = *v27[1];
    v66.__ptr_ = 0;
    v67.__m_.__sig = 850045863;
    memset(v67.__m_.__opaque, 0, sizeof(v67.__m_.__opaque));
    if (v28 != v29 && ((unint64_t)(v28 - v29) >> 3) != 1)
    {
      v31 = 0;
      do
      {
        v33 = *(_QWORD *)(v29 + 8 * v31);
        v32 = *(_QWORD *)(v29 + 8 * v31 + 8);
        if (!v59 && v32 != v33)
          std::terminate();
        if ((int)v18 >= 1)
        {
          v34 = 0;
          v35 = (char *)v58[2] + v31;
          v36 = *(char **)v20;
          v38 = a1[23];
          v37 = a1[24];
          v39 = *(_DWORD *)(v38 + 4);
          v40 = *(_DWORD *)(v38 + 8);
          v41 = (_QWORD)v35 * v18;
          v42 = (_QWORD)v35 * v57;
          do
          {
            v43 = &v36[4 * (v34 + v41) * v19];
            if (v32 != v33)
            {
              v44 = v32 - v33;
              v45 = (float *)(v59 + 4 + 8 * v33);
              do
              {
                v46 = *((unsigned int *)v45 - 1);
                if (v46 < v39)
                  *(float *)&v43[4 * v46] = *v45
                                          * *(float *)(v37 + 4 * v34 + 4 * v46 * (unint64_t)v40);
                v45 += 2;
                --v44;
              }
              while (v44);
            }
            if (v26)
            {
              v47 = (float *)a1[3];
            }
            else
            {
              if (v34 + v42 >= (unint64_t)((v16 - v17) >> 2))
                __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
              v47 = (float *)(v17 + 4 * (v34 + v42));
            }
            *(float *)&v43[4 * v19 - 4] = *(float *)(v37 + 4 * v40 * v39 + 4 * v34++) + *v47;
          }
          while (v34 != v18);
        }
        ++v31;
      }
      while (v31 != ((unint64_t)(v28 - v29) >> 3) - 1);
    }
    dmlc::OMPException::Rethrow(&v66);
    std::mutex::~mutex(&v67);
    std::exception_ptr::~exception_ptr(&v66);
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v62);
  }
  v48 = v61;
  if (v61)
  {
    v49 = (unint64_t *)&v61->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v63;
  if (v63)
  {
    v52 = (unint64_t *)&v63->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v65;
  if (v65)
  {
    v55 = (unint64_t *)&v65->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_220E2A914()
{
  __cxa_end_catch();
  JUMPOUT(0x220E2A954);
}

void sub_220E2A920()
{
  __cxa_end_catch();
  JUMPOUT(0x220E2A954);
}

void sub_220E2A92C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E2A988);
}

void sub_220E2A93C()
{
  JUMPOUT(0x220E2A978);
}

void sub_220E2A944()
{
  JUMPOUT(0x220E2A988);
}

void sub_220E2A94C()
{
  std::mutex *v0;
  std::exception_ptr v1;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E2A970);
}

void sub_220E2A968()
{
  JUMPOUT(0x220E2A970);
}

void xgboost::gbm::GBLinear::PredictInteractionContributions(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t *a3, xgboost::gbm *this)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  xgboost::gbm::LinearCheckLayer(this);
  v7 = *a3;
  v8 = (*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4));
  v9 = (_QWORD *)(**a2)(a2);
  std::vector<float>::resize(v7, *v9 * v8 * *(unsigned int *)(*(_QWORD *)(a1 + 184) + 8));
  v10 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7;
  if (v10 >= 1)
    bzero(*(void **)v7, 4 * (((unint64_t)v10 >> 2) - ((unint64_t)v10 > 3)) + 4);
}

void xgboost::gbm::GBLinear::DumpModel(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::locale::id *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  uint64_t v19;
  std::locale::id *v20;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale::id *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  uint64_t v35;
  uint64_t v36;
  std::locale::id *v37;
  uint64_t i;
  _QWORD *v39;
  const std::locale::facet *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  std::string *v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string v53;
  void *__p[2];
  std::string::size_type v55;
  _QWORD v56[2];
  uint64_t v57;
  _QWORD v58[10];
  char v59;
  uint64_t v60[19];
  std::__split_buffer<std::string> v61;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v53 = *(std::string *)a2;
  v51 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 4);
  v52 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v61, (char *)&unk_220F8364E);
  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  v60[0] = MEMORY[0x24BEDB858] + 104;
  v7 = MEMORY[0x24BEDB858] + 64;
  v8 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v57 = MEMORY[0x24BEDB858] + 64;
  v56[0] = v9;
  *(_QWORD *)((char *)v56 + *(_QWORD *)(v9 - 24)) = v10;
  v56[1] = 0;
  v11 = (std::ios_base *)((char *)v56 + *(_QWORD *)(v56[0] - 24));
  std::ios_base::init(v11, v58);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[5];
  v57 = v8[4];
  *(_QWORD *)((char *)&v58[-1] + *(_QWORD *)(v57 - 24)) = v12;
  v56[0] = v8[1];
  *(_QWORD *)((char *)v56 + *(_QWORD *)(v56[0] - 24)) = v8[6];
  v60[0] = v6;
  v56[0] = v5 + 24;
  v57 = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v58, (const std::string *)&v61, 24);
  if (SHIBYTE(v61.__end_) < 0)
    operator delete(v61.__first_);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) == 4)
    {
      v13 = &v53;
      goto LABEL_11;
    }
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"bias:\n", 6);
    if ((int)v52 >= 1)
    {
      v14 = 0;
      v15 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
        v17 = std::locale::use_facet((const std::locale *)&v61, v15);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v61);
        std::ostream::put();
        std::ostream::flush();
        v14 += 4;
      }
      while (4 * v52 != v14);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"weight:\n", 8);
    if ((_DWORD)v51)
    {
      v18 = 0;
      v19 = 0;
      v20 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        if ((int)v52 >= 1)
        {
          v21 = 0;
          do
          {
            v22 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
            v23 = std::locale::use_facet((const std::locale *)&v61, v20);
            ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
            std::locale::~locale((std::locale *)&v61);
            std::ostream::put();
            std::ostream::flush();
            v21 += 4;
          }
          while (4 * v52 != v21);
        }
        ++v19;
        v18 += 4;
      }
      while (v19 != v51);
    }
    goto LABEL_36;
  }
  if (v53.__r_.__value_.__l.__size_ != 4)
    goto LABEL_12;
  v13 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_11:
  if (LODWORD(v13->__r_.__value_.__l.__data_) != 1852797802)
    goto LABEL_12;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"  { \"bias\": [", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  if ((int)v52 >= 1)
  {
    v26 = 0;
    v27 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      if (v26)
      {
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)",", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
        v29 = std::locale::use_facet((const std::locale *)&v61, v27);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale((std::locale *)&v61);
        std::ostream::put();
        std::ostream::flush();
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"      ", 6);
      std::ostream::operator<<();
      v26 += 4;
    }
    while (4 * v52 != v26);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v58[-1] + *(_QWORD *)(v57 - 24)));
  v30 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"    ],", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
  v32 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    \"weight\": [", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v34 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  if ((_DWORD)v51)
  {
    v35 = 0;
    v36 = 0;
    v37 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      if ((int)v52 >= 1)
      {
        for (i = 0; i != v52; ++i)
        {
          if (i | v36)
          {
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)",", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
            v40 = std::locale::use_facet((const std::locale *)&v61, v37);
            ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
            std::locale::~locale((std::locale *)&v61);
            std::ostream::put();
            std::ostream::flush();
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"      ", 6);
          std::ostream::operator<<();
        }
      }
      ++v36;
      v35 += 4;
    }
    while (v36 != v51);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v58[-1] + *(_QWORD *)(v57 - 24)));
  v41 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"    ]", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
  v43 = std::locale::use_facet((const std::locale *)&v61, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
  std::locale::~locale((std::locale *)&v61);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"  }", 3);
LABEL_36:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::stringbuf::str();
  v61.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
  v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(a3 + 16, 1uLL);
  v45 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v61.__first_ = v44;
  v61.__begin_ = v44;
  v61.__end_cap_.__value_ = &v44[v46];
  v47 = *(_OWORD *)__p;
  v44->__r_.__value_.__r.__words[2] = v55;
  *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v47;
  __p[1] = 0;
  v55 = 0;
  __p[0] = 0;
  v61.__end_ = v44 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v61);
  v48 = *(_QWORD *)(a3 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v61);
  v49 = SHIBYTE(v55);
  *(_QWORD *)(a3 + 8) = v48;
  if (v49 < 0)
    operator delete(__p[0]);
  v56[0] = *v45;
  v50 = v45[9];
  *(_QWORD *)((char *)v56 + *(_QWORD *)(v56[0] - 24)) = v45[8];
  v57 = v50;
  v58[0] = MEMORY[0x24BEDB848] + 16;
  if (v59 < 0)
    operator delete((void *)v58[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227666FE4](v60);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_220E2B264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::locale::~locale((std::locale *)(v28 - 128));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinear::FeatureScore(_QWORD *a1, uint64_t a2, _QWORD *a3, std::vector<unsigned int> *this, uint64_t *a5)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::vector<unsigned int>::size_type v25;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t i;
  std::string *Entry;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  std::vector<unsigned int>::value_type __x[2];

  if (a1[24] == a1[25])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: !model_.weight.empty()", 36);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Model is not initialized", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*a3)
  {
    v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: trees.empty()", 27);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"gblinear doesn't support number of trees for feature importance.", 64);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  v10 = *(char *)(a2 + 23);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = a2;
    if (v10 != 6)
      goto LABEL_14;
LABEL_10:
    v12 = *(_DWORD *)v11;
    v13 = *(unsigned __int16 *)(v11 + 4);
    if (v12 == 1734960503 && v13 == 29800)
      goto LABEL_23;
    goto LABEL_14;
  }
  if (*(_QWORD *)(a2 + 8) == 6)
  {
    v11 = *(_QWORD *)a2;
    goto LABEL_10;
  }
LABEL_14:
  dmlc::LogCheckFormat<std::string,char [7]>(a2, "weight", (uint64_t *)__x);
  if (*(_QWORD *)__x)
  {
    v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"importance_type == \"weight\"", 27);
    v19 = *(char *)(*(_QWORD *)__x + 23);
    v20 = v19 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
    v21 = v19 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
    v24 = *(_QWORD *)__x;
    *(_QWORD *)__x = 0;
    if (v24)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v24);
  }
LABEL_23:
  v25 = *(unsigned int *)(a1[3] + 4);
  __x[0] = 0;
  std::vector<unsigned int>::resize(this, v25, __x);
  begin = this->__begin_;
  end = this->__end_;
  if (this->__begin_ != end)
  {
    v28 = 0;
    do
      *begin++ = v28++;
    while (begin != end);
  }
  v29 = ((uint64_t)(a1[25] - a1[24]) >> 2) - *(unsigned int *)(a1[3] + 8);
  __x[0] = 0;
  std::vector<float>::resize((uint64_t)a5, v29, __x);
  v30 = a1[3];
  v31 = *(unsigned int *)(v30 + 4);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = *(unsigned int *)(v30 + 8);
    v36 = *a5;
    v37 = (a5[1] - *a5) >> 2;
    do
    {
      if ((_DWORD)v35)
      {
        for (i = 0; i != v35; ++i)
        {
          if (v32 + i >= v37)
            __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
          *(_DWORD *)(v36 + 4 * i) = *(_DWORD *)(a1[24] + v33 * *(unsigned int *)(a1[23] + 8) + 4 * i);
        }
      }
      ++v34;
      v33 += 4;
      v36 += 4 * v35;
      v32 += v35;
    }
    while (v34 != v31);
  }
}

void sub_220E2B650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::gbm::GBLinear::UseGPU(xgboost::gbm::GBLinear *this)
{
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = (char *)this + 408;
  v2 = *((char *)this + 431);
  if (v2 < 0)
  {
    if (*((_QWORD *)this + 52) != 17)
      return 0;
    v1 = *(char **)v1;
  }
  else if (v2 != 17)
  {
    return 0;
  }
  v3 = *(_QWORD *)v1;
  v4 = *((_QWORD *)v1 + 1);
  v5 = v1[16];
  return v3 == 0x726F6F635F757067 && v4 == 0x6E65637365645F64 && v5 == 116;
}

void xgboost::gbm::GBLinear::LoadConfig(xgboost::gbm::GBLinear *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _DWORD **v18;
  xgboost::gbm::GBLinearTrainParam *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  char v31;
  std::vector<std::pair<std::string, std::string>> v32;
  void *__p;
  _QWORD *v34;
  uint64_t v35;
  __int128 *v36;

  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  v6 = v5 + 2;
  v7 = *((char *)v5 + 39);
  if (v7 < 0)
  {
    if (v5[3] != 8)
    {
LABEL_7:
      dmlc::LogCheckFormat<std::string,char [9]>((uint64_t *)v30, (uint64_t)v6);
      goto LABEL_8;
    }
    v8 = (_QWORD *)*v6;
  }
  else
  {
    v8 = v5 + 2;
    if (v7 != 8)
      goto LABEL_7;
  }
  if (*v8 != 0x7261656E696C6267)
    goto LABEL_7;
  v30[0] = 0;
LABEL_8:
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
  if (v30[0])
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<String>(in[\"name\"]) == \"gblinear\"", 37);
    v13 = *((char *)v30[0] + 23);
    v14 = v13 >= 0 ? v30[0] : *(void **)v30[0];
    v15 = v13 >= 0 ? *((unsigned __int8 *)v30[0] + 23) : *((_QWORD *)v30[0] + 1);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    v17 = v30[0];
    v30[0] = 0;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v30, (uint64_t)v17);
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "gblinear_train_param");
  v18 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v30);
  v19 = (xgboost::gbm::GBLinearTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v18);
  v34 = 0;
  v35 = 0;
  __p = &v34;
  v20 = (_QWORD *)*((_QWORD *)v19 + 2);
  v21 = (_QWORD *)((char *)v19 + 24);
  if (v20 != (_QWORD *)((char *)v19 + 24))
  {
    do
    {
      v22 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v20[7]);
      v36 = (__int128 *)(v20 + 4);
      v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v20 + 4, (uint64_t)&std::piecewise_construct, &v36);
      v19 = (xgboost::gbm::GBLinearTrainParam *)std::string::operator=((std::string *)(v23 + 7), (const std::string *)(v22 + 16));
      v24 = (_QWORD *)v20[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v20[2];
          v26 = *v25 == (_QWORD)v20;
          v20 = v25;
        }
        while (!v26);
      }
      v20 = v25;
    }
    while (v25 != v21);
  }
  if (*((_BYTE *)this + 400))
  {
    memset(&v32, 0, sizeof(v32));
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(v19);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36218, (uint64_t)this + 400, __p, &v34, 0, &v32, 0);
  }
  else
  {
    memset(&v32, 0, sizeof(v32));
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(v19);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36218, (uint64_t)this + 400, __p, &v34, &v32, 0);
    *((_BYTE *)this + 400) = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v34);
  __p = &v32;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v31 < 0)
    operator delete(v30[0]);
  xgboost::gbm::GBLinearTrainParam::CheckGPUSupport((xgboost::gbm::GBLinear *)((char *)this + 400));
  v27 = xgboost::LinearUpdater::Create((uint64_t)this + 408, *((_QWORD *)this + 2));
  v28 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v27 = *((_QWORD *)this + 56);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "updater");
  v29 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v29);
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
}

void sub_220E2BA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  *(_QWORD *)(v24 - 72) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 72));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost::gbm::GBLinear::SaveConfig(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int **v11;
  unsigned int **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  void *v19[2];
  uint64_t *v20;
  _QWORD *v21[2];
  void *v22;
  uint64_t v23;
  void *v24[2];
  uint64_t *v25;
  void *__p;
  _QWORD *v27;
  char v28;
  void **v29;

  std::string::basic_string[abi:ne180100]<0>(v19, "gblinear");
  v23 = 0;
  v22 = off_24E6BE2B8;
  *(_OWORD *)v24 = *(_OWORD *)v19;
  v25 = v20;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Json::operator=(v4, (uint64_t)&v22);
  if (v28 < 0)
    operator delete(__p);
  v22 = off_24E6BE2B8;
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  v19[1] = (void *)0x300000000;
  v19[0] = &off_24E6BE1D0;
  v21[0] = 0;
  v21[1] = 0;
  v20 = (uint64_t *)v21;
  xgboost::gbm::GBLinearTrainParam::__MANAGER__((xgboost::gbm::GBLinearTrainParam *)v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36218, (char *)this + 400, (std::vector<std::pair<std::string, std::string>> *)&v22);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v22, (const void **)v23);
  v29 = &v22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v29);
  v6 = (char *)__p;
  if (__p != &v27)
  {
    do
    {
      xgboost::JsonString::JsonString(&v22, (__int128 *)(v6 + 56));
      v29 = (void **)(v6 + 32);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v20, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v29);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v22);
      v22 = off_24E6BE2B8;
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (char *)&v27);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v27);
  std::string::basic_string[abi:ne180100]<0>(&v22, "gblinear_train_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v22);
  xgboost::Json::operator=(v11, (uint64_t)v19);
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v22);
  v19[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v20, v21[0]);
  v23 = 0x300000000;
  v22 = &off_24E6BE1D0;
  v24[1] = 0;
  v25 = 0;
  v24[0] = &v24[1];
  std::string::basic_string[abi:ne180100]<0>(v19, "updater");
  v12 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v19);
  xgboost::Json::operator=(v12, (uint64_t)&v22);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  v22 = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v24, (_QWORD *)v24[1]);
  std::string::basic_string[abi:ne180100]<0>(&v22, "updater");
  v13 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v22);
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v22);
  v14 = *((_QWORD *)this + 56);
  if (!v14)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: this->updater_", 28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    v14 = *((_QWORD *)this + 56);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v13);
}

void sub_220E2BE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'xgboost::gbm::GBLinear::~GBLinear(xgboost::gbm::GBLinear *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *((_QWORD *)this - 1) = off_24E6B5860;
  *(_QWORD *)this = &unk_24E6B5920;
  xgboost::common::Monitor::~Monitor((char **)this + 58);
  v2 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  *((_QWORD *)this + 26) = &off_24E6B89E8;
  v3 = (void *)*((_QWORD *)this + 46);
  if (v3)
  {
    *((_QWORD *)this + 47) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 3) = &off_24E6B89E8;
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *((_QWORD *)this - 1) = off_24E6B5860;
  *(_QWORD *)this = &unk_24E6B5920;
  xgboost::common::Monitor::~Monitor((char **)this + 58);
  v2 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  *((_QWORD *)this + 26) = &off_24E6B89E8;
  v3 = (void *)*((_QWORD *)this + 46);
  if (v3)
  {
    *((_QWORD *)this + 47) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 3) = &off_24E6B89E8;
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x227667068);
}

void `non-virtual thunk to'xgboost::gbm::GBLinear::LoadConfig(xgboost::gbm::GBLinear *this, const xgboost::Json *a2)
{
  xgboost::gbm::GBLinear::LoadConfig((xgboost::gbm::GBLinear *)((char *)this - 8), a2);
}

uint64_t `non-virtual thunk to'xgboost::gbm::GBLinear::SaveConfig(xgboost::gbm::GBLinear *this, xgboost::Json *a2)
{
  return xgboost::gbm::GBLinear::SaveConfig((xgboost::gbm::GBLinear *)((char *)this - 8), a2);
}

uint64_t dmlc::LogCheckFormat<std::string,char [9]>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"gblinear", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
  v11 = operator new();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v11;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v15);
}

void sub_220E2C1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::gbm::GBLinearTrainParam *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36218, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::gbm::GBLinearTrainParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36218, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220E2C2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::gbm::GBLinearTrainParam::CheckGPUSupport(xgboost::gbm::GBLinearTrainParam *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::string *Entry;
  _QWORD *v10;
  void *v11;
  void *v12;
  char *v13;
  _BYTE v14[24];
  void **v15;
  char v16;
  void *v17[2];
  char v18;
  void *__p;
  char v20;
  __int128 v21[14];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = *((char *)this + 31);
  if (v3 < 0)
  {
    if (*((_QWORD *)this + 2) != 17)
      return;
    v2 = *(char **)v2;
  }
  else if (v3 != 17)
  {
    return;
  }
  v4 = *(_QWORD *)v2;
  v5 = *((_QWORD *)v2 + 1);
  v6 = v2[16];
  if (v4 == 0x726F6F635F757067 && v5 == 0x6E65637365645F64 && v6 == 116)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/../common/common.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v17);
    std::string::basic_string[abi:ne180100]<0>(v17, "updater");
    std::string::basic_string[abi:ne180100]<0>(&__p, "coord_descent");
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v15 = &v11;
    v16 = 0;
    v11 = operator new(0x30uLL);
    v12 = v11;
    v13 = (char *)v11 + 48;
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v13, (__int128 *)v17, v21, (std::string *)v11);
    xgboost::XGBoostParameter<xgboost::gbm::GBLinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::gbm::GBLinearTrainParam *)v14, this, (uint64_t *)&v11);
    v15 = (void **)v14;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v15);
    v15 = &v11;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17[0]);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gblinear.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v17, (uint64_t)&v11, 46, 1);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v17);
      if (SHIBYTE(v13) < 0)
        operator delete(v11);
    }
  }
}

void sub_220E2C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a21);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_220E2C62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t xgboost::BatchIterator<xgboost::SparsePage>::operator!=(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) ^ 1;
}

void sub_220E2C990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::BatchIterator<xgboost::SparsePage>::operator*(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

void sub_220E2CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::BatchIterator<xgboost::SparsePage>::operator++(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_220E2CAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(a1, a2);
  return a1;
}

void sub_220E2CB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SparsePage>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6B59A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E2CBF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SparsePage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SparsePage>,xgboost::BatchIteratorImpl<xgboost::SparsePage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SparsePage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227666FE4](a1 + 128);
  return a1;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

uint64_t dmlc::LogCheckFormat<std::string,char [7]>@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" (", 2);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *(_QWORD *)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
  v12 = strlen(a2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
  v14 = operator new();
  std::stringbuf::str();
  v16[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a3 = v14;
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v18);
}

void sub_220E2D17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v7;
  unsigned int *value;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<unsigned int>::size_type v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::vector<unsigned int>::size_type v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer i;
  unsigned int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (unsigned int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (unsigned int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

uint64_t xgboost::linear::__dmlc_registry_file_tag_updater_coordinate__(xgboost::linear *this)
{
  return 0;
}

void dmlc::parameter::FieldEntry<int>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::SetDefault(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::runtime_error *exception;
  std::string v17;
  _QWORD v18[33];

  v2 = result;
  if (!*(_BYTE *)(result + 8))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Required parameter ", 19);
    v4 = *(char *)(v2 + 47);
    if (v4 >= 0)
      v5 = v2 + 24;
    else
      v5 = *(_QWORD *)(v2 + 24);
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(v2 + 47);
    else
      v6 = *(_QWORD *)(v2 + 32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" of ", 4);
    v11 = *(_QWORD *)(v2 + 48);
    v10 = v2 + 48;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is not presented", 17);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  *(_DWORD *)(a2 + *(_QWORD *)(result + 96)) = *(_DWORD *)(result + 104);
  return result;
}

void sub_220E2D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntry<int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;
  std::string __p;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 120))
    return dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(a1, a2, a3);
  v6 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 128, (const void **)a3);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  if (a1 + 136 == v6)
  {
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Invalid Input: '", 16);
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"', valid values are: ", 21);
    dmlc::parameter::FieldEntry<int>::PrintEnums(a1, v14);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v16);
}

void sub_220E2D6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryNumeric<dmlc::parameter::FieldEntry<int>,int>::Check(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::runtime_error *v65;
  std::string v66;
  _QWORD v67[33];

  v2 = *(_DWORD *)(a2 + *(_QWORD *)(result + 96));
  if (*(_BYTE *)(result + 108))
  {
    v3 = *(_DWORD *)(result + 112);
    if (*(_BYTE *)(result + 109))
    {
      if (v2 < v3 || v2 > *(_DWORD *)(result + 116))
      {
        v4 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
        v5 = (_QWORD *)std::ostream::operator<<();
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for Parameter ", 15);
        v7 = *(char *)(v4 + 47);
        if (v7 >= 0)
          v8 = v4 + 24;
        else
          v8 = *(_QWORD *)(v4 + 24);
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(v4 + 47);
        else
          v9 = *(_QWORD *)(v4 + 32);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" exceed bound [", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v66, 1);
        v12 = (_QWORD *)std::ostream::operator<<();
        v66.__r_.__value_.__s.__data_[0] = 93;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v66, 1);
        v66.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v66, 1);
        v14 = *(char *)(v4 + 47);
        if (v14 >= 0)
          v15 = v4 + 24;
        else
          v15 = *(_QWORD *)(v4 + 24);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v4 + 47);
        else
          v16 = *(_QWORD *)(v4 + 32);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
        v21 = *(_QWORD *)(v4 + 72);
        v20 = v4 + 72;
        v19 = v21;
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = v19;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v66);
        exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
      }
    }
    else if (v2 < v3)
    {
      v46 = result;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" for Parameter ", 15);
      v49 = *(char *)(v46 + 47);
      if (v49 >= 0)
        v50 = v46 + 24;
      else
        v50 = *(_QWORD *)(v46 + 24);
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v46 + 47);
      else
        v51 = *(_QWORD *)(v46 + 32);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" should be greater equal to ", 28);
      v53 = (_QWORD *)std::ostream::operator<<();
      v66.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v66, 1);
      v54 = *(char *)(v46 + 47);
      if (v54 >= 0)
        v55 = v46 + 24;
      else
        v55 = *(_QWORD *)(v46 + 24);
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(v46 + 47);
      else
        v56 = *(_QWORD *)(v46 + 32);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v61 = *(_QWORD *)(v46 + 72);
      v60 = v46 + 72;
      v59 = v61;
      v62 = *(char *)(v60 + 23);
      if (v62 >= 0)
        v63 = v60;
      else
        v63 = v59;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v60 + 23);
      else
        v64 = *(_QWORD *)(v60 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v63, v64);
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::runtime_error::runtime_error(v65, &v66);
      v65->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
    }
  }
  else if (*(_BYTE *)(result + 109) && v2 > *(_DWORD *)(result + 116))
  {
    v26 = result;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"value ", 6);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for Parameter ", 15);
    v29 = *(char *)(v26 + 47);
    if (v29 >= 0)
      v30 = v26 + 24;
    else
      v30 = *(_QWORD *)(v26 + 24);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v26 + 47);
    else
      v31 = *(_QWORD *)(v26 + 32);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" should be smaller equal to ", 28);
    v33 = (_QWORD *)std::ostream::operator<<();
    v66.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v66, 1);
    v34 = *(char *)(v26 + 47);
    if (v34 >= 0)
      v35 = v26 + 24;
    else
      v35 = *(_QWORD *)(v26 + 24);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v26 + 47);
    else
      v36 = *(_QWORD *)(v26 + 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    v41 = *(_QWORD *)(v26 + 72);
    v40 = v26 + 72;
    v39 = v41;
    v42 = *(char *)(v40 + 23);
    if (v42 >= 0)
      v43 = v40;
    else
      v43 = v39;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v40 + 23);
    else
      v44 = *(_QWORD *)(v40 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v43, v44);
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v45, &v66);
    v45->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  return result;
}

void sub_220E2DB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetStringValue(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 64))(a1, v5, *(unsigned int *)(a2 + a1[12]));
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[1] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v7);
}

void sub_220E2DC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::parameter::FieldEntry<int>::GetFieldInfo@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  void **v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  if (!a1[5].__r_.__value_.__s.__data_[0])
    return dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetFieldInfo((uint64_t)a1, a2);
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::string::operator=((std::string *)a2, a1 + 1);
  std::string::operator=((std::string *)(a2 + 24), a1 + 2);
  dmlc::parameter::FieldEntry<int>::PrintEnums((uint64_t)a1, v9);
  if (a1->__r_.__value_.__s.__data_[8])
  {
    LOBYTE(v7) = 44;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v7, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"optional, default=", 18);
    (*(void (**)(const std::string *, _QWORD *))(a1->__r_.__value_.__r.__words[0] + 56))(a1, v9);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v6 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v7;
  *(_QWORD *)(a2 + 64) = v8;
  std::string::operator=((std::string *)(a2 + 72), a1 + 3);
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v11);
}

void sub_220E2DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::parameter::FieldEntry<int>::PrintDefaultValueString(unsigned int *a1, _QWORD *a2)
{
  char v5;
  char v6;

  v5 = 39;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v5, 1);
  (*(void (**)(unsigned int *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, a1[26]);
  v6 = 39;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v6, 1);
}

_QWORD *dmlc::parameter::FieldEntry<int>::PrintValue(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t *i;
  int v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a3;
  if (!*(_BYTE *)(a1 + 120))
    return (_QWORD *)std::ostream::operator<<();
  for (i = *(uint64_t **)(a1 + 160); i; i = (uint64_t *)*i)
  {
    v6 = *((_DWORD *)i + 8);
    if (v6 <= a3)
    {
      if (v6 >= a3)
        goto LABEL_16;
      ++i;
    }
  }
  v22 = 0;
  dmlc::LogCheckFormat<unsigned long,unsigned int>(&v23);
  if (v23)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./parameter.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"enum_back_map_.count(value) != 0U", 33);
    v11 = *(char *)(v23 + 23);
    v12 = v11 >= 0 ? v23 : *(_QWORD *)v23;
    v13 = v11 >= 0 ? *(unsigned __int8 *)(v23 + 23) : *(_QWORD *)(v23 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Value not found in enum declared", 32);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    v16 = v23;
    v23 = 0;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v23, v16);
  }
LABEL_16:
  v17 = std::map<int,std::string>::at(a1 + 152, &v24);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (uint64_t)v17;
  else
    v19 = *v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v19, v20);
}

void sub_220E2E00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  std::ios_base::iostate v10;
  std::ios_base *v11;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string v32;
  _QWORD v33[33];
  _QWORD v34[12];
  char v35;
  uint64_t v36;

  std::istringstream::basic_istringstream[abi:ne180100](v34, (const std::string *)a3, 8);
  MEMORY[0x227666D2C](v34, a2 + *(_QWORD *)(a1 + 96));
  v6 = *(_QWORD *)(v34[0] - 24);
  v7 = *(_DWORD *)((char *)&v34[4] + v6);
  if ((v7 & 5) == 0 && (v7 & 2) == 0)
  {
    while (1)
    {
      v8 = std::istream::get();
      if (v8 == -1)
      {
        v10 = 0;
        v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
        goto LABEL_11;
      }
      if (v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
        break;
      v6 = *(_QWORD *)(v34[0] - 24);
      if ((*((_BYTE *)&v34[4] + v6) & 2) != 0)
        goto LABEL_12;
    }
    v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
    v10 = v11->__rdstate_ | 4;
LABEL_11:
    std::ios_base::clear(v11, v10);
    v6 = *(_QWORD *)(v34[0] - 24);
  }
LABEL_12:
  if ((*((_BYTE *)&v34[4] + v6) & 5) != 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid Parameter format for ", 29);
    v14 = *(char *)(a1 + 47);
    if (v14 >= 0)
      v15 = a1 + 24;
    else
      v15 = *(_QWORD *)(a1 + 24);
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a1 + 47);
    else
      v16 = *(_QWORD *)(a1 + 32);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" expect ", 8);
    v21 = *(_QWORD *)(a1 + 48);
    v20 = a1 + 48;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" but value='", 12);
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = a3;
    else
      v28 = *(_QWORD *)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v32.__r_.__value_.__s.__data_[0] = 39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v32, 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v32);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24E6B55F0;
  }
  v34[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v34[2] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x227666FE4](&v36);
}

void sub_220E2E2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  int v49;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v49 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::istringstream::~istringstream((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v48);
  goto LABEL_6;
}

uint64_t dmlc::parameter::FieldEntryBase<dmlc::parameter::FieldEntry<int>,int>::GetFieldInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string::operator=((std::string *)a2, (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)(a1 + 48));
  v4 = *(char *)(a1 + 71);
  if (v4 >= 0)
    v5 = a1 + 48;
  else
    v5 = *(_QWORD *)(a1 + 48);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 71);
  else
    v6 = *(_QWORD *)(a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    LOBYTE(v10) = 44;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v10, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" optional, default=", 19);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 56))(a1, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", required", 10);
  }
  std::stringbuf::str();
  v8 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v10;
  *(_QWORD *)(a2 + 64) = v11;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 72));
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v14);
}

void sub_220E2E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  dmlc::ParamFieldInfo::~ParamFieldInfo(v4);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

_QWORD *dmlc::parameter::FieldEntry<int>::PrintEnums(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  char v14;
  char v15;
  char v16;

  v14 = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v14, 1);
  v4 = *(_QWORD **)(a1 + 128);
  if (v4 != (_QWORD *)(a1 + 136))
  {
    do
    {
      if (v4 != *(_QWORD **)(a1 + 128))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"'", 1);
      v6 = *((char *)v4 + 55);
      if (v6 >= 0)
        v7 = (uint64_t)(v4 + 4);
      else
        v7 = v4[4];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v4 + 55);
      else
        v8 = v4[5];
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      v16 = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 136));
  }
  v15 = 125;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v15, 1);
}

uint64_t *std::map<int,std::string>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

_QWORD *std::__function::__value_func<xgboost::LinearUpdater * ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_220E2E824(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5B18;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8108;
  return result;
}

uint64_t std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)v0 = &off_24E6B5B98;
  xgboost::common::Monitor::Monitor((std::chrono::steady_clock::time_point *)(v0 + 64));
  return v0;
}

void sub_220E2E8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  MEMORY[0x227667068](v1, 0x10F3C401EC50B1ELL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::target_type()
{
}

{
}

void xgboost::linear::CoordinateUpdater::~CoordinateUpdater(char **this)
{
  char *v2;

  *this = (char *)&off_24E6B5B98;
  xgboost::common::Monitor::~Monitor(this + 8);
  v2 = this[7];
  this[7] = 0;
  if (v2)
    (*(void (**)(char *))(*(_QWORD *)v2 + 8))(v2);
}

{
  char *v2;

  *this = (char *)&off_24E6B5B98;
  xgboost::common::Monitor::~Monitor(this + 8);
  v2 = this[7];
  this[7] = 0;
  if (v2)
    (*(void (**)(char *))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227667068);
}

void xgboost::linear::CoordinateUpdater::LoadConfig(xgboost::linear::CoordinateUpdater *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  _DWORD **v5;
  xgboost::linear::CoordinateParam *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _BYTE *v14;
  int v15;
  void *v16[2];
  char v17;
  std::vector<std::pair<std::string, std::string>> v18;
  std::vector<std::pair<std::string, std::string>> v19;
  void *__p;
  _QWORD *v21;
  uint64_t v22;
  __int128 *v23;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "linear_train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)&__p);
  xgboost::FromJson<xgboost::linear::LinearTrainParam>(v4, (xgboost::linear::CoordinateUpdater *)((char *)this + 24), &v19);
  v16[0] = &v19;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v16, "coordinate_param");
  v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)v16);
  v6 = (xgboost::linear::CoordinateParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  v21 = 0;
  v22 = 0;
  __p = &v21;
  v7 = (_QWORD *)*((_QWORD *)v6 + 2);
  v8 = (_QWORD *)((char *)v6 + 24);
  if (v7 != (_QWORD *)((char *)v6 + 24))
  {
    do
    {
      v9 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v7[7]);
      v23 = (__int128 *)(v7 + 4);
      v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v7 + 4, (uint64_t)&std::piecewise_construct, &v23);
      v6 = (xgboost::linear::CoordinateParam *)std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v9 + 16));
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v8);
  }
  v15 = *((unsigned __int8 *)this + 16);
  v14 = (char *)this + 16;
  memset(&v18, 0, sizeof(v18));
  xgboost::linear::CoordinateParam::__MANAGER__(v6);
  if (v15)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36268, (uint64_t)v14, __p, &v21, 0, &v18, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36268, (uint64_t)v14, __p, &v21, &v18, 0);
    *v14 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v21);
  __p = &v18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_220E2EBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  *(_QWORD *)(v26 - 56) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::SaveConfig(xgboost::linear::CoordinateUpdater *this, xgboost::Json *a2)
{
  unsigned int **v4;
  xgboost::linear::CoordinateParam *v5;
  _QWORD **v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  unsigned int **v11;
  void *__p[2];
  uint64_t *v13;
  _QWORD *v14[2];
  std::vector<std::pair<std::string, std::string>> v15;
  _QWORD *v16;
  char v17;
  _QWORD **v18;
  _QWORD *v19[2];
  std::vector<std::pair<std::string, std::string>> *v20;

  xgboost::ToJson<xgboost::linear::LinearTrainParam>((xgboost::linear::CoordinateUpdater *)((char *)this + 24), (uint64_t)&v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_train_param");
  v4 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)&v15);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  v15.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v15.__end_cap_, v16);
  __p[1] = (void *)0x300000000;
  __p[0] = &off_24E6BE1D0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  xgboost::linear::CoordinateParam::__MANAGER__(v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36268, (char *)this + 16, &v15);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v18, (const void **)&v15.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v15.__end_->first.__r_.__value_.__l.__data_);
  v20 = &v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v6 = v18;
  if (v18 != v19)
  {
    do
    {
      xgboost::JsonString::JsonString(&v15, (__int128 *)(v6 + 7));
      v20 = (std::vector<std::pair<std::string, std::string>> *)(v6 + 4);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v15);
      v15.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v17 < 0)
        operator delete(v15.__end_cap_.__value_);
      v8 = v6[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v6[2];
          v10 = *v9 == v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v19);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  std::string::basic_string[abi:ne180100]<0>(&v15, "coordinate_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v15);
  xgboost::Json::operator=(v11, (uint64_t)__p);
  if (SHIBYTE(v15.__end_cap_.__value_) < 0)
    operator delete(v15.__begin_);
  __p[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E2EE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  uint64_t v30;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v30, a16);
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::linear::CoordinateParam *v3;
  uint64_t v4;
  uint64_t v5;
  std::string __p;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::linear::LinearTrainParam *)(a1 + 24), a2, &v10);
  if (*(_BYTE *)(a1 + 16))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    xgboost::linear::CoordinateParam::__MANAGER__(v3);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36268, a1 + 16, v10, v11, 0, &v7, 0);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    xgboost::linear::CoordinateParam::__MANAGER__(v3);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36268, a1 + 16, v10, v11, &v7, 0);
    *(_BYTE *)(a1 + 16) = 1;
  }
  v12 = (void **)&v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = xgboost::linear::FeatureSelector::Create((xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 40), 1);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "CoordinateUpdater");
  std::string::operator=((std::string *)(a1 + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = (void **)&v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_220E2F00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 24) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  *(_QWORD *)(v18 - 24) = &a18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  _Unwind_Resume(a1);
}

void xgboost::linear::CoordinateUpdater::Update(uint64_t a1, uint64_t *a2, uint64_t (***a3)(_QWORD), uint64_t a4, double a5)
{
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t j;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  float *v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  double v49;
  double v50;
  double *v51;
  double v52;
  double *v53;
  double v54;
  float v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD **v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float v79;
  float v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  double *v98;
  std::__shared_weak_count *v99;
  void *__p;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::exception_ptr v104;
  std::mutex v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v7 = (__n128)vcvtq_f64_f32(*(float32x2_t *)(a1 + 32));
  v6 = (__n128)vmulq_n_f64((float64x2_t)v7, a5);
  v7.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v6);
  *(_QWORD *)(a1 + 44) = v7.n128_u64[0];
  v8 = *(unsigned int *)(*(_QWORD *)(a4 + 152) + 8);
  if ((int)v8 < 1)
  {
    v6.n128_u32[0] = v7.n128_u32[1];
    v13 = a1;
  }
  else
  {
    for (i = 0; i != v8; ++i)
    {
      v6.n128_f64[0] = xgboost::linear::GetBiasGradientParallel(i, v8, *a2, a3, 1);
      v6.n128_f64[0] = -v6.n128_f64[0] / v7.n128_f64[0] * *(float *)(a1 + 28);
      v6.n128_f32[0] = v6.n128_f64[0];
      v10 = *(_QWORD *)(a4 + 160)
          + 4 * (*(_DWORD *)(*(_QWORD *)(a4 + 152) + 8) * *(_DWORD *)(*(_QWORD *)(a4 + 152) + 4));
      *(float *)(v10 + 4 * i) = *(float *)(v10 + 4 * i) + v6.n128_f32[0];
      v11 = (void *)*a2;
      LODWORD(v98) = i;
      LODWORD(v102) = v8;
      LODWORD(v96) = v6.n128_u32[0];
      __p = v11;
      if (v6.n128_f32[0] != 0.0)
      {
        v12 = *(_DWORD *)(**a3)(a3);
        v104.__ptr_ = &__p;
        v105.__m_.__sig = (uint64_t)&v102;
        *(_QWORD *)v105.__m_.__opaque = &v98;
        *(_QWORD *)&v105.__m_.__opaque[8] = &v96;
        xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda#1}>(v12, 1, 2, 0, (uint64_t ***)&v104);
      }
    }
    v13 = a1;
    v7.n128_u32[0] = *(_DWORD *)(a1 + 44);
    v6.n128_u32[0] = *(_DWORD *)(a1 + 48);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t (***)(_QWORD), _QWORD, __n128, __n128))(**(_QWORD **)(v13 + 56) + 16))(*(_QWORD *)(v13 + 56), a4, *a2, a3, *(unsigned int *)(v13 + 20), v6, v7);
  if ((int)v8 > 0)
  {
    for (j = 0; j != v8; ++j)
    {
      if (*(_DWORD *)(*(_QWORD *)(a4 + 152) + 4))
      {
        v90 = 0;
        do
        {
          v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t (***)(_QWORD), float, float))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), v90, a4, j, *a2, a3, *(float *)(a1 + 48), *(float *)(a1 + 44));
          if ((v15 & 0x80000000) != 0)
            break;
          v16 = (uint64_t *)*a2;
          v17 = *(_QWORD *)(a4 + 160);
          v18 = *(_DWORD *)(*(_QWORD *)(a4 + 152) + 8);
          v104.__ptr_ = 0;
          std::vector<double>::vector(&__p, 1uLL, &v104);
          v104.__ptr_ = 0;
          std::vector<double>::vector(&v98, 1uLL, &v104);
          ((uint64_t (**)(uint64_t *))*a3)[10](&v102);
          v96 = v102;
          v97 = v103;
          if (v103)
          {
            p_shared_owners = (unint64_t *)&v103->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v94, 0);
          v21 = v15;
          v22 = v17 + 4 * v18 * (unint64_t)v15;
          while ((xgboost::BatchIterator<xgboost::CSCPage>::operator!=(&v96) & 1) != 0)
          {
            v23 = (_QWORD **)xgboost::BatchIterator<xgboost::CSCPage>::operator*(&v96);
            v24 = *v23[1];
            v25 = (uint64_t *)(**v23 + 8 * v21);
            v27 = *v25;
            v26 = v25[1];
            if (v24)
              v28 = 1;
            else
              v28 = v26 == v27;
            if (!v28)
              goto LABEL_101;
            v29 = v26 - v27;
            v104.__ptr_ = 0;
            v105.__m_.__sig = 850045863;
            memset(v105.__m_.__opaque, 0, sizeof(v105.__m_.__opaque));
            v30 = v29;
            if ((_DWORD)v29)
            {
              v31 = *v16;
              v32 = (double *)__p;
              v33 = v98;
              v34 = (float *)(v24 + 8 * v27 + 4);
              while (v29)
              {
                v35 = j + *((_DWORD *)v34 - 1) * v18;
                v36 = *(float *)(v31 + 8 * v35 + 4);
                if (v36 >= 0.0)
                {
                  v37 = *v34;
                  *v32 = *v32 + (float)(*v34 * *(float *)(v31 + 8 * v35));
                  *v33 = *v33 + (float)(v37 * (float)(v36 * v37));
                }
                v34 += 2;
                --v29;
                if (!--v30)
                  goto LABEL_29;
              }
              goto LABEL_101;
            }
LABEL_29:
            dmlc::OMPException::Rethrow(&v104);
            std::mutex::~mutex(&v105);
            std::exception_ptr::~exception_ptr(&v104);
            xgboost::BatchIterator<xgboost::CSCPage>::operator++(&v96);
          }
          v38 = v22;
          v39 = v95;
          if (v95)
          {
            v40 = (unint64_t *)&v95->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v42 = v97;
          if (v97)
          {
            v43 = (unint64_t *)&v97->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = v103;
          if (v103)
          {
            v46 = (unint64_t *)&v103->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = (std::__shared_weak_count *)__p;
          v49 = 0.0;
          v50 = 0.0;
          if (__p != v101)
          {
            v51 = (double *)__p;
            do
            {
              v52 = *v51++;
              v50 = v50 + v52;
            }
            while (v51 != (double *)v101);
          }
          if (v98 != (double *)v99)
          {
            v49 = 0.0;
            v53 = v98;
            do
            {
              v54 = *v53++;
              v49 = v49 + v54;
            }
            while (v53 != (double *)v99);
          }
          if (v98)
          {
            v99 = (std::__shared_weak_count *)v98;
            operator delete(v98);
            v48 = (std::__shared_weak_count *)__p;
          }
          if (v48)
          {
            v101 = v48;
            operator delete(v48);
          }
          v55 = *(float *)(v38 + 4 * j);
          v56 = 0.0;
          if (v49 >= 0.00000999999975)
          {
            v57 = *(float *)(a1 + 48);
            v58 = *(float *)(a1 + 44);
            v59 = v50 + v58 * v55;
            v60 = v49 + v58;
            v61 = v55 - v59 / (v49 + v58);
            v56 = -v55;
            if (v61 >= 0.0)
            {
              v63 = -(v59 + v57) / v60;
              if (v63 >= v56)
                v56 = v63;
            }
            else
            {
              v62 = -(v59 - v57) / v60;
              if (v62 <= v56)
                v56 = v62;
            }
          }
          v64 = v56 * *(float *)(a1 + 28);
          *(float *)(v38 + 4 * j) = v55 + v64;
          if (v64 != 0.0)
          {
            ((uint64_t (**)(void **))*a3)[10](&__p);
            v98 = (double *)__p;
            v99 = v101;
            if (v101)
            {
              v65 = (unint64_t *)&v101->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v102, 0);
            while ((xgboost::BatchIterator<xgboost::CSCPage>::operator!=((uint64_t *)&v98) & 1) != 0)
            {
              v67 = (_QWORD **)xgboost::BatchIterator<xgboost::CSCPage>::operator*((uint64_t *)&v98);
              v68 = *v67[1];
              v69 = (uint64_t *)(**v67 + 8 * v21);
              v71 = *v69;
              v70 = v69[1];
              if (v68)
                v72 = 1;
              else
                v72 = v70 == v71;
              if (!v72)
                goto LABEL_101;
              v73 = v70 - v71;
              v104.__ptr_ = 0;
              v105.__m_.__sig = 850045863;
              memset(v105.__m_.__opaque, 0, sizeof(v105.__m_.__opaque));
              v74 = v73;
              if ((_DWORD)v73)
              {
                v75 = (float *)(v68 + 8 * v71 + 4);
                while (v73)
                {
                  v76 = j + *((_DWORD *)v75 - 1) * v18;
                  v77 = *v16 + 8 * v76;
                  v79 = *(float *)(v77 + 4);
                  v78 = (float *)(v77 + 4);
                  v80 = v79;
                  if (v79 >= 0.0)
                  {
                    *(float *)(*v16 + 8 * v76) = *(float *)(*v16 + 8 * v76) + (float)((float)(v80 * *v75) * v64);
                    *v78 = v80 + 0.0;
                  }
                  v75 += 2;
                  --v73;
                  if (!--v74)
                    goto LABEL_81;
                }
LABEL_101:
                std::terminate();
              }
LABEL_81:
              dmlc::OMPException::Rethrow(&v104);
              std::mutex::~mutex(&v105);
              std::exception_ptr::~exception_ptr(&v104);
              xgboost::BatchIterator<xgboost::CSCPage>::operator++((uint64_t *)&v98);
            }
            v81 = v103;
            if (v103)
            {
              v82 = (unint64_t *)&v103->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v84 = v99;
            if (v99)
            {
              v85 = (unint64_t *)&v99->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = v101;
            if (v101)
            {
              v88 = (unint64_t *)&v101->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          ++v90;
        }
        while (v90 < *(_DWORD *)(*(_QWORD *)(a4 + 152) + 4));
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "UpdateFeature");
  xgboost::common::Monitor::Stop();
  if (v105.__m_.__opaque[7] < 0)
    operator delete(v104.__ptr_);
}

void sub_220E2F7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::FromJson<xgboost::linear::LinearTrainParam>(_DWORD **a1@<X0>, xgboost::linear::LinearTrainParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)v5[2];
  v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E2F980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::linear::LinearTrainParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    v6 = xgboost::linear::LinearTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E2FA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::linear::LinearTrainParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v6 = xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, a3, 0);
}

void sub_220E2FA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::linear::LinearTrainParam>(xgboost::linear::LinearTrainParam *a1@<X0>, uint64_t a2@<X8>)
{
  dmlc::parameter::ParamManager *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  std::vector<std::pair<std::string, std::string>> v10;
  char v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::vector<std::pair<std::string, std::string>> *v14;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = (dmlc::parameter::ParamManager *)xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict(v4, a1, &v10);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v12, (const void **)&v10.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v10.__end_->first.__r_.__value_.__l.__data_);
  v14 = &v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v5 = v12;
  if (v12 != v13)
  {
    do
    {
      xgboost::JsonString::JsonString(&v10, (__int128 *)(v5 + 7));
      v14 = (std::vector<std::pair<std::string, std::string>> *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
      xgboost::Json::operator=(v6 + 7, (uint64_t)&v10);
      v10.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v11 < 0)
        operator delete(v10.__end_cap_.__value_);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_220E2FC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::linear::LinearTrainParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::linear::LinearTrainParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E2FCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::linear::FeatureSelector::Create(xgboost::linear::FeatureSelector *this, int a2)
{
  uint64_t result;
  char *v4;
  std::string *Entry;
  _QWORD *v6;
  char v7;

  switch((int)this)
  {
    case 0:
      result = operator new();
      *(_DWORD *)(result + 8) = a2;
      goto LABEL_8;
    case 1:
      result = operator new();
      *(_DWORD *)(result + 8) = a2;
      *(_QWORD *)result = &unk_24E6B5C60;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
      break;
    case 2:
      result = operator new();
      *(_DWORD *)(result + 8) = a2;
      *(_QWORD *)result = &unk_24E6B5CA8;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      break;
    case 3:
      result = operator new();
      *(_DWORD *)(result + 8) = a2;
      *(_QWORD *)result = &unk_24E6B5D68;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      break;
    case 4:
      result = operator new();
      *(_DWORD *)(result + 8) = a2;
LABEL_8:
      *(_QWORD *)result = v4 + 16;
      break;
    default:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/coordinate_common.h");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"unknown coordinate selector: ", 29);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
      result = 0;
      break;
  }
  return result;
}

void sub_220E2FEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::linear::LinearTrainParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::linear::LinearTrainParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220E2FF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::linear::CyclicFeatureSelector::~CyclicFeatureSelector(xgboost::linear::CyclicFeatureSelector *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::linear::CyclicFeatureSelector::NextFeature(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return a2 % *(_DWORD *)(*(_QWORD *)(a3 + 152) + 4);
}

void xgboost::linear::ShuffleFeatureSelector::~ShuffleFeatureSelector(xgboost::linear::ShuffleFeatureSelector *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24E6B5C60;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_24E6B5C60;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

uint64_t xgboost::linear::ShuffleFeatureSelector::Setup(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int> *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v3 = (std::vector<unsigned int> *)(a1 + 16);
  if (v5 == v4)
  {
    std::vector<unsigned int>::resize(v3, *(unsigned int *)(*(_QWORD *)(a2 + 152) + 4));
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    if (v4 == v5)
    {
      v5 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
      v7 = *(_DWORD **)(a1 + 16);
      do
        *v7++ = v6++;
      while (v7 != (_DWORD *)v5);
    }
  }
  v8 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  return std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(v4, v5, v8);
}

uint64_t xgboost::linear::ShuffleFeatureSelector::NextFeature(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * (a2 % *(_DWORD *)(*(_QWORD *)(a3 + 152) + 4)));
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;

  if ((uint64_t)(a2 - a1) >= 5)
  {
    v4 = (int *)a1;
    v12 = xmmword_220F5EC20;
    v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        v8 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v12, a3, v11);
        if (v8)
        {
          v9 = *v4;
          *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

void xgboost::linear::ThriftyFeatureSelector::~ThriftyFeatureSelector(xgboost::linear::ThriftyFeatureSelector *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_24E6B5CA8;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_24E6B5CA8;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x227667068);
}

void xgboost::linear::ThriftyFeatureSelector::Setup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, float a6, float a7)
{
  int v13;
  unsigned int v14;
  std::vector<unsigned int>::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD v65[4];
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74[5];

  if (a5 < 1)
    v13 = -1;
  else
    v13 = a5;
  *(_DWORD *)(a1 + 12) = v13;
  v14 = *(_DWORD *)(*(_QWORD *)(a2 + 152) + 4);
  v15 = *(unsigned int *)(*(_QWORD *)(a2 + 152) + 8);
  v72 = v14;
  v73 = v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v16 = a1 + 16;
  if (v18 == v17)
  {
    v19 = v14 * v15;
    std::vector<float>::resize(v16, v19);
    std::vector<unsigned long>::resize(a1 + 40, v19);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 64), v15);
    std::vector<std::pair<double,double>>::resize(a1 + 88, v19);
  }
  v20 = *(void **)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96) - (_QWORD)v20;
  if (v21 >= 1)
    bzero(v20, 16 * (((unint64_t)v21 >> 4) - ((unint64_t)v21 > 0xF)) + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a4 + 80))(&v70, a4);
  v68 = v70;
  v69 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v66, 0);
  while ((xgboost::BatchIterator<xgboost::CSCPage>::operator!=(&v68) & 1) != 0)
  {
    v24 = (uint64_t **)xgboost::BatchIterator<xgboost::CSCPage>::operator*(&v68);
    v25 = **v24;
    v65[0] = ((*v24)[1] - v25) >> 3;
    v65[1] = v25;
    v26 = *v24[1];
    v65[2] = (v24[1][1] - v26) >> 3;
    v65[3] = v26;
    v27 = *(_DWORD *)(a1 + 8);
    v74[0] = (uint64_t)v65;
    v74[1] = (uint64_t)&v73;
    v74[2] = a1;
    v74[3] = (uint64_t)&v72;
    v74[4] = a3;
    xgboost::common::ParallelFor<unsigned int,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda#1}>(v72, v27, 2, 0, (uint64_t)v74);
    xgboost::BatchIterator<xgboost::CSCPage>::operator++(&v68);
  }
  v28 = v67;
  if (v67)
  {
    v29 = (unint64_t *)&v67->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v69;
  if (v69)
  {
    v32 = (unint64_t *)&v69->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v71;
  if (v71)
  {
    v35 = (unint64_t *)&v71->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(_QWORD *)(a1 + 16);
  v38 = *(_QWORD *)(a1 + 24) - v37;
  if (v38 >= 1)
    bzero(*(void **)(a1 + 16), 4 * (((unint64_t)v38 >> 2) - ((unint64_t)v38 > 3)) + 4);
  v39 = *(_QWORD **)(a1 + 40);
  v40 = *(_QWORD **)(a1 + 48);
  if (v39 != v40)
  {
    v41 = 0;
    do
      *v39++ = v41++;
    while (v39 != v40);
  }
  if (v73)
  {
    v42 = 0;
    v43 = a6;
    v44 = a7;
    do
    {
      v45 = v72;
      if (v72)
      {
        v46 = 0;
        v47 = v72 * v42;
        v48 = *(_QWORD *)(a1 + 88);
        v49 = *(_QWORD *)(a2 + 152);
        v50 = *(_QWORD *)(a2 + 160) + 4 * v42;
        v51 = *(_QWORD *)(a1 + 16);
        do
        {
          v52 = (v45 * v42 + v46);
          v53 = *(double *)(v48 + 16 * v52 + 8);
          v54 = 0.0;
          if (v53 >= 0.00000999999975)
          {
            v55 = *(float *)(v50 + 4 * v46 * *(unsigned int *)(v49 + 8));
            v56 = *(double *)(v48 + 16 * v52) + v44 * v55;
            v57 = v53 + v44;
            v58 = v55 - v56 / (v53 + v44);
            v59 = -v55;
            if (v58 >= 0.0)
            {
              v54 = -(v56 + v43) / v57;
              if (v54 < v59)
                v54 = -v55;
            }
            else
            {
              v54 = -(v56 - v43) / v57;
              if (v54 > v59)
                v54 = -v55;
            }
          }
          v60 = v54;
          *(float *)(v51 + 4 * v52) = v60;
          ++v46;
        }
        while (v45 != v46);
        v61 = v45;
      }
      else
      {
        v61 = 0;
        v47 = 0;
      }
      v62 = *(_QWORD *)(a1 + 40) + 8 * v47;
      v74[0] = v37;
      v63 = 126 - 2 * __clz(v61);
      if ((_DWORD)v45)
        v64 = v63;
      else
        v64 = 0;
      std::__introsort<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v62, (uint64_t *)(v62 + 8 * v61), v74, v64, 1);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v42++) = 0;
    }
    while (v42 < v73);
  }
}

void sub_220E309D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::linear::ThriftyFeatureSelector::NextFeature(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(unsigned int *)(v4 + 4 * a4);
  *(_DWORD *)(v4 + 4 * a4) = v5 + 1;
  if (v5 >= *(_DWORD *)(a1 + 12))
    return 0xFFFFFFFFLL;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 + 152) + 4);
  if ((_DWORD)v5 + 1 == v6)
    return 0xFFFFFFFFLL;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * ((v6 * a4) + v5)) - v6 * a4;
}

void std::vector<std::pair<double,double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<std::pair<double,double>>::__append((void **)a1, a2 - v2);
  }
}

uint64_t xgboost::BatchIterator<xgboost::CSCPage>::operator!=(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) ^ 1;
}

void sub_220E30B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::BatchIterator<xgboost::CSCPage>::operator*(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

void sub_220E30BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::BatchIterator<xgboost::CSCPage>::operator++(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_220E30C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<double,double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(a1, a2);
  return a1;
}

void sub_220E30DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::CSCPage>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6B5CF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E30E80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::CSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::CSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::CSCPage>,xgboost::BatchIteratorImpl<xgboost::CSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::CSCPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  __int128 v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *ptr;
  unsigned int v20;
  __int128 v21;
  unsigned int v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  unsigned int v26;
  __int128 v27;
  unsigned int v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  int v42;
  int v43;
  std::exception_ptr v44;
  std::mutex v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v43 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v44);
    if (v44.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/../common/threading_utils.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n_threads >= 1", 14);
      v15 = *((char *)v44.__ptr_ + 23);
      v16 = v15 >= 0 ? v44.__ptr_ : *(void **)v44.__ptr_;
      v17 = v15 >= 0 ? *((unsigned __int8 *)v44.__ptr_ + 23) : *((_QWORD *)v44.__ptr_ + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
      ptr = v44.__ptr_;
      v44.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, (uint64_t)ptr);
    }
  }
  v44.__ptr_ = 0;
  v45.__m_.__sig = 850045863;
  memset(v45.__m_.__opaque, 0, sizeof(v45.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v9 = 0;
        do
        {
          v10 = *(_OWORD *)(a5 + 16);
          v40[0] = *(_OWORD *)a5;
          v40[1] = v10;
          v41 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v40, v9++);
        }
        while (a1 != v9);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v20 = 0;
          do
          {
            v21 = *(_OWORD *)(a5 + 16);
            v36[0] = *(_OWORD *)a5;
            v36[1] = v21;
            v37 = *(_QWORD *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v36, v20++);
          }
          while (a1 != v20);
        }
      }
      else if (a1)
      {
        v26 = 0;
        do
        {
          v27 = *(_OWORD *)(a5 + 16);
          v38[0] = *(_OWORD *)a5;
          v38[1] = v27;
          v39 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v38, v26++);
        }
        while (a1 != v26);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v22 = 0;
          do
          {
            v23 = *(_OWORD *)(a5 + 16);
            v32[0] = *(_OWORD *)a5;
            v32[1] = v23;
            v33 = *(_QWORD *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v32, v22++);
          }
          while (a1 != v22);
        }
      }
      else if (a1)
      {
        v28 = 0;
        do
        {
          v29 = *(_OWORD *)(a5 + 16);
          v34[0] = *(_OWORD *)a5;
          v34[1] = v29;
          v35 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v34, v28++);
        }
        while (a1 != v28);
      }
      break;
    case 3:
      if (a1)
      {
        v24 = 0;
        do
        {
          v25 = *(_OWORD *)(a5 + 16);
          v30[0] = *(_OWORD *)a5;
          v30[1] = v25;
          v31 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_((uint64_t)&v44, (uint64_t)v30, v24++);
        }
        while (a1 != v24);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v44);
  std::mutex::~mutex(&v45);
  std::exception_ptr::~exception_ptr(&v44);
}

void sub_220E311F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _ZN4dmlc12OMPException3RunIZN7xgboost6linear22ThriftyFeatureSelector5SetupERKNS2_3gbm13GBLinearModelERKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS9_9allocatorISD_EEEEPNS2_7DMatrixEffiEUlT_E_JjEEEvSL_DpT0_(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float32x2_t v19;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * a3);
  v4 = *v3;
  v5 = v3[1] - *v3;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 0;
  if (v7)
    goto LABEL_15;
  v8 = **(unsigned int **)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = **(_DWORD **)(a2 + 24);
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88);
    v12 = v6 + 8 * v4 + 4;
    while (!(_DWORD)v5)
    {
LABEL_13:
      if (++v9 == v8)
        return;
    }
    v13 = v5;
    v14 = v5;
    v15 = (float *)v12;
    while (v13)
    {
      v16 = (v9 + *((_DWORD *)v15 - 1) * v8);
      v17 = **(_QWORD **)(a2 + 32);
      v18 = *(float *)(v17 + 8 * v16 + 4);
      if (v18 >= 0.0)
      {
        v19.i32[0] = *(_DWORD *)(v17 + 8 * v16);
        v19.f32[1] = v18 * *v15;
        *(float64x2_t *)(v11 + 16 * (a3 + v10 * (_DWORD)v9)) = vaddq_f64(*(float64x2_t *)(v11 + 16 * (a3 + v10 * (_DWORD)v9)), vcvtq_f64_f32(vmul_n_f32(v19, *v15)));
      }
      v15 += 2;
      --v13;
      if (!--v14)
        goto LABEL_13;
    }
LABEL_15:
    std::terminate();
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (fabsf(*(float *)(*a3 + 4 * v20)) > fabsf(*(float *)(*a3 + 4 * *v9)))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (fabsf(*(float *)(*a3 + 4 * *(v9 - 1))) <= fabsf(*(float *)(*a3 + 4 * *v9)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      v5 = 8;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = fabsf(*(float *)(v4 + 4 * v7));
        if (v9 > fabsf(*(float *)(v4 + 4 * v8)))
        {
          v10 = v5;
          while (1)
          {
            *(uint64_t *)((char *)result + v10) = v8;
            v11 = v10 - 8;
            if (v10 == 8)
              break;
            v8 = *(uint64_t *)((char *)result + v10 - 16);
            v10 -= 8;
            if (v9 <= fabsf(*(float *)(v4 + 4 * v8)))
            {
              v12 = (uint64_t *)((char *)result + v11);
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *v12 = v7;
        }
        v3 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = fabsf(*(float *)(v4 + 4 * v5));
        if (v7 > fabsf(*(float *)(v4 + 4 * v6)))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 > fabsf(*(float *)(v4 + 4 * v6)));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  v6 = *a4;
  v7 = fabsf(*(float *)(*a4 + 4 * *a2));
  v8 = fabsf(*(float *)(*a4 + 4 * *a1));
  v9 = *a3;
  v10 = fabsf(*(float *)(*a4 + 4 * *a3));
  if (v7 > v8)
  {
    if (v10 > v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (fabsf(*(float *)(v6 + 4 * *a3)) <= v8)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v10 > v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a1;
    if (fabsf(*(float *)(v6 + 4 * *a2)) <= fabsf(*(float *)(v6 + 4 * *a1)))
      return 1;
    *a1 = *a2;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = fabsf(*(float *)(*a3 + 4 * *a1));
  if (v5 <= fabsf(*(float *)(*a3 + 4 * *(a2 - 1))))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 <= fabsf(*(float *)(v4 + 4 * *v6)));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 <= fabsf(*(float *)(v4 + 4 * v7)));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 > fabsf(*(float *)(v4 + 4 * v9)));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 <= fabsf(*(float *)(v4 + 4 * v12)));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 > fabsf(*(float *)(v4 + 4 * v13)));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = fabsf(*(float *)(*a3 + 4 * *a1));
  do
    v7 = a1[++v3];
  while (fabsf(*(float *)(v5 + 4 * v7)) > v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (fabsf(*(float *)(v5 + 4 * v11)) <= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (fabsf(*(float *)(v5 + 4 * v10)) <= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = &a1[v3];
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v7;
      do
      {
        v15 = v13[1];
        ++v13;
        v7 = v15;
      }
      while (fabsf(*(float *)(v5 + 4 * v15)) > v6);
      do
      {
        v16 = *--v14;
        v12 = v16;
      }
      while (fabsf(*(float *)(v5 + 4 * v16)) <= v6);
    }
    while (v13 < v14);
    v9 = v13 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (fabsf(*(float *)(*a3 + 4 * v8)) > fabsf(*(float *)(*a3 + 4 * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = fabsf(*(float *)(v13 + 4 * *v11));
    if (v17 > fabsf(*(float *)(v13 + 4 * *v10)))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= fabsf(*(float *)(v13 + 4 * v16)))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a5);
  v11 = *a5;
  v12 = *a3;
  if (fabsf(*(float *)(*a5 + 4 * *a4)) > fabsf(*(float *)(*a5 + 4 * *a3)))
  {
    *a3 = *a4;
    *a4 = v12;
    v13 = *a2;
    if (fabsf(*(float *)(v11 + 4 * *a3)) > fabsf(*(float *)(v11 + 4 * *a2)))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (fabsf(*(float *)(v11 + 4 * *a2)) > fabsf(*(float *)(v11 + 4 * *a1)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a6;
  v14 = *a4;
  if (fabsf(*(float *)(*a6 + 4 * *a5)) > fabsf(*(float *)(*a6 + 4 * *a4)))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (fabsf(*(float *)(v13 + 4 * *a4)) > fabsf(*(float *)(v13 + 4 * *a3)))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (fabsf(*(float *)(v13 + 4 * *a3)) > fabsf(*(float *)(v13 + 4 * *a2)))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (fabsf(*(float *)(v13 + 4 * *a2)) > fabsf(*(float *)(v13 + 4 * *a1)))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        if (fabsf(*(float *)(*a4 + 4 * *v14)) > fabsf(*(float *)(*a4 + 4 * *a1)))
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 3)
    {
      v5 = ((uint64_t)a4 - result) >> 2;
      v6 = v5 + 1;
      v7 = (uint64_t *)(result + 8 * (v5 + 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3 && fabsf(*(float *)(v9 + 4 * *v7)) > fabsf(*(float *)(v9 + 4 * v7[1])))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = fabsf(*(float *)(v9 + 4 * *a4));
      if (fabsf(*(float *)(v9 + 4 * *v7)) <= v12)
      {
        do
        {
          v13 = v7;
          *a4 = v10;
          if (v4 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (uint64_t *)(result + 8 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && fabsf(*(float *)(v9 + 4 * *v7)) > fabsf(*(float *)(v9 + 4 * v7[1])))
          {
            ++v7;
            v6 = v15;
          }
          v10 = *v7;
          a4 = v13;
        }
        while (fabsf(*(float *)(v9 + 4 * *v7)) <= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && fabsf(*(float *)(v6 + 4 * *result)) > fabsf(*(float *)(v6 + 4 * result[1])))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,xgboost::linear::ThriftyFeatureSelector::Setup(xgboost::gbm::GBLinearModel const&,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float,int)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *a3;
    v11 = fabsf(*(float *)(*a3 + 4 * v9));
    if (fabsf(*(float *)(*a3 + 4 * *v5)) > v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (fabsf(*(float *)(v10 + 4 * *v5)) > v11);
      *v12 = v8;
    }
  }
  return result;
}

void xgboost::linear::GreedyFeatureSelector::~GreedyFeatureSelector(xgboost::linear::GreedyFeatureSelector *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24E6B5D68;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24E6B5D68;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x227667068);
}

void xgboost::linear::GreedyFeatureSelector::Setup(std::vector<unsigned int> *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  std::vector<unsigned int>::size_type v5;
  int v6;
  unsigned int *value;
  std::__compressed_pair<unsigned int *> *p_end_cap;

  v5 = *(unsigned int *)(*(_QWORD *)(a2 + 152) + 8);
  if (a5 < 1)
    v6 = -1;
  else
    v6 = a5;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  HIDWORD(this->__end_) = v6;
  if (this[1].__begin_ != value)
  {
    if (!(_DWORD)v5)
      return;
    goto LABEL_6;
  }
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)&this->__end_cap_, v5);
  std::vector<std::pair<double,double>>::resize((uint64_t)&this[1].__end_cap_, (*(_DWORD *)(*(_QWORD *)(a2 + 152) + 4) * v5));
  if ((_DWORD)v5)
LABEL_6:
    bzero(p_end_cap->__value_, 4 * v5);
}

uint64_t xgboost::linear::GreedyFeatureSelector::NextFeature(uint64_t a1, float a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t result;
  int v19;
  void *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  double v51;
  _QWORD v52[4];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  int v60;
  int v61;
  __int128 v62;
  int *v63;
  int *v64;
  uint64_t v65;
  int *v66;

  v61 = a6;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(v8 + 4 * a6);
  v10 = v9 + 1;
  *(_DWORD *)(v8 + 4 * a6) = v9 + 1;
  if (v9 >= *(_DWORD *)(a1 + 12))
    return 0xFFFFFFFFLL;
  v12 = *(_QWORD *)(a5 + 152);
  if (v10 == *(_DWORD *)(v12 + 4))
    return 0xFFFFFFFFLL;
  v19 = *(_DWORD *)(v12 + 8);
  v59 = *(_DWORD *)(v12 + 4);
  v60 = v19;
  v20 = *(void **)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48) - (_QWORD)v20;
  if (v21 >= 1)
    bzero(v20, 16 * (((unint64_t)v21 >> 4) - ((unint64_t)v21 > 0xF)) + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a8 + 80))(&v57, a8);
  v55 = v57;
  v56 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v53, 0);
  while ((xgboost::BatchIterator<xgboost::CSCPage>::operator!=(&v55) & 1) != 0)
  {
    v24 = (uint64_t **)xgboost::BatchIterator<xgboost::CSCPage>::operator*(&v55);
    v25 = **v24;
    v52[0] = ((*v24)[1] - v25) >> 3;
    v52[1] = v25;
    v26 = *v24[1];
    v52[2] = (v24[1][1] - v26) >> 3;
    v52[3] = v26;
    v27 = *(_DWORD *)(a1 + 8);
    *(_QWORD *)&v62 = v52;
    *((_QWORD *)&v62 + 1) = a1;
    v63 = &v61;
    v64 = &v59;
    v65 = a7;
    v66 = &v60;
    xgboost::common::ParallelFor<unsigned int,xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1}>(v59, v27, 2, 0, &v62);
    xgboost::BatchIterator<xgboost::CSCPage>::operator++(&v55);
  }
  v28 = v54;
  if (v54)
  {
    v29 = (unint64_t *)&v54->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v56;
  if (v56)
  {
    v32 = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v58;
  if (v58)
  {
    v35 = (unint64_t *)&v58->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v59)
    return 0;
  v37 = 0;
  LODWORD(result) = 0;
  v38 = *(_QWORD *)(a1 + 40);
  v39 = a2;
  v40 = a3;
  v41 = 0.0;
  do
  {
    v42 = (v61 * v59 + v37);
    v43 = *(double *)(v38 + 16 * v42 + 8);
    v44 = 0.0;
    if (v43 >= 0.00000999999975)
    {
      v45 = *(float *)(*(_QWORD *)(a5 + 160) + 4 * v61 + 4 * v37 * *(unsigned int *)(*(_QWORD *)(a5 + 152) + 8));
      v46 = *(double *)(v38 + 16 * v42) + v40 * v45;
      v47 = v43 + v40;
      v48 = v45 - v46 / (v43 + v40);
      v49 = -v45;
      if (v48 >= 0.0)
      {
        v44 = -(v46 + v39) / v47;
        if (v44 < v49)
          v44 = -v45;
      }
      else
      {
        v44 = -(v46 - v39) / v47;
        if (v44 > v49)
          v44 = -v45;
      }
    }
    v50 = v44;
    v51 = fabsf(v50);
    if (v41 >= v51)
      result = result;
    else
      result = v37;
    if (v41 < v51)
      v41 = v51;
    ++v37;
  }
  while (v59 != v37);
  return result;
}

void sub_220E3250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, _OWORD *a5)
{
  unsigned int v9;
  __int128 v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *ptr;
  unsigned int v20;
  __int128 v21;
  unsigned int v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  unsigned int v26;
  __int128 v27;
  unsigned int v28;
  __int128 v29;
  _OWORD v30[3];
  _OWORD v31[3];
  _OWORD v32[3];
  _OWORD v33[3];
  _OWORD v34[3];
  _OWORD v35[3];
  int v36;
  int v37;
  std::exception_ptr v38;
  std::mutex v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v36 = 1;
  v37 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v38);
    if (v38.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/../common/threading_utils.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n_threads >= 1", 14);
      v15 = *((char *)v38.__ptr_ + 23);
      v16 = v15 >= 0 ? v38.__ptr_ : *(void **)v38.__ptr_;
      v17 = v15 >= 0 ? *((unsigned __int8 *)v38.__ptr_ + 23) : *((_QWORD *)v38.__ptr_ + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
      ptr = v38.__ptr_;
      v38.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v38, (uint64_t)ptr);
    }
  }
  v38.__ptr_ = 0;
  v39.__m_.__sig = 850045863;
  memset(v39.__m_.__opaque, 0, sizeof(v39.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v9 = 0;
        do
        {
          v10 = a5[1];
          v35[0] = *a5;
          v35[1] = v10;
          v35[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v35, v9++);
        }
        while (a1 != v9);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v20 = 0;
          do
          {
            v21 = a5[1];
            v33[0] = *a5;
            v33[1] = v21;
            v33[2] = a5[2];
            dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v33, v20++);
          }
          while (a1 != v20);
        }
      }
      else if (a1)
      {
        v26 = 0;
        do
        {
          v27 = a5[1];
          v34[0] = *a5;
          v34[1] = v27;
          v34[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v34, v26++);
        }
        while (a1 != v26);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v22 = 0;
          do
          {
            v23 = a5[1];
            v31[0] = *a5;
            v31[1] = v23;
            v31[2] = a5[2];
            dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v31, v22++);
          }
          while (a1 != v22);
        }
      }
      else if (a1)
      {
        v28 = 0;
        do
        {
          v29 = a5[1];
          v32[0] = *a5;
          v32[1] = v29;
          v32[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v32, v28++);
        }
        while (a1 != v28);
      }
      break;
    case 3:
      if (a1)
      {
        v24 = 0;
        do
        {
          v25 = a5[1];
          v30[0] = *a5;
          v30[1] = v25;
          v30[2] = a5[2];
          dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda#1},unsigned int>((uint64_t)&v38, (uint64_t)v30, v24++);
        }
        while (a1 != v24);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v38);
  std::mutex::~mutex(&v39);
  std::exception_ptr::~exception_ptr(&v38);
}

void sub_220E32818(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void dmlc::OMPException::Run<xgboost::linear::GreedyFeatureSelector::NextFeature(int,xgboost::gbm::GBLinearModel const&,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,float,float)::{lambda(unsigned int)#1},unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x2_t v16;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * a3);
  v4 = *v3;
  v5 = v3[1] - *v3;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 0;
  if (v7)
    goto LABEL_12;
  v8 = v5;
  if ((_DWORD)v5)
  {
    v9 = **(_DWORD **)(a2 + 16);
    v10 = a3 + **(_DWORD **)(a2 + 24) * v9;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
    v12 = (float *)(v6 + 8 * v4 + 4);
    while (v5)
    {
      v13 = (v9 + **(_DWORD **)(a2 + 40) * *((_DWORD *)v12 - 1));
      v14 = **(_QWORD **)(a2 + 32);
      v15 = *(float *)(v14 + 8 * v13 + 4);
      if (v15 >= 0.0)
      {
        v16.i32[0] = *(_DWORD *)(v14 + 8 * v13);
        v16.f32[1] = v15 * *v12;
        *(float64x2_t *)(v11 + 16 * v10) = vaddq_f64(*(float64x2_t *)(v11 + 16 * v10), vcvtq_f64_f32(vmul_n_f32(v16, *v12)));
      }
      v12 += 2;
      --v5;
      if (!--v8)
        return;
    }
LABEL_12:
    std::terminate();
  }
}

void xgboost::linear::RandomFeatureSelector::~RandomFeatureSelector(xgboost::linear::RandomFeatureSelector *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::linear::RandomFeatureSelector::NextFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v4;

  v4 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4)
       % *(_DWORD *)(*(_QWORD *)(a3 + 152) + 4);
}

double xgboost::linear::GetBiasGradientParallel(int a1, int a2, uint64_t a3, uint64_t (***a4)(_QWORD), int a5)
{
  uint64_t v7;
  void *v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double *v16;
  double *v17;
  void *__p;
  void *v19;
  int v20;
  int v21;
  _QWORD v22[5];

  v20 = a2;
  v21 = a1;
  v7 = *(_QWORD *)(**a4)(a4);
  v22[0] = 0;
  std::vector<double>::vector(&__p, a5, v22);
  v22[0] = 0;
  std::vector<double>::vector(&v16, a5, v22);
  v22[0] = a3;
  v22[1] = &v20;
  v22[2] = &v21;
  v22[3] = &__p;
  v22[4] = &v16;
  xgboost::common::ParallelFor<unsigned int,xgboost::linear::GetBiasGradientParallel(int,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,int)::{lambda#1}>(v7, a5, 2, 0, (uint64_t)v22);
  v8 = __p;
  v9 = 0.0;
  if (__p != v19)
  {
    v10 = (double *)__p;
    do
    {
      v11 = *v10++;
      v9 = v9 + v11;
    }
    while (v10 != v19);
  }
  if (v16 != v17)
  {
    v12 = 0.0;
    v13 = v16;
    do
    {
      v14 = *v13++;
      v12 = v12 + v14;
    }
    while (v13 != v17);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
    v8 = __p;
  }
  if (v8)
  {
    v19 = v8;
    operator delete(v8);
  }
  return v9;
}

void sub_220E32AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_220E32B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::GetBiasGradientParallel(int,int,std::vector<xgboost::detail::GradientPairInternal<float>> const&,xgboost::DMatrix *,int)::{lambda(unsigned int)#1}>(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9;
  __int128 v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *ptr;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  int v42;
  int v43;
  std::exception_ptr v44;
  std::mutex v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v43 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v44);
    if (v44.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/../common/threading_utils.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n_threads >= 1", 14);
      v15 = *((char *)v44.__ptr_ + 23);
      v16 = v15 >= 0 ? v44.__ptr_ : *(void **)v44.__ptr_;
      v17 = v15 >= 0 ? *((unsigned __int8 *)v44.__ptr_ + 23) : *((_QWORD *)v44.__ptr_ + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
      ptr = v44.__ptr_;
      v44.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, (uint64_t)ptr);
    }
  }
  v44.__ptr_ = 0;
  v45.__m_.__sig = 850045863;
  memset(v45.__m_.__opaque, 0, sizeof(v45.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v9 = 0;
        do
        {
          v10 = *(_OWORD *)(a5 + 16);
          v40[0] = *(_OWORD *)a5;
          v40[1] = v10;
          v41 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v40, v9++);
        }
        while (a1 != v9);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v20 = 0;
          do
          {
            v21 = *(_OWORD *)(a5 + 16);
            v36[0] = *(_OWORD *)a5;
            v36[1] = v21;
            v37 = *(_QWORD *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v36, v20++);
          }
          while (a1 != v20);
        }
      }
      else if (a1)
      {
        v26 = 0;
        do
        {
          v27 = *(_OWORD *)(a5 + 16);
          v38[0] = *(_OWORD *)a5;
          v38[1] = v27;
          v39 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v38, v26++);
        }
        while (a1 != v26);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v22 = 0;
          do
          {
            v23 = *(_OWORD *)(a5 + 16);
            v32[0] = *(_OWORD *)a5;
            v32[1] = v23;
            v33 = *(_QWORD *)(a5 + 32);
            _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v32, v22++);
          }
          while (a1 != v22);
        }
      }
      else if (a1)
      {
        v28 = 0;
        do
        {
          v29 = *(_OWORD *)(a5 + 16);
          v34[0] = *(_OWORD *)a5;
          v34[1] = v29;
          v35 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v34, v28++);
        }
        while (a1 != v28);
      }
      break;
    case 3:
      if (a1)
      {
        v24 = 0;
        do
        {
          v25 = *(_OWORD *)(a5 + 16);
          v30[0] = *(_OWORD *)a5;
          v30[1] = v25;
          v31 = *(_QWORD *)(a5 + 32);
          _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_((uint64_t)&v44, (uint64_t **)v30, v24++);
        }
        while (a1 != v24);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v44);
  std::mutex::~mutex(&v45);
  std::exception_ptr::~exception_ptr(&v44);
}

void sub_220E32E50(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double _ZN4dmlc12OMPException3RunIZN7xgboost6linear23GetBiasGradientParallelEiiRKNSt3__16vectorINS2_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEEPNS2_7DMatrixEiEUlT_E_JjEEEvSG_DpT0_(uint64_t a1, uint64_t **a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  double v6;
  double **v7;

  v3 = (*(_DWORD *)a2[2] + *(_DWORD *)a2[1] * a3);
  v4 = **a2;
  LODWORD(result) = *(_DWORD *)(v4 + 8 * v3 + 4);
  if (*(float *)&result >= 0.0)
  {
    v6 = *(float *)(v4 + 8 * v3);
    v7 = (double **)a2[4];
    *(double *)*a2[3] = *(double *)*a2[3] + v6;
    result = **v7 + *(float *)&result;
    **v7 = result;
  }
  return result;
}

void xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda(unsigned int)#1}>(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t ***a5)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *ptr;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  float v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  float v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float v52;
  float v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  int v72;
  std::exception_ptr v73;
  std::mutex v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v72 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v73);
    if (v73.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/../common/threading_utils.h");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"n_threads >= 1", 14);
      v22 = *((char *)v73.__ptr_ + 23);
      v23 = v22 >= 0 ? v73.__ptr_ : *(void **)v73.__ptr_;
      v24 = v22 >= 0 ? *((unsigned __int8 *)v73.__ptr_ + 23) : *((_QWORD *)v73.__ptr_ + 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
      ptr = v73.__ptr_;
      v73.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, (uint64_t)ptr);
    }
  }
  v73.__ptr_ = 0;
  v74.__m_.__sig = 850045863;
  memset(v74.__m_.__opaque, 0, sizeof(v74.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v9 = *(_DWORD *)a5[1];
        v10 = *(_DWORD *)a5[2];
        v11 = ***a5;
        v12 = a1;
        do
        {
          v13 = v10;
          v14 = v11 + 8 * v10;
          v16 = *(float *)(v14 + 4);
          v15 = (float *)(v14 + 4);
          v17 = v16;
          if (v16 >= 0.0)
          {
            *(float *)(v11 + 8 * v13) = (float)(v17 * *(float *)a5[3]) + *(float *)(v11 + 8 * v13);
            *v15 = v17 + 0.0;
          }
          v10 = v13 + v9;
          --v12;
        }
        while (v12);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v27 = *(_DWORD *)a5[1];
          v28 = *(_DWORD *)a5[2];
          v29 = ***a5;
          v30 = a1;
          do
          {
            v31 = v28;
            v32 = v29 + 8 * v28;
            v34 = *(float *)(v32 + 4);
            v33 = (float *)(v32 + 4);
            v35 = v34;
            if (v34 >= 0.0)
            {
              *(float *)(v29 + 8 * v31) = (float)(v35 * *(float *)a5[3]) + *(float *)(v29 + 8 * v31);
              *v33 = v35 + 0.0;
            }
            v28 = v31 + v27;
            --v30;
          }
          while (v30);
        }
      }
      else if (a1)
      {
        v54 = *(_DWORD *)a5[1];
        v55 = *(_DWORD *)a5[2];
        v56 = ***a5;
        v57 = a1;
        do
        {
          v58 = v55;
          v59 = v56 + 8 * v55;
          v61 = *(float *)(v59 + 4);
          v60 = (float *)(v59 + 4);
          v62 = v61;
          if (v61 >= 0.0)
          {
            *(float *)(v56 + 8 * v58) = (float)(v62 * *(float *)a5[3]) + *(float *)(v56 + 8 * v58);
            *v60 = v62 + 0.0;
          }
          v55 = v58 + v54;
          --v57;
        }
        while (v57);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v36 = *(_DWORD *)a5[1];
          v37 = *(_DWORD *)a5[2];
          v38 = ***a5;
          v39 = a1;
          do
          {
            v40 = v37;
            v41 = v38 + 8 * v37;
            v43 = *(float *)(v41 + 4);
            v42 = (float *)(v41 + 4);
            v44 = v43;
            if (v43 >= 0.0)
            {
              *(float *)(v38 + 8 * v40) = (float)(v44 * *(float *)a5[3]) + *(float *)(v38 + 8 * v40);
              *v42 = v44 + 0.0;
            }
            v37 = v40 + v36;
            --v39;
          }
          while (v39);
        }
      }
      else if (a1)
      {
        v63 = *(_DWORD *)a5[1];
        v64 = *(_DWORD *)a5[2];
        v65 = ***a5;
        v66 = a1;
        do
        {
          v67 = v64;
          v68 = v65 + 8 * v64;
          v70 = *(float *)(v68 + 4);
          v69 = (float *)(v68 + 4);
          v71 = v70;
          if (v70 >= 0.0)
          {
            *(float *)(v65 + 8 * v67) = (float)(v71 * *(float *)a5[3]) + *(float *)(v65 + 8 * v67);
            *v69 = v71 + 0.0;
          }
          v64 = v67 + v63;
          --v66;
        }
        while (v66);
      }
      break;
    case 3:
      if (a1)
      {
        v45 = *(_DWORD *)a5[1];
        v46 = *(_DWORD *)a5[2];
        v47 = ***a5;
        v48 = a1;
        do
        {
          v49 = v46;
          v50 = v47 + 8 * v46;
          v52 = *(float *)(v50 + 4);
          v51 = (float *)(v50 + 4);
          v53 = v52;
          if (v52 >= 0.0)
          {
            *(float *)(v47 + 8 * v49) = (float)(v53 * *(float *)a5[3]) + *(float *)(v47 + 8 * v49);
            *v51 = v53 + 0.0;
          }
          v46 = v49 + v45;
          --v48;
        }
        while (v48);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v73);
  std::mutex::~mutex(&v74);
  std::exception_ptr::~exception_ptr(&v73);
}

void sub_220E33338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, std::exception_ptr a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_rank_metric__(xgboost::metric *this)
{
  return 0;
}

_QWORD *std::__function::__value_func<xgboost::Metric * ()(char const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_220E3350C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5EB8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8C38;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAE98;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BE8D8;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  uint64_t v3;
  float v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  v2 = *a2;
  v3 = operator new();
  *(_QWORD *)v3 = off_24E6B5F38;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: param != nullptr", 30);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"AMS must be in format ams@k", 27);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  v4 = atof(v2);
  *(float *)(v3 + 40) = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ams@", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(_OWORD *)(v3 + 16) = v10;
  *(_QWORD *)(v3 + 32) = v11;
  v12[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](&v14);
  return v3;
}

void sub_220E336E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40C9E233A4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

{
}

void xgboost::metric::EvalAMS::~EvalAMS(void **this)
{
  *this = off_24E6B5F38;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_24E6B5F38;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x227667068);
}

void xgboost::Metric::SaveConfig(xgboost::Metric *this, xgboost::Json *a2)
{
  char *v3;
  uint64_t *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  uint64_t v8;
  _QWORD v9[2];
  void *v10[2];
  uint64_t v11;

  v3 = (char *)(*(uint64_t (**)(xgboost::Metric *))(*(_QWORD *)this + 48))(this);
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  v9[1] = 0;
  *(_OWORD *)v10 = *(_OWORD *)v7;
  v11 = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v9[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v9);
  if (v6 < 0)
    operator delete(__p[0]);
  v9[0] = off_24E6BE2B8;
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_220E338CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

double xgboost::metric::EvalAMS::Eval(uint64_t a1, uint64_t **a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  float v32;
  double v33;
  double v34;
  long double v35;
  double v36;
  long double v37;
  std::string *Entry;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  int v45;
  void *__p[2];
  char v47;
  void *v48;
  char *v49;
  char *v50;
  std::exception_ptr v51;
  std::mutex v52[4];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
    v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v51);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: !distributed", 26);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"metric AMS do not support distributed evaluation", 48);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v51);
  }
  v7 = (uint64_t)(*(_QWORD *)(a3[3] + 8) - *(_QWORD *)a3[3]) >> 2;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if ((_DWORD)v7)
  {
    v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v50, v7);
    v50 = (char *)v48 + 8 * v8;
    bzero(v48, 8 * v7);
    v49 = (char *)v48 + 8 * v7;
  }
  v9 = *a2;
  v51.__ptr_ = 0;
  v52[0].__m_.__sig = 850045863;
  memset(v52[0].__m_.__opaque, 0, sizeof(v52[0].__m_.__opaque));
  if ((_DWORD)v7)
  {
    v10 = 0;
    v11 = *v9;
    v12 = (char *)v48 + 4;
    do
    {
      *(v12 - 1) = *(_DWORD *)(v11 + 4 * v10);
      *v12 = v10;
      v12 += 2;
      ++v10;
    }
    while (v7 != v10);
  }
  dmlc::OMPException::Rethrow(&v51);
  std::mutex::~mutex(v52);
  std::exception_ptr::~exception_ptr(&v51);
  v13 = 126 - 2 * __clz((v49 - (_BYTE *)v48) >> 3);
  v51.__ptr_ = xgboost::common::CmpFirst;
  if (v49 == v48)
    v14 = 0;
  else
    v14 = v13;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>((int *)v48, (int *)v49, (uint64_t (**)(int *, int *))&v51, v14, 1);
  if ((float)(*(float *)(a1 + 40) * (float)v7))
    v15 = (float)(*(float *)(a1 + 40) * (float)v7);
  else
    v15 = v7;
  v45 = v7;
  v44 = v15;
  if ((int)v7 - 1 >= v15)
    v16 = v15;
  else
    v16 = (v7 - 1);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = (uint64_t *)a3[3];
    v19 = *v18;
    v20 = (v18[1] - *v18) >> 2;
    v21 = a3[5];
    v22 = (uint64_t *)a3[9];
    v24 = *v22;
    v23 = v22[1];
    v25 = (float *)((char *)v48 + 8);
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    do
    {
      v29 = *((unsigned int *)v25 - 1);
      if (v23 == v24)
        v30 = 1.0;
      else
        v30 = *(float *)(v24 + 4 * v29);
      v31 = v21 * v29;
      if (v31 >= v20)
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      v32 = *(float *)(v19 + 4 * v31);
      v33 = v30;
      if (v32 <= 0.5)
        v34 = -0.0;
      else
        v34 = v33;
      v28 = v28 + v34;
      if (v32 > 0.5)
        v33 = -0.0;
      v27 = v27 + v33;
      if (*(v25 - 2) != *v25)
      {
        v35 = log(v28 / (v27 + 10.0) + 1.0);
        v36 = sqrt(-(v28 - (v28 + v27 + 10.0) * v35) - (v28 - (v28 + v27 + 10.0) * v35));
        if (v26 < v36)
          v26 = v36;
      }
      ++v17;
      v25 += 2;
    }
    while (v16 != v17);
  }
  else
  {
    v28 = 0.0;
    v27 = 0.0;
    v26 = 0.0;
  }
  if (v44 == v45)
  {
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v51, (uint64_t)__p, 140, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"best-ams-ratio=", 15);
      std::ostream::operator<<();
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v51);
      if (v47 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v37 = log(v28 / (v27 + 10.0) + 1.0);
    v26 = sqrt(-(v28 - (v28 + v27 + 10.0) * v37) - (v28 - (v28 + v27 + 10.0) * v37));
  }
  if (v48)
  {
    v49 = (char *)v48;
    operator delete(v48);
  }
  return (float)v26;
}

void sub_220E33D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::metric::EvalAMS::Name(xgboost::metric::EvalAMS *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

BOOL xgboost::common::CmpFirst(float *a1, float *a2)
{
  return *a1 > *a2;
}

{
  return *a1 > *a2;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(int *a1, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int *v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  int *v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  int *v62;
  BOOL v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  char v68;
  int *v69;
  int *v70;
  int v71;
  int *v72;
  int64_t v73;
  uint64_t v74;

LABEL_1:
  v10 = a2 - 2;
  v70 = a2;
  v72 = a2 - 4;
  v69 = a2 - 6;
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v10, a1))
        {
          v30 = *a1;
          *a1 = *(a2 - 2);
          *(a2 - 2) = v30;
          v31 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v31;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, v10, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, v10, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a1 + 6, v10, a3);
        return;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v32 = a1 + 2;
              if (a1 + 2 != a2)
              {
                v33 = 0;
                v34 = a1;
                do
                {
                  v35 = v34;
                  v34 = v32;
                  if ((*a3)(v32, v35))
                  {
                    v74 = *(_QWORD *)v34;
                    v36 = v33;
                    while (1)
                    {
                      v37 = (char *)a1 + v36;
                      *((_DWORD *)v37 + 2) = *(int *)((char *)a1 + v36);
                      *((_DWORD *)v37 + 3) = *(int *)((char *)a1 + v36 + 4);
                      if (!v36)
                        break;
                      v36 -= 8;
                      if (((*a3)((int *)&v74, (int *)((char *)a1 + v36)) & 1) == 0)
                      {
                        v38 = (int *)((char *)a1 + v36 + 8);
                        goto LABEL_67;
                      }
                    }
                    v38 = a1;
LABEL_67:
                    *(_QWORD *)v38 = v74;
                  }
                  v32 = v34 + 2;
                  v33 += 8;
                }
                while (v34 + 2 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v64 = a1 + 2;
            if (a1 + 2 != a2)
            {
              v65 = a1 - 2;
              do
              {
                v66 = a1;
                a1 = v64;
                if ((*a3)(v64, v66))
                {
                  v74 = *(_QWORD *)a1;
                  v67 = v65;
                  do
                  {
                    v67[4] = v67[2];
                    v67[5] = v67[3];
                    v68 = (*a3)((int *)&v74, v67);
                    v67 -= 2;
                  }
                  while ((v68 & 1) != 0);
                  *((_QWORD *)v67 + 2) = v74;
                }
                v64 = a1 + 2;
                v65 += 2;
              }
              while (a1 + 2 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v39 = (v13 - 2) >> 1;
            v73 = v39;
            do
            {
              v40 = v39;
              if (v73 >= v39)
              {
                v41 = (2 * v39) | 1;
                v42 = &a1[2 * v41];
                if (2 * v39 + 2 < (uint64_t)v13 && (*a3)(&a1[2 * v41], v42 + 2))
                {
                  v42 += 2;
                  v41 = 2 * v40 + 2;
                }
                v43 = &a1[2 * v40];
                if (((*a3)(v42, v43) & 1) == 0)
                {
                  v74 = *(_QWORD *)v43;
                  do
                  {
                    v44 = v42;
                    *v43 = *v42;
                    v43[1] = v42[1];
                    if (v73 < v41)
                      break;
                    v45 = (2 * v41) | 1;
                    v42 = &a1[2 * v45];
                    v46 = 2 * v41 + 2;
                    if (v46 < (uint64_t)v13 && (*a3)(&a1[2 * v45], v42 + 2))
                    {
                      v42 += 2;
                      v45 = v46;
                    }
                    v43 = v44;
                    v41 = v45;
                  }
                  while (!(*a3)(v42, (int *)&v74));
                  *(_QWORD *)v44 = v74;
                }
              }
              v39 = v40 - 1;
            }
            while (v40);
            v47 = (unint64_t)v12 >> 3;
            v48 = v70;
            do
            {
              v49 = 0;
              v50 = *a1;
              v71 = a1[1];
              v51 = v47 - 2;
              if (v47 < 2)
                v51 = v47 - 1;
              v52 = v51 >> 1;
              v53 = a1;
              do
              {
                v54 = &v53[2 * v49 + 2];
                v55 = (2 * v49) | 1;
                v56 = 2 * v49 + 2;
                if (v56 < v47 && (*a3)(&v53[2 * v49 + 2], &v53[2 * v49 + 4]))
                {
                  v54 += 2;
                  v55 = v56;
                }
                *v53 = *v54;
                v53[1] = v54[1];
                v53 = v54;
                v49 = v55;
              }
              while (v55 <= v52);
              v57 = v48 - 2;
              if (v54 == v48 - 2)
              {
                *v54 = v50;
                v54[1] = v71;
                v59 = v47 - 1;
              }
              else
              {
                *v54 = *(v48 - 2);
                v54[1] = *(v48 - 1);
                *(v48 - 2) = v50;
                *(v48 - 1) = v71;
                v58 = (char *)v54 - (char *)a1 + 8;
                v59 = v47 - 1;
                if (v58 >= 9)
                {
                  v60 = (((unint64_t)v58 >> 3) - 2) >> 1;
                  v61 = &a1[2 * v60];
                  if ((*a3)(v61, v54))
                  {
                    v74 = *(_QWORD *)v54;
                    do
                    {
                      v62 = v61;
                      *v54 = *v61;
                      v54[1] = v61[1];
                      if (!v60)
                        break;
                      v60 = (v60 - 1) >> 1;
                      v61 = &a1[2 * v60];
                      v54 = v62;
                    }
                    while (((*a3)(v61, (int *)&v74) & 1) != 0);
                    *(_QWORD *)v62 = v74;
                  }
                }
              }
              v48 = v57;
              v63 = v47 <= 2;
              v47 = v59;
            }
            while (!v63);
          }
          return;
        }
        v14 = &a1[2 * (v13 >> 1)];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(&a1[2 * (v13 >> 1)], a1, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, &a1[2 * (v13 >> 1)], v10, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1 + 2, v14 - 2, v72, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1 + 4, &a1[2 * (v13 >> 1) + 2], v69, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v14 - 2, &a1[2 * (v13 >> 1)], &a1[2 * (v13 >> 1) + 2], a3);
          v15 = *a1;
          *a1 = *v14;
          *v14 = v15;
          v16 = a1[1];
          a1[1] = v14[1];
          v14[1] = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(a1 - 2, a1) & 1) == 0)
        {
          v74 = *(_QWORD *)a1;
          if (((*a3)((int *)&v74, v10) & 1) != 0)
          {
            v11 = a1;
            do
              v11 += 2;
            while (((*a3)((int *)&v74, v11) & 1) == 0);
          }
          else
          {
            v25 = a1 + 2;
            do
            {
              v11 = v25;
              if (v25 >= a2)
                break;
              v26 = (*a3)((int *)&v74, v25);
              v25 = v11 + 2;
            }
            while (!v26);
          }
          v27 = a2;
          if (v11 < a2)
          {
            v27 = a2;
            do
              v27 -= 2;
            while (((*a3)((int *)&v74, v27) & 1) != 0);
          }
          while (v11 < v27)
          {
            v28 = *v11;
            *v11 = *v27;
            *v27 = v28;
            v29 = v11[1];
            v11[1] = v27[1];
            v27[1] = v29;
            do
              v11 += 2;
            while (!(*a3)((int *)&v74, v11));
            do
              v27 -= 2;
            while (((*a3)((int *)&v74, v27) & 1) != 0);
          }
          if (v11 - 2 != a1)
          {
            *a1 = *(v11 - 2);
            a1[1] = *(v11 - 1);
          }
          a5 = 0;
          *((_QWORD *)v11 - 1) = v74;
          continue;
        }
        v17 = 0;
        v74 = *(_QWORD *)a1;
        do
          v17 += 2;
        while (((*a3)(&a1[v17], (int *)&v74) & 1) != 0);
        v18 = &a1[v17];
        v19 = v70;
        if (v17 == 2)
        {
          v19 = v70;
          do
          {
            if (v18 >= v19)
              break;
            v19 -= 2;
          }
          while (((*a3)(v19, (int *)&v74) & 1) == 0);
        }
        else
        {
          do
            v19 -= 2;
          while (!(*a3)(v19, (int *)&v74));
        }
        v11 = &a1[v17];
        if (v18 < v19)
        {
          v20 = v19;
          do
          {
            v21 = *v11;
            *v11 = *v20;
            *v20 = v21;
            v22 = v11[1];
            v11[1] = v20[1];
            v20[1] = v22;
            do
              v11 += 2;
            while (((*a3)(v11, (int *)&v74) & 1) != 0);
            do
              v20 -= 2;
            while (!(*a3)(v20, (int *)&v74));
          }
          while (v11 < v20);
        }
        if (v11 - 2 != a1)
        {
          *a1 = *(v11 - 2);
          a1[1] = *(v11 - 1);
        }
        *((_QWORD *)v11 - 1) = v74;
        v23 = v18 >= v19;
        a2 = v70;
        if (!v23)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(a1, v11 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, v11 - 2, a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(v11, v70, a3))
        {
          if (v24)
            continue;
          goto LABEL_30;
        }
        a2 = v11 - 2;
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8;
  uint64_t result;
  int v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      v17 = a1[1];
      a1[1] = a2[1];
      a2[1] = v17;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      v12 = a2 + 1;
    }
    v15 = v11;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *(_QWORD *)v11;
      v14 = v12;
      while (1)
      {
        v15 = (int *)((char *)a1 + v14);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = *(int *)((char *)a1 + v14 + 20);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)((int *)&v17, v15 + 2) & 1) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_QWORD *)v16 = v17;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, int *a4, uint64_t (**a5)(int *, int *))
{
  float result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    if ((*a5)(a3, a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      if ((*a5)(a2, a1))
      {
        result = *(float *)a1;
        *a1 = *a2;
        *(float *)a2 = result;
        v15 = a1[1];
        a1[1] = a2[1];
        a2[1] = v15;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t (**a6)(int *, int *))
{
  float v12;
  float result;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(int *, int *, float))*a6)(a5, a4, v12))
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    v15 = a4[1];
    a4[1] = a5[1];
    a5[1] = v15;
    if ((*a6)(a4, a3))
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      if ((*a6)(a3, a2))
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        if ((*a6)(a2, a1))
        {
          result = *(float *)a1;
          *a1 = *a2;
          *(float *)a2 = result;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

void std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B5FC0;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8D18;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BA5F0;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BAF90;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BEAD8;
  return result;
}

xgboost::metric::EvalRank *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  xgboost::metric::EvalRank *v3;

  v2 = *a2;
  v3 = (xgboost::metric::EvalRank *)operator new();
  xgboost::metric::EvalRank::EvalRank(v3, "pre", v2);
  *(_QWORD *)v3 = off_24E6B6030;
  return v3;
}

void sub_220E34BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

{
}

{
}

xgboost::metric::EvalRank *xgboost::metric::EvalRank::EvalRank(xgboost::metric::EvalRank *this, const char *a2, const char *a3)
{
  char *v5;
  char *v6;
  int v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  *((_DWORD *)this + 4) = -1;
  v5 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  v6 = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *(_QWORD *)this = off_24E6B60E0;
  *((_QWORD *)this + 7) = 0;
  if (a3)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
    v8 = sscanf(a3, "%u[-]?", v5);
    v9 = strlen(a2);
    if (v8 == 1)
    {
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v9);
      LOBYTE(v16) = 64;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
      v12 = strlen(a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a3, v12);
      std::stringbuf::str();
    }
    else
    {
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v9);
      v14 = strlen(a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
      std::stringbuf::str();
    }
    if (*((char *)this + 47) < 0)
      operator delete(*(void **)v6);
    *(_OWORD *)v6 = v16;
    *((_QWORD *)v6 + 2) = v17;
    if (a3[strlen(a3) - 1] == 45)
      *((_BYTE *)this + 48) = 1;
    v18[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v18[1] = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete((void *)v18[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x227666FE4](&v20);
  }
  else
  {
    MEMORY[0x227666C18]((char *)this + 24, a2);
  }
  return this;
}

void sub_220E34E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void **v7;
  uint64_t v9;
  va_list va;

  va_start(va, a6);
  std::ostringstream::~ostringstream((uint64_t)va);
  v9 = *(_QWORD *)(v6 + 56);
  *(_QWORD *)(v6 + 56) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(char *)(v6 + 47) < 0)
    operator delete(*v7);
  _Unwind_Resume(a1);
}

void xgboost::metric::EvalPrecision::~EvalPrecision(xgboost::metric::EvalPrecision *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalRank::Eval(uint64_t *a1, uint64_t **a2, std::vector<unsigned int> *a3, uint64_t a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int> *v19;
  std::vector<unsigned int>::pointer v20;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer *p_end;
  std::vector<unsigned int>::pointer v23;
  uint64_t v24;
  void *v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::vector<unsigned int>::pointer v36;
  std::vector<unsigned int>::pointer v37;
  uint64_t v38;
  char *v39;
  uint64_t GPUMetric;
  uint64_t v41;
  double v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  rabit::engine *v56;
  void *Engine;
  double v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *value;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  double v80;
  double *v81;
  double v82;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  std::vector<unsigned int> *v87;
  void *v88;
  double *v89;
  std::vector<unsigned int> v90;
  void *__p;
  char *v92;
  char *v93;
  std::vector<unsigned int>::value_type __x[2];
  std::mutex v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  __p = (void *)(((*a2)[1] - **a2) >> 2);
  v90.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*((_QWORD *)a3[1].__begin_ + 1)
                                                              - *(_QWORD *)a3[1].__begin_) >> 2);
  if (__p != v90.__begin_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(double *)__x != 0.0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *(char *)(*(_QWORD *)__x + 23);
      v13 = v12 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v14 = v12 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label size predict size not match", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v17 = *(_QWORD *)__x;
      *(double *)__x = 0.0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v17);
    }
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v90, 2uLL, __x);
  begin = v90.__begin_;
  v90.__begin_[1] = (unint64_t)((*a2)[1] - **a2) >> 2;
  v19 = a3 + 2;
  v20 = a3[2].__begin_;
  end = a3[2].__end_;
  if (end == v20)
    v19 = &v90;
  else
    begin = a3[2].__begin_;
  v87 = v19;
  if (end == v20)
    p_end = &v90.__end_;
  else
    p_end = &a3[2].__end_;
  v23 = *p_end;
  LODWORD(v88) = 0;
  v24 = (char *)v23 - (char *)begin;
  __p = (void *)(v24 >> 2);
  if (!v24)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__x);
    if (*(double *)__x != 0.0)
    {
      v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      v47 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Check failed: ", 14);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"gptr.size() != 0U", 17);
      v50 = *(char *)(*(_QWORD *)__x + 23);
      v51 = v50 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v52 = v50 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"must specify group when constructing rank file", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v55 = *(_QWORD *)__x;
      *(double *)__x = 0.0;
      if (v55)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v55);
    }
  }
  v25 = (void *)*(*p_end - 1);
  __p = (void *)(((*a2)[1] - **a2) >> 2);
  if (__p != v25)
  {
    dmlc::LogCheckFormat<unsigned int,unsigned long>((uint64_t *)__x);
    if (*(double *)__x != 0.0)
    {
      v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"gptr.back() == preds.Size()", 27);
      v30 = *(char *)(*(_QWORD *)__x + 23);
      v31 = v30 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v32 = v30 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"EvalRank: group structure must match number of prediction", 57);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v35 = *(_QWORD *)__x;
      *(double *)__x = 0.0;
      if (v35)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v35);
    }
  }
  v36 = *p_end;
  v37 = v87->__begin_;
  if ((*(_DWORD *)(a1[1] + 24) & 0x80000000) != 0)
  {
    v42 = 0.0;
  }
  else
  {
    v38 = a1[7];
    if (v38)
      goto LABEL_35;
    v39 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    std::string::basic_string[abi:ne180100]<0>(__x, v39);
    GPUMetric = xgboost::GPUMetric::CreateGPUMetric((uint64_t)__x, a1[1]);
    v41 = a1[7];
    a1[7] = GPUMetric;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v95.__m_.__opaque[7] < 0)
      operator delete(*(void **)__x);
    v38 = a1[7];
    if (v38)
LABEL_35:
      v42 = (*(double (**)(uint64_t, uint64_t **, std::vector<unsigned int> *, uint64_t))(*(_QWORD *)v38 + 40))(v38, a2, a3, a4);
    else
      v42 = 0.0;
    if (!a1[1])
    {
      v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
      v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: tparam_", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
    }
  }
  *(double *)__x = 0.0;
  v56 = (rabit::engine *)std::vector<double>::vector(&v88, 1uLL, __x);
  v86 = ((unint64_t)((char *)v36 - (char *)v37) >> 2) - 1;
  if (!a1[7] || (*(_DWORD *)(a1[1] + 24) & 0x80000000) != 0)
  {
    v59 = a3[1].__begin_;
    v61 = *v59;
    v60 = v59[1];
    value = a3[1].__end_cap_.__value_;
    v63 = *a2;
    *(double *)__x = 0.0;
    v95.__m_.__sig = 850045863;
    memset(v95.__m_.__opaque, 0, sizeof(v95.__m_.__opaque));
    __p = 0;
    v92 = 0;
    v93 = 0;
    if (((unint64_t)((char *)v36 - (char *)v37) >> 2) != 1)
    {
      v85 = a1;
      v84 = a4;
      v64 = 0;
      v65 = (v60 - v61) >> 2;
      do
      {
        v66 = (char *)__p;
        v92 = (char *)__p;
        v67 = v87->__begin_[v64++];
        if (v67 < v87->__begin_[v64])
        {
          do
          {
            if (v67 * (unint64_t)value >= v65)
              __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
            v68 = *v63;
            v69 = (int)*(float *)(v61 + 4 * v67 * (_QWORD)value);
            if (v66 >= v93)
            {
              v70 = (v66 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v70 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v71 = (v93 - (_BYTE *)__p) >> 2;
              if (v71 <= v70 + 1)
                v71 = v70 + 1;
              if ((unint64_t)(v93 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v93, v72);
              v75 = &v73[8 * v70];
              *(_DWORD *)v75 = *(_DWORD *)(v68 + 4 * v67);
              *((_DWORD *)v75 + 1) = v69;
              v77 = (char *)__p;
              v76 = v92;
              v78 = v75;
              if (v92 != __p)
              {
                do
                {
                  v79 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *((_QWORD *)v78 - 1) = v79;
                  v78 -= 8;
                }
                while (v76 != v77);
                v76 = (char *)__p;
              }
              v66 = v75 + 8;
              __p = v78;
              v92 = v75 + 8;
              v93 = &v73[8 * v74];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_DWORD *)v66 = *(_DWORD *)(v68 + 4 * v67);
              *((_DWORD *)v66 + 1) = v69;
              v66 += 8;
            }
            v92 = v66;
            ++v67;
          }
          while (v67 < v87->__begin_[v64]);
        }
        v80 = (*(double (**)(uint64_t *, void **))(*v85 + 56))(v85, &__p);
        *(double *)v88 = v80 + *(double *)v88;
      }
      while (v64 != v86);
      LODWORD(a4) = v84;
      if (__p)
      {
        v92 = (char *)__p;
        operator delete(__p);
      }
    }
    v81 = (double *)v88;
    v42 = 0.0;
    while (v81 != v89)
    {
      v82 = *v81++;
      v42 = v42 + v82;
    }
    dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
    std::mutex::~mutex(&v95);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    if ((_DWORD)a4)
      goto LABEL_51;
  }
  else if ((_DWORD)a4)
  {
LABEL_51:
    *(double *)__x = v42;
    *(double *)&v95.__m_.__sig = (double)v86;
    Engine = rabit::engine::GetEngine(v56);
    (*(void (**)(void *, std::vector<unsigned int>::value_type *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, __x, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v58 = *(double *)__x / *(double *)&v95.__m_.__sig;
    goto LABEL_81;
  }
  v58 = v42 / (double)v86;
LABEL_81:
  if (v88)
  {
    v89 = (double *)v88;
    operator delete(v88);
  }
  if (v90.__begin_)
  {
    v90.__end_ = v90.__begin_;
    operator delete(v90.__begin_);
  }
  return v58;
}

void sub_220E356E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  if (v15)
    operator delete(v15);
  JUMPOUT(0x220E358B0);
}

void sub_220E356F0(void *a1, int a2)
{
  int v2;
  std::mutex *v5;
  std::exception_ptr v6[4];
  std::exception_ptr v7;

  __cxa_end_catch();
  if (v6[0].__ptr_)
  {
    v6[1] = v6[0];
    operator delete(v6[0].__ptr_);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v5);
    if (!v7.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v7, v6);
      std::exception_ptr::~exception_ptr(v6);
    }
    std::mutex::unlock(v5);
    __cxa_end_catch();
    JUMPOUT(0x220E35628);
  }
  JUMPOUT(0x220E357F0);
}

void sub_220E35704(void *a1, int a2)
{
  int v2;
  std::mutex *v5;
  std::exception_ptr v6[4];
  std::exception_ptr v7;

  __cxa_end_catch();
  if (v6[0].__ptr_)
  {
    v6[1] = v6[0];
    operator delete(v6[0].__ptr_);
  }
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v5);
    if (!v7.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v7, v6);
      std::exception_ptr::~exception_ptr(v6);
    }
    std::mutex::unlock(v5);
    __cxa_end_catch();
    JUMPOUT(0x220E35628);
  }
  JUMPOUT(0x220E357F0);
}

void sub_220E35720()
{
  JUMPOUT(0x220E35728);
}

void sub_220E357A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10)
{
  std::exception_ptr v10;

  __cxa_end_catch();
  std::mutex::~mutex(a10);
  std::exception_ptr::~exception_ptr(&v10);
  JUMPOUT(0x220E3581CLL);
}

void sub_220E357C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if ((a29 & 0x80000000) == 0)
  {
    if (v29)
      operator delete(v29);
    JUMPOUT(0x220E358B0);
  }
  JUMPOUT(0x220E35828);
}

void sub_220E35804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v25;

  v24 = a24;
  a24 = 0;
  if (v24)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v24);
  if (v25)
    operator delete(v25);
  JUMPOUT(0x220E358B0);
}

void sub_220E35810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  v25 = a24;
  a24 = 0;
  if (v25)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a24, v25);
  _Unwind_Resume(a1);
}

void sub_220E35830()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x220E358B0);
}

void sub_220E35838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a20);
  v24 = a24;
  a24 = 0;
  if (v24)
    std::default_delete<std::string>::operator()[abi:ne180100](&a24);
  JUMPOUT(0x220E35870);
}

void sub_220E35848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220E35850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E3585CLL);
}

void sub_220E35884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E35890);
}

void sub_220E358A8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x220E358B0);
  __clang_call_terminate(a1);
}

uint64_t xgboost::metric::EvalRank::Name(xgboost::metric::EvalRank *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

double xgboost::metric::EvalPrecision::EvalGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  int v16;
  BOOL (*v18)(float *, float *);

  v4 = *a2;
  v5 = (_QWORD *)a2[1];
  v18 = xgboost::common::CmpFirst;
  if ((uint64_t)v5 - v4 < 1)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v6 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v5 - v4) >> 3);
    v8 = v7;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v4, v5, (uint64_t (**)(uint64_t *, uint64_t *))&v18, ((uint64_t)v5 - v4) >> 3, v6, v8);
  if (v6)
    operator delete(v6);
  v9 = a2[1];
  v10 = v9 - *a2;
  if (v9 == *a2)
  {
    v11 = 0;
    v13 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v11 = 0;
    v12 = v10 >> 3;
    v13 = *(_DWORD *)(a1 + 16);
    if (v12 <= 1)
      v12 = 1;
    v14 = (int *)(*a2 + 4);
    v15 = *(unsigned int *)(a1 + 16);
    do
    {
      if (!v15)
        break;
      v16 = *v14;
      v14 += 2;
      if (v16)
        ++v11;
      --v15;
      --v12;
    }
    while (v12);
  }
  return (double)v11 / (double)v13;
}

void sub_220E359D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double rabit::op::Reducer<rabit::op::Sum,double>(double *a1, double *a2, int a3)
{
  uint64_t v3;
  double v4;
  double result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = v4 + *a2;
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

float std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  float result;
  int v10;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  float v17;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if ((*a3)(a2 - 1, (uint64_t *)a1))
      {
        result = *(float *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 2);
        *((float *)a2 - 2) = result;
        v10 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
    }
    else
    {
      v14 = a4 >> 1;
      v15 = (uint64_t *)(a1 + 8 * (a4 >> 1));
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)(a1 + 8 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)a5, (uint64_t)&a5[v14], (uint64_t)&a5[v14], (uint64_t)&a5[a4], (_DWORD *)a1, (uint64_t (**)(uint64_t, uint64_t))a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1 + 8 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t *)a1, a1 + 8 * (a4 >> 1), (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)a5, a6, v17);
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD v15[9];

  if ((_QWORD *)result != a2)
  {
    v15[7] = v3;
    v15[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15[0] = *v10;
          v12 = v9;
          while (1)
          {
            v13 = (char *)v6 + v12;
            *((_DWORD *)v13 + 2) = *(_DWORD *)((char *)v6 + v12);
            *((_DWORD *)v13 + 3) = *(_DWORD *)((char *)v6 + v12 + 4);
            if (!v12)
              break;
            v12 -= 8;
            result = (*a3)(v15, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v14 = (_QWORD *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *v14 = v15[0];
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
      {
        *a5 = *v10;
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *v10;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(result, a2, a5, (uint64_t (**)(_QWORD, _QWORD))a3);
    }
  }
  return result;
}

float std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  float result;
  unint64_t v16;
  uint64_t v17;
  float *v18;

  if (a1 == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      result = *(float *)a3;
      *a5 = *(_DWORD *)a3;
      a5[1] = *(_DWORD *)(a3 + 4);
      a3 += 8;
      a5 += 2;
    }
  }
  else
  {
    v11 = a1;
    while (a3 != a4)
    {
      v12 = (*a6)(a3, v11);
      if (v12)
        v13 = a3;
      else
        v13 = v11;
      v11 += 8 * (v12 ^ 1);
      v14 = *(_DWORD *)(v13 + 4);
      result = *(float *)v13;
      a3 += 8 * v12;
      *a5 = *(_DWORD *)v13;
      a5[1] = v14;
      a5 += 2;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v16 = 0;
      do
      {
        v17 = v11 + v16;
        v18 = (float *)&a5[v16 / 4];
        result = *(float *)(v11 + v16);
        *v18 = result;
        v18[1] = *(float *)(v11 + v16 + 4);
        v16 += 8;
      }
      while (v17 + 8 != a2);
    }
  }
  return result;
}

float std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float result)
{
  uint64_t v10;
  uint64_t (**v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v17;
  int *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  int v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t (**v48)(uint64_t, uint64_t);

  v45 = a6;
  if (a6)
  {
    v10 = a5;
    v11 = a4;
    v12 = a3;
    do
    {
      v13 = v45;
      if (v10 <= a8 || v45 <= a8)
        return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(a1, a2, v12, v11, v10, v45, a7, result);
      if (!v10)
        return result;
      v14 = 0;
      v15 = -v10;
      while (1)
      {
        v16 = a1;
        v17 = (int *)&v14[(_QWORD)a1];
        v18 = (int *)a2;
        if ((((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))*v11)(a2, &v14[(_QWORD)a1], a3, a4, a5, v13) & 1) != 0)break;
        v14 += 8;
        v19 = __CFADD__(v15++, 1);
        a1 = v16;
        a2 = (uint64_t)v18;
        if (v19)
          return result;
      }
      v20 = -v15;
      v21 = v45;
      v48 = v11;
      v43 = a8;
      if (-v15 >= v45)
      {
        if (v15 == -1)
        {
          v38 = (int *)&v14[(_QWORD)v16];
          result = *(float *)&v14[(_QWORD)v16];
          *v38 = *v18;
          *(float *)v18 = result;
          v39 = *(_DWORD *)&v14[(_QWORD)v16 + 4];
          v38[1] = v18[1];
          v18[1] = v39;
          return result;
        }
        if (v15 > 0)
          v20 = 1 - v15;
        v25 = v16;
        v40 = v20 >> 1;
        v26 = (int *)((char *)&v16[v20 >> 1] + (_QWORD)v14);
        v23 = v18;
        v24 = v18;
        if (v18 != (int *)v12)
        {
          v47 = *v48;
          v42 = v12;
          v29 = (v12 - (uint64_t)v18) >> 3;
          v24 = v18;
          do
          {
            v30 = &v24[2 * (v29 >> 1)];
            v31 = v47((uint64_t)v30, (uint64_t)v26);
            if (v31)
              v29 += ~(v29 >> 1);
            else
              v29 >>= 1;
            if (v31)
              v24 = v30 + 2;
          }
          while (v29);
          v12 = v42;
          v21 = v45;
          v25 = v16;
          v23 = v18;
        }
        v46 = ((char *)v24 - (char *)v23) >> 3;
        v28 = v40;
      }
      else
      {
        if (v45 >= 0)
          v22 = v45;
        else
          v22 = v45 + 1;
        v23 = v18;
        v46 = v22 >> 1;
        v24 = &v18[2 * (v22 >> 1)];
        v25 = v16;
        v26 = v18;
        if ((char *)((char *)v18 - (char *)v16) != v14)
        {
          v41 = v12;
          v27 = ((char *)v18 - (char *)v16 - (uint64_t)v14) >> 3;
          v26 = v17;
          do
          {
            if ((*v48)((uint64_t)v24, (uint64_t)&v26[2 * (v27 >> 1)]))
            {
              v27 >>= 1;
            }
            else
            {
              v26 += 2 * (v27 >> 1) + 2;
              v27 += ~(v27 >> 1);
            }
          }
          while (v27);
          v12 = v41;
          v21 = v45;
          v25 = v16;
          v23 = v18;
        }
        v28 = ((char *)v26 - (char *)v25 - (uint64_t)v14) >> 3;
      }
      if (v26 == v23)
      {
        v33 = v24;
      }
      else if (v24 == v23)
      {
        v33 = v26;
      }
      else
      {
        v32 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<float,unsigned int> *>>(v26, v23, v24);
        v21 = v45;
        v33 = v32;
        v25 = v16;
      }
      v10 = -(v28 + v15);
      v34 = v21 - v46;
      if (v28 + v46 >= v21 - (v28 + v46) - v15)
      {
        v36 = v24;
        v37 = (uint64_t)v33;
        a8 = v43;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v33, v36, v12, v48, v10, v34, a7, v43);
        a2 = (uint64_t)v26;
        v11 = v48;
        v34 = v46;
        v10 = v28;
        v12 = v37;
      }
      else
      {
        v35 = v26;
        v17 = v33;
        v11 = v48;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(&v14[(_QWORD)v25], v35, v33, v48, v28, v46, a7, v43);
        a2 = (uint64_t)v24;
        a8 = v43;
      }
      v45 = v34;
      a1 = (uint64_t *)v17;
    }
    while (v34);
  }
  return result;
}

_QWORD *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(_QWORD *result, _DWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD))
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  if (result != (_QWORD *)a2)
  {
    v6 = result;
    v7 = result + 1;
    *a3 = *result;
    if (result + 1 != (_QWORD *)a2)
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v7;
        result = (_QWORD *)(*a4)(v7, v10);
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v12 = a3;
          if (v10 != a3)
          {
            v13 = v9;
            while (1)
            {
              v12 = (_DWORD *)((char *)a3 + v13);
              result = (_QWORD *)(*a4)(v11, (char *)a3 + v13 - 8);
              if (!(_DWORD)result)
                break;
              *v12 = *(_DWORD *)((char *)a3 + v13 - 8);
              v12[1] = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                v12 = a3;
                break;
              }
            }
          }
          *v12 = *v11;
          v12[1] = *((_DWORD *)v6 + 3);
        }
        else
        {
          v10[1] = *(_QWORD *)v11;
        }
        v7 = v11 + 2;
        v9 += 8;
        ++v10;
        v6 = v11;
      }
      while (v11 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      result = (*a6)(a3, v11);
      if ((_DWORD)result)
        v12 = a3;
      else
        v12 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

float std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, float result)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  char v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;

  v10 = a2;
  if (a5 <= a6)
  {
    v18 = (_QWORD *)a7;
    if (a1 != (uint64_t *)v10)
    {
      v18 = (_QWORD *)a7;
      v19 = a1;
      do
      {
        v20 = *v19++;
        *v18++ = v20;
      }
      while (v19 != (uint64_t *)v10);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(a7, (uint64_t)v18, v10, a3, a1, a4);
  }
  else if (a2 != a3)
  {
    v12 = 0;
    do
    {
      *(_QWORD *)(a7 + v12) = *(_QWORD *)(a2 + v12);
      v12 += 8;
    }
    while (a2 + v12 != a3);
    if (v12)
    {
      v13 = a7 + v12;
      v14 = (float *)(a3 - 4);
      while ((uint64_t *)v10 != a1)
      {
        v15 = (*a4)(v13 - 8, v10 - 8);
        if ((v15 & 1) != 0)
          v16 = v10;
        else
          v16 = v13;
        if ((v15 & 1) != 0)
          v10 -= 8;
        v17 = *(_DWORD *)(v16 - 4);
        result = *(float *)(v16 - 8);
        if ((v15 & 1) == 0)
          v13 -= 8;
        *(v14 - 1) = result;
        *(_DWORD *)v14 = v17;
        v14 -= 2;
        if (v13 == a7)
          return result;
      }
      v21 = 0;
      do
      {
        v22 = &v14[v21 / 4];
        result = *(float *)(v13 + v21 - 8);
        *(v22 - 1) = result;
        *v22 = *(float *)(v13 + v21 - 4);
        v21 -= 8;
      }
      while (v13 + v21 != a7);
    }
  }
  return result;
}

float std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,std::pair<float,unsigned int>*,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>,std::__wrap_iter<std::pair<float,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  float result;
  unint64_t v16;
  float *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v11 = a1;
    while (a3 != a4)
    {
      v12 = (*a6)(a3, v11);
      if (v12)
        v13 = a3;
      else
        v13 = v11;
      a3 += 8 * v12;
      v14 = *(_DWORD *)(v13 + 4);
      result = *(float *)v13;
      v11 += 8 * (v12 ^ 1);
      *a5 = *(_DWORD *)v13;
      a5[1] = v14;
      a5 += 2;
      if (v11 == a2)
        return result;
    }
    v16 = 0;
    do
    {
      v17 = (float *)&a5[v16 / 4];
      v18 = v11 + v16;
      result = *(float *)(v11 + v16);
      *v17 = result;
      v17[1] = *(float *)(v11 + v16 + 4);
      v16 += 8;
    }
    while (v18 + 8 != a2);
  }
  return result;
}

int *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<float,unsigned int> *>>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int *result;
  int *i;
  int v7;
  int v8;
  int *v9;
  int *v10;
  int v11;
  int v12;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2)
      a2 = i;
    v7 = *result;
    *result = *i;
    *i = v7;
    v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      while (1)
      {
        v11 = *v9;
        *v9 = *v10;
        *v10 = v11;
        v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3)
          break;
        if (v9 == a2)
          a2 = v10;
      }
      v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

void std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B6140;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8DF8;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BA6E8;
  return result;
}

xgboost::metric::EvalRank *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  xgboost::metric::EvalRank *v3;

  v2 = *a2;
  v3 = (xgboost::metric::EvalRank *)operator new();
  xgboost::metric::EvalRank::EvalRank(v3, "ndcg", v2);
  *(_QWORD *)v3 = off_24E6B61B0;
  return v3;
}

void sub_220E36718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

{
}

void xgboost::metric::EvalNDCG::~EvalNDCG(xgboost::metric::EvalNDCG *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x227667068);
}

void xgboost::metric::EvalNDCG::EvalGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t *);

  v4 = *a2;
  v5 = (_QWORD *)a2[1];
  v14 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::common::CmpFirst;
  if ((uint64_t)v5 - v4 < 1)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v6 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v5 - v4) >> 3);
    v8 = v7;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v4, v5, &v14, ((uint64_t)v5 - v4) >> 3, v6, v8);
  if (v6)
    operator delete(v6);
  v9 = *a2;
  v10 = (_QWORD *)a2[1];
  xgboost::metric::EvalNDCG::CalcDCG(a1, *a2, (uint64_t)v10);
  v14 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::common::CmpSecond;
  if ((uint64_t)v10 - v9 < 1)
  {
    v11 = 0;
    v13 = 0;
  }
  else
  {
    v11 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v10 - v9) >> 3);
    v13 = v12;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v9, v10, &v14, ((uint64_t)v10 - v9) >> 3, v11, v13);
  if (v11)
    operator delete(v11);
  xgboost::metric::EvalNDCG::CalcDCG(a1, *a2, a2[1]);
}

void sub_220E36980(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double xgboost::metric::EvalNDCG::CalcDCG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  double v7;
  int v8;

  if (a3 == a2)
    return 0.0;
  v3 = 0;
  v4 = *(unsigned int *)(a1 + 16);
  if ((unint64_t)((a3 - a2) >> 3) <= 1)
    v5 = 1;
  else
    v5 = (a3 - a2) >> 3;
  v6 = (int *)(a2 + 4);
  v7 = 0.0;
  do
  {
    if (v4 == v3)
      break;
    if (*v6)
    {
      v8 = *v6;
      v7 = v7 + (double)~(-1 << v8) / log2((double)v3 + 2.0);
    }
    ++v3;
    v6 += 2;
  }
  while (v5 != v3);
  return v7;
}

BOOL xgboost::common::CmpSecond(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) > *(_DWORD *)(a2 + 4);
}

void std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B6228;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8ED8;
  return result;
}

xgboost::metric::EvalRank *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  xgboost::metric::EvalRank *v3;

  v2 = *a2;
  v3 = (xgboost::metric::EvalRank *)operator new();
  xgboost::metric::EvalRank::EvalRank(v3, "map", v2);
  *(_QWORD *)v3 = off_24E6B6298;
  return v3;
}

void sub_220E36AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40B92A2B82);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

void xgboost::metric::EvalMAP::~EvalMAP(xgboost::metric::EvalMAP *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24E6B60E0;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalMAP::EvalGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  double v15;
  int v16;
  double result;
  BOOL (*v18)(float *, float *);

  v4 = *a2;
  v5 = (_QWORD *)a2[1];
  v18 = xgboost::common::CmpFirst;
  if ((uint64_t)v5 - v4 < 1)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v6 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((uint64_t)v5 - v4) >> 3);
    v8 = v7;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>(v4, v5, (uint64_t (**)(uint64_t *, uint64_t *))&v18, ((uint64_t)v5 - v4) >> 3, v6, v8);
  if (v6)
    operator delete(v6);
  v9 = a2[1];
  v10 = v9 - *a2;
  if (v9 != *a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 3;
    if (v13 <= 1)
      v13 = 1;
    v14 = (int *)(*a2 + 4);
    v15 = 0.0;
    do
    {
      v16 = *v14;
      v14 += 2;
      if (v16)
      {
        ++v12;
        if (v11 < *(unsigned int *)(a1 + 16))
          v15 = v15 + (double)v12 / (double)(v11 + 1);
      }
      ++v11;
    }
    while (v13 != v11);
    if (v12)
      return v15 / (double)v12;
  }
  result = 0.0;
  if (!*(_BYTE *)(a1 + 48))
    return 1.0;
  return result;
}

void sub_220E36D38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B6310;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B8FB8;
  return result;
}

_QWORD *std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6B6380;
  result[1] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B9028;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_4,std::allocator<xgboost::metric::$_4>,xgboost::Metric * ()(char const*)>::target_type()
{
}

{
}

void xgboost::metric::EvalCox::~EvalCox(xgboost::metric::EvalCox *this)
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalCox::Eval(int a1, float ***a2, xgboost::MetaInfo *this, int a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  float *v9;
  double v10;
  float *v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  double v22;
  uint64_t v23;
  float v24;
  float v25;
  double v26;
  unint64_t v27;
  std::string *Entry;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;

  if (a4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/rank_metric.cc");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !distributed", 26);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Cox metric does not support distributed evaluation", 50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
  v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) - **((_QWORD **)this + 3)) >> 2;
  v7 = xgboost::MetaInfo::LabelAbsSort(this);
  v8 = v6;
  if ((_DWORD)v6)
  {
    v9 = **a2;
    v10 = 0.0;
    v11 = v9;
    v12 = v6;
    do
    {
      v13 = *v11++;
      v10 = v10 + v13;
      --v12;
    }
    while (v12);
    v14 = 0;
    v15 = (uint64_t *)*((_QWORD *)this + 3);
    v16 = *v15;
    v17 = (v15[1] - *v15) >> 2;
    v18 = *((_QWORD *)this + 5);
    v19 = (v6 - 1);
    v20 = (_QWORD *)(*(_QWORD *)v7 + 8);
    v21 = 0.0;
    v22 = 0.0;
    do
    {
      v23 = *(v20 - 1);
      if (v23 * v18 >= v17)
LABEL_18:
        __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
      v24 = *(float *)(v16 + 4 * v23 * v18);
      v25 = v9[v23];
      if (v24 > 0.0)
      {
        v26 = logf(v9[v23]);
        v22 = v22 - (v26 - log(v10));
        ++v14;
      }
      v21 = v21 + v25;
      if (!v19)
        goto LABEL_13;
      v27 = *v20 * v18;
      if (v27 >= v17)
        goto LABEL_18;
      if (fabsf(v24) < fabsf(*(float *)(v16 + 4 * v27)))
      {
LABEL_13:
        v10 = v10 - v21;
        v21 = 0.0;
      }
      ++v20;
      --v19;
      --v8;
    }
    while (v8);
  }
  else
  {
    v14 = 0;
    v22 = 0.0;
  }
  return v22 / (double)v14;
}

void sub_220E3700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalCox::Name(xgboost::metric::EvalCox *this)
{
  return "cox-nloglik";
}

uint64_t dmlc::RowBlockIter<unsigned int,float>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  dmlc::SeekStream *v48;
  void *v49;
  __int128 *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  std::string *Entry;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  size_t v59;
  void **v60;
  uint64_t v61;
  const char *v63;
  void *v64[2];
  char v65;
  _QWORD *v66[3];
  void *v67[2];
  unsigned __int8 v68;
  _QWORD *v69[3];
  void *__p[2];
  _BYTE v71[56];
  int64x2_t v72;
  void *v73[4];
  int64x2_t v74;
  void *v75[4];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v64, (const std::string *)__p, a2, a3);
  if ((v71[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v65 >= 0)
    v7 = (char *)v64;
  else
    v7 = (char *)v64[0];
  dmlc::data::CreateParser_<unsigned int,float>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v68;
  if ((v68 & 0x80u) != 0)
    v10 = (unint64_t)v67[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v68 & 0x80u) == 0)
      v13 = (char *)v67;
    else
      v13 = (char *)v67[0];
    *v11 = &off_24E6B63F0;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B6470;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B64D0;
      __p[1] = v16;
      *(_QWORD *)&v71[8] = __p;
      *(_QWORD *)&v77 = &off_24E6B6560;
      *((_QWORD *)&v77 + 1) = v16;
      *((_QWORD *)&v78 + 1) = &v77;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v77);
      v17 = (__int128 *)*((_QWORD *)&v78 + 1);
      if (*((__int128 **)&v78 + 1) == &v77)
      {
        v18 = 4;
        v17 = &v77;
      }
      else
      {
        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v52 = *(void ***)&v71[8];
      if (*(void ***)&v71[8] == __p)
      {
        v53 = 4;
        v52 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v71[8])
          goto LABEL_79;
        v53 = 5;
      }
      (*((void (**)(void))*v52 + v53))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v75, 0, sizeof(v75));
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72 = 0u;
    memset(&v71[8], 0, 48);
    v30 = operator new(8uLL);
    v63 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v71 = v30 + 1;
    *(_QWORD *)&v71[16] = 0;
    v73[2] = 0;
    v74.i64[1] = 0;
    v75[2] = 0;
    *(_QWORD *)&v71[40] = 0;
    v72.i64[1] = 0;
    v76 = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v77 = *v32;
      v78 = v32[1];
      v79 = v32[2];
      v80 = v32[3];
      dmlc::data::RowBlockContainer<unsigned int,float>::Push<unsigned int>((uint64_t)__p, (uint64_t)&v77);
      std::chrono::steady_clock::now();
      v33 = vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)__p, *(int64x2_t *)&v71[8]), vaddq_s64(*(int64x2_t *)&v71[32], v72)), vaddq_s64(vaddq_s64(*(int64x2_t *)&v73[1], v74), *(int64x2_t *)&v75[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v33, 1), v33);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"MB read,", 8);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v76) + 1)
          v36 = HIDWORD(v76) + 1;
        else
          v36 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v36;
        dmlc::data::RowBlockContainer<unsigned int,float>::Save(__p, v29);
        v37 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v71)
        {
          v39 = (uint64_t)(*(_QWORD *)v71 - (unint64_t)__p[0]) >> 2;
          if (v39 <= 1)
            v39 = 1;
          if (*(_QWORD *)v71 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v71, v40);
          v43 = (char *)__p[0];
          v44 = (char *)__p[1];
          *(_QWORD *)v42 = 0;
          v38 = v42 + 8;
          v45 = v42;
          while (v44 != v43)
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          __p[0] = v45;
          __p[1] = v42 + 8;
          *(_QWORD *)v71 = &v42[8 * v41];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v38 = v37 + 8;
        }
        __p[1] = v38;
        *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
        v73[2] = v73[1];
        v74.i64[1] = v74.i64[0];
        v75[2] = v75[1];
        *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
        v72.i64[1] = v72.i64[0];
        v76 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v76) + 1)
        v47 = HIDWORD(v76) + 1;
      else
        v47 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v47;
      dmlc::data::RowBlockContainer<unsigned int,float>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
    if (v75[1])
    {
      v75[2] = v75[1];
      operator delete(v75[1]);
    }
    if (v74.i64[0])
    {
      v74.i64[1] = v74.i64[0];
      operator delete((void *)v74.i64[0]);
    }
    if (v73[1])
    {
      v73[2] = v73[1];
      operator delete(v73[1]);
    }
    if (v72.i64[0])
    {
      v72.i64[1] = v72.i64[0];
      operator delete((void *)v72.i64[0]);
    }
    if (*(_QWORD *)&v71[32])
    {
      *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
      operator delete(*(void **)&v71[32]);
    }
    if (*(_QWORD *)&v71[8])
    {
      *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
      operator delete(*(void **)&v71[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v48 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v48 = *v14;
    v49 = (void *)dmlc::SeekStream::CreateForRead(v48, (const char *)1);
    if (!v49)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: TryLoadCache()", 28);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"failed to build cache file ", 27);
      v59 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v63, v59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v49;
    __p[0] = &off_24E6B64D0;
    __p[1] = v49;
    *(_QWORD *)&v71[8] = __p;
    *(_QWORD *)&v77 = &off_24E6B6560;
    *((_QWORD *)&v77 + 1) = v49;
    *((_QWORD *)&v78 + 1) = &v77;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v77);
    v50 = (__int128 *)*((_QWORD *)&v78 + 1);
    if (*((__int128 **)&v78 + 1) == &v77)
    {
      v51 = 4;
      v50 = &v77;
    }
    else
    {
      if (!*((_QWORD *)&v78 + 1))
        goto LABEL_84;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_84:
    v60 = *(void ***)&v71[8];
    if (*(void ***)&v71[8] == __p)
    {
      v61 = 4;
      v60 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v71[8])
        goto LABEL_89;
      v61 = 5;
    }
    (*((void (**)(void))*v60 + v61))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B65E0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v71 = v22[1];
      *(_OWORD *)&v71[16] = v22[2];
      *(_OWORD *)&v71[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned int,float>::Push<unsigned int>((uint64_t)v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v77, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v77);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(&v77, v19);
  v25 = v78;
  *(_OWORD *)(v12 + 16) = v77;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v80;
  *(_OWORD *)(v12 + 48) = v79;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v77, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v77, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v77);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v68 < 0)
    operator delete(v67[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
  if (v65 < 0)
    operator delete(v64[0]);
  return v12;
}

void sub_220E37A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C408E4C9560);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RowBlockIter<unsigned long long,float>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  dmlc::SeekStream *v48;
  void *v49;
  __int128 *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  std::string *Entry;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  size_t v59;
  void **v60;
  uint64_t v61;
  const char *v63;
  void *v64[2];
  char v65;
  _QWORD *v66[3];
  void *v67[2];
  unsigned __int8 v68;
  _QWORD *v69[3];
  void *__p[2];
  _BYTE v71[56];
  int64x2_t v72;
  void *v73[4];
  int64x2_t v74;
  void *v75[4];
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v64, (const std::string *)__p, a2, a3);
  if ((v71[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v65 >= 0)
    v7 = (char *)v64;
  else
    v7 = (char *)v64[0];
  dmlc::data::CreateParser_<unsigned long long,float>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v68;
  if ((v68 & 0x80u) != 0)
    v10 = (unint64_t)v67[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v68 & 0x80u) == 0)
      v13 = (char *)v67;
    else
      v13 = (char *)v67[0];
    *v11 = &off_24E6B6638;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B66B8;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B6718;
      __p[1] = v16;
      *(_QWORD *)&v71[8] = __p;
      *(_QWORD *)&v78 = &off_24E6B67A8;
      *((_QWORD *)&v78 + 1) = v16;
      *((_QWORD *)&v79 + 1) = &v78;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
      v17 = (__int128 *)*((_QWORD *)&v79 + 1);
      if (*((__int128 **)&v79 + 1) == &v78)
      {
        v18 = 4;
        v17 = &v78;
      }
      else
      {
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v52 = *(void ***)&v71[8];
      if (*(void ***)&v71[8] == __p)
      {
        v53 = 4;
        v52 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v71[8])
          goto LABEL_79;
        v53 = 5;
      }
      (*((void (**)(void))*v52 + v53))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v75, 0, sizeof(v75));
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72 = 0u;
    memset(&v71[8], 0, 48);
    v30 = operator new(8uLL);
    v63 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v71 = v30 + 1;
    *(_QWORD *)&v71[16] = 0;
    v73[2] = 0;
    v74.i64[1] = 0;
    *(_QWORD *)&v71[40] = 0;
    v72.i64[1] = 0;
    v76 = 0;
    v77 = 0;
    v75[2] = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v78 = *v32;
      v79 = v32[1];
      v80 = v32[2];
      v81 = v32[3];
      dmlc::data::RowBlockContainer<unsigned long long,float>::Push<unsigned long long>((uint64_t *)__p, (uint64_t)&v78);
      std::chrono::steady_clock::now();
      v33 = vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)__p, *(int64x2_t *)&v71[8]), vaddq_s64(*(int64x2_t *)&v71[32], v72)), vaddq_s64(vaddq_s64(*(int64x2_t *)&v73[1], v74), *(int64x2_t *)&v75[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v33, 1), v33);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"MB read,", 8);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v77 + 1))
          v36 = v77 + 1;
        else
          v36 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v36;
        dmlc::data::RowBlockContainer<unsigned long long,float>::Save(__p, v29);
        v37 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v71)
        {
          v39 = (uint64_t)(*(_QWORD *)v71 - (unint64_t)__p[0]) >> 2;
          if (v39 <= 1)
            v39 = 1;
          if (*(_QWORD *)v71 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v71, v40);
          v43 = (char *)__p[0];
          v44 = (char *)__p[1];
          *(_QWORD *)v42 = 0;
          v38 = v42 + 8;
          v45 = v42;
          while (v44 != v43)
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          __p[0] = v45;
          __p[1] = v42 + 8;
          *(_QWORD *)v71 = &v42[8 * v41];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v38 = v37 + 8;
        }
        __p[1] = v38;
        *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
        v73[2] = v73[1];
        v74.i64[1] = v74.i64[0];
        v75[2] = v75[1];
        *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
        v72.i64[1] = v72.i64[0];
        v76 = 0;
        v77 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v77 + 1))
        v47 = v77 + 1;
      else
        v47 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v47;
      dmlc::data::RowBlockContainer<unsigned long long,float>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
    if (v75[1])
    {
      v75[2] = v75[1];
      operator delete(v75[1]);
    }
    if (v74.i64[0])
    {
      v74.i64[1] = v74.i64[0];
      operator delete((void *)v74.i64[0]);
    }
    if (v73[1])
    {
      v73[2] = v73[1];
      operator delete(v73[1]);
    }
    if (v72.i64[0])
    {
      v72.i64[1] = v72.i64[0];
      operator delete((void *)v72.i64[0]);
    }
    if (*(_QWORD *)&v71[32])
    {
      *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
      operator delete(*(void **)&v71[32]);
    }
    if (*(_QWORD *)&v71[8])
    {
      *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
      operator delete(*(void **)&v71[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v48 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v48 = *v14;
    v49 = (void *)dmlc::SeekStream::CreateForRead(v48, (const char *)1);
    if (!v49)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: TryLoadCache()", 28);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"failed to build cache file ", 27);
      v59 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v63, v59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v49;
    __p[0] = &off_24E6B6718;
    __p[1] = v49;
    *(_QWORD *)&v71[8] = __p;
    *(_QWORD *)&v78 = &off_24E6B67A8;
    *((_QWORD *)&v78 + 1) = v49;
    *((_QWORD *)&v79 + 1) = &v78;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
    v50 = (__int128 *)*((_QWORD *)&v79 + 1);
    if (*((__int128 **)&v79 + 1) == &v78)
    {
      v51 = 4;
      v50 = &v78;
    }
    else
    {
      if (!*((_QWORD *)&v79 + 1))
        goto LABEL_84;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_84:
    v60 = *(void ***)&v71[8];
    if (*(void ***)&v71[8] == __p)
    {
      v61 = 4;
      v60 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v71[8])
        goto LABEL_89;
      v61 = 5;
    }
    (*((void (**)(void))*v60 + v61))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B6828;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v71 = v22[1];
      *(_OWORD *)&v71[16] = v22[2];
      *(_OWORD *)&v71[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned long long,float>::Push<unsigned long long>(v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(&v78, v19);
  v25 = v79;
  *(_OWORD *)(v12 + 16) = v78;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v81;
  *(_OWORD *)(v12 + 48) = v80;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v78, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v68 < 0)
    operator delete(v67[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
  if (v65 < 0)
    operator delete(v64[0]);
  return v12;
}

void sub_220E3867C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C408E4C9560);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RowBlockIter<unsigned int,int>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  dmlc::SeekStream *v48;
  void *v49;
  __int128 *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  std::string *Entry;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  size_t v59;
  void **v60;
  uint64_t v61;
  const char *v63;
  void *v64[2];
  char v65;
  _QWORD *v66[3];
  void *v67[2];
  unsigned __int8 v68;
  _QWORD *v69[3];
  void *__p[2];
  _BYTE v71[56];
  int64x2_t v72;
  void *v73[4];
  int64x2_t v74;
  void *v75[4];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v64, (const std::string *)__p, a2, a3);
  if ((v71[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v65 >= 0)
    v7 = (char *)v64;
  else
    v7 = (char *)v64[0];
  dmlc::data::CreateParser_<unsigned int,int>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v68;
  if ((v68 & 0x80u) != 0)
    v10 = (unint64_t)v67[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v68 & 0x80u) == 0)
      v13 = (char *)v67;
    else
      v13 = (char *)v67[0];
    *v11 = &off_24E6B6880;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B6900;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B6960;
      __p[1] = v16;
      *(_QWORD *)&v71[8] = __p;
      *(_QWORD *)&v77 = &off_24E6B69F0;
      *((_QWORD *)&v77 + 1) = v16;
      *((_QWORD *)&v78 + 1) = &v77;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v77);
      v17 = (__int128 *)*((_QWORD *)&v78 + 1);
      if (*((__int128 **)&v78 + 1) == &v77)
      {
        v18 = 4;
        v17 = &v77;
      }
      else
      {
        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v52 = *(void ***)&v71[8];
      if (*(void ***)&v71[8] == __p)
      {
        v53 = 4;
        v52 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v71[8])
          goto LABEL_79;
        v53 = 5;
      }
      (*((void (**)(void))*v52 + v53))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v75, 0, sizeof(v75));
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72 = 0u;
    memset(&v71[8], 0, 48);
    v30 = operator new(8uLL);
    v63 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v71 = v30 + 1;
    *(_QWORD *)&v71[16] = 0;
    v73[2] = 0;
    v74.i64[1] = 0;
    v75[2] = 0;
    *(_QWORD *)&v71[40] = 0;
    v72.i64[1] = 0;
    v76 = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v77 = *v32;
      v78 = v32[1];
      v79 = v32[2];
      v80 = v32[3];
      dmlc::data::RowBlockContainer<unsigned int,int>::Push<unsigned int>((uint64_t)__p, (uint64_t)&v77);
      std::chrono::steady_clock::now();
      v33 = vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)__p, *(int64x2_t *)&v71[8]), vaddq_s64(*(int64x2_t *)&v71[32], v72)), vaddq_s64(vaddq_s64(*(int64x2_t *)&v73[1], v74), *(int64x2_t *)&v75[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v33, 1), v33);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"MB read,", 8);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v76) + 1)
          v36 = HIDWORD(v76) + 1;
        else
          v36 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v36;
        dmlc::data::RowBlockContainer<unsigned int,float>::Save(__p, v29);
        v37 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v71)
        {
          v39 = (uint64_t)(*(_QWORD *)v71 - (unint64_t)__p[0]) >> 2;
          if (v39 <= 1)
            v39 = 1;
          if (*(_QWORD *)v71 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v71, v40);
          v43 = (char *)__p[0];
          v44 = (char *)__p[1];
          *(_QWORD *)v42 = 0;
          v38 = v42 + 8;
          v45 = v42;
          while (v44 != v43)
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          __p[0] = v45;
          __p[1] = v42 + 8;
          *(_QWORD *)v71 = &v42[8 * v41];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v38 = v37 + 8;
        }
        __p[1] = v38;
        *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
        v73[2] = v73[1];
        v74.i64[1] = v74.i64[0];
        v75[2] = v75[1];
        *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
        v72.i64[1] = v72.i64[0];
        v76 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v76) + 1)
        v47 = HIDWORD(v76) + 1;
      else
        v47 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v47;
      dmlc::data::RowBlockContainer<unsigned int,float>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
    if (v75[1])
    {
      v75[2] = v75[1];
      operator delete(v75[1]);
    }
    if (v74.i64[0])
    {
      v74.i64[1] = v74.i64[0];
      operator delete((void *)v74.i64[0]);
    }
    if (v73[1])
    {
      v73[2] = v73[1];
      operator delete(v73[1]);
    }
    if (v72.i64[0])
    {
      v72.i64[1] = v72.i64[0];
      operator delete((void *)v72.i64[0]);
    }
    if (*(_QWORD *)&v71[32])
    {
      *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
      operator delete(*(void **)&v71[32]);
    }
    if (*(_QWORD *)&v71[8])
    {
      *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
      operator delete(*(void **)&v71[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v48 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v48 = *v14;
    v49 = (void *)dmlc::SeekStream::CreateForRead(v48, (const char *)1);
    if (!v49)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: TryLoadCache()", 28);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"failed to build cache file ", 27);
      v59 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v63, v59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v49;
    __p[0] = &off_24E6B6960;
    __p[1] = v49;
    *(_QWORD *)&v71[8] = __p;
    *(_QWORD *)&v77 = &off_24E6B69F0;
    *((_QWORD *)&v77 + 1) = v49;
    *((_QWORD *)&v78 + 1) = &v77;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v77);
    v50 = (__int128 *)*((_QWORD *)&v78 + 1);
    if (*((__int128 **)&v78 + 1) == &v77)
    {
      v51 = 4;
      v50 = &v77;
    }
    else
    {
      if (!*((_QWORD *)&v78 + 1))
        goto LABEL_84;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_84:
    v60 = *(void ***)&v71[8];
    if (*(void ***)&v71[8] == __p)
    {
      v61 = 4;
      v60 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v71[8])
        goto LABEL_89;
      v61 = 5;
    }
    (*((void (**)(void))*v60 + v61))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B6A70;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v71 = v22[1];
      *(_OWORD *)&v71[16] = v22[2];
      *(_OWORD *)&v71[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned int,int>::Push<unsigned int>((uint64_t)v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v77, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v77);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(&v77, v19);
  v25 = v78;
  *(_OWORD *)(v12 + 16) = v77;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v80;
  *(_OWORD *)(v12 + 48) = v79;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v77, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v77, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v77);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v68 < 0)
    operator delete(v67[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
  if (v65 < 0)
    operator delete(v64[0]);
  return v12;
}

void sub_220E392A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RowBlockIter<unsigned long long,int>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  dmlc::SeekStream *v48;
  void *v49;
  __int128 *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  std::string *Entry;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  size_t v59;
  void **v60;
  uint64_t v61;
  const char *v63;
  void *v64[2];
  char v65;
  _QWORD *v66[3];
  void *v67[2];
  unsigned __int8 v68;
  _QWORD *v69[3];
  void *__p[2];
  _BYTE v71[56];
  int64x2_t v72;
  void *v73[4];
  int64x2_t v74;
  void *v75[4];
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v64, (const std::string *)__p, a2, a3);
  if ((v71[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v65 >= 0)
    v7 = (char *)v64;
  else
    v7 = (char *)v64[0];
  dmlc::data::CreateParser_<unsigned long long,int>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v68;
  if ((v68 & 0x80u) != 0)
    v10 = (unint64_t)v67[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v68 & 0x80u) == 0)
      v13 = (char *)v67;
    else
      v13 = (char *)v67[0];
    *v11 = &off_24E6B6AC8;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B6B48;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B6BA8;
      __p[1] = v16;
      *(_QWORD *)&v71[8] = __p;
      *(_QWORD *)&v78 = &off_24E6B6C38;
      *((_QWORD *)&v78 + 1) = v16;
      *((_QWORD *)&v79 + 1) = &v78;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
      v17 = (__int128 *)*((_QWORD *)&v79 + 1);
      if (*((__int128 **)&v79 + 1) == &v78)
      {
        v18 = 4;
        v17 = &v78;
      }
      else
      {
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v52 = *(void ***)&v71[8];
      if (*(void ***)&v71[8] == __p)
      {
        v53 = 4;
        v52 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v71[8])
          goto LABEL_79;
        v53 = 5;
      }
      (*((void (**)(void))*v52 + v53))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v75, 0, sizeof(v75));
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    v72 = 0u;
    memset(&v71[8], 0, 48);
    v30 = operator new(8uLL);
    v63 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v71 = v30 + 1;
    *(_QWORD *)&v71[16] = 0;
    v73[2] = 0;
    v74.i64[1] = 0;
    *(_QWORD *)&v71[40] = 0;
    v72.i64[1] = 0;
    v76 = 0;
    v77 = 0;
    v75[2] = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v78 = *v32;
      v79 = v32[1];
      v80 = v32[2];
      v81 = v32[3];
      dmlc::data::RowBlockContainer<unsigned long long,int>::Push<unsigned long long>((uint64_t)__p, (uint64_t)&v78);
      std::chrono::steady_clock::now();
      v33 = vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)__p, *(int64x2_t *)&v71[8]), vaddq_s64(*(int64x2_t *)&v71[32], v72)), vaddq_s64(vaddq_s64(*(int64x2_t *)&v73[1], v74), *(int64x2_t *)&v75[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v33, 1), v33);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"MB read,", 8);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v77 + 1))
          v36 = v77 + 1;
        else
          v36 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v36;
        dmlc::data::RowBlockContainer<unsigned long long,float>::Save(__p, v29);
        v37 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v71)
        {
          v39 = (uint64_t)(*(_QWORD *)v71 - (unint64_t)__p[0]) >> 2;
          if (v39 <= 1)
            v39 = 1;
          if (*(_QWORD *)v71 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v71, v40);
          v43 = (char *)__p[0];
          v44 = (char *)__p[1];
          *(_QWORD *)v42 = 0;
          v38 = v42 + 8;
          v45 = v42;
          while (v44 != v43)
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          __p[0] = v45;
          __p[1] = v42 + 8;
          *(_QWORD *)v71 = &v42[8 * v41];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v38 = v37 + 8;
        }
        __p[1] = v38;
        *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
        v73[2] = v73[1];
        v74.i64[1] = v74.i64[0];
        v75[2] = v75[1];
        *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
        v72.i64[1] = v72.i64[0];
        v76 = 0;
        v77 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v77 + 1))
        v47 = v77 + 1;
      else
        v47 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v47;
      dmlc::data::RowBlockContainer<unsigned long long,float>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v69);
    if (v75[1])
    {
      v75[2] = v75[1];
      operator delete(v75[1]);
    }
    if (v74.i64[0])
    {
      v74.i64[1] = v74.i64[0];
      operator delete((void *)v74.i64[0]);
    }
    if (v73[1])
    {
      v73[2] = v73[1];
      operator delete(v73[1]);
    }
    if (v72.i64[0])
    {
      v72.i64[1] = v72.i64[0];
      operator delete((void *)v72.i64[0]);
    }
    if (*(_QWORD *)&v71[32])
    {
      *(_QWORD *)&v71[40] = *(_QWORD *)&v71[32];
      operator delete(*(void **)&v71[32]);
    }
    if (*(_QWORD *)&v71[8])
    {
      *(_QWORD *)&v71[16] = *(_QWORD *)&v71[8];
      operator delete(*(void **)&v71[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v48 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v48 = *v14;
    v49 = (void *)dmlc::SeekStream::CreateForRead(v48, (const char *)1);
    if (!v49)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: TryLoadCache()", 28);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"failed to build cache file ", 27);
      v59 = strlen(v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v63, v59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v49;
    __p[0] = &off_24E6B6BA8;
    __p[1] = v49;
    *(_QWORD *)&v71[8] = __p;
    *(_QWORD *)&v78 = &off_24E6B6C38;
    *((_QWORD *)&v78 + 1) = v49;
    *((_QWORD *)&v79 + 1) = &v78;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
    v50 = (__int128 *)*((_QWORD *)&v79 + 1);
    if (*((__int128 **)&v79 + 1) == &v78)
    {
      v51 = 4;
      v50 = &v78;
    }
    else
    {
      if (!*((_QWORD *)&v79 + 1))
        goto LABEL_84;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_84:
    v60 = *(void ***)&v71[8];
    if (*(void ***)&v71[8] == __p)
    {
      v61 = 4;
      v60 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v71[8])
        goto LABEL_89;
      v61 = 5;
    }
    (*((void (**)(void))*v60 + v61))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B6CB8;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v71 = v22[1];
      *(_OWORD *)&v71[16] = v22[2];
      *(_OWORD *)&v71[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned long long,int>::Push<unsigned long long>((uint64_t)v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(&v78, v19);
  v25 = v79;
  *(_OWORD *)(v12 + 16) = v78;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v81;
  *(_OWORD *)(v12 + 48) = v80;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v78, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v68 < 0)
    operator delete(v67[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
  if (v65 < 0)
    operator delete(v64[0]);
  return v12;
}

void sub_220E39ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RowBlockIter<unsigned int,long long>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  int64x2_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  dmlc::SeekStream *v49;
  void *v50;
  __int128 *v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  std::string *Entry;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  size_t v60;
  void **v61;
  uint64_t v62;
  const char *v64;
  void *v65[2];
  char v66;
  _QWORD *v67[3];
  void *v68[2];
  unsigned __int8 v69;
  _QWORD *v70[3];
  void *__p[2];
  _BYTE v72[56];
  int64x2_t v73;
  void *v74[4];
  int64x2_t v75;
  void *v76[4];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v65, (const std::string *)__p, a2, a3);
  if ((v72[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v66 >= 0)
    v7 = (char *)v65;
  else
    v7 = (char *)v65[0];
  dmlc::data::CreateParser_<unsigned int,long long>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v69;
  if ((v69 & 0x80u) != 0)
    v10 = (unint64_t)v68[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v69 & 0x80u) == 0)
      v13 = (char *)v68;
    else
      v13 = (char *)v68[0];
    *v11 = &off_24E6B6D10;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B6D90;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B6DF0;
      __p[1] = v16;
      *(_QWORD *)&v72[8] = __p;
      *(_QWORD *)&v78 = &off_24E6B6E80;
      *((_QWORD *)&v78 + 1) = v16;
      *((_QWORD *)&v79 + 1) = &v78;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
      v17 = (__int128 *)*((_QWORD *)&v79 + 1);
      if (*((__int128 **)&v79 + 1) == &v78)
      {
        v18 = 4;
        v17 = &v78;
      }
      else
      {
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v53 = *(void ***)&v72[8];
      if (*(void ***)&v72[8] == __p)
      {
        v54 = 4;
        v53 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v72[8])
          goto LABEL_79;
        v54 = 5;
      }
      (*((void (**)(void))*v53 + v54))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v76, 0, sizeof(v76));
    v75 = 0u;
    memset(v74, 0, sizeof(v74));
    v73 = 0u;
    memset(&v72[8], 0, 48);
    v30 = operator new(8uLL);
    v64 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v72 = v30 + 1;
    *(_QWORD *)&v72[16] = 0;
    v74[2] = 0;
    v75.i64[1] = 0;
    v76[2] = 0;
    *(_QWORD *)&v72[40] = 0;
    v73.i64[1] = 0;
    v77 = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v78 = *v32;
      v79 = v32[1];
      v80 = v32[2];
      v81 = v32[3];
      dmlc::data::RowBlockContainer<unsigned int,long long>::Push<unsigned int>((uint64_t)__p, (uint64_t)&v78);
      std::chrono::steady_clock::now();
      v33.i64[0] = *(_QWORD *)&v72[32];
      v33.i64[1] = (char *)__p[1]
                 - (char *)__p[0]
                 + *(_QWORD *)&v72[40]
                 + ((uint64_t)(*(_QWORD *)&v72[16] - *(_QWORD *)&v72[8]) >> 1);
      v34 = vaddq_s64(v33, vaddq_s64(vaddq_s64(vaddq_s64(v73, *(int64x2_t *)&v74[1]), v75), *(int64x2_t *)&v76[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v34, 1), v34);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"MB read,", 8);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v70);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v77) + 1)
          v37 = HIDWORD(v77) + 1;
        else
          v37 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v37;
        dmlc::data::RowBlockContainer<unsigned int,long long>::Save(__p, v29);
        v38 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v72)
        {
          v40 = (uint64_t)(*(_QWORD *)v72 - (unint64_t)__p[0]) >> 2;
          if (v40 <= 1)
            v40 = 1;
          if (*(_QWORD *)v72 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v72, v41);
          v44 = (char *)__p[0];
          v45 = (char *)__p[1];
          *(_QWORD *)v43 = 0;
          v39 = v43 + 8;
          v46 = v43;
          while (v45 != v44)
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v46 - 1) = v47;
            v46 -= 8;
          }
          __p[0] = v46;
          __p[1] = v43 + 8;
          *(_QWORD *)v72 = &v43[8 * v42];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v39 = v38 + 8;
        }
        __p[1] = v39;
        *(_QWORD *)&v72[16] = *(_QWORD *)&v72[8];
        v74[2] = v74[1];
        v75.i64[1] = v75.i64[0];
        v76[2] = v76[1];
        *(_QWORD *)&v72[40] = *(_QWORD *)&v72[32];
        v73.i64[1] = v73.i64[0];
        v77 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)HIDWORD(v77) + 1)
        v48 = HIDWORD(v77) + 1;
      else
        v48 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v48;
      dmlc::data::RowBlockContainer<unsigned int,long long>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v70);
    if (v76[1])
    {
      v76[2] = v76[1];
      operator delete(v76[1]);
    }
    if (v75.i64[0])
    {
      v75.i64[1] = v75.i64[0];
      operator delete((void *)v75.i64[0]);
    }
    if (v74[1])
    {
      v74[2] = v74[1];
      operator delete(v74[1]);
    }
    if (v73.i64[0])
    {
      v73.i64[1] = v73.i64[0];
      operator delete((void *)v73.i64[0]);
    }
    if (*(_QWORD *)&v72[32])
    {
      *(_QWORD *)&v72[40] = *(_QWORD *)&v72[32];
      operator delete(*(void **)&v72[32]);
    }
    if (*(_QWORD *)&v72[8])
    {
      *(_QWORD *)&v72[16] = *(_QWORD *)&v72[8];
      operator delete(*(void **)&v72[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v49 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v49 = *v14;
    v50 = (void *)dmlc::SeekStream::CreateForRead(v49, (const char *)1);
    if (!v50)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v56 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: TryLoadCache()", 28);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"failed to build cache file ", 27);
      v60 = strlen(v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v64, v60);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v50;
    __p[0] = &off_24E6B6DF0;
    __p[1] = v50;
    *(_QWORD *)&v72[8] = __p;
    *(_QWORD *)&v78 = &off_24E6B6E80;
    *((_QWORD *)&v78 + 1) = v50;
    *((_QWORD *)&v79 + 1) = &v78;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v78);
    v51 = (__int128 *)*((_QWORD *)&v79 + 1);
    if (*((__int128 **)&v79 + 1) == &v78)
    {
      v52 = 4;
      v51 = &v78;
    }
    else
    {
      if (!*((_QWORD *)&v79 + 1))
        goto LABEL_84;
      v52 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_84:
    v61 = *(void ***)&v72[8];
    if (*(void ***)&v72[8] == __p)
    {
      v62 = 4;
      v61 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v72[8])
        goto LABEL_89;
      v62 = 5;
    }
    (*((void (**)(void))*v61 + v62))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B6F00;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v72 = v22[1];
      *(_OWORD *)&v72[16] = v22[2];
      *(_OWORD *)&v72[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned int,long long>::Push<unsigned int>((uint64_t)v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(&v78, v19);
  v25 = v79;
  *(_OWORD *)(v12 + 16) = v78;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v81;
  *(_OWORD *)(v12 + 48) = v80;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v78, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v78);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v69 < 0)
    operator delete(v68[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v67, v67[1]);
  if (v66 < 0)
    operator delete(v65[0]);
  return v12;
}

void sub_220E3AB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RowBlockIter<unsigned long long,long long>::Create(char *__s, uint64_t a2, uint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  dmlc::SeekStream **v14;
  dmlc::SeekStream *v15;
  void *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  dmlc::Stream *v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __int128 *v32;
  int64x2_t v33;
  int64x2_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  dmlc::SeekStream *v49;
  void *v50;
  __int128 *v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  std::string *Entry;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  size_t v60;
  void **v61;
  uint64_t v62;
  const char *v64;
  void *v65[2];
  char v66;
  _QWORD *v67[3];
  void *v68[2];
  unsigned __int8 v69;
  _QWORD *v70[3];
  void *__p[2];
  _BYTE v72[56];
  int64x2_t v73;
  void *v74[4];
  int64x2_t v75;
  void *v76[4];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  dmlc::io::URISpec::URISpec((uint64_t)v65, (const std::string *)__p, a2, a3);
  if ((v72[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v66 >= 0)
    v7 = (char *)v65;
  else
    v7 = (char *)v65[0];
  dmlc::data::CreateParser_<unsigned long long,long long>(v7, a2, a3, a4);
  v9 = v8;
  v10 = v69;
  if ((v69 & 0x80u) != 0)
    v10 = (unint64_t)v68[1];
  if (v10)
  {
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    if ((v69 & 0x80u) == 0)
      v13 = (char *)v68;
    else
      v13 = (char *)v68[0];
    *v11 = &off_24E6B6F58;
    v14 = (dmlc::SeekStream **)(v11 + 1);
    std::string::basic_string[abi:ne180100]<0>(v11 + 1, v13);
    *(_QWORD *)(v12 + 112) = &off_24E6B6FD8;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_OWORD *)(v12 + 160) = xmmword_220F5EF80;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_QWORD *)(v12 + 224) = 0;
    *(_QWORD *)(v12 + 232) = 850045863;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    *(_QWORD *)(v12 + 304) = 1018212795;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 352) = 1018212795;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_QWORD *)(v12 + 504) = 0;
    v15 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v15 = *v14;
    v16 = (void *)dmlc::SeekStream::CreateForRead(v15, (const char *)1);
    if (v16)
    {
      *(_QWORD *)(v12 + 32) = v16;
      __p[0] = &off_24E6B7038;
      __p[1] = v16;
      *(_QWORD *)&v72[8] = __p;
      *(_QWORD *)&v79 = &off_24E6B70C8;
      *((_QWORD *)&v79 + 1) = v16;
      *((_QWORD *)&v80 + 1) = &v79;
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v79);
      v17 = (__int128 *)*((_QWORD *)&v80 + 1);
      if (*((__int128 **)&v80 + 1) == &v79)
      {
        v18 = 4;
        v17 = &v79;
      }
      else
      {
        if (!*((_QWORD *)&v80 + 1))
          goto LABEL_74;
        v18 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_74:
      v53 = *(void ***)&v72[8];
      if (*(void ***)&v72[8] == __p)
      {
        v54 = 4;
        v53 = __p;
      }
      else
      {
        if (!*(_QWORD *)&v72[8])
          goto LABEL_79;
        v54 = 5;
      }
      (*((void (**)(void))*v53 + v54))();
LABEL_79:
      if (!v9)
        goto LABEL_90;
LABEL_89:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_90;
    }
    v28 = (dmlc::Stream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v28 = *v14;
    v29 = dmlc::Stream::Create(v28, "w", 0);
    memset(v76, 0, sizeof(v76));
    v75 = 0u;
    memset(v74, 0, sizeof(v74));
    v73 = 0u;
    memset(&v72[8], 0, 48);
    v30 = operator new(8uLL);
    v64 = v13;
    *v30 = 0;
    __p[0] = v30;
    __p[1] = v30 + 1;
    *(_QWORD *)v72 = v30 + 1;
    *(_QWORD *)&v72[16] = 0;
    v74[2] = 0;
    v75.i64[1] = 0;
    *(_QWORD *)&v72[40] = 0;
    v73.i64[1] = 0;
    v77 = 0;
    v78 = 0;
    v76[2] = 0;
    *(_QWORD *)(v12 + 40) = 0;
    v31.n128_f64[0] = (double)std::chrono::steady_clock::now().__d_.__rep_;
    while ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v9 + 24))(v9, v31))
    {
      v32 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v79 = *v32;
      v80 = v32[1];
      v81 = v32[2];
      v82 = v32[3];
      dmlc::data::RowBlockContainer<unsigned long long,long long>::Push<unsigned long long>((uint64_t *)__p, (uint64_t)&v79);
      std::chrono::steady_clock::now();
      v33.i64[0] = *(_QWORD *)&v72[32];
      v33.i64[1] = (char *)__p[1]
                 - (char *)__p[0]
                 + *(_QWORD *)&v72[40]
                 + ((uint64_t)(*(_QWORD *)&v72[16] - *(_QWORD *)&v72[8]) >> 1);
      v34 = vaddq_s64(v33, vaddq_s64(vaddq_s64(vaddq_s64(v73, *(int64x2_t *)&v74[1]), v75), *(int64x2_t *)&v76[1]));
      v31 = (__n128)vsubq_s64(vdupq_laneq_s64(v34, 1), v34);
      if (v31.n128_u64[0] >> 26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"MB read,", 8);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v70);
        if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v78 + 1))
          v37 = v78 + 1;
        else
          v37 = *(_QWORD *)(v12 + 40);
        *(_QWORD *)(v12 + 40) = v37;
        dmlc::data::RowBlockContainer<unsigned long long,long long>::Save(__p, v29);
        v38 = (char *)__p[0];
        __p[1] = __p[0];
        if (__p[0] >= (void *)*(_QWORD *)v72)
        {
          v40 = (uint64_t)(*(_QWORD *)v72 - (unint64_t)__p[0]) >> 2;
          if (v40 <= 1)
            v40 = 1;
          if (*(_QWORD *)v72 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v72, v41);
          v44 = (char *)__p[0];
          v45 = (char *)__p[1];
          *(_QWORD *)v43 = 0;
          v39 = v43 + 8;
          v46 = v43;
          while (v45 != v44)
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v46 - 1) = v47;
            v46 -= 8;
          }
          __p[0] = v46;
          __p[1] = v43 + 8;
          *(_QWORD *)v72 = &v43[8 * v42];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_QWORD *)__p[0] = 0;
          v39 = v38 + 8;
        }
        __p[1] = v39;
        *(_QWORD *)&v72[16] = *(_QWORD *)&v72[8];
        v74[2] = v74[1];
        v75.i64[1] = v75.i64[0];
        v76[2] = v76[1];
        *(_QWORD *)&v72[40] = *(_QWORD *)&v72[32];
        v73.i64[1] = v73.i64[0];
        v77 = 0;
        v78 = 0;
      }
    }
    if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)8)
    {
      if (*(_QWORD *)(v12 + 40) <= (unint64_t)(v78 + 1))
        v48 = v78 + 1;
      else
        v48 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v48;
      dmlc::data::RowBlockContainer<unsigned long long,long long>::Save(__p, v29);
    }
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    std::chrono::steady_clock::now();
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70[0], (uint64_t)"finish reading at %g MB/sec", 27);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    std::ostream::operator<<();
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v70);
    if (v76[1])
    {
      v76[2] = v76[1];
      operator delete(v76[1]);
    }
    if (v75.i64[0])
    {
      v75.i64[1] = v75.i64[0];
      operator delete((void *)v75.i64[0]);
    }
    if (v74[1])
    {
      v74[2] = v74[1];
      operator delete(v74[1]);
    }
    if (v73.i64[0])
    {
      v73.i64[1] = v73.i64[0];
      operator delete((void *)v73.i64[0]);
    }
    if (*(_QWORD *)&v72[32])
    {
      *(_QWORD *)&v72[40] = *(_QWORD *)&v72[32];
      operator delete(*(void **)&v72[32]);
    }
    if (*(_QWORD *)&v72[8])
    {
      *(_QWORD *)&v72[16] = *(_QWORD *)&v72[8];
      operator delete(*(void **)&v72[8]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v49 = (dmlc::SeekStream *)v14;
    if (*(char *)(v12 + 31) < 0)
      v49 = *v14;
    v50 = (void *)dmlc::SeekStream::CreateForRead(v49, (const char *)1);
    if (!v50)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/disk_row_iter.h");
      v56 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: TryLoadCache()", 28);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"failed to build cache file ", 27);
      v60 = strlen(v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v64, v60);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      goto LABEL_89;
    }
    *(_QWORD *)(v12 + 32) = v50;
    __p[0] = &off_24E6B7038;
    __p[1] = v50;
    *(_QWORD *)&v72[8] = __p;
    *(_QWORD *)&v79 = &off_24E6B70C8;
    *((_QWORD *)&v79 + 1) = v50;
    *((_QWORD *)&v80 + 1) = &v79;
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(v12 + 112, (uint64_t)__p, (uint64_t)&v79);
    v51 = (__int128 *)*((_QWORD *)&v80 + 1);
    if (*((__int128 **)&v80 + 1) == &v79)
    {
      v52 = 4;
      v51 = &v79;
    }
    else
    {
      if (!*((_QWORD *)&v80 + 1))
        goto LABEL_84;
      v52 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_84:
    v61 = *(void ***)&v72[8];
    if (*(void ***)&v72[8] == __p)
    {
      v62 = 4;
      v61 = __p;
    }
    else
    {
      if (!*(_QWORD *)&v72[8])
        goto LABEL_89;
      v62 = 5;
    }
    (*((void (**)(void))*v61 + v62))();
    goto LABEL_89;
  }
  v12 = operator new();
  *(_QWORD *)v12 = &off_24E6B7148;
  *(_BYTE *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 80) = 0u;
  v19 = (uint64_t *)(v12 + 80);
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = 0;
  v20 = operator new(8uLL);
  *(_QWORD *)(v12 + 88) = v20 + 1;
  *(_QWORD *)(v12 + 96) = v20 + 1;
  *v20 = 0;
  *(_QWORD *)(v12 + 80) = v20;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_QWORD *)(v12 + 256) = 0;
  std::chrono::steady_clock::now();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    v21 = 10485760;
    do
    {
      v22 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      *(_OWORD *)__p = *v22;
      *(_OWORD *)v72 = v22[1];
      *(_OWORD *)&v72[16] = v22[2];
      *(_OWORD *)&v72[32] = v22[3];
      dmlc::data::RowBlockContainer<unsigned long long,long long>::Push<unsigned long long>(v19, (uint64_t)__p);
      std::chrono::steady_clock::now();
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) >= v21)
      {
        dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v79, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"MB read,", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" MB/sec", 7);
        dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v79);
        v21 += 10485760;
      }
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) != 0);
  }
  dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(&v79, v19);
  v25 = v80;
  *(_OWORD *)(v12 + 16) = v79;
  *(_OWORD *)(v12 + 32) = v25;
  v26 = v82;
  *(_OWORD *)(v12 + 48) = v81;
  *(_OWORD *)(v12 + 64) = v26;
  std::chrono::steady_clock::now();
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)&v79, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/basic_row_iter.h");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v79, (uint64_t)"finish reading at ", 18);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" MB/sec", 7);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)&v79);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_90:
  if ((char)v69 < 0)
    operator delete(v68[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v67, v67[1]);
  if (v66 < 0)
    operator delete(v65[0]);
  return v12;
}

void sub_220E3B73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;

  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(v54);
  if (*(char *)(v53 + 31) < 0)
    operator delete(*a11);
  MEMORY[0x227667068](v53, 0x10F3C404D6CCE2ELL);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,float>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::Get();
  v8 = qword_253F36458;
  if (!qword_253F36458)
    goto LABEL_30;
  v9 = &qword_253F36458;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F36458
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36460, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3BBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,float>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::Get();
  v8 = qword_253F365F0;
  if (!qword_253F365F0)
    goto LABEL_30;
  v9 = &qword_253F365F0;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F365F0
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F365F8, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,int>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::Get();
  v8 = qword_253F364E0;
  if (!qword_253F364E0)
    goto LABEL_30;
  v9 = &qword_253F364E0;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F364E0
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F364E8, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3C1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,int>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::Get();
  v8 = qword_253F36678;
  if (!qword_253F36678)
    goto LABEL_30;
  v9 = &qword_253F36678;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F36678
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36680, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned int,long long>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::Get();
  v8 = qword_253F36568;
  if (!qword_253F36568)
    goto LABEL_30;
  v9 = &qword_253F36568;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F36568
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36570, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3C7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void dmlc::data::CreateParser_<unsigned long long,long long>(char *a1, uint64_t a2, uint64_t a3, char *__s)
{
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string __p;
  void *v22[2];
  char v23;
  _QWORD *v24[5];
  char v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v26, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  dmlc::io::URISpec::URISpec((uint64_t)v22, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 4)
      goto LABEL_9;
    v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_9;
    v7 = &v26;
  }
  if (LODWORD(v7->__r_.__value_.__l.__data_) != 1869903201)
    goto LABEL_9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__count_unique<std::string>((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_26;
LABEL_29:
    MEMORY[0x227666C18](&v26, "libsvm");
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_29;
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v15 = (const std::string *)std::map<std::string,xgboost::Json>::at((uint64_t)v24, (const void **)&__p.__r_.__value_.__l.__data_);
  std::string::operator=(&v26, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::Get();
  v8 = qword_253F36700;
  if (!qword_253F36700)
    goto LABEL_30;
  v9 = &qword_253F36700;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, (const void **)(v8 + 32), (const void **)&v26.__r_.__value_.__l.__data_);
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = (uint64_t *)v8;
    }
    v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_253F36700
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F36708, (const void **)&v26.__r_.__value_.__l.__data_, (const void **)v9 + 4)|| (v12 = v9[7]) == 0)
  {
LABEL_30:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown data type ", 18);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v26;
    else
      v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __break(1u);
  }
  else
  {
    (*(void (**)(void **, _QWORD **, uint64_t, uint64_t))(v12 + 72))(v22, v24, a2, a3);
    if (v25 < 0)
      operator delete(v24[3]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v24, v24[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_220E3CAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  dmlc::io::URISpec::~URISpec(&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,float>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,int>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned int,long long>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,float>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,int>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::Registry<dmlc::ParserFactoryReg<unsigned long long,long long>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void **v9;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        if (*(char *)(v5 + 103) < 0)
          operator delete(*(void **)(v5 + 80));
        v9 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x10B2C40920FD5BALL);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      ++v4;
    }
    while (v4 < (v2 - (uint64_t)v3) >> 3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t dmlc::data::CreateLibSVMParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  char v25;
  uint64_t v26;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v24);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 850045863;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = (uint64_t *)(v6 + 200);
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)v6 = off_24E6B71A0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  dmlc::data::LibSVMParserParam::__MANAGER__((dmlc::data::LibSVMParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36348, v6 + 200, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 223);
  if (v8 < 0)
  {
    if (*(_QWORD *)(v6 + 208) != 6)
      goto LABEL_12;
    v9 = *v7;
LABEL_8:
    v10 = *(_DWORD *)v9;
    v11 = *(unsigned __int16 *)(v9 + 4);
    if (v10 == 1935829356 && v11 == 28022)
      goto LABEL_21;
    goto LABEL_12;
  }
  v9 = v6 + 200;
  if (v8 == 6)
    goto LABEL_8;
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v7, "libsvm", &v26);
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"libsvm\"", 25);
    v17 = *(char *)(v26 + 23);
    if (v17 >= 0)
      v18 = v26;
    else
      v18 = *(_QWORD *)v26;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v26 + 23);
    else
      v19 = *(_QWORD *)(v26 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
    v21 = v26;
    v26 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v21);
  }
LABEL_21:
  v22 = operator new();
  dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(v22, v6);
  return v22;
}

void sub_220E3D2BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 223) < 0)
    operator delete(*v2);
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateLibSVMParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  char v25;
  uint64_t v26;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v24);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 850045863;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  v7 = (uint64_t *)(v6 + 208);
  *(_DWORD *)(v6 + 112) = 1;
  *(_QWORD *)v6 = off_24E6B74B8;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  dmlc::data::LibSVMParserParam::__MANAGER__((dmlc::data::LibSVMParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36348, v6 + 208, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 231);
  if (v8 < 0)
  {
    if (*(_QWORD *)(v6 + 216) != 6)
      goto LABEL_12;
    v9 = *v7;
LABEL_8:
    v10 = *(_DWORD *)v9;
    v11 = *(unsigned __int16 *)(v9 + 4);
    if (v10 == 1935829356 && v11 == 28022)
      goto LABEL_21;
    goto LABEL_12;
  }
  v9 = v6 + 208;
  if (v8 == 6)
    goto LABEL_8;
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [7]>((uint64_t)v7, "libsvm", &v26);
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"libsvm\"", 25);
    v17 = *(char *)(v26 + 23);
    if (v17 >= 0)
      v18 = v26;
    else
      v18 = *(_QWORD *)v26;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v26 + 23);
    else
      v19 = *(_QWORD *)(v26 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
    v21 = v26;
    v26 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v21);
  }
LABEL_21:
  v22 = operator new();
  dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(v22, v6);
  return v22;
}

void sub_220E3D54C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 231) < 0)
    operator delete(*v2);
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateLibFMParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  char v25;
  uint64_t v26;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v24);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 850045863;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = (uint64_t *)(v6 + 200);
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)v6 = off_24E6B77D0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  dmlc::data::LibFMParserParam::__MANAGER__((dmlc::data::LibFMParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36390, v6 + 200, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 223);
  if (v8 < 0)
  {
    if (*(_QWORD *)(v6 + 208) != 5)
      goto LABEL_12;
    v9 = *v7;
LABEL_8:
    v10 = *(_DWORD *)v9;
    v11 = *(unsigned __int8 *)(v9 + 4);
    if (v10 == 1717725548 && v11 == 109)
      goto LABEL_21;
    goto LABEL_12;
  }
  v9 = v6 + 200;
  if (v8 == 5)
    goto LABEL_8;
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [6]>(&v26, (uint64_t)v7);
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"libfm\"", 24);
    v17 = *(char *)(v26 + 23);
    if (v17 >= 0)
      v18 = v26;
    else
      v18 = *(_QWORD *)v26;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v26 + 23);
    else
      v19 = *(_QWORD *)(v26 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
    v21 = v26;
    v26 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v21);
  }
LABEL_21:
  v22 = operator new();
  dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(v22, v6);
  return v22;
}

void sub_220E3D7CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 223) < 0)
    operator delete(*v2);
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateLibFMParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  char v25;
  uint64_t v26;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v24);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 850045863;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  v7 = (uint64_t *)(v6 + 208);
  *(_DWORD *)(v6 + 112) = 1;
  *(_QWORD *)v6 = off_24E6B7838;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  dmlc::data::LibFMParserParam::__MANAGER__((dmlc::data::LibFMParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36390, v6 + 208, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 231);
  if (v8 < 0)
  {
    if (*(_QWORD *)(v6 + 216) != 5)
      goto LABEL_12;
    v9 = *v7;
LABEL_8:
    v10 = *(_DWORD *)v9;
    v11 = *(unsigned __int8 *)(v9 + 4);
    if (v10 == 1717725548 && v11 == 109)
      goto LABEL_21;
    goto LABEL_12;
  }
  v9 = v6 + 208;
  if (v8 == 5)
    goto LABEL_8;
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [6]>(&v26, (uint64_t)v7);
  if (v26)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"libfm\"", 24);
    v17 = *(char *)(v26 + 23);
    if (v17 >= 0)
      v18 = v26;
    else
      v18 = *(_QWORD *)v26;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v26 + 23);
    else
      v19 = *(_QWORD *)(v26 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
    v21 = v26;
    v26 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v21);
  }
LABEL_21:
  v22 = operator new();
  dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(v22, v6);
  return v22;
}

void sub_220E3DA54(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 231) < 0)
    operator delete(*v2);
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned int,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 850045863;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = (unsigned __int16 **)(v6 + 200);
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)v6 = off_24E6B78A0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 200, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 223);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 200);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 208) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 224);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 256))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3DD20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40CF2D762DLL);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned long long,float>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 850045863;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  v7 = (unsigned __int16 **)(v6 + 208);
  *(_DWORD *)(v6 + 112) = 1;
  *(_QWORD *)v6 = off_24E6B7908;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 256) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 208, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 231);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 208);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 216) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 232);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 264))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3DFE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40478103D4);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned int,int>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 850045863;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = (unsigned __int16 **)(v6 + 200);
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)v6 = off_24E6B7970;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 200, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 223);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 200);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 208) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 224);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 256))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3E2A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned long long,int>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 850045863;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  v7 = (unsigned __int16 **)(v6 + 208);
  *(_DWORD *)(v6 + 112) = 1;
  *(_QWORD *)v6 = off_24E6B7AB8;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 256) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 208, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 231);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 208);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 216) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 232);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 264))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3E570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned int,long long>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = v5;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 850045863;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = (unsigned __int16 **)(v6 + 200);
  *(_DWORD *)(v6 + 104) = 1;
  *(_QWORD *)v6 = off_24E6B7C00;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 200, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 223);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 200);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 208) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 224);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 256))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3E830(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CreateCSVParser<unsigned long long,long long>(char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  std::string::size_type v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v5 = dmlc::InputSplit::Create((dmlc::InputSplit *)a1, 0, a3, a4, "text", 0, 0, 256, 0, v28);
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v5;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 850045863;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  v7 = (unsigned __int16 **)(v6 + 208);
  *(_DWORD *)(v6 + 112) = 1;
  *(_QWORD *)v6 = off_24E6B7D48;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 256) = 0;
  dmlc::data::CSVParserParam::__MANAGER__((dmlc::data::CSVParserParam *)v6);
  dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F363D8, v6 + 208, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, 2);
  v8 = *(char *)(v6 + 231);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = (unsigned __int16 *)(v6 + 208);
    if (v8 != 3)
      goto LABEL_12;
LABEL_8:
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 29539 && v11 == 118)
      goto LABEL_21;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 216) == 3)
  {
    v9 = *v7;
    goto LABEL_8;
  }
LABEL_12:
  dmlc::LogCheckFormat<std::string,char [4]>(&v31, (uint64_t)v7);
  if (v31)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v30);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.format == \"csv\"", 22);
    v17 = *(char *)(v31 + 23);
    v18 = v17 >= 0 ? v31 : *(_QWORD *)v31;
    v19 = v17 >= 0 ? *(unsigned __int8 *)(v31 + 23) : *(_QWORD *)(v31 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v31, v21);
  }
LABEL_21:
  v22 = *(_DWORD *)(v6 + 232);
  if ((v22 & 0x80000000) == 0 && v22 == *(_DWORD *)(v6 + 264))
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: param_.label_column != param_.weight_column || param_.label_column < 0", 84);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Must have distinct columns for labels and instance weights", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  return v6;
}

void sub_220E3EAF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  dmlc::data::CSVParserParam::~CSVParserParam(v2);
  dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(v1);
  MEMORY[0x227667068](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParserParam::~CSVParserParam(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void dmlc::io::URISpec::~URISpec(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t dmlc::io::URISpec::URISpec(uint64_t a1, const std::string *a2, uint64_t a3, int a4)
{
  void **v6;
  uint64_t v7;
  int v8;
  const std::string *data;
  std::string::size_type size;
  _QWORD *v11;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void **v27;
  void **v28;
  _QWORD *v29;
  std::string *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  unsigned __int8 v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  void **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void **v52;
  uint64_t **v54;
  void *v55[2];
  void *v56[2];
  __int128 v57;
  void **v58[11];
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const std::string *v65;
  uint64_t v66;
  const std::string *v67;
  uint64_t v68;
  std::locale v69;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v54 = (uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (void **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  dmlc::Split(a2, 0x23u, (uint64_t *)&v67);
  v7 = v68 - (_QWORD)v67;
  if (v68 - (_QWORD)v67 == 48)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v58);
    v8 = SHIBYTE(v67[1].__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      data = v67 + 1;
    else
      data = (const std::string *)v67[1].__r_.__value_.__l.__data_;
    if (v8 >= 0)
      size = HIBYTE(v67[1].__r_.__value_.__r.__words[2]);
    else
      size = v67[1].__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)data, size);
    if (a4 != 1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)".split", 6);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".part", 5);
      std::ostream::operator<<();
    }
    std::stringbuf::str();
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)v55;
    v6[2] = v56[0];
    v58[0] = *(void ***)MEMORY[0x24BEDB800];
    *(void ***)((char *)v58 + (unint64_t)*(v58[0] - 3)) = *(void ***)(MEMORY[0x24BEDB800] + 24);
    v58[1] = (void **)(MEMORY[0x24BEDB848] + 16);
    if (v59 < 0)
      operator delete(v58[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x227666FE4](&v61);
  }
  else
  {
    v55[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (v7 >> 3));
    LODWORD(v65) = 1;
    if (v7 != 24)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)v58);
      if (v58[0])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v55);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
        v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v55);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"name_cache.size() == 1U", 23);
        v16 = *((char *)v58[0] + 23);
        v17 = v16 >= 0 ? v58[0] : (void **)*v58[0];
        v18 = v16 >= 0 ? (void *)*((unsigned __int8 *)v58[0] + 23) : v58[0][1];
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, (uint64_t)v18);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v55);
        v21 = v58[0];
        v58[0] = 0;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t)v21);
      }
    }
  }
  dmlc::Split(v67, 0x3Fu, (uint64_t *)&v65);
  v22 = v66 - (_QWORD)v65;
  if (v66 - (_QWORD)v65 == 48)
  {
    dmlc::Split(v65 + 1, 0x26u, &v63);
    v23 = v63;
    if (v64 != v63)
    {
      v24 = 0;
      v25 = 0;
      v26 = (void **)*MEMORY[0x24BEDB7F8];
      v27 = *(void ***)(MEMORY[0x24BEDB7F8] + 24);
      v28 = (void **)(MEMORY[0x24BEDB848] + 16);
      do
      {
        std::istringstream::basic_istringstream[abi:ne180100](v58, (const std::string *)(v23 + v24), 8);
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        *(_OWORD *)v55 = 0u;
        v29 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v58, (uint64_t)v55, 0x3Du);
        if ((*((_BYTE *)v29 + *(_QWORD *)(*v29 - 24) + 32) & 5) != 0)
        {
          v30 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
          dmlc::LogMessageFatal::Entry::Init(v30, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
          v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Check failed: std::getline(is, kv.first, '=')", 45);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid uri argument format", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" for key in arg ", 16);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v58 + (unint64_t)*(v58[0] - 3)));
        v35 = std::locale::use_facet(&v69, MEMORY[0x24BEDB350]);
        v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v69);
        v37 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v58, (uint64_t)&v56[1], v36);
        if ((*((_BYTE *)v37 + *(_QWORD *)(*v37 - 24) + 32) & 5) != 0)
        {
          v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
          dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
          v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v69);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: std::getline(is, kv.second)", 41);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Invalid uri argument format", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" for value in arg ", 18);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v69);
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string> &>(v54, (const void **)v55, (__int128 *)v55);
        if (SHIBYTE(v57) < 0)
          operator delete(v56[1]);
        if (SHIBYTE(v56[0]) < 0)
          operator delete(v55[0]);
        v58[0] = v26;
        *(void ***)((char *)v58 + (_QWORD)*(v26 - 3)) = v27;
        v58[2] = v28;
        if (v60 < 0)
          operator delete(v58[10]);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x227666FE4](&v62);
        ++v25;
        v23 = v63;
        v24 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 3));
    }
    v58[0] = (void **)&v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  }
  else
  {
    v55[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (v22 >> 3));
    LODWORD(v63) = 1;
    if (v22 != 24)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)v58);
      if (v58[0])
      {
        v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v55);
        dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/uri_spec.h");
        v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v55);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: ", 14);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"name_args.size() == 1U", 22);
        v47 = *((char *)v58[0] + 23);
        v48 = v47 >= 0 ? v58[0] : (void **)*v58[0];
        v49 = v47 >= 0 ? (void *)*((unsigned __int8 *)v58[0] + 23) : v58[0][1];
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, (uint64_t)v49);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v55);
        v52 = v58[0];
        v58[0] = 0;
        if (v52)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t)v52);
      }
    }
  }
  std::string::operator=((std::string *)a1, v65);
  v58[0] = (void **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  v58[0] = (void **)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  return a1;
}

void sub_220E3F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v20;
  void **v21;
  uint64_t v22;

  a20 = (void **)(v22 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = (void **)(v22 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (*(char *)(v20 + 71) < 0)
    operator delete(*v21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12, *(_QWORD **)(v20 + 32));
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

void dmlc::Split(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[12];
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = 0uLL;
  v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v12, a2);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = a3[1];
    if (v6 >= a3[2])
    {
      v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, &v12);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v12, *((std::string::size_type *)&v12 + 1));
      }
      else
      {
        v7 = v12;
        *(_QWORD *)(v6 + 16) = v13;
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  v9[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v9[2] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227666FE4](&v11);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_220E3F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v11 - 56) = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 56));
  std::istringstream::~istringstream((uint64_t)&a9);
  if (*(char *)(v11 - 57) < 0)
    operator delete(*(void **)(v11 - 80));
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x227666CFC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_220E3F66C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x220E3F638);
  }
  __cxa_rethrow();
}

void sub_220E3F6B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_220E3F7D0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string> &>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string,std::string> &>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E3F8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C408E4C9560);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,float>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E3F988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E3FB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E3FE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E3FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E3FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E3FF6CLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back();
  }
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E40554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E40870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E40D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E40CCCLL);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x227667068);
}

uint64_t *std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (result)
  {
    v1 = result;
    v2 = result + 6;
    v3 = (_QWORD *)result[9];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (uint64_t *)v1[5];
    if (v5 == v1 + 2)
    {
      v6 = 4;
      v5 = v1 + 2;
    }
    else
    {
      if (!v5)
      {
LABEL_13:
        std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
        JUMPOUT(0x227667068);
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_13;
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x227666E40]();
    JUMPOUT(0x227667068);
  }
  return result;
}

_QWORD *dmlc::ScopedThread::ScopedThread(_QWORD *this, std::thread a2)
{
  std::logic_error *exception;

  *this = &unk_24E6B7ED0;
  this[1] = a2.__t_->__sig;
  a2.__t_->__sig = 0;
  if (!this[1])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No thread");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  return this;
}

void sub_220E41088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::thread *a10)
{
  std::thread::~thread(a10);
  _Unwind_Resume(a1);
}

void dmlc::ScopedThread::~ScopedThread(std::thread *this)
{
  dmlc::ScopedThread::~ScopedThread(this);
  JUMPOUT(0x227667068);
}

{
  std::thread *v1;

  this->__t_ = (std::__libcpp_thread_t)&unk_24E6B7ED0;
  v1 = this + 1;
  std::thread::join(this + 1);
  std::thread::~thread(v1);
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B64D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B64D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, std::vector<unsigned int>::size_type *, uint64_t);
  std::vector<unsigned int>::size_type v7;
  std::vector<unsigned int>::size_type v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::vector<unsigned int>::size_type v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::vector<unsigned int>::size_type v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::vector<unsigned int>::size_type v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::vector<unsigned int>::size_type v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::vector<unsigned int>::size_type v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::vector<unsigned int>::size_type __sz;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, std::vector<unsigned int>::size_type *, uint64_t))(a1 + 8);
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8)
    return 0;
  v7 = __sz;
  std::vector<unsigned long>::resize(v4, __sz);
  if (__sz)
  {
    if ((**v6)(v6, *(std::vector<unsigned int>::size_type **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v8 = __sz, std::vector<float>::resize(v4 + 24, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 24), 4 * v8) != 4 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v13 = __sz, std::vector<float>::resize(v4 + 48, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v18 = __sz, std::vector<unsigned long>::resize(v4 + 72, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v23 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 96), __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 96), 4 * v23) != 4 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v28 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 120), __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 120), 4 * v28) != 4 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v33 = __sz, std::vector<float>::resize(v4 + 144, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 144), 4 * v33) != 4 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<unsigned int>::size_type *)(v4 + 168), 4))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<unsigned int>::size_type *)(v4 + 172), 4))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_220E417D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C40D149B244);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6560;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned int,float>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  std::vector<float>::resize(a1 + 24, *(_QWORD *)a2 + (v5 >> 2));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(_QWORD *)(a1 + 56), v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(_QWORD *)(a1 + 80), v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2));
    v13 = *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96) ? 0 : *(_QWORD *)(a1 + 96);
    if (v10 != v11)
    {
      v14 = (unsigned int *)(v13 + 4 * *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8));
      v15 = *(unsigned int **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18)
          v17 = *(_DWORD *)(a1 + 168);
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 2));
  v20 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v20)
    v20 = 0;
  v21 = *(_QWORD *)(a1 + 8);
  if (v10 != v11)
  {
    v22 = (unsigned int *)(v20 + 4 * *(_QWORD *)(v21 - 8));
    v23 = *(unsigned int **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26)
        v25 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<float>::resize(a1 + 144, v12 + ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
    v27 = *(_QWORD *)(a1 + 144);
    v28 = *(_QWORD *)(a1 + 152) - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    v21 = *(_QWORD *)(a1 + 8);
  }
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(_QWORD *)a2 + ((v21 - *(_QWORD *)a1) >> 3));
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    v30 = 0;
  else
    v30 = *(_QWORD *)a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,float>::Save(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;

  v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *a1, a1[1] - *a1);
  v5 = (uint64_t)(a1[4] - a1[3]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  v5 = (uint64_t)(a1[13] - a1[12]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  v5 = (uint64_t)(a1[16] - a1[15]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  v5 = (uint64_t)(a1[19] - a1[18]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 21, 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, (uint64_t)a1 + 172, 4);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_220E41FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_220E422A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

dmlc::LogMessage *dmlc::LogMessage::LogMessage(dmlc::LogMessage *this, const char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  dmlc::DateLogger *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  *(_QWORD *)this = MEMORY[0x24BEDB310];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
  v6 = dmlc::DateLogger::HumanDate((dmlc::LogMessage *)((char *)this + 8));
  v7 = strlen((const char *)v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
  v10 = strlen(a2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)":", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  return this;
}

void dmlc::LogMessage::~LogMessage(dmlc::LogMessage *this)
{
  _QWORD *v1;
  char v2;

  v1 = *(_QWORD **)this;
  v2 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v2, 1);
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B6470;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E425D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x227667068](v6, 0x1090C40D149B244);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x227667068](v10, 0x1090C40D149B244);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
  {
    v15 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    result = MEMORY[0x227667068](v15, 0x1090C40D149B244);
    *(_QWORD *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,float>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B63F0;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E42938(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 2) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 2;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 2)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E42BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned int,float>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B65E0;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,float>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B65E0;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,float>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,float>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E42D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C408E4C9560);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E42E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E42FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E432B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E43390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E43420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E433F0);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E43998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E43C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E4404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,float> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E44010);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6718;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, unint64_t *, uint64_t);
  unint64_t v7;
  unint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v47;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, unint64_t *, uint64_t))(a1 + 8);
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8)
    return 0;
  v7 = v47;
  std::vector<unsigned long>::resize(v4, v47);
  if (v47)
  {
    if ((**v6)(v6, *(unint64_t **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v8 = v47, std::vector<float>::resize(v4 + 24, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 24), 4 * v8) != 4 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v13 = v47, std::vector<float>::resize(v4 + 48, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v18 = v47, std::vector<unsigned long>::resize(v4 + 72, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v23 = v47, std::vector<unsigned long>::resize(v4 + 96, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 96), 8 * v23) != 8 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v28 = v47, std::vector<unsigned long>::resize(v4 + 120, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 120), 8 * v28) != 8 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v33 = v47, std::vector<float>::resize(v4 + 144, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 144), 4 * v33) != 4 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  if (!(**v6)(v6, (unint64_t *)(v4 + 168), 8))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  if (!(**v6)(v6, (unint64_t *)(v4 + 176), 8))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  return 1;
}

void sub_220E448C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C40783A93ABLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,float> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,float> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B67A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B67A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,float>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned long long,float>::Push<unsigned long long>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = a1 + 3;
  v5 = a1[4] - a1[3];
  std::vector<float>::resize((uint64_t)(a1 + 3), *(_QWORD *)a2 + (v5 >> 2));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)(a1 + 6), a1[7], v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)(a1 + 9), a1[10], v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 12), v12 + ((a1[13] - a1[12]) >> 3));
    v13 = a1[13] == a1[12] ? 0 : a1[12];
    if (v10 != v11)
    {
      v14 = (unint64_t *)(v13 + 8 * *(_QWORD *)(a1[1] - 8));
      v15 = *(unint64_t **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (a1[21] > v18)
          v17 = a1[21];
        a1[21] = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 2;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 15), v12 + ((a1[16] - a1[15]) >> 3));
  v20 = a1[15];
  if (a1[16] == v20)
    v20 = 0;
  v21 = a1[1];
  if (v10 != v11)
  {
    v22 = (unint64_t *)(v20 + 8 * *(_QWORD *)(v21 - 8));
    v23 = *(unint64_t **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (a1[22] > v26)
        v25 = a1[22];
      a1[22] = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<float>::resize((uint64_t)(a1 + 18), v12 + ((a1[19] - a1[18]) >> 2));
    v27 = a1[18];
    v28 = a1[19] - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    v21 = a1[1];
  }
  v29 = *(_QWORD *)(*a1 + 8 * v19);
  std::vector<unsigned long>::resize((uint64_t)a1, *(_QWORD *)a2 + ((v21 - *a1) >> 3));
  if (a1[1] == *a1)
    v30 = 0;
  else
    v30 = *a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned long long,float>::Save(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;

  v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *a1, a1[1] - *a1);
  v5 = (uint64_t)(a1[4] - a1[3]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  v5 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  v5 = (uint64_t)(a1[16] - a1[15]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  v5 = (uint64_t)(a1[19] - a1[18]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 21, 8);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 22, 8);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B66B8;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E44F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x227667068](v6, 0x1090C40783A93ABLL);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x227667068](v10, 0x1090C40783A93ABLL);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
  {
    v15 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    result = MEMORY[0x227667068](v15, 0x1090C40783A93ABLL);
    *(_QWORD *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,float>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B6638;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,float>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E45224(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 2) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 3;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 2)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E454E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned long long,float>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6828;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,float>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6828;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,float>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,float>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256) + 1;
}

void dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E45620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,int>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E456F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E458BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E45B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E45C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E45D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E45CDCLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E46284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E46520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E46938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,int> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E468FCLL);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6960;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, std::vector<int>::size_type *, uint64_t);
  std::vector<int>::size_type v7;
  std::vector<int>::size_type v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::vector<int>::size_type v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::vector<int>::size_type v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::vector<int>::size_type v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::vector<int>::size_type v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::vector<int>::size_type v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::vector<int>::size_type __sz;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, std::vector<int>::size_type *, uint64_t))(a1 + 8);
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8)
    return 0;
  v7 = __sz;
  std::vector<unsigned long>::resize(v4, __sz);
  if (__sz)
  {
    if ((**v6)(v6, *(std::vector<int>::size_type **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v8 = __sz, std::vector<int>::resize((std::vector<int> *)(v4 + 24), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 24), 4 * v8) != 4 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v13 = __sz, std::vector<float>::resize(v4 + 48, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v18 = __sz, std::vector<unsigned long>::resize(v4 + 72, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v23 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 96), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 96), 4 * v23) != 4 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v28 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 120), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 120), 4 * v28) != 4 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v33 = __sz, std::vector<int>::resize((std::vector<int> *)(v4 + 144), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 144), 4 * v33) != 4 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<int>::size_type *)(v4 + 168), 4))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<int>::size_type *)(v4 + 172), 4))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_220E471B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C4087115870);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,int> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B69F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B69F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned int,int>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), *(_QWORD *)a2 + (v5 >> 2));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(_QWORD *)(a1 + 56), v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(_QWORD *)(a1 + 80), v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2));
    v13 = *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96) ? 0 : *(_QWORD *)(a1 + 96);
    if (v10 != v11)
    {
      v14 = (unsigned int *)(v13 + 4 * *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8));
      v15 = *(unsigned int **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18)
          v17 = *(_DWORD *)(a1 + 168);
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 2;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 2));
  v20 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v20)
    v20 = 0;
  v21 = *(_QWORD *)(a1 + 8);
  if (v10 != v11)
  {
    v22 = (unsigned int *)(v20 + 4 * *(_QWORD *)(v21 - 8));
    v23 = *(unsigned int **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26)
        v25 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 144), v12 + ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
    v27 = *(_QWORD *)(a1 + 144);
    v28 = *(_QWORD *)(a1 + 152) - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    v21 = *(_QWORD *)(a1 + 8);
  }
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(_QWORD *)a2 + ((v21 - *(_QWORD *)a1) >> 3));
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    v30 = 0;
  else
    v30 = *(_QWORD *)a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B6900;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E4761C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x227667068](v6, 0x1090C4087115870);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x227667068](v10, 0x1090C4087115870);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
  {
    v15 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    result = MEMORY[0x227667068](v15, 0x1090C4087115870);
    *(_QWORD *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,int>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B6880;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E478C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 2) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 2;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 2)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E47B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned int,int>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6A70;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,int>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6A70;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,int>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,int>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E47CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,int>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E47D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E47F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E48238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E48318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E483A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E48378);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E48920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E48BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E48FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,int> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,int> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E48F98);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6BA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6BA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, std::vector<int>::size_type *, uint64_t);
  std::vector<int>::size_type v7;
  std::vector<int>::size_type v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::vector<int>::size_type v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::vector<int>::size_type v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::vector<int>::size_type v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::vector<int>::size_type v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::vector<int>::size_type v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::vector<int>::size_type __sz;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, std::vector<int>::size_type *, uint64_t))(a1 + 8);
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8)
    return 0;
  v7 = __sz;
  std::vector<unsigned long>::resize(v4, __sz);
  if (__sz)
  {
    if ((**v6)(v6, *(std::vector<int>::size_type **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v8 = __sz, std::vector<int>::resize((std::vector<int> *)(v4 + 24), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 24), 4 * v8) != 4 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v13 = __sz, std::vector<float>::resize(v4 + 48, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v18 = __sz, std::vector<unsigned long>::resize(v4 + 72, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v23 = __sz, std::vector<unsigned long>::resize(v4 + 96, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 96), 8 * v23) != 8 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v28 = __sz, std::vector<unsigned long>::resize(v4 + 120, __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 120), 8 * v28) != 8 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v33 = __sz, std::vector<int>::resize((std::vector<int> *)(v4 + 144), __sz), __sz)
    && (**v6)(v6, *(std::vector<int>::size_type **)(v4 + 144), 4 * v33) != 4 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<int>::size_type *)(v4 + 168), 8))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<int>::size_type *)(v4 + 176), 8))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_220E4984C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C40257C4FA6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,int> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,int> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6C38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6C38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,int>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned long long,int>::Push<unsigned long long>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), *(_QWORD *)a2 + (v5 >> 2));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 4 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(_QWORD *)(a1 + 56), v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(_QWORD *)(a1 + 80), v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned long>::resize(a1 + 96, v12 + ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
    v13 = *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96) ? 0 : *(_QWORD *)(a1 + 96);
    if (v10 != v11)
    {
      v14 = (unint64_t *)(v13 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8));
      v15 = *(unint64_t **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (*(_QWORD *)(a1 + 168) > v18)
          v17 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 2;
  std::vector<unsigned long>::resize(a1 + 120, v12 + ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
  v20 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v20)
    v20 = 0;
  v21 = *(_QWORD *)(a1 + 8);
  if (v10 != v11)
  {
    v22 = (unint64_t *)(v20 + 8 * *(_QWORD *)(v21 - 8));
    v23 = *(unint64_t **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (*(_QWORD *)(a1 + 176) > v26)
        v25 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 144), v12 + ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
    v27 = *(_QWORD *)(a1 + 144);
    v28 = *(_QWORD *)(a1 + 152) - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 4 * v12), *(const void **)(a2 + 56), 4 * v12);
    v21 = *(_QWORD *)(a1 + 8);
  }
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(_QWORD *)a2 + ((v21 - *(_QWORD *)a1) >> 3));
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    v30 = 0;
  else
    v30 = *(_QWORD *)a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B6B48;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E49CB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
      if (v5)
      {
        v6 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v5);
        MEMORY[0x227667068](v6, 0x1090C40257C4FA6);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      if (v9)
      {
        v10 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v9);
        MEMORY[0x227667068](v10, 0x1090C40257C4FA6);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
  {
    v15 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(result);
    result = MEMORY[0x227667068](v15, 0x1090C40257C4FA6);
    *(_QWORD *)(a1 + 288) = 0;
  }
  return result;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,int>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B6AC8;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E49F5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 2) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 3;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 2)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E4A21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned long long,int>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6CB8;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,int>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6CB8;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,int>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,int>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256) + 1;
}

void dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E4A358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned int,long long>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E4A430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E4A5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E4A8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E4A9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E4AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E4AA14);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E4AFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E4B258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E4B670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned int,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,long long> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E4B634);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6DF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6DF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, std::vector<unsigned int>::size_type *, uint64_t);
  std::vector<unsigned int>::size_type v7;
  std::vector<unsigned int>::size_type v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::vector<unsigned int>::size_type v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::vector<unsigned int>::size_type v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::vector<unsigned int>::size_type v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::vector<unsigned int>::size_type v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::vector<unsigned int>::size_type v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::vector<unsigned int>::size_type __sz;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, std::vector<unsigned int>::size_type *, uint64_t))(a1 + 8);
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8)
    return 0;
  v7 = __sz;
  std::vector<unsigned long>::resize(v4, __sz);
  if (__sz)
  {
    if ((**v6)(v6, *(std::vector<unsigned int>::size_type **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v8 = __sz, std::vector<unsigned long>::resize(v4 + 24, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 24), 8 * v8) != 8 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v13 = __sz, std::vector<float>::resize(v4 + 48, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v18 = __sz, std::vector<unsigned long>::resize(v4 + 72, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v23 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 96), __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 96), 4 * v23) != 4 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v28 = __sz, std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v4 + 120), __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 120), 4 * v28) != 4 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  __sz = 0;
  if ((**v6)(v6, &__sz, 8) != 8
    || (v33 = __sz, std::vector<unsigned long>::resize(v4 + 144, __sz), __sz)
    && (**v6)(v6, *(std::vector<unsigned int>::size_type **)(v4 + 144), 8 * v33) != 8 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<unsigned int>::size_type *)(v4 + 168), 4))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  if (!(**v6)(v6, (std::vector<unsigned int>::size_type *)(v4 + 172), 4))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__sz);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__sz);
  }
  return 1;
}

void sub_220E4BEE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C4087115870);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned int,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned int,long long> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B6E80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B6E80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned int,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned int,long long>::Push<unsigned int>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  std::vector<unsigned long>::resize(a1 + 24, *(_QWORD *)a2 + (v5 >> 3));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 8 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(a1 + 48, *(_QWORD *)(a1 + 56), v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a1 + 72, *(_QWORD *)(a1 + 80), v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 96), v12 + ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2));
    v13 = *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96) ? 0 : *(_QWORD *)(a1 + 96);
    if (v10 != v11)
    {
      v14 = (unsigned int *)(v13 + 4 * *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8));
      v15 = *(unsigned int **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (*(_DWORD *)(a1 + 168) > v18)
          v17 = *(_DWORD *)(a1 + 168);
        *(_DWORD *)(a1 + 168) = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 3;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 120), v12 + ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 2));
  v20 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v20)
    v20 = 0;
  v21 = *(_QWORD *)(a1 + 8);
  if (v10 != v11)
  {
    v22 = (unsigned int *)(v20 + 4 * *(_QWORD *)(v21 - 8));
    v23 = *(unsigned int **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (*(_DWORD *)(a1 + 172) > v26)
        v25 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)(a1 + 172) = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<unsigned long>::resize(a1 + 144, v12 + ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3));
    v27 = *(_QWORD *)(a1 + 144);
    v28 = *(_QWORD *)(a1 + 152) - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 8 * v12), *(const void **)(a2 + 56), 8 * v12);
    v21 = *(_QWORD *)(a1 + 8);
  }
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v19);
  std::vector<unsigned long>::resize(a1, *(_QWORD *)a2 + ((v21 - *(_QWORD *)a1) >> 3));
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    v30 = 0;
  else
    v30 = *(_QWORD *)a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned int,long long>::Save(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;

  v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *a1, a1[1] - *a1);
  v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  v5 = (uint64_t)(a1[13] - a1[12]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  v5 = (uint64_t)(a1[16] - a1[15]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  v5 = (uint64_t)(a1[19] - a1[18]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 21, 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, (uint64_t)a1 + 172, 4);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B6D90;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E4C5A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::DiskRowIter<unsigned int,long long>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B6D10;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,int>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,long long>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E4C674(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 3) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 2;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 3)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E4C934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned int,long long>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6F00;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned int,long long>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B6F00;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned int,long long>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned int,long long>::NumCol(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252) + 1;
}

void dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(uint64_t a1)
{
  dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E4CA70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C404D6CCE2ELL);
  _Unwind_Resume(a1);
}

void dmlc::data::DiskRowIter<unsigned long long,long long>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::BeforeFirst(a1 + 112);
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::Next(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];

  v2 = (uint64_t)(a1 + 7);
  v3 = dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Next((uint64_t)(a1 + 7));
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Value(v2);
    dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(v8, v4);
    v5 = v8[1];
    a1[3] = v8[0];
    a1[4] = v5;
    v6 = v8[3];
    a1[5] = v8[2];
    a1[6] = v6;
  }
  return v3;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E4CB48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E4CD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Next(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void **v13;
  unint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  unsigned __int8 v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  std::unique_lock<std::mutex> __lk;

  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v2 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v2 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  }
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v10 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 336);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)(a1 + 184) = v10;
  }
  else
  {
    while (1)
    {
      v12 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v12 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v11 = *(_QWORD *)(a1 + 336);
      if (v11)
      {
        v10 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_15;
      }
    }
    v11 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v11)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v18 & 1) == 0)
      {
        v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_24;
    }
  }
  v13 = *(void ***)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 288) = (*(_QWORD **)((char *)v13 + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8)))[v14 & 0x1FF];
  *(_QWORD *)(a1 + 328) = ++v14;
  *(_QWORD *)(a1 + 336) = v11 - 1;
  if (v14 >= 0x400)
  {
    operator delete(*v13);
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v15 = atomic_load((unsigned __int8 *)(a1 + 40));
    v16 = (v15 & 1) == 0;
  }
  else
  {
    v16 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v16)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_24:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E4CFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E4D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E4D15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E4D12CLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E4D6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::thread v20[2];
  std::exception_ptr v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  atomic_store(0, (unsigned int *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 28));
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  v21.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 392), &v21);
  std::exception_ptr::~exception_ptr(&v21);
  std::mutex::unlock(v6);
  v21.__ptr_ = (void *)a1;
  v7 = v22;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v22, a2);
  v8 = v24;
  std::__function::__value_func<xgboost::ObjFunction * ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a3);
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v20[1].__t_ = 0;
  ptr = v21.__ptr_;
  v13 = v23;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
    goto LABEL_4;
  if (v13 != v22)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_4:
    v11[5] = v13;
    goto LABEL_6;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v22[0] + 24))(v22, v11 + 2);
LABEL_6:
  v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_9:
    v11[9] = v14;
    goto LABEL_11;
  }
  if (v25 != v24)
  {
    v14 = (*(uint64_t (**)(void))(*v25 + 16))();
    goto LABEL_9;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
LABEL_11:
  v15 = pthread_create(&v20[0].__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v20;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread(v20);
  if (v25 == v24)
  {
    v18 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_19;
    v18 = 5;
    v8 = v25;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v18))(v8);
LABEL_19:
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      return;
    v19 = 5;
    v7 = v23;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
}

void sub_220E4D970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v6 = (_QWORD *)v3[5];
  if (v6 == v4)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v4 = (_QWORD *)v3[5];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v7))(v4);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v3, 0);
  MEMORY[0x227667068](v3, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  MEMORY[0x227667068](v2, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(va1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E4DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<dmlc::data::RowBlockContainer<unsigned long long,long long> *,std::allocator<dmlc::data::RowBlockContainer<unsigned long long,long long> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E4DD4CLL);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B7038;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B7038;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)(_QWORD, unint64_t *, uint64_t);
  unint64_t v7;
  unint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v47;

  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_QWORD *)(v4 + 160) = 0;
    v5 = operator new(8uLL);
    *v5 = 0;
    *(_QWORD *)(v4 + 8) = v5 + 1;
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    *v3 = v4;
  }
  v6 = *(uint64_t (****)(_QWORD, unint64_t *, uint64_t))(a1 + 8);
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8)
    return 0;
  v7 = v47;
  std::vector<unsigned long>::resize(v4, v47);
  if (v47)
  {
    if ((**v6)(v6, *(unint64_t **)v4, 8 * v7) != 8 * v7)
      return 0;
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v8 = v47, std::vector<unsigned long>::resize(v4 + 24, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 24), 8 * v8) != 8 * v8)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: fi->Read(&label)", 30);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v13 = v47, std::vector<float>::resize(v4 + 48, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 48), 4 * v13) != 4 * v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: fi->Read(&weight)", 31);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v18 = v47, std::vector<unsigned long>::resize(v4 + 72, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 72), 8 * v18) != 8 * v18)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: fi->Read(&qid)", 28);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v23 = v47, std::vector<unsigned long>::resize(v4 + 96, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 96), 8 * v23) != 8 * v23)
  {
    v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: fi->Read(&field)", 30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v28 = v47, std::vector<unsigned long>::resize(v4 + 120, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 120), 8 * v28) != 8 * v28)
  {
    v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: fi->Read(&index)", 30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  v47 = 0;
  if ((**v6)(v6, &v47, 8) != 8
    || (v33 = v47, std::vector<unsigned long>::resize(v4 + 144, v47), v47)
    && (**v6)(v6, *(unint64_t **)(v4 + 144), 8 * v33) != 8 * v33)
  {
    v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: fi->Read(&value)", 30);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  if (!(**v6)(v6, (unint64_t *)(v4 + 168), 8))
  {
    v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: fi->Read(&max_field, sizeof(IndexType))", 53);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  if (!(**v6)(v6, (unint64_t *)(v4 + 176), 8))
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v47);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: fi->Read(&max_index, sizeof(IndexType))", 53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Bad RowBlock format", 19);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v47);
  }
  return 1;
}

void sub_220E4E600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1090C40257C4FA6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(dmlc::data::RowBlockContainer<unsigned long long,long long> **)#1}>,BOOL ()(dmlc::data::RowBlockContainer<unsigned long long,long long> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B70C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B70C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
}

uint64_t std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1},std::allocator<dmlc::data::DiskRowIter<unsigned long long,long long>::TryLoadCache(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void dmlc::data::RowBlockContainer<unsigned long long,long long>::Push<unsigned long long>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = a1 + 3;
  v5 = a1[4] - a1[3];
  std::vector<unsigned long>::resize((uint64_t)(a1 + 3), *(_QWORD *)a2 + (v5 >> 3));
  if (v4[1] == *v4)
    v6 = 0;
  else
    v6 = *v4;
  memcpy((void *)(v6 + v5), *(const void **)(a2 + 16), 8 * *(_QWORD *)a2);
  v7 = *(char **)(a2 + 24);
  if (v7)
    std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)(a1 + 6), a1[7], v7, &v7[4 * *(_QWORD *)a2], *(_QWORD *)a2);
  v8 = *(char **)(a2 + 32);
  if (v8)
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)(a1 + 9), a1[10], v8, &v8[8 * *(_QWORD *)a2], *(_QWORD *)a2);
  v9 = *(uint64_t **)(a2 + 8);
  v10 = v9[*(_QWORD *)a2];
  v11 = *v9;
  v12 = v10 - *v9;
  if (*(_QWORD *)(a2 + 40))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 12), v12 + ((a1[13] - a1[12]) >> 3));
    v13 = a1[13] == a1[12] ? 0 : a1[12];
    if (v10 != v11)
    {
      v14 = (unint64_t *)(v13 + 8 * *(_QWORD *)(a1[1] - 8));
      v15 = *(unint64_t **)(a2 + 40);
      v16 = v12;
      do
      {
        v18 = *v15++;
        v17 = v18;
        *v14++ = v18;
        if (a1[21] > v18)
          v17 = a1[21];
        a1[21] = v17;
        --v16;
      }
      while (v16);
    }
  }
  v19 = v5 >> 3;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 15), v12 + ((a1[16] - a1[15]) >> 3));
  v20 = a1[15];
  if (a1[16] == v20)
    v20 = 0;
  v21 = a1[1];
  if (v10 != v11)
  {
    v22 = (unint64_t *)(v20 + 8 * *(_QWORD *)(v21 - 8));
    v23 = *(unint64_t **)(a2 + 48);
    v24 = v12;
    do
    {
      v26 = *v23++;
      v25 = v26;
      *v22++ = v26;
      if (a1[22] > v26)
        v25 = a1[22];
      a1[22] = v25;
      --v24;
    }
    while (v24);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    std::vector<unsigned long>::resize((uint64_t)(a1 + 18), v12 + ((a1[19] - a1[18]) >> 3));
    v27 = a1[18];
    v28 = a1[19] - v27;
    if (!v28)
      v27 = 0;
    memcpy((void *)(v27 + v28 - 8 * v12), *(const void **)(a2 + 56), 8 * v12);
    v21 = a1[1];
  }
  v29 = *(_QWORD *)(*a1 + 8 * v19);
  std::vector<unsigned long>::resize((uint64_t)a1, *(_QWORD *)a2 + ((v21 - *a1) >> 3));
  if (a1[1] == *a1)
    v30 = 0;
  else
    v30 = *a1;
  if (*(_QWORD *)a2)
  {
    v31 = v30 + 8 * v19;
    v32 = *(_QWORD **)(a2 + 8);
    v33 = 1;
    do
      *(_QWORD *)(v31 + 8 * v33) = v32[v33] + v29 - *v32;
    while (v33++ < *(_QWORD *)a2);
  }
}

uint64_t dmlc::data::RowBlockContainer<unsigned long long,long long>::Save(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;

  v5 = (uint64_t)(a1[1] - *a1) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *a1, a1[1] - *a1);
  v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  v5 = (uint64_t)(a1[7] - a1[6]) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  v5 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  v5 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  v5 = (uint64_t)(a1[16] - a1[15]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[15], a1[16] - a1[15]);
  v5 = (uint64_t)(a1[19] - a1[18]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[18], a1[19] - a1[18]);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 21, 8);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 22, 8);
}

uint64_t dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B6FD8;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E4ECBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::DiskRowIter<unsigned long long,long long>::~DiskRowIter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24E6B6F58;
  v2 = a1 + 112;
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,int>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned long long,long long>>::~ThreadedIter(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_220E4ED8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2[4] - a2[3];
  if (v4)
  {
    v40 = (a2[1] - *a2) >> 3;
    v41 = (v4 >> 3) + 1;
    if (v41 != v40)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
      if (v42)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"label.size() + 1 == offset.size()", 33);
        v9 = *(char *)(v42 + 23);
        v10 = v9 >= 0 ? v42 : *(_QWORD *)v42;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
        v13 = v42;
        v42 = 0;
        if (v13)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v13);
      }
    }
  }
  v14 = a2[1];
  v41 = (a2[16] - a2[15]) >> 3;
  if (*(_QWORD *)(v14 - 8) != v41)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v42);
    if (v42)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v41);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"offset.back() == index.size()", 29);
      v19 = *(char *)(v42 + 23);
      v20 = v19 >= 0 ? v42 : *(_QWORD *)v42;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v42 + 23) : *(_QWORD *)(v42 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v41);
      v23 = v42;
      v42 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v42, v23);
    }
  }
  v24 = a2[1];
  v26 = a2[18];
  v25 = a2[19];
  if (v25 != v26 && *(_QWORD *)(v24 - 8) != (v25 - v26) >> 3)
  {
    v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./row_block.h");
    v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: offset.back() == value.size() || value.size() == 0", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
    v24 = a2[1];
    v26 = a2[18];
    v25 = a2[19];
  }
  v30 = *a2;
  v32 = v24 - *a2;
  v31 = v32 == 0;
  v33 = v32 >> 3;
  if (v31)
    v30 = 0;
  *a1 = v33 - 1;
  a1[1] = v30;
  if (a2[4] == a2[3])
    v34 = 0;
  else
    v34 = a2[3];
  if (a2[7] == a2[6])
    v35 = 0;
  else
    v35 = a2[6];
  a1[2] = v34;
  a1[3] = v35;
  if (a2[10] == a2[9])
    v36 = 0;
  else
    v36 = a2[9];
  if (a2[13] == a2[12])
    v37 = 0;
  else
    v37 = a2[12];
  a1[4] = v36;
  a1[5] = v37;
  if (a2[16] == a2[15])
    v38 = 0;
  else
    v38 = a2[15];
  if (v25 == v26)
    v39 = 0;
  else
    v39 = v26;
  a1[6] = v38;
  a1[7] = v39;
}

void sub_220E4F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

_QWORD *dmlc::data::BasicRowIter<unsigned long long,long long>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B7148;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  return a1;
}

void dmlc::data::BasicRowIter<unsigned long long,long long>::~BasicRowIter(_QWORD *a1)
{
  *a1 = &off_24E6B7148;
  dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer((uint64_t)(a1 + 10));
  JUMPOUT(0x227667068);
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::BeforeFirst(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

BOOL dmlc::data::BasicRowIter<unsigned long long,long long>::Next(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  return v1 != 0;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 16;
}

uint64_t dmlc::data::BasicRowIter<unsigned long long,long long>::NumCol(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256) + 1;
}

void std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<dmlc::ParamFieldInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<dmlc::ParamFieldInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7250;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(_QWORD *)a1 = off_24E6B72A0;
  v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E4F2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(_QWORD *)v10 = off_24E6B72A0;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibSVMParser<unsigned int,float>::~LibSVMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B71A0;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::LibSVMParser<unsigned int,float>::~LibSVMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B71A0;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E4F3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
}

BOOL dmlc::data::ParserImpl<unsigned int,float>::Next(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    v5 = v3;
    v6 = v3 <= i ? i : v3;
    v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 + v7) - *(_QWORD *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v3 = 0;
    i = -1171354717 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,float>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,float>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 104);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v13 = 0x1745D1745D1745DLL;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 22 * v13;
      v15 = (uint64_t *)operator new(176 * v13);
      v16 = &v15[22 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[22 * (int)v6];
      v18 = 176 * (int)v6 - 176 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(_QWORD *)(v8 + v21 - 160);
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *(_QWORD *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(_QWORD *)(v8 + v21 - 136);
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_QWORD *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(_QWORD *)(v8 + v21 - 112);
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *(_QWORD *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(_QWORD *)(v8 + v21 - 88);
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_QWORD *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(_QWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 80) = 0;
          *(_QWORD *)(v22 - 72) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 56);
          *(_QWORD *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(_QWORD *)(v8 + v21 - 40);
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_QWORD *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(_QWORD *)(v8 + v21 - 16);
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *(_QWORD *)(v22 - 16) = 0;
          *(v23 - 1) = *(_QWORD *)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 176 * v10;
    v29 = 176 * (int)v6 - 16 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[22 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 112) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E4FB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::LibSVMParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  const char *i;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  float v98;
  unint64_t v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned __int8 *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  char *v121;
  _DWORD *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  float *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  std::string *Entry;
  _QWORD *v145;
  _QWORD *v146;
  int v147;
  _DWORD *v148;
  _DWORD *v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  void **v153;
  void **v154;
  void **v155;
  void **v156;
  _QWORD *v157;
  unsigned int v158;
  int v159;
  int v160;
  const char *v161;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v156 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v154 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v153 = (void **)(a4 + 48);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  v151 = (void **)(a4 + 72);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  v155 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    v158 = -1;
    goto LABEL_214;
  }
  v152 = v10;
  v157 = (_QWORD *)(a4 + 40);
  v150 = a1;
  v158 = -1;
  do
  {
    v22 = a2;
    v23 = a2 + 1;
    while (v23 != a3)
    {
      v25 = *v23++;
      v24 = v25;
      v26 = v25 == 13 || v24 == 10;
      if (v26)
      {
        v27 = v23 - 2;
        a2 = v23 - 1;
        goto LABEL_24;
      }
    }
    v27 = a3 - 1;
    a2 = a3;
LABEL_24:
    v161 = 0;
    v160 = 0;
    v159 = 0;
    if (v22 != a2)
    {
      while (1)
      {
        v28 = *v22;
        if (v28 != 9 && v28 != 32)
          break;
        v26 = v22++ == v27;
        if (v26)
        {
          v22 = a2;
          goto LABEL_32;
        }
      }
      if (v28 == 35)
        v22 = a2;
    }
LABEL_32:
    v29 = dmlc::ParsePair<float,float>(v22, (uint64_t)a2, (uint64_t *)&v161, (float *)&v160, (float *)&v159);
    if (v29)
    {
      if (v29 == 2)
      {
        v31 = *(char **)(a4 + 56);
        v30 = *(_QWORD *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v153;
          v34 = (v31 - (_BYTE *)*v153) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            v33 = *(char **)(a4 + 48);
            v31 = *(char **)(a4 + 56);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v159;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a4 + 48) = v39;
          *(_QWORD *)(a4 + 56) = v32;
          *(_QWORD *)(a4 + 64) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = v159;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a4 + 56) = v32;
      }
      v41 = *(char **)(a4 + 32);
      if (v41 != *(char **)(a4 + 24))
      {
        v42 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
        v44 = *(uint64_t **)(a4 + 8);
        v43 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v44 >= v43)
        {
          v46 = *(uint64_t **)a4;
          v47 = ((uint64_t)v44 - *(_QWORD *)a4) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_244;
          v49 = v43 - (_QWORD)v46;
          if (v49 >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v50);
            v46 = *(uint64_t **)a4;
            v44 = *(uint64_t **)(a4 + 8);
          }
          else
          {
            v51 = 0;
          }
          v52 = (uint64_t *)&v51[8 * v47];
          *v52 = v42;
          v45 = v52 + 1;
          while (v44 != v46)
          {
            v53 = *--v44;
            *--v52 = v53;
          }
          *(_QWORD *)a4 = v52;
          *(_QWORD *)(a4 + 8) = v45;
          *(_QWORD *)(a4 + 16) = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v44 = v42;
          v45 = v44 + 1;
        }
        *(_QWORD *)(a4 + 8) = v45;
        v41 = *(char **)(a4 + 32);
      }
      if ((unint64_t)v41 >= *v157)
      {
        v55 = (char *)*v155;
        v56 = (v41 - (_BYTE *)*v155) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v58 = *v157 - (_QWORD)v55;
        if (v58 >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v157, v59);
          v55 = *(char **)(a4 + 24);
          v41 = *(char **)(a4 + 32);
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[4 * v56];
        *(_DWORD *)v61 = v160;
        v54 = v61 + 4;
        while (v41 != v55)
        {
          v62 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v61;
        *(_QWORD *)(a4 + 32) = v54;
        *(_QWORD *)(a4 + 40) = &v60[4 * v59];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_DWORD *)v41 = v160;
        v54 = v41 + 4;
      }
      *(_QWORD *)(a4 + 32) = v54;
      for (i = v161; i != (const char *)a3; ++i)
      {
        if (*i != 32)
          goto LABEL_90;
      }
      i = (const char *)a3;
LABEL_90:
      if (i != (const char *)a2)
      {
        if (!strncmp(i, "qid:", 4uLL))
        {
          v65 = atoll(i + 4);
          v66 = v65;
          v64 = a2;
          if (i + 4 != (const char *)a2)
          {
            v64 = (unsigned __int8 *)(i + 4);
            while (1)
            {
              v67 = *v64;
              if ((v67 - 48) >= 0xA)
              {
                v68 = v67 - 43;
                v69 = v68 > 0x3A;
                v70 = (1 << v68) & 0x40000000400000DLL;
                if (v69 || v70 == 0)
                  break;
              }
              v26 = v64++ == v27;
              if (v26)
              {
                v64 = v27 + 1;
                break;
              }
            }
          }
          v73 = *(uint64_t **)(a4 + 80);
          v72 = *(_QWORD *)(a4 + 88);
          if ((unint64_t)v73 >= v72)
          {
            v75 = (uint64_t *)*v151;
            v76 = ((char *)v73 - (_BYTE *)*v151) >> 3;
            v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v78 = v72 - (_QWORD)v75;
            if (v78 >> 2 > v77)
              v77 = v78 >> 2;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
              v79 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v79 = v77;
            if (v79)
            {
              v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 88, v79);
              v75 = *(uint64_t **)(a4 + 72);
              v73 = *(uint64_t **)(a4 + 80);
            }
            else
            {
              v80 = 0;
            }
            v81 = (uint64_t *)&v80[8 * v76];
            *v81 = v66;
            v74 = v81 + 1;
            while (v73 != v75)
            {
              v82 = *--v73;
              *--v81 = v82;
            }
            *(_QWORD *)(a4 + 72) = v81;
            *(_QWORD *)(a4 + 80) = v74;
            *(_QWORD *)(a4 + 88) = &v80[8 * v79];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v73 = v65;
            v74 = v73 + 1;
          }
          *(_QWORD *)(a4 + 80) = v74;
        }
        else
        {
          v64 = (unsigned __int8 *)i;
        }
        while (2)
        {
          if (v64 != a2)
          {
            v83 = v64 - 1;
            while (1)
            {
              v84 = v83[1];
              if (v84 != 9 && v84 != 32)
                break;
              ++v64;
              if (++v83 == v27)
              {
                v85 = a2;
                goto LABEL_130;
              }
            }
            if (v84 == 35)
              v85 = a2;
            else
              v85 = v64;
            while (1)
            {
LABEL_130:
              if (v85 == a2)
                goto LABEL_209;
              v86 = *v85;
              if ((v86 - 48) < 0xA)
                break;
              v87 = v86 - 43;
              v69 = v87 > 0x3A;
              v88 = (1 << v87) & 0x40000000400000DLL;
              if (!v69 && v88 != 0)
                break;
              ++v85;
            }
            if (v85 == a2)
            {
              v94 = dmlc::ParseUnsignedInt<unsigned int>(a2);
            }
            else
            {
              v64 = v85;
              while (1)
              {
                v90 = *v64;
                if ((v90 - 48) >= 0xA)
                {
                  v91 = v90 - 43;
                  v69 = v91 > 0x3A;
                  v92 = (1 << v91) & 0x40000000400000DLL;
                  if (v69 || v92 == 0)
                    break;
                }
                if (++v64 == a2)
                {
                  v64 = a2;
                  break;
                }
              }
              v94 = dmlc::ParseUnsignedInt<unsigned int>(v85);
              if (v64 != a2)
              {
                v95 = v64 + 1;
                while (1)
                {
                  v96 = *v64;
                  if (v96 != 9 && v96 != 32)
                    break;
                  ++v64;
                  ++v95;
                  if (v64 == a2)
                    goto LABEL_152;
                }
                if (v96 == 58)
                {
                  while (1)
                  {
                    if (v95 == a2)
                    {
                      v64 = a2;
                      goto LABEL_171;
                    }
                    v108 = *v95;
                    if ((v108 - 48) < 0xA)
                      break;
                    ++v64;
                    ++v95;
                    v109 = v108 - 43;
                    v69 = v109 > 0x3A;
                    v110 = (1 << v109) & 0x40000000400000DLL;
                    if (!v69 && v110 != 0)
                      goto LABEL_171;
                  }
                  v64 = v95;
LABEL_171:
                  v112 = a2;
                  if (v64 != a2)
                  {
                    v112 = v64;
                    while (1)
                    {
                      v113 = *v112;
                      if ((v113 - 48) >= 0xA)
                      {
                        v114 = v113 - 43;
                        v69 = v114 > 0x3A;
                        v115 = (1 << v114) & 0x40000000400000DLL;
                        if (v69 || v115 == 0)
                          break;
                      }
                      if (++v112 == a2)
                      {
                        v112 = a2;
                        break;
                      }
                    }
                  }
                  v161 = (const char *)v112;
                  v98 = dmlc::ParseFloat<float,false>((uint64_t)v64, 0);
                  v97 = 1;
                  v64 = v112;
                  goto LABEL_154;
                }
LABEL_153:
                v97 = 0;
                v161 = (const char *)v64;
                v98 = 0.0;
LABEL_154:
                v100 = *(char **)(a4 + 128);
                v99 = *(_QWORD *)(a4 + 136);
                if ((unint64_t)v100 >= v99)
                {
                  v102 = (char *)*v156;
                  v103 = (v100 - (_BYTE *)*v156) >> 2;
                  v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v105 = v99 - (_QWORD)v102;
                  if (v105 >> 1 > v104)
                    v104 = v105 >> 1;
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v106 = v104;
                  if (v106)
                  {
                    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v106);
                    v102 = *(char **)(a4 + 120);
                    v100 = *(char **)(a4 + 128);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v117 = (unsigned int *)&v107[4 * v103];
                  *v117 = v94;
                  v101 = v117 + 1;
                  while (v100 != v102)
                  {
                    v118 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *--v117 = v118;
                  }
                  *(_QWORD *)(a4 + 120) = v117;
                  *(_QWORD *)(a4 + 128) = v101;
                  *(_QWORD *)(a4 + 136) = &v107[4 * v106];
                  if (v102)
                    operator delete(v102);
                }
                else
                {
                  *(_DWORD *)v100 = v94;
                  v101 = v100 + 4;
                }
                *(_QWORD *)(a4 + 128) = v101;
                v119 = v158;
                if (v158 >= v94)
                  v119 = v94;
                v158 = v119;
                if (v97)
                {
                  v121 = *(char **)(a4 + 152);
                  v120 = *(_QWORD *)(a4 + 160);
                  if ((unint64_t)v121 >= v120)
                  {
                    v123 = (char *)*v154;
                    v124 = (v121 - (_BYTE *)*v154) >> 2;
                    v125 = v124 + 1;
                    if ((unint64_t)(v124 + 1) >> 62)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v126 = v120 - (_QWORD)v123;
                    if (v126 >> 1 > v125)
                      v125 = v126 >> 1;
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
                      v127 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v127 = v125;
                    if (v127)
                    {
                      v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v127);
                      v123 = *(char **)(a4 + 144);
                      v121 = *(char **)(a4 + 152);
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (float *)&v128[4 * v124];
                    *v129 = v98;
                    v122 = v129 + 1;
                    while (v121 != v123)
                    {
                      v130 = *((_DWORD *)v121 - 1);
                      v121 -= 4;
                      *((_DWORD *)v129-- - 1) = v130;
                    }
                    *(_QWORD *)(a4 + 144) = v129;
                    *(_QWORD *)(a4 + 152) = v122;
                    *(_QWORD *)(a4 + 160) = &v128[4 * v127];
                    if (v123)
                      operator delete(v123);
                  }
                  else
                  {
                    *(float *)v121 = v98;
                    v122 = v121 + 4;
                  }
                  *(_QWORD *)(a4 + 152) = v122;
                }
                continue;
              }
            }
LABEL_152:
            v64 = a2;
            goto LABEL_153;
          }
          break;
        }
      }
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  v21 = *(_QWORD *)(a4 + 32);
  v11 = *(uint64_t **)(a4 + 8);
  a1 = v150;
  if (v21 == *(_QWORD *)(a4 + 24))
  {
LABEL_214:
    v134 = v21;
    goto LABEL_230;
  }
  v131 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
  v132 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v11 >= v132)
  {
    v135 = *(uint64_t **)a4;
    v136 = ((uint64_t)v11 - *(_QWORD *)a4) >> 3;
    v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 61)
LABEL_244:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v138 = v132 - (_QWORD)v135;
    if (v138 >> 2 > v137)
      v137 = v138 >> 2;
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
      v139 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v139 = v137;
    if (v139)
    {
      v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v139);
      v135 = *(uint64_t **)a4;
      v11 = *(uint64_t **)(a4 + 8);
    }
    else
    {
      v140 = 0;
    }
    v141 = (uint64_t *)&v140[8 * v136];
    v142 = &v140[8 * v139];
    *v141 = v131;
    v133 = v141 + 1;
    while (v11 != v135)
    {
      v143 = *--v11;
      *--v141 = v143;
    }
    *(_QWORD *)a4 = v141;
    *(_QWORD *)(a4 + 8) = v133;
    *(_QWORD *)(a4 + 16) = v142;
    if (v135)
      operator delete(v135);
  }
  else
  {
    *v11 = v131;
    v133 = v11 + 1;
  }
  *(_QWORD *)(a4 + 8) = v133;
  v11 = v133;
  v21 = *(_QWORD *)(a4 + 24);
  v134 = *(_QWORD *)(a4 + 32);
LABEL_230:
  if (((v134 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v145 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
  }
  v147 = *(_DWORD *)(a1 + 224);
  if (v147 >= 1)
  {
    v148 = *(_DWORD **)(a4 + 120);
    v149 = *(_DWORD **)(a4 + 128);
    goto LABEL_239;
  }
  if (v147 < 0)
  {
    v148 = *(_DWORD **)(a4 + 120);
    v149 = *(_DWORD **)(a4 + 128);
    if (v148 != v149)
    {
      if (v158)
      {
LABEL_239:
        while (v148 != v149)
          --*v148++;
      }
    }
  }
}

void sub_220E50674(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v4 - 176);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 176;
    dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(i - 176);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x227667068);
  }
  return result;
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::thread *v2;
  std::thread *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::thread *)**a1;
  if (v2)
  {
    v4 = (std::thread *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t dmlc::ParsePair<float,float>(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, float *a4, float *a5)
{
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v6 = (unsigned __int8 *)a2;
  if (a1 == (unsigned __int8 *)a2)
  {
LABEL_9:
    result = 0;
    *a3 = a2;
  }
  else
  {
    while (1)
    {
      v8 = *a1;
      if ((v8 - 48) < 0xA)
        break;
      v9 = v8 - 43;
      v10 = v9 > 0x3A;
      v11 = (1 << v9) & 0x40000000400000DLL;
      if (!v10 && v11 != 0)
        break;
      if (++a1 == (unsigned __int8 *)a2)
        goto LABEL_9;
    }
    if (a1 == (unsigned __int8 *)a2)
    {
      *a4 = dmlc::ParseFloat<float,false>(a2, 0);
    }
    else
    {
      v14 = a1;
      while (1)
      {
        v15 = *v14;
        if ((v15 - 48) >= 0xA)
        {
          v16 = v15 - 43;
          v10 = v16 > 0x3A;
          v17 = (1 << v16) & 0x40000000400000DLL;
          if (v10 || v17 == 0)
            break;
        }
        if (++v14 == (unsigned __int8 *)a2)
        {
          v14 = (unsigned __int8 *)a2;
          break;
        }
      }
      *a4 = dmlc::ParseFloat<float,false>((uint64_t)a1, 0);
      while (v14 != v6)
      {
        v19 = *v14;
        if (v19 != 9 && v19 != 32)
        {
          if (v19 != 58)
          {
            v6 = v14;
            break;
          }
          v20 = v14 + 1;
          while (1)
          {
            if (v20 == v6)
            {
              v14 = v6;
              goto LABEL_38;
            }
            v21 = *v20;
            if ((v21 - 48) < 0xA)
              break;
            ++v14;
            ++v20;
            v22 = v21 - 43;
            v10 = v22 > 0x3A;
            v23 = (1 << v22) & 0x40000000400000DLL;
            if (!v10 && v23 != 0)
              goto LABEL_38;
          }
          v14 = v20;
LABEL_38:
          if (v14 == v6)
          {
LABEL_46:
            v25 = v6;
          }
          else
          {
            v25 = v14;
            while (1)
            {
              v26 = *v25;
              if ((v26 - 48) >= 0xA)
              {
                v27 = v26 - 43;
                v10 = v27 > 0x3A;
                v28 = (1 << v27) & 0x40000000400000DLL;
                if (v10 || v28 == 0)
                  break;
              }
              if (++v25 == v6)
                goto LABEL_46;
            }
          }
          *a3 = (uint64_t)v25;
          *a5 = dmlc::ParseFloat<float,false>((uint64_t)v14, 0);
          return 2;
        }
        ++v14;
      }
    }
    *a3 = (uint64_t)v6;
    return 1;
  }
  return result;
}

float dmlc::ParseFloat<float,false>(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  unsigned int v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  float result;
  float v13;
  uint64_t v14;
  _BYTE *v15;
  char *j;
  int v17;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  std::string *Entry;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  BOOL v40;
  uint64_t v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  float v45;
  _BOOL4 v46;
  unsigned __int8 *v47;
  char v48;
  char v49;
  uint64_t v50;

  for (i = a1 + 4; ; ++i)
  {
    v4 = *(unsigned __int8 *)(i - 4);
    if (v4 > 0x20 || ((1 << v4) & 0x100003600) == 0)
      break;
  }
  v6 = 0;
  v7 = v4 == 45 || v4 == 43;
  v8 = v7;
  if (v7)
    v9 = i + 1;
  else
    v9 = i;
  v10 = v9 + 4;
  while ((*(unsigned __int8 *)(v9 + v6 - 4) | 0x20) == aInfinity[v6])
  {
    if (++v6 == 8)
      goto LABEL_22;
  }
  v10 = i + v8 + v6 - 4;
  if ((_DWORD)v6 == 8 || (_DWORD)v6 == 3)
  {
LABEL_22:
    if (a2)
      *a2 = v10;
    v11 = v4 == 45;
    result = INFINITY;
    v13 = -INFINITY;
    goto LABEL_25;
  }
  v14 = 0;
  v15 = (_BYTE *)(i + v8 - 1);
  while ((*(unsigned __int8 *)(i + v8 + v14 - 4) | 0x20) == aNan[v14])
  {
    if (++v14 == 3)
    {
      if (*v15 == 40)
      {
        for (j = (char *)(i + v8); ; ++j)
        {
          v17 = *j;
          if ((v17 - 48) >= 0xA && v17 != 95 && (v17 & 0xFFFFFFDF) - 65 > 0x19)
            break;
        }
        v49 = 41;
        if (v17 != 41)
        {
          dmlc::LogCheckFormat<char,char>(j, &v49, &v50);
          if (v50)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./././strtonum.h");
            v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"*p == ')'", 9);
            v32 = *(char *)(v50 + 23);
            v33 = v32 >= 0 ? v50 : *(_QWORD *)v50;
            v34 = v32 >= 0 ? *(unsigned __int8 *)(v50 + 23) : *(_QWORD *)(v50 + 8);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Invalid NAN literal", 19);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v48);
            v37 = v50;
            v50 = 0;
            if (v37)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v50, v37);
          }
        }
        v15 = j + 1;
      }
      if (a2)
        *a2 = (uint64_t)v15;
      return NAN;
    }
  }
  v20 = (unsigned __int8 *)(i + v8 - 4);
  v19 = *v20;
  result = 0.0;
  if (v19 - 48 <= 9)
  {
    v21 = 0;
    do
    {
      v21 = 10 * v21 + v19 - 48;
      v22 = *++v20;
      v19 = v22;
    }
    while (v22 - 48 < 0xA);
    result = (float)(unint64_t)v21;
  }
  if (v19 == 46)
  {
    v19 = v20[1];
    if (v19 - 48 > 9)
    {
      v27 = 0.0;
      ++v20;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 1;
      do
      {
        v26 = 10 * v24 + v19 - 48;
        if (v23 < 0x13)
        {
          v25 *= 10;
          v24 = v26;
        }
        v19 = v20[v23++ + 2];
      }
      while (v19 - 48 < 0xA);
      v27 = (double)v24 / (double)v25;
      v20 += v23 + 1;
    }
    result = result + v27;
  }
  if ((v19 | 0x20) == 0x65)
  {
    v38 = v20[1];
    v39 = v20 + 2;
    v40 = v38 == 45 || v38 == 43;
    v41 = 1;
    if (v40)
      v41 = 2;
    else
      v39 = v20 + 1;
    v19 = v20[v41];
    v42 = 1.0;
    if (v19 - 48 <= 9)
    {
      v43 = 0;
      do
      {
        v43 = v19 + 10 * v43 - 48;
        v44 = *++v39;
        v19 = v44;
      }
      while (v44 - 48 < 0xA);
      if (v43 >= 0x26)
      {
        v43 = 38;
        v45 = 3.4028;
        v46 = result > 3.4028;
        if (v38 == 45)
        {
          v46 = result < 1.1755;
          v45 = 1.1755;
        }
        if (v46)
          result = v45;
      }
      v42 = 1.0;
      if (v43 >= 8)
      {
        do
        {
          v42 = v42 * 100000000.0;
          v43 -= 8;
        }
        while (v43 > 7);
      }
      for (; v43; --v43)
        v42 = v42 * 10.0;
    }
    if (v38 == 45)
      result = result / v42;
    else
      result = result * v42;
  }
  else
  {
    v39 = v20;
  }
  if ((v19 | 0x20) == 0x66)
    v47 = v39 + 1;
  else
    v47 = v39;
  if (a2)
    *a2 = (uint64_t)v47;
  v13 = -result;
  v11 = v4 == 45;
LABEL_25:
  if (v11)
    return v13;
  return result;
}

void sub_220E51018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ParseUnsignedInt<unsigned int>(unsigned __int8 *a1)
{
  unsigned int v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  unsigned __int8 *v15;
  int v16;
  _BYTE v17[2];
  uint64_t v18;
  char v19;

  while (1)
  {
    v2 = *a1;
    if (v2 > 0x20 || ((1 << v2) & 0x100003600) == 0)
      break;
    ++a1;
  }
  v19 = 1;
  if (v2 == 43)
  {
    ++a1;
  }
  else if (v2 == 45)
  {
    v19 = 0;
    ++a1;
    v17[1] = 1;
    dmlc::LogCheckFormat<BOOL,BOOL>(&v18);
    if (v18)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./././strtonum.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"sign == true", 12);
      v8 = *(char *)(v18 + 23);
      v9 = v8 >= 0 ? v18 : *(_QWORD *)v18;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v18 + 23) : *(_QWORD *)(v18 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v17);
      v12 = v18;
      v18 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, v12);
    }
  }
  v13 = *a1;
  if ((v13 - 48) > 9)
    return 0;
  LODWORD(result) = 0;
  v15 = a1 + 1;
  do
  {
    result = (v13 + 10 * result - 48);
    v16 = *v15++;
    v13 = v16;
  }
  while ((v16 - 48) < 0xA);
  return result;
}

void sub_220E511A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::LogCheckFormat<BOOL,BOOL>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E512F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(uint64_t a1, uint64_t a2)
{
  void *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  pthread_t v25[2];
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  std::exception_ptr v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24E6B72E8;
  *(_QWORD *)(a1 + 112) = &off_24E6B7348;
  v3 = (void *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 850045863;
  v4 = (std::mutex *)(a1 + 232);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 1018212795;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 1018212795;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 160) = xmmword_220F5EF80;
  *(_OWORD *)(a1 + 176) = 0u;
  v28[0] = &off_24E6B73A8;
  v28[1] = a2;
  v29 = v28;
  v26[0] = &off_24E6B7438;
  v26[1] = a2;
  v27 = v26;
  atomic_store(0, (unsigned int *)(a1 + 136));
  atomic_store(0, (unsigned __int8 *)(a1 + 140));
  atomic_store(0, (unsigned __int8 *)(a1 + 152));
  std::mutex::lock((std::mutex *)(a1 + 232));
  v30.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 504), &v30);
  std::exception_ptr::~exception_ptr(&v30);
  std::mutex::unlock(v4);
  v30.__ptr_ = v3;
  v5 = v31;
  v6 = (uint64_t)v29;
  if (!v29)
    goto LABEL_4;
  if (v29 != v28)
  {
    v6 = (*(uint64_t (**)(void))(*v29 + 16))();
LABEL_4:
    v32 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v32 = v31;
  (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v31);
LABEL_6:
  v7 = v33;
  v8 = (uint64_t)v27;
  if (!v27)
  {
LABEL_9:
    v34 = (_QWORD *)v8;
    goto LABEL_11;
  }
  if (v27 != v26)
  {
    v8 = (*(uint64_t (**)(void))(*v27 + 16))();
    goto LABEL_9;
  }
  v34 = v33;
  (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v33);
LABEL_11:
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v25[1] = 0;
  ptr = v30.__ptr_;
  v13 = v32;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
  {
LABEL_14:
    v11[5] = v13;
    goto LABEL_16;
  }
  if (v13 != v31)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    goto LABEL_14;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v31[0] + 24))(v31, v11 + 2);
LABEL_16:
  v14 = (uint64_t)v34;
  if (!v34)
  {
LABEL_19:
    v11[9] = v14;
    goto LABEL_21;
  }
  if (v34 != v33)
  {
    v14 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_19;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
LABEL_21:
  v15 = pthread_create(v25, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v25;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread((std::thread *)v25);
  if (v34 == v33)
  {
    v18 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_29;
    v18 = 5;
    v7 = v34;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v18))(v7);
LABEL_29:
  if (v32 == v31)
  {
    v19 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_34;
    v19 = 5;
    v5 = v32;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v19))(v5);
LABEL_34:
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
    goto LABEL_43;
  }
  if (v29)
  {
    v23 = 5;
LABEL_43:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  return a1;
}

void sub_220E51730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, std::thread a11, uint64_t a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int16 *a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v33 = (_QWORD *)v30[5];
  if (v33 == v31)
  {
    v34 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
    v31 = (_QWORD *)v30[5];
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v34))(v31);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v30, 0);
  MEMORY[0x227667068](v30, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](&a12, 0);
  MEMORY[0x227667068](v29, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(&a23);
  v35 = a18;
  if (a18 == &a13)
  {
    v36 = 4;
    v35 = &a13;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_11:
  v37 = a22;
  if (a22 == &a19)
  {
    v38 = 4;
    v37 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_16:
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(v28);
  *v27 = off_24E6B72A0;
  a10 = v27 + 2;
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(uint64_t a1)
{
  dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(a1);
  JUMPOUT(0x227667068);
}

void sub_220E5192C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F1C40C5550835);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned int,float>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::BeforeFirst(a1 + 112);
}

BOOL dmlc::data::ThreadedParser<unsigned int,float>::Next(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  std::condition_variable *v6;
  unsigned int v7;
  unsigned int i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[4];

  v2 = (_QWORD *)(a1 + 512);
  v3 = a1 + 112;
  v4 = (std::mutex *)(a1 + 168);
  v5 = (_QWORD *)(a1 + 456);
  v6 = (std::condition_variable *)(a1 + 304);
  v7 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    v9 = v7;
    v10 = v7 <= i ? i : v7;
    v11 = (176 * v7) | 8;
    while (v10 != v9)
    {
      *(_DWORD *)(a1 + 8) = ++v9;
      v12 = **(_QWORD **)(a1 + 512);
      v13 = *(_QWORD *)(v12 + v11) - *(_QWORD *)(v12 + v11 - 8);
      v11 += 176;
      if (v13 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,float>::GetBlock(v18, (uint64_t *)(v12 + v11 - 184));
        v15 = v18[1];
        *(_OWORD *)(a1 + 40) = v18[0];
        *(_OWORD *)(a1 + 56) = v15;
        v16 = v18[3];
        *(_OWORD *)(a1 + 72) = v18[2];
        *(_OWORD *)(a1 + 88) = v16;
        v10 = v9 - 1;
        return v10 < i;
      }
    }
    if (*v2)
    {
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(v3);
      std::mutex::lock(v4);
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v5, v2);
      *(_QWORD *)(a1 + 512) = 0;
      if (*(_DWORD *)(a1 + 300))
      {
        v14 = atomic_load((unsigned __int8 *)(a1 + 152));
        std::mutex::unlock(v4);
        if ((v14 & 1) == 0)
          std::condition_variable::notify_one(v6);
      }
      else
      {
        std::mutex::unlock(v4);
      }
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(v3);
    }
    if (!dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(v3, v2))
      break;
    v7 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    i = -1171354717 * ((*(_QWORD *)(*(_QWORD *)(a1 + 512) + 8) - **(_QWORD **)(a1 + 512)) >> 4);
  }
  return v10 < i;
}

void sub_220E51AD0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::BytesRead(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104));
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::ParseNext()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/parser.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"cannot call ParseNext", 21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220E51B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E51B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E51D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;

  v2 = (_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((_QWORD *)(a1 + 344), v2);
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v3 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v3 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  }
  return dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(a1, v2);
}

void sub_220E51E40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E51EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E51F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E51F3CLL);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E524E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Next(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 v16;
  _BOOL4 v17;
  unsigned __int8 v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  std::unique_lock<std::mutex> __lk;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load(v2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
  }
  v12 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v12 + 1;
  v13 = *(_QWORD *)(a1 + 336);
  if (v13)
  {
LABEL_9:
    *(_DWORD *)(a1 + 184) = v12;
  }
  else
  {
    while (1)
    {
      v14 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v14 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v13 = *(_QWORD *)(a1 + 336);
      if (v13)
      {
        v12 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_9;
      }
    }
    v13 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v13)
    {
      v19 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v19 & 1) == 0)
      {
        v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_18;
    }
  }
  v15 = *(_QWORD *)(a1 + 328);
  *a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF));
  *(_QWORD *)(a1 + 328) = v15 + 1;
  *(_QWORD *)(a1 + 336) = v13 - 1;
  if (v15 + 1 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 304));
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v16 = atomic_load((unsigned __int8 *)(a1 + 40));
    v17 = (v16 & 1) == 0;
  }
  else
  {
    v17 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v17)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_18:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E52740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E52A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E52A3CLL);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B73A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B73A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *a2;
  v4 = (_QWORD *)**a2;
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *v3 = v4;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v4);
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B7438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B7438;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned int,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned int,float> *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B7348;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E52E90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void **v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8));
      v6 = *(_QWORD *)(v5 + 8 * (v4 & 0x1FF));
      if (v6)
      {
        v15 = *(void ***)(v5 + 8 * (v4 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
        MEMORY[0x227667068](v6, 0x20C40960023A9);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
      v10 = *(_QWORD *)(v9 + 8 * (v8 & 0x1FF));
      if (v10)
      {
        v15 = *(void ***)(v9 + 8 * (v8 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
        MEMORY[0x227667068](v10, 0x20C40960023A9);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 288);
  if (v14)
  {
    v15 = *(void ***)(a1 + 288);
    std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
    MEMORY[0x227667068](v14, 0x20C40960023A9);
    *(_QWORD *)(a1 + 288) = 0;
  }
}

uint64_t dmlc::data::ThreadedParser<unsigned int,float>::~ThreadedParser(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &off_24E6B72E8;
  v2 = a1 + 112;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::Destroy(a1 + 112);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 512);
  if (v4)
  {
    v6 = *(void ***)(a1 + 512);
    std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    MEMORY[0x227667068](v4, 0x20C40960023A9);
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>>::~ThreadedIter(v2);
  *(_QWORD *)a1 = off_24E6B72A0;
  v6 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

void sub_220E531A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = off_24E6B72A0;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7568;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)a1 = off_24E6B75B8;
  v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E53258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(_QWORD *)v10 = off_24E6B75B8;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibSVMParser<unsigned long long,float>::~LibSVMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B74B8;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::LibSVMParser<unsigned long long,float>::~LibSVMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B74B8;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E53320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
}

BOOL dmlc::data::ParserImpl<unsigned long long,float>::Next(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[4];

  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v5 = v4 <= i ? i : v4;
    v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(_QWORD *)(a1 + 8) = ++v4;
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(v7 + v6) - *(_QWORD *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v4 = 0;
    i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,float>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,float>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 112);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21)
        v13 = 0x1642C8590B21642;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1642C8590B21642)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 23 * v13;
      v15 = (uint64_t *)operator new(184 * v13);
      v16 = &v15[23 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[23 * (int)v6];
      v18 = 184 * (int)v6 - 184 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(_QWORD *)(v8 + v21 - 168);
          *(_QWORD *)(v22 - 184) = 0;
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(_QWORD *)(v8 + v21 - 144);
          *(_QWORD *)(v22 - 160) = 0;
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(_QWORD *)(v8 + v21 - 120);
          *(_QWORD *)(v22 - 136) = 0;
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(_QWORD *)(v8 + v21 - 96);
          *(_QWORD *)(v22 - 112) = 0;
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(_QWORD *)(v8 + v21 - 72);
          *(_QWORD *)(v22 - 88) = 0;
          *(_QWORD *)(v22 - 80) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(_QWORD *)(v8 + v21 - 48);
          *(_QWORD *)(v22 - 64) = 0;
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(_QWORD *)(v8 + v21 - 24);
          *(_QWORD *)(v22 - 40) = 0;
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 184 * v10;
    v29 = 184 * (int)v6 - 8 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[23 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 120) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E53A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::LibSVMParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  const char *i;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  float v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned __int8 *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  _DWORD *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  float *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  std::string *Entry;
  _QWORD *v145;
  _QWORD *v146;
  int v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  void **v153;
  void **v154;
  void **v155;
  void **v156;
  _QWORD *v157;
  unint64_t v158;
  int v159;
  int v160;
  const char *v161;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v156 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v154 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v153 = (void **)(a4 + 48);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  v151 = (void **)(a4 + 72);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  v155 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    v158 = -1;
    goto LABEL_214;
  }
  v152 = v10;
  v150 = a1;
  v157 = (_QWORD *)(a4 + 40);
  v158 = -1;
  do
  {
    v22 = a2;
    v23 = a2 + 1;
    while (v23 != a3)
    {
      v25 = *v23++;
      v24 = v25;
      v26 = v25 == 13 || v24 == 10;
      if (v26)
      {
        v27 = v23 - 2;
        a2 = v23 - 1;
        goto LABEL_24;
      }
    }
    v27 = a3 - 1;
    a2 = a3;
LABEL_24:
    v161 = 0;
    v160 = 0;
    v159 = 0;
    if (v22 != a2)
    {
      while (1)
      {
        v28 = *v22;
        if (v28 != 9 && v28 != 32)
          break;
        v26 = v22++ == v27;
        if (v26)
        {
          v22 = a2;
          goto LABEL_32;
        }
      }
      if (v28 == 35)
        v22 = a2;
    }
LABEL_32:
    v29 = dmlc::ParsePair<float,float>(v22, (uint64_t)a2, (uint64_t *)&v161, (float *)&v160, (float *)&v159);
    if (v29)
    {
      if (v29 == 2)
      {
        v31 = *(char **)(a4 + 56);
        v30 = *(_QWORD *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v153;
          v34 = (v31 - (_BYTE *)*v153) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            v33 = *(char **)(a4 + 48);
            v31 = *(char **)(a4 + 56);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v159;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a4 + 48) = v39;
          *(_QWORD *)(a4 + 56) = v32;
          *(_QWORD *)(a4 + 64) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = v159;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a4 + 56) = v32;
      }
      v41 = *(char **)(a4 + 32);
      if (v41 != *(char **)(a4 + 24))
      {
        v42 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
        v44 = *(uint64_t **)(a4 + 8);
        v43 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v44 >= v43)
        {
          v46 = *(uint64_t **)a4;
          v47 = ((uint64_t)v44 - *(_QWORD *)a4) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_244;
          v49 = v43 - (_QWORD)v46;
          if (v49 >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v50);
            v46 = *(uint64_t **)a4;
            v44 = *(uint64_t **)(a4 + 8);
          }
          else
          {
            v51 = 0;
          }
          v52 = (uint64_t *)&v51[8 * v47];
          *v52 = v42;
          v45 = v52 + 1;
          while (v44 != v46)
          {
            v53 = *--v44;
            *--v52 = v53;
          }
          *(_QWORD *)a4 = v52;
          *(_QWORD *)(a4 + 8) = v45;
          *(_QWORD *)(a4 + 16) = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v44 = v42;
          v45 = v44 + 1;
        }
        *(_QWORD *)(a4 + 8) = v45;
        v41 = *(char **)(a4 + 32);
      }
      if ((unint64_t)v41 >= *v157)
      {
        v55 = (char *)*v155;
        v56 = (v41 - (_BYTE *)*v155) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v58 = *v157 - (_QWORD)v55;
        if (v58 >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v157, v59);
          v55 = *(char **)(a4 + 24);
          v41 = *(char **)(a4 + 32);
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[4 * v56];
        *(_DWORD *)v61 = v160;
        v54 = v61 + 4;
        while (v41 != v55)
        {
          v62 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v61;
        *(_QWORD *)(a4 + 32) = v54;
        *(_QWORD *)(a4 + 40) = &v60[4 * v59];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_DWORD *)v41 = v160;
        v54 = v41 + 4;
      }
      *(_QWORD *)(a4 + 32) = v54;
      for (i = v161; i != (const char *)a3; ++i)
      {
        if (*i != 32)
          goto LABEL_90;
      }
      i = (const char *)a3;
LABEL_90:
      if (i != (const char *)a2)
      {
        if (!strncmp(i, "qid:", 4uLL))
        {
          v65 = atoll(i + 4);
          v66 = v65;
          v64 = a2;
          if (i + 4 != (const char *)a2)
          {
            v64 = (unsigned __int8 *)(i + 4);
            while (1)
            {
              v67 = *v64;
              if ((v67 - 48) >= 0xA)
              {
                v68 = v67 - 43;
                v69 = v68 > 0x3A;
                v70 = (1 << v68) & 0x40000000400000DLL;
                if (v69 || v70 == 0)
                  break;
              }
              v26 = v64++ == v27;
              if (v26)
              {
                v64 = v27 + 1;
                break;
              }
            }
          }
          v73 = *(uint64_t **)(a4 + 80);
          v72 = *(_QWORD *)(a4 + 88);
          if ((unint64_t)v73 >= v72)
          {
            v75 = (uint64_t *)*v151;
            v76 = ((char *)v73 - (_BYTE *)*v151) >> 3;
            v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v78 = v72 - (_QWORD)v75;
            if (v78 >> 2 > v77)
              v77 = v78 >> 2;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
              v79 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v79 = v77;
            if (v79)
            {
              v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 88, v79);
              v75 = *(uint64_t **)(a4 + 72);
              v73 = *(uint64_t **)(a4 + 80);
            }
            else
            {
              v80 = 0;
            }
            v81 = (uint64_t *)&v80[8 * v76];
            *v81 = v66;
            v74 = v81 + 1;
            while (v73 != v75)
            {
              v82 = *--v73;
              *--v81 = v82;
            }
            *(_QWORD *)(a4 + 72) = v81;
            *(_QWORD *)(a4 + 80) = v74;
            *(_QWORD *)(a4 + 88) = &v80[8 * v79];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v73 = v65;
            v74 = v73 + 1;
          }
          *(_QWORD *)(a4 + 80) = v74;
        }
        else
        {
          v64 = (unsigned __int8 *)i;
        }
        while (2)
        {
          if (v64 != a2)
          {
            v83 = v64 - 1;
            while (1)
            {
              v84 = v83[1];
              if (v84 != 9 && v84 != 32)
                break;
              ++v64;
              if (++v83 == v27)
              {
                v85 = a2;
                goto LABEL_130;
              }
            }
            if (v84 == 35)
              v85 = a2;
            else
              v85 = v64;
            while (1)
            {
LABEL_130:
              if (v85 == a2)
                goto LABEL_209;
              v86 = *v85;
              if ((v86 - 48) < 0xA)
                break;
              v87 = v86 - 43;
              v69 = v87 > 0x3A;
              v88 = (1 << v87) & 0x40000000400000DLL;
              if (!v69 && v88 != 0)
                break;
              ++v85;
            }
            if (v85 == a2)
            {
              v94 = dmlc::ParseUnsignedInt<unsigned long long>(a2);
            }
            else
            {
              v64 = v85;
              while (1)
              {
                v90 = *v64;
                if ((v90 - 48) >= 0xA)
                {
                  v91 = v90 - 43;
                  v69 = v91 > 0x3A;
                  v92 = (1 << v91) & 0x40000000400000DLL;
                  if (v69 || v92 == 0)
                    break;
                }
                if (++v64 == a2)
                {
                  v64 = a2;
                  break;
                }
              }
              v94 = dmlc::ParseUnsignedInt<unsigned long long>(v85);
              if (v64 != a2)
              {
                v95 = v64 + 1;
                while (1)
                {
                  v96 = *v64;
                  if (v96 != 9 && v96 != 32)
                    break;
                  ++v64;
                  ++v95;
                  if (v64 == a2)
                    goto LABEL_152;
                }
                if (v96 == 58)
                {
                  while (1)
                  {
                    if (v95 == a2)
                    {
                      v64 = a2;
                      goto LABEL_171;
                    }
                    v108 = *v95;
                    if ((v108 - 48) < 0xA)
                      break;
                    ++v64;
                    ++v95;
                    v109 = v108 - 43;
                    v69 = v109 > 0x3A;
                    v110 = (1 << v109) & 0x40000000400000DLL;
                    if (!v69 && v110 != 0)
                      goto LABEL_171;
                  }
                  v64 = v95;
LABEL_171:
                  v112 = a2;
                  if (v64 != a2)
                  {
                    v112 = v64;
                    while (1)
                    {
                      v113 = *v112;
                      if ((v113 - 48) >= 0xA)
                      {
                        v114 = v113 - 43;
                        v69 = v114 > 0x3A;
                        v115 = (1 << v114) & 0x40000000400000DLL;
                        if (v69 || v115 == 0)
                          break;
                      }
                      if (++v112 == a2)
                      {
                        v112 = a2;
                        break;
                      }
                    }
                  }
                  v161 = (const char *)v112;
                  v98 = dmlc::ParseFloat<float,false>((uint64_t)v64, 0);
                  v97 = 1;
                  v64 = v112;
                  goto LABEL_154;
                }
LABEL_153:
                v97 = 0;
                v161 = (const char *)v64;
                v98 = 0.0;
LABEL_154:
                v100 = *(unint64_t **)(a4 + 128);
                v99 = *(_QWORD *)(a4 + 136);
                if ((unint64_t)v100 >= v99)
                {
                  v102 = (unint64_t *)*v156;
                  v103 = ((char *)v100 - (_BYTE *)*v156) >> 3;
                  v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 61)
                    std::vector<void *>::__throw_length_error[abi:ne180100]();
                  v105 = v99 - (_QWORD)v102;
                  if (v105 >> 2 > v104)
                    v104 = v105 >> 2;
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
                    v106 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v106 = v104;
                  if (v106)
                  {
                    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v106);
                    v102 = *(unint64_t **)(a4 + 120);
                    v100 = *(unint64_t **)(a4 + 128);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v117 = (unint64_t *)&v107[8 * v103];
                  *v117 = v94;
                  v101 = v117 + 1;
                  while (v100 != v102)
                  {
                    v118 = *--v100;
                    *--v117 = v118;
                  }
                  *(_QWORD *)(a4 + 120) = v117;
                  *(_QWORD *)(a4 + 128) = v101;
                  *(_QWORD *)(a4 + 136) = &v107[8 * v106];
                  if (v102)
                    operator delete(v102);
                }
                else
                {
                  *v100 = v94;
                  v101 = v100 + 1;
                }
                *(_QWORD *)(a4 + 128) = v101;
                v119 = v158;
                if (v158 >= v94)
                  v119 = v94;
                v158 = v119;
                if (v97)
                {
                  v121 = *(char **)(a4 + 152);
                  v120 = *(_QWORD *)(a4 + 160);
                  if ((unint64_t)v121 >= v120)
                  {
                    v123 = (char *)*v154;
                    v124 = (v121 - (_BYTE *)*v154) >> 2;
                    v125 = v124 + 1;
                    if ((unint64_t)(v124 + 1) >> 62)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v126 = v120 - (_QWORD)v123;
                    if (v126 >> 1 > v125)
                      v125 = v126 >> 1;
                    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
                      v127 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v127 = v125;
                    if (v127)
                    {
                      v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v127);
                      v123 = *(char **)(a4 + 144);
                      v121 = *(char **)(a4 + 152);
                    }
                    else
                    {
                      v128 = 0;
                    }
                    v129 = (float *)&v128[4 * v124];
                    *v129 = v98;
                    v122 = v129 + 1;
                    while (v121 != v123)
                    {
                      v130 = *((_DWORD *)v121 - 1);
                      v121 -= 4;
                      *((_DWORD *)v129-- - 1) = v130;
                    }
                    *(_QWORD *)(a4 + 144) = v129;
                    *(_QWORD *)(a4 + 152) = v122;
                    *(_QWORD *)(a4 + 160) = &v128[4 * v127];
                    if (v123)
                      operator delete(v123);
                  }
                  else
                  {
                    *(float *)v121 = v98;
                    v122 = v121 + 4;
                  }
                  *(_QWORD *)(a4 + 152) = v122;
                }
                continue;
              }
            }
LABEL_152:
            v64 = a2;
            goto LABEL_153;
          }
          break;
        }
      }
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  v21 = *(_QWORD *)(a4 + 32);
  v11 = *(uint64_t **)(a4 + 8);
  a1 = v150;
  if (v21 == *(_QWORD *)(a4 + 24))
  {
LABEL_214:
    v134 = v21;
    goto LABEL_230;
  }
  v131 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
  v132 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v11 >= v132)
  {
    v135 = *(uint64_t **)a4;
    v136 = ((uint64_t)v11 - *(_QWORD *)a4) >> 3;
    v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 61)
LABEL_244:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v138 = v132 - (_QWORD)v135;
    if (v138 >> 2 > v137)
      v137 = v138 >> 2;
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
      v139 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v139 = v137;
    if (v139)
    {
      v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v152, v139);
      v135 = *(uint64_t **)a4;
      v11 = *(uint64_t **)(a4 + 8);
    }
    else
    {
      v140 = 0;
    }
    v141 = (uint64_t *)&v140[8 * v136];
    v142 = &v140[8 * v139];
    *v141 = v131;
    v133 = v141 + 1;
    while (v11 != v135)
    {
      v143 = *--v11;
      *--v141 = v143;
    }
    *(_QWORD *)a4 = v141;
    *(_QWORD *)(a4 + 8) = v133;
    *(_QWORD *)(a4 + 16) = v142;
    if (v135)
      operator delete(v135);
  }
  else
  {
    *v11 = v131;
    v133 = v11 + 1;
  }
  *(_QWORD *)(a4 + 8) = v133;
  v11 = v133;
  v21 = *(_QWORD *)(a4 + 24);
  v134 = *(_QWORD *)(a4 + 32);
LABEL_230:
  if (((v134 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/./libsvm_parser.h");
    v145 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v161);
    v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v161);
  }
  v147 = *(_DWORD *)(a1 + 232);
  if (v147 >= 1)
  {
    v148 = *(_QWORD **)(a4 + 120);
    v149 = *(_QWORD **)(a4 + 128);
    goto LABEL_239;
  }
  if (v147 < 0)
  {
    v148 = *(_QWORD **)(a4 + 120);
    v149 = *(_QWORD **)(a4 + 128);
    if (v148 != v149)
    {
      if (v158)
      {
LABEL_239:
        while (v148 != v149)
          --*v148++;
      }
    }
  }
}

void sub_220E545C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v4 - 184);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::ParseUnsignedInt<unsigned long long>(unsigned __int8 *a1)
{
  unsigned int v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  unsigned __int8 *v15;
  unsigned int v16;
  _BYTE v17[2];
  uint64_t v18;
  char v19;

  while (1)
  {
    v2 = *a1;
    if (v2 > 0x20 || ((1 << v2) & 0x100003600) == 0)
      break;
    ++a1;
  }
  v19 = 1;
  if (v2 == 43)
  {
    ++a1;
  }
  else if (v2 == 45)
  {
    v19 = 0;
    ++a1;
    v17[1] = 1;
    dmlc::LogCheckFormat<BOOL,BOOL>(&v18);
    if (v18)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/./././strtonum.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v17);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"sign == true", 12);
      v8 = *(char *)(v18 + 23);
      v9 = v8 >= 0 ? v18 : *(_QWORD *)v18;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v18 + 23) : *(_QWORD *)(v18 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v17);
      v12 = v18;
      v18 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v18, v12);
    }
  }
  v13 = *a1;
  if (v13 - 48 > 9)
    return 0;
  result = 0;
  v15 = a1 + 1;
  do
  {
    result = 10 * result + v13 - 48;
    v16 = *v15++;
    v13 = v16;
  }
  while (v16 - 48 < 0xA);
  return result;
}

void sub_220E549B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(uint64_t a1, uint64_t a2)
{
  void *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__thread_struct *v10;
  _QWORD *v11;
  void *ptr;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::thread v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  pthread_t v25[2];
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  std::exception_ptr v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24E6B7600;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = &off_24E6B7660;
  v3 = (void *)(a1 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 240) = 850045863;
  v4 = (std::mutex *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 1018212795;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 1018212795;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 168) = xmmword_220F5EF80;
  v28[0] = &off_24E6B76C0;
  v28[1] = a2;
  v29 = v28;
  v26[0] = &off_24E6B7750;
  v26[1] = a2;
  v27 = v26;
  atomic_store(0, (unsigned int *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 148));
  atomic_store(0, (unsigned __int8 *)(a1 + 160));
  std::mutex::lock((std::mutex *)(a1 + 240));
  v30.__ptr_ = 0;
  std::exception_ptr::operator=((std::exception_ptr *)(a1 + 512), &v30);
  std::exception_ptr::~exception_ptr(&v30);
  std::mutex::unlock(v4);
  v30.__ptr_ = v3;
  v5 = v31;
  v6 = (uint64_t)v29;
  if (!v29)
    goto LABEL_4;
  if (v29 != v28)
  {
    v6 = (*(uint64_t (**)(void))(*v29 + 16))();
LABEL_4:
    v32 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v32 = v31;
  (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v31);
LABEL_6:
  v7 = v33;
  v8 = (uint64_t)v27;
  if (!v27)
  {
LABEL_9:
    v34 = (_QWORD *)v8;
    goto LABEL_11;
  }
  if (v27 != v26)
  {
    v8 = (*(uint64_t (**)(void))(*v27 + 16))();
    goto LABEL_9;
  }
  v34 = v33;
  (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v33);
LABEL_11:
  v9 = (_QWORD *)operator new();
  v10 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v10);
  v11 = (_QWORD *)operator new();
  v25[1] = 0;
  ptr = v30.__ptr_;
  v13 = v32;
  *v11 = v10;
  v11[1] = ptr;
  if (!v13)
  {
LABEL_14:
    v11[5] = v13;
    goto LABEL_16;
  }
  if (v13 != v31)
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    goto LABEL_14;
  }
  v11[5] = v11 + 2;
  (*(void (**)(_QWORD *, _QWORD *))(v31[0] + 24))(v31, v11 + 2);
LABEL_16:
  v14 = (uint64_t)v34;
  if (!v34)
  {
LABEL_19:
    v11[9] = v14;
    goto LABEL_21;
  }
  if (v34 != v33)
  {
    v14 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_19;
  }
  v11[9] = v11 + 6;
  (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
LABEL_21:
  v15 = pthread_create(v25, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>, v11);
  if (v15)
  {
    std::__throw_system_error(v15, "thread constructor failed");
    __break(1u);
  }
  v16.__t_ = (std::__libcpp_thread_t)v25;
  dmlc::ScopedThread::ScopedThread(v9, v16);
  v17 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v9;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  std::thread::~thread((std::thread *)v25);
  if (v34 == v33)
  {
    v18 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_29;
    v18 = 5;
    v7 = v34;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v18))(v7);
LABEL_29:
  if (v32 == v31)
  {
    v19 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_34;
    v19 = 5;
    v5 = v32;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v19))(v5);
LABEL_34:
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
    goto LABEL_43;
  }
  if (v29)
  {
    v23 = 5;
LABEL_43:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  return a1;
}

void sub_220E54DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, std::thread a11, uint64_t a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int16 *a18, char a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v33 = (_QWORD *)v30[5];
  if (v33 == v31)
  {
    v34 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
    v31 = (_QWORD *)v30[5];
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v34))(v31);
LABEL_6:
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v30, 0);
  MEMORY[0x227667068](v30, 0x1020C40EDC32A07);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](&a12, 0);
  MEMORY[0x227667068](v29, 0xA1C40BD48D6D6);
  dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}::~function(&a23);
  v35 = a18;
  if (a18 == &a13)
  {
    v36 = 4;
    v35 = &a13;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_11:
  v37 = a22;
  if (a22 == &a19)
  {
    v38 = 4;
    v37 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_16:
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(v28);
  *v27 = off_24E6B75B8;
  a10 = v27 + 3;
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(uint64_t a1)
{
  dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(a1);
  JUMPOUT(0x227667068);
}

void sub_220E54FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F1C40BB2A5544);
  _Unwind_Resume(a1);
}

void dmlc::data::ThreadedParser<unsigned long long,float>::BeforeFirst(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::BeforeFirst(a1 + 120);
}

BOOL dmlc::data::ThreadedParser<unsigned long long,float>::Next(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  std::condition_variable *v16;
  _OWORD v17[4];

  v2 = (_QWORD *)(a1 + 520);
  v3 = a1 + 120;
  v4 = (std::mutex *)(a1 + 176);
  v5 = (_QWORD *)(a1 + 464);
  v16 = (std::condition_variable *)(a1 + 312);
  v6 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v8 = v6 <= i ? i : v6;
    v9 = 184 * v6 + 8;
    while (v8 != v6)
    {
      *(_QWORD *)(a1 + 8) = ++v6;
      v10 = **(_QWORD **)(a1 + 520);
      v11 = *(_QWORD *)(v10 + v9) - *(_QWORD *)(v10 + v9 - 8);
      v9 += 184;
      if (v11 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,float>::GetBlock(v17, (uint64_t *)(v10 + v9 - 192));
        v13 = v17[1];
        *(_OWORD *)(a1 + 48) = v17[0];
        *(_OWORD *)(a1 + 64) = v13;
        v14 = v17[3];
        *(_OWORD *)(a1 + 80) = v17[2];
        *(_OWORD *)(a1 + 96) = v14;
        v8 = v6 - 1;
        return v8 < i;
      }
    }
    if (*v2)
    {
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(v3);
      std::mutex::lock(v4);
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v5, v2);
      *(_QWORD *)(a1 + 520) = 0;
      if (*(_DWORD *)(a1 + 308))
      {
        v12 = atomic_load((unsigned __int8 *)(a1 + 160));
        std::mutex::unlock(v4);
        if ((v12 & 1) == 0)
          std::condition_variable::notify_one(v16);
      }
      else
      {
        std::mutex::unlock(v4);
      }
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(v3);
    }
    if (!dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(v3, v2))break;
    v6 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 520) + 8) - **(_QWORD **)(a1 + 520)) >> 3);
  }
  return v8 < i;
}

void sub_220E55184(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::BytesRead(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112));
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::ParseNext()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/parser.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"cannot call ParseNext", 21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220E55204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(uint64_t a1)
{
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(a1);
  JUMPOUT(0x227667068);
}

void sub_220E55250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10A1C40326A7956);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::BeforeFirst(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  char v15;
  std::unique_lock<std::mutex> __lk;

  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (*(_QWORD *)(a1 + 288))
  {
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((_QWORD *)(a1 + 344), (_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  v2 = atomic_load((unsigned int *)(a1 + 24));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned int *)(a1 + 24));
    v3 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v3 & 1) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    v7 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v7 & 1) != 0)
    {
      v8 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      dmlc::LogMessageFatal::Entry::Init(v8, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !producer_sig_processed_.load(std::memory_order_acquire)", 70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    }
    v11 = atomic_load((unsigned __int8 *)(a1 + 28));
    if ((v11 & 1) == 0)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
        v12 = atomic_load((unsigned __int8 *)(a1 + 28));
      }
      while ((v12 & 1) == 0);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 28));
    if (*(_DWORD *)(a1 + 188))
    {
      v13 = atomic_load((unsigned __int8 *)(a1 + 40));
      v14 = (v13 & 1) == 0;
    }
    else
    {
      v14 = 0;
    }
    std::unique_lock<std::mutex>::unlock(&__lk);
    if (v14)
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_220E55414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;

  v2 = (_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 288))
  {
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
    std::mutex::lock((std::mutex *)(a1 + 56));
    std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((_QWORD *)(a1 + 344), v2);
    *(_QWORD *)(a1 + 288) = 0;
    if (*(_DWORD *)(a1 + 188))
    {
      v3 = atomic_load((unsigned __int8 *)(a1 + 40));
      std::mutex::unlock((std::mutex *)(a1 + 56));
      if ((v3 & 1) == 0)
        std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 56));
    }
    dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  }
  return dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(a1, v2);
}

void sub_220E554F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Value(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  result = *(_QWORD *)(a1 + 288);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: out_data_ != NULL", 31);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Calling Value at beginning or end?", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    return *(_QWORD *)(a1 + 288);
  }
  return result;
}

void sub_220E55590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(uint64_t a1)
{
  std::mutex *v2;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;

  v5.__ptr_ = 0;
  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if (*(_QWORD *)(a1 + 392))
    std::exception_ptr::operator=(&v5, (const std::exception_ptr *)(a1 + 392));
  std::mutex::unlock(v2);
  if (v5.__ptr_)
  {
    std::exception_ptr::exception_ptr(&v4, &v5);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else
  {
    std::exception_ptr::~exception_ptr(&v5);
  }
}

void sub_220E55620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::exception_ptr a14, std::exception_ptr a15)
{
  void *v17;
  std::string *Entry;
  _QWORD *v19;
  const char *v20;
  size_t v21;

  std::exception_ptr::~exception_ptr(&a14);
  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&a13);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
    __cxa_end_catch();
    JUMPOUT(0x220E555F0);
  }
  std::exception_ptr::~exception_ptr(&a15);
  _Unwind_Resume(a1);
}

void std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_220E55B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Next(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 v16;
  _BOOL4 v17;
  unsigned __int8 v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  std::unique_lock<std::mutex> __lk;

  v2 = (unsigned int *)(a1 + 24);
  v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
    return 0;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 56);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (atomic_load(v2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: producer_sig_.load(std::memory_order_acquire) == kProduce", 71);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Make sure you call BeforeFirst not inconcurrent with Next!", 58);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
  }
  v12 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v12 + 1;
  v13 = *(_QWORD *)(a1 + 336);
  if (v13)
  {
LABEL_9:
    *(_DWORD *)(a1 + 184) = v12;
  }
  else
  {
    while (1)
    {
      v14 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v14 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 240), &__lk);
      v13 = *(_QWORD *)(a1 + 336);
      if (v13)
      {
        v12 = *(_DWORD *)(a1 + 184) - 1;
        goto LABEL_9;
      }
    }
    v13 = *(_QWORD *)(a1 + 336);
    --*(_DWORD *)(a1 + 184);
    if (!v13)
    {
      v19 = atomic_load((unsigned __int8 *)(a1 + 40));
      if ((v19 & 1) == 0)
      {
        v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/threadediter.h");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: produce_end_.load(std::memory_order_acquire)", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
      }
      std::unique_lock<std::mutex>::unlock(&__lk);
      dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
      v4 = 0;
      goto LABEL_18;
    }
  }
  v15 = *(_QWORD *)(a1 + 328);
  *a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF));
  *(_QWORD *)(a1 + 328) = v15 + 1;
  *(_QWORD *)(a1 + 336) = v13 - 1;
  if (v15 + 1 >= 0x400)
  {
    operator delete(**(void ***)(a1 + 304));
    *(_QWORD *)(a1 + 304) += 8;
    *(_QWORD *)(a1 + 328) -= 512;
  }
  if (*(_DWORD *)(a1 + 188))
  {
    v16 = atomic_load((unsigned __int8 *)(a1 + 40));
    v17 = (v16 & 1) == 0;
  }
  else
  {
    v17 = 0;
  }
  std::unique_lock<std::mutex>::unlock(&__lk);
  if (v17)
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::ThrowExceptionIfSet(a1);
  v4 = 1;
LABEL_18:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  return v4;
}

void sub_220E55DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::mutex *a14, char a15)
{
  if (a15)
    std::mutex::unlock(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Init(std::function<BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unsigned __int8 v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::unique_lock<std::mutex> __lk;
  uint64_t v23;
  uint64_t *v24;

  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    v23 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 56);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 56));
    ++*(_DWORD *)(v4 + 188);
    while (!atomic_load((unsigned int *)(v4 + 24)))
    {
      v6 = atomic_load((unsigned __int8 *)(v4 + 40));
      if ((v6 & 1) == 0 && (*(_QWORD *)(v4 + 336) < *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 384)))
        break;
      std::condition_variable::wait((std::condition_variable *)(v4 + 192), &__lk);
    }
    --*(_DWORD *)(v4 + 188);
    v8 = atomic_load((unsigned int *)(v4 + 24));
    if (v8)
    {
      v9 = atomic_load((unsigned int *)(v4 + 24));
      if (v9 == 1)
      {
        v10 = a1[9];
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if (*(_QWORD *)(v4 + 336))
        {
          v11 = *(_QWORD *)(v4 + 328);
          do
          {
            std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back((_QWORD *)(v4 + 344), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 304) + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF)));
            v12 = *(_QWORD *)(v4 + 336) - 1;
            v11 = *(_QWORD *)(v4 + 328) + 1;
            *(_QWORD *)(v4 + 328) = v11;
            *(_QWORD *)(v4 + 336) = v12;
            if (v11 >= 0x400)
            {
              operator delete(**(void ***)(v4 + 304));
              *(_QWORD *)(v4 + 304) += 8;
              v12 = *(_QWORD *)(v4 + 336);
              v11 = *(_QWORD *)(v4 + 328) - 512;
              *(_QWORD *)(v4 + 328) = v11;
            }
          }
          while (v12);
        }
        atomic_store(0, (unsigned __int8 *)(v4 + 40));
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(0, (unsigned int *)(v4 + 24));
        std::unique_lock<std::mutex>::unlock(&__lk);
        v13 = 2;
      }
      else
      {
        v13 = 1;
        atomic_store(1u, (unsigned __int8 *)(v4 + 28));
        atomic_store(1u, (unsigned __int8 *)(v4 + 40));
        std::unique_lock<std::mutex>::unlock(&__lk);
      }
      std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
    }
    else
    {
      v14 = *(_QWORD *)(v4 + 384);
      if (v14
        && (v15 = *(void ***)(v4 + 352),
            v16 = *(_QWORD *)(v4 + 376),
            v23 = (*(_QWORD **)((char *)v15 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)))[v16 & 0x1FF],
            ++v16,
            *(_QWORD *)(v4 + 376) = v16,
            *(_QWORD *)(v4 + 384) = v14 - 1,
            v16 >= 0x400))
      {
        operator delete(*v15);
        v13 = 0;
        *(_QWORD *)(v4 + 352) += 8;
        *(_QWORD *)(v4 + 376) -= 512;
      }
      else
      {
        v13 = 0;
      }
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (!v8)
    {
      v24 = &v23;
      v17 = a1[5];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      atomic_store((*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v24) ^ 1, (unsigned __int8 *)(v4 + 40));
      std::mutex::lock((std::mutex *)(v4 + 56));
      v18 = atomic_load((unsigned __int8 *)(v4 + 40));
      v19 = (_QWORD *)(v4 + 296);
      if ((v18 & 1) == 0 || (v19 = (_QWORD *)(v4 + 344), v23))
        std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v19, &v23);
      v20 = *(_DWORD *)(v4 + 184);
      std::mutex::unlock((std::mutex *)(v4 + 56));
      if (v20)
        std::condition_variable::notify_all((std::condition_variable *)(v4 + 240));
      v13 = 0;
    }
  }
  while (v13 != 1);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_220E5612C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, int64x2_t *a11, std::unique_lock<std::mutex> a12)
{
  uint64_t *v12;
  std::condition_variable *v13;
  uint64_t v14;
  _QWORD *v15;
  std::mutex *v16;
  uint64_t v17;
  unsigned int v20;
  unsigned int v21;
  int v22;

  std::mutex::unlock(v16);
  if (a2 != 1)
  {
    if (v12)
      std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::ThreadedIter<dmlc::data::RowBlockContainer<unsigned int,float>>::Init(std::function<BOOL ()(dmlc::data::RowBlockContainer<unsigned int,float>**)>,std::function<void ()(void)>)::{lambda(void)#1}>>::operator()[abi:ne180100](v12);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::mutex::lock((std::mutex *)(v17 + 120));
  if (!*(_QWORD *)(v17 + 392))
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v17 + 392), (const std::exception_ptr *)&a12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a12);
  }
  std::mutex::unlock((std::mutex *)(v17 + 120));
  a12.__m_ = v16;
  a12.__owns_ = 1;
  std::mutex::lock(v16);
  v20 = atomic_load((unsigned int *)(v17 + 24));
  if (v20 == 1)
  {
    while (*(_QWORD *)(v17 + 336))
    {
      std::deque<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *,std::allocator<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> *>>::push_back(v15, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 304) + ((*(_QWORD *)(v17 + 328) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v17 + 328) & 0x1FFLL)));
      *a11 = vaddq_s64(*a11, (int64x2_t)xmmword_220F5EF90);
      std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::__maybe_remove_front_spare[abi:ne180100](v14);
    }
    atomic_store(1u, (unsigned __int8 *)(v17 + 40));
    atomic_store(1u, (unsigned __int8 *)(v17 + 28));
    std::unique_lock<std::mutex>::unlock(&a12);
  }
  else
  {
    v21 = atomic_load((unsigned int *)(v17 + 24));
    if (v21
      || (atomic_store(1u, (unsigned __int8 *)(v17 + 40)),
          v22 = *(_DWORD *)(v17 + 184),
          std::unique_lock<std::mutex>::unlock(&a12),
          !v22))
    {
LABEL_10:
      if (a12.__owns_)
        std::mutex::unlock(a12.__m_);
      __cxa_end_catch();
      JUMPOUT(0x220E560F0);
    }
  }
  std::condition_variable::notify_all(v13);
  goto LABEL_10;
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B76C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B76C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *a2;
  v4 = (_QWORD *)**a2;
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *v3 = v4;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v4);
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)#1}>,BOOL ()(std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>> **)>::target_type()
{
}

void std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24E6B7750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24E6B7750;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1},std::allocator<dmlc::data::ThreadedParser<unsigned long long,float>::ThreadedParser(dmlc::data::ParserImpl<unsigned long long,float> *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24E6B7660;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](a1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void sub_220E56544(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 392));
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 344);
  std::deque<dmlc::data::RowBlockContainer<unsigned int,float> *,std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> *>>::~deque[abi:ne180100](v1 + 296);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 192));
  std::mutex::~mutex((std::mutex *)(v1 + 120));
  std::mutex::~mutex((std::mutex *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

void dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void **v15;

  if (*(_QWORD *)(a1 + 32))
  {
    std::mutex::lock((std::mutex *)(a1 + 56));
    atomic_store(2u, (unsigned int *)(a1 + 24));
    if (*(_DWORD *)(a1 + 188))
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 376);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8));
      v6 = *(_QWORD *)(v5 + 8 * (v4 & 0x1FF));
      if (v6)
      {
        v15 = *(void ***)(v5 + 8 * (v4 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
        MEMORY[0x227667068](v6, 0x20C40960023A9);
        v4 = *(_QWORD *)(a1 + 376);
        v3 = *(_QWORD *)(a1 + 384);
      }
      --v3;
      *(_QWORD *)(a1 + 376) = ++v4;
      *(_QWORD *)(a1 + 384) = v3;
      if (v4 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 352));
        *(_QWORD *)(a1 + 352) += 8;
        v3 = *(_QWORD *)(a1 + 384);
        v4 = *(_QWORD *)(a1 + 376) - 512;
        *(_QWORD *)(a1 + 376) = v4;
      }
    }
    while (v3);
  }
  v7 = *(_QWORD *)(a1 + 336);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 328);
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
      v10 = *(_QWORD *)(v9 + 8 * (v8 & 0x1FF));
      if (v10)
      {
        v15 = *(void ***)(v9 + 8 * (v8 & 0x1FF));
        std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
        MEMORY[0x227667068](v10, 0x20C40960023A9);
        v8 = *(_QWORD *)(a1 + 328);
        v7 = *(_QWORD *)(a1 + 336);
      }
      --v7;
      *(_QWORD *)(a1 + 328) = ++v8;
      *(_QWORD *)(a1 + 336) = v7;
      if (v8 >= 0x400)
      {
        operator delete(**(void ***)(a1 + 304));
        *(_QWORD *)(a1 + 304) += 8;
        v7 = *(_QWORD *)(a1 + 336);
        v8 = *(_QWORD *)(a1 + 328) - 512;
        *(_QWORD *)(a1 + 328) = v8;
      }
    }
    while (v7);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 288);
  if (v14)
  {
    v15 = *(void ***)(a1 + 288);
    std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v15);
    MEMORY[0x227667068](v14, 0x20C40960023A9);
    *(_QWORD *)(a1 + 288) = 0;
  }
}

uint64_t dmlc::data::ThreadedParser<unsigned long long,float>::~ThreadedParser(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &off_24E6B7600;
  v2 = a1 + 120;
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::Destroy(a1 + 120);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 520);
  if (v4)
  {
    v6 = *(void ***)(a1 + 520);
    std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    MEMORY[0x227667068](v4, 0x20C40960023A9);
  }
  dmlc::ThreadedIter<std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>>::~ThreadedIter(v2);
  *(_QWORD *)a1 = off_24E6B75B8;
  v6 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

void sub_220E56854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = off_24E6B75B8;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibFMParser<unsigned int,float>::~LibFMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B77D0;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::LibFMParser<unsigned int,float>::~LibFMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B77D0;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E5691C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C402E84ECB5);
  _Unwind_Resume(a1);
}

void dmlc::data::LibFMParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  float v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int v105;
  unsigned __int8 *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v111;
  unsigned int v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  char *v127;
  _DWORD *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  float *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  char *v149;
  uint64_t v150;
  std::string *Entry;
  _QWORD *v152;
  _QWORD *v153;
  std::string *v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  uint64_t v162;
  void **v163;
  void **v164;
  void **v165;
  uint64_t v166;
  void **v167;
  unsigned int v168;
  void **v169;
  unsigned int v170;
  _QWORD *v171;
  int v172;
  int v173;
  unsigned __int8 *v174;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  v165 = (void **)(a4 + 96);
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v22 = *(_QWORD *)(a4 + 120);
  v164 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = v22;
  v163 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v167 = (void **)(a4 + 48);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  v169 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    v23 = -1;
    v170 = -1;
    v137 = v22;
    goto LABEL_230;
  }
  v166 = v10;
  v171 = (_QWORD *)(a4 + 40);
  v162 = a1;
  v23 = -1;
  v170 = -1;
  do
  {
    v24 = a2;
    v25 = a2 + 1;
    while (v25 != a3)
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 == 13 || v26 == 10)
      {
        a2 = v25 - 1;
        goto LABEL_24;
      }
    }
    a2 = a3;
LABEL_24:
    v174 = 0;
    v173 = 0;
    v172 = 0;
    v29 = dmlc::ParsePair<float,float>(v24, (uint64_t)a2, (uint64_t *)&v174, (float *)&v173, (float *)&v172);
    if (v29)
    {
      if (v29 == 2)
      {
        v31 = *(char **)(a4 + 56);
        v30 = *(_QWORD *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v167;
          v34 = (v31 - (_BYTE *)*v167) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            v33 = *(char **)(a4 + 48);
            v31 = *(char **)(a4 + 56);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v172;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a4 + 48) = v39;
          *(_QWORD *)(a4 + 56) = v32;
          *(_QWORD *)(a4 + 64) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = v172;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a4 + 56) = v32;
      }
      v41 = *(char **)(a4 + 32);
      if (v41 == *(char **)(a4 + 24))
        goto LABEL_61;
      v42 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
      v44 = *(uint64_t **)(a4 + 8);
      v43 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v44 < v43)
      {
        *v44 = v42;
        v45 = v44 + 1;
LABEL_60:
        *(_QWORD *)(a4 + 8) = v45;
        v41 = *(char **)(a4 + 32);
LABEL_61:
        if ((unint64_t)v41 >= *v171)
        {
          v55 = (char *)*v169;
          v56 = (v41 - (_BYTE *)*v169) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v58 = *v171 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v171, v59);
            v55 = *(char **)(a4 + 24);
            v41 = *(char **)(a4 + 32);
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[4 * v56];
          *(_DWORD *)v61 = v173;
          v54 = v61 + 4;
          while (v41 != v55)
          {
            v62 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(_QWORD *)(a4 + 24) = v61;
          *(_QWORD *)(a4 + 32) = v54;
          *(_QWORD *)(a4 + 40) = &v60[4 * v59];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *(_DWORD *)v41 = v173;
          v54 = v41 + 4;
        }
        *(_QWORD *)(a4 + 32) = v54;
        v63 = v174;
        while (1)
        {
          if (v63 == a2)
            goto LABEL_209;
          while (1)
          {
            if (v63 == a2)
              goto LABEL_209;
            v64 = *v63;
            if ((v64 - 48) < 0xA)
              break;
            v65 = v64 - 43;
            v66 = v65 > 0x3A;
            v67 = (1 << v65) & 0x40000000400000DLL;
            if (!v66 && v67 != 0)
              break;
            ++v63;
          }
          if (v63 == a2)
          {
            dmlc::ParseUnsignedInt<unsigned int>(a2);
LABEL_103:
            v63 = a2;
            goto LABEL_104;
          }
          v69 = v63;
          while (1)
          {
            v70 = *v69;
            if ((v70 - 48) >= 0xA)
            {
              v71 = v70 - 43;
              v66 = v71 > 0x3A;
              v72 = (1 << v71) & 0x40000000400000DLL;
              if (v66 || v72 == 0)
                break;
            }
            if (++v69 == a2)
            {
              v69 = a2;
              break;
            }
          }
          v74 = dmlc::ParseUnsignedInt<unsigned int>(v63);
          v63 = a2;
          if (v69 == a2)
            goto LABEL_104;
          v75 = v74;
          v76 = v69 + 1;
          while (1)
          {
            v77 = *v69;
            if (v77 != 9 && v77 != 32)
              break;
            ++v69;
            ++v76;
            if (v69 == a2)
              goto LABEL_103;
          }
          if (v77 != 58)
          {
            v63 = v69;
LABEL_104:
            v174 = v63;
            continue;
          }
          while (1)
          {
            if (v76 == a2)
            {
              v69 = a2;
              goto LABEL_112;
            }
            v78 = *v76;
            if ((v78 - 48) < 0xA)
              break;
            ++v69;
            ++v76;
            v79 = v78 - 43;
            v66 = v79 > 0x3A;
            v80 = (1 << v79) & 0x40000000400000DLL;
            if (!v66 && v80 != 0)
              goto LABEL_112;
          }
          v69 = v76;
LABEL_112:
          if (v69 == a2)
            break;
          v63 = v69;
          while (1)
          {
            v82 = *v63;
            if ((v82 - 48) >= 0xA)
            {
              v83 = v82 - 43;
              v66 = v83 > 0x3A;
              v84 = (1 << v83) & 0x40000000400000DLL;
              if (v66 || v84 == 0)
                break;
            }
            if (++v63 == a2)
            {
              v63 = a2;
              break;
            }
          }
          v86 = dmlc::ParseUnsignedInt<unsigned int>(v69);
          if (v63 == a2)
            goto LABEL_129;
          v87 = v63 + 1;
          while (1)
          {
            v88 = *v63;
            if (v88 != 9 && v88 != 32)
              break;
            ++v63;
            ++v87;
            if (v63 == a2)
              goto LABEL_129;
          }
          if (v88 != 58)
            goto LABEL_130;
          while (1)
          {
            if (v87 == a2)
            {
              v63 = a2;
              goto LABEL_148;
            }
            v101 = *v87;
            if ((v101 - 48) < 0xA)
              break;
            ++v63;
            ++v87;
            v102 = v101 - 43;
            v66 = v102 > 0x3A;
            v103 = (1 << v102) & 0x40000000400000DLL;
            if (!v66 && v103 != 0)
              goto LABEL_148;
          }
          v63 = v87;
LABEL_148:
          v105 = v23;
          v106 = a2;
          if (v63 != a2)
          {
            v106 = v63;
            while (1)
            {
              v107 = *v106;
              if ((v107 - 48) >= 0xA)
              {
                v108 = v107 - 43;
                v66 = v108 > 0x3A;
                v109 = (1 << v108) & 0x40000000400000DLL;
                if (v66 || v109 == 0)
                  break;
              }
              if (++v106 == a2)
              {
                v106 = a2;
                break;
              }
            }
          }
          v174 = v106;
          v90 = dmlc::ParseFloat<float,false>((uint64_t)v63, 0);
          v89 = 1;
          v63 = v106;
          v23 = v105;
LABEL_131:
          v168 = v23;
          v92 = *(char **)(a4 + 104);
          v91 = *(_QWORD *)(a4 + 112);
          if ((unint64_t)v92 >= v91)
          {
            v94 = (char *)*v165;
            v95 = (v92 - (_BYTE *)*v165) >> 2;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v97 = v89;
            v98 = v91 - (_QWORD)v94;
            if (v98 >> 1 > v96)
              v96 = v98 >> 1;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
              v99 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v99 = v96;
            if (v99)
            {
              v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 112, v99);
              v94 = *(char **)(a4 + 96);
              v92 = *(char **)(a4 + 104);
            }
            else
            {
              v100 = 0;
            }
            v111 = (unsigned int *)&v100[4 * v95];
            *v111 = v75;
            v93 = v111 + 1;
            while (v92 != v94)
            {
              v112 = *((_DWORD *)v92 - 1);
              v92 -= 4;
              *--v111 = v112;
            }
            *(_QWORD *)(a4 + 96) = v111;
            *(_QWORD *)(a4 + 104) = v93;
            *(_QWORD *)(a4 + 112) = &v100[4 * v99];
            if (v94)
              operator delete(v94);
            v89 = v97;
          }
          else
          {
            *(_DWORD *)v92 = v75;
            v93 = v92 + 4;
          }
          *(_QWORD *)(a4 + 104) = v93;
          v114 = *(char **)(a4 + 128);
          v113 = *(_QWORD *)(a4 + 136);
          if ((unint64_t)v114 >= v113)
          {
            v116 = (char *)*v164;
            v117 = (v114 - (_BYTE *)*v164) >> 2;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v119 = v89;
            v120 = v113 - (_QWORD)v116;
            if (v120 >> 1 > v118)
              v118 = v120 >> 1;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v118;
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v121);
              v116 = *(char **)(a4 + 120);
              v114 = *(char **)(a4 + 128);
            }
            else
            {
              v122 = 0;
            }
            v123 = (unsigned int *)&v122[4 * v117];
            *v123 = v86;
            v115 = v123 + 1;
            while (v114 != v116)
            {
              v124 = *((_DWORD *)v114 - 1);
              v114 -= 4;
              *--v123 = v124;
            }
            *(_QWORD *)(a4 + 120) = v123;
            *(_QWORD *)(a4 + 128) = v115;
            *(_QWORD *)(a4 + 136) = &v122[4 * v121];
            if (v116)
              operator delete(v116);
            v89 = v119;
          }
          else
          {
            *(_DWORD *)v114 = v86;
            v115 = v114 + 4;
          }
          *(_QWORD *)(a4 + 128) = v115;
          if (v168 >= v75)
            v23 = v75;
          else
            v23 = v168;
          v125 = v170;
          if (v170 >= v86)
            v125 = v86;
          v170 = v125;
          if (v89)
          {
            v127 = *(char **)(a4 + 152);
            v126 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v127 >= v126)
            {
              v129 = (char *)*v163;
              v130 = (v127 - (_BYTE *)*v163) >> 2;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v132 = v126 - (_QWORD)v129;
              if (v132 >> 1 > v131)
                v131 = v132 >> 1;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
                v133 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v133);
                v129 = *(char **)(a4 + 144);
                v127 = *(char **)(a4 + 152);
              }
              else
              {
                v134 = 0;
              }
              v135 = (float *)&v134[4 * v130];
              *v135 = v90;
              v128 = v135 + 1;
              while (v127 != v129)
              {
                v136 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v135-- - 1) = v136;
              }
              *(_QWORD *)(a4 + 144) = v135;
              *(_QWORD *)(a4 + 152) = v128;
              *(_QWORD *)(a4 + 160) = &v134[4 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(float *)v127 = v90;
              v128 = v127 + 4;
            }
            *(_QWORD *)(a4 + 152) = v128;
          }
        }
        v86 = dmlc::ParseUnsignedInt<unsigned int>(a2);
LABEL_129:
        v63 = a2;
LABEL_130:
        v89 = 0;
        v174 = v63;
        v90 = 0.0;
        goto LABEL_131;
      }
      v46 = *(uint64_t **)a4;
      v47 = ((uint64_t)v44 - *(_QWORD *)a4) >> 3;
      v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 61))
      {
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v50);
          v46 = *(uint64_t **)a4;
          v44 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = (uint64_t *)&v51[8 * v47];
        *v52 = v42;
        v45 = v52 + 1;
        while (v44 != v46)
        {
          v53 = *--v44;
          *--v52 = v53;
        }
        *(_QWORD *)a4 = v52;
        *(_QWORD *)(a4 + 8) = v45;
        *(_QWORD *)(a4 + 16) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
        goto LABEL_60;
      }
LABEL_249:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
LABEL_209:
    ;
  }
  while (a2 != a3);
  v22 = *(_QWORD *)(a4 + 120);
  v137 = *(_QWORD *)(a4 + 128);
  if (*(_QWORD *)(a4 + 32) == *(_QWORD *)(a4 + 24))
  {
    a1 = v162;
    goto LABEL_230;
  }
  v138 = (v137 - v22) >> 2;
  v140 = *(uint64_t **)(a4 + 8);
  v139 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v140 < v139)
  {
    *v140 = v138;
    v141 = v140 + 1;
    a1 = v162;
    goto LABEL_229;
  }
  v142 = *(uint64_t **)a4;
  v143 = ((uint64_t)v140 - *(_QWORD *)a4) >> 3;
  v144 = v143 + 1;
  if ((unint64_t)(v143 + 1) >> 61)
    goto LABEL_249;
  v145 = v139 - (_QWORD)v142;
  if (v145 >> 2 > v144)
    v144 = v145 >> 2;
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
    v146 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v146 = v144;
  a1 = v162;
  if (v146)
  {
    v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v166, v146);
    v142 = *(uint64_t **)a4;
    v140 = *(uint64_t **)(a4 + 8);
  }
  else
  {
    v147 = 0;
  }
  v148 = (uint64_t *)&v147[8 * v143];
  v149 = &v147[8 * v146];
  *v148 = v138;
  v141 = v148 + 1;
  while (v140 != v142)
  {
    v150 = *--v140;
    *--v148 = v150;
  }
  *(_QWORD *)a4 = v148;
  *(_QWORD *)(a4 + 8) = v141;
  *(_QWORD *)(a4 + 16) = v149;
  if (v142)
    operator delete(v142);
LABEL_229:
  *(_QWORD *)(a4 + 8) = v141;
  v22 = *(_QWORD *)(a4 + 120);
  v137 = *(_QWORD *)(a4 + 128);
LABEL_230:
  if (*(_QWORD *)(a4 + 104) - *(_QWORD *)(a4 + 96) != v137 - v22)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v152 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"Check failed: out->field.size() == out->index.size()", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  if (((uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v154 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(v154, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v155 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  v157 = *(_DWORD *)(a1 + 224);
  if (v157 < 1)
  {
    if (v157 < 0)
    {
      v158 = *(_DWORD **)(a4 + 120);
      v159 = *(_DWORD **)(a4 + 128);
      if (v158 != v159 && v170 && *(_QWORD *)(a4 + 96) != *(_QWORD *)(a4 + 104) && v23)
        goto LABEL_244;
    }
  }
  else
  {
    v158 = *(_DWORD **)(a4 + 120);
    v159 = *(_DWORD **)(a4 + 128);
LABEL_244:
    while (v158 != v159)
      --*v158++;
    v160 = *(_DWORD **)(a4 + 96);
    v161 = *(_DWORD **)(a4 + 104);
    while (v160 != v161)
      --*v160++;
  }
}

void sub_220E57458(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<std::string,char [6]>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"libfm", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
  v11 = operator new();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v11;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v15);
}

void sub_220E575B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::LibFMParser<unsigned long long,float>::~LibFMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7838;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::LibFMParser<unsigned long long,float>::~LibFMParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7838;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E57674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40E19BAD78);
  _Unwind_Resume(a1);
}

void dmlc::data::LibFMParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  float v90;
  unint64_t v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  _QWORD *v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  _DWORD *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  float *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  char *v149;
  uint64_t v150;
  std::string *Entry;
  _QWORD *v152;
  _QWORD *v153;
  std::string *v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  void **v163;
  void **v164;
  void **v165;
  uint64_t v166;
  void **v167;
  unint64_t v168;
  void **v169;
  unint64_t v170;
  _QWORD *v171;
  int v172;
  int v173;
  unsigned __int8 *v174;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  v165 = (void **)(a4 + 96);
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v22 = *(_QWORD *)(a4 + 120);
  v164 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = v22;
  v163 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v167 = (void **)(a4 + 48);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  v169 = (void **)(a4 + 24);
  if (a2 == a3)
  {
    v23 = -1;
    v170 = -1;
    v137 = v22;
    goto LABEL_229;
  }
  v166 = v10;
  v162 = a1;
  v23 = -1;
  v170 = -1;
  v171 = (_QWORD *)(a4 + 40);
  do
  {
    v24 = a2;
    v25 = a2 + 1;
    while (v25 != a3)
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 == 13 || v26 == 10)
      {
        a2 = v25 - 1;
        goto LABEL_24;
      }
    }
    a2 = a3;
LABEL_24:
    v174 = 0;
    v173 = 0;
    v172 = 0;
    v29 = dmlc::ParsePair<float,float>(v24, (uint64_t)a2, (uint64_t *)&v174, (float *)&v173, (float *)&v172);
    if (v29)
    {
      if (v29 == 2)
      {
        v31 = *(char **)(a4 + 56);
        v30 = *(_QWORD *)(a4 + 64);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v167;
          v34 = (v31 - (_BYTE *)*v167) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v37);
            v33 = *(char **)(a4 + 48);
            v31 = *(char **)(a4 + 56);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v172;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a4 + 48) = v39;
          *(_QWORD *)(a4 + 56) = v32;
          *(_QWORD *)(a4 + 64) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = v172;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a4 + 56) = v32;
      }
      v41 = *(char **)(a4 + 32);
      if (v41 == *(char **)(a4 + 24))
        goto LABEL_61;
      v42 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
      v44 = *(uint64_t **)(a4 + 8);
      v43 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v44 < v43)
      {
        *v44 = v42;
        v45 = v44 + 1;
LABEL_60:
        *(_QWORD *)(a4 + 8) = v45;
        v41 = *(char **)(a4 + 32);
LABEL_61:
        if ((unint64_t)v41 >= *v171)
        {
          v55 = (char *)*v169;
          v56 = (v41 - (_BYTE *)*v169) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v58 = *v171 - (_QWORD)v55;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v171, v59);
            v55 = *(char **)(a4 + 24);
            v41 = *(char **)(a4 + 32);
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[4 * v56];
          *(_DWORD *)v61 = v173;
          v54 = v61 + 4;
          while (v41 != v55)
          {
            v62 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *(_QWORD *)(a4 + 24) = v61;
          *(_QWORD *)(a4 + 32) = v54;
          *(_QWORD *)(a4 + 40) = &v60[4 * v59];
          if (v55)
            operator delete(v55);
        }
        else
        {
          *(_DWORD *)v41 = v173;
          v54 = v41 + 4;
        }
        *(_QWORD *)(a4 + 32) = v54;
        v63 = v174;
        while (1)
        {
          if (v63 == a2)
            goto LABEL_208;
          while (1)
          {
            if (v63 == a2)
              goto LABEL_208;
            v64 = *v63;
            if ((v64 - 48) < 0xA)
              break;
            v65 = v64 - 43;
            v66 = v65 > 0x3A;
            v67 = (1 << v65) & 0x40000000400000DLL;
            if (!v66 && v67 != 0)
              break;
            ++v63;
          }
          if (v63 == a2)
          {
            dmlc::ParseUnsignedInt<unsigned long long>(a2);
LABEL_103:
            v63 = a2;
            goto LABEL_104;
          }
          v69 = v63;
          while (1)
          {
            v70 = *v69;
            if ((v70 - 48) >= 0xA)
            {
              v71 = v70 - 43;
              v66 = v71 > 0x3A;
              v72 = (1 << v71) & 0x40000000400000DLL;
              if (v66 || v72 == 0)
                break;
            }
            if (++v69 == a2)
            {
              v69 = a2;
              break;
            }
          }
          v74 = dmlc::ParseUnsignedInt<unsigned long long>(v63);
          v63 = a2;
          if (v69 == a2)
            goto LABEL_104;
          v75 = v74;
          v76 = v69 + 1;
          while (1)
          {
            v77 = *v69;
            if (v77 != 9 && v77 != 32)
              break;
            ++v69;
            ++v76;
            if (v69 == a2)
              goto LABEL_103;
          }
          if (v77 != 58)
          {
            v63 = v69;
LABEL_104:
            v174 = v63;
            continue;
          }
          while (1)
          {
            if (v76 == a2)
            {
              v69 = a2;
              goto LABEL_112;
            }
            v78 = *v76;
            if ((v78 - 48) < 0xA)
              break;
            ++v69;
            ++v76;
            v79 = v78 - 43;
            v66 = v79 > 0x3A;
            v80 = (1 << v79) & 0x40000000400000DLL;
            if (!v66 && v80 != 0)
              goto LABEL_112;
          }
          v69 = v76;
LABEL_112:
          if (v69 == a2)
            break;
          v63 = v69;
          while (1)
          {
            v82 = *v63;
            if ((v82 - 48) >= 0xA)
            {
              v83 = v82 - 43;
              v66 = v83 > 0x3A;
              v84 = (1 << v83) & 0x40000000400000DLL;
              if (v66 || v84 == 0)
                break;
            }
            if (++v63 == a2)
            {
              v63 = a2;
              break;
            }
          }
          v86 = dmlc::ParseUnsignedInt<unsigned long long>(v69);
          if (v63 == a2)
            goto LABEL_129;
          v87 = v63 + 1;
          while (1)
          {
            v88 = *v63;
            if (v88 != 9 && v88 != 32)
              break;
            ++v63;
            ++v87;
            if (v63 == a2)
              goto LABEL_129;
          }
          if (v88 != 58)
            goto LABEL_130;
          while (1)
          {
            if (v87 == a2)
            {
              v63 = a2;
              goto LABEL_148;
            }
            v101 = *v87;
            if ((v101 - 48) < 0xA)
              break;
            ++v63;
            ++v87;
            v102 = v101 - 43;
            v66 = v102 > 0x3A;
            v103 = (1 << v102) & 0x40000000400000DLL;
            if (!v66 && v103 != 0)
              goto LABEL_148;
          }
          v63 = v87;
LABEL_148:
          v105 = v23;
          v106 = a2;
          if (v63 != a2)
          {
            v106 = v63;
            while (1)
            {
              v107 = *v106;
              if ((v107 - 48) >= 0xA)
              {
                v108 = v107 - 43;
                v66 = v108 > 0x3A;
                v109 = (1 << v108) & 0x40000000400000DLL;
                if (v66 || v109 == 0)
                  break;
              }
              if (++v106 == a2)
              {
                v106 = a2;
                break;
              }
            }
          }
          v174 = v106;
          v90 = dmlc::ParseFloat<float,false>((uint64_t)v63, 0);
          v89 = 1;
          v63 = v106;
          v23 = v105;
LABEL_131:
          v168 = v23;
          v92 = *(char **)(a4 + 104);
          v91 = *(_QWORD *)(a4 + 112);
          if ((unint64_t)v92 >= v91)
          {
            v94 = (char *)*v165;
            v95 = (v92 - (_BYTE *)*v165) >> 3;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v97 = v89;
            v98 = v91 - (_QWORD)v94;
            if (v98 >> 2 > v96)
              v96 = v98 >> 2;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
              v99 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v99 = v96;
            if (v99)
            {
              v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 112, v99);
              v94 = *(char **)(a4 + 96);
              v92 = *(char **)(a4 + 104);
            }
            else
            {
              v100 = 0;
            }
            v111 = (unint64_t *)&v100[8 * v95];
            *v111 = v75;
            v93 = v111 + 1;
            while (v92 != v94)
            {
              v112 = *((_QWORD *)v92 - 1);
              v92 -= 8;
              *--v111 = v112;
            }
            *(_QWORD *)(a4 + 96) = v111;
            *(_QWORD *)(a4 + 104) = v93;
            *(_QWORD *)(a4 + 112) = &v100[8 * v99];
            if (v94)
              operator delete(v94);
            v89 = v97;
          }
          else
          {
            *(_QWORD *)v92 = v75;
            v93 = v92 + 8;
          }
          *(_QWORD *)(a4 + 104) = v93;
          v114 = *(unint64_t **)(a4 + 128);
          v113 = *(_QWORD *)(a4 + 136);
          if ((unint64_t)v114 >= v113)
          {
            v116 = (unint64_t *)*v164;
            v117 = ((char *)v114 - (_BYTE *)*v164) >> 3;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v119 = v89;
            v120 = v113 - (_QWORD)v116;
            if (v120 >> 2 > v118)
              v118 = v120 >> 2;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v118;
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v121);
              v116 = *(unint64_t **)(a4 + 120);
              v114 = *(unint64_t **)(a4 + 128);
            }
            else
            {
              v122 = 0;
            }
            v123 = (unint64_t *)&v122[8 * v117];
            *v123 = v86;
            v115 = v123 + 1;
            while (v114 != v116)
            {
              v124 = *--v114;
              *--v123 = v124;
            }
            *(_QWORD *)(a4 + 120) = v123;
            *(_QWORD *)(a4 + 128) = v115;
            *(_QWORD *)(a4 + 136) = &v122[8 * v121];
            if (v116)
              operator delete(v116);
            v89 = v119;
          }
          else
          {
            *v114 = v86;
            v115 = v114 + 1;
          }
          *(_QWORD *)(a4 + 128) = v115;
          v23 = v168;
          if (v168 >= v75)
            v23 = v75;
          v125 = v170;
          if (v170 >= v86)
            v125 = v86;
          v170 = v125;
          if (v89)
          {
            v127 = *(char **)(a4 + 152);
            v126 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v127 >= v126)
            {
              v129 = (char *)*v163;
              v130 = (v127 - (_BYTE *)*v163) >> 2;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v132 = v126 - (_QWORD)v129;
              if (v132 >> 1 > v131)
                v131 = v132 >> 1;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
                v133 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v133);
                v129 = *(char **)(a4 + 144);
                v127 = *(char **)(a4 + 152);
              }
              else
              {
                v134 = 0;
              }
              v135 = (float *)&v134[4 * v130];
              *v135 = v90;
              v128 = v135 + 1;
              while (v127 != v129)
              {
                v136 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v135-- - 1) = v136;
              }
              *(_QWORD *)(a4 + 144) = v135;
              *(_QWORD *)(a4 + 152) = v128;
              *(_QWORD *)(a4 + 160) = &v134[4 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(float *)v127 = v90;
              v128 = v127 + 4;
            }
            *(_QWORD *)(a4 + 152) = v128;
          }
        }
        v86 = dmlc::ParseUnsignedInt<unsigned long long>(a2);
LABEL_129:
        v63 = a2;
LABEL_130:
        v89 = 0;
        v174 = v63;
        v90 = 0.0;
        goto LABEL_131;
      }
      v46 = *(uint64_t **)a4;
      v47 = ((uint64_t)v44 - *(_QWORD *)a4) >> 3;
      v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 61))
      {
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v50);
          v46 = *(uint64_t **)a4;
          v44 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v51 = 0;
        }
        v52 = (uint64_t *)&v51[8 * v47];
        *v52 = v42;
        v45 = v52 + 1;
        while (v44 != v46)
        {
          v53 = *--v44;
          *--v52 = v53;
        }
        *(_QWORD *)a4 = v52;
        *(_QWORD *)(a4 + 8) = v45;
        *(_QWORD *)(a4 + 16) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
        goto LABEL_60;
      }
LABEL_248:
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    }
LABEL_208:
    ;
  }
  while (a2 != a3);
  v22 = *(_QWORD *)(a4 + 120);
  v137 = *(_QWORD *)(a4 + 128);
  if (*(_QWORD *)(a4 + 32) == *(_QWORD *)(a4 + 24))
  {
    a1 = v162;
    goto LABEL_229;
  }
  v138 = (v137 - v22) >> 3;
  v140 = *(uint64_t **)(a4 + 8);
  v139 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v140 < v139)
  {
    *v140 = v138;
    v141 = v140 + 1;
    a1 = v162;
    goto LABEL_228;
  }
  v142 = *(uint64_t **)a4;
  v143 = ((uint64_t)v140 - *(_QWORD *)a4) >> 3;
  v144 = v143 + 1;
  if ((unint64_t)(v143 + 1) >> 61)
    goto LABEL_248;
  v145 = v139 - (_QWORD)v142;
  if (v145 >> 2 > v144)
    v144 = v145 >> 2;
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
    v146 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v146 = v144;
  a1 = v162;
  if (v146)
  {
    v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v166, v146);
    v142 = *(uint64_t **)a4;
    v140 = *(uint64_t **)(a4 + 8);
  }
  else
  {
    v147 = 0;
  }
  v148 = (uint64_t *)&v147[8 * v143];
  v149 = &v147[8 * v146];
  *v148 = v138;
  v141 = v148 + 1;
  while (v140 != v142)
  {
    v150 = *--v140;
    *--v148 = v150;
  }
  *(_QWORD *)a4 = v148;
  *(_QWORD *)(a4 + 8) = v141;
  *(_QWORD *)(a4 + 16) = v149;
  if (v142)
    operator delete(v142);
LABEL_228:
  *(_QWORD *)(a4 + 8) = v141;
  v22 = *(_QWORD *)(a4 + 120);
  v137 = *(_QWORD *)(a4 + 128);
LABEL_229:
  if (*(_QWORD *)(a4 + 104) - *(_QWORD *)(a4 + 96) != v137 - v22)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v152 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"Check failed: out->field.size() == out->index.size()", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  if (((uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v154 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    dmlc::LogMessageFatal::Entry::Init(v154, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/libfm_parser.h");
    v155 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
    v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v174);
  }
  v157 = *(_DWORD *)(a1 + 232);
  if (v157 < 1)
  {
    if (v157 < 0)
    {
      v158 = *(_QWORD **)(a4 + 120);
      v159 = *(_QWORD **)(a4 + 128);
      if (v158 != v159 && v170 && *(_QWORD *)(a4 + 96) != *(_QWORD *)(a4 + 104) && v23)
        goto LABEL_243;
    }
  }
  else
  {
    v158 = *(_QWORD **)(a4 + 120);
    v159 = *(_QWORD **)(a4 + 128);
LABEL_243:
    while (v158 != v159)
      --*v158++;
    v160 = *(_QWORD **)(a4 + 96);
    v161 = *(_QWORD **)(a4 + 104);
    while (v160 != v161)
      --*v160++;
  }
}

void sub_220E581AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,float>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B78A0;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  return dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,float>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B78A0;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  dmlc::data::TextParserBase<unsigned int,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E58284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40CF2D762DLL);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParser<unsigned int,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v37;
  int v38;
  float v39;
  int v40;
  float v41;
  float v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float *v52;
  int v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  unint64_t v95;
  int *v96;
  _DWORD *v97;
  int *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  std::string *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  std::string *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  void **v125;
  void **v126;
  void **v127;
  void **v128;
  char v129;
  char v130;
  char v131;
  unint64_t v132;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v127 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v128 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v125 = (void **)(a4 + 48);
  v126 = (void **)(a4 + 24);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_184;
    v124 = v10;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_46;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_45:
          v32 = (uint64_t)&a2[v25];
          goto LABEL_46;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_45;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_45;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (uint64_t)&a2[v30];
      if (v31 > 1)
        goto LABEL_47;
      v30 = v30;
LABEL_46:
      v32 -= v30;
LABEL_47:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_56;
        }
      }
      a2 = a3;
LABEL_56:
      if ((unsigned __int8 *)v32 == a2)
      {
        v39 = 0.0;
        v40 = 2143289344;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0.0;
        v40 = 2143289344;
        do
        {
          v132 = 0;
          v41 = dmlc::ParseFloat<float,false>(v32, (uint64_t *)&v132);
          v42 = v41;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            v39 = v41;
          }
          else if (v38 == *(_DWORD *)(a1 + 256))
          {
            v40 = LODWORD(v41);
          }
          else if (v132 == v32)
          {
            ++v37;
          }
          else
          {
            v44 = *(float **)(a4 + 152);
            v43 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (float *)*v128;
              v47 = ((char *)v44 - (_BYTE *)*v128) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v50);
                v46 = *(float **)(a4 + 144);
                v44 = *(float **)(a4 + 152);
              }
              else
              {
                v51 = 0;
              }
              v52 = (float *)&v51[4 * v47];
              *v52 = v42;
              v45 = v52 + 1;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44-- - 1);
                *((_DWORD *)v52-- - 1) = v53;
              }
              *(_QWORD *)(a4 + 144) = v52;
              *(_QWORD *)(a4 + 152) = v45;
              *(_QWORD *)(a4 + 160) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *v44 = v41;
              v45 = v44 + 1;
            }
            *(_QWORD *)(a4 + 152) = v45;
            v55 = *(char **)(a4 + 128);
            v54 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v127;
              v58 = (v55 - (_BYTE *)*v127) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v61);
                v57 = *(char **)(a4 + 120);
                v55 = *(char **)(a4 + 128);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = v37;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a4 + 120) = v63;
              *(_QWORD *)(a4 + 128) = v56;
              *(_QWORD *)(a4 + 136) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = v37;
              v56 = v55 + 4;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v56;
          }
          if (v132 >= (unint64_t)a2)
            v65 = (unint64_t)a2;
          else
            v65 = v132;
          v32 = v65 - 1;
          do
          {
            v67 = (unsigned __int8 *)(v32 + 1);
            v66 = *(unsigned __int8 *)(v32 + 1);
            v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0)
              v68 = *(unsigned __int8 **)(a1 + 232);
            ++v32;
          }
          while (v67 != a2 && v66 != *v68);
          if ((unsigned __int8 *)v32 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 255);
            if (v72 >= 0)
              v73 = a1 + 232;
            else
              v73 = *(_QWORD *)(a1 + 232);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 255);
            else
              v74 = *(_QWORD *)(a1 + 240);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 255);
            if (v78 >= 0)
              v79 = a1 + 232;
            else
              v79 = *(_QWORD *)(a1 + 232);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 255);
            else
              v80 = *(_QWORD *)(a1 + 240);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
          }
          ++v38;
          if (v67 != a2)
            ++v32;
        }
        while ((unsigned __int8 *)v32 != a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v126;
        v88 = (v85 - (_BYTE *)*v126) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(float *)v93 = v39;
        v86 = v93 + 4;
        while (v85 != v87)
        {
          v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(float *)v85 = v39;
        v86 = v85 + 4;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v96 = *(int **)(a4 + 56);
      v95 = *(_QWORD *)(a4 + 64);
      if ((unint64_t)v96 >= v95)
      {
        v98 = (int *)*v125;
        v99 = ((char *)v96 - (_BYTE *)*v125) >> 2;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v101 = v95 - (_QWORD)v98;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v102);
          v98 = *(int **)(a4 + 48);
          v96 = *(int **)(a4 + 56);
        }
        else
        {
          v103 = 0;
        }
        v104 = (int *)&v103[4 * v99];
        *v104 = v40;
        v97 = v104 + 1;
        while (v96 != v98)
        {
          v105 = *--v96;
          *--v104 = v105;
        }
        *(_QWORD *)(a4 + 48) = v104;
        *(_QWORD *)(a4 + 56) = v97;
        *(_QWORD *)(a4 + 64) = &v103[4 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v96 = v40;
        v97 = v96 + 1;
      }
      *(_QWORD *)(a4 + 56) = v97;
      v106 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
      v108 = *(uint64_t **)(a4 + 8);
      v107 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v108 >= v107)
      {
        v109 = *(uint64_t **)a4;
        v110 = ((uint64_t)v108 - *(_QWORD *)a4) >> 3;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v112 = v107 - (_QWORD)v109;
        if (v112 >> 2 > v111)
          v111 = v112 >> 2;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v124, v113);
          v109 = *(uint64_t **)a4;
          v108 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v114 = 0;
        }
        v115 = (uint64_t *)&v114[8 * v110];
        *v115 = v106;
        v11 = v115 + 1;
        while (v108 != v109)
        {
          v116 = *--v108;
          *--v115 = v116;
        }
        *(_QWORD *)a4 = v115;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v114[8 * v113];
        if (v109)
          operator delete(v109);
      }
      else
      {
        *v108 = v106;
        v11 = v108 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_184;
      }
    }
  }
  v24 = v21;
LABEL_184:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v118 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v130);
  }
  v120 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v120)
  {
    if ((v120 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v122 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
    }
  }
}

void sub_220E58AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a21);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<std::string,char [4]>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"csv", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
  v11 = operator new();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v11;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v15);
}

void sub_220E58C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,float>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7908;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  return dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,float>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7908;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  dmlc::data::TextParserBase<unsigned long long,float>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E58D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40478103D4);
  _Unwind_Resume(a1);
}

void dmlc::data::CSVParser<unsigned long long,float>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v37;
  int v38;
  float v39;
  int v40;
  float v41;
  float v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float *v52;
  int v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  unint64_t v95;
  int *v96;
  _DWORD *v97;
  int *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  std::string *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  std::string *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  void **v125;
  void **v126;
  void **v127;
  void **v128;
  char v129;
  char v130;
  char v131;
  unint64_t v132;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v127 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v128 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  v125 = (void **)(a4 + 48);
  v126 = (void **)(a4 + 24);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_184;
    v124 = v10;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_46;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_45:
          v32 = (uint64_t)&a2[v25];
          goto LABEL_46;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_45;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_45;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (uint64_t)&a2[v30];
      if (v31 > 1)
        goto LABEL_47;
      v30 = v30;
LABEL_46:
      v32 -= v30;
LABEL_47:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_56;
        }
      }
      a2 = a3;
LABEL_56:
      if ((unsigned __int8 *)v32 == a2)
      {
        v39 = 0.0;
        v40 = 2143289344;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0.0;
        v40 = 2143289344;
        do
        {
          v132 = 0;
          v41 = dmlc::ParseFloat<float,false>(v32, (uint64_t *)&v132);
          v42 = v41;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            v39 = v41;
          }
          else if (v38 == *(_DWORD *)(a1 + 264))
          {
            v40 = LODWORD(v41);
          }
          else if (v132 == v32)
          {
            ++v37;
          }
          else
          {
            v44 = *(float **)(a4 + 152);
            v43 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (float *)*v128;
              v47 = ((char *)v44 - (_BYTE *)*v128) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v50);
                v46 = *(float **)(a4 + 144);
                v44 = *(float **)(a4 + 152);
              }
              else
              {
                v51 = 0;
              }
              v52 = (float *)&v51[4 * v47];
              *v52 = v42;
              v45 = v52 + 1;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44-- - 1);
                *((_DWORD *)v52-- - 1) = v53;
              }
              *(_QWORD *)(a4 + 144) = v52;
              *(_QWORD *)(a4 + 152) = v45;
              *(_QWORD *)(a4 + 160) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *v44 = v41;
              v45 = v44 + 1;
            }
            *(_QWORD *)(a4 + 152) = v45;
            v55 = *(char **)(a4 + 128);
            v54 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v127;
              v58 = (v55 - (_BYTE *)*v127) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v61);
                v57 = *(char **)(a4 + 120);
                v55 = *(char **)(a4 + 128);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[8 * v58];
              *(_QWORD *)v63 = v37;
              v56 = v63 + 8;
              while (v55 != v57)
              {
                v64 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              *(_QWORD *)(a4 + 120) = v63;
              *(_QWORD *)(a4 + 128) = v56;
              *(_QWORD *)(a4 + 136) = &v62[8 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_QWORD *)v55 = v37;
              v56 = v55 + 8;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v56;
          }
          if (v132 >= (unint64_t)a2)
            v65 = (unint64_t)a2;
          else
            v65 = v132;
          v32 = v65 - 1;
          do
          {
            v67 = (unsigned __int8 *)(v32 + 1);
            v66 = *(unsigned __int8 *)(v32 + 1);
            v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0)
              v68 = *(unsigned __int8 **)(a1 + 240);
            ++v32;
          }
          while (v67 != a2 && v66 != *v68);
          if ((unsigned __int8 *)v32 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 263);
            if (v72 >= 0)
              v73 = a1 + 240;
            else
              v73 = *(_QWORD *)(a1 + 240);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 263);
            else
              v74 = *(_QWORD *)(a1 + 248);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 263);
            if (v78 >= 0)
              v79 = a1 + 240;
            else
              v79 = *(_QWORD *)(a1 + 240);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 263);
            else
              v80 = *(_QWORD *)(a1 + 248);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
          }
          ++v38;
          if (v67 != a2)
            ++v32;
        }
        while ((unsigned __int8 *)v32 != a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v126;
        v88 = (v85 - (_BYTE *)*v126) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(float *)v93 = v39;
        v86 = v93 + 4;
        while (v85 != v87)
        {
          v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(float *)v85 = v39;
        v86 = v85 + 4;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v96 = *(int **)(a4 + 56);
      v95 = *(_QWORD *)(a4 + 64);
      if ((unint64_t)v96 >= v95)
      {
        v98 = (int *)*v125;
        v99 = ((char *)v96 - (_BYTE *)*v125) >> 2;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v101 = v95 - (_QWORD)v98;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v102);
          v98 = *(int **)(a4 + 48);
          v96 = *(int **)(a4 + 56);
        }
        else
        {
          v103 = 0;
        }
        v104 = (int *)&v103[4 * v99];
        *v104 = v40;
        v97 = v104 + 1;
        while (v96 != v98)
        {
          v105 = *--v96;
          *--v104 = v105;
        }
        *(_QWORD *)(a4 + 48) = v104;
        *(_QWORD *)(a4 + 56) = v97;
        *(_QWORD *)(a4 + 64) = &v103[4 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v96 = v40;
        v97 = v96 + 1;
      }
      *(_QWORD *)(a4 + 56) = v97;
      v106 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
      v108 = *(uint64_t **)(a4 + 8);
      v107 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v108 >= v107)
      {
        v109 = *(uint64_t **)a4;
        v110 = ((uint64_t)v108 - *(_QWORD *)a4) >> 3;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v112 = v107 - (_QWORD)v109;
        if (v112 >> 2 > v111)
          v111 = v112 >> 2;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v124, v113);
          v109 = *(uint64_t **)a4;
          v108 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v114 = 0;
        }
        v115 = (uint64_t *)&v114[8 * v110];
        *v115 = v106;
        v11 = v115 + 1;
        while (v108 != v109)
        {
          v116 = *--v108;
          *--v115 = v116;
        }
        *(_QWORD *)a4 = v115;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v114[8 * v113];
        if (v109)
          operator delete(v109);
      }
      else
      {
        *v108 = v106;
        v11 = v108 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_184;
      }
    }
  }
  v24 = v21;
LABEL_184:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v118 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v130);
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v130);
  }
  v120 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v120)
  {
    if ((v120 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v122 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
    }
  }
}

void sub_220E595A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a21);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7A20;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(_QWORD *)a1 = off_24E6B7A70;
  v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E59660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(_QWORD *)v10 = off_24E6B7A70;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,int>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7970;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  return dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,int>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7970;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  dmlc::data::TextParserBase<unsigned int,int>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E59748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
}

BOOL dmlc::data::ParserImpl<unsigned int,int>::Next(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    v5 = v3;
    v6 = v3 <= i ? i : v3;
    v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 + v7) - *(_QWORD *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,int>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v3 = 0;
    i = -1171354717 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,int>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,int>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 104);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v13 = 0x1745D1745D1745DLL;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 22 * v13;
      v15 = (uint64_t *)operator new(176 * v13);
      v16 = &v15[22 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[22 * (int)v6];
      v18 = 176 * (int)v6 - 176 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(_QWORD *)(v8 + v21 - 160);
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *(_QWORD *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(_QWORD *)(v8 + v21 - 136);
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_QWORD *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(_QWORD *)(v8 + v21 - 112);
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *(_QWORD *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(_QWORD *)(v8 + v21 - 88);
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_QWORD *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(_QWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 80) = 0;
          *(_QWORD *)(v22 - 72) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 56);
          *(_QWORD *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(_QWORD *)(v8 + v21 - 40);
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_QWORD *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(_QWORD *)(v8 + v21 - 16);
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *(_QWORD *)(v22 - 16) = 0;
          *(v23 - 1) = *(_QWORD *)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 176 * v10;
    v29 = 176 * (int)v6 - 16 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[22 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 112) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,int>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E59E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned int,int>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  std::string *v110;
  _QWORD *v111;
  _QWORD *v112;
  void **v113;
  void **v114;
  void **v115;
  char v116;
  char v117;
  char v118;
  char *__endptr;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v114 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v115 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_166;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_45;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_44:
          v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_44;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (char *)&a2[v30];
      if (v31 > 1)
        goto LABEL_46;
      v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        v39 = 0;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          __endptr = 0;
          v40 = strtoll(v32, &__endptr, 0);
          v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            v32 = __endptr;
            v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            v43 = *(char **)(a4 + 152);
            v42 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v115;
              v46 = (v43 - (_BYTE *)*v115) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v49);
                v45 = *(char **)(a4 + 144);
                v43 = *(char **)(a4 + 152);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = v41;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a4 + 144) = v51;
              *(_QWORD *)(a4 + 152) = v44;
              *(_QWORD *)(a4 + 160) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = v40;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a4 + 152) = v44;
            v54 = *(char **)(a4 + 128);
            v53 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (char *)*v114;
              v57 = (v54 - (_BYTE *)*v114) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 1 > v58)
                v58 = v59 >> 1;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v60);
                v56 = *(char **)(a4 + 120);
                v54 = *(char **)(a4 + 128);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[4 * v57];
              *(_DWORD *)v62 = v37;
              v55 = v62 + 4;
              while (v54 != v56)
              {
                v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(_QWORD *)(a4 + 120) = v62;
              *(_QWORD *)(a4 + 128) = v55;
              *(_QWORD *)(a4 + 136) = &v61[4 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_DWORD *)v54 = v37;
              v55 = v54 + 4;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v55;
            v32 = __endptr;
          }
          if (v32 >= (char *)a2)
            v64 = (char *)a2;
          else
            v64 = v32;
          v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            v67 = v65 + 1;
            v66 = v65[1];
            v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0)
              v68 = *(unsigned __int8 **)(a1 + 232);
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 255);
            if (v72 >= 0)
              v73 = a1 + 232;
            else
              v73 = *(_QWORD *)(a1 + 232);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 255);
            else
              v74 = *(_QWORD *)(a1 + 240);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 255);
            if (v78 >= 0)
              v79 = a1 + 232;
            else
              v79 = *(_QWORD *)(a1 + 232);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 255);
            else
              v80 = *(_QWORD *)(a1 + 240);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2)
            v32 = (char *)v65;
          else
            v32 = (char *)(v65 + 1);
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v113;
        v88 = (v85 - (_BYTE *)*v113) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(_DWORD *)v93 = v39;
        v86 = v93 + 4;
        while (v85 != v87)
        {
          v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_DWORD *)v85 = v39;
        v86 = v85 + 4;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v95 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
      v97 = *(uint64_t **)(a4 + 8);
      v96 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        v98 = *(uint64_t **)a4;
        v99 = ((uint64_t)v97 - *(_QWORD *)a4) >> 3;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v101 = v96 - (_QWORD)v98;
        if (v101 >> 2 > v100)
          v100 = v101 >> 2;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          v98 = *(uint64_t **)a4;
          v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v103 = 0;
        }
        v104 = (uint64_t *)&v103[8 * v99];
        *v104 = v95;
        v11 = v104 + 1;
        while (v97 != v98)
        {
          v105 = *--v97;
          *--v104 = v105;
        }
        *(_QWORD *)a4 = v104;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v103[8 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v97 = v95;
        v11 = v97 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  v109 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v111 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_220E5A6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,int>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7B68;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)a1 = off_24E6B7BB8;
  v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E5A92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(_QWORD *)v10 = off_24E6B7BB8;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,int>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7AB8;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  return dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,int>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7AB8;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  dmlc::data::TextParserBase<unsigned long long,int>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E5AA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
}

BOOL dmlc::data::ParserImpl<unsigned long long,int>::Next(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[4];

  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v5 = v4 <= i ? i : v4;
    v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(_QWORD *)(a1 + 8) = ++v4;
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(v7 + v6) - *(_QWORD *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,int>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v4 = 0;
    i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,int>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,int>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 112);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21)
        v13 = 0x1642C8590B21642;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1642C8590B21642)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 23 * v13;
      v15 = (uint64_t *)operator new(184 * v13);
      v16 = &v15[23 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[23 * (int)v6];
      v18 = 184 * (int)v6 - 184 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(_QWORD *)(v8 + v21 - 168);
          *(_QWORD *)(v22 - 184) = 0;
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(_QWORD *)(v8 + v21 - 144);
          *(_QWORD *)(v22 - 160) = 0;
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(_QWORD *)(v8 + v21 - 120);
          *(_QWORD *)(v22 - 136) = 0;
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(_QWORD *)(v8 + v21 - 96);
          *(_QWORD *)(v22 - 112) = 0;
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(_QWORD *)(v8 + v21 - 72);
          *(_QWORD *)(v22 - 88) = 0;
          *(_QWORD *)(v22 - 80) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(_QWORD *)(v8 + v21 - 48);
          *(_QWORD *)(v22 - 64) = 0;
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(_QWORD *)(v8 + v21 - 24);
          *(_QWORD *)(v22 - 40) = 0;
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 184 * v10;
    v29 = 184 * (int)v6 - 8 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[23 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 120) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,int>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E5B160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned long long,int>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  std::string *v110;
  _QWORD *v111;
  _QWORD *v112;
  void **v113;
  void **v114;
  void **v115;
  char v116;
  char v117;
  char v118;
  char *__endptr;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v114 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v115 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_166;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_45;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_44:
          v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_44;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (char *)&a2[v30];
      if (v31 > 1)
        goto LABEL_46;
      v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        v39 = 0;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          __endptr = 0;
          v40 = strtoll(v32, &__endptr, 0);
          v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            v32 = __endptr;
            v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            v43 = *(char **)(a4 + 152);
            v42 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v115;
              v46 = (v43 - (_BYTE *)*v115) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 160, v49);
                v45 = *(char **)(a4 + 144);
                v43 = *(char **)(a4 + 152);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = v41;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a4 + 144) = v51;
              *(_QWORD *)(a4 + 152) = v44;
              *(_QWORD *)(a4 + 160) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = v40;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a4 + 152) = v44;
            v54 = *(char **)(a4 + 128);
            v53 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (char *)*v114;
              v57 = (v54 - (_BYTE *)*v114) >> 3;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 2 > v58)
                v58 = v59 >> 2;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v60);
                v56 = *(char **)(a4 + 120);
                v54 = *(char **)(a4 + 128);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[8 * v57];
              *(_QWORD *)v62 = v37;
              v55 = v62 + 8;
              while (v54 != v56)
              {
                v63 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(_QWORD *)(a4 + 120) = v62;
              *(_QWORD *)(a4 + 128) = v55;
              *(_QWORD *)(a4 + 136) = &v61[8 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_QWORD *)v54 = v37;
              v55 = v54 + 8;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v55;
            v32 = __endptr;
          }
          if (v32 >= (char *)a2)
            v64 = (char *)a2;
          else
            v64 = v32;
          v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            v67 = v65 + 1;
            v66 = v65[1];
            v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0)
              v68 = *(unsigned __int8 **)(a1 + 240);
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 263);
            if (v72 >= 0)
              v73 = a1 + 240;
            else
              v73 = *(_QWORD *)(a1 + 240);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 263);
            else
              v74 = *(_QWORD *)(a1 + 248);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 263);
            if (v78 >= 0)
              v79 = a1 + 240;
            else
              v79 = *(_QWORD *)(a1 + 240);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 263);
            else
              v80 = *(_QWORD *)(a1 + 248);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2)
            v32 = (char *)v65;
          else
            v32 = (char *)(v65 + 1);
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v113;
        v88 = (v85 - (_BYTE *)*v113) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(_DWORD *)v93 = v39;
        v86 = v93 + 4;
        while (v85 != v87)
        {
          v94 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_DWORD *)v85 = v39;
        v86 = v85 + 4;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v95 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
      v97 = *(uint64_t **)(a4 + 8);
      v96 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        v98 = *(uint64_t **)a4;
        v99 = ((uint64_t)v97 - *(_QWORD *)a4) >> 3;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v101 = v96 - (_QWORD)v98;
        if (v101 >> 2 > v100)
          v100 = v101 >> 2;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          v98 = *(uint64_t **)a4;
          v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v103 = 0;
        }
        v104 = (uint64_t *)&v103[8 * v99];
        *v104 = v95;
        v11 = v104 + 1;
        while (v97 != v98)
        {
          v105 = *--v97;
          *--v104 = v105;
        }
        *(_QWORD *)a4 = v104;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v103[8 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v97 = v95;
        v11 = v97 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 2) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  v109 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v111 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_220E5B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,int>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,int>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7CB0;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 128));
  *(_QWORD *)a1 = off_24E6B7D00;
  v4 = (void **)(a1 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E5BBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 136));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 128));
  *(_QWORD *)v10 = off_24E6B7D00;
  a10 = (void **)(v10 + 16);
  std::vector<dmlc::data::RowBlockContainer<unsigned int,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned int,long long>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7C00;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  return dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned int,long long>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7C00;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  dmlc::data::TextParserBase<unsigned int,long long>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E5BCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C405F535ED3);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
}

BOOL dmlc::data::ParserImpl<unsigned int,long long>::Next(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a1 + 12); ; *(_DWORD *)(a1 + 12) = i)
  {
    v5 = v3;
    v6 = v3 <= i ? i : v3;
    v7 = (176 * v3) | 8;
    while (v6 != v5)
    {
      *(_DWORD *)(a1 + 8) = ++v5;
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(v8 + v7) - *(_QWORD *)(v8 + v7 - 8);
      v7 += 176;
      if (v9 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned int,long long>::GetBlock(v13, (uint64_t *)(v8 + v7 - 184));
        v10 = v13[1];
        *(_OWORD *)(a1 + 40) = v13[0];
        *(_OWORD *)(a1 + 56) = v10;
        v11 = v13[3];
        *(_OWORD *)(a1 + 72) = v13[2];
        *(_OWORD *)(a1 + 88) = v11;
        v6 = v5 - 1;
        return v6 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v3 = 0;
    i = -1171354717 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return v6 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned int,long long>::Value(uint64_t a1)
{
  return a1 + 40;
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t dmlc::data::TextParserBase<unsigned int,long long>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 104);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)((uint64_t)v11 - v8) >> 4) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0x5D1745D1745D1746 * (((char *)v11 - (char *)v7) >> 4);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v7) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
        v13 = 0x1745D1745D1745DLL;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 22 * v13;
      v15 = (uint64_t *)operator new(176 * v13);
      v16 = &v15[22 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[22 * (int)v6];
      v18 = 176 * (int)v6 - 176 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19 += 22;
        v18 -= 176;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *((_OWORD *)v23 - 11) = *(_OWORD *)(v8 + v21 - 176);
          *(v23 - 20) = *(_QWORD *)(v8 + v21 - 160);
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *(_QWORD *)(v22 - 160) = 0;
          *(_OWORD *)(v23 - 19) = *(_OWORD *)(v8 + v21 - 152);
          *(v23 - 17) = *(_QWORD *)(v8 + v21 - 136);
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_QWORD *)(v22 - 136) = 0;
          *((_OWORD *)v23 - 8) = *(_OWORD *)(v8 + v21 - 128);
          *(v23 - 14) = *(_QWORD *)(v8 + v21 - 112);
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *(_QWORD *)(v22 - 112) = 0;
          *(_OWORD *)(v23 - 13) = *(_OWORD *)(v8 + v21 - 104);
          *(v23 - 11) = *(_QWORD *)(v8 + v21 - 88);
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_QWORD *)(v22 - 88) = 0;
          *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v21 - 80);
          *(v23 - 8) = *(_QWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 80) = 0;
          *(_QWORD *)(v22 - 72) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 56);
          *(_QWORD *)(v22 - 64) = 0;
          *(_OWORD *)(v23 - 7) = v24;
          *(v23 - 5) = *(_QWORD *)(v8 + v21 - 40);
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_QWORD *)(v22 - 40) = 0;
          *((_OWORD *)v23 - 2) = *(_OWORD *)(v8 + v21 - 32);
          *(v23 - 2) = *(_QWORD *)(v8 + v21 - 16);
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *(_QWORD *)(v22 - 16) = 0;
          *(v23 - 1) = *(_QWORD *)(v8 + v21 - 8);
          v21 -= 176;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned int,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 176 * v10;
    v29 = 176 * (int)v6 - 16 * ((uint64_t)(v8 - (_QWORD)*a2) >> 4);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      v8 += 176;
      v29 -= 176;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[22 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 176;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 112) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,long long>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 128));
  *(_DWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E5C42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned int,long long>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  std::string *v110;
  _QWORD *v111;
  _QWORD *v112;
  void **v113;
  void **v114;
  void **v115;
  char v116;
  char v117;
  char v118;
  char *__endptr;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v114 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v115 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_166;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_45;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_44:
          v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_44;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (char *)&a2[v30];
      if (v31 > 1)
        goto LABEL_46;
      v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        v39 = 0;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          __endptr = 0;
          v40 = strtoll(v32, &__endptr, 0);
          v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 224))
          {
            v32 = __endptr;
            v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            v43 = *(uint64_t **)(a4 + 152);
            v42 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (uint64_t *)*v115;
              v46 = ((char *)v43 - (_BYTE *)*v115) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 160, v49);
                v45 = *(uint64_t **)(a4 + 144);
                v43 = *(uint64_t **)(a4 + 152);
              }
              else
              {
                v50 = 0;
              }
              v51 = (uint64_t *)&v50[8 * v46];
              *v51 = v41;
              v44 = v51 + 1;
              while (v43 != v45)
              {
                v52 = *--v43;
                *--v51 = v52;
              }
              *(_QWORD *)(a4 + 144) = v51;
              *(_QWORD *)(a4 + 152) = v44;
              *(_QWORD *)(a4 + 160) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *v43 = v40;
              v44 = v43 + 1;
            }
            *(_QWORD *)(a4 + 152) = v44;
            v54 = *(char **)(a4 + 128);
            v53 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (char *)*v114;
              v57 = (v54 - (_BYTE *)*v114) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 1 > v58)
                v58 = v59 >> 1;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 136, v60);
                v56 = *(char **)(a4 + 120);
                v54 = *(char **)(a4 + 128);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[4 * v57];
              *(_DWORD *)v62 = v37;
              v55 = v62 + 4;
              while (v54 != v56)
              {
                v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(_QWORD *)(a4 + 120) = v62;
              *(_QWORD *)(a4 + 128) = v55;
              *(_QWORD *)(a4 + 136) = &v61[4 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_DWORD *)v54 = v37;
              v55 = v54 + 4;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v55;
            v32 = __endptr;
          }
          if (v32 >= (char *)a2)
            v64 = (char *)a2;
          else
            v64 = v32;
          v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            v67 = v65 + 1;
            v66 = v65[1];
            v68 = (unsigned __int8 *)(a1 + 232);
            if (*(char *)(a1 + 255) < 0)
              v68 = *(unsigned __int8 **)(a1 + 232);
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 255);
            if (v72 >= 0)
              v73 = a1 + 232;
            else
              v73 = *(_QWORD *)(a1 + 232);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 255);
            else
              v74 = *(_QWORD *)(a1 + 240);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 255);
            if (v78 >= 0)
              v79 = a1 + 232;
            else
              v79 = *(_QWORD *)(a1 + 232);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 255);
            else
              v80 = *(_QWORD *)(a1 + 240);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2)
            v32 = (char *)v65;
          else
            v32 = (char *)(v65 + 1);
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v113;
        v88 = (v85 - (_BYTE *)*v113) >> 3;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 2 > v89)
          v89 = v90 >> 2;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = (uint64_t *)&v92[8 * v88];
        *v93 = v39;
        v86 = v93 + 1;
        while (v85 != v87)
        {
          v94 = *((_QWORD *)v85 - 1);
          v85 -= 8;
          *--v93 = v94;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[8 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_QWORD *)v85 = v39;
        v86 = v85 + 8;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v95 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 2;
      v97 = *(uint64_t **)(a4 + 8);
      v96 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        v98 = *(uint64_t **)a4;
        v99 = ((uint64_t)v97 - *(_QWORD *)a4) >> 3;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v101 = v96 - (_QWORD)v98;
        if (v101 >> 2 > v100)
          v100 = v101 >> 2;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          v98 = *(uint64_t **)a4;
          v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v103 = 0;
        }
        v104 = (uint64_t *)&v103[8 * v99];
        *v104 = v95;
        v11 = v104 + 1;
        while (v97 != v98)
        {
          v105 = *--v97;
          *--v104 = v105;
        }
        *(_QWORD *)a4 = v104;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v103[8 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v97 = v95;
        v11 = v97 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 3) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  v109 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v111 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_220E5CC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,long long>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 176 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_24E6B7DF8;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)a1 = off_24E6B7E48;
  v4 = (void **)(a1 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void sub_220E5CEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  std::mutex::~mutex((std::mutex *)(v10 + 144));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v10 + 136));
  *(_QWORD *)v10 = off_24E6B7E48;
  a10 = (void **)(v10 + 24);
  std::vector<dmlc::data::RowBlockContainer<unsigned long long,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::CSVParser<unsigned long long,long long>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7D48;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  return dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(a1);
}

void dmlc::data::CSVParser<unsigned long long,long long>::~CSVParser(uint64_t a1)
{
  *(_QWORD *)a1 = off_24E6B7D48;
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  dmlc::data::TextParserBase<unsigned long long,long long>::~TextParserBase(a1);
  JUMPOUT(0x227667068);
}

void sub_220E5CFA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C40C231C275);
  _Unwind_Resume(a1);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::BeforeFirst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
}

BOOL dmlc::data::ParserImpl<unsigned long long,long long>::Next(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[4];

  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v5 = v4 <= i ? i : v4;
    v6 = 184 * v4 + 8;
    while (v5 != v4)
    {
      *(_QWORD *)(a1 + 8) = ++v4;
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(v7 + v6) - *(_QWORD *)(v7 + v6 - 8);
      v6 += 184;
      if (v8 != 8)
      {
        dmlc::data::RowBlockContainer<unsigned long long,long long>::GetBlock(v12, (uint64_t *)(v7 + v6 - 192));
        v9 = v12[1];
        *(_OWORD *)(a1 + 48) = v12[0];
        *(_OWORD *)(a1 + 64) = v9;
        v10 = v12[3];
        *(_OWORD *)(a1 + 80) = v12[2];
        *(_OWORD *)(a1 + 96) = v10;
        v5 = v4 - 1;
        return v5 < i;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2))
      break;
    v4 = 0;
    i = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return v5 < i;
}

uint64_t dmlc::data::ParserImpl<unsigned long long,long long>::Value(uint64_t a1)
{
  return a1 + 48;
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::BytesRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t dmlc::data::TextParserBase<unsigned long long,long long>::ParseNext(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  std::__thread_struct *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  pthread_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  int64x2_t v48;
  uint64_t *v49;
  uint64_t v50;
  std::string *Entry;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  unsigned int v64;
  int64x2_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  pthread_t v69;
  uint64_t *v70;
  int64x2_t v71;
  uint64_t *v72;
  unint64_t *v73;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), &v67);
  v5 = v4;
  if (!(_DWORD)v4)
    return v5;
  v6 = *(unsigned int *)(a1 + 112);
  v7 = *a2;
  v8 = (unint64_t)a2[1];
  v9 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
  v10 = (int)v6 - v9;
  if ((int)v6 > v9)
  {
    v11 = a2[2];
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)((uint64_t)v11 - v8) >> 3) < v10)
    {
      if ((v6 & 0x80000000) != 0)
        goto LABEL_62;
      v63 = v4;
      v62 = a2[2];
      v12 = 0xA6F4DE9BD37A6F4ELL * (v11 - v7);
      if (v12 <= (int)v6)
        v12 = (int)v6;
      if (0xD37A6F4DE9BD37A7 * (v11 - v7) >= 0xB21642C8590B21)
        v13 = 0x1642C8590B21642;
      else
        v13 = v12;
      v73 = (unint64_t *)(a2 + 2);
      if (v13 > 0x1642C8590B21642)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = 23 * v13;
      v15 = (uint64_t *)operator new(184 * v13);
      v16 = &v15[23 * v9];
      v70 = v15;
      v71.i64[0] = (uint64_t)v16;
      v61 = &v15[v14];
      v72 = &v15[v14];
      v17 = &v15[23 * (int)v6];
      v18 = 184 * (int)v6 - 184 * v9;
      v19 = v16;
      do
      {
        v19[20] = 0;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        v20 = operator new(8uLL);
        *v20 = 0;
        v19[1] = (uint64_t)(v20 + 1);
        v19[2] = (uint64_t)(v20 + 1);
        *v19 = (uint64_t)v20;
        v19[4] = 0;
        v19[13] = 0;
        v19[16] = 0;
        v19[19] = 0;
        v19[7] = 0;
        v19[10] = 0;
        v19[21] = 0;
        v19[22] = 0;
        v19 += 23;
        v18 -= 184;
      }
      while (v18);
      v71.i64[1] = (uint64_t)v17;
      v5 = v63;
      if ((uint64_t *)v8 == v7)
      {
        v25 = vdupq_n_s64(v8);
        v27 = v61;
        v26 = v62;
      }
      else
      {
        v21 = 0;
        do
        {
          v22 = v8 + v21;
          v23 = &v16[v21 / 8];
          *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 + v21 - 184);
          *(v23 - 21) = *(_QWORD *)(v8 + v21 - 168);
          *(_QWORD *)(v22 - 184) = 0;
          *(_QWORD *)(v22 - 176) = 0;
          *(_QWORD *)(v22 - 168) = 0;
          *((_OWORD *)v23 - 10) = *(_OWORD *)(v8 + v21 - 160);
          *(v23 - 18) = *(_QWORD *)(v8 + v21 - 144);
          *(_QWORD *)(v22 - 160) = 0;
          *(_QWORD *)(v22 - 152) = 0;
          *(_QWORD *)(v22 - 144) = 0;
          *(_OWORD *)(v23 - 17) = *(_OWORD *)(v8 + v21 - 136);
          *(v23 - 15) = *(_QWORD *)(v8 + v21 - 120);
          *(_QWORD *)(v22 - 136) = 0;
          *(_QWORD *)(v22 - 128) = 0;
          *(_QWORD *)(v22 - 120) = 0;
          *((_OWORD *)v23 - 7) = *(_OWORD *)(v8 + v21 - 112);
          *(v23 - 12) = *(_QWORD *)(v8 + v21 - 96);
          *(_QWORD *)(v22 - 112) = 0;
          *(_QWORD *)(v22 - 104) = 0;
          *(_QWORD *)(v22 - 96) = 0;
          *(_OWORD *)(v23 - 11) = *(_OWORD *)(v8 + v21 - 88);
          *(v23 - 9) = *(_QWORD *)(v8 + v21 - 72);
          *(_QWORD *)(v22 - 88) = 0;
          *(_QWORD *)(v22 - 80) = 0;
          v24 = *(_OWORD *)(v8 + v21 - 64);
          *(_QWORD *)(v22 - 72) = 0;
          *((_OWORD *)v23 - 4) = v24;
          *(v23 - 6) = *(_QWORD *)(v8 + v21 - 48);
          *(_QWORD *)(v22 - 64) = 0;
          *(_QWORD *)(v22 - 56) = 0;
          *(_QWORD *)(v22 - 48) = 0;
          *(_OWORD *)(v23 - 5) = *(_OWORD *)(v8 + v21 - 40);
          *(v23 - 3) = *(_QWORD *)(v8 + v21 - 24);
          *(_QWORD *)(v22 - 40) = 0;
          *(_QWORD *)(v22 - 32) = 0;
          *(_QWORD *)(v22 - 24) = 0;
          *((_OWORD *)v23 - 1) = *(_OWORD *)(v8 + v21 - 16);
          v21 -= 184;
        }
        while ((uint64_t *)(v8 + v21) != v7);
        v25 = *(int64x2_t *)a2;
        v26 = a2[2];
        v16 = (uint64_t *)((char *)v16 + v21);
        v17 = (uint64_t *)v71.i64[1];
        v27 = v72;
      }
      *a2 = v16;
      a2[1] = v17;
      v71 = v25;
      a2[2] = v27;
      v72 = v26;
      v70 = (uint64_t *)v25.i64[0];
      std::__split_buffer<dmlc::data::RowBlockContainer<unsigned long long,float>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_26;
    }
    v28 = v8 + 184 * v10;
    v29 = 184 * (int)v6 - 8 * ((uint64_t)(v8 - (_QWORD)*a2) >> 3);
    do
    {
      *(_QWORD *)(v8 + 160) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      v30 = operator new(8uLL);
      *v30 = 0;
      *(_QWORD *)(v8 + 8) = v30 + 1;
      *(_QWORD *)(v8 + 16) = v30 + 1;
      *(_QWORD *)v8 = v30;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_QWORD *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      v8 += 184;
      v29 -= 184;
    }
    while (v29);
    goto LABEL_23;
  }
  if ((int)v6 < v9)
  {
    v28 = (unint64_t)&v7[23 * (int)v6];
    while (v8 != v28)
    {
      v8 -= 184;
      dmlc::data::RowBlockContainer<unsigned int,float>::~RowBlockContainer(v8);
    }
LABEL_23:
    a2[1] = (uint64_t *)v28;
  }
LABEL_26:
  v31 = v68;
  *(_QWORD *)(a1 + 120) += v68;
  v65.i32[0] = 0;
  if (!v31)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v70);
    if (v70)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/././text_parser.h");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"chunk.size != 0U", 16);
      v56 = *((char *)v70 + 23);
      v57 = v56 >= 0 ? v70 : (uint64_t *)*v70;
      v58 = v56 >= 0 ? *((unsigned __int8 *)v70 + 23) : v70[1];
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v60 = v70;
      v70 = 0;
      if (v60)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v70, (uint64_t)v60);
    }
  }
  v32 = v67;
  v65 = 0uLL;
  v66 = 0;
  if ((int)v6 >= 1)
  {
    v64 = v5;
    v33 = 0;
    while (1)
    {
      v34 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v34);
      v35 = operator new();
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = &v67;
      *(_QWORD *)(v35 + 16) = v32;
      *(_QWORD *)(v35 + 24) = a2;
      *(_DWORD *)(v35 + 32) = v6;
      *(_DWORD *)(v35 + 36) = v33;
      *(_QWORD *)(v35 + 40) = a1;
      v70 = (uint64_t *)v35;
      v36 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,long long>> *)::{lambda(void)#1}>>, (void *)v35);
      if (v36)
        break;
      v70 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v70);
      v37 = (_QWORD *)v65.i64[1];
      if (v65.i64[1] >= v66)
      {
        v39 = (_QWORD *)v65.i64[0];
        v40 = (v65.i64[1] - v65.i64[0]) >> 3;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v42 = v66 - v65.i64[0];
        if ((uint64_t)(v66 - v65.i64[0]) >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v73 = &v66;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::data::RowBlockContainer<unsigned int,float> **>>(v43);
          v37 = (_QWORD *)v65.i64[1];
          v39 = (_QWORD *)v65.i64[0];
        }
        else
        {
          v44 = 0;
        }
        v45 = (pthread_t *)(v43 + 8 * v40);
        v46 = v43 + 8 * v44;
        v72 = (uint64_t *)v46;
        *v45 = v69;
        v69 = 0;
        v71.i64[1] = (uint64_t)(v45 + 1);
        if (v37 == v39)
        {
          v38 = v45 + 1;
        }
        else
        {
          do
          {
            v47 = (_opaque_pthread_t *)*--v37;
            *--v45 = v47;
            *v37 = 0;
          }
          while (v37 != v39);
          v38 = (_QWORD *)v71.i64[1];
          v46 = (unint64_t)v72;
        }
        v48 = v65;
        v65.i64[0] = (uint64_t)v45;
        v65.i64[1] = (uint64_t)v38;
        v71 = v48;
        v49 = (uint64_t *)v66;
        v66 = v46;
        v72 = v49;
        v70 = (uint64_t *)v48.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_QWORD *)v65.i64[1] = v69;
        v38 = v37 + 1;
        v69 = 0;
      }
      v65.i64[1] = (uint64_t)v38;
      std::thread::~thread((std::thread *)&v69);
      if (++v33 == (_DWORD)v6)
      {
        v50 = 0;
        v5 = v64;
        do
        {
          std::thread::join((std::thread *)(v65.i64[0] + v50));
          v50 += 8;
        }
        while (8 * v6 != v50);
        goto LABEL_49;
      }
    }
    std::__throw_system_error(v36, "thread constructor failed");
    __break(1u);
LABEL_62:
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  }
LABEL_49:
  dmlc::OMPException::Rethrow((std::exception_ptr *)(a1 + 136));
  *(_QWORD *)(a1 + 8) = 0;
  v70 = (uint64_t *)&v65;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  return v5;
}

void sub_220E5D6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::thread a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v23;

  v23 = a20;
  a20 = 0;
  if (v23)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  _Unwind_Resume(exception_object);
}

void dmlc::data::CSVParser<unsigned long long,long long>::ParseBlock(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::string *Entry;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  std::string *v110;
  _QWORD *v111;
  _QWORD *v112;
  void **v113;
  void **v114;
  void **v115;
  char v116;
  char v117;
  char v118;
  char *__endptr;

  v8 = *(uint64_t **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v10 = a4 + 16;
  v9 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v12 = v9 - (_QWORD)v8;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v14);
    v16 = *(uint64_t **)a4;
    v17 = *(uint64_t **)(a4 + 8);
    v19 = &v15[v18];
    *v15 = 0;
    v11 = v15 + 1;
    while (v17 != v16)
    {
      v20 = *--v17;
      *--v15 = v20;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v19;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v8 = 0;
    v11 = v8 + 1;
  }
  v21 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = v11;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 104) = *(_QWORD *)(a4 + 96);
  v114 = (void **)(a4 + 120);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a4 + 120);
  v115 = (void **)(a4 + 144);
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a4 + 144);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  v113 = (void **)(a4 + 24);
  if (a2 != a3)
  {
    do
    {
      v22 = *a2;
      if (v22 != 13 && v22 != 10)
        goto LABEL_21;
      ++a2;
    }
    while (a2 != a3);
    a2 = a3;
LABEL_21:
    v24 = v21;
    if (a2 == a3)
      goto LABEL_166;
    while (1)
    {
      if (!a2)
      {
        v30 = 0;
        v32 = 0;
        goto LABEL_45;
      }
      v25 = 0;
      do
      {
        v26 = a2[v25];
        if (v26 != 239 && (_DWORD)v25 == 0)
        {
          v30 = 0;
LABEL_44:
          v32 = (char *)&a2[v25];
          goto LABEL_45;
        }
        if (v26 != 187 && (_DWORD)v25 == 1)
        {
          v30 = 1;
          goto LABEL_44;
        }
        if (v26 != 191 && (_DWORD)v25 == 2)
        {
          v30 = 2;
          goto LABEL_44;
        }
        v30 = v25 + 1;
        v31 = v25;
        if (&a2[v25 + 1] == a3)
          break;
        ++v25;
      }
      while (v31 < 2);
      v32 = (char *)&a2[v30];
      if (v31 > 1)
        goto LABEL_46;
      v30 = v30;
LABEL_45:
      v32 -= v30;
LABEL_46:
      v33 = (unsigned __int8 *)(v32 + 1);
      while (v33 != a3)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 == 13 || v34 == 10)
        {
          a2 = v33 - 1;
          goto LABEL_55;
        }
      }
      a2 = a3;
LABEL_55:
      if (v32 == (char *)a2)
      {
        v39 = 0;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          __endptr = 0;
          v40 = strtoll(v32, &__endptr, 0);
          v41 = v40;
          if (v38 == *(_DWORD *)(a1 + 232))
          {
            v32 = __endptr;
            v39 = v40;
          }
          else if (__endptr == v32)
          {
            ++v37;
          }
          else
          {
            v43 = *(uint64_t **)(a4 + 152);
            v42 = *(_QWORD *)(a4 + 160);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (uint64_t *)*v115;
              v46 = ((char *)v43 - (_BYTE *)*v115) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 160, v49);
                v45 = *(uint64_t **)(a4 + 144);
                v43 = *(uint64_t **)(a4 + 152);
              }
              else
              {
                v50 = 0;
              }
              v51 = (uint64_t *)&v50[8 * v46];
              *v51 = v41;
              v44 = v51 + 1;
              while (v43 != v45)
              {
                v52 = *--v43;
                *--v51 = v52;
              }
              *(_QWORD *)(a4 + 144) = v51;
              *(_QWORD *)(a4 + 152) = v44;
              *(_QWORD *)(a4 + 160) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *v43 = v40;
              v44 = v43 + 1;
            }
            *(_QWORD *)(a4 + 152) = v44;
            v54 = *(char **)(a4 + 128);
            v53 = *(_QWORD *)(a4 + 136);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (char *)*v114;
              v57 = (v54 - (_BYTE *)*v114) >> 3;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 2 > v58)
                v58 = v59 >> 2;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 136, v60);
                v56 = *(char **)(a4 + 120);
                v54 = *(char **)(a4 + 128);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[8 * v57];
              *(_QWORD *)v62 = v37;
              v55 = v62 + 8;
              while (v54 != v56)
              {
                v63 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(_QWORD *)(a4 + 120) = v62;
              *(_QWORD *)(a4 + 128) = v55;
              *(_QWORD *)(a4 + 136) = &v61[8 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_QWORD *)v54 = v37;
              v55 = v54 + 8;
            }
            ++v37;
            *(_QWORD *)(a4 + 128) = v55;
            v32 = __endptr;
          }
          if (v32 >= (char *)a2)
            v64 = (char *)a2;
          else
            v64 = v32;
          v65 = (unsigned __int8 *)(v64 - 1);
          do
          {
            v67 = v65 + 1;
            v66 = v65[1];
            v68 = (unsigned __int8 *)(a1 + 240);
            if (*(char *)(a1 + 263) < 0)
              v68 = *(unsigned __int8 **)(a1 + 240);
            ++v65;
          }
          while (v67 != a2 && v66 != *v68);
          if (v65 == a2 && !v37)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
            v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v118);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Delimiter '", 11);
            v72 = *(char *)(a1 + 263);
            if (v72 >= 0)
              v73 = a1 + 240;
            else
              v73 = *(_QWORD *)(a1 + 240);
            if (v72 >= 0)
              v74 = *(unsigned __int8 *)(a1 + 263);
            else
              v74 = *(_QWORD *)(a1 + 248);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"' is not found in the line. ", 28);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Expected '", 10);
            v78 = *(char *)(a1 + 263);
            if (v78 >= 0)
              v79 = a1 + 240;
            else
              v79 = *(_QWORD *)(a1 + 240);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(a1 + 263);
            else
              v80 = *(_QWORD *)(a1 + 248);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' as the delimiter to separate fields.", 38);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v118);
          }
          ++v38;
          if (v67 == a2)
            v32 = (char *)v65;
          else
            v32 = (char *)(v65 + 1);
        }
        while (v32 != (char *)a2);
      }
      while (1)
      {
        v82 = *a2;
        if (v82 != 13 && v82 != 10)
          break;
        if (a2 == a3)
        {
          a2 = a3;
          break;
        }
        ++a2;
      }
      v85 = *(char **)(a4 + 32);
      v84 = *(_QWORD *)(a4 + 40);
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)*v113;
        v88 = (v85 - (_BYTE *)*v113) >> 3;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 2 > v89)
          v89 = v90 >> 2;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 40, v91);
          v87 = *(char **)(a4 + 24);
          v85 = *(char **)(a4 + 32);
        }
        else
        {
          v92 = 0;
        }
        v93 = (uint64_t *)&v92[8 * v88];
        *v93 = v39;
        v86 = v93 + 1;
        while (v85 != v87)
        {
          v94 = *((_QWORD *)v85 - 1);
          v85 -= 8;
          *--v93 = v94;
        }
        *(_QWORD *)(a4 + 24) = v93;
        *(_QWORD *)(a4 + 32) = v86;
        *(_QWORD *)(a4 + 40) = &v92[8 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_QWORD *)v85 = v39;
        v86 = v85 + 8;
      }
      *(_QWORD *)(a4 + 32) = v86;
      v95 = (uint64_t)(*(_QWORD *)(a4 + 128) - *(_QWORD *)(a4 + 120)) >> 3;
      v97 = *(uint64_t **)(a4 + 8);
      v96 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v97 >= v96)
      {
        v98 = *(uint64_t **)a4;
        v99 = ((uint64_t)v97 - *(_QWORD *)a4) >> 3;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v101 = v96 - (_QWORD)v98;
        if (v101 >> 2 > v100)
          v100 = v101 >> 2;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
          v102 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v102);
          v98 = *(uint64_t **)a4;
          v97 = *(uint64_t **)(a4 + 8);
        }
        else
        {
          v103 = 0;
        }
        v104 = (uint64_t *)&v103[8 * v99];
        *v104 = v95;
        v11 = v104 + 1;
        while (v97 != v98)
        {
          v105 = *--v97;
          *--v104 = v105;
        }
        *(_QWORD *)a4 = v104;
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = &v103[8 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v97 = v95;
        v11 = v97 + 1;
      }
      *(_QWORD *)(a4 + 8) = v11;
      if (a2 == a3)
      {
        v21 = *(_QWORD *)(a4 + 24);
        v24 = *(_QWORD *)(a4 + 32);
        goto LABEL_166;
      }
    }
  }
  v24 = v21;
LABEL_166:
  if (((v24 - v21) >> 3) + 1 != ((uint64_t)v11 - *(_QWORD *)a4) >> 3)
  {
    v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
    v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v117);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: out->label.size() + 1 == out->offset.size()", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v117);
  }
  v109 = *(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48);
  if (v109)
  {
    if ((v109 >> 2) + 1 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    {
      v110 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      dmlc::LogMessageFatal::Entry::Init(v110, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/data/csv_parser.h");
      v111 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"Check failed: out->weight.size() == 0 || out->weight.size() + 1 == out->offset.size()", 85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
    }
  }
}

void sub_220E5DF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, char a19)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned long long,long long>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned long long,long long>> *)::{lambda(void)#1}>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v18;

  v18 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *(int *)(a1 + 32);
  v6 = *(int *)(a1 + 36);
  v8 = (v5 + v7 - 1) / v7;
  if (v5 >= v8 * v6)
    v9 = v8 * v6;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v10 = v8 * (v6 + 1);
  if (v5 >= v10)
    v5 = v10;
  v11 = &v4[v9];
  if (v9)
  {
    while (1)
    {
      v12 = *v11;
      if (v12 == 10 || v12 == 13)
        break;
      if (--v11 == v4)
      {
        v11 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  v14 = &v4[v5];
  if ((_DWORD)v6 + 1 != (_DWORD)v7 && v5)
  {
    while (1)
    {
      v15 = *v14;
      if (v15 == 10 || v15 == 13)
        break;
      if (--v14 == v4)
      {
        v14 = *(unsigned __int8 **)(a1 + 16);
        break;
      }
    }
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v11, v14, **(_QWORD **)(a1 + 24) + 184 * (int)v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,dmlc::data::TextParserBase<unsigned int,float>::FillData(std::vector<dmlc::data::RowBlockContainer<unsigned int,float>> *)::{lambda(void)#1}>>::reset[abi:ne180100](&v18);
  return 0;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_colmaker__(xgboost::tree *this)
{
  return 0;
}

double std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_QWORD *)v0 = &off_24E6B7F80;
  *(_DWORD *)(v0 + 44) = 4;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_QWORD *)(v0 + 280) = 0;
  *(_QWORD *)(v0 + 288) = 0;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  return result;
}

void xgboost::tree::ColMaker::~ColMaker(void **this)
{
  xgboost::tree::ColMaker::~ColMaker(this);
  JUMPOUT(0x227667068);
}

{
  void **v2;
  void *v3;
  void *v4;
  void **v5;

  *this = &off_24E6B7F80;
  v2 = this + 24;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  v5 = this + 30;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = this + 27;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = this[21];
  if (v3)
  {
    this[22] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v4 = this[12];
  if (v4)
  {
    this[13] = v4;
    operator delete(v4);
  }
}

void xgboost::tree::ColMaker::LoadConfig(xgboost::tree::ColMaker *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  _DWORD **v5;
  xgboost::tree::ColMakerTrainParam *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _BYTE *v14;
  int v15;
  void *v16[2];
  char v17;
  std::vector<std::pair<std::string, std::string>> v18;
  std::vector<std::pair<std::string, std::string>> v19;
  void *__p;
  _QWORD *v21;
  uint64_t v22;
  __int128 *v23;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)&__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::ColMaker *)((char *)this + 16), &v19);
  v16[0] = &v19;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v16, "colmaker_train_param");
  v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)v16);
  v6 = (xgboost::tree::ColMakerTrainParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  v21 = 0;
  v22 = 0;
  __p = &v21;
  v7 = (_QWORD *)*((_QWORD *)v6 + 2);
  v8 = (_QWORD *)((char *)v6 + 24);
  if (v7 != (_QWORD *)((char *)v6 + 24))
  {
    do
    {
      v9 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v7[7]);
      v23 = (__int128 *)(v7 + 4);
      v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)v7 + 4, (uint64_t)&std::piecewise_construct, &v23);
      v6 = (xgboost::tree::ColMakerTrainParam *)std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v9 + 16));
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v8);
  }
  v15 = *((unsigned __int8 *)this + 152);
  v14 = (char *)this + 152;
  memset(&v18, 0, sizeof(v18));
  xgboost::tree::ColMakerTrainParam::__MANAGER__(v6);
  if (v15)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36758, (uint64_t)v14, __p, &v21, 0, &v18, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36758, (uint64_t)v14, __p, &v21, &v18, 0);
    *v14 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v21);
  __p = &v18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_220E5E430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  *(_QWORD *)(v26 - 56) = &a15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::SaveConfig(xgboost::tree::ColMaker *this, xgboost::Json *a2)
{
  unsigned int **v4;
  xgboost::tree::ColMakerTrainParam *v5;
  _QWORD **v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  unsigned int **v11;
  void *__p[2];
  uint64_t *v13;
  _QWORD *v14[2];
  std::vector<std::pair<std::string, std::string>> v15;
  _QWORD *v16;
  char v17;
  _QWORD **v18;
  _QWORD *v19[2];
  std::vector<std::pair<std::string, std::string>> *v20;

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::ColMaker *)((char *)this + 16), (uint64_t)&v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)&v15);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  v15.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v15.__end_cap_, v16);
  __p[1] = (void *)0x300000000;
  __p[0] = &off_24E6BE1D0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  xgboost::tree::ColMakerTrainParam::__MANAGER__(v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36758, (char *)this + 152, &v15);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v18, (const void **)&v15.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v15.__end_->first.__r_.__value_.__l.__data_);
  v20 = &v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v6 = v18;
  if (v18 != v19)
  {
    do
    {
      xgboost::JsonString::JsonString(&v15, (__int128 *)(v6 + 7));
      v20 = (std::vector<std::pair<std::string, std::string>> *)(v6 + 4);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v15);
      v15.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v17 < 0)
        operator delete(v15.__end_cap_.__value_);
      v8 = v6[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v6[2];
          v10 = *v9 == v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v19);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  std::string::basic_string[abi:ne180100]<0>(&v15, "colmaker_train_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, std::vector<std::pair<std::string, std::string>> *))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v15);
  xgboost::Json::operator=(v11, (uint64_t)__p);
  if (SHIBYTE(v15.__end_cap_.__value_) < 0)
    operator delete(v15.__begin_);
  __p[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E5E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  uint64_t v30;

  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v30, a16);
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  int v5;
  xgboost::tree::ColMakerTrainParam *v6;
  uint64_t v7[3];
  uint64_t v8[3];
  void **v9;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v8);
  v9 = (void **)v8;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *(unsigned __int8 *)(a1 + 152);
  v4 = (_BYTE *)(a1 + 152);
  memset(v7, 0, sizeof(v7));
  xgboost::tree::ColMakerTrainParam::__MANAGER__(v6);
  if (v5)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36758, (uint64_t)v4, *a2, a2[1], 0, v7, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36758, (uint64_t)v4, *a2, a2[1], v7, 0);
    *v4 = 1;
  }
  v9 = (void **)v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_220E5E820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 40) = &a10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 40));
  _Unwind_Resume(a1);
}

uint64_t xgboost::TreeUpdater::CanModifyTree(xgboost::TreeUpdater *this)
{
  return 0;
}

void xgboost::tree::ColMaker::Update(uint64_t a1, float32x2_t ***a2, uint64_t a3, uint64_t **a4)
{
  void *Engine;
  std::string *Entry;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  float v42;
  int *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t *v50;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::string v58;
  int v59;
  char v60;
  void *__p;
  xgboost::tree::TrainParam *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[2600];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::vector<int> *v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  std::string v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  std::__shared_weak_count *v85;
  void **v86;
  std::__shared_weak_count *v87;

  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)Engine + 80))(Engine))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) & 1) == 0)
  {
    v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (*(_QWORD *)(a1 + 168) == *(_QWORD *)(a1 + 176))
  {
    v12 = (**(uint64_t (***)(uint64_t))a3)(a3);
    std::vector<unsigned long>::vector(&__p, *(_QWORD *)(v12 + 8));
    (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a3 + 88))(&v86, a3);
    v84 = v86;
    v85 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v82, 0);
    while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v84) & 1) != 0)
    {
      v15 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v84);
      v16 = **v15;
      v17 = (*v15)[1];
      v18 = ((v17 - v16) >> 3) - 1;
      if (v17 != v16 && (v17 - v16) >> 3 != 1)
      {
        v20 = 0;
        v21 = *v15[1];
        v22 = 1;
        v23 = __p;
        do
        {
          v25 = *(_QWORD *)(v16 + 8 * v20);
          v24 = *(_QWORD *)(v16 + 8 * v20 + 8);
          if (!v21 && v24 != v25)
            std::terminate();
          v23[v20] += v24 - v25;
          v20 = v22;
        }
        while (v18 > v22++);
      }
      xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v84);
    }
    v27 = v83;
    if (v83)
    {
      v28 = (unint64_t *)&v83->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v85;
    if (v85)
    {
      v31 = (unint64_t *)&v85->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v87;
    if (v87)
    {
      v34 = (unint64_t *)&v87->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::vector<float>::resize(a1 + 168, (v62 - (xgboost::tree::TrainParam *)__p) >> 3);
    if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 168))
    {
      v36 = 0;
      v37 = 1;
      do
      {
        v38 = *(_QWORD *)(**(uint64_t (***)(uint64_t))a3)(a3);
        v39 = *((_QWORD *)__p + v36);
        v40 = (unint64_t *)(**(uint64_t (***)(uint64_t))a3)(a3);
        v41 = *(_QWORD *)(a1 + 168);
        *(float *)(v41 + 4 * v36) = 1.0 - (float)((float)(unint64_t)(v38 - v39) / (float)*v40);
        v36 = v37++;
      }
      while (v36 < (*(_QWORD *)(a1 + 176) - v41) >> 2);
    }
    if (__p)
    {
      v62 = (xgboost::tree::TrainParam *)__p;
      operator delete(__p);
    }
  }
  v42 = *(float *)(a1 + 20);
  *(float *)(a1 + 20) = v42 / (float)(unint64_t)(a4[1] - *a4);
  v43 = (int *)(**(uint64_t (***)(uint64_t))a3)(a3);
  xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 192), (const xgboost::tree::TrainParam *)(a1 + 16), *v43);
  v44 = *a4;
  v50 = a4[1];
  if (*a4 != v50)
  {
    do
    {
      v45 = *v44;
      if (!*(_QWORD *)(a1 + 8))
      {
        v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
        v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ctx_", 18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      }
      v53 = 0;
      v52 = 0uLL;
      std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v52, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 3));
      v54 = 0uLL;
      v55 = 0;
      std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v54, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3));
      v56 = 0uLL;
      v57 = 0;
      std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>((uint64_t)&v56, *(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3));
      if (*(char *)(a1 + 287) < 0)
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 264), *(_QWORD *)(a1 + 272));
      else
        v58 = *(std::string *)(a1 + 264);
      v59 = *(_DWORD *)(a1 + 288);
      v60 = *(_BYTE *)(a1 + 292);
      v46 = *(_QWORD *)(a1 + 8);
      __p = off_24E6B7FF0;
      v62 = (xgboost::tree::TrainParam *)(a1 + 16);
      v63 = a1 + 152;
      v64 = v46;
      xgboost::common::ColumnSampler::ColumnSampler((xgboost::common::ColumnSampler *)v65);
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)&v65[2584] = 0u;
      v66 = 0u;
      xgboost::tree::TreeEvaluator::TreeEvaluator(&v71, v62, (*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 2, -1);
      v72 = v52;
      v73 = v53;
      v53 = 0;
      v52 = 0uLL;
      v74 = v54;
      v75 = v55;
      v55 = 0;
      v54 = 0uLL;
      v76 = v56;
      v77 = v57;
      v57 = 0;
      v56 = 0uLL;
      v78 = v58;
      memset(&v58, 0, sizeof(v58));
      v80 = v60;
      v79 = v59;
      v81 = a1 + 168;
      v86 = (void **)&v56;
      std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v86);
      v86 = (void **)&v54;
      std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v86);
      v86 = (void **)&v52;
      std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v86);
      xgboost::tree::ColMaker::Builder::Update((uint64_t)&__p, *a2, a3, v45);
      xgboost::tree::ColMaker::Builder::~Builder((xgboost::tree::ColMaker::Builder *)&__p);
      ++v44;
    }
    while (v44 != v50);
  }
  *(float *)(a1 + 20) = v42;
}

void sub_220E5EE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xgboost::common::ColumnSampler *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

const char *xgboost::tree::ColMaker::Name(xgboost::tree::ColMaker *this)
{
  return "grow_colmaker";
}

void xgboost::FeatureInteractionConstraintHost::~FeatureInteractionConstraintHost(void **this)
{
  void **v2;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this + 6;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void xgboost::tree::ColMaker::Builder::Update(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *ptr;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  int v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v42;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v43;
  std::vector<unsigned int>::size_type v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t sig;
  __int128 v62;
  int64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  unint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int *v101;
  int *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  float v107;
  int8x16_t v108;
  float v109;
  float *v110;
  float v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  std::string *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  char *v143;
  int *v144;
  int *v145;
  int v146;
  int v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  int v157;
  int v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  int v166;
  unsigned int *v167;
  unsigned int *i;
  int v169;
  uint64_t v170;
  signed int v171;
  signed int v172;
  int *v173;
  int *v174;
  std::string *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  int v179;
  void *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  double *v188;
  float *v189;
  float v190;
  uint64_t *v191;
  uint64_t **v192;
  int v193;
  uint64_t v195;
  int **v196;
  uint64_t *v197;
  void *v198;
  char *v199;
  char *v200;
  __int128 *v201;
  __int128 *v202;
  uint64_t v203;
  __n128 __p;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  __int128 *v208;
  __int128 *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  std::exception_ptr v213;
  std::mutex v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v191 = (uint64_t *)(a1 + 2616);
  std::vector<int>::resize((std::vector<int> *)(a1 + 2616), a2[1] - *a2);
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  __p.n128_u64[0] = (uint64_t)(*(_QWORD *)(a1 + 2624) - *(_QWORD *)(a1 + 2616)) >> 2;
  if (*v7 != __p.n128_u64[0])
  {
    dmlc::LogCheckFormat<unsigned long long,unsigned long>((uint64_t *)&v213);
    if (v213.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"fmat.Info().num_row_ == position_.size()", 40);
      v12 = *((char *)v213.__ptr_ + 23);
      v13 = v12 >= 0 ? v213.__ptr_ : *(void **)v213.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v213.__ptr_ + 23) : *((_QWORD *)v213.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      ptr = v213.__ptr_;
      v213.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v213, (uint64_t)ptr);
    }
  }
  v195 = a3;
  v17 = *(int **)(a1 + 2616);
  v18 = *(int **)(a1 + 2624);
  v19 = (char *)v18 - (char *)v17;
  if ((char *)v18 - (char *)v17 >= 1)
    bzero(*(void **)(a1 + 2616), 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
  if (v18 != v17)
  {
    v20 = v19 >> 2;
    if ((unint64_t)(v19 >> 2) <= 1)
      v20 = 1;
    v21 = (float *)*a2 + 1;
    do
    {
      if (*v21 < 0.0)
        *v17 = ~*v17;
      ++v17;
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  v22 = *(_QWORD *)(a1 + 8);
  if (*(float *)(v22 + 48) < 1.0)
  {
    v23 = *(_DWORD *)(v22 + 52);
    __p.n128_u32[0] = 0;
    if (v23)
    {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>((uint64_t *)&v213);
      if (v213.__ptr_)
      {
        v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
        v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"param_.sampling_method == TrainParam::kUniform", 46);
        v28 = *((char *)v213.__ptr_ + 23);
        v29 = v28 >= 0 ? v213.__ptr_ : *(void **)v213.__ptr_;
        v30 = v28 >= 0 ? *((unsigned __int8 *)v213.__ptr_ + 23) : *((_QWORD *)v213.__ptr_ + 1);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Only uniform sampling is supported, ", 36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"gradient-based sampling is only support by GPU Hist.", 52);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
        v34 = v213.__ptr_;
        v213.__ptr_ = 0;
        if (v34)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v213, (uint64_t)v34);
      }
    }
    v35 = *(float *)(*(_QWORD *)(a1 + 8) + 48);
    v36 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    v37 = *(_QWORD *)(a1 + 2616);
    if (*(_QWORD *)(a1 + 2624) != v37)
    {
      v38 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v36;
      v39 = 0;
      v40 = v35;
      v41 = 1;
      do
      {
        if ((*a2)->f32[v41] >= 0.0)
        {
          v42 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v38);
          v43 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v38);
          v37 = *v191;
          if (((double)v42 + (double)v43 * 4294967300.0) * 5.42101086e-20 + 0.0 >= v40)
            *(_DWORD *)(v37 + 4 * v39) = ~*(_DWORD *)(v37 + 4 * v39);
        }
        ++v39;
        v41 += 2;
      }
      while (v39 < (*(_QWORD *)(a1 + 2624) - v37) >> 2);
    }
  }
  v44 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195) + 8);
  v45 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195) + 176);
  v205 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v45, *(_QWORD *)(v45 + 8), (uint64_t)(*(_QWORD *)(v45 + 8) - *(_QWORD *)v45) >> 2);
  xgboost::common::ColumnSampler::Init((float *)(a1 + 32), v44, &__p, *(float *)(*(_QWORD *)(a1 + 8) + 56), *(float *)(*(_QWORD *)(a1 + 8) + 60), *(float *)(*(_QWORD *)(a1 + 8) + 64));
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v46 = *(char **)(a1 + 2648);
  v47 = *(char **)(a1 + 2640);
  if (v46 != v47)
  {
    do
    {
      v46 -= 24;
      v213.__ptr_ = v46;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
    }
    while (v46 != v47);
    v46 = *(char **)(a1 + 2640);
  }
  *(_QWORD *)(a1 + 2648) = v47;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v48 = (v47 - v46) / 24;
  if (v47 != v46)
  {
    if (v48 < 2)
      goto LABEL_64;
    v49 = v46 + 24;
    while (v47 != v49)
    {
      v47 -= 24;
      v213.__ptr_ = v47;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
    }
    goto LABEL_61;
  }
  v50 = *(_QWORD *)(a1 + 2656);
  if (0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v47) >> 3) >= 1 - v48)
  {
    v49 = &v47[24 * (1 - v48)];
    v64 = 24 - 24 * v48;
    do
    {
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      *((_QWORD *)v47 + 2) = 0;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>((uint64_t)v47, v201, v202, 0x4EC4EC4EC4EC4EC5 * (((char *)v202 - (char *)v201) >> 3));
      v47 += 24;
      v64 -= 24;
    }
    while (v64);
LABEL_61:
    *(_QWORD *)(a1 + 2648) = v49;
    goto LABEL_64;
  }
  v51 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v46) >> 3);
  v52 = 2 * v51;
  if (2 * v51 <= 1)
    v52 = 1;
  if (v51 >= 0x555555555555555)
    v53 = 0xAAAAAAAAAAAAAAALL;
  else
    v53 = v52;
  *(_QWORD *)&v214.__m_.__opaque[16] = a1 + 2656;
  if (v53 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v54 = (char *)operator new(24 * v53);
  v55 = (uint64_t)&v54[24 * v48];
  v56 = 24 * v48;
  v213.__ptr_ = v54;
  v214.__m_.__sig = v55;
  *(_QWORD *)v214.__m_.__opaque = v55;
  *(_QWORD *)&v214.__m_.__opaque[8] = &v54[24 * v53];
  v57 = v54 + 24;
  do
  {
    v58 = &v54[v56];
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = 0;
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>((uint64_t)&v54[v56], v201, v202, 0x4EC4EC4EC4EC4EC5 * (((char *)v202 - (char *)v201) >> 3));
    v56 += 24;
  }
  while (v56 != 24);
  *(_QWORD *)v214.__m_.__opaque = v54 + 24;
  v59 = *(_QWORD **)(a1 + 2648);
  v60 = *(_QWORD **)(a1 + 2640);
  sig = v214.__m_.__sig;
  if (v59 == v60)
  {
    v63 = vdupq_n_s64((unint64_t)v59);
  }
  else
  {
    do
    {
      *(_QWORD *)(sig - 24) = 0;
      *(_QWORD *)(sig - 16) = 0;
      sig -= 24;
      *(_QWORD *)(sig + 16) = 0;
      v62 = *(_OWORD *)(v59 - 3);
      v59 -= 3;
      *(_OWORD *)sig = v62;
      *(_QWORD *)(sig + 16) = v59[2];
      *v59 = 0;
      v59[1] = 0;
      v59[2] = 0;
    }
    while (v59 != v60);
    v63 = *(int64x2_t *)(a1 + 2640);
    v57 = *(char **)v214.__m_.__opaque;
  }
  *(_QWORD *)(a1 + 2640) = sig;
  *(_QWORD *)(a1 + 2648) = v57;
  *(int64x2_t *)&v214.__m_.__sig = v63;
  v65 = *(_QWORD *)(a1 + 2656);
  *(_QWORD *)(a1 + 2656) = *(_QWORD *)&v214.__m_.__opaque[8];
  *(_QWORD *)&v214.__m_.__opaque[8] = v65;
  v213.__ptr_ = (void *)v63.i64[0];
  std::__split_buffer<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::~__split_buffer((uint64_t)&v213);
LABEL_64:
  v213.__ptr_ = &v201;
  std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
  v66 = *(_QWORD **)(a1 + 2640);
  v67 = *(_QWORD **)(a1 + 2648);
  if (v66 != v67)
  {
    v68 = v66 + 2;
    do
    {
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100](v68 - 2);
      v69 = *(v68 - 2);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*v68 - v69) >> 3)) <= 0xFF)
      {
        v70 = *(v68 - 1);
        *(_QWORD *)&v214.__m_.__opaque[16] = v68;
        v213.__ptr_ = operator new(0x6800uLL);
        v214.__m_.__sig = (uint64_t)v213.__ptr_ + v70 - v69;
        *(_QWORD *)v214.__m_.__opaque = v214.__m_.__sig;
        *(_QWORD *)&v214.__m_.__opaque[8] = (char *)v213.__ptr_ + 26624;
        std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(v68 - 2, &v213);
        std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v213);
      }
      v71 = v68 + 1;
      v68 += 3;
    }
    while (v71 != v67);
  }
  v197 = (uint64_t *)(a1 + 2664);
  v72 = *(_QWORD *)(a1 + 2664);
  v73 = v195;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 2680) - v72) >> 3)) <= 0xFF)
  {
    v74 = *(_QWORD *)(a1 + 2672);
    *(_QWORD *)&v214.__m_.__opaque[16] = a1 + 2680;
    v213.__ptr_ = operator new(0x6800uLL);
    v214.__m_.__sig = (uint64_t)v213.__ptr_ + v74 - v72;
    *(_QWORD *)v214.__m_.__opaque = v214.__m_.__sig;
    *(_QWORD *)&v214.__m_.__opaque[8] = (char *)v213.__ptr_ + 26624;
    std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer(v197, &v213);
    std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v213);
  }
  v196 = (int **)(a1 + 2688);
  std::vector<int>::reserve((std::vector<int> *)(a1 + 2688), 0x100uLL);
  v75 = *(_DWORD **)(a1 + 2688);
  *(_QWORD *)(a1 + 2696) = v75;
  v76 = *(_QWORD *)(a1 + 2704);
  if ((unint64_t)v75 >= v76)
  {
    v78 = v76 - (_QWORD)v75;
    v79 = v78 >> 1;
    if ((unint64_t)(v78 >> 1) <= 1)
      v79 = 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
      v80 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    v81 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 2704, v80);
    v82 = *(char **)(a1 + 2696);
    v83 = *(char **)(a1 + 2688);
    v85 = &v81[v84];
    *v81 = 0;
    v77 = v81 + 1;
    while (v82 != v83)
    {
      v86 = *((_DWORD *)v82 - 1);
      v82 -= 4;
      *--v81 = v86;
    }
    *(_QWORD *)(a1 + 2688) = v81;
    *(_QWORD *)(a1 + 2696) = v77;
    *(_QWORD *)(a1 + 2704) = v85;
    if (v83)
      operator delete(v83);
  }
  else
  {
    *v75 = 0;
    v77 = v75 + 1;
  }
  *(_QWORD *)(a1 + 2696) = v77;
  xgboost::tree::ColMaker::Builder::InitNewNode(a1, v196, a2, v195, a4);
  __p.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12);
  LODWORD(v201) = 0;
  if (__p.n128_i32[0] < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v213);
    if (v213.__ptr_)
    {
      v175 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v175, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
      v176 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"Check failed: ", 14);
      v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"param_.max_depth > 0", 20);
      v179 = *((char *)v213.__ptr_ + 23);
      v180 = v179 >= 0 ? v213.__ptr_ : *(void **)v213.__ptr_;
      v181 = v179 >= 0 ? *((unsigned __int8 *)v213.__ptr_ + 23) : *((_QWORD *)v213.__ptr_ + 1);
      v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)v180, v181);
      v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"exact tree method doesn't support unlimited depth.", 50);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v184 = v213.__ptr_;
      v213.__ptr_ = 0;
      if (v184)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v213, (uint64_t)v184);
    }
  }
  if (*(int *)(*(_QWORD *)(a1 + 8) + 12) > 0)
  {
    v193 = 0;
    v192 = (uint64_t **)(a1 + 2712);
    while (1)
    {
      xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>(v192, (uint64_t)&v213);
      xgboost::common::ColumnSampler::GetFeatureSet((xgboost::common::ColumnSampler *)(a1 + 32), v193, (uint64_t)&__p);
      (*(void (**)(__int128 **__return_ptr, uint64_t))(*(_QWORD *)v73 + 88))(&v201, v73);
      v208 = v201;
      v209 = v202;
      if (v202)
      {
        v87 = (unint64_t *)v202 + 1;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v206, 0);
      while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v208) & 1) != 0)
      {
        v89 = xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v208);
        (*(void (**)(uint64_t, uint64_t, _QWORD, float32x2_t **, uint64_t))(*(_QWORD *)a1 + 8))(a1, v89, *(_QWORD *)__p.n128_u64[0], a2, v73);
        xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v208);
      }
      v90 = v207;
      if (v207)
      {
        p_shared_owners = (unint64_t *)&v207->__shared_owners_;
        do
          v92 = __ldaxr(p_shared_owners);
        while (__stlxr(v92 - 1, p_shared_owners));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v93 = (std::__shared_weak_count *)v209;
      if (v209)
      {
        v94 = (unint64_t *)v209 + 1;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = (std::__shared_weak_count *)v202;
      if (v202)
      {
        v97 = (unint64_t *)v202 + 1;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      (*(void (**)(uint64_t, int **))(*(_QWORD *)a1 + 16))(a1, v196);
      v101 = *(int **)(a1 + 2688);
      v102 = *(int **)(a1 + 2696);
      while (v101 != v102)
      {
        v103 = *v101;
        v104 = *v197;
        v105 = *v197 + 104 * *v101;
        v107 = *(float *)(v105 + 24);
        v106 = (float *)(v105 + 24);
        *(float *)v99.i32 = v107;
        if (v107 <= 0.000001)
        {
          v100.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4);
          v118 = *(_QWORD *)(a4 + 160) + 20 * v103;
          *(float *)(v118 + 16) = *(float *)(v104 + 104 * v103 + 20) * *(float *)v100.i32;
          v99.i32[1] = -1;
          v99.i64[1] = -1;
          *(_QWORD *)(v118 + 4) = -1;
        }
        else
        {
          *(float *)v108.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)&v213, *v101, *(float **)(a1 + 8), (double *)(v104 + 104 * v103 + 72), v99, v100);
          v109 = *(float *)v108.i32;
          v110 = *(float **)(a1 + 8);
          v111 = v110[1];
          v113 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)&v213, v103, v110, (double *)(v104 + 104 * v103 + 88), v108, v112);
          v114 = v104 + 104 * v103;
          v115 = *(double *)(v114 + 8);
          v116 = *(double *)(v114 + 80);
          v117 = *(double *)(v114 + 96);
          xgboost::RegTree::ExpandNode((xgboost::RegTree *)a4, v103, *(_DWORD *)(v114 + 28) & 0x7FFFFFFF, *(float *)(v114 + 32), *(_DWORD *)(v114 + 28) >> 31, *(float *)(v114 + 20), v109 * v111, v113 * *(float *)(*(_QWORD *)(a1 + 8) + 4), *v106, v115, v116, v117, 0);
        }
        ++v101;
      }
      v119 = (std::__shared_weak_count *)__p.n128_u64[1];
      if (__p.n128_u64[1])
      {
        v120 = (unint64_t *)(__p.n128_u64[1] + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      (*(void (**)(uint64_t, int **, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v196, v195, a4);
      v122 = *(_QWORD *)(**(uint64_t (***)(uint64_t))v195)(v195);
      v213.__ptr_ = 0;
      v214.__m_.__sig = 850045863;
      memset(v214.__m_.__opaque, 0, sizeof(v214.__m_.__opaque));
      if (v122)
        break;
LABEL_138:
      dmlc::OMPException::Rethrow(&v213);
      std::mutex::~mutex(&v214);
      std::exception_ptr::~exception_ptr(&v213);
      v143 = (char *)v198;
      v199 = (char *)v198;
      v144 = *(int **)(a1 + 2688);
      v145 = *(int **)(a1 + 2696);
      while (v144 != v145)
      {
        v146 = *v144;
        v147 = *(_DWORD *)(*(_QWORD *)(a4 + 160) + 20 * *v144 + 4);
        if (v147 != -1)
        {
          v148 = v200;
          if (v143 >= v200)
          {
            v150 = (char *)v198;
            v151 = (v143 - (_BYTE *)v198) >> 2;
            v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 62)
              goto LABEL_203;
            v153 = v200 - (_BYTE *)v198;
            if ((v200 - (_BYTE *)v198) >> 1 > v152)
              v152 = v153 >> 1;
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
              v154 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v154 = v152;
            if (v154)
            {
              v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v154);
              v150 = (char *)v198;
              v143 = v199;
            }
            else
            {
              v155 = 0;
            }
            v156 = &v155[4 * v151];
            *(_DWORD *)v156 = v147;
            v149 = v156 + 4;
            while (v143 != v150)
            {
              v157 = *((_DWORD *)v143 - 1);
              v143 -= 4;
              *((_DWORD *)v156 - 1) = v157;
              v156 -= 4;
            }
            v148 = &v155[4 * v154];
            v198 = v156;
            v199 = v149;
            v200 = v148;
            if (v150)
            {
              operator delete(v150);
              v148 = v200;
            }
          }
          else
          {
            *(_DWORD *)v143 = v147;
            v149 = v143 + 4;
          }
          v199 = v149;
          v158 = *(_DWORD *)(*(_QWORD *)(a4 + 160) + 20 * v146 + 8);
          if (v149 >= v148)
          {
            v159 = (char *)v198;
            v160 = (v149 - (_BYTE *)v198) >> 2;
            v161 = v160 + 1;
            if ((unint64_t)(v160 + 1) >> 62)
LABEL_203:
              std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
            v162 = v148 - (_BYTE *)v198;
            if (v162 >> 1 > v161)
              v161 = v162 >> 1;
            if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
              v163 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v163 = v161;
            if (v163)
            {
              v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v163);
              v159 = (char *)v198;
              v149 = v199;
            }
            else
            {
              v164 = 0;
            }
            v165 = &v164[4 * v160];
            *(_DWORD *)v165 = v158;
            v143 = v165 + 4;
            while (v149 != v159)
            {
              v166 = *((_DWORD *)v149 - 1);
              v149 -= 4;
              *((_DWORD *)v165 - 1) = v166;
              v165 -= 4;
            }
            v198 = v165;
            v199 = v143;
            v200 = &v164[4 * v163];
            if (v159)
              operator delete(v159);
          }
          else
          {
            *(_DWORD *)v149 = v158;
            v143 = v149 + 4;
          }
          v199 = v143;
        }
        ++v144;
      }
      xgboost::tree::ColMaker::Builder::InitNewNode(a1, (int **)&v198, a2, v195, a4);
      v167 = *(unsigned int **)(a1 + 2688);
      for (i = *(unsigned int **)(a1 + 2696); v167 != i; ++v167)
      {
        v169 = *v167;
        v170 = *(_QWORD *)(a4 + 160);
        v171 = *(_DWORD *)(v170 + 20 * (int)*v167 + 4);
        if (v171 != -1)
        {
          v172 = *(_DWORD *)(v170 + 20 * v169 + 8);
          xgboost::tree::TreeEvaluator::AddSplit<false>((uint64_t)v192, *v167, v171, v172, *(_DWORD *)(*v197 + 104 * v169 + 28) & 0x7FFFFFFF, *(float *)(*v197 + 104 * v171 + 20), *(float *)(*v197 + 104 * v172 + 20));
          if (*(_BYTE *)(a1 + 2844))
            xgboost::FeatureInteractionConstraintHost::SplitImpl((xgboost::FeatureInteractionConstraintHost *)(a1 + 2744), v169, *(_DWORD *)(*v197 + 104 * v169 + 28) & 0x7FFFFFFF, v171, v172);
        }
      }
      v73 = v195;
      if (v196 != (int **)&v198)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v196, (char *)v198, (uint64_t)v199, (v199 - (_BYTE *)v198) >> 2);
      v173 = *(int **)(a1 + 2696);
      v174 = *(int **)(a1 + 2688);
      if (v173 == v174)
        goto LABEL_197;
      if (++v193 >= *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12))
        goto LABEL_195;
    }
    v123 = 0;
    while (1)
    {
      v212 = v123;
      v210 = (uint64_t)(*(_QWORD *)(a1 + 2624) - *(_QWORD *)(a1 + 2616)) >> 2;
      if (v210 <= v123)
      {
        dmlc::LogCheckFormat<unsigned long long,unsigned long>(&v211);
        if (v211)
        {
          v124 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
          dmlc::LogMessageFatal::Entry::Init(v124, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
          v125 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
          v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Check failed: ", 14);
          v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"ridx < position_.size()", 23);
          v128 = *(char *)(v211 + 23);
          v129 = v128 >= 0 ? v211 : *(_QWORD *)v211;
          v130 = v128 >= 0 ? *(unsigned __int8 *)(v211 + 23) : *(_QWORD *)(v211 + 8);
          v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, v129, v130);
          v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)": ", 2);
          v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"ridx exceed bound ", 18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"ridx=", 5);
          v134 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)" pos=", 5);
          std::ostream::operator<<();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
          v135 = v211;
          v211 = 0;
          if (v135)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v211, v135);
        }
      }
      v136 = v212;
      v137 = *(_DWORD *)(*v191 + 4 * v212);
      v138 = v137 ^ (v137 >> 31);
      v139 = *(_QWORD *)(a4 + 160);
      v140 = *(_DWORD *)(v139 + 20 * v138 + 4);
      if (v140 != -1)
        break;
      if (*(_DWORD *)(v139 + 20 * (int)v138 + 8) == -1)
      {
        v142 = ~(_DWORD)v138;
LABEL_136:
        *(_DWORD *)(*v191 + 4 * v136) = v142;
      }
      if (v122 == ++v123)
        goto LABEL_138;
    }
    v136 = v212;
    v141 = v137 >> 31;
    if ((*(_DWORD *)(v139 + 20 * (int)v138 + 12) & 0x80000000) != 0)
      v142 = v140 ^ v141;
    else
      v142 = *(_DWORD *)(v139 + 20 * (int)v138 + 8) ^ v141;
    goto LABEL_136;
  }
  v174 = *(int **)(a1 + 2688);
  v173 = *(int **)(a1 + 2696);
LABEL_195:
  while (v174 != v173)
  {
    v185 = *v174++;
    v186 = *(_QWORD *)(a4 + 160) + 20 * v185;
    *(float *)(v186 + 16) = *(float *)(*(_QWORD *)(a1 + 2664) + 104 * v185 + 20)
                          * *(float *)(*(_QWORD *)(a1 + 8) + 4);
    *(_QWORD *)(v186 + 4) = -1;
  }
LABEL_197:
  v187 = *(unsigned int *)(a4 + 12);
  if ((int)v187 >= 1)
  {
    v188 = (double *)(*v197 + 24);
    v189 = (float *)(*(_QWORD *)(a4 + 208) + 8);
    do
    {
      *(v189 - 2) = *(float *)v188;
      *v189 = *((float *)v188 - 1);
      v190 = *(v188 - 2);
      *(v189 - 1) = v190;
      v188 += 13;
      v189 += 4;
      --v187;
    }
    while (v187);
  }
  if (v198)
  {
    v199 = (char *)v198;
    operator delete(v198);
  }
}

