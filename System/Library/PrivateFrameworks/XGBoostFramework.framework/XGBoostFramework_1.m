void sub_220E60314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  std::mutex *v35;
  void *v36;

  std::mutex::~mutex(v35);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 200));
  if (v36)
    operator delete(v36);
  _Unwind_Resume(a1);
}

void sub_220E60418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  JUMPOUT(0x220E60470);
}

void sub_220E60448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  JUMPOUT(0x220E60458);
}

uint64_t xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) ^ 1;
}

void sub_220E60514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

void sub_220E605B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  v2 = *a1;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/data.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: impl_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    v2 = *a1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_220E60658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_220E606C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(a1, a2);
  return a1;
}

void sub_220E6070C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6B8090;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E607E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>,xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::SortedCSCPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::unordered_set<unsigned int>>::__init_with_size[abi:ne180100]<std::unordered_set<unsigned int>*,std::unordered_set<unsigned int>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v4 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(result + 16, a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = result + 40 * v8;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::unordered_set<unsigned int>::unordered_set(v7 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v4[1] = v7;
  }
  return result;
}

void sub_220E60940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_220E609D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_220E60E28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void xgboost::common::ColumnSampler::~ColumnSampler(xgboost::common::ColumnSampler *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void xgboost::tree::ColMaker::Builder::UpdateSolution(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[4];
  uint64_t v20[4];
  std::exception_ptr v21;
  std::mutex v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  v8 = a3[1];
  if (!*(_QWORD *)(a1 + 24))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: this->ctx_", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
  v10 = **a2;
  v11 = *a2[1];
  v12 = a2[1][1] - v11;
  v19[0] = ((*a2)[1] - v10) >> 3;
  v19[1] = v10;
  v19[2] = v12 >> 3;
  v19[3] = v11;
  v21.__ptr_ = 0;
  v22.__m_.__sig = 850045863;
  memset(v22.__m_.__opaque, 0, sizeof(v22.__m_.__opaque));
  v13 = v8 - v9;
  if (v8 != v9)
  {
    v14 = 0;
    v15 = v13 >> 2;
    v20[0] = a1;
    v20[1] = (uint64_t)a3;
    v20[2] = (uint64_t)v19;
    v20[3] = a4;
    do
      _ZN4dmlc12OMPException3RunIZN7xgboost4tree8ColMaker7Builder14UpdateSolutionERKNS2_13SortedCSCPageERKNSt3__16vectorIjNS9_9allocatorIjEEEERKNSA_INS2_6detail20GradientPairInternalIfEENSB_ISI_EEEEPNS2_7DMatrixEEUlT_E_JmEEEvSP_DpT0_((uint64_t)&v21, v20, v14++);
    while (v15 != v14);
  }
  dmlc::OMPException::Rethrow(&v21);
  std::mutex::~mutex(&v22);
  std::exception_ptr::~exception_ptr(&v21);
}

void sub_220E60FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a17);
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::Builder::SyncBestSolution(uint64_t a1, int **a2)
{
  int *v2;
  int *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  char v21;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *v2;
      v6 = *(_QWORD *)(a1 + 2664);
      if (!*(_QWORD *)(a1 + 24))
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: this->ctx_", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
      }
      v7 = **(_QWORD **)(a1 + 2640);
      v8 = v7 + 104 * v5;
      v10 = *(float *)(v8 + 24);
      v9 = v8 + 24;
      v11 = v10;
      if (fabsf(v10) == INFINITY)
        goto LABEL_12;
      v12 = v6 + 104 * v5;
      v13 = (float *)(v12 + 24);
      v14 = *(_DWORD *)(v9 + 4);
      v15 = *(float *)(v12 + 24);
      if ((*(_DWORD *)(v12 + 28) & 0x7FFFFFFFu) <= (v14 & 0x7FFFFFFFu))
      {
        if (v15 < v11)
        {
LABEL_9:
          *v13 = v11;
          *(_DWORD *)(v12 + 28) = v14;
          v16 = v7 + 104 * v5;
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v16 + 32);
          *(_BYTE *)(v12 + 64) = *(_BYTE *)(v16 + 64);
          if (v13 != (float *)v9)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v12 + 40), *(char **)(v7 + 104 * v5 + 40), *(_QWORD *)(v7 + 104 * v5 + 48), (uint64_t)(*(_QWORD *)(v7 + 104 * v5 + 48) - *(_QWORD *)(v7 + 104 * v5 + 40)) >> 2);
          v17 = v7 + 104 * v5;
          *(_OWORD *)(v12 + 72) = *(_OWORD *)(v17 + 72);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v17 + 88);
        }
      }
      else if (v15 <= v11)
      {
        goto LABEL_9;
      }
LABEL_12:
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_220E611A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::tree::ColMaker::Builder::SetNonDefaultPosition(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  int *v7;
  std::vector<unsigned int>::pointer end;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  std::vector<unsigned int>::pointer begin;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  std::vector<unsigned int>::pointer v21;
  std::vector<unsigned int>::pointer v22;
  std::vector<unsigned int>::pointer v23;
  unsigned int v24;
  unsigned int v25;
  std::vector<unsigned int>::pointer v26;
  unsigned int v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t **v30;
  std::vector<unsigned int>::pointer v31;
  std::vector<unsigned int>::pointer v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::vector<unsigned int> __p;
  std::exception_ptr v64;
  std::mutex v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    end = 0;
    do
    {
      v9 = *(_QWORD *)(a4 + 160);
      if (*(_DWORD *)(v9 + 20 * *v6 + 4) != -1)
      {
        v10 = *(_DWORD *)(v9 + 20 * *v6 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v13 = end - __p.__begin_;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v15 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v16);
            v18 = v17;
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v18 = 0;
          }
          v19 = (unsigned int *)(v16 + 4 * v13);
          *v19 = v10;
          v11 = v19 + 1;
          while (end != begin)
          {
            v20 = *--end;
            *--v19 = v20;
          }
          __p.__begin_ = v19;
          __p.__end_ = v11;
          __p.__end_cap_.__value_ = (unsigned int *)(v16 + 4 * v18);
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v10;
          v11 = end + 1;
        }
        __p.__end_ = v11;
        end = v11;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v21 = __p.__begin_;
  v22 = __p.__end_;
  if (__p.__begin_ == __p.__end_)
  {
    v22 = __p.__begin_;
  }
  else
  {
    v23 = __p.__begin_ + 1;
    while (v23 != __p.__end_)
    {
      v24 = *(v23 - 1);
      v25 = *v23++;
      if (v24 == v25)
      {
        v26 = v23 - 2;
        while (v23 != v22)
        {
          v27 = v24;
          v24 = *v23;
          if (v27 != *v23)
          {
            v26[1] = v24;
            ++v26;
          }
          ++v23;
        }
        v22 = v26 + 1;
        break;
      }
    }
  }
  std::vector<unsigned int>::resize(&__p, v22 - v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 88))(&v61, a3);
  v59 = v61;
  v60 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v57, 0);
  while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=(&v59) & 1) != 0)
  {
    v30 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*(&v59);
    v31 = __p.__begin_;
    v32 = __p.__end_;
    if (__p.__begin_ != __p.__end_)
    {
      v33 = **v30;
      v34 = *v30[1];
      do
      {
        v35 = *v31;
        v36 = (uint64_t *)(v33 + 8 * v35);
        v38 = *v36;
        v37 = v36[1];
        v39 = v37 - *v36;
        if (!v34 && v39)
          std::terminate();
        v64.__ptr_ = 0;
        v65.__m_.__sig = 850045863;
        memset(v65.__m_.__opaque, 0, sizeof(v65.__m_.__opaque));
        if (v37 != v38)
        {
          v40 = *(_QWORD *)(a4 + 160);
          v41 = *(_QWORD *)(a1 + 2616);
          v42 = (float *)(v34 + 4 + 8 * v38);
          do
          {
            v43 = *((unsigned int *)v42 - 1);
            v44 = *(_DWORD *)(v41 + 4 * v43);
            v45 = v44 ^ (v44 >> 31);
            v46 = *(_DWORD *)(v40 + 20 * v45 + 4);
            if (v46 != -1 && (*(_DWORD *)(v40 + 20 * v45 + 12) & 0x7FFFFFFF) == (_DWORD)v35)
            {
              if (*v42 >= *(float *)(v40 + 20 * v45 + 16))
                v46 = *(_DWORD *)(v40 + 20 * v45 + 8);
              *(_DWORD *)(v41 + 4 * v43) = v46 ^ (v44 >> 31);
            }
            v42 += 2;
            --v39;
          }
          while (v39);
        }
        dmlc::OMPException::Rethrow(&v64);
        std::mutex::~mutex(&v65);
        std::exception_ptr::~exception_ptr(&v64);
        ++v31;
      }
      while (v31 != v32);
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++(&v59);
  }
  v47 = v58;
  if (v58)
  {
    v48 = (unint64_t *)&v58->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v60;
  if (v60)
  {
    v51 = (unint64_t *)&v60->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v62;
  if (v62)
  {
    v54 = (unint64_t *)&v62->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_220E615EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

xgboost::common::ColumnSampler *xgboost::common::ColumnSampler::ColumnSampler(xgboost::common::ColumnSampler *this)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v11;
  rabit::engine *v12;
  void *Engine;
  unsigned int v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  unsigned int v19;

  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 8) = _D0;
  *((_DWORD *)this + 18) = 1065353216;
  v7 = 5489;
  v8 = 1;
  v9 = 21;
  *((_DWORD *)this + 20) = 5489;
  do
  {
    v10 = 1812433253 * (v7 ^ (v7 >> 30));
    v7 = v10 + v8;
    *((_DWORD *)this + v9) = v9 + v10 - 20;
    ++v8;
    ++v9;
  }
  while (v9 != 644);
  *((_QWORD *)this + 322) = 0;
  v11 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  v12 = (rabit::engine *)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v11);
  v19 = v12;
  Engine = rabit::engine::GetEngine(v12);
  (*(void (**)(void *, unsigned int *, uint64_t, _QWORD))(*(_QWORD *)Engine + 16))(Engine, &v19, 4, 0);
  v14 = v19;
  *((_DWORD *)this + 20) = v19;
  v15 = 1;
  for (i = 21; i != 644; ++i)
  {
    v17 = 1812433253 * (v14 ^ (v14 >> 30));
    v14 = v17 + v15;
    *((_DWORD *)this + i) = i + v17 - 20;
    ++v15;
  }
  *((_QWORD *)this + 322) = 0;
  return this;
}

void sub_220E61768(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(v2, *(_QWORD **)(v1 + 24));
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy(a1, a2[1]);
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

std::vector<int> **xgboost::tree::TreeEvaluator::TreeEvaluator(std::vector<int> **this, const xgboost::tree::TrainParam *a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  std::vector<int> *v9;
  char *v10;
  uint64_t v11;
  std::vector<int> *v12;
  int v13;
  int v14;
  char v15;
  std::vector<int>::value_type __x;

  v8 = xgboost::HostDeviceVector<float>::HostDeviceVector(this, 0, 0.0) + 1;
  xgboost::HostDeviceVector<float>::HostDeviceVector(v8, 0, 0.0);
  xgboost::HostDeviceVector<int>::HostDeviceVector(this + 2, 0, 0);
  *((_DWORD *)this + 6) = a4;
  v10 = (char *)*((_QWORD *)a2 + 10);
  v11 = *((_QWORD *)a2 + 11);
  v9 = (std::vector<int> *)((char *)a2 + 80);
  v12 = this[2];
  if (v10 == (char *)v11)
  {
    __x = 0;
    std::vector<int>::resize(v12, a3, &__x);
    v15 = 0;
  }
  else
  {
    if (v12 != v9)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this[2], v10, v11, (v11 - (uint64_t)v10) >> 2);
      v9 = this[2];
    }
    __x = 0;
    std::vector<int>::resize(v9, a3, &__x);
    v13 = xgboost::tree::TrainParam::MaxNodes(a2);
    __x = -8388609;
    std::vector<float>::resize((uint64_t)*this, v13, &__x);
    v14 = xgboost::tree::TrainParam::MaxNodes(a2);
    __x = 2139095039;
    std::vector<float>::resize(*v8, v14, &__x);
    v15 = 1;
  }
  *((_BYTE *)this + 28) = v15;
  return this;
}

void sub_220E6190C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  xgboost::HostDeviceVector<int>::~HostDeviceVector(v3);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

uint64_t xgboost::tree::TrainParam::MaxNodes(xgboost::tree::TrainParam *this)
{
  std::string *Entry;
  _QWORD *v3;
  int v4;
  uint64_t result;
  int v6;
  std::string *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;

  if (!*((_DWORD *)this + 3) && !*((_DWORD *)this + 4))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.h");
    v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Max leaves and max depth cannot both be unconstrained.", 54);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  v4 = *((_DWORD *)this + 4);
  if (v4 >= 1)
    return (2 * v4 - 1);
  v6 = *((_DWORD *)this + 3);
  v30 = 31;
  v31 = v6;
  if (v6 > 31)
  {
    dmlc::LogCheckFormat<int,int>(&v29);
    if (v29)
    {
      v7 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
      dmlc::LogMessageFatal::Entry::Init(v7, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"this->max_depth <= 31", 21);
      v11 = *(char *)(v29 + 23);
      v12 = v11 >= 0 ? v29 : *(_QWORD *)v29;
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"max_depth can not be greater than 31 as that might generate 2 ** 32 - 1 nodes.", 78);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
      v16 = v29;
      v29 = 0;
      if (v16)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v16);
    }
  }
  v17 = *((_DWORD *)this + 3);
  v18 = __CFADD__(v17, 1);
  v19 = -1 << (v17 + 1);
  result = ~v19;
  v30 = 0;
  v31 = ~v19;
  if (v18)
  {
    dmlc::LogCheckFormat<int,int>(&v29);
    if (v29)
    {
      v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
      dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.h");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"n_nodes != 0", 12);
      v24 = *(char *)(v29 + 23);
      if (v24 >= 0)
        v25 = v29;
      else
        v25 = *(_QWORD *)v29;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(v29 + 23);
      else
        v26 = *(_QWORD *)(v29 + 8);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
      v28 = v29;
      v29 = 0;
      if (v28)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v28);
    }
    return 0;
  }
  return result;
}

void sub_220E61B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<xgboost::tree::ColMaker::NodeEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 8);
        if (v6)
        {
          *((_QWORD *)v4 - 7) = v6;
          operator delete(v6);
        }
        v4 -= 104;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<xgboost::tree::ColMaker::ThreadEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 104)
  {
    v4 = *(void **)(i - 64);
    if (v4)
    {
      *(_QWORD *)(i - 56) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void _ZN4dmlc12OMPException3RunIZN7xgboost4tree8ColMaker7Builder14UpdateSolutionERKNS2_13SortedCSCPageERKNSt3__16vectorIjNS9_9allocatorIjEEEERKNSA_INS2_6detail20GradientPairInternalIfEENSB_ISI_EEEEPNS2_7DMatrixEEUlT_E_JmEEEvSP_DpT0_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  _QWORD v16[7];

  v5 = *a2;
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(*a2 + 2712), (uint64_t)v16);
  v6 = a2[2];
  v7 = *(unsigned int *)(*(_QWORD *)a2[1] + 4 * a3);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7);
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v7 + 8);
  v10 = *(_QWORD *)(v6 + 24);
  if (v9 != v8 && v10 == 0)
    std::terminate();
  v12 = (unsigned int *)(v10 + 8 * v8);
  v13 = v9 == v8 || *(float *)(v10 + 8 * v8 + 4) != *(float *)&v12[2 * v9 + 1 + 2 * ~v8];
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 == 2)
    goto LABEL_13;
  if (v15)
    goto LABEL_14;
  if (*(float *)(v14 + 4) <= *(float *)(**(_QWORD **)(v5 + 2848) + 4 * v7))
    v13 = 0;
  if (v13)
  {
LABEL_13:
    xgboost::tree::ColMaker::Builder::EnumerateSplit((_QWORD *)v5, v12, (unsigned int *)(v10 + 8 * v9), 1, v7, (uint64_t *)a2[3], *(uint64_t **)(v5 + 2640), v16);
    v15 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 8);
LABEL_14:
    if (v15 == 2)
      return;
  }
  xgboost::tree::ColMaker::Builder::EnumerateSplit((_QWORD *)v5, (unsigned int *)(v10 + 8 * v9 - 8), v12 - 2, -1, v7, (uint64_t *)a2[3], *(uint64_t **)(v5 + 2640), v16);
}

uint64_t **xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (*((_DWORD *)result + 6) == -1)
  {
    v4 = result[1];
    v3 = *result[2];
    v2 = (result[2][1] - v3) >> 2;
    v5 = **result;
    *(_QWORD *)(a2 + 16) = ((*result)[1] - v5) >> 2;
    *(_QWORD *)(a2 + 24) = v5;
    v7 = v4;
    v6 = *v4;
    *(_QWORD *)(a2 + 32) = (v7[1] - v6) >> 2;
    *(_QWORD *)(a2 + 40) = v6;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 48) = *((_BYTE *)result + 28);
  return result;
}

void xgboost::tree::ColMaker::Builder::EnumerateSplit(_QWORD *a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, _QWORD *a8)
{
  int *v10;
  int *i;
  int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  unsigned int v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD *v33;
  unsigned int *v34;
  uint64_t v35;
  __int32 *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int8x16_t v40;
  int8x16_t v41;
  _QWORD *v42;
  int *v43;
  int *v44;
  uint64_t *j;
  int v46;
  uint64_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  float *v50;
  double v51;
  int8x16_t v52;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  double v58;
  float v59;
  float v60;
  uint64_t v61;
  unsigned int *v62;
  int v63;
  float v64;
  double v65;
  float v66;
  uint64_t v67;
  unsigned int *v68;
  int v69;
  float v70;
  int8x16_t *v71;
  uint64_t v72;
  std::string *Entry;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  unsigned int *v79;
  float *v80;
  uint64_t *v82;
  _QWORD *v84;
  int8x16_t v85;
  _OWORD v86[16];
  _OWORD v87[8];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v82 = a7;
  v84 = a1;
  if (!*(_BYTE *)(a1[1] + 76))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_colmaker.cc");
    v74 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v86);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: param_.cache_opt", 30);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v86);
    a7 = v82;
    a1 = v84;
  }
  v10 = (int *)a1[336];
  for (i = (int *)a1[337]; v10 != i; v13[1] = 0)
  {
    v12 = *v10++;
    v13 = (_QWORD *)(*a7 + 104 * v12);
    *v13 = 0;
  }
  v85 = 0uLL;
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, sizeof(v86));
  v14 = a3;
  if (a4 <= 0)
    v15 = a2;
  else
    v15 = a3;
  if (a4 > 0)
    v14 = a2;
  v16 = 32;
  if (a4 <= 0)
    v16 = -32;
  v17 = (((char *)v15 - (char *)v14) >> 3) / v16;
  v79 = &a2[64 * v17];
  if (v17)
  {
    v18 = 8 * a4;
    do
    {
      v19 = 0;
      v20 = v84[327];
      v21 = *a6;
      v22 = a2;
      do
      {
        v23 = *v22;
        *((_DWORD *)v87 + v19) = *(_DWORD *)(v20 + 4 * v23);
        *((_QWORD *)v86 + v19++) = *(_QWORD *)(v21 + 8 * v23);
        v22 = (unsigned int *)((char *)v22 + v18);
      }
      while (v19 != 32);
      v24 = 0;
      v25 = 4;
      v26 = (__int32 *)v86 + 1;
      do
      {
        v27 = *(_DWORD *)((char *)v87 + v24);
        if ((v27 & 0x80000000) == 0
          && xgboost::FeatureInteractionConstraintHost::Query((xgboost::FeatureInteractionConstraintHost *)(v84 + 343), *(_DWORD *)((char *)v87 + v24), a5))
        {
          v28.i32[0] = *(v26 - 1);
          v29.i32[0] = *v26;
          xgboost::tree::ColMaker::Builder::UpdateEnumeration((uint64_t)v84, v27, a4, a5, (double *)v85.i64, *v82, a8, v28, v29, *(float *)((char *)a2 + v25));
        }
        v24 += 4;
        v26 += 2;
        v25 += v18;
      }
      while (v24 != 128);
      a2 += 64 * a4;
    }
    while (a2 != v79);
  }
  if (v79 != a3)
  {
    v30 = v84[327];
    v31 = *a6;
    v32 = v86;
    v33 = v87;
    v34 = v79;
    do
    {
      v35 = *v34;
      *v33++ = *(_DWORD *)(v30 + 4 * v35);
      *v32++ = *(_QWORD *)(v31 + 8 * v35);
      v34 += 2 * a4;
    }
    while (v34 != a3);
    v36 = (__int32 *)v86 + 1;
    v37 = (unsigned int *)v87;
    do
    {
      v39 = *v37++;
      v38 = v39;
      if ((v39 & 0x80000000) == 0
        && xgboost::FeatureInteractionConstraintHost::Query((xgboost::FeatureInteractionConstraintHost *)(v84 + 343), v38, a5))
      {
        v40.i32[0] = *(v36 - 1);
        v41.i32[0] = *v36;
        xgboost::tree::ColMaker::Builder::UpdateEnumeration((uint64_t)v84, v38, a4, a5, (double *)v85.i64, *v82, a8, v40, v41, *((float *)v79 + 1));
      }
      v36 += 2;
      v79 += 2 * a4;
    }
    while (v79 != a3);
  }
  v42 = v84;
  v43 = (int *)v84[336];
  v44 = (int *)v84[337];
  for (j = v82; v43 != v44; ++v43)
  {
    v46 = *v43;
    v47 = *j;
    v48 = (int8x16_t *)(*j + 104 * *v43);
    v49 = *v48;
    v52 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v42[333] + 104 * *v43), *(float64x2_t *)v48);
    v85 = v52;
    v49.i64[0] = v48->i64[1];
    v50 = (float *)v42[1];
    v51 = v50[8];
    v52.i32[1] = v52.i32[3];
    if (*(double *)v49.i64 < v51 || *(double *)&v52.i64[1] < v51)
      continue;
    v54 = v47 + 104 * v46;
    v56 = *(float *)(v54 + 16);
    v55 = (float *)(v54 + 16);
    *(float *)v52.i32 = fabsf(v56) + 0.000001;
    *(float *)v49.i32 = -*(float *)v52.i32;
    if (a4 == 1)
      v57 = *(float *)v52.i32;
    else
      v57 = -*(float *)v52.i32;
    v80 = v55 + 2;
    if (a4 == -1)
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a8, v50, v46, a5, (double *)v85.i64, (double *)v48->i64, v52, v49);
      v42 = v84;
      v66 = v65 - *(float *)(v84[333] + 104 * v46 + 16);
      j = v82;
      if (fabsf(v66) != INFINITY)
      {
        v60 = *v55;
        v67 = v47 + 104 * v46;
        v69 = *(_DWORD *)(v67 + 28);
        v68 = (unsigned int *)(v67 + 28);
        v70 = *v80;
        if ((v69 & 0x7FFFFFFFu) > a5)
        {
          if (v70 > v66)
            continue;
LABEL_50:
          *v80 = v66;
          *v68 = a5 | 0x80000000;
          v71 = &v85;
LABEL_51:
          v72 = v47 + 104 * v46;
          *(float *)(v72 + 32) = v57 + v60;
          *(_BYTE *)(v72 + 64) = 0;
          *(int8x16_t *)(v72 + 72) = *v71;
          *(int8x16_t *)(v72 + 88) = *v48;
          continue;
        }
        if (v70 < v66)
          goto LABEL_50;
      }
    }
    else
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a8, v50, v46, a5, (double *)v48->i64, (double *)v85.i64, v52, v49);
      v42 = v84;
      v59 = v58 - *(float *)(v84[333] + 104 * v46 + 16);
      j = v82;
      if (fabsf(v59) != INFINITY)
      {
        v60 = *v55;
        v61 = v47 + 104 * v46;
        v63 = *(_DWORD *)(v61 + 28);
        v62 = (unsigned int *)(v61 + 28);
        v64 = *v80;
        if ((v63 & 0x7FFFFFFFu) > a5)
        {
          if (v64 > v59)
            continue;
LABEL_48:
          *v80 = v59;
          *v62 = a5;
          v71 = v48;
          v48 = &v85;
          goto LABEL_51;
        }
        if (v64 < v59)
          goto LABEL_48;
      }
    }
  }
}

void sub_220E62714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::FeatureInteractionConstraintHost::Query(xgboost::FeatureInteractionConstraintHost *this, int a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unsigned int v8;

  v8 = a3;
  if (!*((_BYTE *)this + 100))
    return 1;
  v4 = *((_QWORD *)this + 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 4) - v4) >> 3) <= a2
    || (v5 = a2,
        v6 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>((_QWORD *)(v4 + 40 * a2), &v8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) <= v5))
  {
    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return v6 != 0;
}

void xgboost::tree::ColMaker::Builder::UpdateEnumeration(uint64_t a1, unsigned int a2, int a3, unsigned int a4, double *a5, uint64_t a6, _QWORD *a7, int8x16_t a8, int8x16_t a9, float a10)
{
  float64x2_t *v13;
  double v14;
  float *v15;
  uint64_t v16;
  float v17;
  float *v20;
  double v21;
  float64x2_t *v22;
  double *v23;
  double v24;
  float *v26;
  double v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  float v35;
  double v36;
  float v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  float v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  float v47;
  uint64_t v48;
  unsigned int *v49;
  int v50;
  float v51;
  float64x2_t *v52;
  uint64_t v53;
  unsigned __int32 v54;
  unsigned __int32 v55;

  v13 = (float64x2_t *)(a6 + 104 * a2);
  v14 = v13->f64[1];
  if (v14 != 0.0)
  {
    v16 = a6 + 104 * a2;
    v17 = *(float *)(v16 + 16);
    v15 = (float *)(v16 + 16);
    if (v17 == a10)
      goto LABEL_6;
    v20 = *(float **)(a1 + 8);
    v21 = v20[8];
    if (v14 < v21)
      goto LABEL_6;
    v22 = (float64x2_t *)a5;
    v23 = (double *)(*(_QWORD *)(a1 + 2664) + 104 * a2);
    v24 = v23[1] - v14;
    *a5 = *v23 - v13->f64[0];
    a5[1] = v24;
    if (v24 < v21)
      goto LABEL_6;
    v54 = a8.i32[0];
    v55 = a9.i32[0];
    v26 = (float *)(a6 + 104 * a2 + 24);
    if (a3 != -1)
    {
      xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, v20, a2, a4, v13->f64, a5, a8, a9);
      v28 = v27 - *(float *)(*(_QWORD *)(a1 + 2664) + 104 * a2 + 16);
      v29 = *v15;
      v30 = (float)(*v15 + a10) * 0.5;
      v31 = fabsf(v28) == INFINITY;
      if (v30 == a10)
      {
        a8.i32[0] = v54;
        a9.i32[0] = v55;
        if (!v31)
        {
          v32 = a6 + 104 * a2;
          v34 = *(_DWORD *)(v32 + 28);
          v33 = (unsigned int *)(v32 + 28);
          v35 = *v26;
          if ((v34 & 0x7FFFFFFFu) <= a4)
          {
            if (v35 < v28)
            {
LABEL_28:
              *v26 = v28;
              *v33 = a4;
LABEL_33:
              v52 = v13;
LABEL_37:
              v53 = a6 + 104 * a2;
              *(float *)(v53 + 32) = v29;
              *(_BYTE *)(v53 + 64) = 0;
              *(float64x2_t *)(v53 + 72) = *v52;
              *(float64x2_t *)(v53 + 88) = *v22;
            }
          }
          else if (v35 <= v28)
          {
            goto LABEL_28;
          }
        }
      }
      else
      {
        a8.i32[0] = v54;
        a9.i32[0] = v55;
        if (!v31)
        {
          v44 = a6 + 104 * a2;
          v46 = *(_DWORD *)(v44 + 28);
          v45 = (unsigned int *)(v44 + 28);
          v47 = *v26;
          if ((v46 & 0x7FFFFFFFu) <= a4)
          {
            if (v47 >= v28)
              goto LABEL_6;
          }
          else if (v47 > v28)
          {
            goto LABEL_6;
          }
          *v26 = v28;
          *v45 = a4;
          v29 = v30;
          goto LABEL_33;
        }
      }
LABEL_6:
      a8.i32[1] = a9.i32[0];
      *v13 = vaddq_f64(*v13, vcvtq_f64_f32(*(float32x2_t *)a8.i8));
      goto LABEL_7;
    }
    xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(a7, v20, a2, a4, a5, v13->f64, a8, a9);
    v37 = v36 - *(float *)(*(_QWORD *)(a1 + 2664) + 104 * a2 + 16);
    v29 = *v15;
    v38 = (float)(*v15 + a10) * 0.5;
    v39 = fabsf(v37) == INFINITY;
    if (v38 == a10)
    {
      a8.i32[0] = v54;
      a9.i32[0] = v55;
      if (v39)
        goto LABEL_6;
      v40 = a6 + 104 * a2;
      v42 = *(_DWORD *)(v40 + 28);
      v41 = (unsigned int *)(v40 + 28);
      v43 = *v26;
      if ((v42 & 0x7FFFFFFFu) <= a4)
      {
        if (v43 >= v37)
          goto LABEL_6;
      }
      else if (v43 > v37)
      {
        goto LABEL_6;
      }
      *v26 = v37;
      *v41 = a4 | 0x80000000;
    }
    else
    {
      a8.i32[0] = v54;
      a9.i32[0] = v55;
      if (v39)
        goto LABEL_6;
      v48 = a6 + 104 * a2;
      v50 = *(_DWORD *)(v48 + 28);
      v49 = (unsigned int *)(v48 + 28);
      v51 = *v26;
      if ((v50 & 0x7FFFFFFFu) <= a4)
      {
        if (v51 >= v37)
          goto LABEL_6;
      }
      else if (v51 > v37)
      {
        goto LABEL_6;
      }
      *v26 = v37;
      *v49 = a4 | 0x80000000;
      v29 = v38;
    }
    v52 = v22;
    v22 = v13;
    goto LABEL_37;
  }
  v13->f64[0] = v13->f64[0] + *(float *)a8.i32;
  v13->f64[1] = v14 + *(float *)a9.i32;
  v15 = (float *)(a6 + 104 * a2 + 16);
LABEL_7:
  *v15 = a10;
}

void xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcSplitGain(_QWORD *a1, float *a2, int a3, unsigned int a4, double *a5, double *a6, int8x16_t a7, int8x16_t a8)
{
  int8x16_t v13;
  float v14;
  int8x16_t v15;
  float v16;

  if (*a1 <= (unint64_t)a4)
    std::terminate();
  *(float *)v13.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)a1, a3, a2, a5, a7, a8);
  v14 = *(float *)v13.i32;
  v16 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)a1, a3, a2, a6, v13, v15);
  xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)a1, a2, a5, v14);
  xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)a1, a2, a6, v16);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

float xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight(uint64_t a1, int a2, float *a3, double *a4, int8x16_t a5, int8x16_t a6)
{
  double v6;
  BOOL v7;
  double v8;
  float v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  float v14;
  float64x2_t v15;
  float v16;
  float result;

  v6 = a4[1];
  a6.i64[0] = 0;
  v7 = v6 <= 0.0 || v6 < a3[8];
  if (!v7)
  {
    v8 = *a4;
    v9 = a3[10];
    v10 = v9;
    v7 = *a4 < (float)-v9;
    v11 = *a4 + v9;
    if (!v7)
      v11 = 0.0;
    v12 = v8 <= v10;
    v13 = v8 - v10;
    if (v12)
      v13 = v11;
    *(double *)a6.i64 = -v13 / (v6 + a3[9]);
    v14 = a3[11];
    if (v14 != 0.0)
    {
      *(double *)a5.i64 = v14;
      if (fabs(*(double *)a6.i64) > *(double *)a5.i64)
      {
        v15.f64[0] = NAN;
        v15.f64[1] = NAN;
        a6.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v15), a5, a6).u64[0];
      }
    }
  }
  v16 = *(double *)a6.i64;
  if (a2 == 0x7FFFFFFF || !*(_BYTE *)(a1 + 48))
    return v16;
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    goto LABEL_21;
  result = *(float *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  if (result > v16)
    return result;
  if (*(_QWORD *)(a1 + 32) <= (unint64_t)a2)
LABEL_21:
    std::terminate();
  result = v16;
  if (*(float *)(*(_QWORD *)(a1 + 40) + 4 * a2) < v16)
    return *(float *)(*(_QWORD *)(a1 + 40) + 4 * a2);
  return result;
}

float xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight(uint64_t a1, float *a2, double *a3, float a4)
{
  double v4;
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;

  v4 = a3[1];
  v5 = 0.0;
  if (v4 > 0.0)
  {
    if (a2[11] == 0.0 && !*(_BYTE *)(a1 + 48))
    {
      v8 = *a3;
      v9 = a2[10];
      v10 = v9;
      if (*a3 <= v9)
      {
        v12 = (float)-v9;
        v11 = 0.0;
        if (v8 < v12)
          v11 = v8 + v10;
      }
      else
      {
        v11 = v8 - v10;
      }
      return v11 * v11 / (v4 + a2[9]);
    }
    else
    {
      v6 = *a3;
      v7 = v4;
      return -(float)((float)((float)(a4 * a4) * (float)(a2[9] + v7)) + (float)((float)(v6 + v6) * a4));
    }
  }
  return v5;
}

void xgboost::tree::ColMaker::Builder::InitNewNode(uint64_t a1, int **a2, float32x2_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int **v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  float32x2_t *v52;
  unsigned int v53;
  unsigned int v54;
  int *v55;
  int *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  float64x2_t v61;
  uint64_t *v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int *v66;
  int *v67;
  uint64_t v68;
  int v69;
  int v70;
  int8x16_t v71;
  uint64_t v72;
  float *v73;
  int8x16_t v74;
  float v75;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  std::exception_ptr v88[6];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v6 = *(uint64_t **)(a1 + 2640);
  v7 = *(uint64_t **)(a1 + 2648);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *(int *)(a5 + 12);
      v85 = 0u;
      v86 = 0u;
      v87 = 0;
      memset(v88, 0, sizeof(v88));
      v9 = *v6;
      v10 = v6[1];
      v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - *v6) >> 3);
      v12 = v8 - v11;
      if (v8 > v11)
        break;
      if (v8 < v11)
      {
        v21 = v9 + 104 * (int)v8;
        while (v10 != v21)
        {
          v22 = *(void **)(v10 - 64);
          if (v22)
          {
            *(_QWORD *)(v10 - 56) = v22;
            operator delete(v22);
          }
          v10 -= 104;
        }
LABEL_21:
        v6[1] = v21;
      }
LABEL_22:
      v6 += 3;
      if (v6 == v7)
        goto LABEL_23;
    }
    v13 = v6[2];
    if (0x4EC4EC4EC4EC4EC5 * ((v13 - v10) >> 3) < v12)
    {
      if ((v8 & 0x80000000) != 0)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v14 = 0x4EC4EC4EC4EC4EC5 * ((v13 - v9) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v8)
        v15 = v8;
      if (v14 >= 0x13B13B13B13B13BLL)
        v16 = 0x276276276276276;
      else
        v16 = v15;
      v84 = v6 + 2;
      v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(v16);
      v81 = &v80[104 * v11];
      v82 = v81;
      v83 = &v80[104 * v17];
      v18 = &v80[104 * (int)v8];
      v19 = v81 + 40;
      v20 = 104 * (int)v8 - 104 * v11;
      do
      {
        *(_OWORD *)(v19 - 40) = v85;
        *((_DWORD *)v19 - 6) = v86;
        *((_QWORD *)v19 - 2) = *((_QWORD *)&v86 + 1);
        *((_DWORD *)v19 - 2) = v87;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = 0;
        *(_QWORD *)v19 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v19, 0, 0, 0);
        *(_OWORD *)(v19 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v19 + 40) = *(_OWORD *)&v88[3].__ptr_;
        *((std::exception_ptr *)v19 + 7) = v88[5];
        v19 += 104;
        v20 -= 104;
      }
      while (v20);
      v82 = v18;
      std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(v6, &v80);
      std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v80);
      goto LABEL_22;
    }
    v21 = v10 + 104 * v12;
    v23 = v10 + 40;
    v24 = 104 * (int)v8 - 104 * v11;
    do
    {
      *(_OWORD *)(v23 - 40) = v85;
      *(_DWORD *)(v23 - 24) = v86;
      *(_QWORD *)(v23 - 16) = *((_QWORD *)&v86 + 1);
      *(_DWORD *)(v23 - 8) = v87;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)v23 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v23, 0, 0, 0);
      *(_OWORD *)(v23 + 24) = *(_OWORD *)&v88[1].__ptr_;
      *(_OWORD *)(v23 + 40) = *(_OWORD *)&v88[3].__ptr_;
      *(std::exception_ptr *)(v23 + 56) = v88[5];
      v23 += 104;
      v24 -= 104;
    }
    while (v24);
    goto LABEL_21;
  }
LABEL_23:
  v25 = *(int *)(a5 + 12);
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  memset(v88, 0, sizeof(v88));
  v26 = *(_QWORD *)(a1 + 2672);
  v27 = *(_QWORD *)(a1 + 2664);
  v28 = 0x4EC4EC4EC4EC4EC5 * ((v26 - v27) >> 3);
  v29 = v25 >= v28;
  v30 = v25 - v28;
  if (v25 <= v28)
  {
    v43 = a4;
    v42 = a2;
    if (!v29)
    {
      v44 = v27 + 104 * (int)v25;
      while (v26 != v44)
      {
        v45 = *(void **)(v26 - 64);
        if (v45)
        {
          *(_QWORD *)(v26 - 56) = v45;
          operator delete(v45);
        }
        v26 -= 104;
      }
      *(_QWORD *)(a1 + 2672) = v44;
    }
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 2680);
    if (0x4EC4EC4EC4EC4EC5 * ((v31 - v26) >> 3) >= v30)
    {
      v46 = v26 + 104 * v30;
      v47 = v26 + 40;
      v48 = 104 * (int)v25 - 8 * ((v26 - v27) >> 3);
      do
      {
        *(_OWORD *)(v47 - 40) = v85;
        v49 = *((_QWORD *)&v86 + 1);
        *(_QWORD *)(v47 - 24) = v86;
        *(_QWORD *)(v47 - 16) = v49;
        *(_DWORD *)(v47 - 8) = v87;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 16) = 0;
        *(_QWORD *)v47 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v47, 0, 0, 0);
        *(_OWORD *)(v47 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v47 + 40) = *(_OWORD *)&v88[3].__ptr_;
        *(std::exception_ptr *)(v47 + 56) = v88[5];
        v47 += 104;
        v48 -= 104;
      }
      while (v48);
      *(_QWORD *)(a1 + 2672) = v46;
    }
    else
    {
      if ((v25 & 0x80000000) != 0)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v32 = 0x4EC4EC4EC4EC4EC5 * ((v31 - v27) >> 3);
      v33 = 2 * v32;
      if (2 * v32 <= v25)
        v33 = v25;
      if (v32 >= 0x13B13B13B13B13BLL)
        v34 = 0x276276276276276;
      else
        v34 = v33;
      v84 = (uint64_t *)(a1 + 2680);
      if (v34 > 0x276276276276276)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = (char *)operator new(104 * v34);
      v36 = 104 * v28;
      v80 = v35;
      v81 = &v35[104 * v28];
      v82 = v81;
      v83 = &v35[104 * v34];
      v37 = &v35[104 * (int)v25];
      v38 = v81 + 40;
      v39 = 104 * (int)v25 - v36;
      do
      {
        *(_OWORD *)(v38 - 40) = v85;
        v40 = *((_QWORD *)&v86 + 1);
        *((_QWORD *)v38 - 3) = v86;
        *((_QWORD *)v38 - 2) = v40;
        *((_DWORD *)v38 - 2) = v87;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        *(_QWORD *)v38 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38, 0, 0, 0);
        v41 = *(_OWORD *)&v88[3].__ptr_;
        *(_OWORD *)(v38 + 24) = *(_OWORD *)&v88[1].__ptr_;
        *(_OWORD *)(v38 + 40) = v41;
        *((std::exception_ptr *)v38 + 7) = v88[5];
        v38 += 104;
        v39 -= 104;
      }
      while (v39);
      v82 = v37;
      std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer((uint64_t *)(a1 + 2664), &v80);
      std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer((uint64_t)&v80);
    }
    v43 = a4;
    v42 = a2;
  }
  v50 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
  v88[0].__ptr_ = 0;
  v88[1].__ptr_ = (void *)850045863;
  memset(&v88[2], 0, 32);
  v89 = 0u;
  v90 = 0;
  if (v50)
  {
    v51 = *(unsigned int **)(a1 + 2616);
    v52 = *a3;
    do
    {
      v54 = *v51++;
      v53 = v54;
      if ((v54 & 0x80000000) == 0)
        *(float64x2_t *)(**(_QWORD **)(a1 + 2640) + 104 * v53) = vaddq_f64(*(float64x2_t *)(**(_QWORD **)(a1 + 2640)+ 104 * v53), vcvtq_f64_f32(*v52));
      ++v52;
      --v50;
    }
    while (v50);
  }
  dmlc::OMPException::Rethrow(v88);
  std::mutex::~mutex((std::mutex *)&v88[1]);
  std::exception_ptr::~exception_ptr(v88);
  v55 = *v42;
  v56 = v42[1];
  if (*v42 != v56)
  {
    v57 = *(uint64_t **)(a1 + 2640);
    v58 = *(uint64_t **)(a1 + 2648);
    v59 = *(_QWORD *)(a1 + 2664);
    do
    {
      v60 = *v55;
      v61 = 0uLL;
      if (v57 != v58)
      {
        v62 = v57;
        do
        {
          v63 = *v62;
          v62 += 3;
          v61 = vaddq_f64(v61, *(float64x2_t *)(v63 + 104 * v60));
        }
        while (v62 != v58);
      }
      *(float64x2_t *)(v59 + 104 * v60) = v61;
      ++v55;
    }
    while (v55 != v56);
  }
  xgboost::tree::TreeEvaluator::GetEvaluator<xgboost::tree::TrainParam>((uint64_t **)(a1 + 2712), (uint64_t)v88);
  v66 = *v42;
  v67 = v42[1];
  if (*v42 != v67)
  {
    v68 = *(_QWORD *)(a1 + 2664);
    do
    {
      v69 = *v66;
      v70 = *(_DWORD *)(*(_QWORD *)(a5 + 160) + 20 * *v66) & 0x7FFFFFFF;
      *(float *)v71.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v88, *(_DWORD *)(*(_QWORD *)(a5 + 160) + 20 * v69) & 0x7FFFFFFF, *(float **)(a1 + 8), (double *)(v68 + 104 * v69), v64, v65);
      v72 = *(_QWORD *)(a1 + 2664) + 104 * v69;
      *(_DWORD *)(v72 + 20) = v71.i32[0];
      v73 = *(float **)(a1 + 8);
      v75 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcWeight((uint64_t)v88, v70, v73, (double *)v72, v71, v74);
      *(float *)v64.i32 = xgboost::tree::TreeEvaluator::SplitEvaluator<xgboost::tree::TrainParam>::CalcGainGivenWeight((uint64_t)v88, v73, (double *)v72, v75);
      v68 = *(_QWORD *)(a1 + 2664);
      *(_DWORD *)(v68 + 104 * v69 + 16) = v64.i32[0];
      ++v66;
    }
    while (v66 != v67);
  }
}

void sub_220E634D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::exception_ptr a25)
{
  _Unwind_Resume(exception_object);
}

void xgboost::tree::TreeEvaluator::AddSplit<false>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, float a6, float a7)
{
  int v7;
  __int128 v8;
  float v9;
  float v10;
  __int128 v11;
  int64x2_t v12;
  int v13;
  int v14;

  if (*(_BYTE *)(a1 + 28))
  {
    v7 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)&v8 = __PAIR64__(a2, a3);
    *((_QWORD *)&v8 + 1) = __PAIR64__(a5, a4);
    v9 = a6;
    v10 = a7;
    v11 = xmmword_220F60900;
    v12 = vdupq_n_s64(1uLL);
    v13 = 1;
    v14 = v7;
    xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<int> *>(&v8, a1, a1 + 8, a1 + 16);
  }
}

void xgboost::common::ColumnSampler::Init(float *a1, std::vector<unsigned int>::size_type a2, __n128 *__c, float a4, float a5, float a6)
{
  std::vector<unsigned int> **v11;
  std::vector<unsigned int> **v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::vector<unsigned int> **v29;
  std::__shared_weak_count *v30;
  std::vector<unsigned int>::value_type __x[5];

  std::vector<float>::__move_assign((uint64_t)(a1 + 10), __c);
  a1[16] = a5;
  a1[17] = a6;
  a1[18] = a4;
  if (!*(_QWORD *)a1)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__x);
    std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)__x);
    v26 = *(std::__shared_weak_count **)&__x[2];
    if (*(_QWORD *)&__x[2])
    {
      v27 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  xgboost::common::ColumnSampler::Reset((std::vector<unsigned int> ***)a1);
  v11 = *(std::vector<unsigned int> ***)a1;
  __x[0] = 0;
  std::vector<unsigned int>::resize(*v11, a2, __x);
  v12 = *(std::vector<unsigned int> ***)a1;
  v13 = **(_QWORD **)a1;
  v14 = *(_DWORD **)v13;
  v15 = *(_DWORD **)(v13 + 8);
  if (v14 != v15)
  {
    v16 = 0;
    do
      *v14++ = v16++;
    while (v14 != v15);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v29 = v12;
  v30 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  xgboost::common::ColumnSampler::ColSample((uint64_t)a1, &v29, (std::vector<unsigned int> ***)__x, a1[17]);
  std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)__x);
  v20 = *(std::__shared_weak_count **)&__x[2];
  if (*(_QWORD *)&__x[2])
  {
    v21 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_220E63768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

uint64_t dmlc::LogCheckFormat<unsigned long long,unsigned long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E63928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E63A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void xgboost::common::ColumnSampler::Reset(std::vector<unsigned int> ***this)
{
  xgboost::common::ColumnSampler *v1;
  std::vector<unsigned int> **v2;
  _QWORD *v3;
  std::vector<unsigned int>::value_type __x;

  v1 = (xgboost::common::ColumnSampler *)this;
  v2 = *this;
  __x = 0;
  std::vector<unsigned int>::resize(*v2, 0, &__x);
  v3 = (_QWORD *)*((_QWORD *)v1 + 3);
  v1 = (xgboost::common::ColumnSampler *)((char *)v1 + 24);
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy((uint64_t)v1 - 8, v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x20uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_220E63BE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN7xgboost16HostDeviceVectorIjEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24E6B8030;
  *(_QWORD *)(a1 + 8) = 0;
  xgboost::HostDeviceVector<unsigned int>::HostDeviceVector((std::vector<unsigned int> **)(a1 + 24), 0, 0);
  return a1;
}

void sub_220E63C38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6B8030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6B8030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t *std::__shared_ptr_emplace<xgboost::HostDeviceVector<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector((uint64_t *)(a1 + 24));
}

uint64_t std::vector<xgboost::tree::ColMaker::ThreadEntry>::__init_with_size[abi:ne180100]<xgboost::tree::ColMaker::ThreadEntry*,xgboost::tree::ColMaker::ThreadEntry*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[3];
  char v17;
  char *v18;
  char *v19;

  if (a4)
  {
    if (a4 >= 0x276276276276277)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[104 * v9];
    v18 = v7;
    v19 = v7;
    v16[0] = v6 + 2;
    v16[1] = &v18;
    v16[2] = &v19;
    v17 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        v11 = *a2;
        *((_DWORD *)v10 + 4) = *((_DWORD *)a2 + 4);
        *(_OWORD *)v10 = v11;
        v12 = *((_QWORD *)a2 + 3);
        v13 = *((_DWORD *)a2 + 8);
        *((_QWORD *)v10 + 5) = 0;
        *((_DWORD *)v10 + 8) = v13;
        *((_QWORD *)v10 + 3) = v12;
        *((_QWORD *)v10 + 6) = 0;
        *((_QWORD *)v10 + 7) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v10 + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
        v14 = a2[4];
        v15 = a2[5];
        *((_QWORD *)v10 + 12) = *((_QWORD *)a2 + 12);
        *((_OWORD *)v10 + 4) = v14;
        *((_OWORD *)v10 + 5) = v15;
        v10 = v19 + 104;
        v19 += 104;
        a2 = (__int128 *)((char *)a2 + 104);
      }
      while (a2 != a3);
      v8 = v10;
    }
    v17 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::ColMaker::ThreadEntry>,xgboost::tree::ColMaker::ThreadEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
    v6[1] = v8;
  }
  return result;
}

void sub_220E63DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::tree::ColMaker::ThreadEntry>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E63E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::tree::ColMaker::ThreadEntry>,xgboost::tree::ColMaker::ThreadEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 104)
    {
      v5 = *(void **)(i - 64);
      if (v5)
      {
        *(_QWORD *)(i - 56) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<xgboost::tree::ColMaker::ThreadEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<xgboost::tree::ColMaker::ThreadEntry>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 104;
      v6 = *(_OWORD *)(v3 - 104);
      *(_DWORD *)(v4 - 88) = *(_DWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      v7 = *(_QWORD *)(v3 - 80);
      *(_DWORD *)(v4 - 72) = *(_DWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 80) = v7;
      *(_QWORD *)(v4 - 56) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v3 - 48);
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v8 = *(_OWORD *)(v3 - 40);
      v9 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v9;
      *(_OWORD *)(v4 - 40) = v8;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<xgboost::tree::ColMaker::ThreadEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 104;
    v4 = *(void **)(v2 - 64);
    if (v4)
    {
      *(_QWORD *)(v2 - 56) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 104;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<xgboost::tree::ColMaker::NodeEntry>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 104;
      v6 = *(_OWORD *)(v3 - 104);
      *(_QWORD *)(v4 - 88) = *(_QWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v6;
      v7 = *(_QWORD *)(v3 - 80);
      *(_DWORD *)(v4 - 72) = *(_DWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 80) = v7;
      *(_QWORD *)(v4 - 56) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 64) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v3 - 48);
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v8 = *(_OWORD *)(v3 - 40);
      v9 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v9;
      *(_OWORD *)(v4 - 40) = v8;
      v4 -= 104;
      v3 -= 104;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void xgboost::common::ColumnSampler::GetFeatureSet(xgboost::common::ColumnSampler *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *i;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::vector<unsigned int> **v32;
  std::__shared_weak_count *v33;
  std::vector<unsigned int> **v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  int v37;
  int *v38;

  v37 = a2;
  v5 = *((float *)this + 16);
  if (v5 == 1.0 && *((float *)this + 18) == 1.0)
  {
    v6 = *((_QWORD *)this + 1);
    *(_QWORD *)a3 = *(_QWORD *)this;
    *(_QWORD *)(a3 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    for (i = (uint64_t *)*((_QWORD *)this + 3); i; i = (uint64_t *)*i)
    {
      v10 = *((_DWORD *)i + 8);
      if (v10 <= a2)
      {
        if (v10 >= a2)
          goto LABEL_26;
        ++i;
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v34 = *(std::vector<unsigned int> ***)this;
    v35 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v5 = *((float *)this + 16);
    }
    xgboost::common::ColumnSampler::ColSample((uint64_t)this, &v34, (std::vector<unsigned int> ***)&v36, v5);
    v38 = &v37;
    v14 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v37, (uint64_t)&std::piecewise_construct, &v38);
    std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100]((uint64_t)(v14 + 5), &v36);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v35;
    if (v35)
    {
      v19 = (unint64_t *)&v35->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
LABEL_26:
    if (*((float *)this + 18) == 1.0)
    {
      *(_QWORD *)&v36 = &v37;
      v21 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v37, (uint64_t)&std::piecewise_construct, (_DWORD **)&v36);
      *(_QWORD *)a3 = v21[5];
      v22 = v21[6];
      *(_QWORD *)(a3 + 8) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 1);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      *(_QWORD *)&v36 = &v37;
      v25 = std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 2, &v37, (uint64_t)&std::piecewise_construct, (_DWORD **)&v36);
      v26 = v25[6];
      v32 = (std::vector<unsigned int> **)v25[5];
      v33 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 1);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      xgboost::common::ColumnSampler::ColSample((uint64_t)this, &v32, (std::vector<unsigned int> ***)a3, *((float *)this + 18));
      v29 = v33;
      if (v33)
      {
        v30 = (unint64_t *)&v33->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
}

void sub_220E643AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<float> *,xgboost::HostDeviceVector<int> *>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  if ((*((_DWORD *)a1 + 15) & 0x80000000) != 0)
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 2);
    v11 = a3;
    v12 = a2;
    v10 = a4;
    v4 = *((_QWORD *)a1 + 5);
    v5 = *((_DWORD *)a1 + 14);
    v13[0] = &v6;
    v13[1] = &v12;
    v13[2] = a1;
    v13[3] = &v11;
    v13[4] = &v10;
    xgboost::common::ParallelFor<unsigned long,void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1}>(v4, v5, 2, 0, (uint64_t)v13);
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
    xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCUDA<(void *)0,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>();
  }
}

void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCUDA<(void *)0,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/transform.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
  std::ostream::operator<<();
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220E645FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelFor<unsigned long,void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1}>(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *ptr;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  int v42;
  int v43;
  std::exception_ptr v44;
  std::mutex v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v42 = 1;
  v43 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v44);
    if (v44.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/../common/threading_utils.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"n_threads >= 1", 14);
      v15 = *((char *)v44.__ptr_ + 23);
      v16 = v15 >= 0 ? v44.__ptr_ : *(void **)v44.__ptr_;
      v17 = v15 >= 0 ? *((unsigned __int8 *)v44.__ptr_ + 23) : *((_QWORD *)v44.__ptr_ + 1);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
      ptr = v44.__ptr_;
      v44.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, (uint64_t)ptr);
    }
  }
  v44.__ptr_ = 0;
  v45.__m_.__sig = 850045863;
  memset(v45.__m_.__opaque, 0, sizeof(v45.__m_.__opaque));
  switch(a3)
  {
    case 0:
      if (a1)
      {
        v9 = 0;
        do
        {
          v10 = *(_OWORD *)(a5 + 16);
          v40[0] = *(_OWORD *)a5;
          v40[1] = v10;
          v41 = *(_QWORD *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v40, v9++);
        }
        while (a1 != v9);
      }
      break;
    case 1:
      if (a4)
      {
        if (a1)
        {
          v20 = 0;
          do
          {
            v21 = *(_OWORD *)(a5 + 16);
            v36[0] = *(_OWORD *)a5;
            v36[1] = v21;
            v37 = *(_QWORD *)(a5 + 32);
            dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v36, v20++);
          }
          while (a1 != v20);
        }
      }
      else if (a1)
      {
        v26 = 0;
        do
        {
          v27 = *(_OWORD *)(a5 + 16);
          v38[0] = *(_OWORD *)a5;
          v38[1] = v27;
          v39 = *(_QWORD *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v38, v26++);
        }
        while (a1 != v26);
      }
      break;
    case 2:
      if (a4)
      {
        if (a1)
        {
          v22 = 0;
          do
          {
            v23 = *(_OWORD *)(a5 + 16);
            v32[0] = *(_OWORD *)a5;
            v32[1] = v23;
            v33 = *(_QWORD *)(a5 + 32);
            dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v32, v22++);
          }
          while (a1 != v22);
        }
      }
      else if (a1)
      {
        v28 = 0;
        do
        {
          v29 = *(_OWORD *)(a5 + 16);
          v34[0] = *(_OWORD *)a5;
          v34[1] = v29;
          v35 = *(_QWORD *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v34, v28++);
        }
        while (a1 != v28);
      }
      break;
    case 3:
      if (a1)
      {
        v24 = 0;
        do
        {
          v25 = *(_OWORD *)(a5 + 16);
          v30[0] = *(_OWORD *)a5;
          v30[1] = v25;
          v31 = *(_QWORD *)(a5 + 32);
          dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>((uint64_t)&v44, (uint64_t)v30, v24++);
        }
        while (a1 != v24);
      }
      break;
    default:
      break;
  }
  dmlc::OMPException::Rethrow(&v44);
  std::mutex::~mutex(&v45);
  std::exception_ptr::~exception_ptr(&v44);
}

void sub_220E648EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

float *dmlc::OMPException::Run<void xgboost::common::Transform<false>::Evaluator<void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}>::LaunchCPU<xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int>>(void xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1},xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<float>,xgboost::HostDeviceVector<int> *)::{lambda(unsigned long)#1},unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v17[2];
  unint64_t v18[2];
  unint64_t v19[2];

  v3 = *(float **)a2;
  v4 = ***(unint64_t ****)(a2 + 8);
  v6 = *v4;
  v5 = v4[1];
  v19[0] = (uint64_t)(v5 - v6) >> 2;
  v19[1] = v6;
  if (v6)
    v7 = 1;
  else
    v7 = v5 == 0;
  if (!v7)
    goto LABEL_17;
  v8 = ***(unint64_t ****)(a2 + 24);
  v10 = *v8;
  v9 = v8[1];
  v18[0] = (uint64_t)(v9 - v10) >> 2;
  v18[1] = v10;
  v11 = v10 || v9 == 0;
  if (!v11
    || ((v12 = ***(unint64_t ****)(a2 + 32),
         v14 = *v12,
         v13 = v12[1],
         v17[0] = (uint64_t)(v13 - v14) >> 2,
         (v17[1] = v14) == 0)
      ? (v15 = v13 == 0)
      : (v15 = 1),
        !v15))
  {
LABEL_17:
    std::terminate();
  }
  return xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}::operator()(v3, a3, v19, v18, v17);
}

float *xgboost::tree::TreeEvaluator::AddSplit<false>(int,int,int,unsigned int,float,float)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<float,18446744073709551615ul>,xgboost::common::Span<int,18446744073709551615ul>)#1}::operator()(float *result, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  float *v14;
  int v15;
  float *v16;
  unint64_t v17;
  float v18;
  int v19;

  v5 = *((int *)result + 1);
  v6 = *a3;
  if (*a3 <= v5)
    goto LABEL_13;
  v7 = *(int *)result;
  if (v6 <= v7)
    goto LABEL_13;
  v8 = a3[1];
  v9 = (float *)(v8 + 4 * v7);
  *v9 = *(float *)(v8 + 4 * v5);
  v10 = *a4;
  if (*a4 <= v5)
    goto LABEL_13;
  if (v10 <= v7)
    goto LABEL_13;
  v11 = a4[1];
  v12 = (float *)(v11 + 4 * v7);
  *v12 = *(float *)(v11 + 4 * v5);
  v13 = *((int *)result + 2);
  if (v6 <= v13
    || (v14 = (float *)(v8 + 4 * v13), *v14 = *(float *)(v8 + 4 * v5), v10 <= v13)
    || (v15 = *(_DWORD *)(v11 + 4 * v5),
        v16 = (float *)(v11 + 4 * v13),
        *(_DWORD *)v16 = v15,
        v17 = *((unsigned int *)result + 3),
        *a5 <= v17))
  {
LABEL_13:
    std::terminate();
  }
  v18 = (float)(result[4] + result[5]) * 0.5;
  v19 = *(_DWORD *)(a5[1] + 4 * v17);
  if ((v19 & 0x80000000) == 0)
  {
    if (!v19)
      return result;
    v9 = v12;
    v16 = v14;
  }
  *v9 = v18;
  *v16 = v18;
  return result;
}

void xgboost::tree::ColMaker::Builder::~Builder(xgboost::tree::ColMaker::Builder *this)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = off_24E6B7FF0;
  v2 = (void **)((char *)this + 2744);
  if (*((char *)this + 2839) < 0)
    operator delete(*((void **)this + 352));
  v6 = (void **)((char *)this + 2792);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 2768);
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 341);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 340);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 339);
  v3 = (void *)*((_QWORD *)this + 336);
  if (v3)
  {
    *((_QWORD *)this + 337) = v3;
    operator delete(v3);
  }
  v6 = (void **)((char *)this + 2664);
  std::vector<xgboost::tree::ColMaker::NodeEntry>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 2640);
  std::vector<std::vector<xgboost::tree::ColMaker::ThreadEntry>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = (void *)*((_QWORD *)this + 327);
  if (v4)
  {
    *((_QWORD *)this + 328) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

uint64_t xgboost::linear::__dmlc_registry_file_tag_updater_shotgun__(xgboost::linear *this)
{
  return 0;
}

double std::__function::__func<xgboost::linear::$_0,std::allocator<xgboost::linear::$_0>,xgboost::LinearUpdater * ()(void)>::operator()()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)v0 = &off_24E6B8178;
  *(_QWORD *)(v0 + 48) = 0;
  return result;
}

void xgboost::linear::ShotgunUpdater::~ShotgunUpdater(xgboost::linear::ShotgunUpdater *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24E6B8178;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24E6B8178;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227667068);
}

void xgboost::linear::ShotgunUpdater::LoadConfig(xgboost::linear::ShotgunUpdater *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::linear::LinearTrainParam>(v4, (xgboost::linear::ShotgunUpdater *)((char *)this + 16), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E64E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::linear::ShotgunUpdater::SaveConfig(xgboost::linear::ShotgunUpdater *this, xgboost::Json *a2)
{
  unsigned int **v3;
  void *__p[2];
  char v5;
  _QWORD v6[2];
  _QWORD *v7[3];

  xgboost::ToJson<xgboost::linear::LinearTrainParam>((xgboost::linear::ShotgunUpdater *)((char *)this + 16), (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_train_param");
  v3 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  v6[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v7, v7[1]);
}

void sub_220E64F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t xgboost::linear::ShotgunUpdater::Configure(uint64_t a1, uint64_t *a2)
{
  xgboost::linear::FeatureSelector *v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[3];
  void **v10;

  xgboost::XGBoostParameter<xgboost::linear::LinearTrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::linear::LinearTrainParam *)(a1 + 16), a2, v9);
  v10 = (void **)v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = (xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 32);
  if (v3 >= 2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/updater_shotgun.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Unsupported feature selector for shotgun updater.\n", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Supported options are: {cyclic, shuffle}", 40);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v10);
    v3 = (xgboost::linear::FeatureSelector *)*(unsigned int *)(a1 + 32);
  }
  v7 = xgboost::linear::FeatureSelector::Create(v3, 1);
  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_220E6500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void xgboost::linear::ShotgunUpdater::Update(uint64_t a1, uint64_t *a2, uint64_t (***a3)(_QWORD), uint64_t a4, double a5)
{
  uint64_t *v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  uint64_t v33;
  double v34;
  float *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float v55;
  float v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::exception_ptr v73;
  std::exception_ptr v74;
  std::mutex v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)*a2;
  v11 = (__n128)vcvtq_f64_f32(*(float32x2_t *)(a1 + 24));
  v10 = (__n128)vmulq_n_f64((float64x2_t)v11, a5);
  v11.n128_u64[0] = (unint64_t)vcvt_f32_f64((float64x2_t)v10);
  *(_QWORD *)(a1 + 36) = v11.n128_u64[0];
  v12 = *(unsigned int *)(*(_QWORD *)(a4 + 152) + 8);
  if ((int)v12 < 1)
  {
    v10.n128_u32[0] = v11.n128_u32[1];
    v17 = (uint64_t)v9;
  }
  else
  {
    for (i = 0; i != v12; ++i)
    {
      v10.n128_f64[0] = xgboost::linear::GetBiasGradientParallel(i, v12, *a2, a3, 1);
      v10.n128_f64[0] = -v10.n128_f64[0] / v11.n128_f64[0] * *(float *)(a1 + 20);
      v10.n128_f32[0] = v10.n128_f64[0];
      v14 = *(_QWORD *)(a4 + 160)
          + 4 * (*(_DWORD *)(*(_QWORD *)(a4 + 152) + 8) * *(_DWORD *)(*(_QWORD *)(a4 + 152) + 4));
      *(float *)(v14 + 4 * i) = *(float *)(v14 + 4 * i) + v10.n128_f32[0];
      v15 = *a2;
      LODWORD(v69) = i;
      LODWORD(v67) = v12;
      LODWORD(v73.__ptr_) = v10.n128_u32[0];
      v71 = v15;
      if (v10.n128_f32[0] != 0.0)
      {
        v16 = *(_DWORD *)(**a3)(a3);
        v74.__ptr_ = &v71;
        v75.__m_.__sig = (uint64_t)&v67;
        *(_QWORD *)v75.__m_.__opaque = &v69;
        *(_QWORD *)&v75.__m_.__opaque[8] = &v73;
        xgboost::common::ParallelFor<unsigned int,xgboost::linear::UpdateBiasResidualParallel(int,int,float,std::vector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,int)::{lambda#1}>(v16, 1, 2, 0, (uint64_t ***)&v74);
      }
    }
    v17 = *a2;
    v11.n128_u32[0] = *(_DWORD *)(a1 + 36);
    v10.n128_u32[0] = *(_DWORD *)(a1 + 40);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t (***)(_QWORD), _QWORD, __n128, __n128))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a4, v17, a3, 0, v10, v11);
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(_QWORD)))(*a3)[10])(&v71, a3);
  v69 = v71;
  v70 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(&v67, 0);
  while ((xgboost::BatchIterator<xgboost::CSCPage>::operator!=(&v69) & 1) != 0)
  {
    v20 = (uint64_t **)xgboost::BatchIterator<xgboost::CSCPage>::operator*(&v69);
    v21 = **v20;
    v22 = (*v20)[1] - v21;
    if (v22)
    {
      v23 = *v20[1];
      v24 = v22 >> 3;
      v74.__ptr_ = 0;
      v75.__m_.__sig = 850045863;
      memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
      v25 = v24 - 1;
      if ((_DWORD)v24 != 1)
      {
        v26 = 0;
        do
        {
          v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (***)(_QWORD), float, float))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v26, a4, 0, *a2, a3, *(float *)(a1 + 40), *(float *)(a1 + 36));
          if ((v27 & 0x80000000) == 0)
          {
            v29 = *(_QWORD *)(v21 + 8 * v27);
            v28 = *(_QWORD *)(v21 + 8 * v27 + 8);
            if (!v23 && v28 != v29)
              std::terminate();
            if ((int)v12 >= 1)
            {
              v30 = 0;
              v31 = *(_QWORD *)(a4 + 160) + 4 * *(unsigned int *)(*(_QWORD *)(a4 + 152) + 8) * (unint64_t)v27;
              v66 = v23 + 4;
              do
              {
                if (v28 == v29)
                {
                  v32 = *(float *)(a1 + 20) * 0.0;
                  if (v32 != 0.0)
                    *(float *)(v31 + 4 * v30) = v32 + *(float *)(v31 + 4 * v30);
                }
                else
                {
                  v33 = *v9;
                  v34 = 0.0;
                  v35 = (float *)(v66 + 8 * v29);
                  v36 = v28 - v29;
                  v37 = 0.0;
                  do
                  {
                    v38 = (v30 + *((_DWORD *)v35 - 1) * v12);
                    v39 = *(float *)(v33 + 8 * v38 + 4);
                    if (v39 >= 0.0)
                    {
                      v34 = v34 + (float)(*v35 * *(float *)(v33 + 8 * v38));
                      v37 = v37 + (float)(*v35 * (float)(v39 * *v35));
                    }
                    v35 += 2;
                    --v36;
                  }
                  while (v36);
                  v40 = *(float *)(v31 + 4 * v30);
                  v41 = 0.0;
                  if (v37 >= 0.00000999999975)
                  {
                    v42 = *(float *)(a1 + 40);
                    v43 = *(float *)(a1 + 36);
                    v44 = v34 + v43 * v40;
                    v45 = v37 + v43;
                    v46 = -v40;
                    if (v40 - v44 / v45 >= 0.0)
                    {
                      v48 = -(v44 + v42) / v45;
                      if (v48 >= v46)
                        v41 = v48;
                      else
                        v41 = -v40;
                    }
                    else
                    {
                      v47 = -(v44 - v42) / v45;
                      if (v47 <= v46)
                        v41 = v47;
                      else
                        v41 = -v40;
                    }
                  }
                  v49 = v41 * *(float *)(a1 + 20);
                  if (v49 != 0.0)
                  {
                    *(float *)(v31 + 4 * v30) = v40 + v49;
                    v50 = (float *)(v66 + 8 * v29);
                    v51 = v28 - v29;
                    do
                    {
                      v52 = (v30 + *((_DWORD *)v50 - 1) * v12);
                      v53 = v33 + 8 * v52;
                      v55 = *(float *)(v53 + 4);
                      v54 = (float *)(v53 + 4);
                      v56 = v55;
                      if (v55 >= 0.0)
                      {
                        *(float *)(v33 + 8 * v52) = *(float *)(v33 + 8 * v52) + (float)((float)(v56 * *v50) * v49);
                        *v54 = v56 + 0.0;
                      }
                      v50 += 2;
                      --v51;
                    }
                    while (v51);
                  }
                }
                ++v30;
              }
              while (v30 != v12);
            }
          }
          v26 = (v26 + 1);
        }
        while ((_DWORD)v26 != v25);
      }
    }
    else
    {
      v74.__ptr_ = 0;
      v75.__m_.__sig = 850045863;
      memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
    }
    dmlc::OMPException::Rethrow(&v74);
    std::mutex::~mutex(&v75);
    std::exception_ptr::~exception_ptr(&v74);
    xgboost::BatchIterator<xgboost::CSCPage>::operator++(&v69);
  }
  v57 = v68;
  if (v68)
  {
    v58 = (unint64_t *)&v68->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v70;
  if (v70)
  {
    v61 = (unint64_t *)&v70->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v72;
  if (v72)
  {
    v64 = (unint64_t *)&v72->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_220E655B4()
{
  __cxa_end_catch();
  JUMPOUT(0x220E655E8);
}

void sub_220E655C0()
{
  __cxa_end_catch();
  JUMPOUT(0x220E655E8);
}

void sub_220E655CC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E65624);
}

void sub_220E655DC()
{
  JUMPOUT(0x220E65614);
}

void sub_220E655E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::mutex::~mutex(a10);
  std::exception_ptr::~exception_ptr(&a20);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_220E655FC()
{
  JUMPOUT(0x220E6560CLL);
}

uint64_t dmlc::Registry<xgboost::LinearUpdaterReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t xgboost::LinearUpdater::Create(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  char v14;

  dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  dmlc::Registry<xgboost::LinearUpdaterReg>::Get();
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_253F378E0, (const void **)a1);
  if (v4 == &qword_253F378E8 || (v5 = v4[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/linear/linear_updater.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown linear updater ", 23);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = (const void *)a1;
    else
      v12 = *(const void **)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v6 = *(_QWORD *)(v5 + 96);
  if (!v6)
    goto LABEL_12;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_220E65814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::linear::LinearTrainParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  std::string __str;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&__str, "learning_rate");
  v3 = operator new();
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v3 + 24), &__str);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "float");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v3);
  v5 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 80))(v3, 0.0);
  *(_DWORD *)(v5 + 104) = 1056964608;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "Learning rate of each update.");
  std::string::operator=((std::string *)(v5 + 72), &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "reg_lambda");
  v6 = operator new();
  *(_QWORD *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_QWORD *)v6 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v6 + 24), &__str);
  if (*(char *)(v6 + 71) < 0)
  {
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(v6 + 71))
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "float");
  v7 = (void **)(v6 + 48);
  if (*(char *)(v6 + 71) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 64) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
LABEL_19:
  *(_QWORD *)(v6 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v6);
  v8 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v6 + 80))(v6, 0.0);
  *(_DWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "L2 regularization on weights.");
  std::string::operator=((std::string *)(v8 + 72), &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "reg_alpha");
  v9 = operator new();
  *(_QWORD *)(v9 + 112) = 0;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_QWORD *)v9 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v9 + 24), &__str);
  if (*(char *)(v9 + 71) < 0)
  {
    if (*(_QWORD *)(v9 + 56))
      goto LABEL_30;
  }
  else if (*(_BYTE *)(v9 + 71))
  {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "float");
  v10 = (void **)(v9 + 48);
  if (*(char *)(v9 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 64) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
LABEL_30:
  *(_QWORD *)(v9 + 96) = 12;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v9);
  v11 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v9 + 80))(v9, 0.0);
  *(_DWORD *)(v11 + 104) = 0;
  *(_BYTE *)(v11 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "L1 regularization on weights.");
  std::string::operator=((std::string *)(v11 + 72), &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "feature_selector");
  v12 = operator new();
  *(_BYTE *)(v12 + 8) = 0;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_WORD *)(v12 + 108) = 0;
  *(_QWORD *)v12 = &unk_24E6B5E08;
  *(_BYTE *)(v12 + 120) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 128) = v12 + 136;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = v12 + 160;
  *(_QWORD *)(v12 + 168) = 0;
  std::string::operator=((std::string *)(v12 + 24), &__str);
  if (*(char *)(v12 + 71) < 0)
  {
    if (*(_QWORD *)(v12 + 56))
      goto LABEL_41;
  }
  else if (*(_BYTE *)(v12 + 71))
  {
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "int");
  v13 = (void **)(v12 + 48);
  if (*(char *)(v12 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(_QWORD *)(v12 + 64) = *((_QWORD *)&v29.__r_.__value_.__l + 2);
LABEL_41:
  *(_QWORD *)(v12 + 96) = 16;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v12);
  *(_DWORD *)(v12 + 104) = 0;
  *(_BYTE *)(v12 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "cyclic");
  v14 = dmlc::parameter::FieldEntry<int>::add_enum(v12, (const void **)&v29.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v26, "shuffle");
  v15 = dmlc::parameter::FieldEntry<int>::add_enum(v14, (const void **)v26, 1);
  std::string::basic_string[abi:ne180100]<0>(v24, "thrifty");
  v16 = dmlc::parameter::FieldEntry<int>::add_enum(v15, (const void **)v24, 2);
  std::string::basic_string[abi:ne180100]<0>(v22, "greedy");
  v17 = dmlc::parameter::FieldEntry<int>::add_enum(v16, (const void **)v22, 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "random");
  v18 = (std::string *)dmlc::parameter::FieldEntry<int>::add_enum(v17, (const void **)__p, 4);
  std::string::basic_string[abi:ne180100]<0>(&v19, "Feature selection or ordering method.");
  std::string::operator=(v18 + 3, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v29, "learning_rate");
  std::string::basic_string[abi:ne180100]<0>(&__str, "eta");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v29.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v29, "reg_lambda");
  std::string::basic_string[abi:ne180100]<0>(&__str, "lambda");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v29.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v29, "reg_alpha");
  std::string::basic_string[abi:ne180100]<0>(&__str, "alpha");
  dmlc::parameter::ParamManager::AddAlias(a2, (const void **)&v29.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_220E65EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  if (*(char *)(v39 - 33) < 0)
    operator delete(*(void **)(v39 - 56));
  _Unwind_Resume(exception_object);
}

void xgboost::common::InitilizeHistByZeroes<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero((void *)(*(_QWORD *)(a1 + 8) + 8 * a2), 8 * (a3 - a2));
}

void xgboost::common::InitilizeHistByZeroes<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero((void *)(*(_QWORD *)(a1 + 8) + 16 * a2), 16 * (a3 - a2));
}

float xgboost::common::IncrementHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float result;

  if (2 * a4 > (unint64_t)(2 * a3))
  {
    v4 = 2 * a4 - 2 * a3;
    v5 = (float *)(*(_QWORD *)(a1 + 8) + 8 * a3);
    v6 = (float *)(*(_QWORD *)(a2 + 8) + 8 * a3);
    do
    {
      v7 = *v6++;
      result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

double xgboost::common::IncrementHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double result;

  if (2 * a4 > (unint64_t)(2 * a3))
  {
    v4 = 2 * a4 - 2 * a3;
    v5 = (double *)(*(_QWORD *)(a1 + 8) + 16 * a3);
    v6 = (double *)(*(_QWORD *)(a2 + 8) + 16 * a3);
    do
    {
      v7 = *v6++;
      result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

float xgboost::common::CopyHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float result;

  if (2 * a4 > (unint64_t)(2 * a3))
  {
    v4 = 2 * a4 - 2 * a3;
    v5 = (float *)(*(_QWORD *)(a1 + 8) + 8 * a3);
    v6 = (float *)(*(_QWORD *)(a2 + 8) + 8 * a3);
    do
    {
      v7 = *v6++;
      result = v7;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

double xgboost::common::CopyHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double result;

  if (2 * a4 > (unint64_t)(2 * a3))
  {
    v4 = 2 * a4 - 2 * a3;
    v5 = (double *)(*(_QWORD *)(a1 + 8) + 16 * a3);
    v6 = (double *)(*(_QWORD *)(a2 + 8) + 16 * a3);
    do
    {
      v7 = *v6++;
      result = v7;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

float xgboost::common::SubtractionHist<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float result;

  if (2 * a5 > (unint64_t)(2 * a4))
  {
    v5 = 2 * a5 - 2 * a4;
    v6 = (float *)(*(_QWORD *)(a1 + 8) + 8 * a4);
    v7 = (float *)(*(_QWORD *)(a3 + 8) + 8 * a4);
    v8 = (float *)(*(_QWORD *)(a2 + 8) + 8 * a4);
    do
    {
      v9 = *v8++;
      v10 = v9;
      v11 = *v7++;
      result = v10 - v11;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double xgboost::common::SubtractionHist<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double result;

  if (2 * a5 > (unint64_t)(2 * a4))
  {
    v5 = 2 * a5 - 2 * a4;
    v6 = (double *)(*(_QWORD *)(a1 + 8) + 16 * a4);
    v7 = (double *)(*(_QWORD *)(a3 + 8) + 16 * a4);
    v8 = (double *)(*(_QWORD *)(a2 + 8) + 16 * a4);
    do
    {
      v9 = *v8++;
      v10 = v9;
      v11 = *v7++;
      result = v10 - v11;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void xgboost::common::GHistBuilder<float>::BuildHist<true>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  uint64_t v20[2];
  int v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v8 = a3[1];
  v9 = (v8 - *a3) >> 3;
  if (*(_QWORD *)(*a3 + 8 * (v9 - 1)) - *(_QWORD *)*a3 == v9 - 1)
  {
    v23 = *(_OWORD *)a3;
    v24 = a3[2];
    v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    v11 = (uint64_t *)&v23;
    v12 = v22;
  }
  else
  {
    if (v9 >= 0x12)
      v9 = 18;
    v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    v21 = -1;
    v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<float,true,true>(a2, v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    v18 = -1;
    v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    v11 = v17;
    v12 = v16;
  }
  xgboost::common::BuildHistDispatch<float,false,true>(a2, v11, a4, (uint64_t)v12);
}

{
  __ZNK7xgboost6common12GHistBuilderIfE9BuildHistILb1EEEvRKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEENS0_16RowSetCollection4ElemERKNS_16GHistIndexMatrixENS0_4SpanIS8_Lm18446744073709551615EEE(a1, a2, a3, a4, a5);
}

void xgboost::common::BuildHistDispatch<float,false,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unsigned int v65;
  std::string *Entry;
  _QWORD *v67;
  _QWORD *v68;
  dmlc::LogMessageFatal *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned int v99;
  std::string *v100;
  _QWORD *v101;
  _QWORD *v102;
  char v103;
  char v104;

  v4 = a3[19];
  v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v36 = *a2;
        v37 = a2[1];
        v38 = v37 - *a2;
        if (v37 != *a2)
        {
          v39 = 0;
          v40 = *(_QWORD *)(a4 + 8);
          v41 = *a1;
          v42 = a3[3];
          v43 = *a3;
          v44 = v38 >> 3;
          if (v44 <= 1)
            v44 = 1;
          do
          {
            v45 = *(_QWORD *)(v36 + 8 * v39);
            v46 = (uint64_t *)(v43 + 8 * (v45 - v4));
            v47 = *v46;
            v48 = v46[1] - *v46;
            if (v48)
            {
              v49 = (int *)(v42 + 4 * v47);
              do
              {
                v50 = *v49++;
                *(float *)(v40 + 4 * (2 * v50)) = *(float *)(v41 + 8 * v45)
                                                                + *(float *)(v40 + 4 * (2 * v50));
                *(float *)(v40 + 4 * ((2 * v50) | 1u)) = *(float *)(v41 + 4 * ((2 * v45) | 1))
                                                         + *(float *)(v40 + 4 * ((2 * v50) | 1u));
                --v48;
              }
              while (v48);
            }
            ++v39;
          }
          while (v39 != v44);
        }
        break;
      case 2:
        v51 = *a2;
        v52 = a2[1];
        v53 = v52 - *a2;
        if (v52 != *a2)
        {
          v54 = 0;
          v55 = *(_QWORD *)(a4 + 8);
          v56 = *a1;
          v57 = a3[3];
          v58 = *a3;
          v59 = v53 >> 3;
          if (v59 <= 1)
            v59 = 1;
          do
          {
            v60 = *(_QWORD *)(v51 + 8 * v54);
            v61 = (uint64_t *)(v58 + 8 * (v60 - v4));
            v62 = *v61;
            v63 = v61[1] - *v61;
            if (v63)
            {
              v64 = (unsigned __int16 *)(v57 + 2 * v62);
              do
              {
                v65 = *v64++;
                *(float *)(v55 + 8 * v65) = *(float *)(v56 + 8 * v60) + *(float *)(v55 + 8 * v65);
                *(float *)(v55 + 4 * ((2 * v65) | 1)) = *(float *)(v56 + 4 * ((2 * v60) | 1))
                                                        + *(float *)(v55 + 4 * ((2 * v65) | 1));
                --v63;
              }
              while (v63);
            }
            ++v54;
          }
          while (v54 != v59);
        }
        break;
      case 1:
        v6 = *a2;
        v7 = a2[1];
        v8 = v7 - *a2;
        if (v7 != *a2)
        {
          v9 = 0;
          v10 = *(_QWORD *)(a4 + 8);
          v11 = *a1;
          v12 = a3[3];
          v13 = *a3;
          v14 = v8 >> 3;
          if (v14 <= 1)
            v14 = 1;
          do
          {
            v15 = *(_QWORD *)(v6 + 8 * v9);
            v16 = (uint64_t *)(v13 + 8 * (v15 - v4));
            v17 = *v16;
            v18 = v16[1] - *v16;
            if (v18)
            {
              v19 = (unsigned __int8 *)(v12 + v17);
              do
              {
                v20 = *v19++;
                *(float *)(v10 + 8 * v20) = *(float *)(v11 + 8 * v15) + *(float *)(v10 + 8 * v20);
                *(float *)(v10 + 4 * ((2 * v20) | 1)) = *(float *)(v11 + 4 * ((2 * v15) | 1))
                                                        + *(float *)(v10 + 4 * ((2 * v20) | 1));
                --v18;
              }
              while (v18);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v67 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
        v69 = (dmlc::LogMessageFatal *)&v103;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v69);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v70 = *a2;
        v71 = a2[1];
        v72 = v71 - *a2;
        if (v71 != *a2)
        {
          v73 = 0;
          v74 = *(_QWORD *)(a4 + 8);
          v75 = *a1;
          v76 = *a3;
          v77 = a3[3];
          v78 = v72 >> 3;
          if (v78 <= 1)
            v78 = 1;
          do
          {
            v79 = *(_QWORD *)(v70 + 8 * v73);
            v80 = (uint64_t *)(v76 + 8 * v79);
            v81 = *v80;
            v82 = v80[1] - *v80;
            if (v82)
            {
              v83 = (int *)(v77 + 4 * v81);
              do
              {
                v84 = *v83++;
                *(float *)(v74 + 4 * (2 * v84)) = *(float *)(v75 + 8 * v79)
                                                                + *(float *)(v74 + 4 * (2 * v84));
                *(float *)(v74 + 4 * ((2 * v84) | 1u)) = *(float *)(v75 + 4 * ((2 * v79) | 1))
                                                         + *(float *)(v74 + 4 * ((2 * v84) | 1u));
                --v82;
              }
              while (v82);
            }
            ++v73;
          }
          while (v73 != v78);
        }
        break;
      case 2:
        v85 = *a2;
        v86 = a2[1];
        v87 = v86 - *a2;
        if (v86 != *a2)
        {
          v88 = 0;
          v89 = *(_QWORD *)(a4 + 8);
          v90 = *a1;
          v91 = *a3;
          v92 = a3[3];
          v93 = v87 >> 3;
          if (v93 <= 1)
            v93 = 1;
          do
          {
            v94 = *(_QWORD *)(v85 + 8 * v88);
            v95 = (uint64_t *)(v91 + 8 * v94);
            v96 = *v95;
            v97 = v95[1] - *v95;
            if (v97)
            {
              v98 = (unsigned __int16 *)(v92 + 2 * v96);
              do
              {
                v99 = *v98++;
                *(float *)(v89 + 8 * v99) = *(float *)(v90 + 8 * v94) + *(float *)(v89 + 8 * v99);
                *(float *)(v89 + 4 * ((2 * v99) | 1)) = *(float *)(v90 + 4 * ((2 * v94) | 1))
                                                        + *(float *)(v89 + 4 * ((2 * v99) | 1));
                --v97;
              }
              while (v97);
            }
            ++v88;
          }
          while (v88 != v93);
        }
        break;
      case 1:
        v21 = *a2;
        v22 = a2[1];
        v23 = v22 - *a2;
        if (v22 != *a2)
        {
          v24 = 0;
          v25 = *(_QWORD *)(a4 + 8);
          v26 = *a1;
          v27 = *a3;
          v28 = a3[3];
          v29 = v23 >> 3;
          if (v29 <= 1)
            v29 = 1;
          do
          {
            v30 = *(_QWORD *)(v21 + 8 * v24);
            v31 = (uint64_t *)(v27 + 8 * v30);
            v32 = *v31;
            v33 = v31[1] - *v31;
            if (v33)
            {
              v34 = (unsigned __int8 *)(v28 + v32);
              do
              {
                v35 = *v34++;
                *(float *)(v25 + 8 * v35) = *(float *)(v26 + 8 * v30) + *(float *)(v25 + 8 * v35);
                *(float *)(v25 + 4 * ((2 * v35) | 1)) = *(float *)(v26 + 4 * ((2 * v30) | 1))
                                                        + *(float *)(v25 + 4 * ((2 * v35) | 1));
                --v33;
              }
              while (v33);
            }
            ++v24;
          }
          while (v24 != v29);
        }
        break;
      default:
        v100 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v104);
        dmlc::LogMessageFatal::Entry::Init(v100, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v101 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v104);
        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)": ", 2);
        v69 = (dmlc::LogMessageFatal *)&v104;
        goto LABEL_58;
    }
  }
}

void sub_220E66710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::BuildHistDispatch<float,true,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  unsigned int v113;
  std::string *Entry;
  _QWORD *v115;
  _QWORD *v116;
  dmlc::LogMessageFatal *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v166;
  uint64_t v167;
  unsigned __int16 *v168;
  unsigned int v169;
  std::string *v170;
  _QWORD *v171;
  _QWORD *v172;
  char v173;
  char v174;

  v4 = a3[19];
  v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v62 = *a2;
        v63 = a2[1];
        v64 = v63 - *a2;
        if (v63 != *a2)
        {
          v65 = 0;
          v66 = *(_QWORD *)(a4 + 8);
          v67 = *a1;
          v68 = a3[3];
          v69 = *a3;
          v70 = v64 >> 3;
          if (v70 <= 1)
            v70 = 1;
          do
          {
            v71 = (uint64_t *)(v62 + 8 * v65);
            v72 = *v71;
            v73 = (uint64_t *)(v69 + 8 * (*v71 - v4));
            v75 = *v73;
            v74 = v73[1];
            v76 = v71[10];
            v77 = (unint64_t *)(v69 + 8 * (v76 - v4));
            v78 = *v77;
            v79 = v77[1];
            _X3 = v67 + 8 * v76;
            __asm { PRFM            #0, [X3] }
            if (v78 < v79)
            {
              _X3 = v68 + 4 * v78;
              do
              {
                __asm { PRFM            #0, [X3] }
                v78 += 16;
                _X3 += 64;
              }
              while (v78 < v79);
            }
            if (v74 != v75)
            {
              v84 = v74 - v75;
              v85 = 2 * v72;
              v86 = (int *)(v68 + 4 * v75);
              do
              {
                v87 = *v86++;
                *(float *)(v66 + 4 * (2 * v87)) = *(float *)(v67 + 4 * v85)
                                                                + *(float *)(v66 + 4 * (2 * v87));
                *(float *)(v66 + 4 * ((2 * v87) | 1u)) = *(float *)(v67 + 4 * (v85 | 1))
                                                         + *(float *)(v66 + 4 * ((2 * v87) | 1u));
                --v84;
              }
              while (v84);
            }
            ++v65;
          }
          while (v65 != v70);
        }
        break;
      case 2:
        v88 = *a2;
        v89 = a2[1];
        v90 = v89 - *a2;
        if (v89 != *a2)
        {
          v91 = 0;
          v92 = *(_QWORD *)(a4 + 8);
          v93 = *a1;
          v94 = a3[3];
          v95 = *a3;
          v96 = v90 >> 3;
          if (v96 <= 1)
            v96 = 1;
          do
          {
            v97 = (uint64_t *)(v88 + 8 * v91);
            v98 = *v97;
            v99 = (uint64_t *)(v95 + 8 * (*v97 - v4));
            v100 = *v99;
            v101 = v99[1];
            v102 = v97[10];
            v103 = (unint64_t *)(v95 + 8 * (v102 - v4));
            v104 = *v103;
            v105 = v103[1];
            _X4 = v93 + 8 * v102;
            __asm { PRFM            #0, [X4] }
            if (v104 < v105)
            {
              _X4 = v94 + 2 * v104;
              do
              {
                __asm { PRFM            #0, [X4] }
                v104 += 16;
                _X4 += 32;
              }
              while (v104 < v105);
            }
            if (v101 != v100)
            {
              v110 = v101 - v100;
              v111 = 2 * v98;
              v112 = (unsigned __int16 *)(v94 + 2 * v100);
              do
              {
                v113 = *v112++;
                *(float *)(v92 + 8 * v113) = *(float *)(v93 + 4 * v111) + *(float *)(v92 + 8 * v113);
                *(float *)(v92 + 4 * ((2 * v113) | 1)) = *(float *)(v93 + 4 * (v111 | 1))
                                                         + *(float *)(v92 + 4 * ((2 * v113) | 1));
                --v110;
              }
              while (v110);
            }
            ++v91;
          }
          while (v91 != v96);
        }
        break;
      case 1:
        v6 = *a2;
        v7 = a2[1];
        v8 = v7 - *a2;
        if (v7 != *a2)
        {
          v9 = 0;
          v10 = *(_QWORD *)(a4 + 8);
          v11 = *a1;
          v12 = a3[3];
          v13 = *a3;
          v14 = v8 >> 3;
          if (v14 <= 1)
            v14 = 1;
          do
          {
            v15 = (uint64_t *)(v6 + 8 * v9);
            v16 = *v15;
            v17 = (uint64_t *)(v13 + 8 * (*v15 - v4));
            v19 = *v17;
            v18 = v17[1];
            v20 = v15[10];
            v21 = (unint64_t *)(v13 + 8 * (v20 - v4));
            v22 = *v21;
            v23 = v21[1];
            _X4 = v11 + 8 * v20;
            __asm { PRFM            #0, [X4] }
            while (v22 < v23)
            {
              _X4 = v12 + v22;
              __asm { PRFM            #0, [X4] }
              v22 += 16;
            }
            if (v18 != v19)
            {
              v32 = v18 - v19;
              v33 = 2 * v16;
              v34 = (unsigned __int8 *)(v12 + v19);
              do
              {
                v35 = *v34++;
                *(float *)(v10 + 8 * v35) = *(float *)(v11 + 4 * v33) + *(float *)(v10 + 8 * v35);
                *(float *)(v10 + 4 * ((2 * v35) | 1)) = *(float *)(v11 + 4 * (v33 | 1))
                                                        + *(float *)(v10 + 4 * ((2 * v35) | 1));
                --v32;
              }
              while (v32);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v173);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v115 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v173);
        v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)": ", 2);
        v117 = (dmlc::LogMessageFatal *)&v173;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v117);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v118 = *a2;
        v119 = a2[1];
        v120 = v119 - *a2;
        if (v119 != *a2)
        {
          v121 = 0;
          v122 = *(_QWORD *)(a4 + 8);
          v123 = *a1;
          v124 = *a3;
          v125 = a3[3];
          v126 = v120 >> 3;
          if (v126 <= 1)
            v126 = 1;
          do
          {
            v127 = (uint64_t *)(v118 + 8 * v121);
            v128 = *v127;
            v129 = (uint64_t *)(v124 + 8 * *v127);
            v130 = *v129;
            v131 = v129[1];
            v132 = v127[10];
            v133 = (unint64_t *)(v124 + 8 * v132);
            v134 = *v133;
            v135 = v133[1];
            _X2 = v123 + 8 * v132;
            __asm { PRFM            #0, [X2] }
            if (v134 < v135)
            {
              _X2 = v125 + 4 * v134;
              do
              {
                __asm { PRFM            #0, [X2] }
                v134 += 16;
                _X2 += 64;
              }
              while (v134 < v135);
            }
            if (v131 != v130)
            {
              v140 = v131 - v130;
              v141 = 2 * v128;
              v142 = (int *)(v125 + 4 * v130);
              do
              {
                v143 = *v142++;
                *(float *)(v122 + 4 * (2 * v143)) = *(float *)(v123 + 4 * v141)
                                                                  + *(float *)(v122 + 4 * (2 * v143));
                *(float *)(v122 + 4 * ((2 * v143) | 1u)) = *(float *)(v123 + 4 * (v141 | 1))
                                                           + *(float *)(v122 + 4 * ((2 * v143) | 1u));
                --v140;
              }
              while (v140);
            }
            ++v121;
          }
          while (v121 != v126);
        }
        break;
      case 2:
        v144 = *a2;
        v145 = a2[1];
        v146 = v145 - *a2;
        if (v145 != *a2)
        {
          v147 = 0;
          v148 = *(_QWORD *)(a4 + 8);
          v149 = *a1;
          v150 = *a3;
          v151 = a3[3];
          v152 = v146 >> 3;
          if (v152 <= 1)
            v152 = 1;
          do
          {
            v153 = (uint64_t *)(v144 + 8 * v147);
            v154 = *v153;
            v155 = (uint64_t *)(v150 + 8 * *v153);
            v157 = *v155;
            v156 = v155[1];
            v158 = v153[10];
            v159 = (unint64_t *)(v150 + 8 * v158);
            v160 = *v159;
            v161 = v159[1];
            _X3 = v149 + 8 * v158;
            __asm { PRFM            #0, [X3] }
            if (v160 < v161)
            {
              _X3 = v151 + 2 * v160;
              do
              {
                __asm { PRFM            #0, [X3] }
                v160 += 16;
                _X3 += 32;
              }
              while (v160 < v161);
            }
            if (v156 != v157)
            {
              v166 = v156 - v157;
              v167 = 2 * v154;
              v168 = (unsigned __int16 *)(v151 + 2 * v157);
              do
              {
                v169 = *v168++;
                *(float *)(v148 + 8 * v169) = *(float *)(v149 + 4 * v167) + *(float *)(v148 + 8 * v169);
                *(float *)(v148 + 4 * ((2 * v169) | 1)) = *(float *)(v149 + 4 * (v167 | 1))
                                                          + *(float *)(v148 + 4 * ((2 * v169) | 1));
                --v166;
              }
              while (v166);
            }
            ++v147;
          }
          while (v147 != v152);
        }
        break;
      case 1:
        v36 = *a2;
        v37 = a2[1];
        v38 = v37 - *a2;
        if (v37 != *a2)
        {
          v39 = 0;
          v40 = *(_QWORD *)(a4 + 8);
          v41 = *a1;
          v42 = *a3;
          v43 = a3[3];
          v44 = v38 >> 3;
          if (v44 <= 1)
            v44 = 1;
          do
          {
            v45 = (uint64_t *)(v36 + 8 * v39);
            v46 = *v45;
            v47 = (uint64_t *)(v42 + 8 * *v45);
            v48 = *v47;
            v49 = v47[1];
            v50 = v45[10];
            v51 = (unint64_t *)(v42 + 8 * v50);
            v52 = *v51;
            v53 = v51[1];
            _X3 = v41 + 8 * v50;
            __asm { PRFM            #0, [X3] }
            while (v52 < v53)
            {
              _X3 = v43 + v52;
              __asm { PRFM            #0, [X3] }
              v52 += 16;
            }
            if (v49 != v48)
            {
              v58 = v49 - v48;
              v59 = 2 * v46;
              v60 = (unsigned __int8 *)(v43 + v48);
              do
              {
                v61 = *v60++;
                *(float *)(v40 + 8 * v61) = *(float *)(v41 + 4 * v59) + *(float *)(v40 + 8 * v61);
                *(float *)(v40 + 4 * ((2 * v61) | 1)) = *(float *)(v41 + 4 * (v59 | 1))
                                                        + *(float *)(v40 + 4 * ((2 * v61) | 1));
                --v58;
              }
              while (v58);
            }
            ++v39;
          }
          while (v39 != v44);
        }
        break;
      default:
        v170 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
        dmlc::LogMessageFatal::Entry::Init(v170, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v171 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v174);
        v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)": ", 2);
        v117 = (dmlc::LogMessageFatal *)&v174;
        goto LABEL_76;
    }
  }
}

void sub_220E66D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::GHistBuilder<float>::BuildHist<false>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v8 = a3[1];
  v9 = (v8 - *a3) >> 3;
  if (*(_QWORD *)(*a3 + 8 * (v9 - 1)) - *(_QWORD *)*a3 == v9 - 1)
  {
    v23 = *(_OWORD *)a3;
    v24 = a3[2];
    v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    v11 = &v23;
    v12 = v22;
  }
  else
  {
    if (v9 >= 0x12)
      v9 = 18;
    v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    v21 = -1;
    v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<float,true,false>(a2, (uint64_t)v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    v18 = -1;
    v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    v11 = (__int128 *)v17;
    v12 = v16;
  }
  xgboost::common::BuildHistDispatch<float,false,false>(a2, (uint64_t)v11, a4, (uint64_t)v12);
}

{
  __ZNK7xgboost6common12GHistBuilderIfE9BuildHistILb0EEEvRKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEENS0_16RowSetCollection4ElemERKNS_16GHistIndexMatrixENS0_4SpanIS8_Lm18446744073709551615EEE(a1, a2, a3, a4, a5);
}

void xgboost::common::BuildHistDispatch<float,false,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  std::string *Entry;
  _QWORD *v88;
  _QWORD *v89;
  dmlc::LogMessageFatal *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  std::string *v133;
  _QWORD *v134;
  _QWORD *v135;
  char v136;
  char v137;

  v4 = *(_QWORD *)(a3 + 152);
  v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v47 = *(_QWORD **)a2;
        v48 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v48)
        {
          v49 = 0;
          v50 = *(_QWORD *)(a4 + 8);
          v51 = *a1;
          v52 = *(_QWORD *)(a3 + 24);
          v53 = *(int **)(a3 + 48);
          v55 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v47 - v4));
          v54 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v47 - v4) + 8);
          v56 = v48 >> 3;
          if ((unint64_t)(v48 >> 3) <= 1)
            v56 = 1;
          do
          {
            if (v54 != v55)
            {
              v57 = v47[v49];
              v58 = (int *)(v52 + 4 * (v57 - v4) * (v54 - v55));
              v59 = 2 * v57;
              v60 = (2 * v57) | 1;
              v61 = v53;
              v62 = v54 - v55;
              do
              {
                v64 = *v58++;
                v63 = v64;
                v65 = *v61++;
                v66 = v65 + v63;
                *(float *)(v50 + 4 * (2 * v66)) = *(float *)(v51 + 4 * v59)
                                                                + *(float *)(v50 + 4 * (2 * v66));
                *(float *)(v50 + 4 * ((2 * v66) | 1u)) = *(float *)(v51 + 4 * v60)
                                                         + *(float *)(v50 + 4 * ((2 * v66) | 1u));
                --v62;
              }
              while (v62);
            }
            ++v49;
          }
          while (v49 != v56);
        }
        break;
      case 2:
        v67 = *(_QWORD **)a2;
        v68 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v68)
        {
          v69 = 0;
          v70 = *(_QWORD *)(a4 + 8);
          v71 = *a1;
          v72 = *(_QWORD *)(a3 + 24);
          v73 = *(int **)(a3 + 48);
          v75 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v67 - v4));
          v74 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v67 - v4) + 8);
          v76 = v68 >> 3;
          if ((unint64_t)(v68 >> 3) <= 1)
            v76 = 1;
          do
          {
            if (v74 != v75)
            {
              v77 = v67[v69];
              v78 = (unsigned __int16 *)(v72 + 2 * (v77 - v4) * (v74 - v75));
              v79 = 2 * v77;
              v80 = (2 * v77) | 1;
              v81 = v73;
              v82 = v74 - v75;
              do
              {
                v84 = *v78++;
                v83 = v84;
                v85 = *v81++;
                v86 = v85 + v83;
                *(float *)(v70 + 4 * (2 * v86)) = *(float *)(v71 + 4 * v79)
                                                                + *(float *)(v70 + 4 * (2 * v86));
                *(float *)(v70 + 4 * ((2 * v86) | 1u)) = *(float *)(v71 + 4 * v80)
                                                         + *(float *)(v70 + 4 * ((2 * v86) | 1u));
                --v82;
              }
              while (v82);
            }
            ++v69;
          }
          while (v69 != v76);
        }
        break;
      case 1:
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v7)
        {
          v8 = 0;
          v9 = *(_QWORD *)(a4 + 8);
          v10 = *a1;
          v11 = *(_QWORD *)(a3 + 24);
          v12 = *(int **)(a3 + 48);
          v14 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4));
          v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4) + 8);
          v15 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1)
            v15 = 1;
          do
          {
            if (v13 != v14)
            {
              v16 = v6[v8];
              v17 = (unsigned __int8 *)(v11 + (v16 - v4) * (v13 - v14));
              v18 = 2 * v16;
              v19 = (2 * v16) | 1;
              v20 = v12;
              v21 = v13 - v14;
              do
              {
                v23 = *v17++;
                v22 = v23;
                v24 = *v20++;
                v25 = v24 + v22;
                *(float *)(v9 + 4 * (2 * v25)) = *(float *)(v10 + 4 * v18)
                                                               + *(float *)(v9 + 4 * (2 * v25));
                *(float *)(v9 + 4 * ((2 * v25) | 1u)) = *(float *)(v10 + 4 * v19)
                                                        + *(float *)(v9 + 4 * ((2 * v25) | 1u));
                --v21;
              }
              while (v21);
            }
            ++v8;
          }
          while (v8 != v15);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v136);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v88 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v136);
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)": ", 2);
        v90 = (dmlc::LogMessageFatal *)&v136;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v90);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v91 = *(_QWORD **)a2;
        v92 = *(_QWORD *)(a2 + 8);
        v93 = v92 - *(_QWORD *)a2;
        if (v92 != *(_QWORD *)a2)
        {
          v94 = 0;
          v95 = *(_QWORD *)(a4 + 8);
          v96 = *a1;
          v97 = *(_QWORD *)(a3 + 24);
          v98 = *(int **)(a3 + 48);
          v100 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v91);
          v99 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v91 + 8);
          v101 = v93 >> 3;
          if (v101 <= 1)
            v101 = 1;
          do
          {
            if (v99 != v100)
            {
              v102 = v91[v94];
              v103 = (int *)(v97 + 4 * v102 * (v99 - v100));
              v104 = 2 * v102;
              v105 = (2 * v102) | 1;
              v106 = v98;
              v107 = v99 - v100;
              do
              {
                v109 = *v103++;
                v108 = v109;
                v110 = *v106++;
                v111 = v110 + v108;
                *(float *)(v95 + 4 * (2 * v111)) = *(float *)(v96 + 4 * v104)
                                                                 + *(float *)(v95 + 4 * (2 * v111));
                *(float *)(v95 + 4 * ((2 * v111) | 1u)) = *(float *)(v96 + 4 * v105)
                                                          + *(float *)(v95 + 4 * ((2 * v111) | 1u));
                --v107;
              }
              while (v107);
            }
            ++v94;
          }
          while (v94 != v101);
        }
        break;
      case 2:
        v112 = *(_QWORD **)a2;
        v113 = *(_QWORD *)(a2 + 8);
        v114 = v113 - *(_QWORD *)a2;
        if (v113 != *(_QWORD *)a2)
        {
          v115 = 0;
          v116 = *(_QWORD *)(a4 + 8);
          v117 = *a1;
          v118 = *(_QWORD *)(a3 + 24);
          v119 = *(int **)(a3 + 48);
          v121 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v112);
          v120 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v112 + 8);
          v122 = v114 >> 3;
          if (v122 <= 1)
            v122 = 1;
          do
          {
            if (v120 != v121)
            {
              v123 = v112[v115];
              v124 = (unsigned __int16 *)(v118 + 2 * v123 * (v120 - v121));
              v125 = 2 * v123;
              v126 = (2 * v123) | 1;
              v127 = v119;
              v128 = v120 - v121;
              do
              {
                v130 = *v124++;
                v129 = v130;
                v131 = *v127++;
                v132 = v131 + v129;
                *(float *)(v116 + 4 * (2 * v132)) = *(float *)(v117 + 4 * v125)
                                                                  + *(float *)(v116 + 4 * (2 * v132));
                *(float *)(v116 + 4 * ((2 * v132) | 1u)) = *(float *)(v117 + 4 * v126)
                                                           + *(float *)(v116 + 4 * ((2 * v132) | 1u));
                --v128;
              }
              while (v128);
            }
            ++v115;
          }
          while (v115 != v122);
        }
        break;
      case 1:
        v26 = *(_QWORD **)a2;
        v27 = *(_QWORD *)(a2 + 8);
        v28 = v27 - *(_QWORD *)a2;
        if (v27 != *(_QWORD *)a2)
        {
          v29 = 0;
          v30 = *(_QWORD *)(a4 + 8);
          v31 = *a1;
          v32 = *(_QWORD *)(a3 + 24);
          v33 = *(int **)(a3 + 48);
          v35 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v26);
          v34 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v26 + 8);
          v36 = v28 >> 3;
          if (v36 <= 1)
            v36 = 1;
          do
          {
            if (v34 != v35)
            {
              v37 = v26[v29];
              v38 = (unsigned __int8 *)(v32 + v37 * (v34 - v35));
              v39 = 2 * v37;
              v40 = (2 * v37) | 1;
              v41 = v33;
              v42 = v34 - v35;
              do
              {
                v44 = *v38++;
                v43 = v44;
                v45 = *v41++;
                v46 = v45 + v43;
                *(float *)(v30 + 4 * (2 * v46)) = *(float *)(v31 + 4 * v39)
                                                                + *(float *)(v30 + 4 * (2 * v46));
                *(float *)(v30 + 4 * ((2 * v46) | 1u)) = *(float *)(v31 + 4 * v40)
                                                         + *(float *)(v30 + 4 * ((2 * v46) | 1u));
                --v42;
              }
              while (v42);
            }
            ++v29;
          }
          while (v29 != v36);
        }
        break;
      default:
        v133 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
        dmlc::LogMessageFatal::Entry::Init(v133, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v134 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
        v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)": ", 2);
        v90 = (dmlc::LogMessageFatal *)&v137;
        goto LABEL_58;
    }
  }
}

void sub_220E67358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::BuildHistDispatch<float,true,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  int *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 *v122;
  int *v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  std::string *Entry;
  _QWORD *v130;
  _QWORD *v131;
  dmlc::LogMessageFatal *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  int *v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v184;
  uint64_t v185;
  unsigned __int16 *v186;
  int *v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  std::string *v193;
  _QWORD *v194;
  _QWORD *v195;
  char v196;
  char v197;

  v4 = *(_QWORD *)(a3 + 152);
  v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v69 = *(_QWORD **)a2;
        v70 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v70)
        {
          v71 = 0;
          v72 = *(_QWORD *)(a4 + 8);
          v73 = *a1;
          v74 = *(_QWORD *)(a3 + 24);
          v75 = *(int **)(a3 + 48);
          v77 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v69 - v4));
          v76 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v69 - v4) + 8);
          v78 = v76 - v77;
          v79 = v70 >> 3;
          if ((unint64_t)(v70 >> 3) <= 1)
            v79 = 1;
          do
          {
            v80 = &v69[v71];
            v81 = *v80;
            v82 = v80[10];
            v83 = v82 - v4;
            v84 = (v82 - v4) * v78;
            v85 = v84 + v78;
            _X6 = v73 + 8 * v82;
            __asm { PRFM            #0, [X6] }
            if (v84 < v84 + v78)
            {
              _X5 = v74 + 4 * v78 * v83;
              do
              {
                __asm { PRFM            #0, [X5] }
                v84 += 16;
                _X5 += 64;
              }
              while (v84 < v85);
            }
            if (v76 != v77)
            {
              v90 = (v81 - v4) * v78;
              v91 = 2 * v81;
              v92 = (int *)(v74 + 4 * v90);
              v93 = v75;
              v94 = v76 - v77;
              do
              {
                v96 = *v92++;
                v95 = v96;
                v97 = *v93++;
                v98 = v97 + v95;
                *(float *)(v72 + 4 * (2 * v98)) = *(float *)(v73 + 4 * v91)
                                                                + *(float *)(v72 + 4 * (2 * v98));
                *(float *)(v72 + 4 * ((2 * v98) | 1u)) = *(float *)(v73 + 4 * (v91 | 1))
                                                         + *(float *)(v72 + 4 * ((2 * v98) | 1u));
                --v94;
              }
              while (v94);
            }
            ++v71;
          }
          while (v71 != v79);
        }
        break;
      case 2:
        v99 = *(_QWORD **)a2;
        v100 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v100)
        {
          v101 = 0;
          v102 = *(_QWORD *)(a4 + 8);
          v103 = *a1;
          v104 = *(_QWORD *)(a3 + 24);
          v105 = *(int **)(a3 + 48);
          v107 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v99 - v4));
          v106 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v99 - v4) + 8);
          v108 = v106 - v107;
          v109 = v100 >> 3;
          if ((unint64_t)(v100 >> 3) <= 1)
            v109 = 1;
          do
          {
            v110 = &v99[v101];
            v111 = *v110;
            v112 = v110[10];
            v113 = v112 - v4;
            v114 = (v112 - v4) * v108;
            v115 = v114 + v108;
            _X6 = v103 + 8 * v112;
            __asm { PRFM            #0, [X6] }
            if (v114 < v114 + v108)
            {
              _X5 = v104 + 2 * v108 * v113;
              do
              {
                __asm { PRFM            #0, [X5] }
                v114 += 16;
                _X5 += 32;
              }
              while (v114 < v115);
            }
            if (v106 != v107)
            {
              v120 = (v111 - v4) * v108;
              v121 = 2 * v111;
              v122 = (unsigned __int16 *)(v104 + 2 * v120);
              v123 = v105;
              v124 = v106 - v107;
              do
              {
                v126 = *v122++;
                v125 = v126;
                v127 = *v123++;
                v128 = v127 + v125;
                *(float *)(v102 + 4 * (2 * v128)) = *(float *)(v103 + 4 * v121)
                                                                  + *(float *)(v102 + 4 * (2 * v128));
                *(float *)(v102 + 4 * ((2 * v128) | 1u)) = *(float *)(v103 + 4 * (v121 | 1))
                                                           + *(float *)(v102 + 4 * ((2 * v128) | 1u));
                --v124;
              }
              while (v124);
            }
            ++v101;
          }
          while (v101 != v109);
        }
        break;
      case 1:
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v7)
        {
          v8 = 0;
          v9 = *(_QWORD *)(a4 + 8);
          v10 = *a1;
          v11 = *(_QWORD *)(a3 + 24);
          v12 = *(int **)(a3 + 48);
          v14 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4));
          v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4) + 8);
          v15 = v13 - v14;
          v16 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1)
            v16 = 1;
          do
          {
            v17 = &v6[v8];
            v18 = *v17;
            v19 = v17[10];
            v20 = (v19 - v4) * v15;
            v21 = v20 + v15;
            _X4 = v10 + 8 * v19;
            __asm { PRFM            #0, [X4] }
            while (v20 < v21)
            {
              _X4 = v11 + v20;
              __asm { PRFM            #0, [X4] }
              v20 += 16;
            }
            if (v13 != v14)
            {
              v30 = (v18 - v4) * v15;
              v31 = 2 * v18;
              v32 = (unsigned __int8 *)(v11 + v30);
              v33 = v12;
              v34 = v13 - v14;
              do
              {
                v36 = *v32++;
                v35 = v36;
                v37 = *v33++;
                v38 = v37 + v35;
                *(float *)(v9 + 4 * (2 * v38)) = *(float *)(v10 + 4 * v31)
                                                               + *(float *)(v9 + 4 * (2 * v38));
                *(float *)(v9 + 4 * ((2 * v38) | 1u)) = *(float *)(v10 + 4 * (v31 | 1))
                                                        + *(float *)(v9 + 4 * ((2 * v38) | 1u));
                --v34;
              }
              while (v34);
            }
            ++v8;
          }
          while (v8 != v16);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v196);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v130 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v196);
        v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)": ", 2);
        v132 = (dmlc::LogMessageFatal *)&v196;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v132);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v133 = *(_QWORD **)a2;
        v134 = *(_QWORD *)(a2 + 8);
        v135 = v134 - *(_QWORD *)a2;
        if (v134 != *(_QWORD *)a2)
        {
          v136 = 0;
          v137 = *(_QWORD *)(a4 + 8);
          v138 = *a1;
          v139 = *(_QWORD *)(a3 + 24);
          v140 = *(int **)(a3 + 48);
          v142 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v133);
          v141 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v133 + 8);
          v143 = v141 - v142;
          v144 = v135 >> 3;
          if (v144 <= 1)
            v144 = 1;
          do
          {
            v145 = &v133[v136];
            v146 = *v145;
            v147 = v145[10];
            v148 = v147 * v143;
            v149 = v147 * v143 + v143;
            _X5 = v138 + 8 * v147;
            __asm { PRFM            #0, [X5] }
            if (v147 * v143 < v149)
            {
              _X4 = v139 + 4 * v143 * v147;
              do
              {
                __asm { PRFM            #0, [X4] }
                v148 += 16;
                _X4 += 64;
              }
              while (v148 < v149);
            }
            if (v141 != v142)
            {
              v154 = v146 * v143;
              v155 = 2 * v146;
              v156 = (int *)(v139 + 4 * v154);
              v157 = v140;
              v158 = v141 - v142;
              do
              {
                v160 = *v156++;
                v159 = v160;
                v161 = *v157++;
                v162 = v161 + v159;
                *(float *)(v137 + 4 * (2 * v162)) = *(float *)(v138 + 4 * v155)
                                                                  + *(float *)(v137 + 4 * (2 * v162));
                *(float *)(v137 + 4 * ((2 * v162) | 1u)) = *(float *)(v138 + 4 * (v155 | 1))
                                                           + *(float *)(v137 + 4 * ((2 * v162) | 1u));
                --v158;
              }
              while (v158);
            }
            ++v136;
          }
          while (v136 != v144);
        }
        break;
      case 2:
        v163 = *(_QWORD **)a2;
        v164 = *(_QWORD *)(a2 + 8);
        v165 = v164 - *(_QWORD *)a2;
        if (v164 != *(_QWORD *)a2)
        {
          v166 = 0;
          v167 = *(_QWORD *)(a4 + 8);
          v168 = *a1;
          v169 = *(_QWORD *)(a3 + 24);
          v170 = *(int **)(a3 + 48);
          v172 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v163);
          v171 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v163 + 8);
          v173 = v171 - v172;
          v174 = v165 >> 3;
          if (v174 <= 1)
            v174 = 1;
          do
          {
            v175 = &v163[v166];
            v176 = *v175;
            v177 = v175[10];
            v178 = v177 * v173;
            v179 = v177 * v173 + v173;
            _X5 = v168 + 8 * v177;
            __asm { PRFM            #0, [X5] }
            if (v177 * v173 < v179)
            {
              _X4 = v169 + 2 * v173 * v177;
              do
              {
                __asm { PRFM            #0, [X4] }
                v178 += 16;
                _X4 += 32;
              }
              while (v178 < v179);
            }
            if (v171 != v172)
            {
              v184 = v176 * v173;
              v185 = 2 * v176;
              v186 = (unsigned __int16 *)(v169 + 2 * v184);
              v187 = v170;
              v188 = v171 - v172;
              do
              {
                v190 = *v186++;
                v189 = v190;
                v191 = *v187++;
                v192 = v191 + v189;
                *(float *)(v167 + 4 * (2 * v192)) = *(float *)(v168 + 4 * v185)
                                                                  + *(float *)(v167 + 4 * (2 * v192));
                *(float *)(v167 + 4 * ((2 * v192) | 1u)) = *(float *)(v168 + 4 * (v185 | 1))
                                                           + *(float *)(v167 + 4 * ((2 * v192) | 1u));
                --v188;
              }
              while (v188);
            }
            ++v166;
          }
          while (v166 != v174);
        }
        break;
      case 1:
        v39 = *(_QWORD **)a2;
        v40 = *(_QWORD *)(a2 + 8);
        v41 = v40 - *(_QWORD *)a2;
        if (v40 != *(_QWORD *)a2)
        {
          v42 = 0;
          v43 = *(_QWORD *)(a4 + 8);
          v44 = *a1;
          v45 = *(_QWORD *)(a3 + 24);
          v46 = *(int **)(a3 + 48);
          v48 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v39);
          v47 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v39 + 8);
          v49 = v47 - v48;
          v50 = v41 >> 3;
          if (v50 <= 1)
            v50 = 1;
          do
          {
            v51 = &v39[v42];
            v52 = *v51;
            v53 = v51[10];
            v54 = v53 * v49;
            v55 = v53 * v49 + v49;
            _X3 = v44 + 8 * v53;
            __asm { PRFM            #0, [X3] }
            while (v54 < v55)
            {
              _X3 = v45 + v54;
              __asm { PRFM            #0, [X3] }
              v54 += 16;
            }
            if (v47 != v48)
            {
              v60 = v52 * v49;
              v61 = 2 * v52;
              v62 = (unsigned __int8 *)(v45 + v60);
              v63 = v46;
              v64 = v47 - v48;
              do
              {
                v66 = *v62++;
                v65 = v66;
                v67 = *v63++;
                v68 = v67 + v65;
                *(float *)(v43 + 4 * (2 * v68)) = *(float *)(v44 + 4 * v61)
                                                                + *(float *)(v43 + 4 * (2 * v68));
                *(float *)(v43 + 4 * ((2 * v68) | 1u)) = *(float *)(v44 + 4 * (v61 | 1))
                                                         + *(float *)(v43 + 4 * ((2 * v68) | 1u));
                --v64;
              }
              while (v64);
            }
            ++v42;
          }
          while (v42 != v50);
        }
        break;
      default:
        v193 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v197);
        dmlc::LogMessageFatal::Entry::Init(v193, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v194 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v197);
        v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)": ", 2);
        v132 = (dmlc::LogMessageFatal *)&v197;
        goto LABEL_76;
    }
  }
}

void sub_220E67A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::GHistBuilder<double>::BuildHist<true>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  uint64_t v20[2];
  int v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v8 = a3[1];
  v9 = (v8 - *a3) >> 3;
  if (*(_QWORD *)(*a3 + 8 * (v9 - 1)) - *(_QWORD *)*a3 == v9 - 1)
  {
    v23 = *(_OWORD *)a3;
    v24 = a3[2];
    v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    v11 = (uint64_t *)&v23;
    v12 = v22;
  }
  else
  {
    if (v9 >= 0x12)
      v9 = 18;
    v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    v21 = -1;
    v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<double,true,true>(a2, v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    v18 = -1;
    v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    v11 = v17;
    v12 = v16;
  }
  xgboost::common::BuildHistDispatch<double,false,true>(a2, v11, a4, (uint64_t)v12);
}

{
  __ZNK7xgboost6common12GHistBuilderIdE9BuildHistILb1EEEvRKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEENS0_16RowSetCollection4ElemERKNS_16GHistIndexMatrixENS0_4SpanINS7_IdEELm18446744073709551615EEE(a1, a2, a3, a4, a5);
}

void xgboost::common::BuildHistDispatch<double,false,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  float64x2_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float64x2_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  float64x2_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  float64x2_t v68;
  unsigned int v69;
  std::string *Entry;
  _QWORD *v71;
  _QWORD *v72;
  dmlc::LogMessageFatal *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  float64x2_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  float64x2_t v104;
  unsigned int v105;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  char v109;
  char v110;

  v4 = a3[19];
  v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v38 = *a2;
        v39 = a2[1];
        v40 = v39 - *a2;
        if (v39 != *a2)
        {
          v41 = 0;
          v42 = *(_QWORD *)(a4 + 8);
          v43 = *a1;
          v44 = a3[3];
          v45 = *a3;
          v46 = v40 >> 3;
          if (v46 <= 1)
            v46 = 1;
          do
          {
            v47 = *(_QWORD *)(v38 + 8 * v41);
            v48 = (uint64_t *)(v45 + 8 * (v47 - v4));
            v49 = *v48;
            v50 = v48[1] - *v48;
            if (v50)
            {
              v51 = (int *)(v44 + 4 * v49);
              v52 = vcvtq_f64_f32(*(float32x2_t *)(v43 + 8 * v47));
              do
              {
                v53 = *v51++;
                *(float64x2_t *)(v42 + 8 * (2 * v53)) = vaddq_f64(*(float64x2_t *)(v42+ 8 * (2 * v53)), v52);
                --v50;
              }
              while (v50);
            }
            ++v41;
          }
          while (v41 != v46);
        }
        break;
      case 2:
        v54 = *a2;
        v55 = a2[1];
        v56 = v55 - *a2;
        if (v55 != *a2)
        {
          v57 = 0;
          v58 = *(_QWORD *)(a4 + 8);
          v59 = *a1;
          v60 = a3[3];
          v61 = *a3;
          v62 = v56 >> 3;
          if (v62 <= 1)
            v62 = 1;
          do
          {
            v63 = *(_QWORD *)(v54 + 8 * v57);
            v64 = (uint64_t *)(v61 + 8 * (v63 - v4));
            v65 = *v64;
            v66 = v64[1] - *v64;
            if (v66)
            {
              v67 = (unsigned __int16 *)(v60 + 2 * v65);
              v68 = vcvtq_f64_f32(*(float32x2_t *)(v59 + 8 * v63));
              do
              {
                v69 = *v67++;
                *(float64x2_t *)(v58 + 16 * v69) = vaddq_f64(*(float64x2_t *)(v58 + 16 * v69), v68);
                --v66;
              }
              while (v66);
            }
            ++v57;
          }
          while (v57 != v62);
        }
        break;
      case 1:
        v6 = *a2;
        v7 = a2[1];
        v8 = v7 - *a2;
        if (v7 != *a2)
        {
          v9 = 0;
          v10 = *(_QWORD *)(a4 + 8);
          v11 = *a1;
          v12 = a3[3];
          v13 = *a3;
          v14 = v8 >> 3;
          if (v14 <= 1)
            v14 = 1;
          do
          {
            v15 = *(_QWORD *)(v6 + 8 * v9);
            v16 = (uint64_t *)(v13 + 8 * (v15 - v4));
            v17 = *v16;
            v18 = v16[1] - *v16;
            if (v18)
            {
              v19 = (unsigned __int8 *)(v12 + v17);
              v20 = vcvtq_f64_f32(*(float32x2_t *)(v11 + 8 * v15));
              do
              {
                v21 = *v19++;
                *(float64x2_t *)(v10 + 16 * v21) = vaddq_f64(*(float64x2_t *)(v10 + 16 * v21), v20);
                --v18;
              }
              while (v18);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v71 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
        v73 = (dmlc::LogMessageFatal *)&v109;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v73);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v74 = *a2;
        v75 = a2[1];
        v76 = v75 - *a2;
        if (v75 != *a2)
        {
          v77 = 0;
          v78 = *(_QWORD *)(a4 + 8);
          v79 = *a1;
          v80 = *a3;
          v81 = a3[3];
          v82 = v76 >> 3;
          if (v82 <= 1)
            v82 = 1;
          do
          {
            v83 = *(_QWORD *)(v74 + 8 * v77);
            v84 = (uint64_t *)(v80 + 8 * v83);
            v85 = *v84;
            v86 = v84[1] - *v84;
            if (v86)
            {
              v87 = (int *)(v81 + 4 * v85);
              v88 = vcvtq_f64_f32(*(float32x2_t *)(v79 + 8 * v83));
              do
              {
                v89 = *v87++;
                *(float64x2_t *)(v78 + 8 * (2 * v89)) = vaddq_f64(*(float64x2_t *)(v78+ 8 * (2 * v89)), v88);
                --v86;
              }
              while (v86);
            }
            ++v77;
          }
          while (v77 != v82);
        }
        break;
      case 2:
        v90 = *a2;
        v91 = a2[1];
        v92 = v91 - *a2;
        if (v91 != *a2)
        {
          v93 = 0;
          v94 = *(_QWORD *)(a4 + 8);
          v95 = *a1;
          v96 = *a3;
          v97 = a3[3];
          v98 = v92 >> 3;
          if (v98 <= 1)
            v98 = 1;
          do
          {
            v99 = *(_QWORD *)(v90 + 8 * v93);
            v100 = (uint64_t *)(v96 + 8 * v99);
            v101 = *v100;
            v102 = v100[1] - *v100;
            if (v102)
            {
              v103 = (unsigned __int16 *)(v97 + 2 * v101);
              v104 = vcvtq_f64_f32(*(float32x2_t *)(v95 + 8 * v99));
              do
              {
                v105 = *v103++;
                *(float64x2_t *)(v94 + 16 * v105) = vaddq_f64(*(float64x2_t *)(v94 + 16 * v105), v104);
                --v102;
              }
              while (v102);
            }
            ++v93;
          }
          while (v93 != v98);
        }
        break;
      case 1:
        v22 = *a2;
        v23 = a2[1];
        v24 = v23 - *a2;
        if (v23 != *a2)
        {
          v25 = 0;
          v26 = *(_QWORD *)(a4 + 8);
          v27 = *a1;
          v28 = *a3;
          v29 = a3[3];
          v30 = v24 >> 3;
          if (v30 <= 1)
            v30 = 1;
          do
          {
            v31 = *(_QWORD *)(v22 + 8 * v25);
            v32 = (uint64_t *)(v28 + 8 * v31);
            v33 = *v32;
            v34 = v32[1] - *v32;
            if (v34)
            {
              v35 = (unsigned __int8 *)(v29 + v33);
              v36 = vcvtq_f64_f32(*(float32x2_t *)(v27 + 8 * v31));
              do
              {
                v37 = *v35++;
                *(float64x2_t *)(v26 + 16 * v37) = vaddq_f64(*(float64x2_t *)(v26 + 16 * v37), v36);
                --v34;
              }
              while (v34);
            }
            ++v25;
          }
          while (v25 != v30);
        }
        break;
      default:
        v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v110);
        v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)": ", 2);
        v73 = (dmlc::LogMessageFatal *)&v110;
        goto LABEL_58;
    }
  }
}

void sub_220E67ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::BuildHistDispatch<double,true,true>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  float64x2_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  float64x2_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  float64x2_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v113;
  uint64_t v114;
  unsigned __int16 *v115;
  float64x2_t v116;
  unsigned int v117;
  std::string *Entry;
  _QWORD *v119;
  _QWORD *v120;
  dmlc::LogMessageFatal *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  float64x2_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v171;
  uint64_t v172;
  unsigned __int16 *v173;
  float64x2_t v174;
  unsigned int v175;
  std::string *v176;
  _QWORD *v177;
  _QWORD *v178;
  char v179;
  char v180;

  v4 = a3[19];
  v5 = *((_DWORD *)a3 + 18);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v64 = *a2;
        v65 = a2[1];
        v66 = v65 - *a2;
        if (v65 != *a2)
        {
          v67 = 0;
          v68 = *(_QWORD *)(a4 + 8);
          v69 = *a1;
          v70 = a3[3];
          v71 = *a3;
          v72 = v66 >> 3;
          if (v72 <= 1)
            v72 = 1;
          do
          {
            v73 = (uint64_t *)(v64 + 8 * v67);
            v74 = *v73;
            v75 = (uint64_t *)(v71 + 8 * (*v73 - v4));
            v77 = *v75;
            v76 = v75[1];
            v78 = v73[10];
            v79 = (unint64_t *)(v71 + 8 * (v78 - v4));
            v80 = *v79;
            v81 = v79[1];
            _X3 = v69 + 8 * v78;
            __asm { PRFM            #0, [X3] }
            if (v80 < v81)
            {
              _X3 = v70 + 4 * v80;
              do
              {
                __asm { PRFM            #0, [X3] }
                v80 += 16;
                _X3 += 64;
              }
              while (v80 < v81);
            }
            if (v76 != v77)
            {
              v86 = v76 - v77;
              v87 = 2 * v74;
              v88 = (int *)(v70 + 4 * v77);
              v89 = vcvtq_f64_f32(*(float32x2_t *)(v69 + 4 * v87));
              do
              {
                v90 = *v88++;
                *(float64x2_t *)(v68 + 8 * (2 * v90)) = vaddq_f64(*(float64x2_t *)(v68+ 8 * (2 * v90)), v89);
                --v86;
              }
              while (v86);
            }
            ++v67;
          }
          while (v67 != v72);
        }
        break;
      case 2:
        v91 = *a2;
        v92 = a2[1];
        v93 = v92 - *a2;
        if (v92 != *a2)
        {
          v94 = 0;
          v95 = *(_QWORD *)(a4 + 8);
          v96 = *a1;
          v97 = a3[3];
          v98 = *a3;
          v99 = v93 >> 3;
          if (v99 <= 1)
            v99 = 1;
          do
          {
            v100 = (uint64_t *)(v91 + 8 * v94);
            v101 = *v100;
            v102 = (uint64_t *)(v98 + 8 * (*v100 - v4));
            v104 = *v102;
            v103 = v102[1];
            v105 = v100[10];
            v106 = (unint64_t *)(v98 + 8 * (v105 - v4));
            v107 = *v106;
            v108 = v106[1];
            _X3 = v96 + 8 * v105;
            __asm { PRFM            #0, [X3] }
            if (v107 < v108)
            {
              _X3 = v97 + 2 * v107;
              do
              {
                __asm { PRFM            #0, [X3] }
                v107 += 16;
                _X3 += 32;
              }
              while (v107 < v108);
            }
            if (v103 != v104)
            {
              v113 = v103 - v104;
              v114 = 2 * v101;
              v115 = (unsigned __int16 *)(v97 + 2 * v104);
              v116 = vcvtq_f64_f32(*(float32x2_t *)(v96 + 4 * v114));
              do
              {
                v117 = *v115++;
                *(float64x2_t *)(v95 + 16 * v117) = vaddq_f64(*(float64x2_t *)(v95 + 16 * v117), v116);
                --v113;
              }
              while (v113);
            }
            ++v94;
          }
          while (v94 != v99);
        }
        break;
      case 1:
        v6 = *a2;
        v7 = a2[1];
        v8 = v7 - *a2;
        if (v7 != *a2)
        {
          v9 = 0;
          v10 = *(_QWORD *)(a4 + 8);
          v11 = *a1;
          v12 = a3[3];
          v13 = *a3;
          v14 = v8 >> 3;
          if (v14 <= 1)
            v14 = 1;
          do
          {
            v15 = (uint64_t *)(v6 + 8 * v9);
            v16 = *v15;
            v17 = (uint64_t *)(v13 + 8 * (*v15 - v4));
            v19 = *v17;
            v18 = v17[1];
            v20 = v15[10];
            v21 = (unint64_t *)(v13 + 8 * (v20 - v4));
            v22 = *v21;
            v23 = v21[1];
            _X3 = v11 + 8 * v20;
            __asm { PRFM            #0, [X3] }
            while (v22 < v23)
            {
              _X3 = v12 + v22;
              __asm { PRFM            #0, [X3] }
              v22 += 16;
            }
            if (v18 != v19)
            {
              v32 = v18 - v19;
              v33 = 2 * v16;
              v34 = (unsigned __int8 *)(v12 + v19);
              v35 = vcvtq_f64_f32(*(float32x2_t *)(v11 + 4 * v33));
              do
              {
                v36 = *v34++;
                *(float64x2_t *)(v10 + 16 * v36) = vaddq_f64(*(float64x2_t *)(v10 + 16 * v36), v35);
                --v32;
              }
              while (v32);
            }
            ++v9;
          }
          while (v9 != v14);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v179);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v119 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v179);
        v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)": ", 2);
        v121 = (dmlc::LogMessageFatal *)&v179;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v121);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v122 = *a2;
        v123 = a2[1];
        v124 = v123 - *a2;
        if (v123 != *a2)
        {
          v125 = 0;
          v126 = *(_QWORD *)(a4 + 8);
          v127 = *a1;
          v128 = *a3;
          v129 = a3[3];
          v130 = v124 >> 3;
          if (v130 <= 1)
            v130 = 1;
          do
          {
            v131 = (uint64_t *)(v122 + 8 * v125);
            v132 = *v131;
            v133 = (uint64_t *)(v128 + 8 * *v131);
            v134 = *v133;
            v135 = v133[1];
            v136 = v131[10];
            v137 = (unint64_t *)(v128 + 8 * v136);
            v138 = *v137;
            v139 = v137[1];
            _X2 = v127 + 8 * v136;
            __asm { PRFM            #0, [X2] }
            if (v138 < v139)
            {
              _X2 = v129 + 4 * v138;
              do
              {
                __asm { PRFM            #0, [X2] }
                v138 += 16;
                _X2 += 64;
              }
              while (v138 < v139);
            }
            if (v135 != v134)
            {
              v144 = v135 - v134;
              v145 = 2 * v132;
              v146 = (int *)(v129 + 4 * v134);
              v147 = vcvtq_f64_f32(*(float32x2_t *)(v127 + 4 * v145));
              do
              {
                v148 = *v146++;
                *(float64x2_t *)(v126 + 8 * (2 * v148)) = vaddq_f64(*(float64x2_t *)(v126+ 8* (2 * v148)), v147);
                --v144;
              }
              while (v144);
            }
            ++v125;
          }
          while (v125 != v130);
        }
        break;
      case 2:
        v149 = *a2;
        v150 = a2[1];
        v151 = v150 - *a2;
        if (v150 != *a2)
        {
          v152 = 0;
          v153 = *(_QWORD *)(a4 + 8);
          v154 = *a1;
          v155 = *a3;
          v156 = a3[3];
          v157 = v151 >> 3;
          if (v157 <= 1)
            v157 = 1;
          do
          {
            v158 = (uint64_t *)(v149 + 8 * v152);
            v159 = *v158;
            v160 = (uint64_t *)(v155 + 8 * *v158);
            v161 = *v160;
            v162 = v160[1];
            v163 = v158[10];
            v164 = (unint64_t *)(v155 + 8 * v163);
            v165 = *v164;
            v166 = v164[1];
            _X2 = v154 + 8 * v163;
            __asm { PRFM            #0, [X2] }
            if (v165 < v166)
            {
              _X2 = v156 + 2 * v165;
              do
              {
                __asm { PRFM            #0, [X2] }
                v165 += 16;
                _X2 += 32;
              }
              while (v165 < v166);
            }
            if (v162 != v161)
            {
              v171 = v162 - v161;
              v172 = 2 * v159;
              v173 = (unsigned __int16 *)(v156 + 2 * v161);
              v174 = vcvtq_f64_f32(*(float32x2_t *)(v154 + 4 * v172));
              do
              {
                v175 = *v173++;
                *(float64x2_t *)(v153 + 16 * v175) = vaddq_f64(*(float64x2_t *)(v153 + 16 * v175), v174);
                --v171;
              }
              while (v171);
            }
            ++v152;
          }
          while (v152 != v157);
        }
        break;
      case 1:
        v37 = *a2;
        v38 = a2[1];
        v39 = v38 - *a2;
        if (v38 != *a2)
        {
          v40 = 0;
          v41 = *(_QWORD *)(a4 + 8);
          v42 = *a1;
          v43 = *a3;
          v44 = a3[3];
          v45 = v39 >> 3;
          if (v45 <= 1)
            v45 = 1;
          do
          {
            v46 = (uint64_t *)(v37 + 8 * v40);
            v47 = *v46;
            v48 = (uint64_t *)(v43 + 8 * *v46);
            v49 = *v48;
            v50 = v48[1];
            v51 = v46[10];
            v52 = (unint64_t *)(v43 + 8 * v51);
            v53 = *v52;
            v54 = v52[1];
            _X2 = v42 + 8 * v51;
            __asm { PRFM            #0, [X2] }
            while (v53 < v54)
            {
              _X2 = v44 + v53;
              __asm { PRFM            #0, [X2] }
              v53 += 16;
            }
            if (v50 != v49)
            {
              v59 = v50 - v49;
              v60 = 2 * v47;
              v61 = (unsigned __int8 *)(v44 + v49);
              v62 = vcvtq_f64_f32(*(float32x2_t *)(v42 + 4 * v60));
              do
              {
                v63 = *v61++;
                *(float64x2_t *)(v41 + 16 * v63) = vaddq_f64(*(float64x2_t *)(v41 + 16 * v63), v62);
                --v59;
              }
              while (v59);
            }
            ++v40;
          }
          while (v40 != v45);
        }
        break;
      default:
        v176 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v180);
        dmlc::LogMessageFatal::Entry::Init(v176, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v177 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v180);
        v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)": ", 2);
        v121 = (dmlc::LogMessageFatal *)&v180;
        goto LABEL_76;
    }
  }
}

void sub_220E68450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::GHistBuilder<double>::BuildHist<false>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v8 = a3[1];
  v9 = (v8 - *a3) >> 3;
  if (*(_QWORD *)(*a3 + 8 * (v9 - 1)) - *(_QWORD *)*a3 == v9 - 1)
  {
    v23 = *(_OWORD *)a3;
    v24 = a3[2];
    v10 = a5[1];
    v22[0] = *a5;
    v22[1] = v10;
    v11 = &v23;
    v12 = v22;
  }
  else
  {
    if (v9 >= 0x12)
      v9 = 18;
    v13 = v8 - 8 * v9;
    v20[0] = *a3;
    v20[1] = v13;
    v21 = -1;
    v14 = a5[1];
    v19[0] = *a5;
    v19[1] = v14;
    xgboost::common::BuildHistDispatch<double,true,false>(a2, (uint64_t)v20, a4, (uint64_t)v19);
    v17[0] = v13;
    v17[1] = v8;
    v18 = -1;
    v15 = a5[1];
    v16[0] = *a5;
    v16[1] = v15;
    v11 = (__int128 *)v17;
    v12 = v16;
  }
  xgboost::common::BuildHistDispatch<double,false,false>(a2, (uint64_t)v11, a4, (uint64_t)v12);
}

{
  __ZNK7xgboost6common12GHistBuilderIdE9BuildHistILb0EEEvRKNSt3__16vectorINS_6detail20GradientPairInternalIfEENS4_9allocatorIS8_EEEENS0_16RowSetCollection4ElemERKNS_16GHistIndexMatrixENS0_4SpanINS7_IdEELm18446744073709551615EEE(a1, a2, a3, a4, a5);
}

void xgboost::common::BuildHistDispatch<double,false,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  float64x2_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  float64x2_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  float64x2_t v55;
  int *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  float64x2_t v73;
  int *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  std::string *Entry;
  _QWORD *v80;
  _QWORD *v81;
  dmlc::LogMessageFatal *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int *v95;
  float64x2_t v96;
  int *v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int16 *v114;
  float64x2_t v115;
  int *v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  std::string *v121;
  _QWORD *v122;
  _QWORD *v123;
  char v124;
  char v125;

  v4 = *(_QWORD *)(a3 + 152);
  v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v43 = *(_QWORD **)a2;
        v44 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v44)
        {
          v45 = 0;
          v46 = *(_QWORD *)(a4 + 8);
          v47 = *a1;
          v48 = *(_QWORD *)(a3 + 24);
          v49 = *(int **)(a3 + 48);
          v51 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v43 - v4));
          v50 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v43 - v4) + 8);
          v52 = v44 >> 3;
          if ((unint64_t)(v44 >> 3) <= 1)
            v52 = 1;
          do
          {
            if (v50 != v51)
            {
              v53 = v43[v45];
              v54 = (int *)(v48 + 4 * (v53 - v4) * (v50 - v51));
              v55 = vcvtq_f64_f32(*(float32x2_t *)(v47 + 8 * v53));
              v56 = v49;
              v57 = v50 - v51;
              do
              {
                v59 = *v54++;
                v58 = v59;
                v60 = *v56++;
                *(float64x2_t *)(v46 + 8 * (2 * (v60 + v58))) = vaddq_f64(*(float64x2_t *)(v46+ 8* (2 * (v60 + v58))), v55);
                --v57;
              }
              while (v57);
            }
            ++v45;
          }
          while (v45 != v52);
        }
        break;
      case 2:
        v61 = *(_QWORD **)a2;
        v62 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v62)
        {
          v63 = 0;
          v64 = *(_QWORD *)(a4 + 8);
          v65 = *a1;
          v66 = *(_QWORD *)(a3 + 24);
          v67 = *(int **)(a3 + 48);
          v69 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v61 - v4));
          v68 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v61 - v4) + 8);
          v70 = v62 >> 3;
          if ((unint64_t)(v62 >> 3) <= 1)
            v70 = 1;
          do
          {
            if (v68 != v69)
            {
              v71 = v61[v63];
              v72 = (unsigned __int16 *)(v66 + 2 * (v71 - v4) * (v68 - v69));
              v73 = vcvtq_f64_f32(*(float32x2_t *)(v65 + 8 * v71));
              v74 = v67;
              v75 = v68 - v69;
              do
              {
                v77 = *v72++;
                v76 = v77;
                v78 = *v74++;
                *(float64x2_t *)(v64 + 8 * (2 * (v78 + v76))) = vaddq_f64(*(float64x2_t *)(v64+ 8* (2 * (v78 + v76))), v73);
                --v75;
              }
              while (v75);
            }
            ++v63;
          }
          while (v63 != v70);
        }
        break;
      case 1:
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v7)
        {
          v8 = 0;
          v9 = *(_QWORD *)(a4 + 8);
          v10 = *a1;
          v11 = *(_QWORD *)(a3 + 24);
          v12 = *(int **)(a3 + 48);
          v14 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4));
          v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4) + 8);
          v15 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1)
            v15 = 1;
          do
          {
            if (v13 != v14)
            {
              v16 = v6[v8];
              v17 = (unsigned __int8 *)(v11 + (v16 - v4) * (v13 - v14));
              v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + 8 * v16));
              v19 = v12;
              v20 = v13 - v14;
              do
              {
                v22 = *v17++;
                v21 = v22;
                v23 = *v19++;
                *(float64x2_t *)(v9 + 8 * (2 * (v23 + v21))) = vaddq_f64(*(float64x2_t *)(v9+ 8* (2 * (v23 + v21))), v18);
                --v20;
              }
              while (v20);
            }
            ++v8;
          }
          while (v8 != v15);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v124);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v80 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v124);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)": ", 2);
        v82 = (dmlc::LogMessageFatal *)&v124;
LABEL_58:
        dmlc::LogMessageFatal::~LogMessageFatal(v82);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v83 = *(_QWORD **)a2;
        v84 = *(_QWORD *)(a2 + 8);
        v85 = v84 - *(_QWORD *)a2;
        if (v84 != *(_QWORD *)a2)
        {
          v86 = 0;
          v87 = *(_QWORD *)(a4 + 8);
          v88 = *a1;
          v89 = *(_QWORD *)(a3 + 24);
          v90 = *(int **)(a3 + 48);
          v92 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v83);
          v91 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v83 + 8);
          v93 = v85 >> 3;
          if (v93 <= 1)
            v93 = 1;
          do
          {
            if (v91 != v92)
            {
              v94 = v83[v86];
              v95 = (int *)(v89 + 4 * v94 * (v91 - v92));
              v96 = vcvtq_f64_f32(*(float32x2_t *)(v88 + 8 * v94));
              v97 = v90;
              v98 = v91 - v92;
              do
              {
                v100 = *v95++;
                v99 = v100;
                v101 = *v97++;
                *(float64x2_t *)(v87 + 8 * (2 * (v101 + v99))) = vaddq_f64(*(float64x2_t *)(v87+ 8 * (2 * (v101 + v99))), v96);
                --v98;
              }
              while (v98);
            }
            ++v86;
          }
          while (v86 != v93);
        }
        break;
      case 2:
        v102 = *(_QWORD **)a2;
        v103 = *(_QWORD *)(a2 + 8);
        v104 = v103 - *(_QWORD *)a2;
        if (v103 != *(_QWORD *)a2)
        {
          v105 = 0;
          v106 = *(_QWORD *)(a4 + 8);
          v107 = *a1;
          v108 = *(_QWORD *)(a3 + 24);
          v109 = *(int **)(a3 + 48);
          v111 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v102);
          v110 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v102 + 8);
          v112 = v104 >> 3;
          if (v112 <= 1)
            v112 = 1;
          do
          {
            if (v110 != v111)
            {
              v113 = v102[v105];
              v114 = (unsigned __int16 *)(v108 + 2 * v113 * (v110 - v111));
              v115 = vcvtq_f64_f32(*(float32x2_t *)(v107 + 8 * v113));
              v116 = v109;
              v117 = v110 - v111;
              do
              {
                v119 = *v114++;
                v118 = v119;
                v120 = *v116++;
                *(float64x2_t *)(v106 + 8 * (2 * (v120 + v118))) = vaddq_f64(*(float64x2_t *)(v106 + 8 * (2 * (v120 + v118))), v115);
                --v117;
              }
              while (v117);
            }
            ++v105;
          }
          while (v105 != v112);
        }
        break;
      case 1:
        v24 = *(_QWORD **)a2;
        v25 = *(_QWORD *)(a2 + 8);
        v26 = v25 - *(_QWORD *)a2;
        if (v25 != *(_QWORD *)a2)
        {
          v27 = 0;
          v28 = *(_QWORD *)(a4 + 8);
          v29 = *a1;
          v30 = *(_QWORD *)(a3 + 24);
          v31 = *(int **)(a3 + 48);
          v33 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v24);
          v32 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v24 + 8);
          v34 = v26 >> 3;
          if (v34 <= 1)
            v34 = 1;
          do
          {
            if (v32 != v33)
            {
              v35 = v24[v27];
              v36 = (unsigned __int8 *)(v30 + v35 * (v32 - v33));
              v37 = vcvtq_f64_f32(*(float32x2_t *)(v29 + 8 * v35));
              v38 = v31;
              v39 = v32 - v33;
              do
              {
                v41 = *v36++;
                v40 = v41;
                v42 = *v38++;
                *(float64x2_t *)(v28 + 8 * (2 * (v42 + v40))) = vaddq_f64(*(float64x2_t *)(v28+ 8* (2 * (v42 + v40))), v37);
                --v39;
              }
              while (v39);
            }
            ++v27;
          }
          while (v27 != v34);
        }
        break;
      default:
        v121 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
        dmlc::LogMessageFatal::Entry::Init(v121, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v122 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v125);
        v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
        v82 = (dmlc::LogMessageFatal *)&v125;
        goto LABEL_58;
    }
  }
}

void sub_220E689F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::BuildHistDispatch<double,true,false>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v30;
  unsigned __int8 *v31;
  float64x2_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v59;
  unsigned __int8 *v60;
  float64x2_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v88;
  int *v89;
  float64x2_t v90;
  int *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v117;
  unsigned __int16 *v118;
  float64x2_t v119;
  int *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  std::string *Entry;
  _QWORD *v126;
  _QWORD *v127;
  dmlc::LogMessageFatal *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v150;
  int *v151;
  float64x2_t v152;
  int *v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v179;
  unsigned __int16 *v180;
  float64x2_t v181;
  int *v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  std::string *v187;
  _QWORD *v188;
  _QWORD *v189;
  char v190;
  char v191;

  v4 = *(_QWORD *)(a3 + 152);
  v5 = *(_DWORD *)(a3 + 72);
  if (v4)
  {
    switch(v5)
    {
      case 4:
        v67 = *(_QWORD **)a2;
        v68 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v68)
        {
          v69 = 0;
          v70 = *(_QWORD *)(a4 + 8);
          v71 = *a1;
          v72 = *(_QWORD *)(a3 + 24);
          v73 = *(int **)(a3 + 48);
          v75 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v67 - v4));
          v74 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v67 - v4) + 8);
          v76 = v74 - v75;
          v77 = v68 >> 3;
          if ((unint64_t)(v68 >> 3) <= 1)
            v77 = 1;
          do
          {
            v78 = &v67[v69];
            v79 = *v78;
            v80 = v78[10];
            v81 = v80 - v4;
            v82 = (v80 - v4) * v76;
            v83 = v82 + v76;
            _X6 = v71 + 8 * v80;
            __asm { PRFM            #0, [X6] }
            if (v82 < v82 + v76)
            {
              _X5 = v72 + 4 * v76 * v81;
              do
              {
                __asm { PRFM            #0, [X5] }
                v82 += 16;
                _X5 += 64;
              }
              while (v82 < v83);
            }
            if (v74 != v75)
            {
              v88 = 2 * v79;
              v89 = (int *)(v72 + 4 * (v79 - v4) * v76);
              v90 = vcvtq_f64_f32(*(float32x2_t *)(v71 + 4 * v88));
              v91 = v73;
              v92 = v74 - v75;
              do
              {
                v94 = *v89++;
                v93 = v94;
                v95 = *v91++;
                *(float64x2_t *)(v70 + 8 * (2 * (v95 + v93))) = vaddq_f64(*(float64x2_t *)(v70+ 8* (2 * (v95 + v93))), v90);
                --v92;
              }
              while (v92);
            }
            ++v69;
          }
          while (v69 != v77);
        }
        break;
      case 2:
        v96 = *(_QWORD **)a2;
        v97 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v97)
        {
          v98 = 0;
          v99 = *(_QWORD *)(a4 + 8);
          v100 = *a1;
          v101 = *(_QWORD *)(a3 + 24);
          v102 = *(int **)(a3 + 48);
          v104 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v96 - v4));
          v103 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v96 - v4) + 8);
          v105 = v103 - v104;
          v106 = v97 >> 3;
          if ((unint64_t)(v97 >> 3) <= 1)
            v106 = 1;
          do
          {
            v107 = &v96[v98];
            v108 = *v107;
            v109 = v107[10];
            v110 = v109 - v4;
            v111 = (v109 - v4) * v105;
            v112 = v111 + v105;
            _X6 = v100 + 8 * v109;
            __asm { PRFM            #0, [X6] }
            if (v111 < v111 + v105)
            {
              _X5 = v101 + 2 * v105 * v110;
              do
              {
                __asm { PRFM            #0, [X5] }
                v111 += 16;
                _X5 += 32;
              }
              while (v111 < v112);
            }
            if (v103 != v104)
            {
              v117 = 2 * v108;
              v118 = (unsigned __int16 *)(v101 + 2 * (v108 - v4) * v105);
              v119 = vcvtq_f64_f32(*(float32x2_t *)(v100 + 4 * v117));
              v120 = v102;
              v121 = v103 - v104;
              do
              {
                v123 = *v118++;
                v122 = v123;
                v124 = *v120++;
                *(float64x2_t *)(v99 + 8 * (2 * (v124 + v122))) = vaddq_f64(*(float64x2_t *)(v99 + 8 * (2 * (v124 + v122))), v119);
                --v121;
              }
              while (v121);
            }
            ++v98;
          }
          while (v98 != v106);
        }
        break;
      case 1:
        v6 = *(_QWORD **)a2;
        v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v7)
        {
          v8 = 0;
          v9 = *(_QWORD *)(a4 + 8);
          v10 = *a1;
          v11 = *(_QWORD *)(a3 + 24);
          v12 = *(int **)(a3 + 48);
          v14 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4));
          v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (*v6 - v4) + 8);
          v15 = v13 - v14;
          v16 = v7 >> 3;
          if ((unint64_t)(v7 >> 3) <= 1)
            v16 = 1;
          do
          {
            v17 = &v6[v8];
            v18 = *v17;
            v19 = v17[10];
            v20 = (v19 - v4) * v15;
            v21 = v20 + v15;
            _X4 = v10 + 8 * v19;
            __asm { PRFM            #0, [X4] }
            while (v20 < v21)
            {
              _X4 = v11 + v20;
              __asm { PRFM            #0, [X4] }
              v20 += 16;
            }
            if (v13 != v14)
            {
              v30 = 2 * v18;
              v31 = (unsigned __int8 *)(v11 + (v18 - v4) * v15);
              v32 = vcvtq_f64_f32(*(float32x2_t *)(v10 + 4 * v30));
              v33 = v12;
              v34 = v13 - v14;
              do
              {
                v36 = *v31++;
                v35 = v36;
                v37 = *v33++;
                *(float64x2_t *)(v9 + 8 * (2 * (v37 + v35))) = vaddq_f64(*(float64x2_t *)(v9+ 8* (2 * (v37 + v35))), v32);
                --v34;
              }
              while (v34);
            }
            ++v8;
          }
          while (v8 != v16);
        }
        return;
      default:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v190);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v126 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v190);
        v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)": ", 2);
        v128 = (dmlc::LogMessageFatal *)&v190;
LABEL_76:
        dmlc::LogMessageFatal::~LogMessageFatal(v128);
        return;
    }
  }
  else
  {
    switch(v5)
    {
      case 4:
        v129 = *(_QWORD **)a2;
        v130 = *(_QWORD *)(a2 + 8);
        v131 = v130 - *(_QWORD *)a2;
        if (v130 != *(_QWORD *)a2)
        {
          v132 = 0;
          v133 = *(_QWORD *)(a4 + 8);
          v134 = *a1;
          v135 = *(_QWORD *)(a3 + 24);
          v136 = *(int **)(a3 + 48);
          v138 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v129);
          v137 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v129 + 8);
          v139 = v137 - v138;
          v140 = v131 >> 3;
          if (v140 <= 1)
            v140 = 1;
          do
          {
            v141 = &v129[v132];
            v142 = *v141;
            v143 = v141[10];
            v144 = v143 * v139;
            v145 = v143 * v139 + v139;
            _X5 = v134 + 8 * v143;
            __asm { PRFM            #0, [X5] }
            if (v143 * v139 < v145)
            {
              _X4 = v135 + 4 * v139 * v143;
              do
              {
                __asm { PRFM            #0, [X4] }
                v144 += 16;
                _X4 += 64;
              }
              while (v144 < v145);
            }
            if (v137 != v138)
            {
              v150 = 2 * v142;
              v151 = (int *)(v135 + 4 * v142 * v139);
              v152 = vcvtq_f64_f32(*(float32x2_t *)(v134 + 4 * v150));
              v153 = v136;
              v154 = v137 - v138;
              do
              {
                v156 = *v151++;
                v155 = v156;
                v157 = *v153++;
                *(float64x2_t *)(v133 + 8 * (2 * (v157 + v155))) = vaddq_f64(*(float64x2_t *)(v133 + 8 * (2 * (v157 + v155))), v152);
                --v154;
              }
              while (v154);
            }
            ++v132;
          }
          while (v132 != v140);
        }
        break;
      case 2:
        v158 = *(_QWORD **)a2;
        v159 = *(_QWORD *)(a2 + 8);
        v160 = v159 - *(_QWORD *)a2;
        if (v159 != *(_QWORD *)a2)
        {
          v161 = 0;
          v162 = *(_QWORD *)(a4 + 8);
          v163 = *a1;
          v164 = *(_QWORD *)(a3 + 24);
          v165 = *(int **)(a3 + 48);
          v167 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v158);
          v166 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v158 + 8);
          v168 = v166 - v167;
          v169 = v160 >> 3;
          if (v169 <= 1)
            v169 = 1;
          do
          {
            v170 = &v158[v161];
            v171 = *v170;
            v172 = v170[10];
            v173 = v172 * v168;
            v174 = v172 * v168 + v168;
            _X5 = v163 + 8 * v172;
            __asm { PRFM            #0, [X5] }
            if (v172 * v168 < v174)
            {
              _X4 = v164 + 2 * v168 * v172;
              do
              {
                __asm { PRFM            #0, [X4] }
                v173 += 16;
                _X4 += 32;
              }
              while (v173 < v174);
            }
            if (v166 != v167)
            {
              v179 = 2 * v171;
              v180 = (unsigned __int16 *)(v164 + 2 * v171 * v168);
              v181 = vcvtq_f64_f32(*(float32x2_t *)(v163 + 4 * v179));
              v182 = v165;
              v183 = v166 - v167;
              do
              {
                v185 = *v180++;
                v184 = v185;
                v186 = *v182++;
                *(float64x2_t *)(v162 + 8 * (2 * (v186 + v184))) = vaddq_f64(*(float64x2_t *)(v162 + 8 * (2 * (v186 + v184))), v181);
                --v183;
              }
              while (v183);
            }
            ++v161;
          }
          while (v161 != v169);
        }
        break;
      case 1:
        v38 = *(_QWORD **)a2;
        v39 = *(_QWORD *)(a2 + 8);
        v40 = v39 - *(_QWORD *)a2;
        if (v39 != *(_QWORD *)a2)
        {
          v41 = 0;
          v42 = *(_QWORD *)(a4 + 8);
          v43 = *a1;
          v44 = *(_QWORD *)(a3 + 24);
          v45 = *(int **)(a3 + 48);
          v47 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v38);
          v46 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *v38 + 8);
          v48 = v46 - v47;
          v49 = v40 >> 3;
          if (v49 <= 1)
            v49 = 1;
          do
          {
            v50 = &v38[v41];
            v51 = *v50;
            v52 = v50[10];
            v53 = v52 * v48;
            v54 = v52 * v48 + v48;
            _X3 = v43 + 8 * v52;
            __asm { PRFM            #0, [X3] }
            while (v53 < v54)
            {
              _X3 = v44 + v53;
              __asm { PRFM            #0, [X3] }
              v53 += 16;
            }
            if (v46 != v47)
            {
              v59 = 2 * v51;
              v60 = (unsigned __int8 *)(v44 + v51 * v48);
              v61 = vcvtq_f64_f32(*(float32x2_t *)(v43 + 4 * v59));
              v62 = v45;
              v63 = v46 - v47;
              do
              {
                v65 = *v60++;
                v64 = v65;
                v66 = *v62++;
                *(float64x2_t *)(v42 + 8 * (2 * (v66 + v64))) = vaddq_f64(*(float64x2_t *)(v42+ 8* (2 * (v66 + v64))), v61);
                --v63;
              }
              while (v63);
            }
            ++v41;
          }
          while (v41 != v49);
        }
        break;
      default:
        v187 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v191);
        dmlc::LogMessageFatal::Entry::Init(v187, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/hist_util.cc");
        v188 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v191);
        v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"Check failed: false", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)": ", 2);
        v128 = (dmlc::LogMessageFatal *)&v191;
        goto LABEL_76;
    }
  }
}

void sub_220E69054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

xgboost::common::HistogramCuts *xgboost::common::HistogramCuts::HistogramCuts(xgboost::common::HistogramCuts *this)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 1) = -1082130432;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 1, 0, 0.0);
  xgboost::HostDeviceVector<unsigned int>::HostDeviceVector((std::vector<unsigned int> **)this + 2, 0, 0);
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 3, 0, 0.0);
  v2 = *((_QWORD *)this + 2);
  v3 = *(_DWORD **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)v3 >= v4)
  {
    v6 = *(_DWORD **)v2;
    v7 = ((uint64_t)v3 - *(_QWORD *)v2) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(*((_QWORD *)this + 2) + 16, v10);
      v6 = *(_DWORD **)v2;
      v3 = *(_DWORD **)(v2 + 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 0;
    v5 = v12 + 4;
    while (v3 != v6)
    {
      v14 = *--v3;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *(_QWORD *)v2 = v12;
    *(_QWORD *)(v2 + 8) = v5;
    *(_QWORD *)(v2 + 16) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v3 = 0;
    v5 = v3 + 1;
  }
  *(_QWORD *)(v2 + 8) = v5;
  return this;
}

void sub_220E691BC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  xgboost::HostDeviceVector<float>::~HostDeviceVector(v3);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(v2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v1);
  _Unwind_Resume(a1);
}

_DWORD *XGBoostVersion(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result)
    *result = 1;
  if (a2)
    *a2 = 6;
  if (a3)
    *a3 = 1;
  return result;
}

void xgboost::XGBBuildInfoDevice(xgboost *this, xgboost::Json *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD v6[2];
  char v7;
  _QWORD v8[2];
  char v9;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  char v13;

  v12[1] = 0x500000000;
  v12[0] = &off_24E6BE468;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "USE_CUDA");
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, __p);
  xgboost::Json::operator=(v3, (uint64_t)v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v8[1] = 0x500000000;
  v8[0] = &off_24E6BE468;
  v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "USE_NCCL");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, __p);
  xgboost::Json::operator=(v4, (uint64_t)v8);
  if (v11 < 0)
    operator delete(__p[0]);
  v6[1] = 0x500000000;
  v6[0] = &off_24E6BE468;
  v7 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "USE_RMM");
  v5 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, __p);
  xgboost::Json::operator=(v5, (uint64_t)v6);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_220E6933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t XGProxyDMatrixCreate(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_24E6B81E0;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(v3 + 8));
  *(_QWORD *)(v3 + 216) = 0;
  *(_BYTE *)(v3 + 248) = 0;
  *(_DWORD *)(v3 + 252) = -1;
  *(_QWORD *)(v3 + 256) = 0;
  *(_BYTE *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 268) = 0xFFFFFFFF00000000;
  *(_WORD *)(v3 + 276) = 0;
  *v2 = v3;
  v4 = (_QWORD *)operator new();
  result = 0;
  *v4 = &off_24E6B8470;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  v2[1] = v4;
  *a1 = v2;
  return result;
}

void sub_220E694F4(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v19;
  const char *v20;
  void *v21;
  char *v22;
  const char *v23;

  v17 = (int)a2;
  (*(void (**)(uint64_t, std::string *, std::runtime_error_vtbl *, const char *))(*(_QWORD *)v16 + 56))(v16, a2, a3.__vftable, a3.__imp_.__imp_);
  MEMORY[0x227667068](v15, 0x20C40A4A59CD2);
  if (v17 == 2)
  {
    v19 = __cxa_begin_catch(a1);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (v17 != 1)
      _Unwind_Resume(a1);
    v21 = __cxa_begin_catch(a1);
    v22 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a9, v22);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v23 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E694E0);
}

uint64_t XGProxyDMatrixSetDataCSR(xgboost::data::DMatrixProxy **a1, char *a2, char *a3, char *a4, unsigned int a5)
{
  std::string *Entry;
  _QWORD *v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  xgboost::data::DMatrixProxy *v15;
  std::string *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v21[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v21);
    v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: p_m", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v21);
  }
  v15 = *a1;
  if (!v15)
  {
    v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v21);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: m", 15);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Current DMatrix type does not support set data.", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v21);
  }
  xgboost::data::DMatrixProxy::SetCSRData(v15, a2, a3, a4, a5, 1);
  return 0;
}

void sub_220E69790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::runtime_error a11, std::runtime_error a12)
{
  void *v12;
  const char *v13;
  void *v14;
  char *v15;
  const char *v16;

  if (a2 == 2)
  {
    v12 = __cxa_begin_catch(exception_object);
    v13 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
    XGBAPISetLastError(v13);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v14 = __cxa_begin_catch(exception_object);
    v15 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
    std::string::basic_string[abi:ne180100]<0>(&a10, v15);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a10);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v16 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v16);
    std::runtime_error::~runtime_error(&a12);
    if (SHIBYTE(a11.__imp_.__imp_) < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6971CLL);
}

uint64_t XGDMatrixCreateFromCSCEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v8;
  double v9;
  float v10;
  uint64_t v11;
  void *__p;
  char v14;
  void (**v15)(xgboost::data::CSCAdapter *__hidden);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = 0;
  v15 = &off_24E6B8288;
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4 - 1;
  v21 = a6;
  v22 = a4 - 1;
  v8 = (_QWORD *)operator new();
  v9 = nan((const char *)&unk_220F8364E);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_220F8364E);
  v10 = v9;
  v11 = xgboost::DMatrix::Create<xgboost::data::CSCAdapter>(&v15, 1, v10);
  std::shared_ptr<xgboost::DMatrix>::shared_ptr[abi:ne180100]<xgboost::DMatrix,void>(v8, v11);
  *a7 = v8;
  if (v14 < 0)
    operator delete(__p);
  return 0;
}

void sub_220E69988(_Unwind_Exception *a1, std::runtime_error a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8, std::runtime_error a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  int v17;
  void *v19;
  const char *v20;
  void *v21;
  char *v22;
  const char *v23;

  v17 = (int)a2.__vftable;
  MEMORY[0x227667068](v16, 0x20C40A4A59CD2, a2.__imp_.__imp_, a3, a4, a5, a6, a7);
  if (v17 == 2)
  {
    v19 = __cxa_begin_catch(a1);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (v17 != 1)
      _Unwind_Resume(a1);
    v21 = __cxa_begin_catch(a1);
    v22 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a11, v22);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a11);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v23 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&a9);
    if (a16 < 0)
      operator delete(a11);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E69970);
}

uint64_t XGDMatrixCreateFromMat(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float a5)
{
  _QWORD *v7;
  uint64_t v8;
  void *__p;
  char v11;
  void (**v12)(xgboost::data::DenseAdapter *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = 0;
  v12 = &off_24E6B8310;
  v14 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a2;
  v18 = a3;
  v7 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_220F8364E);
  v8 = xgboost::DMatrix::Create<xgboost::data::DenseAdapter>(&v12, 1, a5);
  std::shared_ptr<xgboost::DMatrix>::shared_ptr[abi:ne180100]<xgboost::DMatrix,void>(v7, v8);
  *a4 = v7;
  if (v11 < 0)
    operator delete(__p);
  return 0;
}

void sub_220E69B6C(_Unwind_Exception *__p, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8, std::runtime_error __pa, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v19;
  const char *v20;
  void *v21;
  char *v22;
  const char *v23;

  MEMORY[0x227667068](v16, 0x20C40A4A59CD2, a3, a4, a5, a6, a7);
  if (a2 == 2)
  {
    v19 = __cxa_begin_catch(__p);
    v20 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    XGBAPISetLastError(v20);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(__p);
    v21 = __cxa_begin_catch(__p);
    v22 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&a11, v22);
    std::runtime_error::runtime_error(&__pa, (const std::string *)&a11);
    __pa.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v23 = std::runtime_error::what(&__pa);
    XGBAPISetLastError(v23);
    std::runtime_error::~runtime_error(&__pa);
    if (a16 < 0)
      operator delete(a11);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E69B54);
}

uint64_t XGDMatrixFree(uint64_t a1)
{
  uint64_t v1;
  std::string *Entry;
  _QWORD *v3;
  _BYTE v5[40];

  if (a1)
  {
    v1 = std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1);
    MEMORY[0x227667068](v1, 0x20C40A4A59CD2);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v5);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v5);
  }
  return 0;
}

void sub_220E69D14(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E69D04);
}

uint64_t XGDMatrixSetFloatInfo(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *Entry;
  _QWORD *v9;
  _BYTE v11[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a2, a3, 1, a4);
  return 0;
}

void sub_220E69EA8(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E69E94);
}

uint64_t XGDMatrixSetUIntInfo(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *Entry;
  _QWORD *v9;
  _BYTE v11[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a2, a3, 3, a4);
  return 0;
}

void sub_220E6A040(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A02CLL);
}

uint64_t XGDMatrixSetDenseInfo(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  std::string *Entry;
  _QWORD *v11;
  std::string *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE v16[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v16);
  }
  if ((a5 - 5) <= 0xFFFFFFFB)
  {
    v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v16);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: type >= 1 && type <= 4", 36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v16);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a2, a3, a5, a4);
  return 0;
}

void sub_220E6A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::runtime_error a11, std::runtime_error a12)
{
  void *v12;
  const char *v13;
  void *v14;
  char *v15;
  const char *v16;

  if (a2 == 2)
  {
    v12 = __cxa_begin_catch(exception_object);
    v13 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
    XGBAPISetLastError(v13);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v14 = __cxa_begin_catch(exception_object);
    v15 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
    std::string::basic_string[abi:ne180100]<0>(&a10, v15);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a10);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v16 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v16);
    std::runtime_error::~runtime_error(&a12);
    if (SHIBYTE(a11.__imp_.__imp_) < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A1D8);
}

uint64_t XGDMatrixGetFloatInfo(_QWORD *a1, char *a2, uint64_t *a3, _QWORD *a4)
{
  std::string *Entry;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  v10 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
  xgboost::MetaInfo::GetInfo(v10, a2, a3, 1, a4);
  return 0;
}

void sub_220E6A3F0(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A3DCLL);
}

uint64_t XGDMatrixGetUIntInfo(_QWORD *a1, char *a2, uint64_t *a3, _QWORD *a4)
{
  std::string *Entry;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  v10 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
  xgboost::MetaInfo::GetInfo(v10, a2, a3, 3, a4);
  return 0;
}

void sub_220E6A58C(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A578);
}

uint64_t XGDMatrixNumRow(_QWORD *a1, _QWORD *a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _BYTE v8[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  v6 = (_QWORD *)(**(uint64_t (***)(_QWORD))*a1)(*a1);
  result = 0;
  *a2 = *v6;
  return result;
}

void sub_220E6A710(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A700);
}

uint64_t XGDMatrixNumCol(_QWORD *a1, _QWORD *a2)
{
  std::string *Entry;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  v6 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
  result = 0;
  *a2 = *(_QWORD *)(v6 + 8);
  return result;
}

void sub_220E6A894(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A884);
}

uint64_t XGBoosterCreate(__int128 **a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  char **v7;
  char *v8[3];

  memset(v8, 0, sizeof(v8));
  if (a2)
  {
    v4 = a2;
    do
    {
      std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](v8, *a1++);
      --v4;
    }
    while (v4);
  }
  *a3 = xgboost::Learner::Create((_QWORD **)v8);
  v7 = v8;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return 0;
}

void sub_220E6AA0C(_Unwind_Exception *a1, std::runtime_error a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2.__vftable;
  a9.__vftable = (std::runtime_error_vtbl *)&a10;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6A9F8);
}

void std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *a1;
    v23 = a1[1];
    if (v23 == *a1)
    {
      v11 = v18 + 16;
      *a1 = v18;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
      while (v23 != v22);
      v23 = *a1;
      v26 = (uint64_t)a1[1];
      v11 = v18 + 16;
      *a1 = v24;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
      while ((char *)v26 != v23)
      {
        v26 -= 16;
        std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v26);
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
}

uint64_t XGBoosterFree(uint64_t a1)
{
  std::string *Entry;
  _QWORD *v2;
  _BYTE v4[40];

  if (a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  else
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v4);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v4);
  }
  return 0;
}

void sub_220E6ACB4(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6ACA4);
}

uint64_t XGBoosterSetParam(uint64_t a1, char *__s, char *a3)
{
  std::string *Entry;
  _QWORD *v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v11);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 128))(a1, v11, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return 0;
}

void sub_220E6AE74(_Unwind_Exception *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, uint64_t a8, std::runtime_error __pa, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v18;
  const char *v19;
  void *v20;
  char *v21;
  const char *v22;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  if (a2 == 2)
  {
    v18 = __cxa_begin_catch(__p);
    v19 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
    XGBAPISetLastError(v19);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(__p);
    v20 = __cxa_begin_catch(__p);
    v21 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    std::string::basic_string[abi:ne180100]<0>(&a11, v21);
    std::runtime_error::runtime_error(&__pa, (const std::string *)&a11);
    __pa.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v22 = std::runtime_error::what(&__pa);
    XGBAPISetLastError(v22);
    std::runtime_error::~runtime_error(&__pa);
    if (a16 < 0)
      operator delete(a11);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6AE60);
}

uint64_t XGBoosterGetNumFeature(uint64_t a1, _QWORD *a2)
{
  std::string *Entry;
  _QWORD *v5;
  unsigned int v6;
  uint64_t result;
  _BYTE v8[40];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  result = 0;
  *a2 = v6;
  return result;
}

void sub_220E6B040(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6B030);
}

uint64_t XGBoosterUpdateOneIter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string *Entry;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v15[40];
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v15);
  }
  v8 = (std::__shared_weak_count *)a3[1];
  v16 = *a3;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, a2, &v16);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 0;
}

void sub_220E6B224(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6B210);
}

uint64_t XGBoosterEvalOneIter(uint64_t a1, uint64_t a2, __int128 **a3, char **a4, uint64_t a5, _QWORD *a6)
{
  std::string *Entry;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  __int128 v19;
  uint64_t v20;
  char **v21;
  _QWORD *v22;
  unint64_t i;
  char *v24[3];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v24);
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  memset(v24, 0, sizeof(v24));
  v21 = 0;
  v22 = 0;
  for (i = 0; a5; --a5)
  {
    std::vector<std::shared_ptr<xgboost::DMatrix>>::push_back[abi:ne180100](v24, *a3);
    v15 = v22;
    if ((unint64_t)v22 >= i)
    {
      v16 = (_QWORD *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)&v21, a4);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, *a4);
      v16 = v15 + 3;
    }
    v22 = v16;
    ++a4;
    ++a3;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, char **, char ***))(*(_QWORD *)a1 + 56))(&v19, a1, a2, v24, &v21);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  *(_OWORD *)v14 = v19;
  *(_QWORD *)(v14 + 16) = v20;
  if (*(char *)(v14 + 23) >= 0)
    v17 = (void *)v14;
  else
    v17 = *(void **)v14;
  *a6 = v17;
  *(_QWORD *)&v19 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v21 = v24;
  std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return 0;
}

void sub_220E6B4AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, std::runtime_error a5, uint64_t a6, std::string *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v21;
  const char *v22;
  void *v23;
  char *v24;
  const char *v25;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a14);
  if (a2 == 2)
  {
    v21 = __cxa_begin_catch(a1);
    v22 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    XGBAPISetLastError(v22);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v23 = __cxa_begin_catch(a1);
    v24 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
    std::string::basic_string[abi:ne180100]<0>(&a14, v24);
    std::runtime_error::runtime_error(&a12, (const std::string *)&a14);
    a12.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v25 = std::runtime_error::what(&a12);
    XGBAPISetLastError(v25);
    std::runtime_error::~runtime_error(&a12);
    if (a19 < 0)
      operator delete(a14);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6B490);
}

uint64_t XGBoosterPredict(_QWORD *a1, uint64_t *a2, unsigned int a3, xgboost *a4, int a5, uint64_t *a6, _QWORD *a7)
{
  std::string *Entry;
  _QWORD *v15;
  uint64_t v16;
  xgboost::Learner *v17;
  unint64_t IterationFromTreeLimit;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  _BYTE v29[40];
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v29);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v29);
  }
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  IterationFromTreeLimit = xgboost::GetIterationFromTreeLimit(a4, a1, v17);
  v19 = (uint64_t **)(v16 + 144);
  v20 = (std::__shared_weak_count *)a2[1];
  v30 = *a2;
  v31 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  BYTE2(v28) = (a3 & 0x10) != 0;
  BYTE1(v28) = (a3 & 8) != 0;
  LOBYTE(v28) = (a3 & 4) != 0;
  (*(void (**)(_QWORD *, uint64_t *, _QWORD, uint64_t, _QWORD, unint64_t, BOOL, _QWORD, int))(*a1 + 64))(a1, &v30, a3 & 1, v16 + 144, 0, IterationFromTreeLimit, a5 != 0, (a3 >> 1) & 1, v28);
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  result = 0;
  v27 = **v19;
  if ((*v19)[1] == v27)
    v27 = 0;
  *a7 = v27;
  *a6 = ((*v19)[1] - **v19) >> 2;
  return result;
}

void sub_220E6B76C(_Unwind_Exception *a1, std::string *a2, std::runtime_error a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a9);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a9, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&a9);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6B750);
}

unint64_t xgboost::GetIterationFromTreeLimit(xgboost *this, _QWORD *a2, xgboost::Learner *a3)
{
  unint64_t v3;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD **v12;
  char *v13;
  int **v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _DWORD **v24;
  char *v25;
  unsigned int v26;
  int v27;
  int v28;
  std::string *Entry;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _DWORD **v44;
  char *v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *__p[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int *v58;

  v3 = (unint64_t)this;
  if (!(_DWORD)this)
    return v3;
  (*(void (**)(_QWORD *))(*a2 + 32))(a2);
  v54[1] = (void *)0x300000000;
  v54[0] = &off_24E6BE1D0;
  v56 = 0;
  v57 = 0;
  v55 = &v56;
  v5 = (_QWORD *)operator new();
  v5[1] = 0x300000000;
  v6 = (unsigned int *)(v5 + 1);
  *v5 = &off_24E6BE1D0;
  v7 = v56;
  v5[2] = v55;
  v5[3] = v7;
  v8 = v57;
  v56 = 0;
  v57 = 0;
  v5[4] = v8;
  v55 = &v56;
  if (!v8)
    v7 = v5;
  v7[2] = v5 + 3;
  v58 = (unsigned int *)v5;
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  v54[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v55, v56);
  (*(void (**)(_QWORD *, unsigned int **))(a2[1] + 24))(a2 + 1, &v58);
  std::string::basic_string[abi:ne180100]<0>(v54, "learner");
  v10 = (_QWORD *)(*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v58 + 24))(v58, v54);
  std::string::basic_string[abi:ne180100]<0>(v52, "gradient_booster");
  v11 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v10 + 24))(*v10, v52);
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v12 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v11 + 24))(*v11, __p);
  v13 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value>(*v12);
  if (v51 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  v14 = (int **)(v13 + 16);
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  if (v13[39] < 0)
  {
    v17 = *((_QWORD *)v13 + 3);
    if (v17 != 4)
    {
      if (v17 != 6)
      {
        if (v17 != 8)
          goto LABEL_34;
        v16 = *(int **)*v14;
        goto LABEL_21;
      }
      v19 = *v14;
      goto LABEL_30;
    }
    v18 = **v14;
  }
  else
  {
    v15 = v13[39];
    if (v15 != 4)
    {
      if (v15 != 6)
      {
        if (v15 != 8)
          goto LABEL_34;
        v16 = *v14;
LABEL_21:
        if (v16 == (int *)0x7261656E696C6267)
          goto LABEL_41;
LABEL_34:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
        v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v54);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown booster:", 16);
        v33 = v13[39];
        if (v33 >= 0)
          v34 = (uint64_t)(v13 + 16);
        else
          v34 = *((_QWORD *)v13 + 2);
        if (v33 >= 0)
          v35 = v13[39];
        else
          v35 = *((_QWORD *)v13 + 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v54);
        goto LABEL_41;
      }
      v19 = (int *)(v13 + 16);
LABEL_30:
      v27 = *v19;
      v28 = *((unsigned __int16 *)v19 + 2);
      if (v27 != 1920229991 || v28 != 25957)
        goto LABEL_34;
      std::string::basic_string[abi:ne180100]<0>(v54, "learner");
      v41 = (_QWORD *)(*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v58 + 24))(v58, v54);
      std::string::basic_string[abi:ne180100]<0>(v52, "gradient_booster");
      v42 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v41 + 24))(*v41, v52);
      std::string::basic_string[abi:ne180100]<0>(__p, "gbtree_model_param");
      v43 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v42 + 24))(*v42, __p);
      std::string::basic_string[abi:ne180100]<0>(v48, "num_parallel_tree");
      v44 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v43 + 24))(*v43, v48);
      v45 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value>(*v44);
      v26 = std::stoi((const std::string *)(v45 + 16), 0, 10);
      goto LABEL_49;
    }
    v18 = *(_DWORD *)v14;
  }
  if (v18 != 1953653092)
    goto LABEL_34;
  std::string::basic_string[abi:ne180100]<0>(v54, "learner");
  v20 = (_QWORD *)(*(uint64_t (**)(unsigned int *, void **))(*(_QWORD *)v58 + 24))(v58, v54);
  std::string::basic_string[abi:ne180100]<0>(v52, "gradient_booster");
  v21 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v20 + 24))(*v20, v52);
  std::string::basic_string[abi:ne180100]<0>(__p, "gbtree");
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v21 + 24))(*v21, __p);
  std::string::basic_string[abi:ne180100]<0>(v48, "gbtree_model_param");
  v23 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v22 + 24))(*v22, v48);
  std::string::basic_string[abi:ne180100]<0>(v46, "num_parallel_tree");
  v24 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v23 + 24))(*v23, v46);
  v25 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value>(*v24);
  v26 = std::stoi((const std::string *)(v25 + 16), 0, 10);
  if (v47 < 0)
    operator delete(v46[0]);
LABEL_49:
  if (v49 < 0)
    operator delete(v48[0]);
  if (v51 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(v54[0]);
    if (v26)
      goto LABEL_42;
  }
  else if (v26)
  {
    goto LABEL_42;
  }
LABEL_41:
  v26 = 1;
LABEL_42:
  v36 = v58;
  v3 = v3 / v26;
  if (v58)
  {
    v37 = v58 + 2;
    do
    {
      v38 = __ldxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
    }
  }
  return v3;
}

void sub_220E6BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39)
{
  uint64_t v39;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;

  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  v41 = *(unsigned int **)(v39 - 72);
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_220E6BEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E6BE70);
}

uint64_t XGBoosterPredictFromDMatrix(_QWORD *a1, _QWORD *a2, char *__s, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  std::string *Entry;
  _QWORD *v13;
  std::string *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t (***v18)(_QWORD);
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t IterationFromTreeLimit;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int *v28;
  xgboost::Learner *v29;
  BOOL v31;
  int v32;
  uint64_t **v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (***v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int **v51;
  uint64_t v52;
  std::string *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  std::string *v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  int v69;
  std::string *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  std::string *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  uint64_t *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t (***v97)(_QWORD);
  std::__shared_weak_count *v98;
  void *v99[2];
  char v100;
  void *__p[2];
  char v102;
  uint64_t (***v103)(_QWORD);
  std::__shared_weak_count *v104;
  unsigned int *v105[2];
  int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Booster has not been initialized or has already been disposed.", 62);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (!a2)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"DMatrix has not been initialized or has already been disposed.", 62);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  v16 = strlen(__s);
  xgboost::Json::Load((uint64_t)__s, v16, 8, v105);
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  v18 = (uint64_t (***)(_QWORD))*a2;
  v19 = (std::__shared_weak_count *)a2[1];
  v103 = (uint64_t (***)(_QWORD))*a2;
  v104 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  v22 = v105[0];
  v96 = *(_QWORD *)xgboost::RequiredArg<xgboost::JsonInteger>(v105[0], (uint64_t)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "iteration_begin");
  v23 = *(_QWORD *)xgboost::RequiredArg<xgboost::JsonInteger>(v22, (uint64_t)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "iteration_end");
  v95 = a6;
  IterationFromTreeLimit = *(_QWORD *)xgboost::RequiredArg<xgboost::JsonInteger>(v22, (uint64_t)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  v25 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v22);
  v93 = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "ntree_limit");
  v26 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v25 + 16), (const void **)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  if (v25 + 24 != (char *)v26)
  {
    v27 = *(_DWORD **)(v26 + 56);
    if (v27[3] != 6)
    {
      if (*((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v27) + 2))
      {
        if (IterationFromTreeLimit)
        {
          v88 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          dmlc::LogMessageFatal::Entry::Init(v88, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
          v89 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Check failed: iteration_end == 0", 32);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        }
        if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v99, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
          xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v99, 785, 1);
          xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
          if (v100 < 0)
            operator delete(v99[0]);
        }
        v28 = (unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v26 + 56));
        IterationFromTreeLimit = xgboost::GetIterationFromTreeLimit((xgboost *)v28[4], a1, v29);
      }
    }
  }
  v31 = v96 == 3 || v96 == 5;
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  v94 = a4;
  v32 = *xgboost::RequiredArg<xgboost::JsonBoolean>(v22, (uint64_t)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  v33 = (uint64_t **)(v17 + 144);
  v34 = v96 & 0xFE;
  v97 = v18;
  v98 = v19;
  if (v19)
  {
    v35 = (unint64_t *)&v19->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  BYTE2(v92) = v34 == 4;
  BYTE1(v92) = v31;
  LOBYTE(v92) = v34 == 2;
  (*(void (**)(_QWORD *, uint64_t (****)(_QWORD), BOOL, uint64_t, uint64_t, uint64_t, BOOL, BOOL, int))(*a1 + 64))(a1, &v97, v96 == 1, v17 + 144, v23, IterationFromTreeLimit, v32 != 0, v96 == 6, v92);
  v37 = v98;
  if (v98)
  {
    v38 = (unint64_t *)&v98->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = **v33;
  if ((*v33)[1] == v40)
    v40 = 0;
  *v95 = v40;
  v41 = (*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  v42 = v103;
  if (*(_QWORD *)(**v103)(v103))
  {
    v44 = **v33;
    v43 = (*v33)[1];
    v45 = (unint64_t)((v43 - v44) >> 2) / *(_QWORD *)(**v42)(v42);
  }
  else
  {
    v45 = 0;
  }
  v46 = IterationFromTreeLimit - v23;
  if (IterationFromTreeLimit == v23)
    v46 = (*(int (**)(_QWORD *))(*a1 + 88))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "strict_shape");
  v47 = *xgboost::RequiredArg<xgboost::JsonBoolean>(v105[0], (uint64_t)__p);
  if (v102 < 0)
    operator delete(__p[0]);
  v48 = *(_QWORD *)(**v42)(v42);
  v49 = *(_QWORD *)((**v42)(v42) + 8);
  v50 = (*(uint64_t (**)(_QWORD *))(*a1 + 96))(a1);
  v51 = (int **)(v41 + 176);
  v52 = v50;
  v108 = v50;
  v109 = v45;
  if (v96 == 1 && v48)
  {
    if (v45 != v50)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v107);
      if (v107)
      {
        v53 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        dmlc::LogMessageFatal::Entry::Init(v53, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
        v54 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: ", 14);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"chunksize == groups", 19);
        v57 = *(char *)(v107 + 23);
        v58 = v57 >= 0 ? v107 : *(_QWORD *)v107;
        v59 = v57 >= 0 ? *(unsigned __int8 *)(v107 + 23) : *(_QWORD *)(v107 + 8);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
        v61 = v107;
        v107 = 0;
        if (v61)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v107, v61);
      }
    }
    v45 = v109;
LABEL_64:
    if (v47 || v45 != 1)
    {
      *v93 = 2;
      std::vector<unsigned long>::resize(v41 + 176, 2uLL);
      v62 = *(int **)(v41 + 176);
      *(_QWORD *)v62 = v48;
      v63 = v109;
      if (v109 >= v108)
        v63 = v108;
LABEL_69:
      *(_QWORD *)(*(_QWORD *)(v41 + 184) - 8) = v63;
    }
    else
    {
LABEL_66:
      *v93 = 1;
      std::vector<unsigned long>::resize(v41 + 176, 1uLL);
      v62 = *v51;
      *(_QWORD *)*v51 = v48;
    }
  }
  else
  {
    switch((char)v96)
    {
      case 0:
      case 1:
        goto LABEL_64;
      case 2:
      case 3:
        if (!v47 && v50 == 1)
        {
          *v93 = 2;
          std::vector<unsigned long>::resize(v41 + 176, 2uLL);
          v62 = *(int **)(v41 + 176);
          *(_QWORD *)v62 = v48;
          v63 = v49 + 1;
          goto LABEL_69;
        }
        *v93 = 3;
        std::vector<unsigned long>::resize(v41 + 176, 3uLL);
        v62 = *v51;
        *(_QWORD *)v62 = v48;
        *((_QWORD *)v62 + 1) = v52;
        v64 = v49 + 1;
        goto LABEL_78;
      case 4:
      case 5:
        if (v47 || v50 != 1)
        {
          *v93 = 4;
          std::vector<unsigned long>::resize(v41 + 176, 4uLL);
          v62 = *v51;
          *(_QWORD *)v62 = v48;
          *((_QWORD *)v62 + 1) = v52;
          *((_QWORD *)v62 + 2) = v49 + 1;
          *((_QWORD *)v62 + 3) = v49 + 1;
        }
        else
        {
          *v93 = 3;
          std::vector<unsigned long>::resize(v41 + 176, 3uLL);
          v62 = *v51;
          v64 = v49 + 1;
          *(_QWORD *)v62 = v48;
          *((_QWORD *)v62 + 1) = v49 + 1;
LABEL_78:
          *((_QWORD *)v62 + 2) = v64;
        }
        break;
      case 6:
        if (v47)
        {
          std::vector<unsigned long>::resize(v41 + 176, 4uLL);
          v62 = *(int **)(v41 + 176);
          *(_QWORD *)v62 = v48;
          *((_QWORD *)v62 + 1) = v46;
          v67 = v45 / (v46 * v52);
          if (v67 <= 1)
            v67 = 1;
          *((_QWORD *)v62 + 2) = v52;
          *((_QWORD *)v62 + 3) = v67;
          *v93 = (uint64_t)(*(_QWORD *)(v41 + 184) - (_QWORD)v62) >> 3;
        }
        else
        {
          if (v45 == 1)
            goto LABEL_66;
          *v93 = 2;
          std::vector<unsigned long>::resize(v41 + 176, 2uLL);
          v62 = *(int **)(v41 + 176);
          *(_QWORD *)v62 = v48;
          *(_QWORD *)(*(_QWORD *)(v41 + 184) - 8) = v45;
        }
        break;
      default:
        v65 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v107);
        dmlc::LogMessageFatal::Entry::Init(v65, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
        v66 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v107);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown prediction type:", 24);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v107);
        v62 = *v51;
        break;
    }
  }
  v68 = 1;
  while (v62 != *(int **)(v41 + 184))
  {
    v69 = *v62;
    v62 += 2;
    v68 *= v69;
  }
  v106 = v68;
  v105[1] = (unsigned int *)(v109 * v48);
  if (v109 * v48 != v68)
  {
    dmlc::LogCheckFormat<int,unsigned long>(&v107);
    if (v107)
    {
      v70 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
      v71 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: ", 14);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"std::accumulate(shape.cbegin(), shape.cend(), 1, std::multiplies<>{}) == chunksize * rows", 89);
      v74 = *(char *)(v107 + 23);
      v75 = v74 >= 0 ? v107 : *(_QWORD *)v107;
      v76 = v74 >= 0 ? *(unsigned __int8 *)(v107 + 23) : *(_QWORD *)(v107 + 8);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
      v78 = v107;
      v107 = 0;
      if (v78)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v107, v78);
    }
  }
  if (*(_QWORD *)(v41 + 184) == *(_QWORD *)(v41 + 176))
    v79 = 0;
  else
    v79 = *(_QWORD *)(v41 + 176);
  *v94 = v79;
  v80 = v104;
  if (v104)
  {
    v81 = (unint64_t *)&v104->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v105[0];
  if (v105[0])
  {
    v84 = v105[0] + 2;
    do
    {
      v85 = __ldxr(v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, v84));
    if (!v86)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
    }
  }
  return 0;
}

void sub_220E6C800(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, std::runtime_error a9, int a10, __int16 a11, char a12, char a13, std::string *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::runtime_error a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  const char *v34;
  void *v35;
  char *v36;
  const char *v37;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v26 - 152);
  v29 = *(unsigned int **)(v26 - 136);
  if (v29)
  {
    v30 = v29 + 2;
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    }
  }
  if (a2 == 2)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    XGBAPISetLastError(v34);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v35 = __cxa_begin_catch(a1);
    v36 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
    std::string::basic_string[abi:ne180100]<0>(&a21, v36);
    std::runtime_error::runtime_error(&a19, (const std::string *)&a21);
    a19.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v37 = std::runtime_error::what(&a19);
    XGBAPISetLastError(v37);
    std::runtime_error::~runtime_error(&a19);
    if (a26 < 0)
      operator delete(a21);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6C784);
}

char *xgboost::RequiredArg<xgboost::JsonInteger>(_DWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t i;
  char v17;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a1);
  v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)a2);
  v5 = v4;
  if (v3 + 24 == (char *)v4 || (v6 = *(_DWORD **)(v4 + 56), v6[3] == 6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = (const void *)a2;
    else
      v11 = *(const void **)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    for (i = 0; i != 27; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
    v6 = *(_DWORD **)(v5 + 56);
  }
  return (char *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v6) + 16;
}

void sub_220E6CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

char *xgboost::RequiredArg<xgboost::JsonBoolean>(_DWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t i;
  char v17;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a1);
  v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)a2);
  v5 = v4;
  if (v3 + 24 == (char *)v4 || (v6 = *(_DWORD **)(v4 + 56), v6[3] == 6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = (const void *)a2;
    else
      v11 = *(const void **)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    for (i = 0; i != 27; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
    v6 = *(_DWORD **)(v5 + 56);
  }
  return (char *)xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(v6) + 16;
}

void sub_220E6CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t XGBoosterPredictFromCUDAArray(uint64_t a1)
{
  std::string *Entry;
  _QWORD *v2;
  std::string *v3;
  _QWORD *v4;
  _BYTE v6[47];
  char v7;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v6);
  }
  v3 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(v3, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../common/common.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  return 0;
}

void sub_220E6CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  if (a2 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&__p);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6CD60);
}

uint64_t XGBoosterPredictFromCUDAColumnar(uint64_t a1)
{
  std::string *Entry;
  _QWORD *v2;
  std::string *v3;
  _QWORD *v4;
  _BYTE v6[47];
  char v7;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v6);
  }
  v3 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(v3, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../common/common.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  return 0;
}

void sub_220E6CF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  if (a2 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, v20);
    std::runtime_error::runtime_error(&a15, (const std::string *)&__p);
    a15.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a15);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a15);
    if (a14 < 0)
      operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6CF10);
}

uint64_t XGBoosterLoadModel(uint64_t a1, char *__s)
{
  std::string *Entry;
  _QWORD *v5;
  _BOOL4 v6;
  std::string *v7;
  std::string::size_type size;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v14;
  std::string *v16;
  std::string::size_type v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v22[2];
  void *v23[2];
  char v24;
  void *__p[2];
  char v26;
  std::string v27;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v27);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  xgboost::common::FileExtension((uint64_t)__p, 1, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = v27.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)v27.__r_.__value_.__l.__data_ == 1852797802;
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = SHIBYTE(v27.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v27.__r_.__value_.__l.__data_) == 1852797802;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_13:
      XGBoosterLoadModel::$_0::operator()(&v27, __s);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v27;
      else
        v7 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      else
        size = v27.__r_.__value_.__l.__size_;
      xgboost::Json::Load((uint64_t)v7, size, 8, v22);
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a1 + 16))(a1, v22);
      v9 = v22[0];
      if (v22[0])
      {
        v10 = v22[0] + 2;
        do
        {
          v11 = __ldxr(v10);
          v12 = --v11 == 0;
        }
        while (__stlxr(v11, v10));
        goto LABEL_53;
      }
      goto LABEL_56;
    }
  }
  else if (v6)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, __s);
  xgboost::common::FileExtension((uint64_t)v23, 1, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = v27.__r_.__value_.__l.__size_ == 3
       && *(_WORD *)v27.__r_.__value_.__l.__data_ == 25205
       && *(_BYTE *)(v27.__r_.__value_.__r.__words[0] + 2) == 106;
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = SHIBYTE(v27.__r_.__value_.__r.__words[2]) == 3
       && LOWORD(v27.__r_.__value_.__l.__data_) == 25205
       && v27.__r_.__value_.__s.__data_[2] == 106;
  }
  if (v24 < 0)
  {
    operator delete(v23[0]);
    if (v14)
    {
LABEL_44:
      XGBoosterLoadModel::$_0::operator()(&v27, __s);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v27;
      else
        v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      else
        v17 = v27.__r_.__value_.__l.__size_;
      xgboost::Json::Load((uint64_t)v16, v17, 4, v22);
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a1 + 16))(a1, v22);
      v9 = v22[0];
      if (v22[0])
      {
        v18 = v22[0] + 2;
        do
        {
          v19 = __ldxr(v18);
          v12 = --v19 == 0;
        }
        while (__stlxr(v19, v18));
LABEL_53:
        if (v12)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
LABEL_56:
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else if (v14)
  {
    goto LABEL_44;
  }
  v20 = dmlc::Stream::Create((dmlc::Stream *)__s, "r", 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  return 0;
}

void sub_220E6D30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v27;
  const char *v28;
  void *v29;
  char *v30;
  const char *v31;

  v24 = v22;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(exception_object);
    v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
    XGBAPISetLastError(v28);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v29 = __cxa_begin_catch(exception_object);
    v30 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v23 - 56), v30);
    std::runtime_error::runtime_error(&a10, (const std::string *)(v23 - 56));
    a10.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v31 = std::runtime_error::what(&a10);
    XGBAPISetLastError(v31);
    std::runtime_error::~runtime_error(&a10);
    if (*(char *)(v23 - 33) < 0)
      operator delete(*(void **)(v23 - 56));
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6D2F8);
}

void XGBoosterLoadModel::$_0::operator()(std::string *a1, char *a2)
{
  unint64_t size;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::string::size_type v23;
  BOOL v24;
  char *v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *__p[2];
  char v38;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  xgboost::common::LoadSequentialFile((char *)__p, 0, a1);
  if (v38 < 0)
    operator delete(__p[0]);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v35 = size;
  if (size < 3)
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v36);
    if (v36)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"str.size() >= 3", 15);
      v8 = *(char *)(v36 + 23);
      v9 = v8 >= 0 ? v36 : *(_QWORD *)v36;
      v10 = v8 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v12 = v36;
      v36 = 0;
      if (v12)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v12);
    }
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = (char *)a1;
  else
    v13 = (char *)a1->__r_.__value_.__r.__words[0];
  LOBYTE(v35) = 123;
  if (*v13 != 123)
  {
    dmlc::LogCheckFormat<char,char>(v13, (char *)&v35, &v36);
    if (v36)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"str[0] == '{'", 13);
      v18 = *(char *)(v36 + 23);
      v19 = v18 >= 0 ? v36 : *(_QWORD *)v36;
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v22 = v36;
      v36 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v22);
    }
  }
  v23 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v24 = (v23 & 0x80u) != 0;
  if ((v23 & 0x80u) != 0)
    v23 = a1->__r_.__value_.__l.__size_;
  if (v24)
    v25 = (char *)a1->__r_.__value_.__r.__words[0];
  else
    v25 = (char *)a1;
  LOBYTE(v35) = 125;
  if (v25[v23 - 2] != 125)
  {
    dmlc::LogCheckFormat<char,char>(&v25[v23 - 2], (char *)&v35, &v36);
    if (v36)
    {
      v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
      v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v35);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"str[str.size() - 2] == '}'", 26);
      v30 = *(char *)(v36 + 23);
      if (v30 >= 0)
        v31 = v36;
      else
        v31 = *(_QWORD *)v36;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(v36 + 23);
      else
        v32 = *(_QWORD *)(v36 + 8);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v35);
      v34 = v36;
      v36 = 0;
      if (v34)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v34);
    }
  }
}

void sub_220E6D7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t XGBoosterSaveModel(uint64_t a1, dmlc::Stream *this)
{
  std::string *Entry;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL4 v10;
  _QWORD *v12;
  unsigned int *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v28;
  void *v29[2];
  char v30;
  void *__p[2];
  char v32;
  unsigned int *v33;
  std::string v34;
  _QWORD *v35;
  uint64_t v36;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v34);
  }
  v6 = dmlc::Stream::Create(this, "w", 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  xgboost::common::FileExtension((uint64_t)__p, 1, &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = v34.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)v34.__r_.__value_.__l.__data_ == 1852797802;
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = SHIBYTE(v34.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v34.__r_.__value_.__l.__data_) == 1852797802;
  }
  if (v32 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_13;
  }
  else if (v7)
  {
LABEL_13:
    v8 = 16;
LABEL_36:
    v34.__r_.__value_.__l.__size_ = 0x300000000;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24E6BE1D0;
    v35 = 0;
    v36 = 0;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35;
    v12 = (_QWORD *)operator new();
    v12[1] = 0x300000000;
    v13 = (unsigned int *)(v12 + 1);
    *v12 = &off_24E6BE1D0;
    v14 = v35;
    v12[2] = *((_QWORD *)&v34.__r_.__value_.__l + 2);
    v12[3] = v14;
    v15 = v36;
    v35 = 0;
    v36 = 0;
    v12[4] = v15;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)&v35;
    if (!v15)
      v14 = v12;
    v14[2] = v12 + 3;
    v28 = (unsigned int *)v12;
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24E6BE1D0;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v34.__r_.__value_.__r.__words[2], v35);
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a1 + 24))(a1, &v28);
    memset(&v34, 0, sizeof(v34));
    v17 = v28;
    v33 = v28;
    if (v28)
    {
      v18 = v28 + 2;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    xgboost::Json::Dump(&v33, &v34, v8);
    if (v17)
    {
      v20 = v17 + 2;
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)v6 + 8))(v6, v34.__r_.__value_.__r.__words[0], v34.__r_.__value_.__l.__size_ - v34.__r_.__value_.__r.__words[0]);
    if (v34.__r_.__value_.__r.__words[0])
    {
      v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    v23 = v28;
    if (v28)
    {
      v24 = v28 + 2;
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, (char *)this);
  xgboost::common::FileExtension((uint64_t)v29, 1, &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = v34.__r_.__value_.__l.__size_ == 3
       && *(_WORD *)v34.__r_.__value_.__l.__data_ == 25205
       && *(_BYTE *)(v34.__r_.__value_.__r.__words[0] + 2) == 106;
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = SHIBYTE(v34.__r_.__value_.__r.__words[2]) == 3
       && LOWORD(v34.__r_.__value_.__l.__data_) == 25205
       && v34.__r_.__value_.__s.__data_[2] == 106;
  }
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (v10)
      goto LABEL_35;
  }
  else if (v10)
  {
LABEL_35:
    v8 = 4;
    goto LABEL_36;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, v6);
  if (v6)
LABEL_57:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return 0;
}

void sub_220E6DBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::string *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v31;
  const char *v32;
  void *v33;
  char *v34;
  const char *v35;

  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  if (a2 == 2)
  {
    v31 = __cxa_begin_catch(exception_object);
    v32 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v31 + 16))(v31);
    XGBAPISetLastError(v32);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v33 = __cxa_begin_catch(exception_object);
    v34 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    std::string::basic_string[abi:ne180100]<0>(&a23, v34);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a23);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v35 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v35);
    std::runtime_error::~runtime_error(&a9);
    if (a28 < 0)
      operator delete(a23);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6DBA4);
}

uint64_t XGBoosterLoadModelFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD v9[4];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v9);
  }
  v9[0] = &unk_24E6B8500;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v9);
  return 0;
}

void sub_220E6DE74(_Unwind_Exception *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (a2 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6DE60);
}

uint64_t XGBoosterSaveModelToBuffer(uint64_t a1, char *__s, _QWORD *a3, uint64_t *a4)
{
  std::string *Entry;
  _QWORD *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *p_p;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t i;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  std::string *v30;
  std::string::size_type v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  int data;
  char v38;
  std::string *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string *v43;
  std::string::size_type size;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v53;
  _QWORD *v54;
  unsigned int *v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char v73;
  std::string v74;
  unsigned int *v75;
  unsigned int *v76;
  void *__p;
  uint64_t v78;
  _QWORD **v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned int *v82;

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  v10 = strlen(__s);
  xgboost::Json::Load((uint64_t)__s, v10, 8, &v75);
  std::string::basic_string[abi:ne180100]<0>(&__p, "format");
  v11 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v75);
  v12 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v11 + 16), (const void **)&__p);
  v13 = v12;
  if (v11 + 24 == (char *)v12 || (v14 = *(_DWORD **)(v12 + 56), v14[3] == 6))
  {
    v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v82);
    dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api_utils.h");
    v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v82);
    if (SHIBYTE(v79) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (SHIBYTE(v79) >= 0)
      v19 = HIBYTE(v79);
    else
      v19 = v78;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v19);
    for (i = 0; i != 26; ++i)
      std::ostream::put();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v82);
    v14 = *(_DWORD **)(v13 + 56);
  }
  v23 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(v14);
  if (v23[39] < 0)
    std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)v23 + 2), *((_QWORD *)v23 + 3));
  else
    v74 = *(std::string *)(v23 + 16);
  if (SHIBYTE(v79) < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v78 = 0x300000000;
  __p = &off_24E6BE1D0;
  v80 = 0;
  v81 = 0;
  v79 = &v80;
  v24 = (_QWORD *)operator new();
  v25 = v24;
  v24[1] = 0x300000000;
  v26 = (unsigned int *)(v24 + 1);
  *v24 = &off_24E6BE1D0;
  v27 = v80;
  v24[2] = v79;
  v24[3] = v27;
  v28 = v81;
  v80 = 0;
  v81 = 0;
  v24[4] = v28;
  v79 = &v80;
  if (!v28)
    v27 = v24;
  v27[2] = v24 + 3;
  do
    v29 = __ldxr(v26);
  while (__stxr(v29 + 1, v26));
  __p = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v79, v80);
  if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v74.__r_.__value_.__l.__size_ != 3)
    {
      if (v74.__r_.__value_.__l.__size_ != 4)
      {
        if (v74.__r_.__value_.__l.__size_ == 10)
        {
          v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
          goto LABEL_32;
        }
LABEL_53:
        v40 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v40, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
        v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v74;
        else
          v43 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        else
          size = v74.__r_.__value_.__l.__size_;
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, size);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
        goto LABEL_60;
      }
      data = *(_DWORD *)v74.__r_.__value_.__l.__data_;
      goto LABEL_47;
    }
    if (*(_WORD *)v74.__r_.__value_.__l.__data_ != 25205 || *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + 2) != 106)
      goto LABEL_53;
LABEL_71:
    v72 = a4;
    v38 = 4;
    goto LABEL_72;
  }
  if (HIBYTE(v74.__r_.__value_.__r.__words[2]) == 3)
  {
    if (LOWORD(v74.__r_.__value_.__l.__data_) != 25205 || v74.__r_.__value_.__s.__data_[2] != 106)
      goto LABEL_53;
    goto LABEL_71;
  }
  if (HIBYTE(v74.__r_.__value_.__r.__words[2]) == 4)
  {
    data = (int)v74.__r_.__value_.__l.__data_;
LABEL_47:
    if (data != 1852797802)
      goto LABEL_53;
    v72 = a4;
    v38 = 16;
LABEL_72:
    v73 = v38;
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    v78 = 0x300000000;
    __p = &off_24E6BE1D0;
    v80 = 0;
    v81 = 0;
    v79 = &v80;
    v54 = (_QWORD *)operator new();
    v54[1] = 0x300000000;
    v55 = (unsigned int *)(v54 + 1);
    *v54 = &off_24E6BE1D0;
    v56 = v80;
    v54[2] = v79;
    v54[3] = v56;
    v57 = v81;
    v80 = 0;
    v81 = 0;
    v54[4] = v57;
    v79 = &v80;
    if (!v57)
      v56 = v54;
    v56[2] = v54 + 3;
    v82 = (unsigned int *)v54;
    do
      v58 = __ldxr(v55);
    while (__stxr(v58 + 1, v55));
    __p = &off_24E6BE1D0;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v79, v80);
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)a1 + 24))(a1, &v82);
    v59 = v82;
    v76 = v82;
    if (v82)
    {
      v60 = v82 + 2;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    xgboost::Json::Dump(&v76, (_QWORD *)(v53 + 24), v73);
    if (v59)
    {
      v62 = v59 + 2;
      do
      {
        v63 = __ldxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
      }
    }
    if (*(_QWORD *)(v53 + 32) == *(_QWORD *)(v53 + 24))
      v65 = 0;
    else
      v65 = *(_QWORD *)(v53 + 24);
    *v72 = v65;
    *a3 = *(_QWORD *)(v53 + 32) - *(_QWORD *)(v53 + 24);
    v66 = v82;
    if (v82)
    {
      v67 = v82 + 2;
      do
      {
        v68 = __ldxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
      }
    }
    goto LABEL_60;
  }
  if (HIBYTE(v74.__r_.__value_.__r.__words[2]) != 10)
    goto LABEL_53;
  v30 = &v74;
LABEL_32:
  v31 = v30->__r_.__value_.__r.__words[0];
  v32 = LOWORD(v30->__r_.__value_.__r.__words[1]);
  if (v31 != 0x7461636572706564 || v32 != 25701)
    goto LABEL_53;
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v35 = v34;
  if (*(char *)(v34 + 23) < 0)
  {
    **(_BYTE **)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v34 = 0;
    *(_BYTE *)(v34 + 23) = 0;
  }
  __p = &unk_24E6B8398;
  v78 = v34;
  v79 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
  if (*(char *)(v35 + 23) < 0)
  {
    if (*(_QWORD *)(v35 + 8))
      v70 = *(_QWORD *)v35;
    else
      v70 = 0;
  }
  else if (*(_BYTE *)(v35 + 23))
  {
    v70 = v35;
  }
  else
  {
    v70 = 0;
  }
  *a4 = v70;
  v71 = *(unsigned __int8 *)(v35 + 23);
  if ((v71 & 0x80u) != 0)
    v71 = *(_QWORD *)(v35 + 8);
  *a3 = v71;
  do
  {
LABEL_60:
    v46 = __ldxr(v26);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v26));
  if (!v47)
  {
    __dmb(9u);
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v48 = v75;
  if (v75)
  {
    v49 = v75 + 2;
    do
    {
      v50 = __ldxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
    }
  }
  return 0;
}

void sub_220E6E5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error __p, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::string *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  unsigned int *v23;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  const char *v33;
  void *v34;
  char *v35;
  const char *v36;

  do
  {
    v26 = __ldxr(v23);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v23));
  if (!v27)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (a15 < 0)
    operator delete(__p.__vftable);
  v28 = a17;
  if (a17)
  {
    v29 = (unsigned int *)(a17 + 8);
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      __dmb(9u);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(exception_object);
    v33 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
    XGBAPISetLastError(v33);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v34 = __cxa_begin_catch(exception_object);
    v35 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
    std::string::basic_string[abi:ne180100]<0>(&a19, v35);
    std::runtime_error::runtime_error(&__p, (const std::string *)&a19);
    __p.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v36 = std::runtime_error::what(&__p);
    XGBAPISetLastError(v36);
    std::runtime_error::~runtime_error(&__p);
    if (SHIBYTE(a21) < 0)
      operator delete(a19);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6E3C4);
}

uint64_t XGBoosterSerializeToBuffer(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  std::string *Entry;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[3];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v12);
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 224))(a1);
  std::string::resize((std::string *)v8, 0, 0);
  v12[0] = &unk_24E6B8398;
  v12[1] = v8;
  v12[2] = 0;
  (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  (*(void (**)(_QWORD *, _QWORD *))(a1[2] + 24))(a1 + 2, v12);
  if (*(char *)(v8 + 23) < 0)
  {
    if (*(_QWORD *)(v8 + 8))
      v9 = *(_QWORD *)v8;
    else
      v9 = 0;
  }
  else if (*(_BYTE *)(v8 + 23))
  {
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  result = 0;
  *a3 = v9;
  v11 = *(unsigned __int8 *)(v8 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v8 + 8);
  *a2 = v11;
  return result;
}

void sub_220E6E980(_Unwind_Exception *a1, std::runtime_error a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15;
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  v15 = (int)a2.__vftable;
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (v15 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (v15 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6E96CLL);
}

uint64_t XGBoosterUnserializeFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD v9[4];

  if (!a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/c_api.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DMatrix/Booster has not been initialized or has already been disposed.", 70);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v9);
  }
  v9[0] = &unk_24E6B8500;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v9);
  return 0;
}

void sub_220E6EB20(_Unwind_Exception *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v17;
  const char *v18;
  void *v19;
  char *v20;
  const char *v21;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  if (a2 == 2)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
    XGBAPISetLastError(v18);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v19 = __cxa_begin_catch(a1);
    v20 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    std::string::basic_string[abi:ne180100]<0>(&a10, v20);
    std::runtime_error::runtime_error(&a9, (const std::string *)&a10);
    a9.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v21 = std::runtime_error::what(&a9);
    XGBAPISetLastError(v21);
    std::runtime_error::~runtime_error(&a9);
    if (a15 < 0)
      operator delete(a10);
  }
  __cxa_end_catch();
  JUMPOUT(0x220E6EB0CLL);
}

uint64_t xgboost::data::DMatrixProxy::Info(xgboost::data::DMatrixProxy *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

void xgboost::DMatrix::SetInfo(uint64_t a1, char *a2, void *a3, int a4, uint64_t a5)
{
  int v10;
  uint64_t *v11;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v11 = (uint64_t *)(**(uint64_t (***)(uint64_t))a1)(a1);
  xgboost::MetaInfo::SetInfo(v11, v10, a2, a3, a4, a5);
}

unsigned int *xgboost::DMatrix::SetInfo(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = (uint64_t *)(**(uint64_t (***)(uint64_t))a1)(a1);
  v8 = strlen(a2);
  v9 = *(_BYTE *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  return xgboost::MetaInfo::SetInfo(v7, v6, a2, v8, v10, v11);
}

uint64_t xgboost::data::DMatrixProxy::Ctx(xgboost::data::DMatrixProxy *this)
{
  return (uint64_t)this + 248;
}

uint64_t xgboost::data::DMatrixProxy::SingleColBlock(xgboost::data::DMatrixProxy *this)
{
  return 1;
}

void xgboost::data::DMatrixProxy::~DMatrixProxy(xgboost::data::DMatrixProxy *this)
{
  void (**v2)(char *);
  void (*v3)(char *);

  *(_QWORD *)this = &off_24E6B81E0;
  v2 = (void (**)(char *))*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = *v2;
    if (v3)
      v3((char *)this + 224);
    *((_QWORD *)this + 27) = 0;
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::DMatrixProxy *)((char *)this + 8));
  xgboost::DMatrix::~DMatrix(this);
}

{
  void (**v2)(char *);
  void (*v3)(char *);

  *(_QWORD *)this = &off_24E6B81E0;
  v2 = (void (**)(char *))*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = *v2;
    if (v3)
      v3((char *)this + 224);
    *((_QWORD *)this + 27) = 0;
  }
  xgboost::MetaInfo::~MetaInfo((xgboost::data::DMatrixProxy *)((char *)this + 8));
  xgboost::DMatrix::~DMatrix(this);
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::DMatrixProxy::Slice()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for Proxy DMatrix.", 51);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220E6EE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::data::DMatrixProxy::GetRowBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E6EED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::DMatrixProxy::GetColumnBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E6EF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::DMatrixProxy::GetSortedColumnBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E6EFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::DMatrixProxy::GetEllpackBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v3;
  double result;
  double v5[3];
  char v6;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
  xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(v5, 0);
  result = v5[0];
  *a1 = *(_OWORD *)v5;
  return result;
}

void sub_220E6F068(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::DMatrixProxy::GetGradientIndex@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v3;
  double result;
  double v5[3];
  char v6;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/c_api/../data/proxy_dmatrix.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(v5, 0);
  result = v5[0];
  *a1 = *(_OWORD *)v5;
  return result;
}

void sub_220E6F0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::DMatrixProxy::EllpackExists(xgboost::data::DMatrixProxy *this)
{
  return 1;
}

uint64_t xgboost::data::DMatrixProxy::SparsePageExists(xgboost::data::DMatrixProxy *this)
{
  return 0;
}

xgboost::MetaInfo *xgboost::MetaInfo::MetaInfo(xgboost::MetaInfo *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 3, 0, 0.0);
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 9, 0, 0.0);
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 10, 0, 0.0);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 13, 0, 0.0);
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 14, 0, 0.0);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  xgboost::HostDeviceVector<xgboost::FeatureType>::HostDeviceVector((_QWORD *)this + 21, 0, 0);
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 22, 0, 0.0);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  return this;
}

void sub_220E6F22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v17;
  uint64_t *v18;
  void *v20;

  v18 = v15;
  xgboost::HostDeviceVector<xgboost::FeatureType>::~HostDeviceVector(v18);
  a10 = v17 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v16);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v14);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v13);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v12);
  v20 = *(void **)(v11 + 48);
  if (v20)
  {
    *(_QWORD *)(v11 + 56) = v20;
    operator delete(v20);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v10);
  _Unwind_Resume(a1);
}

void sub_220E6F2B8()
{
  JUMPOUT(0x220E6F298);
}

void xgboost::MetaInfo::~MetaInfo(xgboost::MetaInfo *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 22);
  xgboost::HostDeviceVector<xgboost::FeatureType>::~HostDeviceVector((uint64_t *)this + 21);
  v4 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 14);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 13);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 10);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 9);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 3);
}

_QWORD *xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(a1, a2);
  return a1;
}

void sub_220E6F388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6B8570;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E6F464(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::EllpackPage> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::EllpackPage>,xgboost::BatchIteratorImpl<xgboost::EllpackPage>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::EllpackPage>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(a1, a2);
  return a1;
}

void sub_220E6F52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::reset[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::shared_ptr[abi:ne180100]<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6B85E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E6F608(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix> *,std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>::__shared_ptr_default_delete<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>,xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>,std::allocator<xgboost::BatchIteratorImpl<xgboost::GHistIndexMatrix>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void xgboost::data::CSCAdapter::~CSCAdapter(xgboost::data::CSCAdapter *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSCAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::CSCAdapterBatch>::Next(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    *(_DWORD *)(a1 + 8) = 1;
  return v1 == 0;
}

uint64_t xgboost::data::CSCAdapter::Value(xgboost::data::CSCAdapter *this)
{
  return (uint64_t)this + 16;
}

void xgboost::data::DenseAdapter::~DenseAdapter(xgboost::data::DenseAdapter *this)
{
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::detail::SingleBatchDataIter<xgboost::data::DenseAdapterBatch>::BeforeFirst(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

BOOL xgboost::data::detail::SingleBatchDataIter<xgboost::data::DenseAdapterBatch>::Next(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    *(_DWORD *)(a1 + 8) = 1;
  return v1 == 0;
}

uint64_t xgboost::data::DenseAdapter::Value(xgboost::data::DenseAdapter *this)
{
  return (uint64_t)this + 16;
}

void *xgboost::Cast<xgboost::JsonString const,xgboost::Value>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (!a1[3])
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v4 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v19, " to ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v15[0] = off_24E6BE2B8;
  memset(&v15[1], 0, 32);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v9 = v17;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22 = v10->__r_.__value_.__r.__words[2];
  v21 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v12 = &v21;
  else
    v12 = (__int128 *)v21;
  if (v22 >= 0)
    v13 = HIBYTE(v22);
  else
    v13 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v12, v13);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220E6F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonBoolean const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;
  char v24;

  if (a1[3] == 5)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
  v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v20, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x500000000;
  v15[0] = &off_24E6BE468;
  v16 = 0;
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v10 = v18;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23 = v11->__r_.__value_.__r.__words[2];
  v22 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v13 = &v22;
  else
    v13 = (__int128 *)v22;
  if (v23 >= 0)
    v14 = HIBYTE(v23);
  else
    v14 = *((_QWORD *)&v22 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
}

void sub_220E6FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<int,unsigned long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E6FD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t rabit::utils::MemoryFixSizeBuffer::Read(rabit::utils::MemoryFixSizeBuffer *this, void *__dst, size_t a3)
{
  uint64_t v4;
  size_t v5;

  v4 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) - v4 >= a3)
    v5 = a3;
  else
    v5 = *((_QWORD *)this + 2) - v4;
  if (v5)
  {
    memcpy(__dst, (const void *)(*((_QWORD *)this + 1) + v4), v5);
    v4 = *((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 3) = v4 + v5;
  return v5;
}

_QWORD *rabit::utils::MemoryFixSizeBuffer::Write(_QWORD *this, const void *a2, size_t a3)
{
  uint64_t v5;

  if (a3)
  {
    v5 = (uint64_t)this;
    rabit::utils::Assert((rabit::utils *)(this[3] + a3 <= this[2]), "write position exceed fixed buffer size", (const char *)a3);
    this = memcpy((void *)(*(_QWORD *)(v5 + 8) + *(_QWORD *)(v5 + 24)), a2, a3);
    *(_QWORD *)(v5 + 24) += a3;
  }
  return this;
}

void rabit::utils::MemoryFixSizeBuffer::~MemoryFixSizeBuffer(rabit::utils::MemoryFixSizeBuffer *this)
{
  JUMPOUT(0x227667068);
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Seek(uint64_t this, uint64_t a2)
{
  if (a2 == -1)
    a2 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Tell(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((_QWORD *)this + 3);
}

BOOL rabit::utils::MemoryFixSizeBuffer::AtEnd(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((_QWORD *)this + 3) == *((_QWORD *)this + 2);
}

void rabit::utils::Assert(rabit::utils *this, const char *a2, const char *a3, ...)
{
  void *v4;
  std::string *Entry;
  _QWORD *v6;
  char v7;
  va_list v8;
  va_list va;

  va_start(va, a3);
  if ((this & 1) == 0)
  {
    v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    va_copy(v8, va);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 4096);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    operator delete(v4);
  }
}

void sub_220E6FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  void *v12;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

size_t rabit::utils::MemoryBufferStream::Read(rabit::utils::MemoryBufferStream *this, void *a2, const char *a3)
{
  size_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t v9;

  v3 = (size_t)a3;
  v6 = *((_QWORD *)this + 1);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  rabit::utils::Assert((rabit::utils *)(*((_QWORD *)this + 2) <= v7), "read can not have position excceed buffer length", a3);
  v8 = (uint64_t **)*((_QWORD *)this + 1);
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    v9 = *((_QWORD *)this + 2);
    if ((unint64_t)*((unsigned __int8 *)v8 + 23) - v9 < v3)
      v3 = *((unsigned __int8 *)v8 + 23) - v9;
    if (!v3)
      goto LABEL_14;
LABEL_13:
    memcpy(a2, (char *)v8 + v9, v3);
    v9 = *((_QWORD *)this + 2);
    goto LABEL_14;
  }
  v9 = *((_QWORD *)this + 2);
  if ((unint64_t)v8[1] - v9 < v3)
    v3 = (size_t)v8[1] - v9;
  if (v3)
  {
    v8 = (uint64_t **)*v8;
    goto LABEL_13;
  }
LABEL_14:
  *((_QWORD *)this + 2) = v3 + v9;
  return v3;
}

char *rabit::utils::MemoryBufferStream::Write(char *this, const void *__src, size_t __n)
{
  _QWORD *v5;
  std::string *v6;
  char *v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;

  if (__n)
  {
    v5 = this;
    v7 = this + 8;
    v6 = (std::string *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)v7 + 1) + __n;
    v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v9 < 0)
      size = v6->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v8 > size)
    {
      std::string::resize(v6, v8, 0);
      v6 = (std::string *)v5[1];
      LOBYTE(v9) = *((_BYTE *)&v6->__r_.__value_.__s + 23);
    }
    if ((v9 & 0x80) != 0)
      v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
    this = (char *)memcpy((char *)v6 + v5[2], __src, __n);
    v5[2] += __n;
  }
  return this;
}

void rabit::utils::MemoryBufferStream::~MemoryBufferStream(rabit::utils::MemoryBufferStream *this)
{
  JUMPOUT(0x227667068);
}

uint64_t rabit::utils::MemoryBufferStream::Seek(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t rabit::utils::MemoryBufferStream::Tell(rabit::utils::MemoryBufferStream *this)
{
  return *((_QWORD *)this + 2);
}

BOOL rabit::utils::MemoryBufferStream::AtEnd(rabit::utils::MemoryBufferStream *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (*(char *)(v1 + 23) < 0)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = *(unsigned __int8 *)(v1 + 23);
  return *((_QWORD *)this + 2) == v2;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*&>(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_220E701A4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[3];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 2)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x200000000;
  v15[0] = &off_24E6BE3A8;
  v15[2] = 0;
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220E703A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<xgboost::DMatrix>::shared_ptr[abi:ne180100]<xgboost::DMatrix,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24E6B83F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_220E70488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::DMatrix *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::DMatrix>,std::allocator<xgboost::DMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::DMatrixProxy *,std::shared_ptr<xgboost::DMatrix>::__shared_ptr_default_delete<xgboost::DMatrix,xgboost::data::DMatrixProxy>,std::allocator<xgboost::data::DMatrixProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::shared_ptr<xgboost::DMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void dmlc::io::LocalFileSystem::GetPathInfo(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  const char *data;
  int v6;
  const char *v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const std::string *v12;
  uint64_t size;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  size_t v17;
  _QWORD *v18;
  int v19;
  const std::string *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  size_t v25;
  stat v26;
  _QWORD *v27[4];

  v27[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::operator=((std::string *)a2, a1);
  std::string::operator=((std::string *)(a2 + 24), a1 + 1);
  std::string::operator=((std::string *)(a2 + 48), a1 + 2);
  if ((a1[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    data = (const char *)&a1[2];
  else
    data = a1[2].__r_.__value_.__l.__data_;
  if (stat(data, &v26) != -1)
  {
LABEL_16:
    *(_QWORD *)(a2 + 72) = v26.st_size;
    *(_DWORD *)(a2 + 80) = (v26.st_mode & 0xF000) == 0x4000;
    return;
  }
  v6 = *__error();
  if ((a1[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = (const char *)&a1[2];
  else
    v7 = a1[2].__r_.__value_.__l.__data_;
  if (lstat(v7, &v26))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v27);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v27);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LocalFileSystem.GetPathInfo: ", 29);
    v11 = SHIBYTE(a1[2].__r_.__value_.__r.__words[2]);
    if (v11 >= 0)
      v12 = a1 + 2;
    else
      v12 = (const std::string *)a1[2].__r_.__value_.__l.__data_;
    if (v11 >= 0)
      size = HIBYTE(a1[2].__r_.__value_.__r.__words[2]);
    else
      size = a1[2].__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" error: ", 8);
    v16 = strerror(v6);
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v27);
    goto LABEL_16;
  }
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27[0], (uint64_t)"LocalFileSystem.GetPathInfo: detected symlink ", 46);
  v19 = SHIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  if (v19 >= 0)
    v20 = a1 + 2;
  else
    v20 = (const std::string *)a1[2].__r_.__value_.__l.__data_;
  if (v19 >= 0)
    v21 = HIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  else
    v21 = a1[2].__r_.__value_.__l.__size_;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" error: ", 8);
  v24 = strerror(v6);
  v25 = strlen(v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v27);
}

void sub_220E7082C(_Unwind_Exception *a1)
{
  void **v1;

  dmlc::io::FileInfo::~FileInfo(v1);
  _Unwind_Resume(a1);
}

void dmlc::io::FileInfo::~FileInfo(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t dmlc::io::LocalFileSystem::ListDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char *v5;
  DIR *v6;
  int v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  dirent *i;
  const std::string::value_type *d_name;
  std::string::size_type v26;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::string *v47;
  std::string v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  std::string __p;
  std::string v57;
  std::string v58;
  void *v59[6];

  v47 = (std::string *)(a2 + 48);
  if (*(char *)(a2 + 71) >= 0)
    v5 = (const char *)(a2 + 48);
  else
    v5 = *(const char **)(a2 + 48);
  v6 = opendir(v5);
  if (!v6)
  {
    v7 = *__error();
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v59);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v59);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LocalFileSystem.ListDirectory ", 30);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)(a2 + 24), (uint64_t)&v49);
    v11 = *(_BYTE *)(a2 + 71);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)v47;
    else
      v12 = *(const std::string::value_type **)(a2 + 48);
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 71);
    else
      v13 = *(_QWORD *)(a2 + 56);
    v14 = std::string::append(&v49, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" error: ", 8);
    v20 = strerror(v7);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v59);
  }
  v22 = *a3;
  v23 = a3[1];
  if (v23 != *a3)
  {
    do
    {
      v23 -= 88;
      std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v23);
    }
    while (v23 != v22);
  }
  a3[1] = v22;
  for (i = readdir(v6); i; i = readdir(v6))
  {
    d_name = i->d_name;
    if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      if (*(char *)(a2 + 47) < 0)
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
      else
        v57 = *(std::string *)(a2 + 24);
      if (*(char *)(a2 + 71) < 0)
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
      else
        v58 = *v47;
      v26 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v27 = &v58;
      }
      else
      {
        v26 = v58.__r_.__value_.__l.__size_;
        v27 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if (v27->__r_.__value_.__s.__data_[v26 - 1] != 47)
        std::string::push_back(&v58, 47);
      std::string::append(&v58, d_name);
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 16))(&v49, a1, &__p);
      v28 = a3[1];
      v29 = a3[2];
      if (v28 >= v29)
      {
        v34 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v28 - *a3) >> 3);
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) > 0x2E8BA2E8BA2E8BALL)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v29 - *a3) >> 3);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0x1745D1745D1745DLL)
          v37 = 0x2E8BA2E8BA2E8BALL;
        else
          v37 = v35;
        v59[4] = a3 + 2;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>((uint64_t)(a3 + 2), v37);
        else
          v38 = 0;
        v39 = &v38[88 * v34];
        v59[0] = v38;
        v59[1] = v39;
        v59[3] = &v38[88 * v37];
        v40 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *((_QWORD *)v39 + 2) = *((_QWORD *)&v49.__r_.__value_.__l + 2);
        *(_OWORD *)v39 = v40;
        memset(&v49, 0, sizeof(v49));
        v41 = v50;
        *((_QWORD *)v39 + 5) = v51;
        *(_OWORD *)(v39 + 24) = v41;
        v51 = 0;
        v50 = 0uLL;
        v42 = v52;
        *((_QWORD *)v39 + 8) = v53;
        *((_OWORD *)v39 + 3) = v42;
        v52 = 0uLL;
        v53 = 0;
        v43 = v54;
        *((_DWORD *)v39 + 20) = v55;
        *((_QWORD *)v39 + 9) = v43;
        v59[2] = v39 + 88;
        std::vector<dmlc::io::FileInfo>::__swap_out_circular_buffer(a3, v59);
        v44 = a3[1];
        std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer(v59);
        v45 = SHIBYTE(v53);
        a3[1] = v44;
        if (v45 < 0)
          operator delete((void *)v52);
      }
      else
      {
        v30 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *(_QWORD *)(v28 + 16) = *((_QWORD *)&v49.__r_.__value_.__l + 2);
        *(_OWORD *)v28 = v30;
        memset(&v49, 0, sizeof(v49));
        v31 = v51;
        *(_OWORD *)(v28 + 24) = v50;
        *(_QWORD *)(v28 + 40) = v31;
        v51 = 0;
        v50 = 0uLL;
        v32 = v52;
        *(_QWORD *)(v28 + 64) = v53;
        *(_OWORD *)(v28 + 48) = v32;
        v53 = 0;
        v52 = 0uLL;
        v33 = v54;
        *(_DWORD *)(v28 + 80) = v55;
        *(_QWORD *)(v28 + 72) = v33;
        a3[1] = v28 + 88;
      }
      if (SHIBYTE(v51) < 0)
        operator delete((void *)v50);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return closedir(v6);
}

void sub_220E70DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a19 < 0)
    operator delete(__p);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v39 - 128));
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LocalFileSystem::Open(dmlc::io::LocalFileSystem *this, const dmlc::io::URI *a2, char *a3, char a4)
{
  const std::string::value_type *v7;
  const char *v8;
  int v9;
  FILE *v10;
  int v11;
  FILE *v12;
  BOOL v13;
  FILE *v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  std::string *p_p;
  std::string *v19;
  uint64_t result;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  char *v36;
  size_t v37;
  void *v38[2];
  int64_t v39;
  char v40;
  std::string __p;

  v7 = (char *)a2 + 48;
  if (*((char *)a2 + 71) >= 0)
    v8 = (char *)a2 + 48;
  else
    v8 = (const char *)*((_QWORD *)a2 + 6);
  v9 = strcmp(v8, "stdin");
  v10 = (FILE *)*MEMORY[0x24BDAC8E0];
  v11 = strcmp(v8, "stdout");
  if (v9)
    v12 = 0;
  else
    v12 = v10;
  if (v9)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v11)
    v14 = v12;
  else
    v14 = (FILE *)*MEMORY[0x24BDAC8E8];
  v15 = 7;
  if (strncmp(v8, "file://", 7uLL))
    v15 = 0;
  if (v13)
    goto LABEL_34;
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 1)
      goto LABEL_30;
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
    {
LABEL_24:
      if (v16 != 1)
        goto LABEL_30;
      p_p = &__p;
      goto LABEL_28;
    }
    v17 = &__p;
  }
  if (v17->__r_.__value_.__s.__data_[0] == 119)
  {
    MEMORY[0x227666C18](&__p, "wb");
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if ((v16 & 0x80) == 0)
    goto LABEL_24;
  if (__p.__r_.__value_.__l.__size_ != 1)
    goto LABEL_30;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
  if (p_p->__r_.__value_.__s.__data_[0] == 114)
  {
    MEMORY[0x227666C18](&__p, "rb");
    LOBYTE(v16) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
  }
LABEL_30:
  if ((v16 & 0x80u) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v14 = fopen(&v8[v15], (const char *)v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_35;
    goto LABEL_37;
  }
LABEL_34:
  if (v14)
  {
LABEL_35:
    result = operator new();
    *(_QWORD *)result = &off_24E6B86C0;
    *(_QWORD *)(result + 8) = v14;
    *(_BYTE *)(result + 16) = v13;
    return result;
  }
LABEL_37:
  if ((a4 & 1) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: allow_null", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" LocalFileSystem::Open \"", 24);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)a2 + 3, (uint64_t)&__p);
    v26 = *((char *)a2 + 71);
    if (v26 >= 0)
      v27 = v7;
    else
      v27 = (const std::string::value_type *)*((_QWORD *)a2 + 6);
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)a2 + 71);
    else
      v28 = *((_QWORD *)a2 + 7);
    v29 = std::string::append(&__p, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)v38 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v39 >= 0)
      v31 = v38;
    else
      v31 = (void **)v38[0];
    if (v39 >= 0)
      v32 = HIBYTE(v39);
    else
      v32 = (uint64_t)v38[1];
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\": ", 3);
    v35 = __error();
    v36 = strerror(*v35);
    v37 = strlen(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
  }
  return 0;
}

void sub_220E71168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LocalFileSystem::OpenForRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, "r", a3);
}

void dmlc::io::LocalFileSystem::~LocalFileSystem(dmlc::io::LocalFileSystem *this)
{
  JUMPOUT(0x227667068);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

size_t dmlc::io::FileStream::Read(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

void dmlc::io::FileStream::Write(FILE **this, const void *__ptr, size_t a3)
{
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;

  if (fwrite(__ptr, 1uLL, a3, this[1]) != a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: std::fwrite(ptr, 1, size, fp_) == size", 52);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FileStream.Write incomplete", 27);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  }
}

void sub_220E713E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::io::FileStream::~FileStream(dmlc::io::FileStream *this)
{
  FILE *v2;

  *(_QWORD *)this = &off_24E6B86C0;
  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (!*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

{
  FILE *v2;

  *(_QWORD *)this = &off_24E6B86C0;
  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (!*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
  JUMPOUT(0x227667068);
}

void dmlc::io::FileStream::Seek(FILE **this, uint64_t a2)
{
  std::string *Entry;
  _QWORD *v3;
  _QWORD *v4;
  char v5;

  if (fseek(this[1], a2, 0))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/local_filesys.cc");
    v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !std::fseek(fp_, static_cast<long>(pos), SEEK_SET)", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  }
}

void sub_220E71510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::io::FileStream::Tell(dmlc::io::FileStream *this)
{
  JUMPOUT(0x227667290);
}

BOOL dmlc::io::FileStream::AtEnd(FILE **this)
{
  return feof(this[1]) != 0;
}

void std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<dmlc::io::FileInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<dmlc::io::FileInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>,std::reverse_iterator<dmlc::io::FileInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 88);
      *(_QWORD *)(v7 - 72) = *(_QWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 88) = 0;
      v9 = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = v9;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      v10 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v10;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      v11 = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 16) = v11;
      v7 = *((_QWORD *)&v17 + 1) - 88;
      *((_QWORD *)&v17 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<dmlc::io::FileInfo>,std::reverse_iterator<dmlc::io::FileInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<dmlc::io::FileInfo>::~__split_buffer(void **a1)
{
  std::__split_buffer<dmlc::io::FileInfo>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<dmlc::io::FileInfo>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100](v4, i - 88);
  }
}

uint64_t dmlc::Registry<xgboost::PredictorReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void xgboost::PredictionContainer::ClearExpiredEntries(int8x8_t *this)
{
  _QWORD *v1;
  int8x8_t *v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int8x8_t *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  int8x8_t *v21;
  int8x8_t *v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  _QWORD v27[2];
  char v28;

  v2 = this + 2;
  v1 = (_QWORD *)this[2];
  if (v1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v1[6];
      if (!v8 || *(_QWORD *)(v8 + 8) == -1)
      {
        if (v7 >= v6)
        {
          v10 = (v7 - v4) >> 3;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if ((v6 - v4) >> 2 > v11)
            v11 = (v6 - v4) >> 2;
          if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
          {
            if (v12 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v13 = (char *)operator new(8 * v12);
          }
          else
          {
            v13 = 0;
          }
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v1[2];
          v9 = v14 + 8;
          while (v5 != v4)
          {
            v15 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v14 - 1) = v15;
            v14 -= 8;
          }
          v6 = &v13[8 * v12];
          if (v4)
            operator delete(v4);
          v4 = v14;
          v7 = v9;
        }
        else
        {
          *(_QWORD *)v7 = v1[2];
          v7 += 8;
          v9 = v7;
        }
      }
      else
      {
        v9 = v5;
      }
      v1 = (_QWORD *)*v1;
      v5 = v9;
    }
    while (v1);
    if (v4 != v7)
    {
      v16 = v4;
      do
      {
        v17 = (int8x8_t *)std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, v16);
        if (v17)
        {
          v18 = this[1];
          v19 = (unint64_t)v17[1];
          v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            if (v19 >= *(_QWORD *)&v18)
              v19 %= *(_QWORD *)&v18;
          }
          else
          {
            v19 &= *(_QWORD *)&v18 - 1;
          }
          v21 = *(int8x8_t **)(*(_QWORD *)this + 8 * v19);
          do
          {
            v22 = v21;
            v21 = (int8x8_t *)*v21;
          }
          while (v21 != v17);
          if (v22 == v2)
            goto LABEL_45;
          v23 = (unint64_t)v22[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&v18)
              v23 %= *(_QWORD *)&v18;
          }
          else
          {
            v23 &= *(_QWORD *)&v18 - 1;
          }
          if (v23 != v19)
          {
LABEL_45:
            if (!*(_QWORD *)v17)
              goto LABEL_46;
            v24 = *(_QWORD *)(*(_QWORD *)v17 + 8);
            if (v20.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&v18)
                v24 %= *(_QWORD *)&v18;
            }
            else
            {
              v24 &= *(_QWORD *)&v18 - 1;
            }
            if (v24 != v19)
LABEL_46:
              *(_QWORD *)(*(_QWORD *)this + 8 * v19) = 0;
          }
          v25 = *v17;
          if (*v17)
          {
            v26 = *(_QWORD *)(*(_QWORD *)&v25 + 8);
            if (v20.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&v18)
                v26 %= *(_QWORD *)&v18;
            }
            else
            {
              v26 &= *(_QWORD *)&v18 - 1;
            }
            if (v26 != v19)
            {
              *(_QWORD *)(*(_QWORD *)this + 8 * v26) = v22;
              v25 = *v17;
            }
          }
          *v22 = v25;
          *v17 = 0;
          --*(_QWORD *)&this[3];
          v27[0] = v17;
          v27[1] = v2;
          v28 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
        }
        v16 += 8;
      }
      while (v16 != v7);
    }
    if (v4)
      operator delete(v4);
  }
}

void sub_220E71C0C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::PredictionContainer::Cache(int8x8_t *a1, uint64_t *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v13;
  uint64_t *v14;

  xgboost::PredictionContainer::ClearExpiredEntries(a1);
  v13 = *a2;
  v14 = &v13;
  v6 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>((uint64_t)a1, &v13, (uint64_t)&std::piecewise_construct, &v14);
  v8 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[6];
  v6[5] = v8;
  v6[6] = v7;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (a3 != -1)
  {
    v13 = *a2;
    v14 = &v13;
    std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>((uint64_t)a1, &v13, (uint64_t)&std::piecewise_construct, &v14);
  }
  v13 = *a2;
  v14 = &v13;
  return std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>((uint64_t)a1, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 3;
}

_QWORD *xgboost::PredictionContainer::Entry(xgboost::PredictionContainer *this, xgboost::DMatrix *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  char v22;
  xgboost::DMatrix *v23;

  v23 = a2;
  if (!std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v23))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: container_.find(m) != container_.cend()", 53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
  }
  v3 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v23);
  if (!v3)
    goto LABEL_14;
  v4 = v3;
  v5 = (std::__shared_weak_count *)v3[6];
  if (!v5)
    goto LABEL_11;
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  v8 = v4[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (!v8)
  {
LABEL_11:
    v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: container_.at(m).ref.lock()", 41);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[Internal error]: DMatrix: ", 27);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" has expired.", 13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
  v16 = std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(this, &v23);
  if (!v16)
LABEL_14:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v16 + 3;
}

void sub_220E71EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

int8x8_t *xgboost::PredictionContainer::Container(int8x8_t *this)
{
  xgboost::PredictionContainer::ClearExpiredEntries(this);
  return this;
}

uint64_t xgboost::Predictor::Create(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  dmlc::Registry<xgboost::PredictorReg>::Get();
  dmlc::Registry<xgboost::PredictorReg>::Get();
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_253F377D0, (const void **)a1);
  if (v4 == &qword_253F377D8 || (v5 = v4[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown predictor type ", 23);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = (const void *)a1;
    else
      v12 = *(const void **)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v15 = a2;
  v6 = *(_QWORD *)(v5 + 96);
  if (!v6)
    goto LABEL_12;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v15);
}

void sub_220E71FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

void xgboost::Predictor::InitOutPredictions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v7 = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v26 = 0;
  if (!v7)
  {
    dmlc::LogCheckFormat<unsigned int,int>(&v27);
    if (v27)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
      v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"model.learner_model_param->num_output_group != 0", 48);
      v17 = *(char *)(v27 + 23);
      v18 = v17 >= 0 ? v27 : *(_QWORD *)v27;
      v19 = v17 >= 0 ? *(unsigned __int8 *)(v27 + 23) : *(_QWORD *)(v27 + 8);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      v21 = v27;
      v27 = 0;
      if (v21)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v21);
    }
  }
  v8 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 8);
  v9 = *(_QWORD *)a2 * v8;
  v10 = *(uint64_t **)(a2 + 80);
  v12 = *v10;
  v11 = v10[1];
  LODWORD(v27) = 0;
  std::vector<float>::resize(*a3, v9, &v27);
  if (v11 == v12)
  {
    v22 = *(_DWORD **)*a3;
    v23 = *(_QWORD *)(*a3 + 8) - (_QWORD)v22;
    if (v23 >= 1)
    {
      v24 = **(_DWORD **)(a4 + 8);
      v25 = ((unint64_t)v23 >> 2) + 1;
      do
      {
        *v22++ = v24;
        --v25;
      }
      while (v25 > 1);
    }
  }
  else
  {
    xgboost::ValidateBaseMarginShape<2>(a2 + 80, *(_QWORD *)a2, v8);
    xgboost::HostDeviceVector<float>::Copy((void ***)a3, (const void ***)(a2 + 80));
  }
}

void sub_220E72160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void xgboost::ValidateBaseMarginShape<2>(uint64_t a1, unint64_t __val, unsigned int a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  std::string __p;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int128 v44;
  int64_t v45;
  unsigned int v46;
  unint64_t v47;

  v47 = __val;
  v46 = a3;
  std::to_string(&v40, __val);
  v5 = std::string::insert(&v40, 0, "Invalid shape of base_margin. Expected: (");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v41, ", ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v42, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v43, ")");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v45 = v13->__r_.__value_.__r.__words[2];
  v44 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v42.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  if (v42.__r_.__value_.__r.__words[0] != v47)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v43);
    if (v43.__r_.__value_.__r.__words[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"margin.Shape(0) == n_samples", 28);
      v19 = *(char *)(v43.__r_.__value_.__r.__words[0] + 23);
      v20 = v19 >= 0 ? v43.__r_.__value_.__r.__words[0] : *(_QWORD *)v43.__r_.__value_.__l.__data_;
      v21 = v19 >= 0
          ? *(unsigned __int8 *)(v43.__r_.__value_.__r.__words[0] + 23)
          : *(_QWORD *)(v43.__r_.__value_.__r.__words[0] + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      v24 = v45 >= 0 ? &v44 : (__int128 *)v44;
      v25 = v45 >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
      v26 = v43.__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = 0;
      if (v26)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v43, v26);
    }
  }
  v42.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 16);
  if (v42.__r_.__value_.__r.__words[0] != a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v43);
    if (v43.__r_.__value_.__r.__words[0])
    {
      v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
      dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/predictor.cc");
      v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v42);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"margin.Shape(1) == n_groups", 27);
      v31 = *(char *)(v43.__r_.__value_.__r.__words[0] + 23);
      v32 = v31 >= 0 ? v43.__r_.__value_.__r.__words[0] : *(_QWORD *)v43.__r_.__value_.__l.__data_;
      v33 = v31 >= 0
          ? *(unsigned __int8 *)(v43.__r_.__value_.__r.__words[0] + 23)
          : *(_QWORD *)(v43.__r_.__value_.__r.__words[0] + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      v36 = v45 >= 0 ? &v44 : (__int128 *)v44;
      v37 = v45 >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v42);
      v38 = v43.__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = 0;
      if (v38)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v43, v38);
    }
  }
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
}

void sub_220E724A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::find<xgboost::DMatrix *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t *std::__destroy_at[abi:ne180100]<std::pair<xgboost::DMatrix * const,xgboost::PredictionCacheEntry>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(a1 + 8));
}

_QWORD *std::__hash_table<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::__unordered_map_hasher<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::hash<xgboost::DMatrix *>,std::equal_to<xgboost::DMatrix *>,true>,std::__unordered_map_equal<xgboost::DMatrix *,std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,std::equal_to<xgboost::DMatrix *>,std::hash<xgboost::DMatrix *>,true>,std::allocator<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>>>::__emplace_unique_key_args<xgboost::DMatrix *,std::piecewise_construct_t const&,std::tuple<xgboost::DMatrix *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v37;
  _QWORD v38[2];
  char v39;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = *a4;
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v38[0] = v16;
  v38[1] = a1 + 16;
  v39 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  *((_QWORD *)v16 + 2) = *v14;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)v16 + 3, 0, 0.0);
  *((_DWORD *)v16 + 8) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *((_QWORD *)v16 + 6) = 0;
  v39 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v15;
          if (*v15)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v15;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_55:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  i = (_QWORD *)v38[0];
  if (v34)
  {
    *(_QWORD *)v38[0] = *v34;
LABEL_72:
    *v34 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v38[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_220E72B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<xgboost::DMatrix *,xgboost::PredictionCacheEntry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *dmlc::io::IndexedRecordIOSplitter::ResetPartition(dmlc::io::IndexedRecordIOSplitter *this, unsigned int a2, unsigned int a3)
{
  char *result;
  char *v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;

  result = (char *)*((_QWORD *)this + 24);
  v6 = (char *)*((_QWORD *)this + 25);
  v7 = (void **)((char *)this + 192);
  v8 = (v6 - result) >> 4;
  v9 = (v8 + a3 - 1) / a3;
  v10 = v9 * a2;
  if (v10 < v8)
  {
    v11 = *(v7 - 21);
    v12 = *(v11 - 1);
    *((_QWORD *)this + 32) = v10;
    v13 = *(_QWORD *)&result[16 * v10];
    *((_QWORD *)this + 6) = v13;
    v14 = v9 * (a2 + 1);
    if (v14 >= v8)
    {
      v15 = *((_QWORD *)this + 26);
      *((_QWORD *)this + 7) = v12;
      *((_QWORD *)this + 33) = v8;
      if ((unint64_t)v6 >= v15)
      {
        v17 = v8 + 1;
        if ((v8 + 1) >> 60)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v18 = v15 - (_QWORD)result;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)this + 208, v19);
          result = (char *)*((_QWORD *)this + 24);
          v6 = (char *)*((_QWORD *)this + 25);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[16 * v8];
        v22 = &v20[16 * v19];
        *(_QWORD *)v21 = v12;
        *((_QWORD *)v21 + 1) = 0;
        v16 = v21 + 16;
        if (v6 != result)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v6 - 1);
            v21 -= 16;
            v6 -= 16;
          }
          while (v6 != result);
          result = (char *)*v7;
        }
        *((_QWORD *)this + 24) = v21;
        *((_QWORD *)this + 25) = v16;
        *((_QWORD *)this + 26) = v22;
        if (result)
          operator delete(result);
      }
      else
      {
        *(_QWORD *)v6 = v12;
        *((_QWORD *)v6 + 1) = 0;
        v16 = v6 + 16;
      }
      *((_QWORD *)this + 25) = v16;
      v13 = *((_QWORD *)this + 6);
      v11 = (_QWORD *)*((_QWORD *)this + 3);
    }
    else
    {
      *((_QWORD *)this + 33) = v14;
      *((_QWORD *)this + 7) = *(_QWORD *)&result[16 * v14];
    }
    *((_QWORD *)this + 5) = v13;
    v23 = (_QWORD *)*((_QWORD *)this + 2);
    if (v11 == v23)
    {
      v31 = -1;
      *((_QWORD *)this + 12) = -1;
    }
    else
    {
      v24 = v11 - v23;
      v25 = v24;
      v26 = (_QWORD *)*((_QWORD *)this + 2);
      do
      {
        v27 = v25 >> 1;
        v28 = &v26[v25 >> 1];
        v30 = *v28;
        v29 = v28 + 1;
        v25 += ~(v25 >> 1);
        if (v13 < v30)
          v25 = v27;
        else
          v26 = v29;
      }
      while (v25);
      v31 = v26 - v23 - 1;
      *((_QWORD *)this + 12) = v31;
      v11 = v23;
      do
      {
        v32 = v24 >> 1;
        v33 = &v11[v24 >> 1];
        v35 = *v33;
        v34 = v33 + 1;
        v24 += ~(v24 >> 1);
        if (*((_QWORD *)this + 7) < v35)
          v24 = v32;
        else
          v11 = v34;
      }
      while (v24);
    }
    *((_QWORD *)this + 13) = v11 - v23 - 1;
    v36 = *((_QWORD *)this + 11);
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
      *((_QWORD *)this + 11) = 0;
      v31 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 11) = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), *((_QWORD *)this + 8) + 88 * v31, 0);
    *((_QWORD *)this + 31) = *((_QWORD *)this + 32);
    *((_QWORD *)this + 35) = 0;
    return (char *)(*(uint64_t (**)(dmlc::io::IndexedRecordIOSplitter *))(*(_QWORD *)this + 16))(this);
  }
  return result;
}

void dmlc::io::IndexedRecordIOSplitter::ReadIndexFile(_QWORD *a1, uint64_t a2, const std::string *a3)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  char *v64;
  char *v65;
  void **v66[15];
  uint64_t v67;
  uint64_t v68;
  int64x2_t v69;

  dmlc::io::InputSplitBase::ConvertToURIs((uint64_t)a1, a3, &v69);
  __p = (void *)(0x8E38E38E38E38E39 * ((v69.i64[1] - v69.i64[0]) >> 3));
  v68 = 1;
  if (v69.i64[1] - v69.i64[0] != 72)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v66);
    if (v66[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: ", 14);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"expanded_list.size() == 1ul", 27);
      v8 = *((char *)v66[0] + 23);
      v9 = v8 >= 0 ? v66[0] : (void **)*v66[0];
      v10 = v8 >= 0 ? (void *)*((unsigned __int8 *)v66[0] + 23) : v66[0][1];
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, (uint64_t)v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"IndexedRecordIOSplitter does not support multiple index files", 61);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v13 = v66[0];
      v66[0] = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v66, (uint64_t)v13);
    }
  }
  v14 = v69.i64[0];
  if (v69.i64[1] != v69.i64[0])
  {
    v15 = 0;
    v16 = (void **)(a1 + 24);
    v17 = a1 + 26;
    do
    {
      v18 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14 + 72 * v15, "r", 1);
      dmlc::istream::istream((uint64_t)v66, v18, 0x400uLL);
      __p = 0;
      v64 = 0;
      v65 = 0;
      v68 = 0;
      v62 = 0;
      while (1)
      {
        v19 = MEMORY[0x227666D44](v66, &v68);
        v20 = (_QWORD *)MEMORY[0x227666D44](v19, &v62);
        if ((*((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 32) & 5) != 0)
          break;
        v21 = v64;
        if (v64 >= v65)
        {
          v23 = (char *)__p;
          v24 = (v64 - (_BYTE *)__p) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v26 = v65 - (_BYTE *)__p;
          if ((v65 - (_BYTE *)__p) >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v65, v27);
            v23 = (char *)__p;
            v21 = v64;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[8 * v24];
          *(_QWORD *)v29 = v62;
          v22 = v29 + 8;
          while (v21 != v23)
          {
            v30 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v29 - 1) = v30;
            v29 -= 8;
          }
          __p = v29;
          v64 = v22;
          v65 = &v28[8 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v64 = v62;
          v22 = v21 + 8;
        }
        v64 = v22;
      }
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      v60 = v15;
      v61 = v18;
      v32 = __p;
      v31 = v64;
      v33 = (char *)a1[25];
      if (v64 - (_BYTE *)__p != 8)
      {
        v34 = 0;
        do
        {
          v35 = v32[v34++];
          v36 = v32[v34] - v35;
          if ((unint64_t)v33 >= *v17)
          {
            v37 = (char *)*v16;
            v38 = (v33 - (_BYTE *)*v16) >> 4;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v40 = *v17 - (_QWORD)v37;
            if (v40 >> 3 > v39)
              v39 = v40 >> 3;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
              v41 = 0xFFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 26), v41);
              v37 = (char *)a1[24];
              v33 = (char *)a1[25];
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[16 * v38];
            *(_QWORD *)v43 = v35;
            *((_QWORD *)v43 + 1) = v36;
            v44 = v43;
            if (v33 != v37)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v33 - 1);
                v44 -= 16;
                v33 -= 16;
              }
              while (v33 != v37);
              v37 = (char *)*v16;
            }
            v33 = v43 + 16;
            a1[24] = v44;
            a1[25] = v43 + 16;
            a1[26] = &v42[16 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *(_QWORD *)v33 = v35;
            *((_QWORD *)v33 + 1) = v36;
            v33 += 16;
          }
          a1[25] = v33;
          v32 = __p;
          v31 = v64;
        }
        while (v34 < ((v64 - (_BYTE *)__p) >> 3) - 1);
      }
      v45 = *((_QWORD *)v31 - 1);
      v46 = *(_QWORD *)(a1[3] - 8) - v45;
      v47 = a1[26];
      if ((unint64_t)v33 >= v47)
      {
        v51 = (char *)*v16;
        v52 = (v33 - (_BYTE *)*v16) >> 4;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v54 = v47 - (_QWORD)v51;
        if (v54 >> 3 > v53)
          v53 = v54 >> 3;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
          v55 = 0xFFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 26), v55);
          v51 = (char *)a1[24];
          v33 = (char *)a1[25];
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[16 * v52];
        *(_QWORD *)v57 = v45;
        *((_QWORD *)v57 + 1) = v46;
        v58 = v57;
        if (v33 == v51)
        {
          v50 = v60;
          v49 = v61;
        }
        else
        {
          v50 = v60;
          v49 = v61;
          do
          {
            *((_OWORD *)v58 - 1) = *((_OWORD *)v33 - 1);
            v58 -= 16;
            v33 -= 16;
          }
          while (v33 != v51);
          v51 = (char *)*v16;
        }
        v48 = v57 + 16;
        a1[24] = v58;
        a1[25] = v57 + 16;
        a1[26] = &v56[16 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *(_QWORD *)v33 = v45;
        *((_QWORD *)v33 + 1) = v46;
        v48 = v33 + 16;
        v50 = v60;
        v49 = v61;
      }
      a1[25] = v48;
      if (__p)
      {
        v64 = (char *)__p;
        operator delete(__p);
      }
      MEMORY[0x227666FE4](&v67);
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      v15 = v50 + 1;
      v14 = v69.i64[0];
    }
    while (v15 < 0x8E38E38E38E38E39 * ((v69.i64[1] - v69.i64[0]) >> 3));
  }
  v66[0] = (void **)&v69;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](v66);
}

void sub_220E732D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  a17 = v17 - 120;
  std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t dmlc::istream::istream(uint64_t a1, uint64_t a2, std::vector<char>::size_type a3)
{
  uint64_t v6;
  std::ios_base *v7;

  *(_QWORD *)(a1 + 120) = &unk_24E6B88D8;
  *(_QWORD *)a1 = &unk_24E6B88B0;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 120), 0);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(_QWORD *)a1 = &unk_24E6B8840;
  *(_QWORD *)(a1 + 120) = &unk_24E6B8868;
  dmlc::istream::InBuf::InBuf((dmlc::istream::InBuf *)(a1 + 16), a3);
  *(_QWORD *)(a1 + 80) = a2;
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v7->__rdbuf_ = (void *)(a1 + 16);
  std::ios_base::clear(v7, 0);
  return a1;
}

void sub_220E7344C(_Unwind_Exception *a1)
{
  uint64_t v1;
  dmlc::istream::InBuf *v2;

  dmlc::istream::InBuf::~InBuf(v2);
  std::istream::~istream();
  MEMORY[0x227666FE4](v1);
  _Unwind_Resume(a1);
}

void dmlc::istream::~istream(dmlc::istream *this)
{
  uint64_t v1;

  MEMORY[0x227666FE4](v1 + 120);
}

{
  uint64_t v1;

  MEMORY[0x227666FE4](v1 + 120);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::SeekRecordBegin(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t *, uint64_t))
{
  uint64_t v3;
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;
  uint64_t v10;

  v10 = 0;
  v3 = 0;
  while ((**a2)(a2, (uint64_t *)((char *)&v10 + 4), 4))
  {
    if (HIDWORD(v10) == -824761590)
    {
      if (!(**a2)(a2, &v10, 4))
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
        v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: fi->Read(&lrec, sizeof(lrec)) != 0", 48);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid record io format", 24);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
      }
      if (!(v10 >> 30))
        return v3;
      v3 += 8;
    }
    else
    {
      v3 += 4;
    }
  }
  return v3;
}

void sub_220E735F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

const char *dmlc::io::IndexedRecordIOSplitter::FindLastRecordBegin(dmlc::io::IndexedRecordIOSplitter *this, const char *a2, const char *a3)
{
  const char *v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  v28 = a2 & 3;
  if ((a2 & 3) != 0)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v29);
    if (v29)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(reinterpret_cast<size_t>(begin) & 3UL) == 0U", 45);
      v9 = *(char *)(v29 + 23);
      v10 = v9 >= 0 ? v29 : *(_QWORD *)v29;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v13 = v29;
      v29 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v13);
    }
  }
  v28 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v29);
    if (v29)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(reinterpret_cast<size_t>(end) & 3UL) == 0U", 43);
      v18 = *(char *)(v29 + 23);
      v19 = v18 >= 0 ? v29 : *(_QWORD *)v29;
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
      v22 = v29;
      v29 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v22);
    }
  }
  if (v4 + 8 > a3)
  {
    v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
    v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: p >= pbegin + 2", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
  }
  v26 = a3 - 8;
  if (a3 - 8 != v4)
  {
    while (*(_DWORD *)v26 != -824761590 || *((_DWORD *)v26 + 1) >> 30)
    {
      v26 -= 4;
      if (v26 == v4)
        return v4;
    }
    return v26;
  }
  return v4;
}

void sub_220E73830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

BOOL dmlc::io::IndexedRecordIOSplitter::ExtractNextRecord(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::string *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _DWORD *v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = *a3;
  v53 = a3[1];
  if (*a3 != v53)
  {
    LOBYTE(v6) = *a3;
    if (v3 + 8 > v53)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
      v6 = *a3;
    }
    v54 = v6 & 3;
    if ((v6 & 3) != 0)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>(&v55);
      if (v55)
      {
        v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
        v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(reinterpret_cast<size_t>(chunk->begin) & 3UL) == 0U", 52);
        v15 = *(char *)(v55 + 23);
        v16 = v15 >= 0 ? v55 : *(_QWORD *)v55;
        v17 = v15 >= 0 ? *(unsigned __int8 *)(v55 + 23) : *(_QWORD *)(v55 + 8);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v54);
        v19 = v55;
        v55 = 0;
        if (v19)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v55, v19);
      }
    }
    v54 = a3[1] & 3;
    if (v54)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>(&v55);
      if (v55)
      {
        v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v54);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(reinterpret_cast<size_t>(chunk->end) & 3UL) == 0U", 50);
        v24 = *(char *)(v55 + 23);
        v25 = v24 >= 0 ? v55 : *(_QWORD *)v55;
        v26 = v24 >= 0 ? *(unsigned __int8 *)(v55 + 23) : *(_QWORD *)(v55 + 8);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v54);
        v28 = v55;
        v55 = 0;
        if (v28)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v55, v28);
      }
    }
    v29 = *(_DWORD *)(*a3 + 4);
    v30 = v29 & 0x1FFFFFFF;
    v31 = *a3 + 8;
    *a2 = v31;
    v32 = v31 + (((_DWORD)v30 + 3) & 0x3FFFFFFC);
    *a3 = v32;
    if (v32 > a3[1])
    {
      v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: chunk->begin <= chunk->end", 40);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
    }
    v37 = v29 >> 29;
    a2[1] = v30;
    if (v37)
    {
      if (v37 == 1
        || (v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55),
            dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc"), v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55), v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: cflag == 1U", 25), v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Invalid RecordIO Format", 23), dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55), v37 != 3))
      {
        v42 = (_DWORD *)*a3;
        do
        {
          if ((unint64_t)(v42 + 2) > a3[1])
          {
            v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
            dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
            v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: chunk->begin + 2 * sizeof(uint32_t) <= chunk->end", 63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
            v42 = (_DWORD *)*a3;
          }
          if (*v42 != -824761590)
          {
            v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
            dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/indexed_recordio_split.cc");
            v47 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v55);
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v55);
          }
          v49 = v42[1];
          *(_DWORD *)(*a2 + a2[1]) = -824761590;
          v50 = a2[1] + 4;
          a2[1] = v50;
          v51 = v49 & 0x1FFFFFFF;
          if ((v49 & 0x1FFFFFFF) != 0)
          {
            memmove((void *)(*a2 + v50), (const void *)(*a3 + 8), v49 & 0x1FFFFFFF);
            a2[1] += v51;
          }
          v42 = (_DWORD *)(*a3 + (((_DWORD)v51 + 3) & 0x3FFFFFFCu) + 8);
          *a3 = (unint64_t)v42;
        }
        while (v49 >> 29 != 3);
      }
    }
  }
  return v3 != v53;
}

void sub_220E73CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

BOOL dmlc::io::IndexedRecordIOSplitter::ReadChunk(dmlc::io::IndexedRecordIOSplitter *this, char *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t (***v5)(_QWORD, char *, uint64_t);

  v4 = *a3;
  v5 = dmlc::io::InputSplitBase::Read(this, a2, *a3);
  if (v5 != (uint64_t (***)(_QWORD, char *, uint64_t))v4 && v5 != 0)
    *a3 = (unint64_t)v5;
  return v5 != 0;
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextChunk(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 40))(a1, a2, a1[34]);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextBatchEx(dmlc::io::IndexedRecordIOSplitter *this, std::vector<unsigned int> *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;

  v5 = *((_QWORD *)this + 35);
  if (*((_BYTE *)this + 240))
  {
    if (v5)
      v6 = *((_QWORD *)this + 35);
    else
      v6 = a3;
    if (v6)
    {
      v7 = 0;
      v8 = *((_QWORD *)this + 31);
      while (1)
      {
        v9 = *((_QWORD *)this + 27);
        if (v8 >= (*((_QWORD *)this + 28) - v9) >> 3)
          break;
        v10 = *((_QWORD *)this + 24);
        v11 = *(_QWORD *)(v10 + 16 * *(_QWORD *)(v9 + 8 * v8));
        *((_QWORD *)this + 5) = v11;
        *((_QWORD *)this + 19) = *(_QWORD *)(v10 + 16 * *(_QWORD *)(v9 + 8 * v8) + 8) >> 2;
        v12 = (_QWORD *)*((_QWORD *)this + 2);
        v13 = (_QWORD *)*((_QWORD *)this + 3);
        if (v13 != v12)
        {
          v14 = v13 - v12;
          v13 = (_QWORD *)*((_QWORD *)this + 2);
          do
          {
            v15 = v14 >> 1;
            v16 = &v13[v14 >> 1];
            v18 = *v16;
            v17 = v16 + 1;
            v14 += ~(v14 >> 1);
            if (v11 < v18)
              v14 = v15;
            else
              v13 = v17;
          }
          while (v14);
        }
        v19 = v13 - v12 - 1;
        v20 = *((_QWORD *)this + 11);
        if (v19 != *((_QWORD *)this + 12))
        {
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
          *((_QWORD *)this + 12) = v19;
          v20 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), *((_QWORD *)this + 8) + 88 * v19, 0);
          *((_QWORD *)this + 11) = v20;
          v11 = *((_QWORD *)this + 5);
          v19 = *((_QWORD *)this + 12);
          v12 = (_QWORD *)*((_QWORD *)this + 2);
        }
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 32))(v20, v11 - v12[v19]);
        v21 = *((_QWORD *)this + 19);
        if (v7)
        {
          if (!dmlc::io::InputSplitBase::Chunk::Append(a2, this, v21))
            goto LABEL_25;
        }
        else if ((dmlc::io::InputSplitBase::Chunk::Load((dmlc::io::InputSplitBase::Chunk *)a2, this, v21) & 1) == 0)
        {
          return 0;
        }
        ++v7;
        v8 = *((_QWORD *)this + 31) + 1;
        *((_QWORD *)this + 31) = v8;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
      if (!v7)
        return 0;
LABEL_25:
      *((_QWORD *)this + 35) = v6 - v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v23 = *((_QWORD *)this + 31);
    v24 = *((_QWORD *)this + 33);
    if (v24 >= v23 + v5)
      v25 = v23 + v5;
    else
      v25 = *((_QWORD *)this + 33);
    if (v24 >= v23 + a3)
      v24 = v23 + a3;
    v26 = v5 == 0;
    if (v5)
      v27 = v23 + v5 - v25;
    else
      v27 = v23 + a3 - v24;
    if (!v26)
      v24 = v25;
    *((_QWORD *)this + 35) = v27;
    v28 = (*(_QWORD *)(*((_QWORD *)this + 24) + 16 * v24) - *(_QWORD *)(*((_QWORD *)this + 24) + 16 * v23)) >> 2;
    *((_QWORD *)this + 19) = v28;
    *((_QWORD *)this + 31) = v24;
    return dmlc::io::InputSplitBase::Chunk::Load((dmlc::io::InputSplitBase::Chunk *)a2, this, v28);
  }
}

BOOL dmlc::io::IndexedRecordIOSplitter::NextBatch(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a1 + 14;
  while (1)
  {
    v7 = a1[14];
    v8 = a1[15];
    if (v7 != v8)
      break;
    if (((*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*a1 + 104))(a1, v6, a3) & 1) == 0)
      return v7 != v8;
  }
  *a2 = v7;
  a2[1] = v8 - v7;
  *v6 = v8;
  return v7 != v8;
}

_QWORD *dmlc::io::IndexedRecordIOSplitter::BeforeFirst(dmlc::io::IndexedRecordIOSplitter *this)
{
  char *v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  __int128 v23;

  if (*((_BYTE *)this + 240))
  {
    v3 = (void **)((char *)this + 216);
    v2 = (char *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 28) = v2;
    v4 = *((_QWORD *)this + 32);
    if (v4 >= *((_QWORD *)this + 33))
    {
      v15 = v2;
    }
    else
    {
      v5 = (_QWORD *)((char *)this + 232);
      do
      {
        if ((unint64_t)v2 >= *v5)
        {
          v6 = (char *)*v3;
          v7 = (v2 - (_BYTE *)*v3) >> 3;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 61)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          v9 = *v5 - (_QWORD)v6;
          if (v9 >> 2 > v8)
            v8 = v9 >> 2;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
            v10 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 232, v10);
            v6 = (char *)*((_QWORD *)this + 27);
            v2 = (char *)*((_QWORD *)this + 28);
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[8 * v7];
          *(_QWORD *)v12 = v4;
          v13 = v12 + 8;
          while (v2 != v6)
          {
            v14 = *((_QWORD *)v2 - 1);
            v2 -= 8;
            *((_QWORD *)v12 - 1) = v14;
            v12 -= 8;
          }
          *((_QWORD *)this + 27) = v12;
          *((_QWORD *)this + 28) = v13;
          *((_QWORD *)this + 29) = &v11[8 * v10];
          if (v6)
            operator delete(v6);
          v2 = v13;
        }
        else
        {
          *(_QWORD *)v2 = v4;
          v2 += 8;
        }
        *((_QWORD *)this + 28) = v2;
        ++v4;
      }
      while (v4 < *((_QWORD *)this + 33));
      v15 = (char *)*v3;
    }
    if (v2 - v15 >= 9)
    {
      v23 = xmmword_220F5EC20;
      v17 = v2 - 8;
      if (v2 - 8 > v15)
      {
        v18 = ((unint64_t)(v2 - v15) >> 3) - 1;
        do
        {
          v22[0] = 0;
          v22[1] = v18;
          v19 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v23, (uint64_t)this + 296, v22);
          if (v19)
          {
            v20 = *(_QWORD *)v15;
            *(_QWORD *)v15 = *(_QWORD *)&v15[8 * v19];
            *(_QWORD *)&v15[8 * v19] = v20;
          }
          v15 += 8;
          --v18;
        }
        while (v15 < v17);
      }
    }
    v16 = 0;
  }
  else
  {
    v16 = *((_QWORD *)this + 32);
  }
  *((_QWORD *)this + 31) = v16;
  return dmlc::io::InputSplitBase::BeforeFirst(this);
}

uint64_t dmlc::io::InputSplitBase::HintChunkSize(uint64_t this, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 2;
  if (a2 >> 2 <= *(_QWORD *)(this + 152))
    v2 = *(_QWORD *)(this + 152);
  *(_QWORD *)(this + 152) = v2;
  return this;
}

uint64_t dmlc::io::InputSplitBase::GetTotalSize(dmlc::io::InputSplitBase *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) - 8);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextRecord(uint64_t *a1, uint64_t a2)
{
  dmlc::io::InputSplitBase::Chunk *v4;
  uint64_t v5;

  v4 = (dmlc::io::InputSplitBase::Chunk *)(a1 + 14);
  if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 80))(a1, a2, a1 + 14) & 1) != 0)
    return 1;
  do
  {
    v5 = dmlc::io::InputSplitBase::Chunk::Load(v4, (dmlc::io::InputSplitBase *)a1, a1[19]);
    if (!(_DWORD)v5)
      break;
    ++a1[31];
  }
  while (!(*(unsigned int (**)(uint64_t *, uint64_t, dmlc::io::InputSplitBase::Chunk *))(*a1 + 80))(a1, a2, v4));
  return v5;
}

void dmlc::io::IndexedRecordIOSplitter::~IndexedRecordIOSplitter(dmlc::io::IndexedRecordIOSplitter *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24E6B8788;
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  dmlc::io::InputSplitBase::~InputSplitBase(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24E6B8788;
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  dmlc::io::InputSplitBase::~InputSplitBase(this);
  JUMPOUT(0x227667068);
}

void sub_220E74364(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B3C408F76FF71);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::IndexedRecordIOSplitter::IsTextParser(dmlc::io::IndexedRecordIOSplitter *this)
{
  return 0;
}

uint64_t dmlc::io::IndexedRecordIOSplitter::NextChunkEx(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 104))(a1, a2, a1[34]);
}

void dmlc::istream::InBuf::~InBuf(dmlc::istream::InBuf *this)
{
  void *v2;

  *(_QWORD *)this = &unk_24E6B8910;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
}

{
  void *v2;

  *(_QWORD *)this = &unk_24E6B8910;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x227667068);
}

void `virtual thunk to'dmlc::istream::~istream(dmlc::istream *this)
{
  JUMPOUT(0x227666FE4);
}

{
  dmlc::istream::~istream((dmlc::istream *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

dmlc::istream::InBuf *dmlc::istream::InBuf::InBuf(dmlc::istream::InBuf *this, std::vector<char>::size_type a2)
{
  uint64_t v4;
  std::vector<char> *v5;
  uint64_t v6;
  unint64_t v7;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = &unk_24E6B8910;
  v5 = (std::vector<char> *)(v4 + 80);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  std::vector<char>::vector((std::vector<char> *)(v4 + 80), a2);
  if (!a2)
  {
    v6 = *((_QWORD *)this + 10);
    v7 = *((_QWORD *)this + 11) - v6;
    if (v7 > 1)
    {
      if (v7 != 2)
        *((_QWORD *)this + 11) = v6 + 2;
    }
    else
    {
      std::vector<char>::__append(v5, 2 - v7);
    }
  }
  return this;
}

void sub_220E744EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t dmlc::istream::InBuf::underflow(dmlc::istream::InBuf *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v1 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (v2 == v1)
  {
    v2 = (unsigned __int8 *)*((_QWORD *)this + 10);
    v4 = (***((uint64_t (****)(_QWORD, _QWORD, _QWORD))this + 8))(*((_QWORD *)this + 8), *((_QWORD *)this + 10), *((_QWORD *)this + 11) - (_QWORD)v2);
    v1 = &v2[v4];
    *((_QWORD *)this + 2) = v2;
    *((_QWORD *)this + 3) = v2;
    *((_QWORD *)this + 4) = &v2[v4];
    *((_QWORD *)this + 9) += v4;
  }
  if (v2 == v1)
    return 0xFFFFFFFFLL;
  else
    return *v2;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_220E74630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void dmlc::istream::~istream(dmlc::istream *this, uint64_t *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  *((_QWORD *)this + 2) = &unk_24E6B8910;
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
}

void std::vector<dmlc::io::URI>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<dmlc::io::FileInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *xgboost::EllpackPage::EllpackPage(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

_QWORD *xgboost::EllpackPage::EllpackPage(_QWORD *a1)
{
  std::string *Entry;
  _QWORD *v3;
  char v5;

  *a1 = 0;
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return a1;
}

void sub_220E7491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t *v13;
  uint64_t v15;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  v15 = *v13;
  *v13 = 0;
  if (v15)
    MEMORY[0x227667068](v15, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void xgboost::EllpackPage::~EllpackPage(xgboost::EllpackPage *this)
{
  std::string *Entry;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
    MEMORY[0x227667068](v4, 0xC400A2AC0F1);
}

void xgboost::EllpackPage::SetBaseRowId(xgboost::EllpackPage *this)
{
  std::string *Entry;
  _QWORD *v2;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
}

void sub_220E74A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::EllpackPage::Size(xgboost::EllpackPage *this)
{
  std::string *Entry;
  _QWORD *v2;
  char v4;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/ellpack_page.cc");
  v2 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Internal Error: XGBoost is not compiled with CUDA but EllpackPage is required", 77);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
  return 0;
}

void sub_220E74AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

dmlc::Config *dmlc::Config::Config(dmlc::Config *this, char a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 48) = a2;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
  return this;
}

{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 48) = a2;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
  return this;
}

void dmlc::Config::Clear(dmlc::Config *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)this + 3);
}

uint64_t dmlc::Config::Config(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)(a1 + 24));
  dmlc::Config::LoadFromStream(a1, a2);
  return a1;
}

void sub_220E74BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void dmlc::Config::LoadFromStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t p_p;
  uint64_t v13;
  _QWORD *v14;
  __int128 __p;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26[4];

  v26[3] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v24 = a2;
  v25 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  __p = 0uLL;
  v16 = 0;
  while (1)
  {
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&v21);
    v3 = HIBYTE(v23);
    if (v23 < 0)
      v3 = v22;
    if (!v3)
      break;
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&v18);
    dmlc::Tokenizer::GetNextToken((uint64_t)&v24, (uint64_t)&__p);
    if (SHIBYTE(v20) < 0)
    {
      if (v19 == 1)
      {
        v4 = v18;
LABEL_10:
        if (*v4 == 61)
          goto LABEL_30;
      }
    }
    else if (SHIBYTE(v20) == 1)
    {
      v4 = &v18;
      goto LABEL_10;
    }
    dmlc::LogMessage::LogMessage((dmlc::LogMessage *)v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26[0], (uint64_t)"Parsing error: expect format \"k = v\"; but got \"",
           47);
    if (v23 >= 0)
      v6 = &v21;
    else
      v6 = v21;
    if (v23 >= 0)
      v7 = HIBYTE(v23);
    else
      v7 = v22;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    if (v20 >= 0)
      v9 = &v18;
    else
      v9 = v18;
    if (v20 >= 0)
      v10 = HIBYTE(v20);
    else
      v10 = v19;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    if (v16 >= 0)
      p_p = (uint64_t)&__p;
    else
      p_p = __p;
    if (v16 >= 0)
      v13 = HIBYTE(v16);
    else
      v13 = *((_QWORD *)&__p + 1);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, p_p, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"", 1);
    dmlc::LogMessage::~LogMessage((dmlc::LogMessage *)v26);
LABEL_30:
    dmlc::Config::Insert(a1, (std::string::size_type)&v21, &__p, v17);
  }
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
}

void sub_220E74E84()
{
  void *v0;
  char v1;
  void *v2;
  char v3;
  void *v4;
  char v5;

  if (v1 < 0)
    operator delete(v0);
  if (v3 < 0)
    operator delete(v2);
  if (v5 < 0)
    operator delete(v4);
  JUMPOUT(0x220E74EE0);
}

void sub_220E74E8C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E74EA4);
}

void sub_220E74ED8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x220E74EE0);
  __clang_call_terminate(a1);
}

uint64_t dmlc::Tokenizer::GetNextToken(uint64_t a1, uint64_t a2)
{
  int i;
  int v5;
  int v6;
  int v10;
  _QWORD *exception;
  _QWORD *v13;
  __int128 v14;

  *(_DWORD *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  *(_BYTE *)(a2 + 24) = 0;
  for (i = std::istream::peek(); i != -1; i = std::istream::peek())
  {
    v5 = *(_DWORD *)(a1 + 8);
    if (v5 == 2)
      return std::istream::peek();
    if (i > 33)
    {
      switch(i)
      {
        case '"':
          while (1)
          {
            std::istream::get();
            v10 = std::istream::peek();
            if (v10 <= 91)
            {
              if (v10 <= 33)
              {
                if (v10 == -1 || v10 == 10 || v10 == 13)
                {
                  exception = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v14, "quotation mark is not closed");
                  dmlc::TokenizeError::TokenizeError(exception, &v14);
                }
              }
              else if (v10 == 34)
              {
                std::istream::get();
                *(_DWORD *)(a1 + 8) = 2;
                *(_BYTE *)(a2 + 24) = 1;
                goto LABEL_38;
              }
            }
            else if (v10 == 92)
            {
              std::istream::get();
              v10 = std::istream::peek();
              if (v10 != 34)
              {
                v13 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v14, "error parsing escape characters");
                dmlc::TokenizeError::TokenizeError(v13, &v14);
              }
            }
            std::string::push_back((std::string *)a2, v10);
          }
        case '=':
          if (v5 != 1)
          {
            std::string::operator=((std::string *)a2, 61);
            std::istream::get();
          }
LABEL_11:
          *(_DWORD *)(a1 + 8) = 2;
          continue;
        case '#':
          while (1)
          {
            v6 = std::istream::peek();
            if ((v6 + 1) <= 0xE && ((1 << (v6 + 1)) & 0x4803) != 0)
              break;
            std::istream::get();
          }
          continue;
      }
    }
    else if ((i - 9) < 2 || i == 13 || i == 32)
    {
      if (v5 == 1)
        goto LABEL_11;
      goto LABEL_37;
    }
    *(_DWORD *)(a1 + 8) = 1;
    std::string::push_back((std::string *)a2, i);
LABEL_37:
    std::istream::get();
LABEL_38:
    ;
  }
  return std::istream::peek();
}

void sub_220E75158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void dmlc::Config::Insert(uint64_t a1, std::string::size_type a2, __int128 *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  std::string::size_type v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  int v45;
  std::string __p;
  unint64_t v47;
  _OWORD v48[3];
  uint64_t v49;

  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 48))
  {
    v49 = 0;
    memset(v48, 0, sizeof(v48));
    __p.__r_.__value_.__r.__words[0] = a2;
    v10 = std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (__int128 **)&__p);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 56));
    *(_OWORD *)(v10 + 56) = v48[0];
    v11 = (void *)*((_QWORD *)v10 + 10);
    *((_QWORD *)v10 + 9) = *(_QWORD *)&v48[1];
    memset(v48, 0, 24);
    if (v11)
    {
      *((_QWORD *)v10 + 11) = v11;
      operator delete(v11);
      *((_QWORD *)v10 + 10) = 0;
      *((_QWORD *)v10 + 11) = 0;
      *((_QWORD *)v10 + 12) = 0;
    }
    *((_OWORD *)v10 + 5) = *(_OWORD *)((char *)&v48[1] + 8);
    *((_QWORD *)v10 + 12) = *((_QWORD *)&v48[2] + 1);
    memset((char *)&v48[1] + 8, 0, 24);
    v10[104] = v49;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  v12 = v8 - v9;
  *(_QWORD *)&v48[0] = a2;
  v13 = std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (__int128 **)v48);
  v14 = (uint64_t *)(v13 + 56);
  v15 = *((_QWORD *)v13 + 7);
  v16 = *((_QWORD *)v13 + 8);
  if (v16 >= *((_QWORD *)v13 + 9))
  {
    v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v14, a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v14, a3);
    v17 = v16 + 24;
  }
  v18 = v12 >> 5;
  v19 = *((_QWORD *)v13 + 12);
  *((_QWORD *)v13 + 8) = v17;
  v20 = (uint64_t *)*((_QWORD *)v13 + 11);
  if ((unint64_t)v20 >= v19)
  {
    v22 = (uint64_t *)*((_QWORD *)v13 + 10);
    v23 = v20 - v22;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v24 = v19 - (_QWORD)v22;
    v25 = (uint64_t)(v19 - (_QWORD)v22) >> 2;
    if (v25 <= v23 + 1)
      v25 = v23 + 1;
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
    {
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v13 + 96), v26);
      v22 = (uint64_t *)*((_QWORD *)v13 + 10);
      v20 = (uint64_t *)*((_QWORD *)v13 + 11);
    }
    else
    {
      v27 = 0;
    }
    v28 = (uint64_t *)&v27[8 * v23];
    v29 = &v27[8 * v26];
    *v28 = v18;
    v21 = v28 + 1;
    while (v20 != v22)
    {
      v30 = *--v20;
      *--v28 = v30;
    }
    *((_QWORD *)v13 + 10) = v28;
    *((_QWORD *)v13 + 11) = v21;
    *((_QWORD *)v13 + 12) = v29;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v20 = v18;
    v21 = v20 + 1;
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3);
  *((_QWORD *)v13 + 11) = v21;
  v13[104] = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3);
  v32 = *(_QWORD *)(a1 + 40);
  v33 = *(_QWORD *)(a1 + 32);
  if (v33 >= v32)
  {
    v35 = *(_QWORD *)(a1 + 24);
    v36 = (uint64_t)(v33 - v35) >> 5;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 59)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v32 - v35) >> 4 > v37)
      v37 = (uint64_t)(v32 - v35) >> 4;
    if (v32 - v35 >= 0x7FFFFFFFFFFFFFE0)
      v38 = 0x7FFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    *(_QWORD *)&v48[2] = a1 + 40;
    if (v38 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v39 = (char *)operator new(32 * v38);
    v40 = &v39[32 * v36];
    *(_OWORD *)v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v41 = __p.__r_.__value_.__r.__words[2];
    memset(&__p, 0, sizeof(__p));
    *((_QWORD *)v40 + 2) = v41;
    *((_QWORD *)v40 + 3) = v31;
    v42 = v40 + 32;
    if (v33 == v35)
    {
      v44 = vdupq_n_s64(v33);
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v33 - 32);
        *((_QWORD *)v40 - 2) = *(_QWORD *)(v33 - 16);
        *((_OWORD *)v40 - 2) = v43;
        *(_QWORD *)(v33 - 24) = 0;
        *(_QWORD *)(v33 - 16) = 0;
        *(_QWORD *)(v33 - 32) = 0;
        *((_QWORD *)v40 - 1) = *(_QWORD *)(v33 - 8);
        v40 -= 32;
        v33 -= 32;
      }
      while (v33 != v35);
      v44 = *(int64x2_t *)(a1 + 24);
      v32 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 24) = v40;
    *(_QWORD *)(a1 + 32) = v42;
    *(int64x2_t *)((char *)v48 + 8) = v44;
    *(_QWORD *)(a1 + 40) = &v39[32 * v38];
    *((_QWORD *)&v48[1] + 1) = v32;
    *(_QWORD *)&v48[0] = v44.i64[0];
    std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v48);
    v45 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 32) = v42;
    if (v45 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v33 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v33 = v34;
    *(_QWORD *)(v33 + 24) = v47;
    *(_QWORD *)(a1 + 32) = v33 + 32;
  }
}

void sub_220E754FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  dmlc::Config::ConfigValue::~ConfigValue((dmlc::Config::ConfigValue *)&a16);
  _Unwind_Resume(a1);
}

uint64_t dmlc::Config::GetParam(uint64_t a1, const void **a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;

  if (a1 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: config_map_.find(key) != config_map_.end()", 56);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"key \"", 5);
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = (uint64_t)a2;
    else
      v10 = (uint64_t)*a2;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = (uint64_t)a2[1];
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" not found in configure", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  return *(_QWORD *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2)+ 64)- 24;
}

void sub_220E755F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t dmlc::Config::IsGenuineString(uint64_t a1, const void **a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;

  if (a1 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/config.cc");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: config_map_.find(key) != config_map_.end()", 56);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"key \"", 5);
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = (uint64_t)a2;
    else
      v10 = (uint64_t)*a2;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = (uint64_t)a2[1];
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" not found in configure", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  }
  return *(unsigned __int8 *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, a2)+ 104);
}

void sub_220E756DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

std::string *dmlc::MakeProtoStringValue@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(a2, "\"");
  v4 = *((char *)a1 + 23) < 0;
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v4)
        v7 = (uint64_t *)*a1;
      else
        v7 = a1;
      v8 = *((unsigned __int8 *)v7 + v6);
      if (v8 == 34)
        std::string::append(a2, "\\\"");
      else
        std::string::push_back(a2, v8);
      ++v6;
      v4 = *((char *)a1 + 23) < 0;
      v9 = *((unsigned __int8 *)a1 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = a1[1];
    }
    while (v6 < v9);
  }
  return std::string::append(a2, "\"");
}

void sub_220E757BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Config::ToProtoString(dmlc::Config *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int IsGenuineString;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type v12;
  _QWORD *v13;
  std::string __p;
  std::string v16;
  std::string v17;
  uint64_t v18;
  dmlc::Config *v19;
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  v18 = 0;
  v19 = this;
  dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)&v18);
  while (1)
  {
    v16.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 5;
    v16.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)&v16);
    if (v18 == v16.__r_.__value_.__r.__words[0])
      break;
    v2 = (uint64_t)v19;
LABEL_6:
    v3 = *(_QWORD *)(v2 + 24) + 32 * v18;
    v4 = *(_QWORD *)(v3 + 24);
    v5 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v2, (const void **)v3);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v16, (__int128 *)v3, (__int128 *)(*(_QWORD *)(v5 + 56) + 24 * v4));
    IsGenuineString = dmlc::Config::IsGenuineString((uint64_t)this, (const void **)&v16.__r_.__value_.__l.__data_);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v16;
    else
      v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      size = v16.__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v7, size);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
    if (IsGenuineString)
    {
      dmlc::MakeProtoStringValue((uint64_t *)&v17, &__p);
    }
    else if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else
    {
      __p = v17;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v12 = __p.__r_.__value_.__l.__size_;
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    dmlc::Config::ConfigIterator::operator++((dmlc::Config::ConfigIterator *)&v18);
  }
  v2 = (uint64_t)v19;
  if (v19 != (dmlc::Config *)v16.__r_.__value_.__l.__size_)
    goto LABEL_6;
  std::stringbuf::str();
  v20[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v20[1] = MEMORY[0x24BEDB848] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v22);
}

void sub_220E75A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Config::begin@<X0>(dmlc::Config *this@<X0>, dmlc::Config::ConfigIterator *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = this;
  return dmlc::Config::ConfigIterator::FindNextIndex(a2);
}

BOOL dmlc::Config::ConfigIterator::operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

_QWORD *dmlc::Config::end@<X0>(dmlc::Config *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 5;
  a2[1] = (uint64_t)this;
  return dmlc::Config::ConfigIterator::FindNextIndex((dmlc::Config::ConfigIterator *)a2);
}

std::string *dmlc::Config::ConfigIterator::operator*@<X0>(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;

  v3 = *(_QWORD *)(a1[1] + 24) + 32 * *a1;
  v4 = *(_QWORD *)(v3 + 24);
  v5 = (__int128 *)(*(_QWORD *)(std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1[1], (const void **)v3)+ 56)+ 24 * v4);
  return std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (__int128 *)v3, v5);
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::operator++(dmlc::Config::ConfigIterator *this)
{
  if (*(_QWORD *)this < (unint64_t)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                    - *(_QWORD *)(*((_QWORD *)this + 1) + 24)) >> 5))
    ++*(_QWORD *)this;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::ConfigIterator(dmlc::Config::ConfigIterator *this, uint64_t a2, const dmlc::Config *a3)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  dmlc::Config::ConfigIterator::FindNextIndex(this);
  return this;
}

void dmlc::Config::ConfigValue::~ConfigValue(dmlc::Config::ConfigValue *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_QWORD *dmlc::Config::ConfigIterator::FindNextIndex(dmlc::Config::ConfigIterator *this)
{
  _QWORD *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)this;
  for (result = (_QWORD *)*((_QWORD *)this + 1); ; result = (_QWORD *)*((_QWORD *)this + 1))
  {
    v4 = result[3];
    if (v3 >= (result[4] - v4) >> 5)
      break;
    v5 = v4 + 32 * v3;
    v6 = *(_QWORD *)(v5 + 24);
    result = (_QWORD *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)result, (const void **)v5);
    if (*(_QWORD *)(result[10] + 8 * v6) == *(_QWORD *)this)
      break;
    v3 = *(_QWORD *)this + 1;
    *(_QWORD *)this = v3;
  }
  return result;
}

_QWORD *dmlc::Config::ConfigIterator::ConfigIterator(_QWORD *this, const dmlc::Config::ConfigIterator *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  return this;
}

{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  return this;
}

dmlc::Config::ConfigIterator *dmlc::Config::ConfigIterator::operator++@<X0>(dmlc::Config::ConfigIterator *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *a2 = *(_QWORD *)this;
  a2[1] = v2;
  return dmlc::Config::ConfigIterator::operator++(this);
}

BOOL dmlc::Config::ConfigIterator::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

_QWORD *dmlc::TokenizeError::TokenizeError(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24E6B89C0;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_220E75CDC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void dmlc::TokenizeError::~TokenizeError(std::exception *this)
{
  dmlc::TokenizeError::~TokenizeError(this);
  JUMPOUT(0x227667068);
}

{
  this->__vftable = (std::exception_vtbl *)&off_24E6B89C0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t dmlc::TokenizeError::what(dmlc::TokenizeError *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_220E75E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)(a1 + 24);
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

char *std::__tree<std::__value_type<std::string,dmlc::Config::ConfigValue>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::Config::ConfigValue>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::Config::ConfigValue>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  char *v5;
  uint64_t **v6;
  char **v7;
  char **v8;
  const void **v10;
  char *v11;
  __int128 *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (char **)(a1 + 1);
  v8 = (char **)(a1 + 1);
  if (!v5)
    goto LABEL_10;
  v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v10 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v13 = (char *)operator new(0x70uLL);
    v18[0] = v13;
    v18[1] = v6;
    v19 = 0;
    v14 = (std::string *)(v13 + 32);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      *((_QWORD *)v13 + 6) = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *((_QWORD *)v13 + 13) = 0;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    v19 = 1;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_220E760B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::Config::ConfigValue>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,dmlc::Config::ConfigValue>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_220E76164(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void xgboost::gbm::GBLinearModel::SaveModel(xgboost::gbm::GBLinearModel *this, xgboost::Json *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  void *__dst;
  void *v20;

  xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(v18, (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2);
  v4 = (_BYTE *)*((_QWORD *)this + 20);
  v5 = (_BYTE *)*((_QWORD *)this + 21);
  if (v5 != v4)
    memmove(__dst, v4, v5 - v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "weights");
  v6 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(v6, (uint64_t)v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v7 = *((int *)this + 36);
  v8 = (unsigned int *)operator new();
  *((_QWORD *)v8 + 1) = 0x200000000;
  v9 = v8 + 2;
  *(_QWORD *)v8 = &off_24E6BE3A8;
  *((_QWORD *)v8 + 2) = v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  std::string::basic_string[abi:ne180100]<0>(__p, "boosted_rounds");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v12 = *v11;
  *v11 = v8;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v18[0] = &unk_24E6B8A30;
  if (__dst)
  {
    v20 = __dst;
    operator delete(__dst);
  }
}

void sub_220E76340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned int *v19;
  unsigned int v21;
  unsigned int v22;

  if (a14 < 0)
    operator delete(__p);
  do
  {
    v21 = __ldxr(v19);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v19));
  if (!v22)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t *xgboost::Json::operator=<float,(xgboost::Value::ValueKind)7>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0x700000000;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &unk_24E6B8A30;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = (unsigned int *)*a1;
  *a1 = v4;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return a1;
}

_QWORD *xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6B8A30;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void xgboost::gbm::GBLinearModel::LoadModel(void **this, const xgboost::Json *a2)
{
  char *v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *__p[2];
  char v17;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "weights");
  v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v5 = *(_DWORD **)(v4 + 56);
  if (v5[3] == 7)
  {
    v6 = xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value const>(v5);
    std::vector<float>::resize((uint64_t)(this + 20), (uint64_t)(v6[3] - v6[2]) >> 2);
    v7 = (_BYTE *)v6[2];
    v8 = (_BYTE *)v6[3];
    if (v8 != v7)
      memmove(this[20], v7, v8 - v7);
  }
  else
  {
    v9 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v5);
    v11 = v9[2];
    v10 = v9[3];
    v12 = (v10 - v11) >> 3;
    std::vector<float>::resize((uint64_t)(this + 20), v12);
    if (v10 != v11)
    {
      v13 = 0;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        *((_DWORD *)this[20] + v13) = *((_DWORD *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*(_DWORD **)(v9[2] + 8 * v13))
                                      + 4);
        ++v13;
      }
      while (v12 != v13);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "boosted_rounds");
  v14 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v3 + 16), (const void **)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v3 + 24 == (char *)v14)
    v15 = 0;
  else
    v15 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v14 + 56)) + 4);
  *((_DWORD *)this + 36) = v15;
}

void sub_220E76640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::gbm::GBLinearModel::~GBLinearModel(xgboost::gbm::GBLinearModel *this)
{
  void *v2;

  *(_QWORD *)this = &off_24E6B89E8;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24E6B89E8;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::~JsonTypedArray(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24E6B8A30;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

_QWORD *xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7>::JsonTypedArray(_QWORD *a1, unint64_t a2)
{
  a1[1] = 0x700000000;
  *a1 = &unk_24E6B8A30;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<float>::resize((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_220E76794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *xgboost::Cast<xgboost::JsonTypedArray<float,(xgboost::Value::ValueKind)7> const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  int64_t v22;
  char v23;

  if (a1[3] == 7)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v18);
  v5 = std::string::insert(&v18, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v19, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x700000000;
  v15[0] = &unk_24E6B8A30;
  memset(&v15[2], 0, 24);
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v20, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22 = v11->__r_.__value_.__r.__words[2];
  v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v13 = &v21;
  else
    v13 = (__int128 *)v21;
  if (v22 >= 0)
    v14 = HIBYTE(v22);
  else
    v14 = *((_QWORD *)&v21 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
}

void sub_220E7699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v32 - 33));
  _Unwind_Resume(a1);
}

void *xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[2];
  void *v16[3];
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;
  char v24;
  void **v25;

  if (a1[3] == 4)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
  v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v20, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x400000000;
  v15[0] = off_24E6BE218;
  memset(v16, 0, sizeof(v16));
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v10 = v18;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23 = v11->__r_.__value_.__r.__words[2];
  v22 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v13 = &v22;
  else
    v13 = (__int128 *)v22;
  if (v23 >= 0)
    v14 = HIBYTE(v23);
  else
    v14 = *((_QWORD *)&v22 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  v15[0] = off_24E6BE218;
  v25 = v16;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
}

void sub_220E76C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a20 < 0)
    operator delete(__p);
  *(_QWORD *)(v40 - 56) = v39;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 56));
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v40 - 57));
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::Json>::__clear[abi:ne180100]((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *std::vector<xgboost::Json>::__clear[abi:ne180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 8)
  {
    v4 = *(unsigned int **)(i - 8);
    result = v4;
    if (v4)
    {
      v5 = result + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

void *xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(_DWORD *a1)
{
  std::string *Entry;
  _QWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;
  char v24;

  if (a1[3] == 1)
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/json.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
  xgboost::Value::TypeStr((xgboost::Value *)a1, &v19);
  v5 = std::string::insert(&v19, 0, "Invalid cast, from ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v20, " to ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v15[1] = 0x100000000;
  v15[0] = &off_24E6BE348;
  v16 = 0;
  xgboost::Value::TypeStr((xgboost::Value *)v15, __p);
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v10 = v18;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&v21, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23 = v11->__r_.__value_.__r.__words[2];
  v22 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v13 = &v22;
  else
    v13 = (__int128 *)v22;
  if (v23 >= 0)
    v14 = HIBYTE(v23);
  else
    v14 = *((_QWORD *)&v22 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v13, v14);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
}

void sub_220E76F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v30 - 33));
  _Unwind_Resume(a1);
}

size_t xgboost::common::PeekableInStream::Read(xgboost::common::PeekableInStream *this, char *__dst, size_t __n)
{
  size_t v3;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v10;
  uint64_t (***v11)(_QWORD, char *, size_t);

  v3 = __n;
  if (*((char *)this + 47) < 0)
    v6 = *((_QWORD *)this + 4);
  else
    v6 = *((unsigned __int8 *)this + 47);
  v7 = *((_QWORD *)this + 2);
  v8 = v6 - v7;
  if (v6 == v7)
    return (***((uint64_t (****)(_QWORD, char *, size_t))this + 1))(*((_QWORD *)this + 1), __dst, __n);
  v10 = (char *)this + 24;
  if (__n <= v8)
  {
    if ((*((_BYTE *)this + 47) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 4))
        v10 = (char *)*((_QWORD *)this + 3);
      else
        v10 = 0;
    }
    else if (!*((_BYTE *)this + 47))
    {
      v10 = 0;
    }
    memcpy(__dst, &v10[v7], __n);
    *((_QWORD *)this + 2) += v3;
  }
  else
  {
    if ((*((_BYTE *)this + 47) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 4))
        v10 = (char *)*((_QWORD *)this + 3);
      else
        v10 = 0;
    }
    else if (!*((_BYTE *)this + 47))
    {
      v10 = 0;
    }
    memcpy(__dst, &v10[v7], v8);
    v11 = (uint64_t (***)(_QWORD, char *, size_t))*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) += v8;
    return (**v11)(v11, &__dst[v8], v3 - v8) + v8;
  }
  return v3;
}

size_t xgboost::common::PeekableInStream::PeekRead(xgboost::common::PeekableInStream *this, void *__dst, size_t __n)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  std::string v16;
  char v17;

  v6 = (std::string *)((char *)this + 24);
  if (*((char *)this + 47) < 0)
  {
    v7 = *((_QWORD *)this + 4);
    v8 = *((_QWORD *)this + 2);
    v9 = v7 - v8;
    if (v7 - v8 >= __n)
    {
      v10 = (char *)v6->__r_.__value_.__r.__words[0];
      if (!v7)
        v10 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 47);
    v8 = *((_QWORD *)this + 2);
    v9 = v7 - v8;
    if (v7 - v8 >= __n)
    {
      if ((_DWORD)v7)
        v10 = (char *)this + 24;
      else
        v10 = 0;
LABEL_15:
      memcpy(__dst, &v10[v8], __n);
      return __n;
    }
  }
  std::string::basic_string(&v16, v6, v8, v7, (std::allocator<char> *)&v17);
  if (*((char *)this + 47) < 0)
    operator delete(v6->__r_.__value_.__l.__data_);
  *v6 = v16;
  *((_QWORD *)this + 2) = 0;
  std::string::resize(v6, __n, 0);
  if (*((char *)this + 47) < 0)
  {
    if (*((_QWORD *)this + 4))
      v11 = (std::string *)*((_QWORD *)this + 3);
    else
      v11 = 0;
  }
  else if (*((_BYTE *)this + 47))
  {
    v11 = v6;
  }
  else
  {
    v11 = 0;
  }
  v12 = (***((uint64_t (****)(_QWORD, char *, size_t))this + 1))(*((_QWORD *)this + 1), (char *)v11 + v9, __n - v9);
  std::string::resize(v6, v12 + v9, 0);
  if (*((char *)this + 47) < 0)
  {
    v13 = *((_QWORD *)this + 4);
    if (v13)
      v14 = (std::string *)*((_QWORD *)this + 3);
    else
      v14 = 0;
  }
  else
  {
    v13 = *((unsigned __int8 *)this + 47);
    if (*((_BYTE *)this + 47))
      v14 = v6;
    else
      v14 = 0;
  }
  memcpy(__dst, v14, v13);
  if (*((char *)this + 47) < 0)
    return *((_QWORD *)this + 4);
  else
    return *((unsigned __int8 *)this + 47);
}

xgboost::common::FixedSizeStream *xgboost::common::FixedSizeStream::FixedSizeStream(xgboost::common::FixedSizeStream *this, xgboost::common::PeekableInStream *a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  BOOL v8;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)this = &off_24E6B8A90;
  *((_QWORD *)this + 1) = a2;
  v4 = (std::string *)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v5 = 4096;
  do
  {
    std::string::resize(v4, v5, 0);
    v6 = v4;
    if (*((char *)this + 79) < 0)
      v6 = (std::string *)v4->__r_.__value_.__r.__words[0];
    v7 = (*(uint64_t (**)(xgboost::common::PeekableInStream *, std::string *, std::string::size_type))(*(_QWORD *)a2 + 32))(a2, v6, v5);
    v8 = v7 >= v5;
    v5 *= 2;
  }
  while (v8);
  std::string::resize(v4, v7, 0);
  return this;
}

void sub_220E77338(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &off_24E6B8AC8;
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::common::FixedSizeStream::Read(xgboost::common::FixedSizeStream *this, void *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(xgboost::common::FixedSizeStream *, void *))(*(_QWORD *)this + 32))(this, a2);
  *((_QWORD *)this + 6) += result;
  return result;
}

char *xgboost::common::FixedSizeStream::PeekRead(xgboost::common::FixedSizeStream *this, void *__dst, size_t __len)
{
  size_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = __len;
  v5 = (char *)this + 56;
  LODWORD(v6) = *((char *)this + 79);
  if ((v6 & 0x80000000) != 0)
  {
    v9 = (_QWORD *)((char *)this + 48);
    v8 = *((_QWORD *)this + 6);
    v11 = (char *)*((_QWORD *)this + 7);
    v7 = *((_QWORD *)this + 8);
    if (v7 - v8 <= __len)
    {
      v10 = &v11[v8];
      goto LABEL_9;
    }
    v5 = (char *)*((_QWORD *)this + 7);
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 79);
    v9 = (_QWORD *)((char *)this + 48);
    v8 = *((_QWORD *)this + 6);
    if (v7 - v8 <= __len)
    {
      v10 = &v5[v8];
      v11 = (char *)this + 56;
LABEL_9:
      v12 = &v11[v7];
      if (v12 != v10)
      {
        memmove(__dst, v10, v12 - v10);
        LOBYTE(v6) = *((_BYTE *)this + 79);
      }
      if ((v6 & 0x80) != 0)
      {
        v5 = (char *)*((_QWORD *)this + 7);
        v13 = &v5[*((_QWORD *)this + 6)];
        v6 = *((_QWORD *)this + 8);
      }
      else
      {
        v13 = &v5[*v9];
        v6 = v6;
      }
      return (char *)(&v5[v6] - v13);
    }
  }
  if (__len)
    memmove(__dst, &v5[v8], __len);
  return (char *)v3;
}

void xgboost::common::FixedSizeStream::Seek(xgboost::common::FixedSizeStream *this, unint64_t a2)
{
  unint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  *((_QWORD *)this + 6) = a2;
  if (*((char *)this + 79) < 0)
    v2 = *((_QWORD *)this + 8);
  else
    v2 = *((unsigned __int8 *)this + 79);
  v12 = v2;
  if (v2 < a2)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v13);
    if (v13)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.cc");
      v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: ", 14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"pointer_ <= buffer_.size()", 26);
      v7 = *(char *)(v13 + 23);
      if (v7 >= 0)
        v8 = v13;
      else
        v8 = *(_QWORD *)v13;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v13 + 23);
      else
        v9 = *(_QWORD *)(v13 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
      v11 = v13;
      v13 = 0;
      if (v11)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v11);
    }
  }
}

void sub_220E77574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

__n128 xgboost::common::FixedSizeStream::Take(uint64_t a1, uint64_t a2)
{
  __n128 result;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  if (!a2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.cc");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: out", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(__n128 *)(a1 + 56);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 72);
  *(__n128 *)a2 = result;
  *(_BYTE *)(a1 + 79) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

void sub_220E77648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::LoadSequentialFile(char *a1@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  char *v4;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  int *v18;
  char *v19;
  std::string *Entry;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  uint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  std::string::size_type v28;
  unint64_t v29;
  std::string *v30;
  unint64_t v31;
  BOOL v32;
  void *v33;
  uint64_t v34;
  unsigned __int8 v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  std::string v40;
  std::string v41;
  uint64_t v42;
  _QWORD v43[2];
  _BYTE v44[408];
  uint64_t v45[19];
  _QWORD v46[3];

  v4 = a1;
  v46[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1;
  if (a1[23] < 0)
    v6 = *(char **)a1;
  dmlc::io::URI::URI((dmlc::io::URI *)&v33, v6);
  if ((char)v35 < 0)
  {
    v7 = v34;
    if (v34 != 7)
      goto LABEL_14;
    if (*(_DWORD *)v33 ^ 0x656C6966 | *(_DWORD *)((char *)v33 + 3) ^ 0x2F2F3A65)
      goto LABEL_35;
  }
  else
  {
    v7 = v35;
    if (v35 != 7 || ((_DWORD)v33 == 1701603686 ? (v8 = *(_DWORD *)((char *)&v33 + 3) == 791624293) : (v8 = 0), !v8))
    {
LABEL_14:
      if (v7)
        goto LABEL_35;
    }
  }
  if ((a2 & 1) == 0)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    v9 = MEMORY[0x24BEDB838];
    v10 = MEMORY[0x24BEDB838] + 64;
    v11 = (_QWORD *)MEMORY[0x24BEDB7E0];
    v12 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
    v45[0] = MEMORY[0x24BEDB838] + 64;
    v43[0] = v12;
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v12 - 24)) = v13;
    v43[1] = 0;
    v14 = (std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
    std::ios_base::init(v14, v44);
    v14[1].__vftable = 0;
    v14[1].__fmtflags_ = -1;
    v43[0] = v9 + 24;
    v45[0] = v10;
    MEMORY[0x227666CA8](v44);
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)), *(_DWORD *)&v44[*(_QWORD *)(v43[0] - 24) + 16] | 4);
    if ((v44[*(_QWORD *)(v43[0] - 24) + 16] & 5) != 0)
    {
      memset(&v41, 0, sizeof(v41));
      std::operator+<char>();
      v15 = std::string::append(&v40, " failed: ");
      v16 = v15->__r_.__value_.__r.__words[0];
      v46[0] = v15->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
      v41.__r_.__value_.__r.__words[0] = v16;
      v41.__r_.__value_.__l.__size_ = v46[0];
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = v17;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v18 = __error();
      v19 = strerror(*v18);
      std::string::append(&v41, v19);
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.cc");
      v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v41;
      else
        v22 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      else
        size = v41.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
    }
    std::istream::seekg();
    std::istream::tellg();
    v24 = v42;
    std::istream::seekg();
    std::string::resize(a3, v24 + 1, 0);
    std::istream::read();
    v25 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80u) == 0)
      v26 = a3;
    else
      v26 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if ((v25 & 0x80u) != 0)
      v25 = a3->__r_.__value_.__l.__size_;
    v26->__r_.__value_.__s.__data_[v25 - 1] = 0;
    v43[0] = *v11;
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = v11[3];
    MEMORY[0x227666CB4](v44);
    std::istream::~istream();
    MEMORY[0x227666FE4](v45);
    goto LABEL_43;
  }
LABEL_35:
  if (v4[23] < 0)
    v4 = *(char **)v4;
  v27 = dmlc::Stream::Create((dmlc::Stream *)v4, "r", 0);
  v28 = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  v29 = 4096;
  a3->__r_.__value_.__r.__words[2] = 0;
  do
  {
    std::string::resize(a3, v28 + v29, 0);
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = a3;
    else
      v30 = (std::string *)a3->__r_.__value_.__r.__words[0];
    v31 = (**(uint64_t (***)(uint64_t, std::string::size_type, unint64_t))v27)(v27, (std::string::size_type)v30 + v28, v29);
    v28 += v31;
    v32 = v31 >= v29;
    v29 *= 2;
  }
  while (v32);
  std::string::resize(a3, v28, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
LABEL_43:
  if (v39 < 0)
    operator delete(__p);
  if (v37 < 0)
    operator delete(v36);
  if ((char)v35 < 0)
    operator delete(v33);
}

void sub_220E77AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::ifstream::~ifstream(&a44);
  if (*(char *)(v44 + 23) < 0)
    operator delete(*(void **)v44);
  dmlc::io::FileInfo::~FileInfo((void **)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x227666CB4](a1 + 2);
  std::istream::~istream();
  MEMORY[0x227666FE4](a1 + 53);
  return a1;
}

void xgboost::common::FileExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  _BYTE *v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  if (a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      v6 = *(_BYTE **)a1;
      v5 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
    }
    else
    {
      v5 = (_BYTE *)(a1 + *(unsigned __int8 *)(a1 + 23));
      v6 = (_BYTE *)a1;
    }
    while (v6 != v5)
    {
      *v6 = __tolower((char)*v6);
      ++v6;
    }
  }
  xgboost::common::Split((const std::string *)a1, 0x2Eu, &v8);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v9 - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9 - 24), *(_QWORD *)(v9 - 16));
  }
  else
  {
    v7 = *(_OWORD *)(v9 - 24);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 - 8);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
  v10 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_220E77CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::common::Split(const std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[12];
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v12 = 0uLL;
  v13 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v12, a2);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = a3[1];
    if (v6 >= a3[2])
    {
      v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, &v12);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v12, *((std::string::size_type *)&v12 + 1));
      }
      else
      {
        v7 = v12;
        *(_QWORD *)(v6 + 16) = v13;
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  v9[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v9[2] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227666FE4](&v11);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_220E77E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v11 - 56) = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 56));
  std::istringstream::~istringstream((uint64_t)&a9);
  if (*(char *)(v11 - 57) < 0)
    operator delete(*(void **)(v11 - 80));
  _Unwind_Resume(a1);
}

void xgboost::common::PeekableInStream::Write(xgboost::common::PeekableInStream *this, const void *a2)
{
  std::string *Entry;
  _QWORD *v3;
  char v4;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented", 15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
}

void sub_220E77EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::PeekableInStream::~PeekableInStream(void **this)
{
  *this = &off_24E6B8AC8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = &off_24E6B8AC8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x227667068);
}

void xgboost::common::FixedSizeStream::Write(xgboost::common::FixedSizeStream *this, const void *a2)
{
  std::string *Entry;
  _QWORD *v3;
  char v4;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/io.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented", 15);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v4);
}

void sub_220E77FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::common::FixedSizeStream::~FixedSizeStream(void **this)
{
  xgboost::common::FixedSizeStream::~FixedSizeStream(this);
  JUMPOUT(0x227667068);
}

{
  *this = &off_24E6B8A90;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = &off_24E6B8AC8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

dmlc::io::URI *dmlc::io::URI::URI(dmlc::io::URI *this, char *__s1)
{
  std::string *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 __dst;
  uint64_t v13;

  *((_OWORD *)this + 3) = 0u;
  v4 = (std::string *)((char *)this + 48);
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  v6 = strstr(__s1, "://");
  if (v6)
  {
    v7 = v6;
    std::string::basic_string[abi:ne180100](&__dst, __s1, v6 - __s1 + 3);
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
    *(_OWORD *)this = __dst;
    *((_QWORD *)this + 2) = v13;
    v8 = v7 + 3;
    v9 = strchr(v8, 47);
    if (v9)
    {
      v10 = v9;
      std::string::basic_string[abi:ne180100](&__dst, v8, v9 - v8);
      if (*((char *)this + 47) < 0)
        operator delete(*(void **)v5);
      *(_OWORD *)v5 = __dst;
      *((_QWORD *)v5 + 2) = v13;
      MEMORY[0x227666C18](v4, v10);
    }
    else
    {
      MEMORY[0x227666C18](v5, v8);
      std::string::operator=(v4, 47);
    }
  }
  else
  {
    MEMORY[0x227666C18](v4, __s1);
  }
  return this;
}

void sub_220E78140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_aft_obj__(xgboost::obj *this)
{
  return 0;
}

double std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::operator()()
{
  _OWORD *v0;
  double result;

  v0 = (_OWORD *)operator new();
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  *(_QWORD *)v0 = &off_24E6B8BA0;
  return result;
}

{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)v0 = &off_24E6B9868;
  return result;
}

void xgboost::obj::AFTObj::~AFTObj(xgboost::obj::AFTObj *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::AFTObj::LoadConfig(xgboost::obj::AFTObj *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "aft_loss_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::FromJson<xgboost::common::AFTParam>(v4, (xgboost::obj::AFTObj *)((char *)this + 16), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E783E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::AFTObj::SaveConfig(xgboost::obj::AFTObj *this, xgboost::Json *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  _QWORD v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "survival:aft");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::common::AFTParam>((xgboost::obj::AFTObj *)((char *)this + 16), (uint64_t)v10);
  std::string::basic_string[abi:ne180100]<0>(v8, "aft_loss_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E78530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::AFTObj::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];
  void **v3;

  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::common::AFTParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::AFTObj::GetGradient(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *ptr;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  int v27;
  float v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  int v43;
  std::string *v48;
  _QWORD *v49;
  std::string *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  float v70;
  float v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  double v77;
  double v78;
  _BOOL4 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  long double v86;
  double v87;
  BOOL v88;
  double v89;
  double v90;
  double v92;
  double v93;
  double v94;
  int v95;
  long double v96;
  double v97;
  double v98;
  _BOOL4 v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  float64x2_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  float v133;
  float v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  int v141;
  _BOOL4 v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  float64x2_t v156;
  BOOL v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  int v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  _BOOL4 v173;
  double v174;
  long double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  long double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  double v202;
  double v203;
  double v204;
  float v205;
  float v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  BOOL v213;
  double v214;
  double v215;
  double v216;
  int v217;
  _BOOL4 v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v231;
  float64x2_t v232;
  double v233;
  BOOL v234;
  double v235;
  double v236;
  double v237;
  BOOL v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  BOOL v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  BOOL v261;
  double v262;
  double v263;
  double v264;
  double v265;
  float v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  double v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  uint64_t v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  float64_t v304;
  double v305;
  float64_t v306;
  float64x2_t v307;
  uint64_t v308;
  unint64_t v309;
  std::exception_ptr v310;
  std::mutex v311;
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  v309 = ((*a2)[1] - **a2) >> 2;
  v308 = (uint64_t)(*(_QWORD *)(a3[13] + 8) - *(_QWORD *)a3[13]) >> 2;
  if (v308 != v309)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v310);
    if (v310.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/aft_obj.cu");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"info.labels_lower_bound_.Size() == ndata", 40);
      v13 = *((char *)v310.__ptr_ + 23);
      v14 = v13 >= 0 ? v310.__ptr_ : *(void **)v310.__ptr_;
      v15 = v13 >= 0 ? *((unsigned __int8 *)v310.__ptr_ + 23) : *((_QWORD *)v310.__ptr_ + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v308);
      ptr = v310.__ptr_;
      v310.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v310, (uint64_t)ptr);
    }
  }
  v308 = (uint64_t)(*(_QWORD *)(a3[14] + 8) - *(_QWORD *)a3[14]) >> 2;
  if (v308 != v309)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v310);
    if (v310.__ptr_)
    {
      v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/aft_obj.cu");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"info.labels_upper_bound_.Size() == ndata", 40);
      v22 = *((char *)v310.__ptr_ + 23);
      v23 = v22 >= 0 ? v310.__ptr_ : *(void **)v310.__ptr_;
      v24 = v22 >= 0 ? *((unsigned __int8 *)v310.__ptr_ + 23) : *((_QWORD *)v310.__ptr_ + 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v308);
      v26 = v310.__ptr_;
      v310.__ptr_ = 0;
      if (v26)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v310, (uint64_t)v26);
    }
  }
  v310.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v309, &v310);
  v27 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v28 = *(float *)(a1 + 24);
  v29 = (uint64_t *)a3[9];
  v31 = *v29;
  v30 = v29[1];
  v32 = v30 - *v29;
  if (v32)
  {
    v308 = v32 >> 2;
    if (v32 >> 2 != v309)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v310);
      if (v310.__ptr_)
      {
        v33 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
        dmlc::LogMessageFatal::Entry::Init(v33, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/aft_obj.cu");
        v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v308);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: ", 14);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"info.weights_.Size() == ndata", 29);
        v37 = *((char *)v310.__ptr_ + 23);
        v38 = v37 >= 0 ? v310.__ptr_ : *(void **)v310.__ptr_;
        v39 = v37 >= 0 ? *((unsigned __int8 *)v310.__ptr_ + 23) : *((_QWORD *)v310.__ptr_ + 1);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v38, v39);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v308);
        v42 = v310.__ptr_;
        v310.__ptr_ = 0;
        if (v42)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v310, (uint64_t)v42);
      }
    }
  }
  v43 = *(_DWORD *)(a1 + 20);
  __asm { FMOV            V0.2D, #15.0 }
  v307 = _Q0;
  if (v43 == 2)
  {
    if ((v27 & 0x80000000) == 0)
      goto LABEL_40;
    v310.__ptr_ = 0;
    v311.__m_.__sig = 850045863;
    memset(v311.__m_.__opaque, 0, sizeof(v311.__m_.__opaque));
    v287 = v309;
    if (!v309)
      goto LABEL_298;
    v115 = *(_QWORD *)*a5;
    v114 = *(_QWORD *)(*a5 + 8);
    v116 = exp(-INFINITY);
    v290 = v115;
    if (v115 || !v114)
    {
      v117 = (*a2)[1];
      v293 = **a2;
      if (v293 || !v117)
      {
        v118 = (uint64_t *)a3[13];
        v120 = *v118;
        v119 = v118[1];
        if (v120 || !v119)
        {
          v121 = (uint64_t *)a3[14];
          v123 = *v121;
          v122 = v121[1];
          if (v123 || !v122)
          {
            v124 = (uint64_t *)a3[9];
            v126 = *v124;
            v125 = v124[1];
            v282 = v126;
            if (v126 || !v125)
            {
              v127 = 0;
              v284 = (v114 - v115) >> 3;
              v270 = 1.0 - v116;
              v128 = (v117 - v293) >> 2;
              v129 = (v119 - v120) >> 2;
              v130 = (v122 - v123) >> 2;
              v279 = (v125 - v126) >> 2;
              v131 = v28;
              v276 = v131 * v131;
              v267 = 1.0 / v28;
              v299 = v28;
              while (v128 != v127 && v129 != v127 && v130 != v127)
              {
                v132 = *(float *)(v293 + 4 * v127);
                v133 = *(float *)(v120 + 4 * v127);
                v134 = *(float *)(v123 + 4 * v127);
                v135 = v134;
                v136 = log(v133);
                v137 = log(v134);
                v296 = v137;
                if (v133 == v134)
                {
                  v138 = exp((v136 - v132) / v131);
                  v139 = 0.0;
                  v140 = 0.0;
                  if (v138 != INFINITY)
                  {
                    v139 = v138 * exp(-v138);
                    v140 = (1.0 - v138) * v139;
                  }
                  v141 = 0;
                  v142 = (v136 - v132) / v131 > 0.0;
                }
                else
                {
                  v143 = 0.0;
                  if (fabs(v135) == INFINITY)
                  {
                    v144 = 1.0;
                    v141 = 1;
                    v145 = 0.0;
                    v146 = 0.0;
                  }
                  else
                  {
                    v145 = (v137 - v132) / v299;
                    v147 = exp(v145);
                    v148 = exp(-v147);
                    if (v147 == INFINITY)
                      v146 = 0.0;
                    else
                      v146 = v147 * v148;
                    v144 = 1.0 - v148;
                    v141 = 3;
                  }
                  if (v133 <= 0.0)
                  {
                    v142 = 0;
                    v141 = 2;
                    v154 = 0.0;
                  }
                  else
                  {
                    v149 = (v136 - v132) / v299;
                    v303 = v145;
                    v273 = v136;
                    v150 = v144;
                    v151 = v146;
                    v152 = exp(v149);
                    v153 = exp(-v152);
                    v146 = v151;
                    if (v152 == INFINITY)
                      v143 = 0.0;
                    else
                      v143 = v152 * v153;
                    v144 = v150;
                    v136 = v273;
                    v145 = v303;
                    v154 = 1.0 - v153;
                    v142 = v149 > 0.0;
                  }
                  if (v145 > 0.0)
                    v142 = 1;
                  v140 = v146 - v143;
                  v139 = v144 - v154;
                  v131 = v299;
                }
                v155 = v139 * v131;
                v156.f64[0] = v140 / v155;
                if (v155 < 1.0e-12 && fabs(v156.f64[0]) == INFINITY)
                {
                  switch(v141)
                  {
                    case 0:
                    case 3:
                      v157 = !v142;
                      v158 = -15.0;
                      goto LABEL_153;
                    case 1:
                      v157 = !v142;
                      v158 = -15.0;
                      v159 = 0.0;
                      goto LABEL_154;
                    case 2:
                      v157 = !v142;
                      v158 = 0.0;
LABEL_153:
                      v159 = v267;
LABEL_154:
                      if (v157)
                        v156.f64[0] = v159;
                      else
                        v156.f64[0] = v158;
                      break;
                    default:
                      v156.f64[0] = NAN;
                      break;
                  }
                }
                v304 = v156.f64[0];
                if (v133 == v134)
                {
                  v160 = (v136 - v132) / v131;
                  v161 = exp(v160);
                  v162 = 0.0;
                  if (v161 == INFINITY)
                  {
                    v163 = 0.0;
                    v164 = 0.0;
                  }
                  else
                  {
                    v164 = v161 * exp(-v161);
                    v163 = (1.0 - v161) * v164;
                    if (v161 * v161 != INFINITY)
                      v162 = v164 * (v161 * -3.0 + v161 * v161 + 1.0);
                  }
                  v156.f64[0] = v304;
                  v167 = 0;
                  v171 = -(v164 * v162 - v163 * v163);
                  v172 = v164 * (v276 * v164);
                  v173 = v160 > 0.0;
                }
                else
                {
                  v165 = 0.0;
                  if (fabs(v135) == INFINITY)
                  {
                    v166 = 1.0;
                    v167 = 1;
                    v168 = 0.0;
                    v169 = 0.0;
                    v170 = 0.0;
                  }
                  else
                  {
                    v168 = (v296 - v132) / v131;
                    v174 = exp(v168);
                    if (v174 == INFINITY)
                    {
                      v167 = 3;
                      v169 = 0.0;
                      v170 = 0.0;
                      v166 = v270;
                    }
                    else
                    {
                      v175 = exp(-v174);
                      v170 = v174 * v175;
                      v166 = 1.0 - v175;
                      v169 = (1.0 - v174) * (v174 * v175);
                      v167 = 3;
                    }
                    v156.f64[0] = v304;
                  }
                  if (v133 <= 0.0)
                  {
                    v173 = 0;
                    v167 = 2;
                    v179 = 0.0;
                    v180 = 0.0;
                  }
                  else
                  {
                    v176 = v166;
                    v177 = (v136 - v132) / v299;
                    v178 = exp(v177);
                    v179 = 0.0;
                    v180 = v270;
                    if (v178 != INFINITY)
                    {
                      v181 = exp(-v178);
                      v179 = v178 * v181;
                      v165 = (1.0 - v178) * (v178 * v181);
                      v180 = 1.0 - v181;
                    }
                    v173 = v177 > 0.0;
                    v156.f64[0] = v304;
                    v166 = v176;
                  }
                  v182 = v166 - v180;
                  v183 = v170 - v179;
                  v184 = v169 - v165;
                  v131 = v299;
                  if (v168 > 0.0)
                    v173 = 1;
                  v171 = -(v182 * v184 - v183 * v183);
                  v172 = v182 * v299 * (v182 * v299);
                }
                _NF = v172 < 1.0e-12;
                v185 = v171 / v172;
                if (_NF && fabs(v185) == INFINITY)
                {
                  if (v167 == 2)
                  {
                    v185 = 1.0e-16;
                  }
                  else
                  {
                    v185 = 1.0e-16;
                    if (v173)
                      v185 = 15.0;
                  }
                }
                if (v30 == v31)
                {
                  v186 = 1.0;
                }
                else
                {
                  if (v279 <= v127)
                    break;
                  v186 = *(float *)(v282 + 4 * v127);
                }
                if (v284 == v127)
                  break;
                v156.f64[1] = v185;
                *(float32x2_t *)(v290 + 8 * v127++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_220F61460, v156), (int8x16_t)xmmword_220F61460, vbslq_s8((int8x16_t)vcgtq_f64(v156, v307), (int8x16_t)v307, (int8x16_t)v156))), v186);
                if (v287 == v127)
                  goto LABEL_298;
              }
            }
          }
        }
      }
    }
LABEL_299:
    std::terminate();
  }
  if (v43 == 1)
  {
    if ((v27 & 0x80000000) == 0)
    {
LABEL_40:
      v48 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v310);
      dmlc::LogMessageFatal::Entry::Init(v48, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
      v49 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v310);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v310);
      return;
    }
    v310.__ptr_ = 0;
    v311.__m_.__sig = 850045863;
    memset(v311.__m_.__opaque, 0, sizeof(v311.__m_.__opaque));
    v291 = v309;
    if (!v309)
      goto LABEL_298;
    v187 = *(_QWORD *)(*a5 + 8);
    v294 = *(_QWORD *)*a5;
    if (v294 || !v187)
    {
      v188 = (*a2)[1];
      v297 = **a2;
      if (v297 || !v188)
      {
        v189 = (uint64_t *)a3[13];
        v191 = *v189;
        v190 = v189[1];
        if (v191 || !v190)
        {
          v192 = (uint64_t *)a3[14];
          v194 = *v192;
          v193 = v192[1];
          if (v194 || !v193)
          {
            v195 = (uint64_t *)a3[9];
            v197 = *v195;
            v196 = v195[1];
            v283 = v197;
            if (v197 || !v196)
            {
              v198 = 0;
              v288 = (v187 - v294) >> 3;
              v199 = (v188 - v297) >> 2;
              v200 = (v190 - v191) >> 2;
              v201 = (v193 - v194) >> 2;
              v280 = (v196 - v197) >> 2;
              v202 = v28;
              v203 = 1.0;
              v271 = 1.0 / v28;
              v277 = v202 * v202;
              v268 = -1.0 / v28;
              v285 = v28;
              while (v199 != v198 && v200 != v198 && v201 != v198)
              {
                v204 = *(float *)(v297 + 4 * v198);
                v205 = *(float *)(v191 + 4 * v198);
                v206 = *(float *)(v194 + 4 * v198);
                v207 = v206;
                v208 = log(v205);
                v209 = log(v206);
                v300 = v209;
                if (v205 == v206)
                {
                  v210 = exp((v208 - v204) / v202);
                  v211 = v210 * v210;
                  v212 = 0.0;
                  v213 = v210 == INFINITY || v211 == INFINITY;
                  v214 = 0.0;
                  if (!v213)
                    v214 = v210 / ((v210 + v203) * (v210 + v203));
                  if (v210 != INFINITY)
                  {
                    v215 = v210 + v203;
                    v216 = 0.0;
                    if (v211 != INFINITY)
                      v216 = v210 / (v215 * v215);
                    v212 = (v203 - v210) * v216 / v215;
                  }
                  v217 = 0;
                  v218 = (v208 - v204) / v202 > 0.0;
                }
                else
                {
                  v219 = 1.0;
                  v220 = 0.0;
                  if (fabs(v207) == INFINITY)
                  {
                    v217 = 1;
                    v221 = 0.0;
                    v222 = 0.0;
                  }
                  else
                  {
                    v221 = (v209 - v204) / v202;
                    v223 = exp(v221);
                    v222 = 0.0;
                    if (v223 != INFINITY && v223 * v223 != INFINITY)
                      v222 = v223 / ((v223 + 1.0) * (v223 + 1.0));
                    v217 = 3;
                    v219 = v223 == INFINITY ? 1.0 : v223 / (v223 + 1.0);
                  }
                  if (v205 <= 0.0)
                  {
                    v218 = 0;
                    v217 = 2;
                    v231 = 0.0;
                  }
                  else
                  {
                    v225 = v208;
                    v226 = v222;
                    v305 = v221;
                    v227 = v219;
                    v274 = v225;
                    v228 = (v225 - v204) / v202;
                    v229 = exp(v228);
                    if (v229 != INFINITY && v229 * v229 != INFINITY)
                      v220 = v229 / ((v229 + 1.0) * (v229 + 1.0));
                    v231 = 1.0;
                    v219 = v227;
                    v222 = v226;
                    if (v229 != INFINITY)
                      v231 = v229 / (v229 + 1.0);
                    v218 = v228 > 0.0;
                    v202 = v285;
                    v221 = v305;
                    v208 = v274;
                  }
                  if (v221 > 0.0)
                    v218 = 1;
                  v212 = v222 - v220;
                  v214 = v219 - v231;
                  v203 = 1.0;
                }
                v232.f64[0] = v212 / (v214 * v202);
                if (v214 * v202 < 1.0e-12 && fabs(v232.f64[0]) == INFINITY)
                {
                  switch(v217)
                  {
                    case 0:
                    case 3:
                      v233 = -1.0;
                      if (!v218)
                        v233 = v203;
                      v232.f64[0] = v233 / v202;
                      break;
                    case 1:
                      v234 = !v218;
                      v235 = 0.0;
                      v236 = v268;
                      goto LABEL_250;
                    case 2:
                      v234 = !v218;
                      v235 = v271;
                      v236 = 0.0;
LABEL_250:
                      if (v234)
                        v232.f64[0] = v235;
                      else
                        v232.f64[0] = v236;
                      break;
                    default:
                      v232.f64[0] = NAN;
                      break;
                  }
                }
                v306 = v232.f64[0];
                if (v205 == v206)
                {
                  v237 = exp((v208 - v204) / v202);
                  v238 = v237 == INFINITY;
                  if (v237 * v237 == INFINITY)
                    v238 = 1;
                  v239 = 0.0;
                  v240 = 0.0;
                  if (!v238)
                    v240 = v237 / ((v237 + v203) * (v237 + v203));
                  if (v237 == INFINITY)
                  {
                    v241 = 0.0;
                    v232.f64[0] = v306;
                  }
                  else
                  {
                    v247 = v237 + v203;
                    v248 = v203 - v237;
                    v232.f64[0] = v306;
                    if (v237 * v237 == INFINITY)
                    {
                      v241 = v248 * 0.0 / v247;
                    }
                    else
                    {
                      v252 = v237 / (v247 * v247);
                      v241 = v248 * v252 / v247;
                      if (!v238)
                        v239 = (v237 * -4.0 + v237 * v237 + v203) * v252 / (v247 * v247);
                    }
                  }
                  v253 = -(v240 * v239 - v241 * v241);
                  v254 = v240 * (v277 * v240);
                }
                else
                {
                  v242 = fabs(v207);
                  v243 = 1.0;
                  v244 = 0.0;
                  if (v242 == INFINITY)
                  {
                    v245 = 0.0;
                    v246 = 0.0;
                  }
                  else
                  {
                    v249 = exp((v300 - v204) / v202);
                    v250 = v249 * v249;
                    v245 = 0.0;
                    v251 = v249 == INFINITY || v250 == INFINITY;
                    v246 = 0.0;
                    if (!v251)
                      v246 = v249 / ((v249 + v203) * (v249 + v203));
                    if (v249 == INFINITY)
                    {
                      v232.f64[0] = v306;
                    }
                    else
                    {
                      v255 = v249 + v203;
                      v256 = 0.0;
                      v232.f64[0] = v306;
                      if (v250 != INFINITY)
                        v256 = v249 / (v255 * v255);
                      v243 = v249 / v255;
                      v245 = (v203 - v249) * v256 / v255;
                    }
                  }
                  v257 = 0.0;
                  v258 = 0.0;
                  if (v205 > 0.0)
                  {
                    v259 = exp((v208 - v204) / v285);
                    v260 = v259 * v259;
                    v261 = v259 == INFINITY || v260 == INFINITY;
                    v257 = 0.0;
                    if (!v261)
                      v257 = v259 / ((v259 + v203) * (v259 + v203));
                    v258 = 1.0;
                    if (v259 == INFINITY)
                    {
                      v232.f64[0] = v306;
                    }
                    else
                    {
                      v262 = v259 + v203;
                      v263 = 0.0;
                      v232.f64[0] = v306;
                      if (v260 != INFINITY)
                        v263 = v259 / (v262 * v262);
                      v258 = v259 / v262;
                      v244 = (v203 - v259) * v263 / v262;
                    }
                  }
                  v264 = v245 - v244;
                  v202 = v285;
                  v253 = -((v243 - v258) * v264 - (v246 - v257) * (v246 - v257));
                  v254 = (v243 - v258) * v285 * ((v243 - v258) * v285);
                }
                v265 = v253 / v254;
                if (v254 < 1.0e-12 && fabs(v265) == INFINITY)
                  v265 = 1.0e-16;
                if (v30 == v31)
                {
                  v266 = 1.0;
                }
                else
                {
                  if (v280 <= v198)
                    goto LABEL_299;
                  v266 = *(float *)(v283 + 4 * v198);
                }
                if (v288 == v198)
                  break;
                v232.f64[1] = v265;
                *(float32x2_t *)(v294 + 8 * v198++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_220F61460, v232), (int8x16_t)xmmword_220F61460, vbslq_s8((int8x16_t)vcgtq_f64(v232, v307), (int8x16_t)v307, (int8x16_t)v232))), v266);
                if (v291 == v198)
                  goto LABEL_298;
              }
            }
          }
        }
      }
    }
    goto LABEL_299;
  }
  if (v43)
  {
    v50 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v310);
    dmlc::LogMessageFatal::Entry::Init(v50, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/aft_obj.cu");
    v51 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v310);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Unrecognized distribution", 25);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v310);
    return;
  }
  if ((v27 & 0x80000000) == 0)
    goto LABEL_40;
  v310.__ptr_ = 0;
  v311.__m_.__sig = 850045863;
  memset(v311.__m_.__opaque, 0, sizeof(v311.__m_.__opaque));
  v289 = v309;
  if (v309)
  {
    v52 = *(_QWORD *)(*a5 + 8);
    v292 = *(_QWORD *)*a5;
    if (v292 || !v52)
    {
      v53 = (*a2)[1];
      v295 = **a2;
      if (v295 || !v53)
      {
        v54 = (uint64_t *)a3[13];
        v56 = *v54;
        v55 = v54[1];
        if (v56 || !v55)
        {
          v57 = (uint64_t *)a3[14];
          v59 = *v57;
          v58 = v57[1];
          if (v59 || !v58)
          {
            v60 = (uint64_t *)a3[9];
            v62 = *v60;
            v61 = v60[1];
            v281 = v62;
            if (v62 || !v61)
            {
              v63 = 0;
              v64 = (v52 - v292) >> 3;
              v65 = (v53 - v295) >> 2;
              v66 = (v55 - v56) >> 2;
              v67 = (v58 - v59) >> 2;
              v278 = (v61 - v62) >> 2;
              v68 = v28;
              v275 = v68 * v68;
              v269 = 1.0 / (v68 * v68);
              v286 = v28;
              while (v65 != v63 && v66 != v63 && v67 != v63)
              {
                v69 = *(float *)(v295 + 4 * v63);
                v70 = *(float *)(v56 + 4 * v63);
                v71 = *(float *)(v59 + 4 * v63);
                v72 = v71;
                v73 = log(v70);
                v74 = log(v71);
                v298 = v74;
                if (v70 == v71)
                {
                  v75 = (v73 - v69) / v68;
                  v76 = 0;
                  v77 = exp(v75 * v75 * -0.5) / 2.50662827;
                  v78 = -(v75 * v77);
                  v79 = v75 > 0.0;
                }
                else
                {
                  v80 = 0.0;
                  if (fabs(v72) == INFINITY)
                  {
                    v81 = 1.0;
                    v76 = 1;
                    v82 = 0.0;
                    v301 = 0.0;
                  }
                  else
                  {
                    v82 = (v74 - v69) / v68;
                    v301 = exp(-(v82 * v82) * 0.5) / 2.50662827;
                    v81 = (erf(v82 / 1.41421356) + 1.0) * 0.5;
                    v76 = 3;
                  }
                  if (v70 <= 0.0)
                  {
                    v79 = 0;
                    v76 = 2;
                    v87 = 0.0;
                  }
                  else
                  {
                    v83 = (v73 - v69) / v286;
                    v272 = v69;
                    v84 = v73;
                    v85 = v81;
                    v80 = exp(-(v83 * v83) * 0.5) / 2.50662827;
                    v86 = erf(v83 / 1.41421356);
                    v81 = v85;
                    v73 = v84;
                    v69 = v272;
                    v87 = (v86 + 1.0) * 0.5;
                    v88 = v83 <= 0.0;
                    v68 = v286;
                    v79 = !v88;
                  }
                  if (v82 > 0.0)
                    v79 = 1;
                  v78 = v301 - v80;
                  v77 = v81 - v87;
                }
                v89 = v77 * v68;
                v90 = v78 / v89;
                if (v89 < 1.0e-12 && fabs(v90) == INFINITY)
                {
                  switch(v76)
                  {
                    case 0:
                    case 3:
                      _ZF = !v79;
                      v92 = 15.0;
                      v93 = -15.0;
                      goto LABEL_79;
                    case 1:
                      if (v79)
                        v90 = -15.0;
                      else
                        v90 = 0.0;
                      break;
                    case 2:
                      _ZF = !v79;
                      v92 = 15.0;
                      v93 = 0.0;
LABEL_79:
                      if (_ZF)
                        v90 = v92;
                      else
                        v90 = v93;
                      break;
                    default:
                      v90 = NAN;
                      break;
                  }
                }
                v302 = v90;
                if (v70 == v71)
                {
                  v94 = (v73 - v69) / v68;
                  v95 = 0;
                  v96 = exp(v94 * v94 * -0.5) / 2.50662827;
                  v97 = -(v96 * ((v94 * v94 + -1.0) * v96) - -(v94 * v96) * -(v94 * v96));
                  v98 = v96 * (v275 * v96);
                  v99 = v94 > 0.0;
                }
                else
                {
                  v100 = 0.0;
                  if (fabs(v72) == INFINITY)
                  {
                    v101 = 1.0;
                    v95 = 1;
                    v102 = 0.0;
                    v103 = 0.0;
                    v104 = 0.0;
                  }
                  else
                  {
                    v102 = (v298 - v69) / v68;
                    v104 = exp(-(v102 * v102) * 0.5) / 2.50662827;
                    v101 = (erf(v102 / 1.41421356) + 1.0) * 0.5;
                    v103 = -(v102 * v104);
                    v95 = 3;
                  }
                  if (v70 <= 0.0)
                  {
                    v99 = 0;
                    v95 = 2;
                    v107 = 0.0;
                    v108 = 0.0;
                    v105 = v286;
                  }
                  else
                  {
                    v105 = v286;
                    v106 = (v73 - v69) / v286;
                    v107 = exp(-(v106 * v106) * 0.5) / 2.50662827;
                    v108 = (erf(v106 / 1.41421356) + 1.0) * 0.5;
                    v100 = -(v106 * v107);
                    v99 = v106 > 0.0;
                  }
                  v109 = v101 - v108;
                  v110 = v109 * v105;
                  if (v102 > 0.0)
                    v99 = 1;
                  v97 = -(v109 * (v103 - v100) - (v104 - v107) * (v104 - v107));
                  v98 = v110 * v110;
                  v68 = v105;
                }
                v111 = v97 / v98;
                if (v98 >= 1.0e-12)
                {
                  v112.f64[0] = v302;
                }
                else
                {
                  v112.f64[0] = v302;
                  if (fabs(v111) == INFINITY)
                  {
                    switch(v95)
                    {
                      case 0:
                      case 3:
                        v111 = v269;
                        break;
                      case 1:
                        v111 = 1.0e-16;
                        if (v99)
                          v111 = v269;
                        break;
                      case 2:
                        v111 = 1.0e-16;
                        if (!v99)
                          v111 = v269;
                        break;
                      default:
                        v111 = NAN;
                        break;
                    }
                  }
                }
                if (v30 == v31)
                {
                  v113 = 1.0;
                }
                else
                {
                  if (v278 <= v63)
                    goto LABEL_299;
                  v113 = *(float *)(v281 + 4 * v63);
                }
                if (v64 == v63)
                  break;
                v112.f64[1] = v111;
                *(float32x2_t *)(v292 + 8 * v63++) = vmul_n_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)xmmword_220F61460, v112), (int8x16_t)xmmword_220F61460, vbslq_s8((int8x16_t)vcgtq_f64(v112, v307), (int8x16_t)v307, (int8x16_t)v112))), v113);
                if (v289 == v63)
                  goto LABEL_298;
              }
            }
          }
        }
      }
    }
    goto LABEL_299;
  }
LABEL_298:
  dmlc::OMPException::Rethrow(&v310);
  std::mutex::~mutex(&v311);
  std::exception_ptr::~exception_ptr(&v310);
}

void sub_220E79C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,std::exception_ptr a30)
{
  std::mutex *v30;

  std::mutex::~mutex(v30);
  std::exception_ptr::~exception_ptr(&a30);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::AFTObj::DefaultEvalMetric(xgboost::obj::AFTObj *this)
{
  return "aft-nloglik";
}

void xgboost::obj::AFTObj::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  std::exception_ptr v6;
  std::mutex v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = **a2;
  v2 = (*a2)[1];
  v6.__ptr_ = 0;
  v7.__m_.__sig = 850045863;
  memset(v7.__m_.__opaque, 0, sizeof(v7.__m_.__opaque));
  if (v2 != v3)
  {
    if (v3)
      v4 = 1;
    else
      v4 = v2 == 0;
    if (v4)
    {
      v5 = v2 - v3;
      while (v5)
      {
        *v3 = expf(*v3);
        ++v3;
        if (!--v5)
          goto LABEL_10;
      }
    }
    std::terminate();
  }
LABEL_10:
  dmlc::OMPException::Rethrow(&v6);
  std::mutex::~mutex(&v7);
  std::exception_ptr::~exception_ptr(&v6);
}

void sub_220E79DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::AFTObj::Task(xgboost::obj::AFTObj *this)
{
  return 3;
}

void xgboost::FromJson<xgboost::common::AFTParam>(_DWORD **a1@<X0>, xgboost::common::AFTParam *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*a1);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)v5[2];
  v7 = v5 + 3;
  if (v6 != v5 + 3)
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(a2, (uint64_t)&v13, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E79EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::common::AFTParam *this@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(this, a2, a3);
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    v6 = xgboost::common::AFTParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)this, *(_QWORD **)a2, (_QWORD *)(a2 + 8), a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E79F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::map<std::string,std::string>>(xgboost::common::AFTParam *a1@<X0>, uint64_t a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  void *v6;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v6 = xgboost::common::AFTParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)v6, (uint64_t)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8), 0, a3, 0);
}

void sub_220E7A000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::common::AFTParam>(xgboost::common::AFTParam *a1@<X0>, uint64_t a2@<X8>)
{
  dmlc::parameter::ParamManager *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  std::vector<std::pair<std::string, std::string>> v10;
  char v11;
  _QWORD **v12;
  _QWORD *v13[2];
  std::vector<std::pair<std::string, std::string>> *v14;

  *(_QWORD *)(a2 + 8) = 0x300000000;
  *(_QWORD *)a2 = &off_24E6BE1D0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = (dmlc::parameter::ParamManager *)xgboost::common::AFTParam::__MANAGER__(a1);
  dmlc::parameter::ParamManager::GetDict(v4, a1, &v10);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v12, (const void **)&v10.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v10.__end_->first.__r_.__value_.__l.__data_);
  v14 = &v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v5 = v12;
  if (v12 != v13)
  {
    do
    {
      xgboost::JsonString::JsonString(&v10, (__int128 *)(v5 + 7));
      v14 = (std::vector<std::pair<std::string, std::string>> *)(v5 + 4);
      v6 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 16), (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
      xgboost::Json::operator=(v6 + 7, (uint64_t)&v10);
      v10.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v11 < 0)
        operator delete(v10.__end_cap_.__value_);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_220E7A16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::common::AFTParam *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::common::AFTParam::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220E7A25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::common::AFTParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::common::AFTParam *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::common::AFTParam::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220E7A2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::GetCfsCPUCount(xgboost::common *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_elementwise_metric__(xgboost::metric *this)
{
  return 0;
}

_QWORD *std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B8CA8;
  return result;
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  double *v58;
  double v59;
  double *v60;
  double v61;
  void *Engine;
  double v63;
  uint64_t v65;
  void *v66;
  void *v67;
  void *__p;
  void *v69;
  _QWORD v70[2];
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD v77[2];
  std::exception_ptr v78;
  std::mutex v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v70[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v70[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v78);
    if (v78.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v78.__ptr_ + 23);
      v13 = v12 >= 0 ? v78.__ptr_ : *(void **)v78.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v78.__ptr_ + 23) : *((_QWORD *)v78.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
      ptr = v78.__ptr_;
      v78.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v70[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v70[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v78);
      if (v78.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v78.__ptr_ + 23);
        v36 = v35 >= 0 ? v78.__ptr_ : *(void **)v78.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v78.__ptr_ + 23) : *((_QWORD *)v78.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
        v39 = v78.__ptr_;
        v78.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v65 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v65) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v65 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v72 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v73 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v65 = 0;
    v26 = 0;
    v27 = 0;
    v72 = 0;
    v73 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v76 = v20;
  v71[0] = v28;
  v71[1] = v29;
  v70[0] = v29;
  v70[1] = 1;
  v74 = v26;
  v75 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v78.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v78);
    v78.__ptr_ = 0;
    std::vector<double>::vector(&v66, 1uLL, &v78);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v78.__ptr_ = 0;
    v79.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v79.__m_.__opaque, 0, sizeof(v79.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v77[0] = 2;
        v77[1] = v71;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v77, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_57;
          v55 = *(float *)(v65 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        v57 = *(float *)(v23 + 4 * v56) - *(float *)(v22 + 4 * v51);
        *(double *)__p = *(double *)__p + (float)(v55 * (float)(v57 * v57));
        v49 = *(double *)v66 + v55;
        *(double *)v66 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v78);
    std::mutex::~mutex(&v79);
    std::exception_ptr::~exception_ptr(&v78);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v69)
    {
      v58 = (double *)__p;
      do
      {
        v59 = *v58++;
        v46 = v46 + v59;
      }
      while (v58 != v69);
    }
    if (v66 != v67)
    {
      v45 = 0.0;
      v60 = (double *)v66;
      do
      {
        v61 = *v60++;
        v45 = v45 + v61;
      }
      while (v60 != v67);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
      v44 = __p;
    }
    if (v44)
    {
      v69 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v78);
    v45 = 0.0;
    v46 = 0.0;
  }
  v78.__ptr_ = *(void **)&v46;
  *(double *)&v79.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v78, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v78.__ptr_;
    v45 = *(double *)&v79.__m_.__sig;
  }
  v63 = 1.0;
  if (v45 != 0.0)
    v63 = v45;
  return sqrt(v46 / v63);
}

void sub_220E7A980()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7A9A4);
}

void sub_220E7A98C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7A9A4);
}

void sub_220E7A99C()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7A9CCLL);
}

void sub_220E7A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7AA38(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSE>::Name()
{
  return "rmse";
}

_QWORD *std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B8D88;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6BA660;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  void *Engine;
  double v65;
  uint64_t v67;
  void *v68;
  void *v69;
  void *__p;
  void *v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD v79[2];
  std::exception_ptr v80;
  std::mutex v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v72[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v72[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v80);
    if (*(double *)&v80.__ptr_ != 0.0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v80.__ptr_ + 23);
      v13 = v12 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
      ptr = v80.__ptr_;
      *(double *)&v80.__ptr_ = 0.0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v72[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v72[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v80);
      if (*(double *)&v80.__ptr_ != 0.0)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v80.__ptr_ + 23);
        v36 = v35 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
        v39 = v80.__ptr_;
        *(double *)&v80.__ptr_ = 0.0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v67 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v67) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v67 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v74 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v75 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v67 = 0;
    v26 = 0;
    v27 = 0;
    v74 = 0;
    v75 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v78 = v20;
  v73[0] = v28;
  v73[1] = v29;
  v72[0] = v29;
  v72[1] = 1;
  v76 = v26;
  v77 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    *(double *)&v80.__ptr_ = 0.0;
    std::vector<double>::vector(&__p, 1uLL, &v80);
    *(double *)&v80.__ptr_ = 0.0;
    std::vector<double>::vector(&v68, 1uLL, &v80);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    *(double *)&v80.__ptr_ = 0.0;
    v81.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v81.__m_.__opaque, 0, sizeof(v81.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v79[0] = 2;
        v79[1] = v73;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v79, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_57;
          v55 = *(float *)(v67 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        v57 = *(float *)(v22 + 4 * v51);
        v58 = log1pf(*(float *)(v23 + 4 * v56));
        v59 = log1pf(v57);
        *(double *)__p = *(double *)__p + (float)(v55 * (float)((float)(v58 - v59) * (float)(v58 - v59)));
        v49 = *(double *)v68 + v55;
        *(double *)v68 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v80);
    std::mutex::~mutex(&v81);
    std::exception_ptr::~exception_ptr(&v80);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v71)
    {
      v60 = (double *)__p;
      do
      {
        v61 = *v60++;
        v46 = v46 + v61;
      }
      while (v60 != v71);
    }
    if (v68 != v69)
    {
      v45 = 0.0;
      v62 = (double *)v68;
      do
      {
        v63 = *v62++;
        v45 = v45 + v63;
      }
      while (v62 != v69);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
      v44 = __p;
    }
    if (v44)
    {
      v71 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
    v45 = 0.0;
    v46 = 0.0;
  }
  *(double *)&v80.__ptr_ = v46;
  *(double *)&v81.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v80, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v80.__ptr_;
    v45 = *(double *)&v81.__m_.__sig;
  }
  v65 = 1.0;
  if (v45 != 0.0)
    v65 = v45;
  return sqrt(v46 / v65);
}

void sub_220E7B104()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7B128);
}

void sub_220E7B110()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7B128);
}

void sub_220E7B120()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7B150);
}

void sub_220E7B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7B1BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowRMSLE>::Name()
{
  return "rmsle";
}

_QWORD *std::__function::__func<xgboost::metric::$_2,std::allocator<xgboost::metric::$_2>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B8E68;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6BA758;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  double *v57;
  double v58;
  double *v59;
  double v60;
  void *Engine;
  double v62;
  uint64_t v64;
  void *v65;
  void *v66;
  void *__p;
  void *v68;
  _QWORD v69[2];
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD v76[2];
  std::exception_ptr v77;
  std::mutex v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v69[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v69[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v77);
    if (v77.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v77.__ptr_ + 23);
      v13 = v12 >= 0 ? v77.__ptr_ : *(void **)v77.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v77.__ptr_ + 23) : *((_QWORD *)v77.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v69);
      ptr = v77.__ptr_;
      v77.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v69[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v69[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v77);
      if (v77.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v77.__ptr_ + 23);
        v36 = v35 >= 0 ? v77.__ptr_ : *(void **)v77.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v77.__ptr_ + 23) : *((_QWORD *)v77.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v69);
        v39 = v77.__ptr_;
        v77.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v64 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v64) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v64 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v71 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v72 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v64 = 0;
    v26 = 0;
    v27 = 0;
    v71 = 0;
    v72 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v75 = v20;
  v70[0] = v28;
  v70[1] = v29;
  v69[0] = v29;
  v69[1] = 1;
  v73 = v26;
  v74 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v77.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v77);
    v77.__ptr_ = 0;
    std::vector<double>::vector(&v65, 1uLL, &v77);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v77.__ptr_ = 0;
    v78.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v78.__m_.__opaque, 0, sizeof(v78.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v76[0] = 2;
        v76[1] = v70;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v76, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_57;
          v55 = *(float *)(v64 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        *(double *)__p = *(double *)__p + (float)(v55 * vabds_f32(*(float *)(v23 + 4 * v56), *(float *)(v22 + 4 * v51)));
        v49 = *(double *)v65 + v55;
        *(double *)v65 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v77);
    std::mutex::~mutex(&v78);
    std::exception_ptr::~exception_ptr(&v77);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v68)
    {
      v57 = (double *)__p;
      do
      {
        v58 = *v57++;
        v46 = v46 + v58;
      }
      while (v57 != v68);
    }
    if (v65 != v66)
    {
      v45 = 0.0;
      v59 = (double *)v65;
      do
      {
        v60 = *v59++;
        v45 = v45 + v60;
      }
      while (v59 != v66);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
      v44 = __p;
    }
    if (v44)
    {
      v68 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v77);
    v45 = 0.0;
    v46 = 0.0;
  }
  v77.__ptr_ = *(void **)&v46;
  *(double *)&v78.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v77, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v77.__ptr_;
    v45 = *(double *)&v78.__m_.__sig;
  }
  v62 = 1.0;
  if (v45 != 0.0)
    v62 = v45;
  return v46 / v62;
}

void sub_220E7B868()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7B88CLL);
}

void sub_220E7B874()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7B88CLL);
}

void sub_220E7B884()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7B8B4);
}

void sub_220E7B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7B920(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAE>::Name()
{
  return "mae";
}

_QWORD *std::__function::__func<xgboost::metric::$_3,std::allocator<xgboost::metric::$_3>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B8F48;
  return result;
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  double *v57;
  double v58;
  double *v59;
  double v60;
  void *Engine;
  double v62;
  uint64_t v64;
  void *v65;
  void *v66;
  void *__p;
  void *v68;
  _QWORD v69[2];
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD v76[2];
  std::exception_ptr v77;
  std::mutex v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v69[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v69[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v77);
    if (v77.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v77.__ptr_ + 23);
      v13 = v12 >= 0 ? v77.__ptr_ : *(void **)v77.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v77.__ptr_ + 23) : *((_QWORD *)v77.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v69);
      ptr = v77.__ptr_;
      v77.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v69[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v69[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v77);
      if (v77.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v69);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v77.__ptr_ + 23);
        v36 = v35 >= 0 ? v77.__ptr_ : *(void **)v77.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v77.__ptr_ + 23) : *((_QWORD *)v77.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v69);
        v39 = v77.__ptr_;
        v77.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v64 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v64) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v64 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v71 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v72 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v64 = 0;
    v26 = 0;
    v27 = 0;
    v71 = 0;
    v72 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v75 = v20;
  v70[0] = v28;
  v70[1] = v29;
  v69[0] = v29;
  v69[1] = 1;
  v73 = v26;
  v74 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v77.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v77);
    v77.__ptr_ = 0;
    std::vector<double>::vector(&v65, 1uLL, &v77);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v77.__ptr_ = 0;
    v78.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v78.__m_.__opaque, 0, sizeof(v78.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v76[0] = 2;
        v76[1] = v70;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v76, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_57;
          v55 = *(float *)(v64 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        *(double *)__p = *(double *)__p
                       + (float)(v55
                               * fabsf((float)(*(float *)(v23 + 4 * v56) - *(float *)(v22 + 4 * v51))/ *(float *)(v23 + 4 * v56)));
        v49 = *(double *)v65 + v55;
        *(double *)v65 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v77);
    std::mutex::~mutex(&v78);
    std::exception_ptr::~exception_ptr(&v77);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v68)
    {
      v57 = (double *)__p;
      do
      {
        v58 = *v57++;
        v46 = v46 + v58;
      }
      while (v57 != v68);
    }
    if (v65 != v66)
    {
      v45 = 0.0;
      v59 = (double *)v65;
      do
      {
        v60 = *v59++;
        v45 = v45 + v60;
      }
      while (v59 != v66);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
      v44 = __p;
    }
    if (v44)
    {
      v68 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v77);
    v45 = 0.0;
    v46 = 0.0;
  }
  v77.__ptr_ = *(void **)&v46;
  *(double *)&v78.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v77, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v77.__ptr_;
    v45 = *(double *)&v78.__m_.__sig;
  }
  v62 = 1.0;
  if (v45 != 0.0)
    v62 = v45;
  return v46 / v62;
}

void sub_220E7BFD4()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7BFF8);
}

void sub_220E7BFE0()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7BFF8);
}

void sub_220E7BFF0()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7C020);
}

void sub_220E7C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7C08C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowMAPE>::Name()
{
  return "mape";
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  double *v64;
  double v65;
  double *v66;
  double v67;
  void *Engine;
  double v69;
  uint64_t v71;
  void *v72;
  void *v73;
  void *__p;
  void *v75;
  _QWORD v76[2];
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD v83[2];
  std::exception_ptr v84;
  std::mutex v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v76[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v76[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v84);
    if (v84.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v76);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v76);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v84.__ptr_ + 23);
      v13 = v12 >= 0 ? v84.__ptr_ : *(void **)v84.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v84.__ptr_ + 23) : *((_QWORD *)v84.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v76);
      ptr = v84.__ptr_;
      v84.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v84, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v76[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v76[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v84);
      if (v84.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v76);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v76);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v84.__ptr_ + 23);
        v36 = v35 >= 0 ? v84.__ptr_ : *(void **)v84.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v84.__ptr_ + 23) : *((_QWORD *)v84.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v76);
        v39 = v84.__ptr_;
        v84.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v84, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v71 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v71) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v71 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v78 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v79 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v71 = 0;
    v26 = 0;
    v27 = 0;
    v78 = 0;
    v79 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v82 = v20;
  v77[0] = v28;
  v77[1] = v29;
  v76[0] = v29;
  v76[1] = 1;
  v80 = v26;
  v81 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v84.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v84);
    v84.__ptr_ = 0;
    std::vector<double>::vector(&v72, 1uLL, &v84);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v84.__ptr_ = 0;
    v85.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v85.__m_.__opaque, 0, sizeof(v85.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v83[0] = 2;
        v83[1] = v77;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v83, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_66;
          v55 = *(float *)(v71 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_66:
          std::terminate();
        v57 = *(float *)(v23 + 4 * v56);
        v58 = *(float *)(v22 + 4 * v51);
        v59 = 0.0;
        v60 = 0.0;
        if (v57 != 0.0)
        {
          if (v58 >= 1.0e-16)
            v61 = *(float *)(v22 + 4 * v51);
          else
            v61 = 1.0e-16;
          v60 = -(float)(v57 * logf(v61));
        }
        v62 = 1.0 - v57;
        if (v62 != 0.0)
        {
          v63 = 1.0 - v58;
          if ((float)(1.0 - v58) < 1.0e-16)
            v63 = 1.0e-16;
          v59 = -(float)(v62 * logf(v63));
        }
        *(double *)__p = *(double *)__p + (float)(v55 * (float)(v60 + v59));
        v49 = *(double *)v72 + v55;
        *(double *)v72 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v84);
    std::mutex::~mutex(&v85);
    std::exception_ptr::~exception_ptr(&v84);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v75)
    {
      v64 = (double *)__p;
      do
      {
        v65 = *v64++;
        v46 = v46 + v65;
      }
      while (v64 != v75);
    }
    if (v72 != v73)
    {
      v45 = 0.0;
      v66 = (double *)v72;
      do
      {
        v67 = *v66++;
        v45 = v45 + v67;
      }
      while (v66 != v73);
    }
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
      v44 = __p;
    }
    if (v44)
    {
      v75 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
    v45 = 0.0;
    v46 = 0.0;
  }
  v84.__ptr_ = *(void **)&v46;
  *(double *)&v85.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v84, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v84.__ptr_;
    v45 = *(double *)&v85.__m_.__sig;
  }
  v69 = 1.0;
  if (v45 != 0.0)
    v69 = v45;
  return v46 / v69;
}

void sub_220E7C79C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7C7C0);
}

void sub_220E7C7A8()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7C7C0);
}

void sub_220E7C7B8()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7C7E8);
}

void sub_220E7C800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7C854(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalRowLogLoss>::Name()
{
  return "logloss";
}

void std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9098;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::operator()()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24E6B9108;
  *(_DWORD *)(result + 20) = 1065353216;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_5,std::allocator<xgboost::metric::$_5>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::PseudoErrorLoss::~PseudoErrorLoss(xgboost::metric::PseudoErrorLoss *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::metric::PseudoErrorLoss::LoadConfig(xgboost::metric::PseudoErrorLoss *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "pseduo_huber_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::FromJson<xgboost::PesudoHuberParam>(v4, (xgboost::metric::PseudoErrorLoss *)((char *)this + 16), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E7C9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::metric::PseudoErrorLoss::SaveConfig(xgboost::metric::PseudoErrorLoss *this, xgboost::Json *a2)
{
  char *v4;
  uint64_t *v5;
  unsigned int **v6;
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;
  _QWORD v11[2];
  void *v12[2];
  uint64_t v13;

  v4 = (char *)(*(uint64_t (**)(xgboost::metric::PseudoErrorLoss *))(*(_QWORD *)this + 48))(this);
  std::string::basic_string[abi:ne180100]<0>(v9, v4);
  v11[1] = 0;
  *(_OWORD *)v12 = *(_OWORD *)v9;
  v13 = v10;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v5 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v5, (uint64_t)v11);
  if (v8 < 0)
    operator delete(__p[0]);
  v11[0] = off_24E6BE2B8;
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  xgboost::ToJson<xgboost::PesudoHuberParam>((xgboost::metric::PseudoErrorLoss *)((char *)this + 16), (uint64_t)v11);
  std::string::basic_string[abi:ne180100]<0>(v9, "pseduo_huber_param");
  v6 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, v9);
  xgboost::Json::operator=(v6, (uint64_t)v11);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  v11[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v12, (_QWORD *)v12[1]);
}

void sub_220E7CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::metric::PseudoErrorLoss::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];
  void **v3;

  xgboost::XGBoostParameter<xgboost::PesudoHuberParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::PesudoHuberParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

double xgboost::metric::PseudoErrorLoss::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *ptr;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  BOOL v39;
  std::string *v40;
  _QWORD *v41;
  void *v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  unint64_t v54;
  float v55;
  double *v56;
  double v57;
  double *v58;
  double v59;
  void *Engine;
  double v61;
  uint64_t v64;
  unint64_t v65;
  float v66;
  void *v67;
  void *v68;
  void *__p;
  void *v70;
  _QWORD v71[2];
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD v78[2];
  std::exception_ptr v79;
  std::mutex v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v71[0] = *(_QWORD *)(a3 + 32);
  if (v71[0] != *(_QWORD *)a3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v79);
    if (v79.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"info.labels.Shape(0) == info.num_row_", 37);
      v11 = *((char *)v79.__ptr_ + 23);
      v12 = v11 >= 0 ? v79.__ptr_ : *(void **)v79.__ptr_;
      v13 = v11 >= 0 ? *((unsigned __int8 *)v79.__ptr_ + 23) : *((_QWORD *)v79.__ptr_ + 1);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
      ptr = v79.__ptr_;
      v79.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v79, (uint64_t)ptr);
    }
  }
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v16 < 0)
  {
    v22 = *(uint64_t **)(a3 + 24);
    v19 = *v22;
    v65 = (v22[1] - *v22) >> 2;
    v21 = *(_QWORD *)(a3 + 40);
    if (v16 == -1)
    {
      v17 = **a2;
      v18 = ((*a2)[1] - v17) >> 2;
      v64 = **(_QWORD **)(a3 + 72);
      v20 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v64) >> 2;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v20 = 0;
      v64 = 0;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v64 = 0;
    v65 = 0;
    v19 = 0;
    v20 = 0;
    v21 = *(_QWORD *)(a3 + 40);
  }
  v66 = *(float *)(a1 + 20);
  v71[0] = 0;
  if (v66 == 0.0)
  {
    dmlc::LogCheckFormat<float,double>((uint64_t *)&v79);
    if (v79.__ptr_)
    {
      v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"slope != 0.0", 12);
      v33 = *((char *)v79.__ptr_ + 23);
      v34 = v33 >= 0 ? v79.__ptr_ : *(void **)v79.__ptr_;
      v35 = v33 >= 0 ? *((unsigned __int8 *)v79.__ptr_ + 23) : *((_QWORD *)v79.__ptr_ + 1);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"slope for pseudo huber cannot be 0.", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
      v38 = v79.__ptr_;
      v79.__ptr_ = 0;
      if (v38)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v79, (uint64_t)v38);
    }
  }
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_DWORD *)(v23 + 24);
  if (v24 < 0)
  {
    v27 = *(_QWORD *)(a3 + 32);
    v25 = **(_QWORD **)(a3 + 24);
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v25;
    v73 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v25) >> 2;
    v74 = v25;
    v28 = *(_QWORD *)(a3 + 40);
    v26 = v28 * v27;
    if (v39)
      v26 = 0;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v73 = 0;
    v74 = 0;
    v27 = *(_QWORD *)(a3 + 32);
    v28 = *(_QWORD *)(a3 + 40);
  }
  v77 = v24;
  v72[0] = v27;
  v72[1] = v28;
  v71[0] = v28;
  v71[1] = 1;
  v75 = v25;
  v76 = v26;
  if (*(_DWORD *)(v23 + 24) == -1)
  {
    v79.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v79);
    v79.__ptr_ = 0;
    std::vector<double>::vector(&v67, 1uLL, &v79);
    v45 = **(_QWORD **)(a3 + 24);
    v46 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v79.__ptr_ = 0;
    v80.__m_.__sig = 850045863;
    v47 = 0.0;
    memset(v80.__m_.__opaque, 0, sizeof(v80.__m_.__opaque));
    v48 = v46 - v45;
    if (v48)
    {
      v49 = 0;
      v50 = v48 >> 2;
      do
      {
        v78[0] = 2;
        v78[1] = v72;
        v51 = xgboost::linalg::UnravelIndex<2ul>(v49, v78, *(int8x8_t *)&v47);
        if (v20)
        {
          if (v20 <= v51)
            goto LABEL_58;
          v53 = *(float *)(v64 + 4 * v51);
        }
        else
        {
          v53 = 1.0;
        }
        v54 = v52 + v51 * v21;
        if (v54 >= v65)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v18 <= v49)
LABEL_58:
          std::terminate();
        v55 = (float)(*(float *)(v19 + 4 * v54) - *(float *)(v17 + 4 * v49)) / v66;
        *(double *)__p = *(double *)__p
                       + (float)(v53 * (float)((float)(v66 * v66) * (float)(sqrtf((float)(v55 * v55) + 1.0) + -1.0)));
        v47 = *(double *)v67 + v53;
        *(double *)v67 = v47;
        ++v49;
      }
      while (v50 != v49);
    }
    dmlc::OMPException::Rethrow(&v79);
    std::mutex::~mutex(&v80);
    std::exception_ptr::~exception_ptr(&v79);
    v42 = __p;
    v43 = 0.0;
    v44 = 0.0;
    if (__p != v70)
    {
      v56 = (double *)__p;
      do
      {
        v57 = *v56++;
        v44 = v44 + v57;
      }
      while (v56 != v70);
    }
    if (v67 != v68)
    {
      v43 = 0.0;
      v58 = (double *)v67;
      do
      {
        v59 = *v58++;
        v43 = v43 + v59;
      }
      while (v58 != v68);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
      v42 = __p;
    }
    if (v42)
    {
      v70 = v42;
      operator delete(v42);
    }
  }
  else
  {
    v40 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
    dmlc::LogMessageFatal::Entry::Init(v40, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v41 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v79);
    v43 = 0.0;
    v44 = 0.0;
  }
  v79.__ptr_ = *(void **)&v44;
  *(double *)&v80.__m_.__sig = v43;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v42);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v79, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v44 = *(double *)&v79.__ptr_;
    v43 = *(double *)&v80.__m_.__sig;
  }
  v61 = 1.0;
  if (v43 != 0.0)
    v61 = v43;
  return v44 / v61;
}

void sub_220E7D1BC()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7D1E0);
}

void sub_220E7D1C8()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7D1E0);
}

void sub_220E7D1D8()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7D208);
}

void sub_220E7D228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v33;

  v33 = a32;
  a32 = 0;
  if (v33)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a32, v33);
  _Unwind_Resume(a1);
}

void sub_220E7D284(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::PseudoErrorLoss::Name(xgboost::metric::PseudoErrorLoss *this)
{
  return "mphe";
}

void std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9178;
  return result;
}

_QWORD *std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B91E8;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_6,std::allocator<xgboost::metric::$_6>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  void *Engine;
  double v65;
  uint64_t v67;
  void *v68;
  void *v69;
  void *__p;
  void *v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD v79[2];
  std::exception_ptr v80;
  std::mutex v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v72[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v72[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v80);
    if (v80.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v80.__ptr_ + 23);
      v13 = v12 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
      ptr = v80.__ptr_;
      v80.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v72[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v72[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v80);
      if (v80.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v80.__ptr_ + 23);
        v36 = v35 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
        v39 = v80.__ptr_;
        v80.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v67 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v67) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v67 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v74 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v75 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v67 = 0;
    v26 = 0;
    v27 = 0;
    v74 = 0;
    v75 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v78 = v20;
  v73[0] = v28;
  v73[1] = v29;
  v72[0] = v29;
  v72[1] = 1;
  v76 = v26;
  v77 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v80.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v80);
    v80.__ptr_ = 0;
    std::vector<double>::vector(&v68, 1uLL, &v80);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v80.__ptr_ = 0;
    v81.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v81.__m_.__opaque, 0, sizeof(v81.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v79[0] = 2;
        v79[1] = v73;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v79, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_60;
          v55 = *(float *)(v67 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_60:
          std::terminate();
        v57 = *(float *)(v23 + 4 * v56);
        if (*(float *)(v22 + 4 * v51) >= 1.0e-16)
          v58 = *(float *)(v22 + 4 * v51);
        else
          v58 = 1.0e-16;
        v59 = lgammaf(v57 + 1.0) + v58;
        *(double *)__p = *(double *)__p + (float)(v55 * (float)(v59 - (float)(logf(v58) * v57)));
        v49 = *(double *)v68 + v55;
        *(double *)v68 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v80);
    std::mutex::~mutex(&v81);
    std::exception_ptr::~exception_ptr(&v80);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v71)
    {
      v60 = (double *)__p;
      do
      {
        v61 = *v60++;
        v46 = v46 + v61;
      }
      while (v60 != v71);
    }
    if (v68 != v69)
    {
      v45 = 0.0;
      v62 = (double *)v68;
      do
      {
        v63 = *v62++;
        v45 = v45 + v63;
      }
      while (v62 != v69);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
      v44 = __p;
    }
    if (v44)
    {
      v71 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
    v45 = 0.0;
    v46 = 0.0;
  }
  v80.__ptr_ = *(void **)&v46;
  *(double *)&v81.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v80, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v80.__ptr_;
    v45 = *(double *)&v81.__m_.__sig;
  }
  v65 = 1.0;
  if (v45 != 0.0)
    v65 = v45;
  return v46 / v65;
}

void sub_220E7D968()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7D98CLL);
}

void sub_220E7D974()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7D98CLL);
}

void sub_220E7D984()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7D9B4);
}

void sub_220E7D9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7DA20(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalPoissonNegLogLik>::Name()
{
  return "poisson-nloglik";
}

void std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9258;
  return result;
}

_QWORD *std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B92C8;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_7,std::allocator<xgboost::metric::$_7>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  void *Engine;
  double v65;
  uint64_t v67;
  void *v68;
  void *v69;
  void *__p;
  void *v71;
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD v79[2];
  std::exception_ptr v80;
  std::mutex v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v72[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v72[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v80);
    if (v80.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v80.__ptr_ + 23);
      v13 = v12 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
      ptr = v80.__ptr_;
      v80.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v72[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v72[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v80);
      if (v80.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v80.__ptr_ + 23);
        v36 = v35 >= 0 ? v80.__ptr_ : *(void **)v80.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v80.__ptr_ + 23) : *((_QWORD *)v80.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
        v39 = v80.__ptr_;
        v80.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v67 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v67) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v67 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v74 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v75 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v67 = 0;
    v26 = 0;
    v27 = 0;
    v74 = 0;
    v75 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v78 = v20;
  v73[0] = v28;
  v73[1] = v29;
  v72[0] = v29;
  v72[1] = 1;
  v76 = v26;
  v77 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v80.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v80);
    v80.__ptr_ = 0;
    std::vector<double>::vector(&v68, 1uLL, &v80);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v80.__ptr_ = 0;
    v81.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v81.__m_.__opaque, 0, sizeof(v81.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v79[0] = 2;
        v79[1] = v73;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v79, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_57;
          v55 = *(float *)(v67 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        v57 = *(float *)(v22 + 4 * v51) + 0.000001;
        v58 = *(float *)(v23 + 4 * v56) + 0.000001;
        v59 = logf(v57 / v58);
        *(double *)__p = *(double *)__p + (float)(v55 * (float)((float)((float)(v58 / v57) + v59) + -1.0));
        v49 = *(double *)v68 + v55;
        *(double *)v68 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v80);
    std::mutex::~mutex(&v81);
    std::exception_ptr::~exception_ptr(&v80);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v71)
    {
      v60 = (double *)__p;
      do
      {
        v61 = *v60++;
        v46 = v46 + v61;
      }
      while (v60 != v71);
    }
    if (v68 != v69)
    {
      v45 = 0.0;
      v62 = (double *)v68;
      do
      {
        v63 = *v62++;
        v45 = v45 + v63;
      }
      while (v62 != v69);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
      v44 = __p;
    }
    if (v44)
    {
      v71 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
    v45 = 0.0;
    v46 = 0.0;
  }
  v80.__ptr_ = *(void **)&v46;
  *(double *)&v81.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v80, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v80.__ptr_;
    v45 = *(double *)&v81.__m_.__sig;
  }
  v65 = 0.000000999999997;
  if (v45 > 0.0)
    v65 = v45;
  return (v46 + v46) / v65;
}

void sub_220E7E108()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7E12CLL);
}

void sub_220E7E114()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7E12CLL);
}

void sub_220E7E124()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7E154);
}

void sub_220E7E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7E1C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaDeviance>::Name()
{
  return "gamma-deviance";
}

void std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9338;
  return result;
}

_QWORD *std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_24E6B93A8;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_8,std::allocator<xgboost::metric::$_8>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double *v61;
  double v62;
  double *v63;
  double v64;
  void *Engine;
  double v66;
  uint64_t v68;
  void *v69;
  void *v70;
  void *__p;
  void *v72;
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD v80[2];
  std::exception_ptr v81;
  std::mutex v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v73[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v73[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v81);
    if (v81.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v73);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v73);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v81.__ptr_ + 23);
      v13 = v12 >= 0 ? v81.__ptr_ : *(void **)v81.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v81.__ptr_ + 23) : *((_QWORD *)v81.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v73);
      ptr = v81.__ptr_;
      v81.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v73[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v73[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v81);
      if (v81.__ptr_)
      {
        v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v73);
        dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v73);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v35 = *((char *)v81.__ptr_ + 23);
        v36 = v35 >= 0 ? v81.__ptr_ : *(void **)v81.__ptr_;
        v37 = v35 >= 0 ? *((unsigned __int8 *)v81.__ptr_ + 23) : *((_QWORD *)v81.__ptr_ + 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v73);
        v39 = v81.__ptr_;
        v81.__ptr_ = 0;
        if (v39)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v81, (uint64_t)v39);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v30 = *(uint64_t **)(a3 + 24);
    v23 = *v30;
    v24 = (v30[1] - *v30) >> 2;
    v29 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v68 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v68) >> 2;
      v40 = *a2;
      v22 = **a2;
      v21 = (v40[1] - v22) >> 2;
    }
    else
    {
      v68 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v75 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v76 = v26;
    v27 = v29 * v28;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v68 = 0;
    v26 = 0;
    v27 = 0;
    v75 = 0;
    v76 = 0;
    v28 = *(_QWORD *)(a3 + 32);
    v29 = *(_QWORD *)(a3 + 40);
  }
  v79 = v20;
  v74[0] = v28;
  v74[1] = v29;
  v73[0] = v29;
  v73[1] = 1;
  v77 = v26;
  v78 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v81.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v81);
    v81.__ptr_ = 0;
    std::vector<double>::vector(&v69, 1uLL, &v81);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v81.__ptr_ = 0;
    v82.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v82.__m_.__opaque, 0, sizeof(v82.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v80[0] = 2;
        v80[1] = v74;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v80, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_60;
          v55 = *(float *)(v68 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v29;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_60:
          std::terminate();
        v57 = *(float *)(v23 + 4 * v56);
        v58 = *(float *)(v22 + 4 * v51);
        if (v58 >= 0.000001)
          v59 = -1.0 / v58;
        else
          v59 = -1000000.0;
        v60 = logf(-v59);
        *(double *)__p = *(double *)__p - (float)(v55 * (float)((float)(v60 + (float)(v57 * v59)) + 0.0));
        v49 = *(double *)v69 + v55;
        *(double *)v69 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v81);
    std::mutex::~mutex(&v82);
    std::exception_ptr::~exception_ptr(&v81);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v72)
    {
      v61 = (double *)__p;
      do
      {
        v62 = *v61++;
        v46 = v46 + v62;
      }
      while (v61 != v72);
    }
    if (v69 != v70)
    {
      v45 = 0.0;
      v63 = (double *)v69;
      do
      {
        v64 = *v63++;
        v45 = v45 + v64;
      }
      while (v63 != v70);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
      v44 = __p;
    }
    if (v44)
    {
      v72 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v81);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v81);
    v45 = 0.0;
    v46 = 0.0;
  }
  v81.__ptr_ = *(void **)&v46;
  *(double *)&v82.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v81, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v81.__ptr_;
    v45 = *(double *)&v82.__m_.__sig;
  }
  v66 = 1.0;
  if (v45 != 0.0)
    v66 = v45;
  return v46 / v66;
}

void sub_220E7E8B4()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7E8D8);
}

void sub_220E7E8C0()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7E8D8);
}

void sub_220E7E8D0()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7E900);
}

void sub_220E7E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7E96C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalGammaNLogLik>::Name()
{
  return "gamma-nloglik";
}

void std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B9418;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *a2;
  v3 = operator new();
  v4 = v3;
  *(_QWORD *)v3 = &off_24E6B9488;
  if (v2)
  {
    v19 = sscanf(v2, "%f", v3 + 16);
    v18 = 1;
    if (v19 != 1)
    {
      dmlc::LogCheckFormat<int,int>(&v17);
      if (v17)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"sscanf(param, \"%f\", &threshold_) == 1", 37);
        v9 = *(char *)(v17 + 23);
        if (v9 >= 0)
          v10 = v17;
        else
          v10 = *(_QWORD *)v17;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(v17 + 23);
        else
          v11 = *(_QWORD *)(v17 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"unable to parse the threshold value for the error metric", 56);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
        v14 = v17;
        v17 = 0;
        if (v14)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v17, v14);
      }
    }
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_DWORD *)(v3 + 16) = 1056964608;
  }
  *(_BYTE *)(v4 + 20) = v15;
  return v4;
}

void sub_220E7EB20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C409B34F632);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_9,std::allocator<xgboost::metric::$_9>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float v57;
  double *v58;
  double v59;
  double *v60;
  double v61;
  void *Engine;
  double v63;
  uint64_t v65;
  void *v66;
  void *v67;
  void *__p;
  void *v69;
  _QWORD v70[2];
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD v77[2];
  std::exception_ptr v78;
  std::mutex v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v70[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v70[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v78);
    if (v78.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v78.__ptr_ + 23);
      v13 = v12 >= 0 ? v78.__ptr_ : *(void **)v78.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v78.__ptr_ + 23) : *((_QWORD *)v78.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
      ptr = v78.__ptr_;
      v78.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v70[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v70[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v78);
      if (v78.__ptr_)
      {
        v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v36 = *((char *)v78.__ptr_ + 23);
        v37 = v36 >= 0 ? v78.__ptr_ : *(void **)v78.__ptr_;
        v38 = v36 >= 0 ? *((unsigned __int8 *)v78.__ptr_ + 23) : *((_QWORD *)v78.__ptr_ + 1);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
        v40 = v78.__ptr_;
        v78.__ptr_ = 0;
        if (v40)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (uint64_t)v40);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v31 = *(uint64_t **)(a3 + 24);
    v23 = *v31;
    v24 = (v31[1] - *v31) >> 2;
    v30 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v65 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v65) >> 2;
      v22 = **a2;
      v21 = ((*a2)[1] - v22) >> 2;
    }
    else
    {
      v65 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(float *)(a1 + 16);
    v29 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v72 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v73 = v26;
    v27 = v30 * v29;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v65 = 0;
    v26 = 0;
    v27 = 0;
    v28 = *(float *)(a1 + 16);
    v72 = 0;
    v73 = 0;
    v29 = *(_QWORD *)(a3 + 32);
    v30 = *(_QWORD *)(a3 + 40);
  }
  v76 = v20;
  v71[0] = v29;
  v71[1] = v30;
  v70[0] = v30;
  v70[1] = 1;
  v74 = v26;
  v75 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v78.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v78);
    v78.__ptr_ = 0;
    std::vector<double>::vector(&v66, 1uLL, &v78);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v78.__ptr_ = 0;
    v79.__m_.__sig = 850045863;
    v49 = 0.0;
    memset(v79.__m_.__opaque, 0, sizeof(v79.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      do
      {
        v77[0] = 2;
        v77[1] = v71;
        v53 = xgboost::linalg::UnravelIndex<2ul>(v51, v77, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v53)
            goto LABEL_59;
          v55 = *(float *)(v65 + 4 * v53);
        }
        else
        {
          v55 = 1.0;
        }
        v56 = v54 + v53 * v30;
        if (v56 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_59:
          std::terminate();
        v57 = *(float *)(v23 + 4 * v56);
        if (v28 < *(float *)(v22 + 4 * v51))
          v57 = 1.0 - v57;
        *(double *)__p = *(double *)__p + (float)(v55 * v57);
        v49 = *(double *)v66 + v55;
        *(double *)v66 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v78);
    std::mutex::~mutex(&v79);
    std::exception_ptr::~exception_ptr(&v78);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v69)
    {
      v58 = (double *)__p;
      do
      {
        v59 = *v58++;
        v46 = v46 + v59;
      }
      while (v58 != v69);
    }
    if (v66 != v67)
    {
      v45 = 0.0;
      v60 = (double *)v66;
      do
      {
        v61 = *v60++;
        v45 = v45 + v61;
      }
      while (v60 != v67);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
      v44 = __p;
    }
    if (v44)
    {
      v69 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v78);
    v45 = 0.0;
    v46 = 0.0;
  }
  v78.__ptr_ = *(void **)&v46;
  *(double *)&v79.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v78, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v78.__ptr_;
    v45 = *(double *)&v79.__m_.__sig;
  }
  v63 = 1.0;
  if (v45 != 0.0)
    v63 = v45;
  return v46 / v63;
}

void sub_220E7F194()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7F1B8);
}

void sub_220E7F1A0()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7F1B8);
}

void sub_220E7F1B0()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7F1E0);
}

void sub_220E7F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7F24C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalError>::Name(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_5);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    unk_253F36810 = 0;
    xmmword_253F36800 = 0uLL;
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_253F36800, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  if (!*(_BYTE *)(a1 + 20))
    return "error";
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"error", 5);
  if (*(float *)(a1 + 16) != 0.5)
  {
    LOBYTE(v5) = 64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v5, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if (byte_253F36817 < 0)
    operator delete((void *)xmmword_253F36800);
  xmmword_253F36800 = v5;
  unk_253F36810 = v6;
  v7[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (byte_253F36817 >= 0)
    v3 = &xmmword_253F36800;
  else
    v3 = (__int128 *)xmmword_253F36800;
  v7[1] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](&v9);
  return (const char *)v3;
}

void sub_220E7F400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a12 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a12 + *(_QWORD *)(a12 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a13 = MEMORY[0x24BEDB848] + 16;
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](&a29);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6B94F8;
  return result;
}

uint64_t std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  const char *v2;
  uint64_t v3;
  float v4;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  char v16;

  v2 = *a2;
  v3 = operator new();
  *(_QWORD *)v3 = &off_24E6B9568;
  if (!v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: param != nullptr", 30);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"tweedie-nloglik must be in format tweedie-nloglik@rho", 53);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v16);
  }
  v4 = atof(v2);
  *(float *)(v3 + 16) = v4;
  if (v4 >= 2.0 || v4 < 1.0)
  {
    v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
    v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: rho_ < 2 && rho_ >= 1", 35);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"tweedie variance power must be in interval [1, 2)", 49);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
  }
  return v3;
}

void sub_220E7F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  MEMORY[0x227667068](v12, 0x10E1C40191BE475);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::metric::$_10,std::allocator<xgboost::metric::$_10>,xgboost::Metric * ()(char const*)>::target_type()
{
}

void xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::~EvalEWiseBase()
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::Eval(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *ptr;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  BOOL v41;
  std::string *v42;
  _QWORD *v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  float v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  double *v63;
  double v64;
  double *v65;
  double v66;
  void *Engine;
  double v68;
  uint64_t v70;
  void *v71;
  void *v72;
  void *__p;
  void *v74;
  _QWORD v75[2];
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD v82[2];
  std::exception_ptr v83;
  std::mutex v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v75[0] = ((*a2)[1] - **a2) >> 2;
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if ((void *)v75[0] != __p)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v83);
    if (v83.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v75);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v75);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *((char *)v83.__ptr_ + 23);
      v13 = v12 >= 0 ? v83.__ptr_ : *(void **)v83.__ptr_;
      v14 = v12 >= 0 ? *((unsigned __int8 *)v83.__ptr_ + 23) : *((_QWORD *)v83.__ptr_ + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label and prediction size not match, ", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"hint: use merror or mlogloss for multi-class classification", 59);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v75);
      ptr = v83.__ptr_;
      v83.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v83, (uint64_t)ptr);
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) != **(_QWORD **)(a3 + 24))
  {
    v75[0] = *(_QWORD *)(a3 + 40);
    LODWORD(__p) = 0;
    if (!v75[0])
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v83);
      if (v83.__ptr_)
      {
        v32 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v75);
        dmlc::LogMessageFatal::Entry::Init(v32, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/elementwise_metric.cu");
        v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v75);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"info.labels.Shape(1) != 0", 25);
        v36 = *((char *)v83.__ptr_ + 23);
        v37 = v36 >= 0 ? v83.__ptr_ : *(void **)v83.__ptr_;
        v38 = v36 >= 0 ? *((unsigned __int8 *)v83.__ptr_ + 23) : *((_QWORD *)v83.__ptr_ + 1);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v75);
        v40 = v83.__ptr_;
        v83.__ptr_ = 0;
        if (v40)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v83, (uint64_t)v40);
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_DWORD *)(v19 + 24);
  if (v20 < 0)
  {
    v31 = *(uint64_t **)(a3 + 24);
    v23 = *v31;
    v24 = (v31[1] - *v31) >> 2;
    v30 = *(_QWORD *)(a3 + 40);
    if (v20 == -1)
    {
      v70 = **(_QWORD **)(a3 + 72);
      v25 = (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v70) >> 2;
      v22 = **a2;
      v21 = ((*a2)[1] - v22) >> 2;
    }
    else
    {
      v70 = 0;
      v25 = 0;
      v22 = 0;
      v21 = 0;
    }
    v28 = *(float *)(a1 + 16);
    v29 = *(_QWORD *)(a3 + 32);
    v26 = **(_QWORD **)(a3 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v26;
    v77 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v26) >> 2;
    v78 = v26;
    v27 = v30 * v29;
    if (v41)
      v27 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v70 = 0;
    v26 = 0;
    v27 = 0;
    v28 = *(float *)(a1 + 16);
    v77 = 0;
    v78 = 0;
    v29 = *(_QWORD *)(a3 + 32);
    v30 = *(_QWORD *)(a3 + 40);
  }
  v81 = v20;
  v76[0] = v29;
  v76[1] = v30;
  v75[0] = v30;
  v75[1] = 1;
  v79 = v26;
  v80 = v27;
  if (*(_DWORD *)(v19 + 24) == -1)
  {
    v83.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v83);
    v83.__ptr_ = 0;
    std::vector<double>::vector(&v71, 1uLL, &v83);
    v47 = **(_QWORD **)(a3 + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
    v83.__ptr_ = 0;
    v84.__m_.__sig = 850045863;
    HIDWORD(v49) = 0;
    memset(v84.__m_.__opaque, 0, sizeof(v84.__m_.__opaque));
    v50 = v48 - v47;
    if (v50)
    {
      v51 = 0;
      v52 = v50 >> 2;
      v53 = 1.0 - v28;
      LODWORD(v49) = 2.0;
      v54 = 2.0 - v28;
      do
      {
        v82[0] = 2;
        v82[1] = v76;
        v55 = xgboost::linalg::UnravelIndex<2ul>(v51, v82, *(int8x8_t *)&v49);
        if (v25)
        {
          if (v25 <= v55)
            goto LABEL_57;
          v57 = *(float *)(v70 + 4 * v55);
        }
        else
        {
          v57 = 1.0;
        }
        v58 = v56 + v55 * v30;
        if (v58 >= v24)
          __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
        if (v21 <= v51)
LABEL_57:
          std::terminate();
        v59 = *(float *)(v23 + 4 * v58);
        v60 = logf(*(float *)(v22 + 4 * v51));
        v61 = expf(v53 * v60);
        v62 = expf(v54 * v60);
        *(double *)__p = *(double *)__p + (float)(v57 * (float)((float)(v62 / v54) - (float)((float)(v59 * v61) / v53)));
        v49 = *(double *)v71 + v57;
        *(double *)v71 = v49;
        ++v51;
      }
      while (v52 != v51);
    }
    dmlc::OMPException::Rethrow(&v83);
    std::mutex::~mutex(&v84);
    std::exception_ptr::~exception_ptr(&v83);
    v44 = __p;
    v45 = 0.0;
    v46 = 0.0;
    if (__p != v74)
    {
      v63 = (double *)__p;
      do
      {
        v64 = *v63++;
        v46 = v46 + v64;
      }
      while (v63 != v74);
    }
    if (v71 != v72)
    {
      v45 = 0.0;
      v65 = (double *)v71;
      do
      {
        v66 = *v65++;
        v45 = v45 + v66;
      }
      while (v65 != v72);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
      v44 = __p;
    }
    if (v44)
    {
      v74 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
    dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
    v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v83);
    v45 = 0.0;
    v46 = 0.0;
  }
  v83.__ptr_ = *(void **)&v46;
  *(double *)&v84.__m_.__sig = v45;
  if (a4)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v44);
    (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v83, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v46 = *(double *)&v83.__ptr_;
    v45 = *(double *)&v84.__m_.__sig;
  }
  v68 = 1.0;
  if (v45 != 0.0)
    v68 = v45;
  return v46 / v68;
}

void sub_220E7FC84()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7FCA8);
}

void sub_220E7FC90()
{
  __cxa_end_catch();
  JUMPOUT(0x220E7FCA8);
}

void sub_220E7FCA0()
{
  std::mutex *v0;
  void *v1;
  std::exception_ptr v2;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v2);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x220E7FCD0);
}

void sub_220E7FCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;

  v31 = a30;
  a30 = 0;
  if (v31)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a30, v31);
  _Unwind_Resume(a1);
}

void sub_220E7FD3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

__int128 *xgboost::metric::EvalEWiseBase<xgboost::metric::EvalTweedieNLogLik>::Name()
{
  unsigned __int8 v0;
  __int128 *v1;
  __int128 *v2;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  v0 = atomic_load((unsigned __int8 *)&qword_253F367F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253F367F8))
  {
    unk_253F36828 = 0;
    xmmword_253F36818 = 0uLL;
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_253F36818, &dword_220DF6000);
    __cxa_guard_release(&qword_253F367F8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"tweedie-nloglik@", 16);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (byte_253F3682F < 0)
    operator delete((void *)xmmword_253F36818);
  v1 = &xmmword_253F36818;
  xmmword_253F36818 = v4;
  unk_253F36828 = v5;
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v2 = (__int128 *)xmmword_253F36818;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  if (v5 < 0)
    v1 = v2;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](&v8);
  return v1;
}

void sub_220E7FEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a12 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a12 + *(_QWORD *)(a12 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a13 = MEMORY[0x24BEDB848] + 16;
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4](&a29);
  _Unwind_Resume(a1);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep xgboost::common::Monitor::Start()
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;
  __int128 *v1;
  uint64_t v2;
  uint64_t *v3;
  __int128 *v4;

  result = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
  if (*(int *)(result + 4) >= 3)
  {
    v4 = v1;
    v3 = std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v2 + 24), (const void **)v1, (uint64_t)&std::piecewise_construct, &v4);
    result = std::chrono::steady_clock::now().__d_.__rep_;
    v3[7] = result;
  }
  return result;
}

int64x2_t xgboost::common::Monitor::Stop()
{
  __int128 *v0;
  uint64_t v1;
  int64x2_t result;
  int64x2_t *v3;
  std::chrono::steady_clock::time_point v4;
  int64x2_t v5;
  __int128 *v6;

  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    v6 = v0;
    v3 = (int64x2_t *)std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v1 + 24), (const void **)v0, (uint64_t)&std::piecewise_construct, &v6);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v5 = vdupq_n_s64(1uLL);
    v5.i64[0] = v4.__d_.__rep_ - v3[3].i64[1];
    result = vaddq_s64(v5, v3[4]);
    v3[4] = result;
  }
  return result;
}

void xgboost::common::Monitor::PrintStatistics(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::locale::id *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *__p[2];
  char v24;
  _QWORD v25[33];
  int v26;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    v5 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      if (v3[7])
      {
        xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v25);
        v26 = 4;
        v6 = *((char *)v3 + 55);
        if (v6 >= 0)
          v7 = (uint64_t)(v3 + 4);
        else
          v7 = v3[4];
        if (v6 >= 0)
          v8 = *((unsigned __int8 *)v3 + 55);
        else
          v8 = v3[5];
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v7, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"s, ", 3);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" calls @ ", 9);
        v12 = (_QWORD *)std::ostream::operator<<();
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"us", 2);
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
        v14 = std::locale::use_facet((const std::locale *)__p, v5);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v25);
      }
      else if (*(int *)(v4 + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/timer.cc");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v25, (uint64_t)__p, 44, 1);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Timer for ", 10);
        v19 = *((char *)v3 + 55);
        v20 = v19 >= 0 ? (uint64_t)(v3 + 4) : v3[4];
        v21 = v19 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" did not get stopped properly.", 30);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v25);
        if (v24 < 0)
          operator delete(__p[0]);
      }
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v3[2];
          v17 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v17);
      }
      v3 = v16;
    }
    while (v16 != v2);
  }
}

void sub_220E80264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::Monitor::Print(xgboost::common::Monitor *this)
{
  int *v2;
  void *Engine;
  xgboost::common::Monitor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  xgboost::common::Monitor *v8;
  xgboost::common::Monitor *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  xgboost::common::Monitor *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *v18[33];
  int v19;
  char **v20;
  char *v21[2];

  v2 = (int *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
  if (v2[1] >= 3)
  {
    Engine = rabit::engine::GetEngine((rabit::engine *)v2);
    (*(void (**)(void *))(*(_QWORD *)Engine + 64))(Engine);
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    v4 = (xgboost::common::Monitor *)*((_QWORD *)this + 3);
    if (v4 != (xgboost::common::Monitor *)((char *)this + 32))
    {
      do
      {
        v6 = *((_QWORD *)v4 + 8);
        v5 = *((_QWORD *)v4 + 9);
        v18[0] = (__int128 *)((char *)v4 + 32);
        v7 = std::__tree<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, v18);
        v7[7] = v5;
        v7[8] = v6 / 1000;
        v8 = (xgboost::common::Monitor *)*((_QWORD *)v4 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(xgboost::common::Monitor **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (xgboost::common::Monitor *)*((_QWORD *)v4 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v4;
            v4 = v9;
          }
          while (!v10);
        }
        v4 = v9;
      }
      while (v9 != (xgboost::common::Monitor *)((char *)this + 32));
    }
    xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v18);
    v19 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"======== Monitor (", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"): ", 3);
    v13 = *((char *)this + 23);
    if (v13 >= 0)
      v14 = this;
    else
      v14 = *(xgboost::common::Monitor **)this;
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)this + 23);
    else
      v15 = *((_QWORD *)this + 1);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ========", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v18);
    xgboost::common::Monitor::PrintStatistics(v17, &v20);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)&v20, v21[0]);
  }
}

void sub_220E80448(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(v1 - 112, *(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::common::Monitor::Statistics>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::common::Monitor::Statistics>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,xgboost::common::Monitor::Statistics>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_220E80570(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,xgboost::common::Monitor::Statistics>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[1].__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::steady_clock::now().__d_.__rep_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<unsigned long,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<unsigned long,unsigned long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_220E8070C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::Init(rabit::engine *this, uint64_t a2, char **a3)
{
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  rabit::engine::AllreduceBase **v8;
  rabit::engine::AllreduceBase *v9;
  rabit::engine::AllreduceBase *v10;
  void *v11;

  {
    v11 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v11);
  }
  v6 = dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  if (*(_QWORD *)v6)
    return 1;
  v8 = (rabit::engine::AllreduceBase **)v6;
  *(_BYTE *)(v6 + 8) = 1;
  v9 = (rabit::engine::AllreduceBase *)operator new();
  rabit::engine::AllreduceBase::AllreduceBase(v9);
  v10 = *v8;
  *v8 = v9;
  if (v10)
  {
    (*(void (**)(rabit::engine::AllreduceBase *))(*(_QWORD *)v10 + 112))(v10);
    v9 = *v8;
  }
  return (*(uint64_t (**)(rabit::engine::AllreduceBase *, rabit::engine *, uint64_t))(*(_QWORD *)v9 + 120))(v9, this, a2);
}

void sub_220E8083C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B3C40514773F6);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::Finalize(rabit::engine *this)
{
  uint64_t (*v1)(_QWORD);
  _BYTE *v2;
  uint64_t result;
  uint64_t v4;
  void *v5;

  {
    v5 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v5);
  }
  v2 = (_BYTE *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  if (*(_QWORD *)v2)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 128))(*(_QWORD *)v2);
    if (!(_DWORD)result)
      return result;
    v4 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    v2[8] = 0;
  }
  return 1;
}

void *rabit::engine::GetEngine(rabit::engine *this)
{
  unsigned __int8 v1;
  uint64_t (*v2)(_QWORD);
  const char *v3;
  uint64_t v4;
  void *result;
  void *v6;

  {
    rabit::engine::AllreduceBase::AllreduceBase((rabit::engine::AllreduceBase *)&rabit::engine::GetEngine(void)::default_manager);
    __cxa_atexit((void (*)(void *))rabit::engine::AllreduceBase::~AllreduceBase, &rabit::engine::GetEngine(void)::default_manager, &dword_220DF6000);
  }
  {
    v6 = (void *)dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
    _tlv_atexit((void (__cdecl *)(void *))rabit::engine::ThreadLocalEntry::~ThreadLocalEntry, v6);
  }
  v4 = dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<rabit::engine::ThreadLocalEntry>::Get(void)::inst);
  result = *(void **)v4;
  if (!*(_QWORD *)v4)
  {
    rabit::utils::Check((rabit::utils *)(*(_BYTE *)(v4 + 8) == 0), "the rabit has not been initialized", v3);
    return &rabit::engine::GetEngine(void)::default_manager;
  }
  return result;
}

void sub_220E80A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rabit::utils::Check(rabit::utils *this, const char *a2, const char *a3, ...)
{
  void *v4;
  std::string *Entry;
  _QWORD *v6;
  char v7;
  va_list v8;
  va_list va;

  va_start(va, a3);
  if ((this & 1) == 0)
  {
    v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    va_copy(v8, va);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 4096);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
    operator delete(v4);
  }
}

void sub_220E80AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  void *v12;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t rabit::engine::Allgather(rabit::engine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (***Engine)(void *, rabit::engine *, void *, uint64_t, uint64_t, uint64_t);

  Engine = (uint64_t (***)(void *, rabit::engine *, void *, uint64_t, uint64_t, uint64_t))rabit::engine::GetEngine(this);
  return (**Engine)(Engine, this, a2, a3, a4, a5);
}

uint64_t rabit::engine::Allreduce_(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *, rabit::engine *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)Engine + 8))(Engine, a1, a2, a3, a4, a7, a8);
}

_QWORD *rabit::engine::ReduceHandle::ReduceHandle(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t rabit::engine::ReduceHandle::TypeSize(unsigned int *a1)
{
  return *a1;
}

void rabit::engine::ReduceHandle::Init(uint64_t a1, uint64_t a2, const char *a3)
{
  rabit::utils::Assert((rabit::utils *)(*(_QWORD *)(a1 + 8) == 0), "cannot initialize reduce handle twice", a3);
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t rabit::engine::ReduceHandle::Allreduce(rabit::engine::ReduceHandle *this, void *a2, const char *a3, uint64_t a4, void (*a5)(void *), void *a6)
{
  rabit::engine *v12;
  void *Engine;

  rabit::utils::Assert((rabit::utils *)(*((_QWORD *)this + 1) != 0), "must initialize handle to call AllReduce", a3);
  Engine = rabit::engine::GetEngine(v12);
  return (*(uint64_t (**)(void *, void *, const char *, uint64_t, _QWORD, void (*)(void *), void *))(*(_QWORD *)Engine + 8))(Engine, a2, a3, a4, *((_QWORD *)this + 1), a5, a6);
}

void rabit::engine::AllreduceBase::~AllreduceBase(void **this)
{
  void *v2;
  void **v3;

  *this = &off_24E6BEF18;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  v3 = this + 4;
  std::vector<rabit::engine::AllreduceBase::LinkRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  rabit::engine::AllreduceBase::~AllreduceBase(this);
  JUMPOUT(0x227667068);
}

void std::vector<rabit::engine::AllreduceBase::LinkRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<rabit::engine::AllreduceBase::LinkRecord>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<rabit::engine::AllreduceBase::LinkRecord>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void rabit::engine::ThreadLocalEntry::~ThreadLocalEntry(rabit::engine::ThreadLocalEntry *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

__int128 *dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_6);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_6))
  {
    qword_253F36870 = 0;
    unk_253F36848 = 0u;
    unk_253F36858 = 0u;
    xmmword_253F36838 = 0u;
    qword_253F36868 = (uint64_t)&qword_253F36870;
    qword_253F36878 = 0;
    unk_253F36880 = 850045863;
    unk_253F36888 = 0u;
    unk_253F36898 = 0u;
    unk_253F368A8 = 0u;
    qword_253F368B8 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::~Registry, &xmmword_253F36838, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_6);
  }
  return &xmmword_253F36838;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::EllpackPage>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::GHistIndexMatrix>>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t xgboost::DMatrix::Create<void *,void *,void ()(void *),int ()(void *)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  std::string *Entry;
  _QWORD *v12;
  char v14;

  v10 = operator new();
  *(_QWORD *)v10 = &off_24E6B9668;
  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(v10 + 8));
  *(_BYTE *)(v10 + 216) = 0;
  *(_DWORD *)(v10 + 220) = -1;
  *(_QWORD *)(v10 + 224) = 0;
  *(_BYTE *)(v10 + 232) = 0;
  *(_QWORD *)(v10 + 236) = 0xFFFFFFFF00000000;
  *(_WORD *)(v10 + 244) = 0;
  *(_QWORD *)(v10 + 296) = 0;
  *(_QWORD *)(v10 + 304) = a2;
  *(_QWORD *)(v10 + 312) = a3;
  *(_QWORD *)(v10 + 320) = a4;
  *(_QWORD *)(v10 + 248) = a6 << 32;
  *(_QWORD *)(v10 + 256) = 0;
  *(_QWORD *)(v10 + 264) = 0;
  *(_QWORD *)(v10 + 272) = 0;
  *(_QWORD *)(v10 + 280) = 0x7FF8000000000000;
  *(_QWORD *)(v10 + 288) = 0;
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
  v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  return v10;
}

void sub_220E81504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  xgboost::DMatrix *v13;

  xgboost::DMatrix::~DMatrix(v13);
  MEMORY[0x227667068]();
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<void *,void *,void ()(void *),int ()(void *)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, float a7)
{
  uint64_t v14;
  std::string __p;

  v14 = operator new();
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    __p = *(std::string *)a6;
  xgboost::data::SparsePageDMatrix::SparsePageDMatrix(v14, a1, a2, a3, a4, a5, (__int128 *)&__p, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_220E81630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x227667068](v14, 0x10B3C40450F9410);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::DenseAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DenseAdapter>(v6, a1, a2, a3);
  return v6;
}

{
  return __ZN7xgboost7DMatrix6CreateINS_4data12DenseAdapterEEEPS0_PT_fiRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE(a1, a2, a3);
}

void sub_220E816D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::ArrayAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::ArrayAdapter>(v6, a1, a2, a3);
  return v6;
}

void sub_220E81758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::CSRAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRAdapter>(v6, a1, a2, a3);
  return v6;
}

void sub_220E817E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::CSCAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSCAdapter>(v6, a1, a2, a3);
  return v6;
}

{
  return __ZN7xgboost7DMatrix6CreateINS_4data10CSCAdapterEEEPS0_PT_fiRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE(a1, a2, a3);
}

void sub_220E81868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::DataTableAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::DataTableAdapter>(v6, a1, a2, a3);
  return v6;
}

void sub_220E818F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::FileAdapter>(uint64_t a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::FileAdapter>(v6, a1, a2, a3);
  return v6;
}

{
  return __ZN7xgboost7DMatrix6CreateINS_4data11FileAdapterEEEPS0_PT_fiRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE(a1, a2, a3);
}

void sub_220E81978(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::CSRArrayAdapter>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::CSRArrayAdapter>(v6, a1, a2, a3);
  return v6;
}

void sub_220E81A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::DMatrix::Create<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;

  v6 = operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::IteratorAdapter<void *,int ()(void *,int (*)(void *,XGBoostBatchCSR),void *),XGBoostBatchCSR>>(v6, a1, a2, a3);
  return v6;
}

void sub_220E81A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::DMatrix::Create<xgboost::data::RecordBatchesIterAdapter>(_QWORD *a1, float a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  xgboost::data::SimpleDMatrix::SimpleDMatrix<xgboost::data::RecordBatchesIterAdapter>(v4, a1, a2);
  return v4;
}

void sub_220E81B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B1C407E166FCFLL);
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::DenseAdapterBatch>(uint64_t **a1, _QWORD *a2, int a3, float a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  _QWORD *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int v24;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t **v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t **v59;
  unint64_t **v60;
  __int128 v61;
  uint64_t *v62[3];
  uint64_t v63;
  unint64_t v64;
  char v65[8];
  uint64_t v66;
  unint64_t v67;
  std::exception_ptr v68;
  std::mutex v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)a1;
  v6 = **a1;
  v7 = (*a1)[1];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) >> 3) - 1;
  v64 = v8;
  v61 = v5;
  memset(v62, 0, sizeof(v62));
  v63 = v8;
  v9 = a2[1];
  if (v9)
  {
    v11 = a2;
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v61, a2[1], a3);
    v13 = operator new(8uLL);
    *v13 = 0;
    v69.__m_.__sig = (uint64_t)(v13 + 1);
    *(_QWORD *)v69.__m_.__opaque = v13 + 1;
    v68.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v59, a3, (uint64_t)&v68);
    v14 = v9 / a3;
    operator delete(v13);
    v68.__ptr_ = 0;
    v69.__m_.__sig = 850045863;
    memset(v69.__m_.__opaque, 0, sizeof(v69.__m_.__opaque));
    v55 = v9;
    if (v9 >= a3)
    {
      v16 = 0;
      v17 = 0;
      v18 = fabsf(a4) == INFINITY;
      v15 = 1;
      v19 = *v59;
      v56 = v14;
      v57 = v11;
      do
      {
        v20 = v11[2];
        v58 = v16;
        if (v20)
        {
          v21 = 0;
          v22 = *v11 + v20 * v16;
          do
          {
            v23 = *(float *)(v22 + 4 * v21);
            if (fabsf(v23) == INFINITY)
              v24 = 0;
            else
              v24 = v15;
            if (!v18)
              v15 = v24;
            v67 = v17 - (_QWORD)a1[2];
            if (v67 < v64)
            {
              dmlc::LogCheckFormat<unsigned long,unsigned long>(&v66);
              if (v66)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
                v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
                v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
                v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key >= builder_base_row_offset", 30);
                v29 = *(char *)(v66 + 23);
                v30 = v29 >= 0 ? v66 : *(_QWORD *)v66;
                v31 = v29 >= 0 ? *(unsigned __int8 *)(v66 + 23) : *(_QWORD *)(v66 + 8);
                v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
                v33 = v66;
                v66 = 0;
                if (v33)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v66, v33);
              }
            }
            v34 = v21 + 1;
            v35 = *v19;
            if (*v19 <= v21 + 1)
              v35 = v21 + 1;
            *v19 = v35;
            if (v23 != a4)
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v62[0], v63, v67);
            ++v21;
          }
          while (v20 != v34);
        }
        ++v17;
        v11 = v57;
        v16 = v58 + 4;
        v14 = v56;
      }
      while (v17 != v56);
    }
    else
    {
      LOBYTE(v15) = 1;
    }
    dmlc::OMPException::Rethrow(&v68);
    if ((v15 & 1) == 0)
    {
      v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v65);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: valid", 19);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v65);
    }
    v36 = v59;
    if (v59 == v60)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v37 = *v36;
        v36 += 3;
        v38 = *v37;
        if (v9 <= *v37)
          v9 = v38;
      }
      while (v36 != v60);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v61);
    if (v55 >= a3)
    {
      v39 = 0;
      v40 = 0;
      v41 = *v11;
      do
      {
        v42 = v11[2];
        if (v42)
        {
          v43 = 0;
          v45 = (_QWORD *)*((_QWORD *)&v61 + 1);
          v44 = v62[0];
          do
          {
            v46 = *(float *)(v41 + v42 * v39 + 4 * v43);
            if (v46 != a4)
            {
              v47 = v40 - ((_QWORD)a1[2] + v63);
              v48 = *(_QWORD *)(*v44 + 8 * v47);
              *(_QWORD *)(*v44 + 8 * v47) = v48 + 1;
              v49 = *v45 + 8 * v48;
              *(_DWORD *)v49 = v43;
              *(float *)(v49 + 4) = v46;
            }
            ++v43;
          }
          while (v42 != v43);
        }
        ++v40;
        v39 += 4;
      }
      while (v40 != v14);
    }
    dmlc::OMPException::Rethrow(&v68);
    std::mutex::~mutex(&v69);
    std::exception_ptr::~exception_ptr(&v68);
    v68.__ptr_ = &v59;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  v68.__ptr_ = v62;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  return v9;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data17DenseAdapterBatchEEEyRKT_fi(a1, a2, a3, a4);
}

void sub_220E81F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr(&a31);
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = a3;
  std::vector<std::vector<unsigned long>>::resize(a1 + 2, a3);
  v7 = a2 / v6;
  a1[6] = a2 / v6;
  v8 = a1[2];
  if (a1[3] - v8 != 24)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = a1[6];
      v12 = 0;
      std::vector<unsigned long>::resize(v8 + v9, v11, &v12);
      ++v10;
      v8 = a1[2];
      v9 += 24;
    }
    while (v10 < -1 - 0x5555555555555555 * ((a1[3] - v8) >> 3));
    v7 = a1[6];
  }
  v12 = 0;
  std::vector<unsigned long>::resize(v8 + 24 * (a3 - 1), a2 - v7 * (a3 - 1), &v12);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a1[2];
  v2 = a1[3];
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v8 = 1;
  }
  else
  {
    v5 = 0;
    v6 = v4 / 24;
    if (v6 <= 1)
      v6 = 1;
    v7 = (_QWORD *)(v3 + 8);
    do
    {
      v5 += (uint64_t)(*v7 - *(v7 - 1)) >> 3;
      v7 += 3;
      --v6;
    }
    while (v6);
    v8 = v5 + 1;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 8);
  if (*(_QWORD *)*a1 == v10)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 - 8);
  v25 = v11;
  std::vector<unsigned long>::resize(v9, a1[5] + v8, &v25);
  v12 = a1[2];
  v13 = a1[3];
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0;
    v16 = 0;
    v17 = v14 / 24;
    v18 = a1[5] + 1;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      v19 = *(uint64_t **)(v12 + 24 * v15);
      v20 = *(_QWORD *)(v12 + 24 * v15 + 8) - (_QWORD)v19;
      if (v20)
      {
        v21 = v20 >> 3;
        v22 = *(_QWORD *)*a1;
        v23 = (*(_QWORD *)(*a1 + 8) - v22) >> 3;
        if (v21 <= 1)
          v21 = 1;
        do
        {
          v24 = *v19;
          *v19 = v25 + v16;
          v16 += v24;
          if (v18 < v23)
            *(_QWORD *)(v22 + 8 * v18++) += v16;
          ++v19;
          --v21;
        }
        while (v21);
      }
      ++v15;
    }
    while (v15 != v17);
  }
  std::vector<xgboost::Entry>::resize(a1[1], *(_QWORD *)(*(_QWORD *)(*a1 + 8) - 8));
}

unint64_t xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>(uint64_t **a1, uint64_t a2, int a3, float a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  int v31;
  std::string *Entry;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  void ***v58;
  std::string *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t **v68;
  uint64_t **v69;
  __int128 v70;
  uint64_t *v71[3];
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82[4];
  _QWORD *v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int16 v88;
  unint64_t v89;
  _QWORD v90[3];
  std::exception_ptr v91;
  std::mutex v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)a1;
  v6 = **a1;
  v7 = (*a1)[1];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) >> 3) - 1;
  v73 = v8;
  v70 = v5;
  memset(v71, 0, sizeof(v71));
  v72 = v8;
  v9 = *(_QWORD *)(a2 + 32);
  if (!v9)
    goto LABEL_9;
  v13 = *(_QWORD **)a2;
  v14 = *(_QWORD **)(a2 + 8);
  v15 = *(_OWORD *)(a2 + 16);
  v86 = *(_OWORD *)(a2 + 32);
  v85 = v15;
  v16 = *(_OWORD *)(a2 + 48);
  v87 = v16;
  v88 = *(_WORD *)(a2 + 64);
  v83 = v13;
  v84 = v14;
  v89 = v9 - 1;
  if (!*((_QWORD *)&v86 + 1)
    || (v75 = &v83,
        v76 = v9 - 1,
        *(_QWORD *)&v77 = *((_QWORD *)&v86 + 1) - 1,
        xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v83, &v75, *(float *)&v16), (v9 = *(_QWORD *)(a2 + 32)) != 0))
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v70, v9, a3);
    v17 = operator new(8uLL);
    *v17 = 0;
    v84 = v17 + 1;
    *(_QWORD *)&v85 = v17 + 1;
    v83 = v17;
    std::vector<std::vector<unsigned long long>>::vector(&v68, a3, (uint64_t)&v83);
    v67 = (__int128 *)(a2 + 16);
    v65 = (_QWORD *)a2;
    v66 = v9 / a3;
    operator delete(v17);
    v91.__ptr_ = 0;
    v92.__m_.__sig = 850045863;
    memset(v92.__m_.__opaque, 0, sizeof(v92.__m_.__opaque));
    v64 = v9;
    if (v9 >= a3)
    {
      v20 = 0;
      v21 = fabsf(a4) == INFINITY;
      v18 = 1;
      v22 = *v68;
      do
      {
        v23 = (_QWORD *)*v65;
        v24 = v65[1];
        v80 = *((_WORD *)v67 + 24);
        v25 = v67[2];
        v27 = *v67;
        v26 = v67[1];
        v78 = v26;
        v79 = v25;
        v77 = v27;
        v75 = v23;
        v76 = v24;
        v81 = v20;
        if (*((_QWORD *)&v26 + 1))
        {
          v28 = 0;
          do
          {
            v29 = v81;
            v82[0] = (uint64_t)&v75;
            v82[1] = v81;
            v82[2] = v28;
            v30 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v75, v82, *(float *)&v26);
            *(float *)&v26 = fabsf(v30);
            if (*(float *)&v26 == INFINITY)
              v31 = 0;
            else
              v31 = v18;
            if (!v21)
              v18 = v31;
            v82[0] = v29 - (_QWORD)a1[2];
            if (v82[0] < v73)
            {
              dmlc::LogCheckFormat<unsigned long,unsigned long>(&v74);
              if (v74)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
                v33 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
                v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: ", 14);
                v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"key >= builder_base_row_offset", 30);
                v36 = *(char *)(v74 + 23);
                v37 = v36 >= 0 ? v74 : *(_QWORD *)v74;
                v38 = v36 >= 0 ? *(unsigned __int8 *)(v74 + 23) : *(_QWORD *)(v74 + 8);
                v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v83);
                v40 = v74;
                v74 = 0;
                if (v40)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v74, v40);
              }
            }
            v41 = v28 + 1;
            v42 = *v22;
            if (*v22 <= (unint64_t)(v28 + 1))
              v42 = v28 + 1;
            *v22 = v42;
            if (v30 != a4)
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v71[0], v72, v82[0]);
            ++v28;
          }
          while (v41 < *((_QWORD *)&v78 + 1));
        }
        ++v20;
      }
      while (v20 != v66);
    }
    else
    {
      LOBYTE(v18) = 1;
    }
    dmlc::OMPException::Rethrow(&v91);
    if ((v18 & 1) == 0)
    {
      v60 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
      dmlc::LogMessageFatal::Entry::Init(v60, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v61 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: valid", 19);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v83);
    }
    v43 = v68;
    if (v68 == v69)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        v44 = (unint64_t *)*v43;
        v43 += 3;
        v45 = *v44;
        if (v19 <= *v44)
          v19 = v45;
      }
      while (v43 != v69);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v70);
    if (v64 >= a3)
    {
      v46 = 0;
      do
      {
        v47 = (_QWORD *)*v65;
        v48 = (_QWORD *)v65[1];
        v88 = *((_WORD *)v67 + 24);
        v49 = v67[2];
        v51 = *v67;
        v50 = v67[1];
        v86 = v50;
        v87 = v49;
        v85 = v51;
        v83 = v47;
        v84 = v48;
        v89 = v46;
        if (*((_QWORD *)&v50 + 1))
        {
          v52 = 0;
          do
          {
            v53 = v89;
            v90[0] = &v83;
            v90[1] = v89;
            v90[2] = v52;
            *(float *)&v50 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)&v83, v90, *(float *)&v50);
            if (*(float *)&v50 != a4)
            {
              v54 = v53 - ((_QWORD)a1[2] + v72);
              v55 = (_QWORD *)*((_QWORD *)&v70 + 1);
              v56 = *(_QWORD *)(*v71[0] + 8 * v54);
              *(_QWORD *)(*v71[0] + 8 * v54) = v56 + 1;
              v57 = (_DWORD *)(*v55 + 8 * v56);
              *v57 = v52;
              v57[1] = v50;
            }
            ++v52;
          }
          while (v52 < *((_QWORD *)&v86 + 1));
        }
        ++v46;
      }
      while (v46 != v66);
    }
    dmlc::OMPException::Rethrow(&v91);
    std::mutex::~mutex(&v92);
    std::exception_ptr::~exception_ptr(&v91);
    v91.__ptr_ = &v68;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v58);
  }
  else
  {
LABEL_9:
    v19 = 0;
  }
  v91.__ptr_ = v71;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  return v19;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data17ArrayAdapterBatchEEEyRKT_fi(a1, a2, a3, a4);
}

void sub_220E827E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::exception_ptr a41,std::exception_ptr a42)
{
  uint64_t v42;
  void ***v44;

  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v42 - 192));
  *(_QWORD *)(v42 - 192) = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v44);
  *(_QWORD *)(v42 - 192) = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSRAdapterBatch>(uint64_t **a1, uint64_t *a2, int a3, float a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  float *v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  int v27;
  std::string *Entry;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t **v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t *v49;
  _QWORD *v50;
  float *v51;
  float v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t **v66;
  unint64_t **v67;
  __int128 v68;
  uint64_t *v69[3];
  uint64_t v70;
  unint64_t v71;
  _BYTE v72[8];
  uint64_t v73;
  unint64_t v74;
  std::exception_ptr v75;
  std::mutex v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)a1;
  v6 = **a1;
  v7 = (*a1)[1];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) >> 3) - 1;
  v71 = v8;
  v68 = v5;
  memset(v69, 0, sizeof(v69));
  v70 = v8;
  v9 = a2[3];
  if (v9)
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v68, a2[3], a3);
    v13 = operator new(8uLL);
    *v13 = 0;
    v76.__m_.__sig = (uint64_t)(v13 + 1);
    *(_QWORD *)v76.__m_.__opaque = v13 + 1;
    v75.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v66, a3, (uint64_t)&v75);
    v63 = a2;
    v65 = v9 / a3;
    operator delete(v13);
    v75.__ptr_ = 0;
    v76.__m_.__sig = 850045863;
    memset(v76.__m_.__opaque, 0, sizeof(v76.__m_.__opaque));
    v62 = a3;
    if (v9 >= a3)
    {
      v16 = 0;
      v17 = fabsf(a4) == INFINITY;
      v14 = 1;
      v18 = *v66;
      do
      {
        v19 = *(_QWORD *)(*v63 + 8 * v16);
        v64 = v16 + 1;
        v20 = *(_QWORD *)(*v63 + 8 * (v16 + 1));
        v21 = v20 - v19;
        if (v20 != v19)
        {
          v22 = (unsigned int *)(v63[1] + 4 * v19);
          v23 = (float *)(v63[2] + 4 * v19);
          do
          {
            v25 = *v22++;
            v24 = v25;
            v26 = *v23;
            if (fabsf(*v23) == INFINITY)
              v27 = 0;
            else
              v27 = v14;
            if (!v17)
              v14 = v27;
            v74 = v16 - (_QWORD)a1[2];
            if (v74 < v71)
            {
              dmlc::LogCheckFormat<unsigned long,unsigned long>(&v73);
              if (v73)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
                v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
                v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
                v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"key >= builder_base_row_offset", 30);
                v32 = *(char *)(v73 + 23);
                v33 = v32 >= 0 ? v73 : *(_QWORD *)v73;
                v34 = v32 >= 0 ? *(unsigned __int8 *)(v73 + 23) : *(_QWORD *)(v73 + 8);
                v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
                v36 = v73;
                v73 = 0;
                if (v36)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v36);
              }
            }
            if (*v18 <= (unint64_t)(v24 + 1))
              v37 = v24 + 1;
            else
              v37 = *v18;
            *v18 = v37;
            if (v26 != a4)
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v69[0], v70, v74);
            ++v23;
            --v21;
          }
          while (v21);
        }
        ++v16;
      }
      while (v64 != v65);
    }
    else
    {
      LOBYTE(v14) = 1;
    }
    dmlc::OMPException::Rethrow(&v75);
    if ((v14 & 1) == 0)
    {
      v58 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      dmlc::LogMessageFatal::Entry::Init(v58, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v59 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v72);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Check failed: valid", 19);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v72);
    }
    v38 = (unint64_t **)v66;
    if (v66 == (uint64_t **)v67)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v39 = *v38;
        v38 += 3;
        v40 = *v39;
        if (v15 <= *v39)
          v15 = v40;
      }
      while (v38 != v67);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v68);
    if (v9 >= v62)
    {
      v41 = 0;
      v42 = *v63;
      v43 = v63[1];
      v44 = v63[2];
      do
      {
        v45 = *(_QWORD *)(v42 + 8 * v41);
        v46 = v41 + 1;
        v47 = *(_QWORD *)(v42 + 8 * (v41 + 1)) - v45;
        if (v47)
        {
          v48 = (int *)(v43 + 4 * v45);
          v50 = (_QWORD *)*((_QWORD *)&v68 + 1);
          v49 = v69[0];
          v51 = (float *)(v44 + 4 * v45);
          do
          {
            v52 = *v51;
            if (*v51 != a4)
            {
              v53 = *v48;
              v54 = v41 - ((_QWORD)a1[2] + v70);
              v55 = *(_QWORD *)(*v49 + 8 * v54);
              *(_QWORD *)(*v49 + 8 * v54) = v55 + 1;
              v56 = (float *)(*v50 + 8 * v55);
              *(_DWORD *)v56 = v53;
              v56[1] = v52;
            }
            ++v51;
            ++v48;
            --v47;
          }
          while (v47);
        }
        ++v41;
      }
      while (v46 != v65);
    }
    dmlc::OMPException::Rethrow(&v75);
    std::mutex::~mutex(&v76);
    std::exception_ptr::~exception_ptr(&v75);
    v75.__ptr_ = &v66;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  }
  else
  {
    v15 = 0;
  }
  v75.__ptr_ = v69;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  return v15;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data15CSRAdapterBatchEEEyRKT_fi(a1, a2, a3, a4);
}

void sub_220E82E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr(&a31);
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>(uint64_t **a1, xgboost::data::CSRArrayAdapterBatch *this, int a3, float a4)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t *v20;
  unint64_t i;
  int v22;
  std::string *Entry;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t **v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t j;
  float v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  float *v43;
  void ***v44;
  std::string *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  xgboost::data::CSRArrayAdapterBatch *v52;
  unint64_t v53;
  uint64_t **v54;
  unint64_t **v55;
  __int128 v56;
  uint64_t *v57[3];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  _BYTE v65[80];
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  _QWORD v70[10];
  unint64_t v71;
  std::exception_ptr v72;
  std::mutex v73;
  uint64_t v74;

  v6 = 0;
  v74 = *MEMORY[0x24BDAC8D0];
  v7 = *(_OWORD *)a1;
  v8 = **a1;
  v9 = (*a1)[1];
  v10 = v9 == v8;
  v11 = ((v9 - v8) >> 3) - 1;
  if (v10)
    v11 = 0;
  v59 = v11;
  v56 = v7;
  memset(v57, 0, sizeof(v57));
  v58 = v11;
  v12 = *((_QWORD *)this + 3);
  if (v12 >= 2)
  {
    xgboost::data::CSRArrayAdapterBatch::GetLine(this, v12 - 2, (uint64_t)v70);
    if (v71)
      xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v70, v71 - 1, (uint64_t)v65);
    v15 = *((_QWORD *)this + 3);
    if (v15 >= 2)
    {
      v51 = v15 - 1;
      xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v56, v15 - 1, a3);
      v16 = operator new(8uLL);
      *v16 = 0;
      v70[1] = v16 + 1;
      v70[2] = v16 + 1;
      v70[0] = v16;
      std::vector<std::vector<unsigned long long>>::vector(&v54, a3, (uint64_t)v70);
      v52 = this;
      v53 = v51 / a3;
      operator delete(v16);
      v50 = a3;
      v72.__ptr_ = 0;
      v73.__m_.__sig = 850045863;
      memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
      if (v51 >= a3)
      {
        v18 = 0;
        v19 = fabsf(a4) == INFINITY;
        v17 = 1;
        v20 = *v54;
        do
        {
          xgboost::data::CSRArrayAdapterBatch::GetLine(v52, v18, (uint64_t)v65);
          if (v66)
          {
            for (i = 0; i < v66; ++i)
            {
              xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v65, i, (uint64_t)&v62);
              if (fabsf(v64) == INFINITY)
                v22 = 0;
              else
                v22 = v17;
              if (!v19)
                v17 = v22;
              v61 = v62 - (_QWORD)a1[2];
              if (v61 < v59)
              {
                dmlc::LogCheckFormat<unsigned long,unsigned long>(&v60);
                if (v60)
                {
                  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
                  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
                  v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
                  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
                  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"key >= builder_base_row_offset", 30);
                  v27 = *(char *)(v60 + 23);
                  v28 = v27 >= 0 ? v60 : *(_QWORD *)v60;
                  v29 = v27 >= 0 ? *(unsigned __int8 *)(v60 + 23) : *(_QWORD *)(v60 + 8);
                  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
                  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
                  v31 = v60;
                  v60 = 0;
                  if (v31)
                    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v60, v31);
                }
              }
              if (*v20 <= (unint64_t)(v63 + 1))
                v32 = v63 + 1;
              else
                v32 = *v20;
              *v20 = v32;
              if (v64 != a4)
                xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v57[0], v58, v61);
            }
          }
          ++v18;
        }
        while (v18 != v53);
      }
      else
      {
        LOBYTE(v17) = 1;
      }
      dmlc::OMPException::Rethrow(&v72);
      if ((v17 & 1) == 0)
      {
        v46 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        dmlc::LogMessageFatal::Entry::Init(v46, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v47 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Check failed: valid", 19);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
      }
      v33 = (unint64_t **)v54;
      if (v54 == (uint64_t **)v55)
      {
        v6 = 0;
      }
      else
      {
        v6 = 0;
        do
        {
          v34 = *v33;
          v33 += 3;
          v35 = *v34;
          if (v6 <= *v34)
            v6 = v35;
        }
        while (v33 != v55);
      }
      xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v56);
      if (v51 >= v50)
      {
        v36 = 0;
        do
        {
          xgboost::data::CSRArrayAdapterBatch::GetLine(v52, v36, (uint64_t)v70);
          if (v71)
          {
            for (j = 0; j < v71; ++j)
            {
              xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v70, j, (uint64_t)&v67);
              v38 = v69;
              if (v69 != a4)
              {
                v39 = v68;
                v40 = v67 - ((_QWORD)a1[2] + v58);
                v41 = (_QWORD *)*((_QWORD *)&v56 + 1);
                v42 = *(_QWORD *)(*v57[0] + 8 * v40);
                *(_QWORD *)(*v57[0] + 8 * v40) = v42 + 1;
                v43 = (float *)(*v41 + 8 * v42);
                *(_DWORD *)v43 = v39;
                v43[1] = v38;
              }
            }
          }
          ++v36;
        }
        while (v36 != v53);
      }
      dmlc::OMPException::Rethrow(&v72);
      std::mutex::~mutex(&v73);
      std::exception_ptr::~exception_ptr(&v72);
      v72.__ptr_ = &v54;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v44);
    }
    else
    {
      v6 = 0;
    }
  }
  v72.__ptr_ = v57;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  return v6;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data20CSRArrayAdapterBatchEEEyRKT_fi(a1, this, a3, a4);
}

void sub_220E833F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::exception_ptr a49,uint64_t a50,uint64_t a51,uint64_t a52,std::exception_ptr a53)
{
  uint64_t v53;
  void ***v55;

  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v53 - 192));
  *(_QWORD *)(v53 - 192) = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v55);
  *(_QWORD *)(v53 - 192) = a13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 192));
  _Unwind_Resume(a1);
}

__n128 xgboost::data::CSRArrayAdapterBatch::GetLine@<Q0>(xgboost::data::CSRArrayAdapterBatch *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;

  v6 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, a2);
  v7 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, a2 + 1);
  v8 = *((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 9);
  result = *((__n128 *)this + 7);
  v12 = *((_QWORD *)this + 16);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)this + 88);
  *(_WORD *)(a3 + 48) = *((_WORD *)this + 52);
  *(_OWORD *)(a3 + 88) = *((_OWORD *)this + 9);
  *(_WORD *)(a3 + 104) = *((_WORD *)this + 80);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v7 - v6;
  *(__n128 *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 80) = v7 - v6;
  *(_QWORD *)(a3 + 112) = a2;
  *(_QWORD *)(a3 + 120) = v10 * v6;
  return result;
}

void xgboost::data::CSRArrayAdapterBatch::Line::GetElement(xgboost::data::CSRArrayAdapterBatch::Line *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;

  v6 = *((_QWORD *)this + 14);
  v7 = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>((uint64_t)this, (uint64_t)this, *((_QWORD *)this + 15) + a2);
  v9 = xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long>(unsigned long &&)::{lambda(float const*)#1}>((uint64_t)this + 56, (uint64_t)this + 56, *((_QWORD *)this + 15) + a2, v8);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(float *)(a3 + 16) = v9;
}

unint64_t xgboost::SparsePage::Push<xgboost::data::CSCAdapterBatch>(uint64_t **a1, uint64_t *a2, float a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BOOL4 v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  float *v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  int v28;
  std::string *Entry;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t *v50;
  _QWORD *v51;
  float *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t **v64;
  unint64_t **v65;
  __int128 v66;
  uint64_t *v67[3];
  uint64_t v68;
  unint64_t v69;
  _BYTE v70[8];
  uint64_t v71;
  unint64_t v72;
  std::exception_ptr v73;
  std::mutex v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)a1;
  v5 = **a1;
  v6 = (*a1)[1];
  if (v6 == v5)
    v7 = 0;
  else
    v7 = ((v6 - v5) >> 3) - 1;
  v69 = v7;
  v66 = v4;
  memset(v67, 0, sizeof(v67));
  v68 = v7;
  v8 = a2[3];
  if (v8)
  {
    v10 = (uint64_t *)(*a2 + 8 * v8);
    v11 = *(v10 - 1);
    v12 = *v10;
    if (v12 == v11)
      v13 = 0;
    else
      v13 = *(unsigned int *)(a2[1] + 4 * v11 + 4 * (v12 + ~v11)) - (_QWORD)a1[2];
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(&v66, v13, 1);
    v15 = operator new(8uLL);
    *v15 = 0;
    v74.__m_.__sig = (uint64_t)(v15 + 1);
    *(_QWORD *)v74.__m_.__opaque = v15 + 1;
    v73.__ptr_ = v15;
    std::vector<std::vector<unsigned long long>>::vector(&v64, 1uLL, (uint64_t)&v73);
    operator delete(v15);
    v16 = 0;
    v62 = v8;
    v73.__ptr_ = 0;
    v74.__m_.__sig = 850045863;
    memset(v74.__m_.__opaque, 0, sizeof(v74.__m_.__opaque));
    v17 = fabsf(a3) == INFINITY;
    v18 = 1;
    v19 = *v64;
    do
    {
      v20 = *(_QWORD *)(*a2 + 8 * v16++);
      v21 = *(_QWORD *)(*a2 + 8 * v16);
      v22 = v21 - v20;
      if (v21 != v20)
      {
        v23 = (unsigned int *)(a2[1] + 4 * v20);
        v24 = (float *)(a2[2] + 4 * v20);
        do
        {
          v26 = *v23++;
          v25 = v26;
          v27 = *v24;
          if (fabsf(*v24) == INFINITY)
            v28 = 0;
          else
            v28 = v18;
          if (!v17)
            v18 = v28;
          v72 = v25 - (_QWORD)a1[2];
          if (v72 < v69)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>(&v71);
            if (v71)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
              v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
              v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"key >= builder_base_row_offset", 30);
              v33 = *(char *)(v71 + 23);
              v34 = v33 >= 0 ? v71 : *(_QWORD *)v71;
              v35 = v33 >= 0 ? *(unsigned __int8 *)(v71 + 23) : *(_QWORD *)(v71 + 8);
              v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
              v37 = v71;
              v71 = 0;
              if (v37)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v71, v37);
            }
          }
          v38 = *v19;
          if (*v19 <= v16)
            v38 = v16;
          *v19 = v38;
          if (v27 != a3)
            xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v67[0], v68, v72);
          ++v24;
          --v22;
        }
        while (v22);
      }
    }
    while (v16 != v62);
    dmlc::OMPException::Rethrow(&v73);
    if ((v18 & 1) == 0)
    {
      v58 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      dmlc::LogMessageFatal::Entry::Init(v58, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v59 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v70);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Check failed: valid", 19);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v70);
    }
    v39 = v64;
    if (v64 == v65)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        v40 = *v39;
        v39 += 3;
        v41 = *v40;
        if (v14 <= *v40)
          v14 = v41;
      }
      while (v39 != v65);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage((uint64_t *)&v66);
    v42 = 0;
    v43 = *a2;
    v44 = a2[1];
    v45 = a2[2];
    do
    {
      v46 = *(_QWORD *)(v43 + 8 * v42);
      v47 = v42 + 1;
      v48 = *(_QWORD *)(v43 + 8 * (v42 + 1)) - v46;
      if (v48)
      {
        v49 = (unsigned int *)(v44 + 4 * v46);
        v51 = (_QWORD *)*((_QWORD *)&v66 + 1);
        v50 = v67[0];
        v52 = (float *)(v45 + 4 * v46);
        do
        {
          v53 = *v52;
          if (*v52 != a3)
          {
            v54 = *v49 - ((_QWORD)a1[2] + v68);
            v55 = *(_QWORD *)(*v50 + 8 * v54);
            *(_QWORD *)(*v50 + 8 * v54) = v55 + 1;
            v56 = (float *)(*v51 + 8 * v55);
            *(_DWORD *)v56 = v42;
            v56[1] = v53;
          }
          ++v52;
          ++v49;
          --v48;
        }
        while (v48);
      }
      ++v42;
    }
    while (v47 != v62);
    dmlc::OMPException::Rethrow(&v73);
    std::mutex::~mutex(&v74);
    std::exception_ptr::~exception_ptr(&v73);
    v73.__ptr_ = &v64;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  }
  else
  {
    v14 = 0;
  }
  v73.__ptr_ = v67;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  return v14;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data15CSCAdapterBatchEEEyRKT_fi(a1, a2, a3);
}

void sub_220E83B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::mutex *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::exception_ptr a26,uint64_t a27,uint64_t a28,std::exception_ptr a29)
{
  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr(&a29);
  a29.__ptr_ = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29.__ptr_ = a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  std::vector<std::vector<unsigned long>>::resize(a1 + 2, a3);
  v6 = a1[5];
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v7)
    v9 = v8;
  else
    v9 = 0;
  a1[6] = 0;
  v10 = a1[2];
  if (a1[3] - v10 != 24)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = 0;
      std::vector<unsigned long>::resize(v10 + v11, v9, &v13);
      ++v12;
      v10 = a1[2];
      v11 += 24;
    }
    while (v12 < -1 - 0x5555555555555555 * ((a1[3] - v10) >> 3));
  }
  v13 = 0;
  std::vector<unsigned long>::resize(v10 + 24 * (a3 - 1), v9, &v13);
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)*a1;
  v2 = *(_QWORD *)(*a1 + 8);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = *(_QWORD *)(v2 - 8);
  v22 = v4;
  v6 = a1[2];
  v5 = a1[3];
  if (v5 == v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = a1[5] + ((uint64_t)(*(_QWORD *)(v6 + v7 + 8) - *(_QWORD *)(v6 + v7)) >> 3);
      if (v9 >= (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 3)
      {
        std::vector<unsigned long>::resize(*a1, v9 + 1, &v22);
        v6 = a1[2];
        v5 = a1[3];
      }
      ++v8;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
      v7 += 24;
    }
    while (v8 < v10);
    v3 = *(_QWORD *)*a1;
    v2 = *(_QWORD *)(*a1 + 8);
    v5 = v6;
  }
  v11 = a1[5];
  v12 = v11 + 1;
  if (v11 + 1 < (v2 - v3) >> 3)
  {
    v13 = 0;
    v14 = (_QWORD *)(v5 + 8);
    do
    {
      v15 = v12;
      v16 = v14;
      for (i = v10; i; --i)
      {
        v18 = *(v16 - 1);
        v19 = a1[5];
        if (v11 < v19 + ((*v16 - v18) >> 3))
        {
          v20 = v11 - v19;
          v21 = *(_QWORD *)(v18 + 8 * v20);
          *(_QWORD *)(v18 + 8 * v20) = *(_QWORD *)(v2 - 8) + v13;
          v13 += v21;
        }
        v16 += 3;
      }
      *(_QWORD *)(v3 + 8 * v15) += v13;
      v12 = v15 + 1;
      v11 = v15;
    }
    while (v15 + 1 != (v2 - v3) >> 3);
  }
  std::vector<xgboost::Entry>::resize(a1[1], *(_QWORD *)(v2 - 8));
}

unint64_t xgboost::SparsePage::Push<xgboost::data::DataTableAdapterBatch>(uint64_t **a1, _QWORD *a2, float a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  float v23;
  int v24;
  std::string *Entry;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t **v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  float v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void ***v50;
  std::string *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t **v59;
  unint64_t **v60;
  __int128 v61;
  uint64_t *v62[3];
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[8];
  uint64_t v72;
  int v73;
  uint64_t v74;
  std::exception_ptr v75;
  std::mutex v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)a1;
  v5 = **a1;
  v6 = (*a1)[1];
  if (v6 == v5)
    v7 = 0;
  else
    v7 = ((v6 - v5) >> 3) - 1;
  v64 = v7;
  v61 = v4;
  memset(v62, 0, sizeof(v62));
  v63 = v7;
  v8 = a2[2];
  if (v8
    && ((xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)&v75, a2, v8 - 1),
         !v76.__m_.__sig)
      ? (v12 = 0)
      : (v11 = v76.__m_.__sig - 1,
         xgboost::data::DataTableAdapterBatch::Line::DTGetValue(*(uint64_t *)&v76.__m_.__opaque[8], LOBYTE(v75.__ptr_), v76.__m_.__sig - 1), v12 = v11 - (_QWORD)a1[2]), (v58 = a2[2]) != 0))
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(&v61, v12, 1);
    v13 = operator new(8uLL);
    v57 = a2;
    *v13 = 0;
    v76.__m_.__sig = (uint64_t)(v13 + 1);
    *(_QWORD *)v76.__m_.__opaque = v13 + 1;
    v75.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v59, 1uLL, (uint64_t)&v75);
    operator delete(v13);
    v14 = 0;
    v75.__ptr_ = 0;
    v76.__m_.__sig = 850045863;
    memset(v76.__m_.__opaque, 0, sizeof(v76.__m_.__opaque));
    v15 = fabsf(a3) == INFINITY;
    v16 = 1;
    v17 = *v59;
    do
    {
      v56 = v14;
      xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)v67, v57, v14);
      v18 = v68;
      if (v68)
      {
        v19 = 0;
        v20 = v70;
        v21 = v67[0];
        v22 = v69 + 1;
        do
        {
          v23 = xgboost::data::DataTableAdapterBatch::Line::DTGetValue(v20, v21, v19);
          if (fabsf(v23) == INFINITY)
            v24 = 0;
          else
            v24 = v16;
          if (!v15)
            v16 = v24;
          v66 = v19 - (_QWORD)a1[2];
          if (v66 < v64)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>(&v65);
            if (v65)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
              v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
              v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"key >= builder_base_row_offset", 30);
              v29 = *(char *)(v65 + 23);
              v30 = v29 >= 0 ? v65 : *(_QWORD *)v65;
              v31 = v29 >= 0 ? *(unsigned __int8 *)(v65 + 23) : *(_QWORD *)(v65 + 8);
              v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
              v33 = v65;
              v65 = 0;
              if (v33)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v65, v33);
            }
          }
          v34 = *v17;
          if (*v17 <= v22)
            v34 = v22;
          *v17 = v34;
          if (v23 != a3)
            xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v62[0], v63, v66);
          ++v19;
        }
        while (v18 != v19);
      }
      v14 = v56 + 1;
    }
    while (v56 + 1 != v58);
    dmlc::OMPException::Rethrow(&v75);
    if ((v16 & 1) == 0)
    {
      v52 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      dmlc::LogMessageFatal::Entry::Init(v52, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v71);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: valid", 19);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v71);
    }
    v35 = v59;
    if (v59 == v60)
    {
      v36 = 0;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = *v35;
        v35 += 3;
        v38 = *v37;
        if (v36 <= *v37)
          v36 = v38;
      }
      while (v35 != v60);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage((uint64_t *)&v61);
    for (i = 0; i != v58; ++i)
    {
      xgboost::data::DataTableAdapterBatch::GetLine((xgboost::data::DataTableAdapterBatch *)v71, v57, i);
      v40 = v72;
      if (v72)
      {
        v41 = 0;
        v42 = v73;
        v43 = v74;
        v44 = v71[0];
        do
        {
          v45 = xgboost::data::DataTableAdapterBatch::Line::DTGetValue(v43, v44, v41);
          if (v45 != a3)
          {
            v46 = (_QWORD *)*((_QWORD *)&v61 + 1);
            v47 = *v62[0] - 8 * ((_QWORD)a1[2] + v63);
            v48 = *(_QWORD *)(v47 + 8 * v41);
            *(_QWORD *)(v47 + 8 * v41) = v48 + 1;
            v49 = *v46 + 8 * v48;
            *(_DWORD *)v49 = v42;
            *(float *)(v49 + 4) = v45;
          }
          ++v41;
        }
        while (v40 != v41);
      }
    }
    dmlc::OMPException::Rethrow(&v75);
    std::mutex::~mutex(&v76);
    std::exception_ptr::~exception_ptr(&v75);
    v75.__ptr_ = &v59;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v50);
  }
  else
  {
    v36 = 0;
  }
  v75.__ptr_ = v62;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  return v36;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data21DataTableAdapterBatchEEEyRKT_fi(a1, a2, a3);
}

void sub_220E84318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,std::exception_ptr a33)
{
  uint64_t v33;
  void ***v35;

  std::mutex::~mutex(a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 192));
  *(_QWORD *)(v33 - 192) = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(_QWORD *)(v33 - 192) = a10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 192));
  _Unwind_Resume(a1);
}

void xgboost::data::DataTableAdapterBatch::GetLine(xgboost::data::DataTableAdapterBatch *this, _QWORD *a2, uint64_t a3)
{
  char v6;
  char v9;
  unsigned __int8 *p_p;
  int v19;
  int v20;
  std::string *Entry;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  uint64_t v27;
  char v28;
  char v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(a2[1] + 8 * a3));
  v6 = v28;
  if (v28 < 0)
  {
    if (v27 != 4)
    {
      if (v27 != 5)
      {
        if (v27 == 7)
        {
          if (*(_DWORD *)__p != 1634692198 || *(_DWORD *)((char *)__p + 3) != 842232929)
          {
            if (*(_DWORD *)__p == 1634692198 && *(_DWORD *)((char *)__p + 3) == 875983969)
            {
              v9 = 1;
              goto LABEL_62;
            }
            goto LABEL_61;
          }
          v9 = 0;
          goto LABEL_62;
        }
LABEL_61:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/adapter.h");
        v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unknown data table type.", 24);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
        v9 = 7;
        v6 = v28;
        goto LABEL_62;
      }
      p_p = (unsigned __int8 *)__p;
      if (*(_DWORD *)__p == 1819242338 && *((_BYTE *)__p + 4) == 56)
      {
        v9 = 2;
        goto LABEL_62;
      }
      if (*(_DWORD *)__p == 863268457 && *((_BYTE *)__p + 4) == 50)
      {
        v9 = 3;
        goto LABEL_62;
      }
      if (*(_DWORD *)__p != 829714025 || *((_BYTE *)__p + 4) != 54)
      {
LABEL_57:
        v19 = *(_DWORD *)p_p;
        v20 = p_p[4];
        if (v19 != 913600105 || v20 != 52)
          goto LABEL_61;
        v9 = 6;
        goto LABEL_62;
      }
LABEL_73:
      v9 = 5;
      goto LABEL_62;
    }
    if (*(_DWORD *)__p != 947154537)
      goto LABEL_61;
LABEL_44:
    v9 = 4;
    goto LABEL_62;
  }
  if (v28 == 4)
  {
    if ((_DWORD)__p != 947154537)
      goto LABEL_61;
    v6 = 4;
    goto LABEL_44;
  }
  if (v28 == 5)
  {
    if ((_DWORD)__p == 1819242338 && BYTE4(__p) == 56)
    {
      v9 = 2;
    }
    else
    {
      if ((_DWORD)__p != 863268457 || BYTE4(__p) != 50)
      {
        if ((_DWORD)__p != 829714025 || BYTE4(__p) != 54)
        {
          p_p = (unsigned __int8 *)&__p;
          goto LABEL_57;
        }
        v6 = 5;
        goto LABEL_73;
      }
      v9 = 3;
    }
    v6 = 5;
    goto LABEL_62;
  }
  if (v28 != 7)
    goto LABEL_61;
  if ((_DWORD)__p == 1634692198 && *(_DWORD *)((char *)&__p + 3) == 842232929)
  {
    v9 = 0;
  }
  else
  {
    if ((_DWORD)__p != 1634692198 || *(_DWORD *)((char *)&__p + 3) != 875983969)
      goto LABEL_61;
    v9 = 1;
  }
  v6 = 7;
LABEL_62:
  v24 = a2[3];
  v25 = *(_QWORD *)(*a2 + 8 * a3);
  *(_BYTE *)this = v9;
  *((_QWORD *)this + 1) = v24;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = v25;
  if (v6 < 0)
    operator delete(__p);
}

void sub_220E847E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t xgboost::SparsePage::Push<xgboost::data::FileAdapterBatch>(uint64_t **a1, unint64_t **a2, int a3, float a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unsigned int *v26;
  float *v27;
  float v28;
  uint64_t v29;
  int v30;
  std::string *Entry;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t **v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  float *v52;
  char *v53;
  uint64_t *v54;
  _QWORD *v55;
  float v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t **v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t **v71;
  unint64_t **v72;
  __int128 v73;
  uint64_t *v74[3];
  uint64_t v75;
  unint64_t v76;
  char v77[8];
  uint64_t v78;
  unint64_t v79;
  std::exception_ptr v80;
  std::mutex v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)a1;
  v6 = **a1;
  v7 = (*a1)[1];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) >> 3) - 1;
  v76 = v8;
  v73 = v5;
  memset(v74, 0, sizeof(v74));
  v75 = v8;
  v9 = **a2;
  if (v9)
  {
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitBudget(&v73, **a2, a3);
    v13 = operator new(8uLL);
    *v13 = 0;
    v81.__m_.__sig = (uint64_t)(v13 + 1);
    *(_QWORD *)v81.__m_.__opaque = v13 + 1;
    v80.__ptr_ = v13;
    std::vector<std::vector<unsigned long long>>::vector(&v71, a3, (uint64_t)&v80);
    v68 = a2;
    v70 = v9 / a3;
    operator delete(v13);
    v80.__ptr_ = 0;
    v81.__m_.__sig = 850045863;
    memset(v81.__m_.__opaque, 0, sizeof(v81.__m_.__opaque));
    v66 = a3;
    v67 = v9;
    if (v9 >= a3)
    {
      v16 = 0;
      v17 = fabsf(a4) == INFINITY;
      v14 = 1;
      v18 = *v71;
      do
      {
        v19 = *v68;
        v20 = (*v68)[1];
        v21 = *(_QWORD *)(v20 + 8 * v16);
        v69 = v16 + 1;
        v22 = *(_QWORD *)(v20 + 8 * (v16 + 1));
        v23 = v22 - v21;
        if (v22 != v21)
        {
          v24 = (char *)v68[1] + v16;
          v25 = v19[7];
          v26 = (unsigned int *)(v19[6] + 4 * v21);
          v27 = (float *)(v25 + 4 * v21);
          do
          {
            if (v25)
              v28 = *v27;
            else
              v28 = 1.0;
            v29 = *v26;
            if (fabsf(v28) == INFINITY)
              v30 = 0;
            else
              v30 = v14;
            if (!v17)
              v14 = v30;
            v79 = v24 - (char *)a1[2];
            if (v79 < v76)
            {
              dmlc::LogCheckFormat<unsigned long,unsigned long>(&v78);
              if (v78)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
                v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
                v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
                v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"key >= builder_base_row_offset", 30);
                v35 = *(char *)(v78 + 23);
                v36 = v35 >= 0 ? v78 : *(_QWORD *)v78;
                v37 = v35 >= 0 ? *(unsigned __int8 *)(v78 + 23) : *(_QWORD *)(v78 + 8);
                v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v77);
                v39 = v78;
                v78 = 0;
                if (v39)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v78, v39);
              }
            }
            if (*v18 <= (unint64_t)(v29 + 1))
              v40 = v29 + 1;
            else
              v40 = *v18;
            *v18 = v40;
            if (v28 != a4)
              xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(v74[0], v75, v79);
            ++v26;
            ++v27;
            --v23;
          }
          while (v23);
        }
        v16 = v69;
      }
      while (v69 != v70);
    }
    else
    {
      LOBYTE(v14) = 1;
    }
    dmlc::OMPException::Rethrow(&v80);
    if ((v14 & 1) == 0)
    {
      v62 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
      dmlc::LogMessageFatal::Entry::Init(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v63 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: valid", 19);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v77);
    }
    v41 = (unint64_t **)v71;
    if (v71 == (uint64_t **)v72)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v42 = *v41;
        v41 += 3;
        v43 = *v42;
        if (v15 <= *v42)
          v15 = v43;
      }
      while (v41 != v72);
    }
    xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,true>::InitStorage((uint64_t *)&v73);
    if (v67 >= v66)
    {
      v44 = 0;
      v45 = (*v68)[1];
      v46 = (*v68)[6];
      v47 = (*v68)[7];
      do
      {
        v48 = *(_QWORD *)(v45 + 8 * v44);
        v49 = v44 + 1;
        v50 = *(_QWORD *)(v45 + 8 * (v44 + 1)) - v48;
        if (v50)
        {
          v51 = (int *)(v46 + 4 * v48);
          v52 = (float *)(v47 + 4 * v48);
          v53 = (char *)v68[1] + v44;
          v55 = (_QWORD *)*((_QWORD *)&v73 + 1);
          v54 = v74[0];
          do
          {
            if (v47)
              v56 = *v52;
            else
              v56 = 1.0;
            if (v56 != a4)
            {
              v57 = *v51;
              v58 = (char *)(v53 - ((char *)a1[2] + v75));
              v59 = *(_QWORD *)(*v54 + 8 * (_QWORD)v58);
              *(_QWORD *)(*v54 + 8 * (_QWORD)v58) = v59 + 1;
              v60 = *v55 + 8 * v59;
              *(_DWORD *)v60 = v57;
              *(float *)(v60 + 4) = v56;
            }
            ++v51;
            ++v52;
            --v50;
          }
          while (v50);
        }
        v44 = v49;
      }
      while (v49 != v70);
    }
    dmlc::OMPException::Rethrow(&v80);
    std::mutex::~mutex(&v81);
    std::exception_ptr::~exception_ptr(&v80);
    v80.__ptr_ = &v71;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  }
  else
  {
    v15 = 0;
  }
  v80.__ptr_ = v74;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  return v15;
}

{
  return __ZN7xgboost10SparsePage4PushINS_4data16FileAdapterBatchEEEyRKT_fi(a1, a2, a3, a4);
}

void sub_220E84CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception_ptr a28,uint64_t a29,uint64_t a30,std::exception_ptr a31)
{
  std::mutex::~mutex(a12);
  std::exception_ptr::~exception_ptr(&a31);
  a31.__ptr_ = &a16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31.__ptr_ = a11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t *xgboost::MetaInfo::Clear(xgboost::MetaInfo *this)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = 0;
  v4 = 0uLL;
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v3, 0, 0.0);
  v4 = 0uLL;
  xgboost::HostDeviceVector<float>::operator=((uint64_t *)this + 3, &v3);
  *((_OWORD *)this + 2) = v4;
  xgboost::HostDeviceVector<float>::~HostDeviceVector(&v3);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *(_QWORD *)(*((_QWORD *)this + 9) + 8) = **((_QWORD **)this + 9);
  v3 = 0;
  v4 = 0uLL;
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v3, 0, 0.0);
  v4 = 0uLL;
  xgboost::HostDeviceVector<float>::operator=((uint64_t *)this + 10, &v3);
  *(_OWORD *)((char *)this + 88) = v4;
  return xgboost::HostDeviceVector<float>::~HostDeviceVector(&v3);
}

void sub_220E84EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::SaveBinary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  xgboost::Version::Save(a2);
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &xgboost::MetaInfo::kNumField, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_row");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_col");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nonzero");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "group_ptr");
  v10 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2;
  v11 = 1;
  v4 = v9;
  if ((v9 & 0x80u) != 0)
    v4 = v8;
  v12 = v4;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 8);
  if (v12)
  {
    if ((v9 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v9 & 0x80u) == 0)
      v6 = v9;
    else
      v6 = v8;
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, p_p, v6);
  }
  LOBYTE(v12) = 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 1);
  LOBYTE(v12) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v10, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v11, 8);
  v12 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 8);
  if (v12)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48));
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_margin");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_lower_bound");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_upper_bound");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_names");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_types");
  if ((char)v9 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_weights");
  if ((char)v9 < 0)
    operator delete(__p);
}

void sub_220E852EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::SaveScalarField<unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  char v11;
  char v12;
  uint64_t v13;

  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v13 = v6;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v13, 8);
  if (v13)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v8, v9);
  }
  v12 = 4;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 1);
  v11 = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v11, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, a3, 8);
}

uint64_t `anonymous namespace'::SaveTensorField<float,2>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;

  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  v12 = v6;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 8);
  if (v12)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = a2[1];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v8, v9);
  }
  LOBYTE(v12) = 1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 1);
  LOBYTE(v12) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 1);
  v12 = a3[1];
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 8);
  v12 = a3[2];
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 8);
  v10 = (_QWORD *)*a3;
  v12 = (uint64_t)(v10[1] - *v10) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v12, 8);
  if (v12)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 8))(a1, *v10, v10[1] - *v10);
  return result;
}

uint64_t `anonymous namespace'::SaveVectorField<float>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a3;
  v14 = a4;
  v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = a2[1];
  v15 = v8;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v15, 8);
  if (v15)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = a2[1];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v10, v11);
  }
  LOBYTE(v15) = 1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v15, 1);
  LOBYTE(v15) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v15, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v13, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v14, 8);
  v15 = (uint64_t)(a5[1] - *a5) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v15, 8);
  if (v15)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 8))(a1, *a5, a5[1] - *a5);
  return result;
}

uint64_t `anonymous namespace'::SaveVectorField<std::string>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v20 = a3;
  v21 = a4;
  v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = a2[1];
  v23 = v8;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v23, 8);
  if (v23)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = a2[1];
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v10, v11);
  }
  LOBYTE(v23) = 5;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v23, 1);
  LOBYTE(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v23, 1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v20, 8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v21, 8);
  v22 = 0xAAAAAAAAAAAAAAABLL * (a5[1] - *a5);
  result = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v22, 8);
  v13 = (char *)a5[1] - (char *)*a5;
  if (v13)
    v14 = *a5;
  else
    v14 = 0;
  if (v13)
  {
    v15 = v13 / 24;
    do
    {
      v16 = *((unsigned __int8 *)v14 + 23);
      if ((v16 & 0x80u) != 0)
        v16 = v14[1];
      v23 = v16;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v23, 8);
      if (v23)
      {
        v17 = *((char *)v14 + 23);
        if (v17 >= 0)
          v18 = v14;
        else
          v18 = (uint64_t *)*v14;
        if (v17 >= 0)
          v19 = *((unsigned __int8 *)v14 + 23);
        else
          v19 = v14[1];
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v18, v19);
      }
      v14 += 3;
      --v15;
    }
    while (v15);
  }
  return result;
}

void xgboost::LoadFeatureType(unsigned __int8 ***a1, unint64_t *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  int v5;
  unsigned __int8 *v7;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  int v17;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  std::string *Entry;
  _QWORD *v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _BYTE *v42;
  _BYTE *v43;
  char v44;
  _BYTE *v45;
  _BYTE *v46;
  char v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  _BYTE *v51;
  _BYTE *v52;
  char v53;
  _BYTE *v54;
  _BYTE *v55;
  char v56;
  char v57;

  a2[1] = *a2;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        v7 = v2[1];
        if (v7 != (unsigned __int8 *)1)
        {
          if (v7 == (unsigned __int8 *)3)
          {
            if (*(_WORD *)*v2 == 28265 && (*v2)[2] == 116)
            {
LABEL_54:
              v10 = (_BYTE *)a2[1];
              v24 = a2[2];
              if ((unint64_t)v10 >= v24)
              {
                v11 = *a2;
                v25 = &v10[-*a2];
                v26 = (unint64_t)(v25 + 1);
                if ((uint64_t)(v25 + 1) < 0)
                  goto LABEL_116;
                v27 = v24 - v11;
                if (2 * v27 > v26)
                  v26 = 2 * v27;
                if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
                  v15 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v15 = v26;
                if (v15)
                  v16 = (char *)operator new(v15);
                else
                  v16 = 0;
                v41 = &v25[(_QWORD)v16];
                v45 = &v25[(_QWORD)v16];
                *v45 = 0;
                v30 = v45 + 1;
                if (v10 != (_BYTE *)v11)
                {
                  v46 = &v10[~v11];
                  do
                  {
                    v47 = *--v10;
                    (v46--)[(_QWORD)v16] = v47;
                  }
                  while (v10 != (_BYTE *)v11);
                  goto LABEL_110;
                }
                goto LABEL_111;
              }
              goto LABEL_64;
            }
          }
          else if (v7 == (unsigned __int8 *)5 && *(_DWORD *)*v2 == 1634692198 && (*v2)[4] == 116)
          {
LABEL_20:
            v10 = (_BYTE *)a2[1];
            v9 = a2[2];
            if ((unint64_t)v10 >= v9)
            {
              v11 = *a2;
              v12 = &v10[-*a2];
              v13 = (unint64_t)(v12 + 1);
              if ((uint64_t)(v12 + 1) < 0)
                goto LABEL_116;
              v14 = v9 - v11;
              if (2 * v14 > v13)
                v13 = 2 * v14;
              if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
                v15 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v15 = v13;
              if (v15)
                v16 = (char *)operator new(v15);
              else
                v16 = 0;
              v41 = &v12[(_QWORD)v16];
              v42 = &v12[(_QWORD)v16];
              *v42 = 0;
              v30 = v42 + 1;
              if (v10 != (_BYTE *)v11)
              {
                v43 = &v10[~v11];
                do
                {
                  v44 = *--v10;
                  (v43--)[(_QWORD)v16] = v44;
                }
                while (v10 != (_BYTE *)v11);
                goto LABEL_110;
              }
              goto LABEL_111;
            }
            goto LABEL_64;
          }
          goto LABEL_69;
        }
        v17 = **v2;
        if (v17 == 113)
          goto LABEL_63;
        if (v17 == 105)
        {
LABEL_40:
          v10 = (_BYTE *)a2[1];
          v19 = a2[2];
          if ((unint64_t)v10 >= v19)
          {
            v11 = *a2;
            v20 = &v10[-*a2];
            v21 = (unint64_t)(v20 + 1);
            if ((uint64_t)(v20 + 1) < 0)
              goto LABEL_116;
            v22 = v19 - v11;
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
              v15 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v15 = v21;
            if (v15)
              v16 = (char *)operator new(v15);
            else
              v16 = 0;
            v41 = &v20[(_QWORD)v16];
            v48 = &v20[(_QWORD)v16];
            *v48 = 0;
            v30 = v48 + 1;
            if (v10 != (_BYTE *)v11)
            {
              v49 = &v10[~v11];
              do
              {
                v50 = *--v10;
                (v49--)[(_QWORD)v16] = v50;
              }
              while (v10 != (_BYTE *)v11);
LABEL_110:
              v41 = v16;
            }
LABEL_111:
            *a2 = (unint64_t)v41;
            a2[1] = (unint64_t)v30;
            a2[2] = (unint64_t)&v16[v15];
            if (v11)
              operator delete((void *)v11);
LABEL_113:
            a2[1] = (unint64_t)v30;
            goto LABEL_114;
          }
LABEL_64:
          *v10 = 0;
          v29 = v10 + 1;
LABEL_65:
          v30 = v29;
          goto LABEL_113;
        }
      }
      else
      {
        v5 = *((unsigned __int8 *)v2 + 23);
        if (v5 != 1)
        {
          if (v5 == 3)
          {
            if (*(_WORD *)v2 == 28265 && *((_BYTE *)v2 + 2) == 116)
              goto LABEL_54;
          }
          else if (v5 == 5 && *(_DWORD *)v2 == 1634692198 && *((_BYTE *)v2 + 4) == 116)
          {
            goto LABEL_20;
          }
          goto LABEL_69;
        }
        v17 = *(unsigned __int8 *)v2;
        if (v17 == 105)
          goto LABEL_40;
        if (v17 == 113)
        {
LABEL_63:
          v10 = (_BYTE *)a2[1];
          v28 = a2[2];
          if ((unint64_t)v10 >= v28)
          {
            v11 = *a2;
            v35 = &v10[-*a2];
            v36 = (unint64_t)(v35 + 1);
            if ((uint64_t)(v35 + 1) < 0)
              goto LABEL_116;
            v37 = v28 - v11;
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
              v15 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v15 = v36;
            if (v15)
              v16 = (char *)operator new(v15);
            else
              v16 = 0;
            v41 = &v35[(_QWORD)v16];
            v51 = &v35[(_QWORD)v16];
            *v51 = 0;
            v30 = v51 + 1;
            if (v10 != (_BYTE *)v11)
            {
              v52 = &v10[~v11];
              do
              {
                v53 = *--v10;
                (v52--)[(_QWORD)v16] = v53;
              }
              while (v10 != (_BYTE *)v11);
              goto LABEL_110;
            }
            goto LABEL_111;
          }
          goto LABEL_64;
        }
      }
      if (v17 == 99)
      {
        v32 = (_BYTE *)a2[1];
        v31 = a2[2];
        if ((unint64_t)v32 >= v31)
        {
          v11 = *a2;
          v38 = &v32[-*a2];
          v39 = (unint64_t)(v38 + 1);
          if ((uint64_t)(v38 + 1) < 0)
LABEL_116:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v40 = v31 - v11;
          if (2 * v40 > v39)
            v39 = 2 * v40;
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v15 = v39;
          if (v15)
            v16 = (char *)operator new(v15);
          else
            v16 = 0;
          v41 = &v38[(_QWORD)v16];
          v54 = &v38[(_QWORD)v16];
          *v54 = 1;
          v30 = v54 + 1;
          if (v32 != (_BYTE *)v11)
          {
            v55 = &v32[~v11];
            do
            {
              v56 = *--v32;
              (v55--)[(_QWORD)v16] = v56;
            }
            while (v32 != (_BYTE *)v11);
            goto LABEL_110;
          }
          goto LABEL_111;
        }
        *v32 = 1;
        v29 = v32 + 1;
        goto LABEL_65;
      }
LABEL_69:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"All feature_types must be one of {int, float, i, q, c}.", 55);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v57);
LABEL_114:
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_220E85D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t xgboost::MetaInfo::LoadBinary(xgboost::MetaInfo *this, dmlc::Stream *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  std::string::size_type v54;
  std::string *v55;
  uint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  unsigned __int8 *v59;
  std::string *v60;
  std::string *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void **v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void **v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  std::vector<unsigned int>::size_type v94;
  uint64_t v95;
  std::string *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  std::string *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  std::string *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  std::string *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  std::string *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  void *v126;
  uint64_t v127;
  std::string *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  _QWORD *v138;
  std::string *v139;
  _QWORD *v140;
  _QWORD *v141;
  std::string *v142;
  _QWORD *v143;
  _QWORD *v144;
  std::string *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unsigned __int8 v153;
  void *__p;
  uint64_t v155;
  unsigned __int8 v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD v159[2];
  _QWORD v160[11];
  char v161;
  _QWORD v162[20];
  int v163;
  int v164;
  std::string::size_type v165;
  uint64_t v166;
  char v167;
  char v168;
  std::string v169;
  std::vector<unsigned int>::size_type v170;

  v4 = xgboost::Version::Load((uint64_t (***)(_QWORD, std::string *, size_t))a2);
  v162[19] = v4;
  v163 = v5;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v159);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Binary DMatrix generated by XGBoost: ", 37);
  xgboost::Version::String();
  if ((v156 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v156 & 0x80u) == 0)
    v8 = v156;
  else
    v8 = v155;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is no longer supported. ", 25);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Please process and save your data in current version: ", 54);
  v151 = (void *)0x600000001;
  LODWORD(v152) = 1;
  xgboost::Version::String();
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v169;
  else
    v12 = (std::string *)v169.__r_.__value_.__r.__words[0];
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  else
    size = v169.__r_.__value_.__l.__size_;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" again.", 7);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if ((char)v156 < 0)
    operator delete(__p);
  LODWORD(__p) = v4;
  LODWORD(v151) = 1;
  if ((_DWORD)v4 != 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v169);
    if (v169.__r_.__value_.__r.__words[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v151);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v151);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"major == 1", 10);
      v19 = *(char *)(v169.__r_.__value_.__r.__words[0] + 23);
      if (v19 >= 0)
        v20 = v169.__r_.__value_.__r.__words[0];
      else
        v20 = *(_QWORD *)v169.__r_.__value_.__l.__data_;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v169.__r_.__value_.__r.__words[0] + 23);
      else
        v21 = *(_QWORD *)(v169.__r_.__value_.__r.__words[0] + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      std::stringbuf::str();
      if ((v156 & 0x80u) == 0)
        v24 = &__p;
      else
        v24 = __p;
      if ((v156 & 0x80u) == 0)
        v25 = v156;
      else
        v25 = v155;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      if ((char)v156 < 0)
        operator delete(__p);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v151);
      v26 = v169.__r_.__value_.__r.__words[0];
      v169.__r_.__value_.__r.__words[0] = 0;
      if (v26)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v169, v26);
    }
  }
  LODWORD(__p) = HIDWORD(v4);
  LODWORD(v151) = 6;
  if (SHIDWORD(v4) < 6)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v169);
    if (v169.__r_.__value_.__r.__words[0])
    {
      v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v151);
      dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v151);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: ", 14);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"minor >= 6", 10);
      v31 = *(char *)(v169.__r_.__value_.__r.__words[0] + 23);
      if (v31 >= 0)
        v32 = v169.__r_.__value_.__r.__words[0];
      else
        v32 = *(_QWORD *)v169.__r_.__value_.__l.__data_;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(v169.__r_.__value_.__r.__words[0] + 23);
      else
        v33 = *(_QWORD *)(v169.__r_.__value_.__r.__words[0] + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      std::stringbuf::str();
      if ((v156 & 0x80u) == 0)
        v36 = &__p;
      else
        v36 = __p;
      if ((v156 & 0x80u) == 0)
        v37 = v156;
      else
        v37 = v155;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      if ((char)v156 < 0)
        operator delete(__p);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v151);
      v38 = v169.__r_.__value_.__r.__words[0];
      v169.__r_.__value_.__r.__words[0] = 0;
      if (v38)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v169, v38);
    }
  }
  v158 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v158, 8) != 8)
  {
    v97 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v97, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v98 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: fi->Read(&num_field)", 34);
    v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"MetaInfo: invalid format", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  v39 = SHIDWORD(v4) < 2 && (_DWORD)v4 == 1;
  v40 = 10;
  if (!v39)
    v40 = 12;
  v157 = v40;
  v41 = v158;
  if (v158 < v40)
  {
    dmlc::LogCheckFormat<unsigned long long,unsigned long>((uint64_t *)&__p);
    if (__p)
    {
      v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
      dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v169);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: ", 14);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"num_field >= expected", 21);
      v46 = *((char *)__p + 23);
      v47 = v46 >= 0 ? __p : *(void **)__p;
      v48 = v46 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v47, v48);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"MetaInfo: insufficient number of fields (expected at least ", 59);
      v51 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" fields, but the binary file only contains ", 43);
      v52 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"fields.)", 8);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v169);
      v53 = __p;
      __p = 0;
      if (v53)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v53);
    }
    v41 = v158;
  }
  if (v41 >= 0xD && *(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v169, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&__p, (uint64_t)&v169, 287, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"MetaInfo: the given binary file contains extra fields which will be ignored.", 76);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&__p);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_row");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_col");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_nonzero");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v151, "group_ptr");
  std::operator+<char>();
  memset(&v169, 0, sizeof(v169));
  v168 = 0;
  v165 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, &v165, 8) != 8
    || (v54 = v165, std::string::resize(&v169, v165, 0), v165)
    && ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v55 = &v169)
      : (v55 = (std::string *)v169.__r_.__value_.__r.__words[0]),
        (**(uint64_t (***)(dmlc::Stream *, std::string *, std::string::size_type))a2)(a2, v55, v54) != v54))
  {
    v101 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    dmlc::LogMessageFatal::Entry::Init(v101, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v102 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Check failed: strm->Read(&name)", 31);
    v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v105 = &__p;
    else
      v105 = __p;
    if ((v156 & 0x80u) == 0)
      v106 = v156;
    else
      v106 = v155;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, v106);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
  }
  v56 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
  else
    v57 = v169.__r_.__value_.__l.__size_;
  v58 = v153;
  if ((v153 & 0x80u) != 0)
    v58 = v152;
  if (v57 == v58)
  {
    if ((v153 & 0x80u) == 0)
      v59 = (unsigned __int8 *)&v151;
    else
      v59 = (unsigned __int8 *)v151;
    if ((*((_BYTE *)&v169.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v169.__r_.__value_.__l.__data_, v59, v169.__r_.__value_.__l.__size_))
        goto LABEL_132;
    }
    else
    {
      if (!*((_BYTE *)&v169.__r_.__value_.__s + 23))
        goto LABEL_132;
      v60 = &v169;
      while (v60->__r_.__value_.__s.__data_[0] == *v59)
      {
        v60 = (std::string *)((char *)v60 + 1);
        ++v59;
        if (!--v56)
          goto LABEL_132;
      }
    }
  }
  dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v169, (uint64_t)&v151, (uint64_t *)&v165);
  if (v165)
  {
    v61 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    dmlc::LogMessageFatal::Entry::Init(v61, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v62 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Check failed: ", 14);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"name == expected_name", 21);
    v65 = *(char *)(v165 + 23);
    v66 = v65 >= 0 ? v165 : *(_QWORD *)v165;
    v67 = v65 >= 0 ? *(unsigned __int8 *)(v165 + 23) : *(_QWORD *)(v165 + 8);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
    v70 = (v156 & 0x80u) == 0 ? &__p : (void **)__p;
    v71 = (v156 & 0x80u) == 0 ? v156 : v155;
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" Expected field: ", 17);
    v74 = (v153 & 0x80u) == 0 ? &v151 : (void **)v151;
    v75 = (v153 & 0x80u) == 0 ? v153 : v152;
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", got: ", 7);
    v78 = (v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v169
        : (std::string *)v169.__r_.__value_.__r.__words[0];
    v79 = (v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v169.__r_.__value_.__r.__words[2])
        : v169.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v170);
    v80 = v165;
    v165 = 0;
    if (v80)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v165, v80);
  }
LABEL_132:
  v167 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, &v167, 1) != 1)
  {
    v107 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    dmlc::LogMessageFatal::Entry::Init(v107, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v108 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v111 = &__p;
    else
      v111 = __p;
    if ((v156 & 0x80u) == 0)
      v112 = v156;
    else
      v112 = v155;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)v111, v112);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
  }
  if (v167 != 3)
  {
    v113 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    dmlc::LogMessageFatal::Entry::Init(v113, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v114 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Check failed: type == expected_type", 35);
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v117 = &__p;
    else
      v117 = __p;
    if ((v156 & 0x80u) == 0)
      v118 = v156;
    else
      v118 = v155;
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Expected field of type: ", 24);
    v120 = (_QWORD *)std::ostream::operator<<();
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
  }
  if ((**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, &v168, 1) != 1)
  {
    v122 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    dmlc::LogMessageFatal::Entry::Init(v122, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v123 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v126 = &__p;
    else
      v126 = __p;
    if ((v156 & 0x80u) == 0)
      v127 = v156;
    else
      v127 = v155;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
  }
  if (v168)
  {
    v128 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    dmlc::LogMessageFatal::Entry::Init(v128, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v129 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v165);
    v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Check failed: !is_scalar", 24);
    v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v132 = &__p;
    else
      v132 = __p;
    if ((v156 & 0x80u) == 0)
      v133 = v156;
    else
      v133 = v155;
    v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
    v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"Expected field ", 15);
    if ((v153 & 0x80u) == 0)
      v136 = &v151;
    else
      v136 = v151;
    if ((v153 & 0x80u) == 0)
      v137 = v153;
    else
      v137 = v152;
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)v136, v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v165);
  }
  v165 = 0;
  v166 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, &v165, 8) != 8)
  {
    v139 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    dmlc::LogMessageFatal::Entry::Init(v139, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v140 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v170);
  }
  if ((**(uint64_t (***)(dmlc::Stream *, uint64_t *, uint64_t))a2)(a2, &v166, 8) != 8)
  {
    v142 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    dmlc::LogMessageFatal::Entry::Init(v142, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v143 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v170);
  }
  v164 = 1;
  if (v166 != 1)
  {
    dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v170);
    if (v170)
    {
      v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v164);
      dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v164);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Check failed: ", 14);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"shape.second == 1", 17);
      v85 = *(char *)(v170 + 23);
      v86 = v85 >= 0 ? v170 : *(_QWORD *)v170;
      v87 = v85 >= 0 ? *(unsigned __int8 *)(v170 + 23) : *(_QWORD *)(v170 + 8);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)": ", 2);
      v90 = (v156 & 0x80u) == 0 ? &__p : (void **)__p;
      v91 = (v156 & 0x80u) == 0 ? v156 : v155;
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Number of columns is expected to be 1.", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v164);
      v93 = v170;
      v170 = 0;
      if (v93)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v170, v93);
    }
  }
  v170 = 0;
  if ((**(uint64_t (***)(dmlc::Stream *, std::vector<unsigned int>::size_type *, uint64_t))a2)(a2, &v170, 8) != 8
    || (v94 = v170, std::vector<unsigned int>::resize((std::vector<unsigned int> *)this + 2, v170), v170)
    && (**(uint64_t (***)(dmlc::Stream *, _QWORD, uint64_t))a2)(a2, *((_QWORD *)this + 6), 4 * v94) != 4 * v94)
  {
    v145 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    dmlc::LogMessageFatal::Entry::Init(v145, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v146 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v170);
    v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"Check failed: strm->Read(field)", 31);
    v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)": ", 2);
    if ((v156 & 0x80u) == 0)
      v149 = &__p;
    else
      v149 = __p;
    if ((v156 & 0x80u) == 0)
      v150 = v156;
    else
      v150 = v155;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)v149, v150);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v170);
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
  if ((char)v156 < 0)
    operator delete(__p);
  if ((char)v153 < 0)
    operator delete(v151);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "base_margin");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_lower_bound");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels_upper_bound");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_names");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_types");
  if ((char)v156 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature_weights");
  if ((char)v156 < 0)
    operator delete(__p);
  xgboost::LoadFeatureType((unsigned __int8 ***)this + 15, *((unint64_t **)this + 21));
  v159[0] = *MEMORY[0x24BEDB7F0];
  v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v159 + *(_QWORD *)(v159[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v160[0] = v95;
  v160[1] = MEMORY[0x24BEDB848] + 16;
  if (v161 < 0)
    operator delete((void *)v160[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227666FE4](v162);
}

void sub_220E86D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (*(char *)(v55 - 73) < 0)
    operator delete(*(void **)(v55 - 96));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_220E8714C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x227666FE4](v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::LoadScalarField<unsigned long long>(uint64_t (***a1)(_QWORD, std::string::size_type *, uint64_t), uint64_t a2, std::string::size_type *a3)
{
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *Entry;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *p_p;
  uint64_t v40;
  std::string *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  std::string *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  std::string *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  char v80;
  char v81;
  std::string v82;
  void *__p;
  uint64_t v84;
  unsigned __int8 v85;
  std::string::size_type v86;

  std::operator+<char>();
  memset(&v82, 0, sizeof(v82));
  v81 = 0;
  v86 = 0;
  if ((**a1)(a1, &v86, 8) != 8
    || (v6 = v86, std::string::resize(&v82, v86, 0), v86)
    && ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v82)
      : (v7 = (std::string *)v82.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: strm->Read(&name)", 31);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v85 & 0x80u) == 0)
      v40 = v85;
    else
      v40 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)p_p, v40);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
  }
  v8 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    size = v82.__r_.__value_.__l.__size_;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (size == v10)
  {
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2;
    else
      v12 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v82.__r_.__value_.__l.__data_, v12, v82.__r_.__value_.__l.__size_))
        goto LABEL_50;
    }
    else
    {
      if (!*((_BYTE *)&v82.__r_.__value_.__s + 23))
        goto LABEL_50;
      v13 = &v82;
      while (v13->__r_.__value_.__s.__data_[0] == *v12)
      {
        v13 = (std::string *)((char *)v13 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_50;
      }
    }
  }
  dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v82, a2, (uint64_t *)&v86);
  if (v86)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"name == expected_name", 21);
    v18 = *(char *)(v86 + 23);
    v19 = v18 >= 0 ? v86 : *(_QWORD *)v86;
    v20 = v18 >= 0 ? *(unsigned __int8 *)(v86 + 23) : *(_QWORD *)(v86 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    v23 = (v85 & 0x80u) == 0 ? &__p : (void **)__p;
    v24 = (v85 & 0x80u) == 0 ? v85 : v84;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Expected field: ", 17);
    v27 = *(char *)(a2 + 23);
    v28 = v27 >= 0 ? a2 : *(_QWORD *)a2;
    v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got: ", 7);
    v32 = (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v82
        : (std::string *)v82.__r_.__value_.__r.__words[0];
    v33 = (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v82.__r_.__value_.__r.__words[2])
        : v82.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
    v34 = v86;
    v86 = 0;
    if (v34)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v86, v34);
  }
LABEL_50:
  LOBYTE(v86) = 0;
  if ((**a1)(a1, &v86, 1) != 1)
  {
    v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      v45 = &__p;
    else
      v45 = __p;
    if ((v85 & 0x80u) == 0)
      v46 = v85;
    else
      v46 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if (v86 != 4)
  {
    v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: type == expected_type", 35);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      v51 = &__p;
    else
      v51 = __p;
    if ((v85 & 0x80u) == 0)
      v52 = v85;
    else
      v52 = v84;
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Expected field of type: ", 24);
    v54 = (_QWORD *)std::ostream::operator<<();
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if ((**a1)(a1, (std::string::size_type *)&v81, 1) != 1)
  {
    v56 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v56, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v57 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      v60 = &__p;
    else
      v60 = __p;
    if ((v85 & 0x80u) == 0)
      v61 = v85;
    else
      v61 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if (!v81)
  {
    v62 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v63 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: is_scalar", 23);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      v66 = &__p;
    else
      v66 = __p;
    if ((v85 & 0x80u) == 0)
      v67 = v85;
    else
      v67 = v84;
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Expected field ", 15);
    v70 = *(char *)(a2 + 23);
    if (v70 >= 0)
      v71 = a2;
    else
      v71 = *(_QWORD *)a2;
    if (v70 >= 0)
      v72 = *(unsigned __int8 *)(a2 + 23);
    else
      v72 = *(_QWORD *)(a2 + 8);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" to be a scalar; got a vector",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if ((**a1)(a1, a3, 8) != 8)
  {
    v74 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v74, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v75 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: strm->Read(field)", 31);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)": ", 2);
    if ((v85 & 0x80u) == 0)
      v78 = &__p;
    else
      v78 = __p;
    if ((v85 & 0x80u) == 0)
      v79 = v85;
    else
      v79 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if ((char)v85 < 0)
    operator delete(__p);
}

void sub_220E87768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::LoadTensorField<float,2>(uint64_t (***a1)(_QWORD, std::string::size_type *, uint64_t), uint64_t a2, uint64_t a3)
{
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  std::string *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  std::string::size_type **v43;
  unint64_t v44;
  std::string *Entry;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *p_p;
  uint64_t v50;
  std::string *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  std::string *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  std::string *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  char v90;
  char v91;
  std::string v92;
  void *__p;
  uint64_t v94;
  unsigned __int8 v95;
  unint64_t v96;
  std::string::size_type __n[2];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  std::operator+<char>();
  memset(&v92, 0, sizeof(v92));
  v91 = 0;
  __n[0] = 0;
  if ((**a1)(a1, __n, 8) != 8
    || (v6 = __n[0], std::string::resize(&v92, __n[0], 0), __n[0])
    && ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v92)
      : (v7 = (std::string *)v92.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: strm->Read(&name)", 31);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v95 & 0x80u) == 0)
      v50 = v95;
    else
      v50 = v94;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_p, v50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  v8 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  else
    size = v92.__r_.__value_.__l.__size_;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (size == v10)
  {
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2;
    else
      v12 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v92.__r_.__value_.__l.__data_, v12, v92.__r_.__value_.__l.__size_))
        goto LABEL_50;
    }
    else
    {
      if (!*((_BYTE *)&v92.__r_.__value_.__s + 23))
        goto LABEL_50;
      v13 = &v92;
      while (v13->__r_.__value_.__s.__data_[0] == *v12)
      {
        v13 = (std::string *)((char *)v13 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_50;
      }
    }
  }
  dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v92, a2, (uint64_t *)__n);
  if (__n[0])
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"name == expected_name", 21);
    v18 = *(char *)(__n[0] + 23);
    v19 = v18 >= 0 ? __n[0] : *(_QWORD *)__n[0];
    v20 = v18 >= 0 ? *(unsigned __int8 *)(__n[0] + 23) : *(_QWORD *)(__n[0] + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    v23 = (v95 & 0x80u) == 0 ? &__p : (void **)__p;
    v24 = (v95 & 0x80u) == 0 ? v95 : v94;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Expected field: ", 17);
    v27 = *(char *)(a2 + 23);
    v28 = v27 >= 0 ? a2 : *(_QWORD *)a2;
    v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got: ", 7);
    v32 = (v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v92
        : (std::string *)v92.__r_.__value_.__r.__words[0];
    v33 = (v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v92.__r_.__value_.__r.__words[2])
        : v92.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v96);
    v34 = __n[0];
    __n[0] = 0;
    if (v34)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__n, v34);
  }
LABEL_50:
  v90 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v90, 1) != 1)
  {
    v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      v55 = &__p;
    else
      v55 = __p;
    if ((v95 & 0x80u) == 0)
      v56 = v95;
    else
      v56 = v94;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if (v90 != 1)
  {
    v57 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v57, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v58 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: type == expected_type", 35);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      v61 = &__p;
    else
      v61 = __p;
    if ((v95 & 0x80u) == 0)
      v62 = v95;
    else
      v62 = v94;
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Expected field of type: ", 24);
    v64 = (_QWORD *)std::ostream::operator<<();
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v91, 1) != 1)
  {
    v66 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v66, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v67 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      v70 = &__p;
    else
      v70 = __p;
    if ((v95 & 0x80u) == 0)
      v71 = v95;
    else
      v71 = v94;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  if (v91)
  {
    v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__n);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: !is_scalar", 24);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      v76 = &__p;
    else
      v76 = __p;
    if ((v95 & 0x80u) == 0)
      v77 = v95;
    else
      v77 = v94;
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Expected field ", 15);
    v80 = *(char *)(a2 + 23);
    if (v80 >= 0)
      v81 = a2;
    else
      v81 = *(_QWORD *)a2;
    if (v80 >= 0)
      v82 = *(unsigned __int8 *)(a2 + 23);
    else
      v82 = *(_QWORD *)(a2 + 8);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v81, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" to be a tensor; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__n);
  }
  v35 = 0;
  v36 = 1;
  do
  {
    v37 = v36;
    if ((**a1)(a1, &__n[v35], 8) != 8)
    {
      v38 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
      dmlc::LogMessageFatal::Entry::Init(v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v39 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: strm->Read(&(shape[i]))", 37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v96);
    }
    v36 = 0;
    v35 = 1;
  }
  while ((v37 & 1) != 0);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)__n;
  v41 = *(_QWORD *)a3;
  v42 = *(_QWORD *)(a3 + 16) * *(_QWORD *)(a3 + 8);
  LODWORD(v96) = 0;
  std::vector<float>::resize(v41, v42, &v96);
  v43 = *(std::string::size_type ***)a3;
  v96 = 0;
  if ((**a1)(a1, &v96, 8) != 8
    || (v44 = v96, std::vector<float>::resize((uint64_t)v43, v96), v96) && (**a1)(a1, *v43, 4 * v44) != 4 * v44)
  {
    v84 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
    dmlc::LogMessageFatal::Entry::Init(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v96);
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: strm->Read(&field)", 32);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)": ", 2);
    if ((v95 & 0x80u) == 0)
      v88 = &__p;
    else
      v88 = __p;
    if ((v95 & 0x80u) == 0)
      v89 = v95;
    else
      v89 = v94;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v96);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if ((char)v95 < 0)
    operator delete(__p);
}

void sub_220E87F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::LoadVectorField<float>(uint64_t (***a1)(_QWORD, std::string::size_type *, uint64_t), uint64_t a2, std::string::size_type **a3)
{
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  std::string *Entry;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *p_p;
  uint64_t v54;
  std::string *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  std::string *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  std::string *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  std::string *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  std::string *v88;
  _QWORD *v89;
  _QWORD *v90;
  std::string *v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  int v100;
  std::string::size_type __n;
  uint64_t v102;
  char v103;
  char v104;
  std::string v105;
  void *__p;
  uint64_t v107;
  unsigned __int8 v108;
  unint64_t v109;

  std::operator+<char>();
  memset(&v105, 0, sizeof(v105));
  v104 = 0;
  __n = 0;
  if ((**a1)(a1, &__n, 8) != 8
    || (v6 = __n, std::string::resize(&v105, __n, 0), __n)
    && ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v105)
      : (v7 = (std::string *)v105.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v50 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Check failed: strm->Read(&name)", 31);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v108 & 0x80u) == 0)
      v54 = v108;
    else
      v54 = v107;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)p_p, v54);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  v8 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  else
    size = v105.__r_.__value_.__l.__size_;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (size == v10)
  {
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2;
    else
      v12 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v105.__r_.__value_.__l.__data_, v12, v105.__r_.__value_.__l.__size_))
        goto LABEL_50;
    }
    else
    {
      if (!*((_BYTE *)&v105.__r_.__value_.__s + 23))
        goto LABEL_50;
      v13 = &v105;
      while (v13->__r_.__value_.__s.__data_[0] == *v12)
      {
        v13 = (std::string *)((char *)v13 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_50;
      }
    }
  }
  dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v105, a2, (uint64_t *)&__n);
  if (__n)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"name == expected_name", 21);
    v18 = *(char *)(__n + 23);
    v19 = v18 >= 0 ? __n : *(_QWORD *)__n;
    v20 = v18 >= 0 ? *(unsigned __int8 *)(__n + 23) : *(_QWORD *)(__n + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    v23 = (v108 & 0x80u) == 0 ? &__p : (void **)__p;
    v24 = (v108 & 0x80u) == 0 ? v108 : v107;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Expected field: ", 17);
    v27 = *(char *)(a2 + 23);
    v28 = v27 >= 0 ? a2 : *(_QWORD *)a2;
    v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got: ", 7);
    v32 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v105
        : (std::string *)v105.__r_.__value_.__r.__words[0];
    v33 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v105.__r_.__value_.__r.__words[2])
        : v105.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v109);
    v34 = __n;
    __n = 0;
    if (v34)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__n, v34);
  }
LABEL_50:
  v103 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v103, 1) != 1)
  {
    v55 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v55, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v56 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      v59 = &__p;
    else
      v59 = __p;
    if ((v108 & 0x80u) == 0)
      v60 = v108;
    else
      v60 = v107;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v103 != 1)
  {
    v61 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v61, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v62 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Check failed: type == expected_type", 35);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      v65 = &__p;
    else
      v65 = __p;
    if ((v108 & 0x80u) == 0)
      v66 = v108;
    else
      v66 = v107;
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Expected field of type: ", 24);
    v68 = (_QWORD *)std::ostream::operator<<();
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v104, 1) != 1)
  {
    v70 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v70, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v71 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      v74 = &__p;
    else
      v74 = __p;
    if ((v108 & 0x80u) == 0)
      v75 = v108;
    else
      v75 = v107;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v104)
  {
    v76 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v76, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v77 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: !is_scalar", 24);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      v80 = &__p;
    else
      v80 = __p;
    if ((v108 & 0x80u) == 0)
      v81 = v108;
    else
      v81 = v107;
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Expected field ", 15);
    v84 = *(char *)(a2 + 23);
    if (v84 >= 0)
      v85 = a2;
    else
      v85 = *(_QWORD *)a2;
    if (v84 >= 0)
      v86 = *(unsigned __int8 *)(a2 + 23);
    else
      v86 = *(_QWORD *)(a2 + 8);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  __n = 0;
  v102 = 0;
  if ((**a1)(a1, &__n, 8) != 8)
  {
    v88 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    dmlc::LogMessageFatal::Entry::Init(v88, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v89 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v109);
  }
  if ((**a1)(a1, (std::string::size_type *)&v102, 8) != 8)
  {
    v91 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    dmlc::LogMessageFatal::Entry::Init(v91, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v92 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v109);
  }
  v100 = 1;
  if (v102 != 1)
  {
    dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v109);
    if (v109)
    {
      v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v100);
      dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v100);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: ", 14);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"shape.second == 1", 17);
      v39 = *(char *)(v109 + 23);
      v40 = v39 >= 0 ? v109 : *(_QWORD *)v109;
      v41 = v39 >= 0 ? *(unsigned __int8 *)(v109 + 23) : *(_QWORD *)(v109 + 8);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
      v44 = (v108 & 0x80u) == 0 ? &__p : (void **)__p;
      v45 = (v108 & 0x80u) == 0 ? v108 : v107;
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Number of columns is expected to be 1.", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v100);
      v47 = v109;
      v109 = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v109, v47);
    }
  }
  v109 = 0;
  if ((**a1)(a1, &v109, 8) != 8
    || (v48 = v109, std::vector<float>::resize((uint64_t)a3, v109), v109) && (**a1)(a1, *a3, 4 * v48) != 4 * v48)
  {
    v94 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    dmlc::LogMessageFatal::Entry::Init(v94, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v95 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v109);
    v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: strm->Read(field)", 31);
    v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)": ", 2);
    if ((v108 & 0x80u) == 0)
      v98 = &__p;
    else
      v98 = __p;
    if ((v108 & 0x80u) == 0)
      v99 = v108;
    else
      v99 = v107;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v98, v99);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v109);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if ((char)v108 < 0)
    operator delete(__p);
}

void sub_220E88880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::LoadVectorField<std::string>(uint64_t (***a1)(_QWORD, std::string::size_type *, uint64_t), uint64_t a2, std::vector<std::string> *a3)
{
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::vector<std::string>::size_type v48;
  std::vector<std::string>::pointer v49;
  BOOL v50;
  uint64_t v51;
  std::string::size_type v52;
  std::vector<std::string>::pointer v53;
  std::string *Entry;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *p_p;
  uint64_t v59;
  std::string *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  std::string *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  std::string *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  std::string *v93;
  _QWORD *v94;
  _QWORD *v95;
  std::string *v96;
  _QWORD *v97;
  _QWORD *v98;
  std::string *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  uint64_t v104;
  std::string::size_type __n;
  uint64_t v106;
  char v107;
  char v108;
  std::string v109;
  void *__p;
  uint64_t v111;
  unsigned __int8 v112;
  std::vector<std::string>::size_type v113;
  std::string::size_type v114;

  std::operator+<char>();
  memset(&v109, 0, sizeof(v109));
  v108 = 0;
  __n = 0;
  if ((**a1)(a1, &__n, 8) != 8
    || (v6 = __n, std::string::resize(&v109, __n, 0), __n)
    && ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v109)
      : (v7 = (std::string *)v109.__r_.__value_.__r.__words[0]),
        (**a1)(a1, (std::string::size_type *)v7, v6) != v6))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: strm->Read(&name)", 31);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)": ", 2);
    if ((v112 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v112 & 0x80u) == 0)
      v59 = v112;
    else
      v59 = v111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)p_p, v59);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  v8 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  else
    size = v109.__r_.__value_.__l.__size_;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (size == v10)
  {
    if (v11 >= 0)
      v12 = (unsigned __int8 *)a2;
    else
      v12 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v109.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(v109.__r_.__value_.__l.__data_, v12, v109.__r_.__value_.__l.__size_))
        goto LABEL_50;
    }
    else
    {
      if (!*((_BYTE *)&v109.__r_.__value_.__s + 23))
        goto LABEL_50;
      v13 = &v109;
      while (v13->__r_.__value_.__s.__data_[0] == *v12)
      {
        v13 = (std::string *)((char *)v13 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_50;
      }
    }
  }
  dmlc::LogCheckFormat<std::string,std::string>((uint64_t)&v109, a2, (uint64_t *)&__n);
  if (__n)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"name == expected_name", 21);
    v18 = *(char *)(__n + 23);
    v19 = v18 >= 0 ? __n : *(_QWORD *)__n;
    v20 = v18 >= 0 ? *(unsigned __int8 *)(__n + 23) : *(_QWORD *)(__n + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    v23 = (v112 & 0x80u) == 0 ? &__p : (void **)__p;
    v24 = (v112 & 0x80u) == 0 ? v112 : v111;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Expected field: ", 17);
    v27 = *(char *)(a2 + 23);
    v28 = v27 >= 0 ? a2 : *(_QWORD *)a2;
    v29 = v27 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got: ", 7);
    v32 = (v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v109
        : (std::string *)v109.__r_.__value_.__r.__words[0];
    v33 = (v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v109.__r_.__value_.__r.__words[2])
        : v109.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
    v34 = __n;
    __n = 0;
    if (v34)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__n, v34);
  }
LABEL_50:
  v107 = 0;
  if ((**a1)(a1, (std::string::size_type *)&v107, 1) != 1)
  {
    v60 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v60, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v61 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: strm->Read(&type_val)", 35);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
    if ((v112 & 0x80u) == 0)
      v64 = &__p;
    else
      v64 = __p;
    if ((v112 & 0x80u) == 0)
      v65 = v112;
    else
      v65 = v111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v107 != 5)
  {
    v66 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v66, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v67 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Check failed: type == expected_type", 35);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": ", 2);
    if ((v112 & 0x80u) == 0)
      v70 = &__p;
    else
      v70 = __p;
    if ((v112 & 0x80u) == 0)
      v71 = v112;
    else
      v71 = v111;
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Expected field of type: ", 24);
    v73 = (_QWORD *)std::ostream::operator<<();
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"got field type: ", 16);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if ((**a1)(a1, (std::string::size_type *)&v108, 1) != 1)
  {
    v75 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v75, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v76 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Check failed: strm->Read(&is_scalar)", 36);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)": ", 2);
    if ((v112 & 0x80u) == 0)
      v79 = &__p;
    else
      v79 = __p;
    if ((v112 & 0x80u) == 0)
      v80 = v112;
    else
      v80 = v111;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  if (v108)
  {
    v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__n);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Check failed: !is_scalar", 24);
    v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
    if ((v112 & 0x80u) == 0)
      v85 = &__p;
    else
      v85 = __p;
    if ((v112 & 0x80u) == 0)
      v86 = v112;
    else
      v86 = v111;
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Expected field ", 15);
    v89 = *(char *)(a2 + 23);
    if (v89 >= 0)
      v90 = a2;
    else
      v90 = *(_QWORD *)a2;
    if (v89 >= 0)
      v91 = *(unsigned __int8 *)(a2 + 23);
    else
      v91 = *(_QWORD *)(a2 + 8);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" to be a vector; got a scalar",
      29);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__n);
  }
  __n = 0;
  v106 = 0;
  if ((**a1)(a1, &__n, 8) != 8)
  {
    v93 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    dmlc::LogMessageFatal::Entry::Init(v93, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v94 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Check failed: strm->Read(&shape.first)", 38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
  }
  if ((**a1)(a1, (std::string::size_type *)&v106, 8) != 8)
  {
    v96 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    dmlc::LogMessageFatal::Entry::Init(v96, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v97 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: strm->Read(&shape.second)", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
  }
  LODWORD(v113) = 1;
  if (v106 != 1)
  {
    dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v114);
    if (v114)
    {
      v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
      dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v113);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: ", 14);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"shape.second == 1", 17);
      v39 = *(char *)(v114 + 23);
      v40 = v39 >= 0 ? v114 : *(_QWORD *)v114;
      v41 = v39 >= 0 ? *(unsigned __int8 *)(v114 + 23) : *(_QWORD *)(v114 + 8);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
      v44 = (v112 & 0x80u) == 0 ? &__p : (void **)__p;
      v45 = (v112 & 0x80u) == 0 ? v112 : v111;
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Number of columns is expected to be 1.", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v113);
      v47 = v114;
      v114 = 0;
      if (v47)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v114, v47);
    }
  }
  v113 = 0;
  if ((**a1)(a1, &v113, 8) != 8)
    goto LABEL_133;
  v48 = v113;
  std::vector<std::string>::resize(a3, v113);
  v49 = a3->__end_ == a3->__begin_ ? 0 : a3->__begin_;
  if (v48)
  {
    v50 = 0;
    v51 = 0;
    do
    {
      v114 = 0;
      if ((**a1)(a1, &v114, 8) != 8)
        break;
      v52 = v114;
      std::string::resize(v49, v114, 0);
      if (v114)
      {
        v53 = v49;
        if (SHIBYTE(v49->__r_.__value_.__r.__words[2]) < 0)
          v53 = (std::vector<std::string>::pointer)v49->__r_.__value_.__r.__words[0];
        if ((**a1)(a1, (std::string::size_type *)v53, v52) != v52)
          break;
      }
      v50 = ++v51 >= v48;
      ++v49;
    }
    while (v48 != v51);
    if (!v50)
    {
LABEL_133:
      v99 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
      dmlc::LogMessageFatal::Entry::Init(v99, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v100 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v114);
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: strm->Read(field)", 31);
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": ", 2);
      if ((v112 & 0x80u) == 0)
        v103 = &__p;
      else
        v103 = __p;
      if ((v112 & 0x80u) == 0)
        v104 = v112;
      else
        v104 = v111;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v114);
    }
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if ((char)v112 < 0)
    operator delete(__p);
}

void sub_220E89230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::Slice(const void ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const void **v7;
  const void **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  unint64_t v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::string *Entry;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54[2];
  int v55;
  uint64_t v56[2];
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)a3);
  v6 = *a2;
  v8 = *a1;
  v7 = a1[1];
  *(_QWORD *)a3 = *a2;
  *(_QWORD *)(a3 + 8) = v7;
  v9 = (uint64_t *)a1[3];
  if (v8 == (const void **)((v9[1] - *v9) >> 2))
  {
    v10 = a2[1];
    v60 = v6;
    v61 = v10;
    xgboost::Gather<float>(&v62, v9, (uint64_t *)&v60, 1);
    v11 = *(_QWORD *)(a3 + 24);
    v12 = *(void **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)(v11 + 8) = v12;
      operator delete(v12);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
    }
    *(_OWORD *)v11 = v62;
    *(_QWORD *)(v11 + 16) = v63;
    *(_QWORD *)(a3 + 32) = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
    *(_QWORD *)(a3 + 40) = 1;
  }
  else
  {
    v13 = (uint64_t)a1[5];
    *(_QWORD *)(a3 + 32) = v6;
    *(_QWORD *)(a3 + 40) = v13;
    LODWORD(v62) = 0;
    std::vector<float>::resize(*(_QWORD *)(a3 + 24), v13 * v6, &v62);
    v14 = (uint64_t *)a1[3];
    v15 = a2[1];
    v59[0] = *a2;
    v59[1] = v15;
    xgboost::Gather<float>(&v62, v14, v59, v13);
    v16 = *(_QWORD *)(a3 + 24);
    v17 = *(void **)v16;
    if (*(_QWORD *)v16)
    {
      *(_QWORD *)(v16 + 8) = v17;
      operator delete(v17);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
    }
    *(_OWORD *)v16 = v62;
    *(_QWORD *)(v16 + 16) = v63;
  }
  v18 = (uint64_t *)a1[14];
  v19 = a2[1];
  v58[0] = *a2;
  v58[1] = v19;
  xgboost::Gather<float>(&v62, v18, v58, 1);
  v20 = *(_QWORD *)(a3 + 112);
  v21 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v21;
    operator delete(v21);
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
  }
  *(_OWORD *)v20 = v62;
  *(_QWORD *)(v20 + 16) = v63;
  v22 = (uint64_t *)a1[13];
  v23 = a2[1];
  v57[0] = *a2;
  v57[1] = v23;
  xgboost::Gather<float>(&v62, v22, v57, 1);
  v24 = *(_QWORD *)(a3 + 104);
  v25 = *(void **)v24;
  if (*(_QWORD *)v24)
  {
    *(_QWORD *)(v24 + 8) = v25;
    operator delete(v25);
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0;
  }
  *(_OWORD *)v24 = v62;
  *(_QWORD *)(v24 + 16) = v63;
  v26 = (uint64_t *)a1[9];
  if (((v26[1] - *v26) >> 2) + 1 != ((char *)a1[7] - (char *)a1[6]) >> 2)
  {
    v27 = a2[1];
    v56[0] = *a2;
    v56[1] = v27;
    xgboost::Gather<float>(&v62, v26, v56, 1);
    v28 = *(_QWORD *)(a3 + 72);
    v29 = *(void **)v28;
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)(v28 + 8) = v29;
      operator delete(v29);
      *(_QWORD *)v28 = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
    }
    *(_OWORD *)v28 = v62;
    *(_QWORD *)(v28 + 16) = v63;
  }
  v30 = (uint64_t *)a1[10];
  v31 = (v30[1] - *v30) >> 2;
  v32 = *a1;
  if ((const void **)v31 == *a1)
  {
    v33 = a2[1];
    v60 = *a2;
    v61 = v33;
    xgboost::Gather<float>(&v62, v30, (uint64_t *)&v60, 1);
    v34 = *(_QWORD *)(a3 + 80);
    v35 = *(void **)v34;
    if (*(_QWORD *)v34)
    {
      *(_QWORD *)(v34 + 8) = v35;
      operator delete(v35);
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = 0;
    }
    *(_OWORD *)v34 = v62;
    *(_QWORD *)(v34 + 16) = v63;
    *(_QWORD *)(a3 + 88) = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) - **(_QWORD **)(a3 + 80)) >> 2;
    *(_QWORD *)(a3 + 96) = 1;
  }
  else
  {
    v60 = v31 % (unint64_t)v32;
    v55 = 0;
    if (v31 % (unint64_t)v32)
    {
      dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v62);
      if ((_QWORD)v62)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v37 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: ", 14);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"this->base_margin_.Size() % this->num_row_ == 0", 47);
        v40 = *(char *)(v62 + 23);
        v41 = v40 >= 0 ? v62 : *(_QWORD *)v62;
        v42 = v40 >= 0 ? *(unsigned __int8 *)(v62 + 23) : *(_QWORD *)(v62 + 8);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Incorrect size of base margin vector.", 37);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v60);
        v45 = v62;
        *(_QWORD *)&v62 = 0;
        if (v45)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v62, v45);
      }
    }
    v46 = (uint64_t)a1[12];
    v47 = *a2;
    *(_QWORD *)(a3 + 88) = *a2;
    *(_QWORD *)(a3 + 96) = v46;
    LODWORD(v62) = 0;
    std::vector<float>::resize(*(_QWORD *)(a3 + 80), v47 * v46, &v62);
    v48 = (uint64_t *)a1[10];
    v49 = a2[1];
    v54[0] = *a2;
    v54[1] = v49;
    xgboost::Gather<float>(&v62, v48, v54, v46);
    v50 = *(_QWORD *)(a3 + 80);
    v51 = *(void **)v50;
    if (*(_QWORD *)v50)
    {
      *(_QWORD *)(v50 + 8) = v51;
      operator delete(v51);
      *(_QWORD *)v50 = 0;
      *(_QWORD *)(v50 + 8) = 0;
      *(_QWORD *)(v50 + 16) = 0;
    }
    *(_OWORD *)v50 = v62;
    *(_QWORD *)(v50 + 16) = v63;
  }
  v52 = *(_QWORD *)(a3 + 176);
  v53 = ((_BYTE *)a1[22][1] - (_BYTE *)*a1[22]) >> 2;
  LODWORD(v62) = 0;
  std::vector<float>::resize(v52, v53, &v62);
  xgboost::HostDeviceVector<float>::Copy((void ***)(a3 + 176), a1 + 22);
  if ((const void ***)a3 != a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 144), (std::string *)a1[18], (__int128 *)a1[19], 0xAAAAAAAAAAAAAAABLL * (a1[19] - a1[18]));
  xgboost::HostDeviceVector<xgboost::FeatureType>::Resize((unint64_t **)(a3 + 168), (_BYTE *)a1[21][1] - (_BYTE *)*a1[21], 0);
  xgboost::HostDeviceVector<xgboost::FeatureType>::Copy((void ***)(a3 + 168), a1 + 21);
  if ((const void ***)a3 != a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 120), (std::string *)a1[15], (__int128 *)a1[16], 0xAAAAAAAAAAAAAAABLL * (a1[16] - a1[15]));
}

void sub_220E897DC(_Unwind_Exception *a1)
{
  xgboost::MetaInfo *v1;

  xgboost::MetaInfo::~MetaInfo(v1);
  _Unwind_Resume(a1);
}

_QWORD *xgboost::Gather<float>(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;

  if (*a2 == a2[1])
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    v7 = *a3;
    result = std::vector<float>::vector(result, *a3 * a4);
    if (v7)
    {
      v8 = 0;
      v9 = *a3;
      v10 = *a2;
      v11 = 4 * a4;
      v12 = (_DWORD *)*result;
      do
      {
        if (v8 == v9)
          std::terminate();
        if (a4)
        {
          v13 = (int *)(v10 + v11 * *(int *)(a3[1] + 4 * v8));
          v14 = v12;
          v15 = a4;
          do
          {
            v16 = *v13++;
            *v14++ = v16;
            --v15;
          }
          while (v15);
        }
        ++v8;
        v12 = (_DWORD *)((char *)v12 + v11);
      }
      while (v8 != v7);
    }
  }
  return result;
}

unsigned int *xgboost::MetaInfo::SetInfo(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v9;
  _DWORD ***v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *result;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;

  xgboost::Json::Load(a5, a6, 8, &v22);
  v9 = v22;
  if (v22[3] == 4)
  {
    v10 = (_DWORD ***)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v22);
    v11 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v10[2]);
  }
  else
  {
    v11 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v22);
  }
  xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<void *>((uint64_t)v11 + 16);
  v21 = v9;
  v13 = v9 + 2;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  xgboost::MetaInfo::SetInfoFromHost(a1, v12, a3, a4, &v21);
  do
  {
    v15 = __ldxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
  {
    __dmb(9u);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v22;
  if (v22)
  {
    v18 = v22 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      __dmb(9u);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_220E89A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_220E89A68()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = __ldxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  }
  JUMPOUT(0x220E89A30);
}

uint64_t xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<void *>(uint64_t a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD **v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Empty data passed in.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v2 + 56));
  v6 = (_DWORD **)v5[2];
  if ((_DWORD **)v5[3] == v6)
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  return *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v6) + 2);
}

void sub_220E89B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::SetInfoFromCUDA()
{
  std::string *Entry;
  _QWORD *v1;
  char v2;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v2);
}

void sub_220E89BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::SetInfoFromHost(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v6;
  char *v7;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int **v27;
  std::vector<unsigned int>::size_type v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  std::string *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  unint64_t v51;
  float *v52;
  float *v53;
  float v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  _BOOL4 v66;
  BOOL v67;
  _BOOL4 v68;
  BOOL v69;
  int v70;
  int v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  _BOOL4 v82;
  BOOL v83;
  _BOOL4 v84;
  BOOL v85;
  int v86;
  int v87;
  std::string *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  std::string *v92;
  _QWORD *v93;
  _DWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t **v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  std::string *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL4 v118;
  BOOL v119;
  std::string *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _DWORD *v124;
  unsigned int *v125;
  unsigned int v126;
  _DWORD *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t *ptr;
  unsigned int *v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t *v141;
  std::string *Entry;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  unsigned int **v146;
  _DWORD *v147;
  unint64_t v148;
  _QWORD *v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _DWORD *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  _DWORD *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _DWORD *v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  int v172;
  unint64_t v173;
  _DWORD *v174;
  unsigned int *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  int v183;
  std::string *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  std::string *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _DWORD *v192;
  float **v193;
  unint64_t v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  std::vector<unsigned int>::value_type __x[6];
  unint64_t v200;
  const void *v201;
  unint64_t v202;
  char v203;
  char v204;
  unint64_t v205;
  uint64_t v206;
  std::exception_ptr v207;
  std::mutex v208;
  uint64_t v209;

  v6 = a4;
  v7 = a3;
  v209 = *MEMORY[0x24BDAC8D0];
  if (a4 == 3)
  {
    if (memcmp(a3, "qid", 3uLL))
      goto LABEL_34;
    xgboost::HostDeviceVector<unsigned int>::HostDeviceVector((std::vector<unsigned int> **)&v207, 0, 0);
    v208.__m_.__sig = 0;
    v124 = *a5;
    v195 = v124;
    if (v124)
    {
      v125 = v124 + 2;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    v127 = v195;
    if (v195)
    {
      v128 = v195 + 2;
      do
      {
        v129 = __ldxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        __dmb(9u);
        (*(void (**)(_DWORD *))(*(_QWORD *)v127 + 8))(v127);
      }
    }
    ptr = (uint64_t *)v207.__ptr_;
    v132 = *(unsigned int **)v207.__ptr_;
    v133 = *((_QWORD *)v207.__ptr_ + 1) - *(_QWORD *)v207.__ptr_;
    if ((unint64_t)v133 >= 5)
    {
      v134 = v133 >> 2;
      if (v134 <= 2)
        v134 = 2;
      v137 = *v132;
      v135 = v132 + 1;
      v136 = v137;
      v138 = v134 - 1;
      while (1)
      {
        v140 = *v135++;
        v139 = v140;
        if (v140 < v136)
          break;
        v136 = v139;
        if (!--v138)
          goto LABEL_158;
      }
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v143 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Check failed: non_dec", 21);
      v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
    }
LABEL_158:
    v146 = (unsigned int **)(a1 + 6);
    v147 = (_DWORD *)a1[6];
    a1[7] = (uint64_t)v147;
    v149 = a1 + 8;
    v148 = a1[8];
    if ((unint64_t)v147 >= v148)
    {
      v151 = v148 - (_QWORD)v147;
      v152 = v151 >> 1;
      if ((unint64_t)(v151 >> 1) <= 1)
        v152 = 1;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
        v153 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v153 = v152;
      v154 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 8), v153);
      v155 = (char *)a1[6];
      v156 = (char *)a1[7];
      v158 = &v154[v157];
      *v154 = 0;
      v150 = v154 + 1;
      while (v156 != v155)
      {
        v159 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *--v154 = v159;
      }
      a1[6] = (uint64_t)v154;
      a1[7] = (uint64_t)v150;
      a1[8] = (uint64_t)v158;
      if (v155)
        operator delete(v155);
    }
    else
    {
      *v147 = 0;
      v150 = v147 + 1;
    }
    a1[7] = (uint64_t)v150;
    v161 = *ptr;
    v160 = ptr[1];
    v162 = v160 - *ptr;
    if (v162 < 5)
    {
      v173 = v162 >> 2;
    }
    else
    {
      v163 = 1;
      do
      {
        if (*(_DWORD *)(v161 + 4 * v163) != *(_DWORD *)(v161 + 4 * v163 - 4))
        {
          if ((unint64_t)v150 >= *v149)
          {
            v165 = *v146;
            v166 = v150 - *v146;
            v167 = v166 + 1;
            if ((unint64_t)(v166 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v168 = *v149 - (_QWORD)v165;
            if (v168 >> 1 > v167)
              v167 = v168 >> 1;
            if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL)
              v169 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v169 = v167;
            if (v169)
            {
              v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 8), v169);
              v165 = (unsigned int *)a1[6];
              v150 = (_DWORD *)a1[7];
            }
            else
            {
              v170 = 0;
            }
            v171 = &v170[4 * v166];
            *(_DWORD *)v171 = v163;
            v164 = v171 + 4;
            while (v150 != v165)
            {
              v172 = *--v150;
              *((_DWORD *)v171 - 1) = v172;
              v171 -= 4;
            }
            a1[6] = (uint64_t)v171;
            a1[7] = (uint64_t)v164;
            a1[8] = (uint64_t)&v170[4 * v169];
            if (v165)
              operator delete(v165);
          }
          else
          {
            *v150 = v163;
            v164 = v150 + 1;
          }
          a1[7] = (uint64_t)v164;
          v161 = *ptr;
          v160 = ptr[1];
          v150 = v164;
        }
        ++v163;
      }
      while (v163 < (v160 - v161) >> 2);
      v173 = (v160 - v161) >> 2;
    }
    if (v173 != *(v150 - 1))
    {
      if ((unint64_t)v150 >= *v149)
      {
        v175 = *v146;
        v176 = v150 - *v146;
        v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v178 = *v149 - (_QWORD)v175;
        if (v178 >> 1 > v177)
          v177 = v178 >> 1;
        if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
          v179 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v179 = v177;
        if (v179)
        {
          v180 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 8), v179);
          v175 = (unsigned int *)a1[6];
          v150 = (_DWORD *)a1[7];
        }
        else
        {
          v180 = 0;
        }
        v181 = &v180[4 * v176];
        v182 = &v180[4 * v179];
        *(_DWORD *)v181 = v173;
        v174 = v181 + 4;
        while (v150 != v175)
        {
          v183 = *--v150;
          *((_DWORD *)v181 - 1) = v183;
          v181 -= 4;
        }
        a1[6] = (uint64_t)v181;
        a1[7] = (uint64_t)v174;
        a1[8] = (uint64_t)v182;
        if (v175)
          operator delete(v175);
      }
      else
      {
        *v150 = v173;
        v174 = v150 + 1;
      }
      a1[7] = (uint64_t)v174;
      v150 = v174;
    }
    xgboost::data::ValidateQueryGroup(*v146, (uint64_t)v150);
LABEL_212:
    xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector((uint64_t *)&v207);
    return;
  }
  if (a4 != 5)
  {
    if (a4 == 11 && !memcmp(a3, "base_margin", 0xBuLL))
    {
      v9 = *a5;
      v198 = v9;
      if (v9)
      {
        v10 = v9 + 2;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = a1 + 10;
      if (v9)
      {
        v13 = v9 + 2;
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          __dmb(9u);
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      v16 = *a1;
      if (*a1 && a1[11] != v16)
      {
        v17 = (_QWORD *)*v12;
        v18 = (uint64_t)(*(_QWORD *)(*v12 + 8) - *(_QWORD *)*v12) >> 2;
        if (v18 % v16)
        {
          v188 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
          dmlc::LogMessageFatal::Entry::Init(v188, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v189 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
          v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Check failed: this->base_margin_.Size() % this->num_row_ == 0", 61);
          v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)"Incorrect size for base margin.", 31);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
          v17 = (_QWORD *)a1[10];
          v16 = *a1;
          v18 = (uint64_t)(v17[1] - *v17) >> 2;
        }
        v19 = v18 / v16;
        a1[11] = v16;
        a1[12] = v19;
        LODWORD(v207.__ptr_) = 0;
        std::vector<float>::resize((uint64_t)v17, v19 * v16, &v207);
      }
      return;
    }
LABEL_34:
    xgboost::HostDeviceVector<float>::HostDeviceVector(&v193, 0, 0.0);
    v194 = 0;
    v37 = *a5;
    v192 = v37;
    if (v37)
    {
      v38 = v37 + 2;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)__x, &v192);
    if (v202)
    {
      if ((*(_QWORD *)__x & 0x1FFFFFFFFFFFFFFFLL) != 0)
      {
        v184 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
        dmlc::LogMessageFatal::Entry::Init(v184, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v185 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
        v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"Check failed: array.valid.Size() == 0", 37);
        v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"Meta info like label or weight can not have missing value.", 58);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
      }
      v194 = v200;
      if (!v203 || v204)
      {
        LODWORD(v207.__ptr_) = 0;
        std::vector<float>::resize((uint64_t)v193, v200, &v207);
        v51 = v194;
        v53 = *v193;
        v52 = v193[1];
        v207.__ptr_ = 0;
        v208.__m_.__sig = 850045863;
        v54 = 0.0;
        memset(v208.__m_.__opaque, 0, sizeof(v208.__m_.__opaque));
        if (v52 != v53 && v194)
        {
          v55 = 0;
          do
          {
            v54 = xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long &>(unsigned long &)::{lambda(float const*)#1}>((uint64_t)v201, v204, (uint64_t)__x, v55, v54);
            v53[v55++] = v54;
          }
          while (v51 != v55);
        }
        dmlc::OMPException::Rethrow(&v207);
        std::mutex::~mutex(&v208);
        std::exception_ptr::~exception_ptr(&v207);
      }
      else
      {
        LODWORD(v207.__ptr_) = 0;
        std::vector<float>::resize((uint64_t)v193, v202, &v207);
        memcpy(*v193, v201, 4 * v202);
        v40 = v193[1] - *v193;
        v205 = v194;
        v206 = v40;
        if (v40 != v194)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v207);
          if (v207.__ptr_)
          {
            v41 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v206);
            dmlc::LogMessageFatal::Entry::Init(v41, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
            v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v206);
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: ", 14);
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
            v45 = *((char *)v207.__ptr_ + 23);
            v46 = v45 >= 0 ? v207.__ptr_ : *(void **)v207.__ptr_;
            v47 = v45 >= 0 ? *((unsigned __int8 *)v207.__ptr_ + 23) : *((_QWORD *)v207.__ptr_ + 1);
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Inconsistent size after modification.", 37);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v206);
            v50 = v207.__ptr_;
            v207.__ptr_ = 0;
            if (v50)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v207, (uint64_t)v50);
          }
        }
      }
    }
    else
    {
      v194 = v200;
      LODWORD(v207.__ptr_) = 0;
      std::vector<float>::resize((uint64_t)v193, v200, &v207);
    }
    v56 = v192;
    if (v192)
    {
      v57 = v192 + 2;
      do
      {
        v58 = __ldxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        __dmb(9u);
        (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
      }
    }
    if (v6 != 17)
    {
      if (v6 == 15)
      {
        if (!memcmp(v7, "feature_weights", 0xFuLL))
        {
          v76 = a1 + 22;
          xgboost::HostDeviceVector<float>::operator=(v76, (uint64_t *)&v193);
          v78 = *(_QWORD *)*v76;
          v77 = *(_QWORD *)(*v76 + 8);
          if (v78 != v77)
          {
            v79 = v78 + 4;
            do
            {
              v80 = *(_DWORD *)(v79 - 4);
              v81 = v80 & 0x7FFFFFFF;
              v82 = (v80 & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
              v83 = v80 < 0;
              v84 = v80 < 0 && ((v80 & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
              if (!v83)
                v82 = 0;
              v85 = v81 <= 2139095040;
              v86 = v81 == 2139095040 || v82;
              if (!v85)
                v86 = 1;
              v87 = v86 | v84;
              if ((v87 & 1) != 0)
                break;
              v119 = v79 == v77;
              v79 += 4;
            }
            while (!v119);
            if (v87)
            {
              v88 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
              dmlc::LogMessageFatal::Entry::Init(v88, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v89 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
              v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Check failed: valid", 19);
              v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)": ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Feature weight must be greater than 0.", 38);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
            }
          }
          goto LABEL_107;
        }
      }
      else if (v6 == 6 && !memcmp(v7, "weight", 6uLL))
      {
        v60 = a1 + 9;
        xgboost::HostDeviceVector<float>::operator=(v60, (uint64_t *)&v193);
        v62 = *(_QWORD *)*v60;
        v61 = *(_QWORD *)(*v60 + 8);
        if (v62 != v61)
        {
          v63 = v62 + 4;
          do
          {
            v64 = *(_DWORD *)(v63 - 4);
            v65 = v64 & 0x7FFFFFFF;
            v66 = (v64 & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
            v67 = v64 < 0;
            v68 = v64 < 0 && ((v64 & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
            if (!v67)
              v66 = 0;
            v69 = v65 <= 2139095040;
            v70 = v65 == 2139095040 || v66;
            if (!v69)
              v70 = 1;
            v71 = v70 | v68;
            if ((v71 & 1) != 0)
              break;
            v119 = v63 == v61;
            v63 += 4;
          }
          while (!v119);
          if (v71)
          {
            v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
            dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
            v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
            v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: valid", 19);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Weights must be positive values.", 32);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
          }
        }
        goto LABEL_107;
      }
LABEL_104:
      v92 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
      dmlc::LogMessageFatal::Entry::Init(v92, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v93 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Unknown key for MetaInfo: ", 26);
      for (; v6; --v6)
      {
        std::ostream::put();
        ++v7;
      }
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
      goto LABEL_107;
    }
    if (!memcmp(v7, "label_lower_bound", 0x11uLL))
    {
      v141 = a1 + 13;
    }
    else
    {
      if (memcmp(v7, "label_upper_bound", 0x11uLL))
        goto LABEL_104;
      v141 = a1 + 14;
    }
    xgboost::HostDeviceVector<float>::operator=(v141, (uint64_t *)&v193);
LABEL_107:
    xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v193);
    return;
  }
  if (memcmp(a3, "label", 5uLL))
  {
    if (memcmp(v7, "group", 5uLL))
      goto LABEL_34;
    xgboost::HostDeviceVector<unsigned int>::HostDeviceVector((std::vector<unsigned int> **)&v207, 0, 0);
    v208.__m_.__sig = 0;
    v20 = *a5;
    v196 = v20;
    if (v20)
    {
      v21 = v20 + 2;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = v196;
    if (v196)
    {
      v24 = v196 + 2;
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        __dmb(9u);
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    v27 = (unsigned int **)v207.__ptr_;
    a1[7] = a1[6];
    v28 = v27[1] - *v27 + 1;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)a1 + 2, v28, __x);
    v29 = (unsigned int *)a1[6];
    *v29 = 0;
    v30 = *v27;
    v31 = v27[1];
    if (*v27 != v31)
    {
      v34 = *v30;
      v32 = v30 + 1;
      v33 = v34;
      v29[1] = v34;
      if (v32 != v31)
      {
        v35 = v29 + 2;
        do
        {
          v36 = *v32++;
          v33 += v36;
          *v35++ = v33;
        }
        while (v32 != v31);
      }
    }
    xgboost::data::ValidateQueryGroup(v29, a1[7]);
    goto LABEL_212;
  }
  v94 = *a5;
  v197 = v94;
  if (v94)
  {
    v95 = v94 + 2;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = (uint64_t **)(a1 + 3);
  if (v94)
  {
    v98 = v94 + 2;
    do
    {
      v99 = __ldxr(v98);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, v98));
    if (!v100)
    {
      __dmb(9u);
      (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
    }
  }
  v101 = *a1;
  if (*a1 && a1[4] != v101)
  {
    *(_QWORD *)__x = (((*v97)[1] - **v97) >> 2) % v101;
    LODWORD(v193) = 0;
    if (*(_QWORD *)__x)
    {
      dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v207);
      if (v207.__ptr_)
      {
        v102 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v102, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v103 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Check failed: ", 14);
        v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"this->labels.Size() % this->num_row_ == 0", 41);
        v106 = *((char *)v207.__ptr_ + 23);
        v107 = v106 >= 0 ? v207.__ptr_ : *(void **)v207.__ptr_;
        v108 = v106 >= 0 ? *((unsigned __int8 *)v207.__ptr_ + 23) : *((_QWORD *)v207.__ptr_ + 1);
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v107, v108);
        v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Incorrect size for labels.", 26);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        v111 = v207.__ptr_;
        v207.__ptr_ = 0;
        if (v111)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v207, (uint64_t)v111);
      }
    }
    v112 = (_QWORD *)a1[3];
    v113 = *a1;
    v114 = ((uint64_t)(v112[1] - *v112) >> 2) / (unint64_t)*a1;
    a1[4] = *a1;
    a1[5] = v114;
    LODWORD(v207.__ptr_) = 0;
    std::vector<float>::resize((uint64_t)v112, v114 * v113, &v207);
  }
  v116 = **v97;
  v115 = (*v97)[1];
  if (v116 != v115)
  {
    v117 = v116 + 4;
    do
    {
      v118 = (*(_DWORD *)(v117 - 4) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      v119 = (*(_DWORD *)(v117 - 4) & 0x7FFFFFFFu) > 0x7F7FFFFF || v117 == v115;
      v117 += 4;
    }
    while (!v119);
    if (v118)
    {
      v120 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
      dmlc::LogMessageFatal::Entry::Init(v120, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v121 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v207);
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"Check failed: valid", 19);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"Label contains NaN, infinity or a value too large.", 50);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v207);
    }
  }
}

void sub_220E8A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,std::exception_ptr a25)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a25);
  _Unwind_Resume(a1);
}

void xgboost::`anonymous namespace'::CopyTensorInfoImpl<2,float>(_DWORD **a1, uint64_t *a2)
{
  _DWORD *v4;
  int v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  void *ptr;
  _DWORD ***v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int8x8_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  int8x8_t v54;
  unint64_t v55;
  unint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  float v63;
  std::string *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  _OWORD v83[2];
  __int128 v84;
  void *__src[2];
  __int16 v86;
  _QWORD v87[2];
  uint64_t v88;
  __int128 *v89;
  std::exception_ptr v90;
  unint64_t v91;
  uint64_t v92;
  std::exception_ptr v93;
  std::mutex v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v86 = 512;
  v84 = 0u;
  *(_OWORD *)__src = 0u;
  memset(v83, 0, sizeof(v83));
  v4 = *a1;
  v5 = v4[3];
  if (v5 == 4)
  {
    v7 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v4);
    v8 = v7[3] - v7[2];
    *(_QWORD *)&v77 = v8 >> 3;
    LODWORD(v90.__ptr_) = 1;
    if (v8 != 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v93);
      if (v93.__ptr_)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"get<Array const>(array).size() == 1", 35);
        v13 = *((char *)v93.__ptr_ + 23);
        v14 = v13 >= 0 ? v93.__ptr_ : *(void **)v93.__ptr_;
        v15 = v13 >= 0 ? *((unsigned __int8 *)v93.__ptr_ + 23) : *((_QWORD *)v93.__ptr_ + 1);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Column: ", 8);
        v19 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
        v20 = strlen(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v77);
        ptr = v93.__ptr_;
        v93.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v93, (uint64_t)ptr);
      }
    }
    v22 = (_DWORD ***)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*a1);
    v6 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v22[2]);
  }
  else
  {
    if (v5 != 3)
      goto LABEL_16;
    v6 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v4);
  }
  xgboost::ArrayInterface<2,false>::Initialize((uint64_t)v83, (uint64_t)v6 + 16);
LABEL_16:
  if (__src[1])
  {
    if ((*(_QWORD *)&v83[0] & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      v67 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      dmlc::LogMessageFatal::Entry::Init(v67, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v68 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed: array.valid.Size() == 0", 37);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Meta info like label or weight can not have missing value.", 58);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
    }
    if (!(_BYTE)v86 || HIBYTE(v86))
    {
      *(_OWORD *)(a2 + 1) = v84;
      v35 = (_QWORD *)*a2;
      v36 = a2[2] * a2[1];
      LODWORD(v93.__ptr_) = 0;
      std::vector<float>::resize((uint64_t)v35, v36, &v93);
      v37 = 0;
      v39 = *(_QWORD *)*a2;
      v38 = *(_QWORD *)(*a2 + 8);
      v40 = (v38 - v39) >> 2;
      v79 = v40;
      v80 = v39;
      v82 = -1;
      v41 = a2[2];
      *(_QWORD *)&v78 = a2[1];
      *((_QWORD *)&v78 + 1) = v41;
      v42 = v41 * v78;
      if (v38 == v39)
        v42 = 0;
      *(_QWORD *)&v81 = v39;
      *((_QWORD *)&v81 + 1) = v42;
      *(_QWORD *)&v77 = v41;
      *((_QWORD *)&v77 + 1) = 1;
      v93.__ptr_ = (void *)v41;
      v94.__m_.__sig = 1;
      while (*(void **)((char *)&v77 + v37) == *(void **)((char *)&v93.__ptr_ + v37))
      {
        v37 += 8;
        if (v37 == 16)
          goto LABEL_37;
      }
      v64 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      dmlc::LogMessageFatal::Entry::Init(v64, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v93);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: t.CContiguous()", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v93);
      v40 = v79;
      v39 = v80;
LABEL_37:
      v71 = v77;
      v72 = v78;
      v73 = v40;
      v74 = v39;
      v75 = v81;
      v76 = v82;
      v43 = *((_QWORD *)&v81 + 1);
      if (v40 == *((_QWORD *)&v81 + 1))
        goto LABEL_49;
      v44 = 0;
      v93.__ptr_ = (void *)*((_QWORD *)&v72 + 1);
      v94.__m_.__sig = 1;
      while (*(void **)((char *)&v71 + v44) == *(void **)((char *)&v93.__ptr_ + v44))
      {
        v44 += 8;
        if (v44 == 16)
          goto LABEL_49;
      }
      v45 = 0;
      v93.__ptr_ = (void *)1;
      v94.__m_.__sig = v72;
      do
      {
        v46 = *(_QWORD *)((char *)&v71 + v45);
        v47 = *(uint64_t *)((char *)&v93.__ptr_ + v45);
        v48 = v46 != v47 || v45 == 8;
        v45 += 8;
      }
      while (!v48);
      if (v46 == v47)
      {
LABEL_49:
        v93.__ptr_ = 0;
        v94.__m_.__sig = 850045863;
        v49 = 0;
        memset(v94.__m_.__opaque, 0, sizeof(v94.__m_.__opaque));
        if (*((_QWORD *)&v81 + 1))
        {
          v50 = 0;
          do
          {
            v88 = 2;
            v89 = &v78;
            v51 = xgboost::linalg::UnravelIndex<2ul>(v50, &v88, v49);
            v90.__ptr_ = v83;
            v91 = v51;
            v92 = v52;
            *(float *)v49.i32 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>((uint64_t)__src[0], SHIBYTE(v86), &v90, v53);
            *(_DWORD *)(v39 + 4 * v50++) = v49.i32[0];
          }
          while (v43 != v50);
        }
      }
      else
      {
        v93.__ptr_ = 0;
        v94.__m_.__sig = 850045863;
        v54 = 0;
        memset(v94.__m_.__opaque, 0, sizeof(v94.__m_.__opaque));
        if (*((_QWORD *)&v81 + 1))
        {
          v55 = 0;
          do
          {
            v87[0] = 2;
            v87[1] = &v72;
            v56 = xgboost::linalg::UnravelIndex<2ul>(v55, v87, v54);
            v59 = v71 * v56 + *((_QWORD *)&v71 + 1) * v58;
            if (v59 >= v73)
              __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
            v60 = v75;
            v88 = 2;
            v89 = &v78;
            v61 = xgboost::linalg::UnravelIndex<2ul>(v55, &v88, v57);
            v90.__ptr_ = v83;
            v91 = v61;
            v92 = v62;
            *(float *)v54.i32 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>((uint64_t)__src[0], SHIBYTE(v86), &v90, v63);
            *(_DWORD *)(v60 + 4 * v59) = v54.i32[0];
            ++v55;
          }
          while (v43 != v55);
        }
      }
      dmlc::OMPException::Rethrow(&v93);
      std::mutex::~mutex(&v94);
      std::exception_ptr::~exception_ptr(&v93);
    }
    else
    {
      *(_OWORD *)(a2 + 1) = v84;
      LODWORD(v93.__ptr_) = 0;
      std::vector<float>::resize(*a2, (unint64_t)__src[1], &v93);
      memcpy(*(void **)*a2, __src[0], 4 * (uint64_t)__src[1]);
      *(_QWORD *)&v77 = (uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 2;
      v90.__ptr_ = (void *)(a2[2] * a2[1]);
      if ((void *)v77 != v90.__ptr_)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v93);
        if (v93.__ptr_)
        {
          v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
          dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
          v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v77);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
          v27 = *((char *)v93.__ptr_ + 23);
          if (v27 >= 0)
            v28 = v93.__ptr_;
          else
            v28 = *(void **)v93.__ptr_;
          if (v27 >= 0)
            v29 = *((unsigned __int8 *)v93.__ptr_ + 23);
          else
            v29 = *((_QWORD *)v93.__ptr_ + 1);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v28, v29);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Inconsistent size after modification.", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v77);
          v32 = v93.__ptr_;
          v93.__ptr_ = 0;
          if (v32)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v93, (uint64_t)v32);
        }
      }
    }
  }
  else
  {
    *(_OWORD *)(a2 + 1) = v84;
    v33 = *a2;
    v34 = a2[2] * a2[1];
    LODWORD(v93.__ptr_) = 0;
    std::vector<float>::resize(v33, v34, &v93);
  }
}

void sub_220E8B354()
{
  __cxa_end_catch();
  JUMPOUT(0x220E8B3C8);
}

void sub_220E8B360()
{
  __cxa_end_catch();
  JUMPOUT(0x220E8B3C8);
}

void sub_220E8B370()
{
  __cxa_end_catch();
  JUMPOUT(0x220E8B3C8);
}

void sub_220E8B37C()
{
  __cxa_end_catch();
  JUMPOUT(0x220E8B3C8);
}

void sub_220E8B394(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220E8B3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_220E8B3C4(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_220E8B3DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 168) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  _Unwind_Resume(a1);
}

void sub_220E8B424(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void xgboost::`anonymous namespace'::CopyTensorInfoImpl<1,unsigned int>(_DWORD **a1, void ***a2)
{
  std::vector<unsigned int>::size_type v3;
  uint64_t v4;
  std::string *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::vector<unsigned int>::size_type v15;
  std::vector<unsigned int>::size_type v16;
  _DWORD *v17;
  _DWORD *v18;
  void **v19;
  uint64_t i;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[3];
  std::vector<unsigned int>::size_type v26;
  void *__src;
  std::vector<unsigned int>::size_type __sz;
  char v29;
  char v30;
  void **v31;
  uint64_t v32;
  std::vector<unsigned int>::value_type __x[2];
  std::mutex v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)v25, a1);
  if (__sz)
  {
    if ((v25[0] & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: array.valid.Size() == 0", 37);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Meta info like label or weight can not have missing value.", 58);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
    }
    if (v29 && v30 == 9)
    {
      v3 = __sz;
      a2[1] = (void **)v26;
      __x[0] = 0;
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v3, __x);
      memcpy(**a2, __src, 4 * __sz);
      v4 = ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2;
      v31 = a2[1];
      v32 = v4;
      if ((void **)v4 != v31)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
        if (*(_QWORD *)__x)
        {
          v5 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          dmlc::LogMessageFatal::Entry::Init(v5, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
          v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
          v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
          v9 = *(char *)(*(_QWORD *)__x + 23);
          if (v9 >= 0)
            v10 = *(_QWORD *)__x;
          else
            v10 = **(_QWORD **)__x;
          if (v9 >= 0)
            v11 = *(unsigned __int8 *)(*(_QWORD *)__x + 23);
          else
            v11 = *(_QWORD *)(*(_QWORD *)__x + 8);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Inconsistent size after modification.", 37);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
          v14 = *(_QWORD **)__x;
          *(_QWORD *)__x = 0;
          if (v14)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, (uint64_t)v14);
        }
      }
    }
    else
    {
      v16 = v26;
      a2[1] = (void **)v26;
      __x[0] = 0;
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v16, __x);
      v18 = **a2;
      v17 = (*a2)[1];
      v19 = a2[1];
      *(_QWORD *)__x = 0;
      v34.__m_.__sig = 850045863;
      memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
      if (v17 != v18 && v19)
      {
        for (i = 0; (void **)i != v19; ++i)
          v18[i] = xgboost::ArrayInterface<1,true>::DispatchCall<unsigned int xgboost::ArrayInterface<1,true>::operator()<unsigned int,unsigned long &>(unsigned long &)::{lambda(unsigned int const*)#1}>((uint64_t)__src, v30, (uint64_t)v25, i);
      }
      dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
      std::mutex::~mutex(&v34);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    }
  }
  else
  {
    v15 = v26;
    a2[1] = (void **)v26;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)*a2, v15, __x);
  }
}

void sub_220E8B6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, std::exception_ptr a19)
{
  _Unwind_Resume(exception_object);
}

void xgboost::data::ValidateQueryGroup(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  if ((unint64_t)(a2 - (_QWORD)a1) >= 5)
  {
    v2 = (a2 - (uint64_t)a1) >> 2;
    if (v2 <= 2)
      v2 = 2;
    v5 = *a1;
    v3 = a1 + 1;
    v4 = v5;
    v6 = v2 - 1;
    while (1)
    {
      v8 = *v3++;
      v7 = v8;
      if (v8 < v4)
        break;
      v4 = v7;
      if (!--v6)
        return;
    }
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/validation.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: valid_query_group", 31);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Invalid group structure.", 24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
}

void sub_220E8B830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::SetInfo(uint64_t *a1, int a2, char *__s, void *a4, int a5, uint64_t a6)
{
  size_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  size_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  void *v24;
  unsigned int v25;
  uint64_t *v26;
  _QWORD *v27;
  unsigned int **v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  char j;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  _QWORD *v38;
  void *v39;
  unsigned int v40;
  uint64_t *v41;
  _QWORD *v42;
  unsigned int **v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  char i;
  uint64_t v48;
  uint64_t v49;
  char v50;
  std::string *Entry;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned int **v56;
  std::string::const_iterator v57;
  std::string *v58;
  void *v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t *v66;
  unsigned int **v67;
  std::string::const_iterator v68;
  std::string *v69;
  void *v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  size_t v76;
  size_t v77;
  unsigned int *v78;
  _DWORD *v79;
  unsigned int *v80;
  _DWORD *v81;
  void *__p;
  uint64_t v83;
  void *v84[4];
  char v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  int v93;
  void *v94[2];
  char v95;
  std::string v96;
  std::string v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void (**v101)(xgboost::JsonInteger *__hidden);
  uint64_t v102;
  uint64_t v103;
  void (**v104)(xgboost::JsonInteger *__hidden);
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  void **v111;
  uint64_t v112;
  char v113;
  char v114;
  __int128 v115;
  void *v116;
  _QWORD v117[5];

  v117[2] = *MEMORY[0x24BDAC8D0];
  switch(a5)
  {
    case 1:
      v10 = strlen(__s);
      if (!a4 && a6)
        goto LABEL_94;
      v89 = a6;
      v90 = a4;
      v93 = -1;
      v87 = 1;
      v88 = a6;
      v91 = a4;
      v92 = a6;
      xgboost::linalg::ArrayInterface<float,1>(&v115, (uint64_t)&v87);
      xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)&__p, (_DWORD **)&v115);
      if (!v85)
        __assert_rtn("operator()", "data.cc", 559, "ArrayInterface<1>{interface}.is_contiguous");
      v12 = (unsigned int *)v115;
      v81 = (_DWORD *)v115;
      xgboost::MetaInfo::SetInfoFromHost(a1, v11, __s, v10, &v81);
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldxr(v13);
          v15 = --v14 == 0;
        }
        while (__stlxr(v14, v13));
        goto LABEL_90;
      }
      break;
    case 2:
      v77 = strlen(__s);
      if (!a4 && a6)
        goto LABEL_94;
      v89 = a6;
      v90 = a4;
      v93 = -1;
      v87 = 1;
      v88 = a6;
      v91 = a4;
      v92 = a6;
      v83 = 0x300000000;
      __p = &off_24E6BE1D0;
      v84[1] = 0;
      v84[2] = 0;
      v84[0] = &v84[1];
      v35 = operator new();
      v36 = v35;
      *(_QWORD *)(v35 + 8) = 0x300000000;
      v37 = (unsigned int *)(v35 + 8);
      *(_QWORD *)v35 = &off_24E6BE1D0;
      v38 = v84[1];
      *(void **)(v35 + 16) = v84[0];
      *(_QWORD *)(v35 + 24) = v38;
      v39 = v84[2];
      v84[1] = 0;
      v84[2] = 0;
      *(_QWORD *)(v35 + 32) = v39;
      v84[0] = &v84[1];
      if (!v39)
        v38 = (_QWORD *)v35;
      v38[2] = v35 + 24;
      v86 = (unsigned int *)v35;
      do
        v40 = __ldxr(v37);
      while (__stxr(v40 + 1, v37));
      std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v84, (_QWORD *)v84[1]);
      std::vector<xgboost::Json>::vector(&v115, 2uLL);
      v83 = 0x400000000;
      __p = off_24E6BE218;
      *(_OWORD *)v84 = v115;
      v84[2] = v116;
      v115 = 0uLL;
      v116 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v111, "data");
      v41 = (uint64_t *)(*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v36 + 24))(v36, &v111);
      xgboost::Json::operator=(v41, (uint64_t)&__p);
      if (v114 < 0)
        operator delete(v111);
      __p = off_24E6BE218;
      v111 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v111);
      v111 = (void **)&v115;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v111);
      *((_QWORD *)&v115 + 1) = 0x200000000;
      *(_QWORD *)&v115 = &off_24E6BE3A8;
      v116 = a4;
      std::string::basic_string[abi:ne180100]<0>(&__p, "data");
      v42 = (_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, &__p);
      v43 = (unsigned int **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v42 + 32))(*v42, 0);
      xgboost::Json::operator=(v43, (uint64_t)&v115);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      v112 = 0x500000000;
      v111 = (void **)&off_24E6BE468;
      v113 = 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "data");
      v44 = (_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, &__p);
      v45 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v44 + 32))(*v44, 1);
      xgboost::Json::operator=(v45, (uint64_t)&v111);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      std::vector<xgboost::Json>::vector(&v109, 1uLL);
      std::vector<xgboost::Json>::vector(&v107, 1uLL);
      v46 = 0;
      for (i = 1; (i & 1) != 0; i = 0)
      {
        v48 = *(&v87 + v46 + 1);
        v105 = 0x200000000;
        v104 = &off_24E6BE3A8;
        v106 = v48;
        xgboost::Json::operator=((unsigned int **)&v109[v46], (uint64_t)&v104);
        v49 = 8 * *(&v87 + v46);
        v102 = 0x200000000;
        v101 = &off_24E6BE3A8;
        v103 = v49;
        xgboost::Json::operator=((unsigned int **)&v107[v46], (uint64_t)&v101);
        v46 = 1;
      }
      v83 = 0x400000000;
      __p = off_24E6BE218;
      memset(v84, 0, 24);
      std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v84, v109, v110, v110 - v109);
      std::string::basic_string[abi:ne180100]<0>(&v98, "shape");
      v65 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, &v98);
      xgboost::Json::operator=(v65, (uint64_t)&__p);
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
      __p = off_24E6BE218;
      v98 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v83 = 0x400000000;
      __p = off_24E6BE218;
      memset(v84, 0, 24);
      std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v84, v107, v108, v108 - v107);
      std::string::basic_string[abi:ne180100]<0>(&v98, "strides");
      v66 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, &v98);
      xgboost::Json::operator=(v66, (uint64_t)&__p);
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
      __p = off_24E6BE218;
      v98 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v99 = 0x200000000;
      v98 = &off_24E6BE3A8;
      v100 = 3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "version");
      v67 = (unsigned int **)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, &__p);
      xgboost::Json::operator=(v67, (uint64_t)&v98);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      std::to_string(&v96, 8uLL);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v96;
      else
        v68.__i_ = (std::__wrap_iter<const char *>::iterator_type)v96.__r_.__value_.__r.__words[0];
      std::string::insert(&v96, v68, 102);
      v97 = v96;
      memset(&v96, 0, sizeof(v96));
      v69 = std::string::insert(&v97, 0, "<");
      v70 = (void *)v69->__r_.__value_.__r.__words[0];
      v117[0] = v69->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v117 + 7) = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
      v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v83 = 0;
      __p = off_24E6BE2B8;
      *(void **)((char *)&v84[1] + 7) = *(void **)((char *)v117 + 7);
      v84[0] = v70;
      v84[1] = (void *)v117[0];
      HIBYTE(v84[2]) = v71;
      v117[0] = 0;
      *(_QWORD *)((char *)v117 + 7) = 0;
      std::string::basic_string[abi:ne180100]<0>(v94, "typestr");
      v72 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v36 + 24))(v36, v94);
      xgboost::Json::operator=(v72, (uint64_t)&__p);
      if (v95 < 0)
        operator delete(v94[0]);
      __p = off_24E6BE2B8;
      if (SHIBYTE(v84[2]) < 0)
        operator delete(v84[0]);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      __p = &v107;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = &v109;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)&__p, &v86);
      if (!v85)
        __assert_rtn("operator()", "data.cc", 559, "ArrayInterface<1>{interface}.is_contiguous");
      v12 = v86;
      v80 = v86;
      xgboost::MetaInfo::SetInfoFromHost(a1, v73, __s, v77, &v80);
      if (v12)
      {
        v74 = v12 + 2;
        do
        {
          v75 = __ldxr(v74);
          v15 = --v75 == 0;
        }
        while (__stlxr(v75, v74));
        goto LABEL_90;
      }
      break;
    case 3:
      v16 = strlen(__s);
      if (!a4 && a6)
        goto LABEL_94;
      v89 = a6;
      v90 = a4;
      v93 = -1;
      v87 = 1;
      v88 = a6;
      v91 = a4;
      v92 = a6;
      xgboost::linalg::ArrayInterface<unsigned int,1>(&v115, (uint64_t)&v87);
      xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)&__p, (_DWORD **)&v115);
      if (!v85)
        __assert_rtn("operator()", "data.cc", 559, "ArrayInterface<1>{interface}.is_contiguous");
      v12 = (unsigned int *)v115;
      v79 = (_DWORD *)v115;
      xgboost::MetaInfo::SetInfoFromHost(a1, v17, __s, v16, &v79);
      if (v12)
      {
        v18 = v12 + 2;
        do
        {
          v19 = __ldxr(v18);
          v15 = --v19 == 0;
        }
        while (__stlxr(v19, v18));
        goto LABEL_90;
      }
      break;
    case 4:
      v76 = strlen(__s);
      if (!a4 && a6)
LABEL_94:
        std::terminate();
      v89 = a6;
      v90 = a4;
      v93 = -1;
      v87 = 1;
      v88 = a6;
      v91 = a4;
      v92 = a6;
      v83 = 0x300000000;
      __p = &off_24E6BE1D0;
      v84[1] = 0;
      v84[2] = 0;
      v84[0] = &v84[1];
      v20 = operator new();
      v21 = v20;
      *(_QWORD *)(v20 + 8) = 0x300000000;
      v22 = (unsigned int *)(v20 + 8);
      *(_QWORD *)v20 = &off_24E6BE1D0;
      v23 = v84[1];
      *(void **)(v20 + 16) = v84[0];
      *(_QWORD *)(v20 + 24) = v23;
      v24 = v84[2];
      v84[1] = 0;
      v84[2] = 0;
      *(_QWORD *)(v20 + 32) = v24;
      v84[0] = &v84[1];
      if (!v24)
        v23 = (_QWORD *)v20;
      v23[2] = v20 + 24;
      v86 = (unsigned int *)v20;
      do
        v25 = __ldxr(v22);
      while (__stxr(v25 + 1, v22));
      std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v84, (_QWORD *)v84[1]);
      std::vector<xgboost::Json>::vector(&v115, 2uLL);
      v83 = 0x400000000;
      __p = off_24E6BE218;
      *(_OWORD *)v84 = v115;
      v84[2] = v116;
      v115 = 0uLL;
      v116 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v111, "data");
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v21 + 24))(v21, &v111);
      xgboost::Json::operator=(v26, (uint64_t)&__p);
      if (v114 < 0)
        operator delete(v111);
      __p = off_24E6BE218;
      v111 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v111);
      v111 = (void **)&v115;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&v111);
      *((_QWORD *)&v115 + 1) = 0x200000000;
      *(_QWORD *)&v115 = &off_24E6BE3A8;
      v116 = a4;
      std::string::basic_string[abi:ne180100]<0>(&__p, "data");
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, &__p);
      v28 = (unsigned int **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v27 + 32))(*v27, 0);
      xgboost::Json::operator=(v28, (uint64_t)&v115);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      v112 = 0x500000000;
      v111 = (void **)&off_24E6BE468;
      v113 = 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "data");
      v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, &__p);
      v30 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v29 + 32))(*v29, 1);
      xgboost::Json::operator=(v30, (uint64_t)&v111);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      std::vector<xgboost::Json>::vector(&v109, 1uLL);
      std::vector<xgboost::Json>::vector(&v107, 1uLL);
      v31 = 0;
      for (j = 1; (j & 1) != 0; j = 0)
      {
        v33 = *(&v87 + v31 + 1);
        v105 = 0x200000000;
        v104 = &off_24E6BE3A8;
        v106 = v33;
        xgboost::Json::operator=((unsigned int **)&v109[v31], (uint64_t)&v104);
        v34 = 8 * *(&v87 + v31);
        v102 = 0x200000000;
        v101 = &off_24E6BE3A8;
        v103 = v34;
        xgboost::Json::operator=((unsigned int **)&v107[v31], (uint64_t)&v101);
        v31 = 1;
      }
      v83 = 0x400000000;
      __p = off_24E6BE218;
      memset(v84, 0, 24);
      std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v84, v109, v110, v110 - v109);
      std::string::basic_string[abi:ne180100]<0>(&v98, "shape");
      v54 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, &v98);
      xgboost::Json::operator=(v54, (uint64_t)&__p);
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
      __p = off_24E6BE218;
      v98 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v83 = 0x400000000;
      __p = off_24E6BE218;
      memset(v84, 0, 24);
      std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v84, v107, v108, v108 - v107);
      std::string::basic_string[abi:ne180100]<0>(&v98, "strides");
      v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, &v98);
      xgboost::Json::operator=(v55, (uint64_t)&__p);
      if (SHIBYTE(v100) < 0)
        operator delete(v98);
      __p = off_24E6BE218;
      v98 = v84;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      v99 = 0x200000000;
      v98 = &off_24E6BE3A8;
      v100 = 3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "version");
      v56 = (unsigned int **)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, &__p);
      xgboost::Json::operator=(v56, (uint64_t)&v98);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p);
      std::to_string(&v96, 8uLL);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v96;
      else
        v57.__i_ = (std::__wrap_iter<const char *>::iterator_type)v96.__r_.__value_.__r.__words[0];
      std::string::insert(&v96, v57, 117);
      v97 = v96;
      memset(&v96, 0, sizeof(v96));
      v58 = std::string::insert(&v97, 0, "<");
      v59 = (void *)v58->__r_.__value_.__r.__words[0];
      v117[0] = v58->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v117 + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
      v60 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v83 = 0;
      __p = off_24E6BE2B8;
      *(void **)((char *)&v84[1] + 7) = *(void **)((char *)v117 + 7);
      v84[0] = v59;
      v84[1] = (void *)v117[0];
      HIBYTE(v84[2]) = v60;
      v117[0] = 0;
      *(_QWORD *)((char *)v117 + 7) = 0;
      std::string::basic_string[abi:ne180100]<0>(v94, "typestr");
      v61 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 24))(v21, v94);
      xgboost::Json::operator=(v61, (uint64_t)&__p);
      if (v95 < 0)
        operator delete(v94[0]);
      __p = off_24E6BE2B8;
      if (SHIBYTE(v84[2]) < 0)
        operator delete(v84[0]);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      __p = &v107;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = &v109;
      std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      xgboost::ArrayInterface<1,true>::ArrayInterface((uint64_t)&__p, &v86);
      if (!v85)
        __assert_rtn("operator()", "data.cc", 559, "ArrayInterface<1>{interface}.is_contiguous");
      v12 = v86;
      v78 = v86;
      xgboost::MetaInfo::SetInfoFromHost(a1, v62, __s, v76, &v78);
      if (v12)
      {
        v63 = v12 + 2;
        do
        {
          v64 = __ldxr(v63);
          v15 = --v64 == 0;
        }
        while (__stlxr(v64, v63));
LABEL_90:
        if (v15)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      break;
    default:
      v50 = a5;
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Unknown data type", 17);
      LOBYTE(v87) = v50;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v87, 1);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      break;
  }
}

void sub_220E8C664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  unsigned int *v56;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;

  if (v56)
  {
    v58 = v56 + 2;
    do
    {
      v59 = __ldxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
    }
  }
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::GetInfo(uint64_t a1, char *__s1, uint64_t *a3, int a4, _QWORD *a5)
{
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  dmlc::LogMessageFatal *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  char v26;
  char v27;
  char v28;

  if (a4 == 3)
  {
    if (strcmp(__s1, "group_ptr"))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v27);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown uint32 field name: ", 27);
      v20 = strlen(__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__s1, v20);
      v21 = (dmlc::LogMessageFatal *)&v27;
      goto LABEL_25;
    }
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56) - v10;
    *a3 = v11 >> 2;
    if (v11)
      v12 = v10;
    else
      v12 = 0;
  }
  else
  {
    if (a4 != 1)
    {
      v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Unknown data type for getting meta info.", 40);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v26);
      return;
    }
    if (!strcmp(__s1, "label"))
    {
      v9 = (uint64_t **)(a1 + 24);
    }
    else if (!strcmp(__s1, "weight"))
    {
      v9 = (uint64_t **)(a1 + 72);
    }
    else if (!strcmp(__s1, "base_margin"))
    {
      v9 = (uint64_t **)(a1 + 80);
    }
    else if (!strcmp(__s1, "label_lower_bound"))
    {
      v9 = (uint64_t **)(a1 + 104);
    }
    else if (!strcmp(__s1, "label_upper_bound"))
    {
      v9 = (uint64_t **)(a1 + 112);
    }
    else
    {
      if (strcmp(__s1, "feature_weights"))
      {
        while (1)
        {
          v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
          dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unknown float field name: ", 26);
          v25 = strlen(__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)__s1, v25);
          v21 = (dmlc::LogMessageFatal *)&v28;
LABEL_25:
          dmlc::LogMessageFatal::~LogMessageFatal(v21);
          __break(1u);
        }
      }
      v9 = (uint64_t **)(a1 + 176);
    }
    v15 = *v9;
    v12 = **v9;
    v16 = v15[1] - v12;
    *a3 = v16 >> 2;
    if (!v16)
      v12 = 0;
  }
  *a5 = v12;
}

void sub_220E8CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::MetaInfo::SetFeatureInfo(xgboost::MetaInfo *this, const char *__s1, char **a3, unint64_t a4)
{
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  char *v20;
  std::string *v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  char v31;
  char *v32;
  unint64_t v33;

  v33 = a4;
  if (a4)
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      if (v7 != a4)
      {
        dmlc::LogCheckFormat<unsigned long long,unsigned long long>((uint64_t *)&v32);
        if (v32)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"size == this->num_col_", 22);
          v12 = v32[23];
          v13 = v12 >= 0 ? v32 : *(char **)v32;
          v14 = v12 >= 0 ? v32[23] : *((_QWORD *)v32 + 1);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Length of ", 10);
          v18 = strlen(__s1);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)__s1, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" must be equal to number of columns.", 36);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
          v20 = v32;
          v32 = 0;
          if (v20)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v32, (uint64_t)v20);
        }
      }
    }
  }
  if (!strcmp(__s1, "feature_type"))
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 15);
    v25 = (unint64_t *)*((_QWORD *)this + 21);
    if (v33)
    {
      v26 = 0;
      v27 = (_QWORD *)*((_QWORD *)this + 16);
      do
      {
        v28 = a3[v26];
        v32 = v28;
        if ((unint64_t)v27 >= *((_QWORD *)this + 17))
        {
          v27 = (_QWORD *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)this + 15, &v32);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v27, v28);
          v27 += 3;
          *((_QWORD *)this + 16) = v27;
        }
        *((_QWORD *)this + 16) = v27;
        ++v26;
      }
      while (v26 < v33);
    }
    xgboost::LoadFeatureType((unsigned __int8 ***)this + 15, v25);
  }
  else if (!strcmp(__s1, "feature_name"))
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 18);
    if (v33)
    {
      v29 = 0;
      v30 = (_QWORD *)*((_QWORD *)this + 19);
      do
      {
        if ((unint64_t)v30 >= *((_QWORD *)this + 20))
        {
          v30 = (_QWORD *)std::vector<std::string>::__emplace_back_slow_path<char const*&>((uint64_t *)this + 18, a3);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v30, *a3);
          v30 += 3;
          *((_QWORD *)this + 19) = v30;
        }
        *((_QWORD *)this + 19) = v30;
        ++v29;
        ++a3;
      }
      while (v29 < v33);
    }
  }
  else
  {
    v21 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
    dmlc::LogMessageFatal::Entry::Init(v21, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
    v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unknown feature info name: ", 27);
    v24 = strlen(__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)__s1, v24);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
  }
}

void sub_220E8CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::GetFeatureInfo(_QWORD *a1, char *__s1, std::vector<std::string> *a3)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  std::string *v10;
  std::string *v11;
  char v12;

  if (!strcmp(__s1, "feature_type"))
  {
    std::vector<std::string>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[16] - a1[15]) >> 3));
    v10 = (std::string *)a1[15];
    v11 = (std::string *)a1[16];
  }
  else
  {
    if (strcmp(__s1, "feature_name"))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown feature info: ", 22);
      v9 = strlen(__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__s1, v9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
      return;
    }
    std::vector<std::string>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[19] - a1[18]) >> 3));
    v10 = (std::string *)a1[18];
    v11 = (std::string *)a1[19];
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,0>(v10, v11, a3->__begin_);
}

void sub_220E8D168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

void xgboost::MetaInfo::Extend(xgboost::MetaInfo *this, const xgboost::MetaInfo *a2, int a3, int a4)
{
  unint64_t *v6;
  unint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  std::string *v27;
  __int128 *v28;
  std::string *v29;
  __int128 *v30;
  const void ***v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  void *__p;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  if (a3)
    *(_QWORD *)this += *(_QWORD *)a2;
  v6 = (unint64_t *)((char *)this + 8);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (a4)
    {
      if (v7 != *((_QWORD *)a2 + 1))
      {
        dmlc::LogCheckFormat<unsigned long long,unsigned long long>((uint64_t *)&__p);
        if (__p)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"this->num_col_ == that.num_col_", 31);
          v12 = *((char *)__p + 23);
          v13 = v12 >= 0 ? __p : *(void **)__p;
          v14 = v12 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Number of columns must be consistent across batches.", 52);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v48);
          v17 = __p;
          __p = 0;
          if (v17)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v17);
        }
      }
    }
    else
    {
      if (v7 <= *((_QWORD *)a2 + 1))
        v7 = *((_QWORD *)a2 + 1);
      *v6 = v7;
    }
  }
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  xgboost::linalg::Stack<float,2>((uint64_t)this + 24, (uint64_t)a2 + 24);
  xgboost::HostDeviceVector<float>::Extend((_QWORD **)this + 9, (const void ***)a2 + 9);
  xgboost::HostDeviceVector<float>::Extend((_QWORD **)this + 13, (const void ***)a2 + 13);
  xgboost::HostDeviceVector<float>::Extend((_QWORD **)this + 14, (const void ***)a2 + 14);
  xgboost::linalg::Stack<float,2>((uint64_t)this + 80, (uint64_t)a2 + 80);
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 6))
  {
    if (this != a2)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 48, *((char **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
  }
  else
  {
    v19 = *((_QWORD *)a2 + 6);
    v18 = *((_QWORD *)a2 + 7);
    v47 = 0;
    v20 = v18 - v19;
    v48 = v20 >> 2;
    if (!v20)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&__p);
      if (__p)
      {
        v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
        dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v48);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: ", 14);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"that.group_ptr_.size() != 0", 27);
        v39 = *((char *)__p + 23);
        v40 = v39 >= 0 ? __p : *(void **)__p;
        v41 = v39 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v48);
        v43 = __p;
        __p = 0;
        if (v43)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v43);
      }
    }
    __p = 0;
    v45 = 0;
    v46 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
    v22 = (char *)__p;
    v21 = v45;
    v23 = *((_QWORD *)this + 7);
    if ((unint64_t)(v45 - (_BYTE *)__p) >= 5)
    {
      v24 = (v45 - (_BYTE *)__p) >> 2;
      if (v24 <= 2)
        v24 = 2;
      v25 = v24 - 1;
      v26 = (char *)__p + 4;
      do
      {
        *v26++ += *(_DWORD *)(v23 - 4);
        --v25;
      }
      while (v25);
    }
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)this + 2, v23, v22 + 4, v21, (v21 - (v22 + 4)) >> 2);
    if (__p)
    {
      v45 = (char *)__p;
      operator delete(__p);
    }
  }
  if (this != a2)
  {
    v27 = (std::string *)*((_QWORD *)a2 + 18);
    v28 = (__int128 *)*((_QWORD *)a2 + 19);
    if (v27 != (std::string *)v28)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 6, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  }
  v29 = (std::string *)*((_QWORD *)a2 + 15);
  v30 = (__int128 *)*((_QWORD *)a2 + 16);
  if (v29 != (std::string *)v30)
  {
    if (this != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 5, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
    xgboost::LoadFeatureType((unsigned __int8 ***)this + 15, *((unint64_t **)this + 21));
  }
  v32 = (_QWORD *)*((_QWORD *)a2 + 22);
  v31 = (const void ***)((char *)a2 + 176);
  v33 = v32[1];
  v34 = v33 - *v32;
  if (v33 != *v32)
  {
    LODWORD(__p) = 0;
    std::vector<float>::resize(*((_QWORD *)this + 22), v34 >> 2, &__p);
    xgboost::HostDeviceVector<float>::Copy((void ***)this + 22, v31);
  }
}

void sub_220E8D588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v15;

  v15 = (uint64_t)__p;
  __p = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v15);
  _Unwind_Resume(exception_object);
}

void xgboost::linalg::Stack<float,2>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a1 + 16);
  v5 = v6;
  if (v6)
  {
    v29 = *(_QWORD *)(a2 + 16);
    if (v5 != v29)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v30);
      if (v30)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
        v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"shape[i] == r.Shape(i)", 22);
        v11 = *(char *)(v30 + 23);
        v12 = v11 >= 0 ? v30 : *(_QWORD *)v30;
        v13 = v11 >= 0 ? *(unsigned __int8 *)(v30 + 23) : *(_QWORD *)(v30 + 8);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
        v15 = v30;
        v30 = 0;
        if (v15)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v15);
      }
    }
  }
  else
  {
    *v4 = *(_QWORD *)(a2 + 16);
  }
  xgboost::HostDeviceVector<float>::Extend((_QWORD **)a1, (const void ***)a2);
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v17;
  v28 = *(_QWORD *)(a1 + 16) * v17;
  v29 = (uint64_t)(v16[1] - *v16) >> 2;
  if (v29 != v28)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v30);
    if (v30)
    {
      v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/xgboost/linalg.h");
      v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v29);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"this->Data()->Size() == detail::CalcSize(this->shape_)", 54);
      v22 = *(char *)(v30 + 23);
      if (v22 >= 0)
        v23 = v30;
      else
        v23 = *(_QWORD *)v30;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v30 + 23);
      else
        v24 = *(_QWORD *)(v30 + 8);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Inconsistent size after modification.", 37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v29);
      v27 = v30;
      v30 = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v27);
    }
  }
}

void sub_220E8D7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::MetaInfo::Validate(xgboost::MetaInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  std::string *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v2 = *((_QWORD *)this + 7);
  v3 = v2 - *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 8) - **((_QWORD **)this + 9);
    if (v4)
    {
      v95 = v3 >> 2;
      if (v3 >> 2 != (v4 >> 2) + 1)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v96);
        if (v96)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
          v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"group_ptr_.size() == weights_.Size() + 1", 40);
          v9 = *(char *)(v96 + 23);
          if (v9 >= 0)
            v10 = v96;
          else
            v10 = *(_QWORD *)v96;
          if (v9 >= 0)
            v11 = *(unsigned __int8 *)(v96 + 23);
          else
            v11 = *(_QWORD *)(v96 + 8);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Size of weights must equal to number of groups when ranking group is used.", 74);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
LABEL_93:
          v94 = v96;
          v96 = 0;
          if (v94)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v94);
          return;
        }
      }
      return;
    }
    if (*(_QWORD *)this != *(_DWORD *)(v2 - 4))
    {
      dmlc::LogCheckFormat<unsigned int,unsigned long long>(&v96);
      if (v96)
      {
        v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"group_ptr_.back() == num_row_", 29);
        v18 = *(char *)(v96 + 23);
        v19 = v18 >= 0 ? v96 : *(_QWORD *)v96;
        v20 = v18 >= 0 ? *(unsigned __int8 *)(v96 + 23) : *(_QWORD *)(v96 + 8);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid group structure.  Number of rows obtained from groups doesn't equal to actual number of rows given by data.", 115);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
        v23 = v96;
        v96 = 0;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v23);
      }
    }
  }
  v24 = *(_QWORD *)(*((_QWORD *)this + 9) + 8) - **((_QWORD **)this + 9);
  if (v24)
  {
    v95 = v24 >> 2;
    if (v24 >> 2 != *(_QWORD *)this)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v96);
      if (v96)
      {
        v25 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        dmlc::LogMessageFatal::Entry::Init(v25, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v26 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: ", 14);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"weights_.Size() == num_row_", 27);
        v29 = *(char *)(v96 + 23);
        if (v29 >= 0)
          v30 = v96;
        else
          v30 = *(_QWORD *)v96;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(v96 + 23);
        else
          v31 = *(_QWORD *)(v96 + 8);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Size of weights must equal to number of rows.", 45);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
        goto LABEL_93;
      }
    }
  }
  else if (*(_QWORD *)(*((_QWORD *)this + 3) + 8) == **((_QWORD **)this + 3))
  {
    v43 = *(_QWORD *)(*((_QWORD *)this + 13) + 8) - **((_QWORD **)this + 13);
    if (v43)
    {
      v95 = v43 >> 2;
      if (v43 >> 2 != *(_QWORD *)this)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v96);
        if (v96)
        {
          v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
          dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"labels_lower_bound_.Size() == num_row_", 38);
          v48 = *(char *)(v96 + 23);
          if (v48 >= 0)
            v49 = v96;
          else
            v49 = *(_QWORD *)v96;
          if (v48 >= 0)
            v50 = *(unsigned __int8 *)(v96 + 23);
          else
            v50 = *(_QWORD *)(v96 + 8);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Size of label_lower_bound must equal to number of rows.", 55);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
          goto LABEL_93;
        }
      }
    }
    else
    {
      v53 = *(_QWORD *)(*((_QWORD *)this + 22) + 8) - **((_QWORD **)this + 22);
      if (v53)
      {
        v95 = v53 >> 2;
        if (v53 >> 2 != *((_QWORD *)this + 1))
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v96);
          if (v96)
          {
            v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
            v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: ", 14);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"feature_weights.Size() == num_col_", 34);
            v58 = *(char *)(v96 + 23);
            v59 = v58 >= 0 ? v96 : *(_QWORD *)v96;
            v60 = v58 >= 0 ? *(unsigned __int8 *)(v96 + 23) : *(_QWORD *)(v96 + 8);
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
            v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Size of feature_weights must equal to number of columns.", 56);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
            v63 = v96;
            v96 = 0;
            if (v63)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v63);
          }
        }
      }
      v64 = *(_QWORD *)(*((_QWORD *)this + 14) + 8) - **((_QWORD **)this + 14);
      if (v64)
      {
        v95 = v64 >> 2;
        if (v64 >> 2 != *(_QWORD *)this)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v96);
          if (v96)
          {
            v65 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            dmlc::LogMessageFatal::Entry::Init(v65, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
            v66 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: ", 14);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"labels_upper_bound_.Size() == num_row_", 38);
            v69 = *(char *)(v96 + 23);
            if (v69 >= 0)
              v70 = v96;
            else
              v70 = *(_QWORD *)v96;
            if (v69 >= 0)
              v71 = *(unsigned __int8 *)(v96 + 23);
            else
              v71 = *(_QWORD *)(v96 + 8);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v70, v71);
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Size of label_upper_bound must equal to number of rows.", 55);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
            goto LABEL_93;
          }
        }
      }
      else
      {
        v74 = *((_QWORD *)this + 2);
        v95 = *(_QWORD *)this * *((_QWORD *)this + 1);
        if (v74 > v95)
        {
          dmlc::LogCheckFormat<unsigned long long,unsigned long long>(&v96);
          if (v96)
          {
            v75 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            dmlc::LogMessageFatal::Entry::Init(v75, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
            v76 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Check failed: ", 14);
            v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"num_nonzero_ <= num_col_ * num_row_", 35);
            v79 = *(char *)(v96 + 23);
            v80 = v79 >= 0 ? v96 : *(_QWORD *)v96;
            v81 = v79 >= 0 ? *(unsigned __int8 *)(v96 + 23) : *(_QWORD *)(v96 + 8);
            v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v80, v81);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
            v83 = v96;
            v96 = 0;
            if (v83)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v96, v83);
          }
        }
        v84 = *(_QWORD *)(*((_QWORD *)this + 10) + 8) - **((_QWORD **)this + 10);
        if (v84)
        {
          v95 = (unint64_t)(v84 >> 2) % *(_QWORD *)this;
          if (v95)
          {
            dmlc::LogCheckFormat<unsigned long long,int>(&v96);
            if (v96)
            {
              v85 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
              dmlc::LogMessageFatal::Entry::Init(v85, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v86 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
              v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Check failed: ", 14);
              v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"base_margin_.Size() % num_row_ == 0", 35);
              v89 = *(char *)(v96 + 23);
              if (v89 >= 0)
                v90 = v96;
              else
                v90 = *(_QWORD *)v96;
              if (v89 >= 0)
                v91 = *(unsigned __int8 *)(v96 + 23);
              else
                v91 = *(_QWORD *)(v96 + 8);
              v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
              v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)": ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Size of base margin must be a multiple of number of rows.", 57);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
              goto LABEL_93;
            }
          }
        }
      }
    }
  }
  else
  {
    v95 = *((_QWORD *)this + 4);
    if (v95 != *(_QWORD *)this)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>(&v96);
      if (v96)
      {
        v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v95);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"labels.Shape(0) == num_row_", 27);
        v38 = *(char *)(v96 + 23);
        if (v38 >= 0)
          v39 = v96;
        else
          v39 = *(_QWORD *)v96;
        if (v38 >= 0)
          v40 = *(unsigned __int8 *)(v96 + 23);
        else
          v40 = *(_QWORD *)(v96 + 8);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Size of labels must equal to number of rows.", 44);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v95);
        goto LABEL_93;
      }
    }
  }
}

void sub_220E8DF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

char **xgboost::DMatrix::GetThreadLocal(xgboost::DMatrix *this)
{
  uint64_t v2;
  char *v3;
  char **v4;
  char **v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10[2];
  char v11;

  v2 = dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  v3 = *(char **)(v2 + 8);
  v4 = (char **)(v2 + 8);
  v5 = (char **)(v2 + 8);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char **)v3;
        v6 = *((_QWORD *)v3 + 4);
        if (v6 <= (unint64_t)this)
          break;
        v3 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v6 >= (unint64_t)this)
        break;
      v3 = v5[1];
      if (!v3)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v7 = (char *)operator new(0xF0uLL);
    v10[0] = (uint64_t)v7;
    v10[1] = v2 + 8;
    *((_QWORD *)v7 + 4) = this;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *((_QWORD *)v7 + 29) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v7 + 40));
    v11 = 1;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v5;
    *v4 = v7;
    v8 = **(_QWORD **)v2;
    if (v8)
    {
      *(_QWORD *)v2 = v8;
      v7 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 8), (uint64_t *)v7);
    ++*(_QWORD *)(v2 + 16);
    v5 = (char **)v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100](v10);
  }
  return v5 + 5;
}

void sub_220E8E160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get()
{
  uint64_t (*v0)(_QWORD);
  _QWORD *v2;

  {
    v2 = (_QWORD *)dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    _tlv_atexit((void (__cdecl *)(void *))std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100], v2);
  }
  return dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst(&dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get(void)::inst);
}

void xgboost::DMatrix::~DMatrix(xgboost::DMatrix *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  xgboost::DMatrix *v8;

  *(_QWORD *)this = &unk_24E6B95D8;
  v2 = dmlc::ThreadLocalStore<std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>::Get();
  v3 = *(_QWORD **)(v2 + 8);
  if (v3)
  {
    v4 = v2 + 8;
    do
    {
      v5 = v3[4];
      v6 = v5 >= (unint64_t)this;
      if (v5 >= (unint64_t)this)
        v7 = v3;
      else
        v7 = v3 + 1;
      if (v6)
        v4 = (uint64_t)v3;
      v3 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v4 != v2 + 8 && *(_QWORD *)(v4 + 32) <= (unint64_t)this)
    {
      v8 = this;
      std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__erase_unique<xgboost::DMatrix const*>(v2, (unint64_t *)&v8);
    }
  }
}

xgboost::data::SimpleDMatrix *xgboost::TryLoadBinary(char *a1, char a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  xgboost::data::SimpleDMatrix *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[264];
  int v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  int __dst;
  char v21;

  v3 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  v4 = dmlc::Stream::Create((dmlc::Stream *)a1, "r", (const char *)1);
  if (!v4)
    return 0;
  v5 = v4;
  __dst = 0;
  v17[0] = &off_24E6B8AC8;
  v17[1] = v4;
  v18 = 0u;
  v19 = 0u;
  v6 = 0;
  if (xgboost::common::PeekableInStream::PeekRead((xgboost::common::PeekableInStream *)v17, &__dst, 4uLL) == 4
    && __dst == -21759)
  {
    v6 = (xgboost::data::SimpleDMatrix *)operator new();
    xgboost::data::SimpleDMatrix::SimpleDMatrix(v6, (dmlc::Stream *)v17);
    if ((a2 & 1) == 0)
    {
      xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v15);
      v16 = 4;
      (**(void (***)(xgboost::data::SimpleDMatrix *))v6)(v6);
      v7 = (_QWORD *)std::ostream::operator<<();
      v21 = 120;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v21, 1);
      (**(void (***)(xgboost::data::SimpleDMatrix *))v6)(v6);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" matrix with ", 13);
      (**(void (***)(xgboost::data::SimpleDMatrix *))v6)(v6);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" entries loaded from ", 21);
      v11 = v3[23];
      if (v11 >= 0)
        v12 = (uint64_t)v3;
      else
        v12 = *(_QWORD *)v3;
      if (v11 >= 0)
        v13 = v3[23];
      else
        v13 = *((_QWORD *)v3 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v15);
    }
  }
  v17[0] = &off_24E6B8AC8;
  if (SHIBYTE(v19) < 0)
    operator delete(*((void **)&v18 + 1));
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v6;
}

void sub_220E8E464(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = v2 + 16;
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t (***xgboost::DMatrix::Load(uint64_t a1, int a2, int a3, uint64_t a4))(_QWORD)
{
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v28;
  rabit::engine *v29;
  void *v30;
  _QWORD *v31;
  rabit::engine *v32;
  void *v33;
  _QWORD *v34;
  const std::string *v35;
  std::string::size_type v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  rabit::engine *v41;
  void *Engine;
  _QWORD *v43;
  rabit::engine *v44;
  void *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  void *v49;
  rabit::engine *v50;
  void *v51;
  uint64_t data_low;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  const std::string::value_type *v60;
  char v61;
  xgboost::data::SimpleDMatrix *Binary;
  uint64_t (***v63)(_QWORD);
  std::string::size_type v64;
  std::string *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  uint64_t v71;
  rabit::engine *v72;
  void *v73;
  uint64_t v74;
  size_t v75;
  __int128 *v76;
  std::string *v77;
  dmlc::Stream *v78;
  uint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  void **v92;
  _QWORD *v93;
  unint64_t v94;
  int *v95;
  int v96;
  _DWORD *v97;
  int *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  int v105;
  char v106;
  _QWORD *v107;
  _QWORD *v108;
  std::string *v109;
  std::string::size_type v110;
  _QWORD *v111;
  size_t v112;
  _BYTE *v113;
  std::string *v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  std::string *v118;
  std::string::size_type v119;
  _QWORD *v120;
  size_t v121;
  _BYTE *v122;
  std::string *v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  int v131;
  char v132[25];
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string __p;
  std::string v139;
  std::string __str;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[32];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  char v151[8];
  __int128 *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  int v158;

  memset(&v139, 0, sizeof(v139));
  memset(&__p, 0, sizeof(__p));
  v8 = std::string::find((const std::string *)a1, 35, 0);
  if (v8 == -1)
  {
    v48 = std::string::operator=(&v139, (const std::string *)a1);
  }
  else
  {
    v9 = v8;
    if (*(char *)(a1 + 23) >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::string::basic_string((std::string *)v143, (const std::string *)a1, v8 + 1, v10, (std::allocator<char> *)&v141);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)v143;
    std::string::basic_string((std::string *)v143, (const std::string *)a1, 0, v9, (std::allocator<char> *)&v141);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    v139 = *(std::string *)v143;
    *(_QWORD *)&v141 = std::string::find(&__p, 35, 0);
    if ((_QWORD)v141 != -1)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v143);
      if (*(_QWORD *)v143)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v141);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
        v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v141);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cache_file.find('#') == std::string::npos", 41);
        v15 = *(char *)(*(_QWORD *)v143 + 23);
        v16 = v15 >= 0 ? *(_QWORD *)v143 : **(_QWORD **)v143;
        v17 = v15 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)v143 + 23) : *(_QWORD *)(*(_QWORD *)v143 + 8);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v141);
        v20 = *(_QWORD *)v143;
        *(_QWORD *)v143 = 0;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v143, v20);
      }
    }
    if (!a3)
      goto LABEL_59;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v143);
    v131 = a3;
    xgboost::common::Split(&__p, 0x3Au, (uint64_t *)&v141);
    v21 = v141;
    if (*((_QWORD *)&v141 + 1) != (_QWORD)v141)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = std::string::rfind((const std::string *)(v21 + v22), 46, 0xFFFFFFFFFFFFFFFFLL);
        if (v24 == -1)
        {
          v37 = *(char *)(v141 + v22 + 23);
          if (v37 >= 0)
            v38 = v141 + v22;
          else
            v38 = *(_QWORD *)(v141 + v22);
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v141 + v22 + 23);
          else
            v39 = *(_QWORD *)(v141 + v22 + 8);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, v38, v39);
          v41 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)".r", 2);
          Engine = rabit::engine::GetEngine(v41);
          (*(void (**)(void *))(*(_QWORD *)Engine + 64))(Engine);
          v43 = (_QWORD *)std::ostream::operator<<();
          v44 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"-", 1);
          v45 = rabit::engine::GetEngine(v44);
          (*(void (**)(void *))(*(_QWORD *)v45 + 72))(v45);
          std::ostream::operator<<();
        }
        else
        {
          v25 = v24;
          std::string::basic_string(&__str, (const std::string *)(v141 + v22), 0, v24, (std::allocator<char> *)&v137);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)p_str, size);
          v29 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)".r", 2);
          v30 = rabit::engine::GetEngine(v29);
          (*(void (**)(void *))(*(_QWORD *)v30 + 64))(v30);
          v31 = (_QWORD *)std::ostream::operator<<();
          v32 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"-", 1);
          v33 = rabit::engine::GetEngine(v32);
          (*(void (**)(void *))(*(_QWORD *)v33 + 72))(v33);
          v34 = (_QWORD *)std::ostream::operator<<();
          v35 = (const std::string *)(v141 + v22);
          if (*(char *)(v141 + v22 + 23) < 0)
            v36 = v35->__r_.__value_.__l.__size_;
          else
            v36 = *(unsigned __int8 *)(v141 + v22 + 23);
          std::string::basic_string(&v137, v35, v25, v36, (std::allocator<char> *)v132);
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v137;
          else
            v46 = (std::string *)v137.__r_.__value_.__r.__words[0];
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          else
            v47 = v137.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v46, v47);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (++v23 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v141 + 1) - v141) >> 3))
          break;
        v137.__r_.__value_.__s.__data_[0] = 58;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)&v137, 1);
        v21 = v141;
        v22 += 24;
      }
      while (v23 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v141 + 1) - v141) >> 3));
    }
    std::stringbuf::str();
    a3 = v131;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    *(_QWORD *)v143 = *MEMORY[0x24BEDB800];
    *(_QWORD *)&v143[*(_QWORD *)(*(_QWORD *)v143 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    *(_QWORD *)&v143[8] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v147) < 0)
      operator delete(*((void **)&v146 + 1));
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    v48 = (std::string *)MEMORY[0x227666FE4](&v150);
  }
  if (a3)
  {
    v49 = rabit::engine::GetEngine((rabit::engine *)v48);
    v50 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 64))(v49);
    v51 = rabit::engine::GetEngine(v50);
    data_low = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 72))(v51);
    goto LABEL_72;
  }
LABEL_59:
  v53 = getenv("XGBOOST_TEST_NPART");
  if (!v53 || (v54 = v53, !*v53))
  {
    v50 = 0;
    v56 = 1;
    data_low = 1;
    goto LABEL_76;
  }
  LODWORD(v137.__r_.__value_.__l.__data_) = 0;
  v143[8] = 0;
  *(_OWORD *)&v143[16] = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v149 = 0;
  *(_QWORD *)v143 = &unk_24E6B5E08;
  v151[0] = 0;
  v152 = &v153;
  v153 = 0uLL;
  *((_QWORD *)&v154 + 1) = 0;
  *(_QWORD *)&v155 = 0;
  *(_QWORD *)&v154 = (char *)&v154 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "XGBOOST_TEST_NPART");
  std::string::operator=((std::string *)&v143[24], &__str);
  v55 = BYTE7(v146);
  if (SBYTE7(v146) < 0)
    v55 = *((_QWORD *)&v145 + 1);
  if (!v55)
  {
    std::string::basic_string[abi:ne180100]<0>(&v141, "int");
    if (SBYTE7(v146) < 0)
      operator delete((void *)v145);
    v145 = v141;
    *(_QWORD *)&v146 = v142;
  }
  v148 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v141, v54);
  dmlc::parameter::FieldEntry<int>::Set((uint64_t)v143, (uint64_t)&v137, (uint64_t)&v141);
  if (SHIBYTE(v142) < 0)
    operator delete((void *)v141);
  data_low = LODWORD(v137.__r_.__value_.__l.__data_);
  *(_QWORD *)v143 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v154, *((char **)&v154 + 1));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy((uint64_t)&v152, (char *)v153);
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)v143);
  v50 = 0;
LABEL_72:
  if ((_DWORD)data_low == 1)
  {
    v56 = 1;
  }
  else
  {
    xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v143);
    v158 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Load part of data ", 18);
    v57 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" of ", 4);
    v58 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" parts", 6);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v143);
    v56 = 0;
  }
LABEL_76:
  v59 = *(char *)(a4 + 23);
  if (v59 < 0)
  {
    if (*(_QWORD *)(a4 + 8) != 4)
      goto LABEL_91;
    v60 = *(const std::string::value_type **)a4;
  }
  else
  {
    v60 = (const std::string::value_type *)a4;
    if (v59 != 4)
      goto LABEL_91;
  }
  v61 = v56 ^ 1;
  if (*(_DWORD *)v60 != 1869903201)
    v61 = 1;
  if ((v61 & 1) == 0)
  {
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v136, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
    else
      v136 = v139;
    Binary = xgboost::TryLoadBinary((char *)&v136, a2);
    v63 = (uint64_t (***)(_QWORD))Binary;
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v136.__r_.__value_.__l.__data_);
      if (v63)
        goto LABEL_225;
    }
    else if (Binary)
    {
      goto LABEL_225;
    }
  }
LABEL_91:
  v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = __p.__r_.__value_.__l.__size_;
  if (v64)
  {
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v135, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
    else
      v135 = v139;
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v134 = *(std::string *)a4;
    *(std::string *)v143 = v135;
    memset(&v135, 0, sizeof(v135));
    *(_DWORD *)&v143[24] = (_DWORD)v50;
    *(_DWORD *)&v143[28] = data_low;
    v144 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    v70 = v134.__r_.__value_.__r.__words[2];
    memset(&v134, 0, sizeof(v134));
    *(_QWORD *)&v145 = v70;
    *(_QWORD *)&v146 = 0;
    v157 = 0;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    XGProxyDMatrixCreate((_QWORD *)&v145 + 1);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    v63 = (uint64_t (***)(_QWORD))operator new();
    v71 = *((_QWORD *)&v145 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v133, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v133 = __p;
    xgboost::data::SparsePageDMatrix::SparsePageDMatrix((uint64_t)v63, (uint64_t)v143, v71, (uint64_t)xgboost::data::fileiter::Reset, (uint64_t)xgboost::data::fileiter::Next, 1, (__int128 *)&v133, NAN);
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    xgboost::data::FileIterator::~FileIterator((xgboost::data::FileIterator *)v143);
  }
  else
  {
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v139;
    else
      v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
    if (*(char *)(a4 + 23) >= 0)
      v66 = (char *)a4;
    else
      v66 = *(char **)a4;
    dmlc::data::CreateParser_<unsigned int,float>((char *)v65, (uint64_t)v50, data_low, v66);
    v68 = v67;
    *(_QWORD *)v143 = &off_24E6B9710;
    *(_OWORD *)&v143[8] = 0uLL;
    *(_QWORD *)&v143[24] = v67;
    v63 = (uint64_t (***)(_QWORD))xgboost::DMatrix::Create<xgboost::data::FileAdapter>((uint64_t)v143, 1, NAN);
    v69 = *(_QWORD *)&v143[16];
    *(_QWORD *)v143 = &off_24E6B9710;
    *(_QWORD *)&v143[16] = 0;
    if (v69)
      MEMORY[0x227667068](v69, 0x1060C40C2E02434);
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  }
  v72 = (rabit::engine *)(**v63)(v63);
  v73 = rabit::engine::GetEngine(v72);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)v73 + 8))(v73, (uint64_t)v72 + 8, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  if ((a3 & 1) != 0)
    goto LABEL_225;
  v74 = (**v63)(v63);
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  else
    v75 = v139.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v141, v75 + 6);
  if (v142 >= 0)
    v76 = &v141;
  else
    v76 = (__int128 *)v141;
  if (v75)
  {
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v139;
    else
      v77 = (std::string *)v139.__r_.__value_.__r.__words[0];
    memmove(v76, v77, v75);
  }
  strcpy((char *)v76 + v75, ".group");
  if (v142 >= 0)
    v78 = (dmlc::Stream *)&v141;
  else
    v78 = (dmlc::Stream *)v141;
  v79 = dmlc::Stream::Create(v78, "r", (const char *)1);
  if (v79)
  {
    dmlc::istream::istream((uint64_t)v143, v79, 0x400uLL);
    v80 = *(_QWORD *)(v74 + 64);
    v81 = *(_DWORD **)(v74 + 48);
    *(_QWORD *)(v74 + 56) = v81;
    if ((unint64_t)v81 >= v80)
    {
      v83 = v80 - (_QWORD)v81;
      v84 = v83 >> 1;
      if ((unint64_t)(v83 >> 1) <= 1)
        v84 = 1;
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
        v85 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      v86 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v74 + 64, v85);
      v87 = *(char **)(v74 + 48);
      v88 = *(char **)(v74 + 56);
      v90 = &v86[v89];
      *v86 = 0;
      v82 = v86 + 1;
      while (v88 != v87)
      {
        v91 = *((_DWORD *)v88 - 1);
        v88 -= 4;
        *--v86 = v91;
      }
      *(_QWORD *)(v74 + 48) = v86;
      *(_QWORD *)(v74 + 56) = v82;
      *(_QWORD *)(v74 + 64) = v90;
      if (v87)
        operator delete(v87);
    }
    else
    {
      *v81 = 0;
      v82 = v81 + 1;
    }
    v92 = (void **)(v74 + 48);
    *(_QWORD *)(v74 + 56) = v82;
    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
    while (1)
    {
      v93 = (_QWORD *)MEMORY[0x227666D38](v143, &__str);
      if ((*((_BYTE *)v93 + *(_QWORD *)(*v93 - 24) + 32) & 5) != 0)
        break;
      v95 = *(int **)(v74 + 56);
      v94 = *(_QWORD *)(v74 + 64);
      v96 = LODWORD(__str.__r_.__value_.__l.__data_) + *(v95 - 1);
      if ((unint64_t)v95 >= v94)
      {
        v98 = (int *)*v92;
        v99 = ((char *)v95 - (_BYTE *)*v92) >> 2;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v101 = v94 - (_QWORD)v98;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v74 + 64, v102);
          v98 = *(int **)(v74 + 48);
          v95 = *(int **)(v74 + 56);
        }
        else
        {
          v103 = 0;
        }
        v104 = (int *)&v103[4 * v99];
        *v104 = v96;
        v97 = v104 + 1;
        while (v95 != v98)
        {
          v105 = *--v95;
          *--v104 = v105;
        }
        *(_QWORD *)(v74 + 48) = v104;
        *(_QWORD *)(v74 + 56) = v97;
        *(_QWORD *)(v74 + 64) = &v103[4 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v95 = v96;
        v97 = v95 + 1;
      }
      *(_QWORD *)(v74 + 56) = v97;
    }
    MEMORY[0x227666FE4](v151);
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  }
  if (v79)
    v106 = a2;
  else
    v106 = 1;
  if (SHIBYTE(v142) < 0)
  {
    operator delete((void *)v141);
    if ((v106 & 1) != 0)
      goto LABEL_182;
  }
  else if ((v106 & 1) != 0)
  {
    goto LABEL_182;
  }
  xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v143);
  v158 = 4;
  v107 = (_QWORD *)std::ostream::operator<<();
  v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" groups are loaded from ", 24);
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = &v139;
  else
    v109 = (std::string *)v139.__r_.__value_.__r.__words[0];
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v110 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  else
    v110 = v139.__r_.__value_.__l.__size_;
  v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v109, v110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)".group", 6);
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v143);
LABEL_182:
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v112 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  else
    v112 = v139.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)v143, v112 + 12);
  if (v143[23] >= 0)
    v113 = v143;
  else
    v113 = *(_BYTE **)v143;
  if (v112)
  {
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &v139;
    else
      v114 = (std::string *)v139.__r_.__value_.__r.__words[0];
    memmove(v113, v114, v112);
  }
  strcpy(&v113[v112], ".base_margin");
  v115 = xgboost::MetaTryLoadFloatInfo(v143, *(char ***)(v74 + 80)) & (a2 ^ 1);
  if ((v143[23] & 0x80000000) == 0)
  {
    if (!v115)
      goto LABEL_204;
LABEL_197:
    xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v143);
    v158 = 4;
    v116 = (_QWORD *)std::ostream::operator<<();
    v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)" base_margin are loaded from ", 29);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v118 = &v139;
    else
      v118 = (std::string *)v139.__r_.__value_.__r.__words[0];
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v119 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    else
      v119 = v139.__r_.__value_.__l.__size_;
    v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v118, v119);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)".base_margin", 12);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v143);
    goto LABEL_204;
  }
  operator delete(*(void **)v143);
  if (v115)
    goto LABEL_197;
LABEL_204:
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  else
    v121 = v139.__r_.__value_.__l.__size_;
  v122 = v143;
  std::string::basic_string[abi:ne180100]((uint64_t)v143, v121 + 7);
  if (v143[23] < 0)
    v122 = *(_BYTE **)v143;
  if (v121)
  {
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &v139;
    else
      v123 = (std::string *)v139.__r_.__value_.__r.__words[0];
    memmove(v122, v123, v121);
  }
  strcpy(&v122[v121], ".weight");
  v124 = xgboost::MetaTryLoadFloatInfo(v143, *(char ***)(v74 + 72)) & (a2 ^ 1);
  if ((v143[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v143);
    if (!v124)
      goto LABEL_225;
  }
  else if (!v124)
  {
    goto LABEL_225;
  }
  xgboost::BaseLogger::BaseLogger((xgboost::BaseLogger *)v143);
  v158 = 4;
  v125 = (_QWORD *)std::ostream::operator<<();
  v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)" weights are loaded from ", 25);
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v127 = &v139;
  else
    v127 = (std::string *)v139.__r_.__value_.__r.__words[0];
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  else
    v128 = v139.__r_.__value_.__l.__size_;
  v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)".weight", 7);
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v143);
LABEL_225:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  return v63;
}

void sub_220E8F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t __str, uint64_t __str_8, uint64_t __str_16, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a42 < 0)
    operator delete(__p);
  if (a49 < 0)
    operator delete(a44);
  _Unwind_Resume(a1);
}

void xgboost::data::FileAdapter::~FileAdapter(xgboost::data::FileAdapter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24E6B9710;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x227667068](v2, 0x1060C40C2E02434);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24E6B9710;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x227667068](v2, 0x1060C40C2E02434);
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::fileiter::Reset(xgboost::data::fileiter *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  char v11;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
      goto LABEL_5;
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_5;
  }
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/file_iterator.h");
  v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v11);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !type_.empty()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v11);
LABEL_5:
  v3 = (char *)this;
  if (*((char *)this + 23) < 0)
    v3 = *(char **)this;
  v4 = (char *)this + 32;
  if (*((char *)this + 55) < 0)
    v4 = *(char **)v4;
  dmlc::data::CreateParser_<unsigned int,float>(v3, *((unsigned int *)this + 6), *((unsigned int *)this + 7), v4);
  v6 = v5;
  result = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_220E8FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::fileiter::Next(xgboost::data::fileiter *this, void *a2)
{
  uint64_t v3;
  uint64_t result;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  _QWORD *v20;
  unsigned int **v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  char i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int **v30;
  std::string::const_iterator v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  void **v54;
  unsigned int *v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string *Entry;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int *v78;
  std::string v79;
  void *v80[2];
  char v81;
  std::string v82;
  std::string v83;
  void *__p[2];
  uint64_t v85;
  _QWORD v86[3];
  _QWORD v87[3];
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unsigned int *v92[2];
  char v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  _BYTE v98[24];
  _QWORD v99[3];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 8);
  if (!v3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v71);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/file_iterator.h");
    v69 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v71);
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: parser_", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v71);
    v3 = *((_QWORD *)this + 8);
  }
  result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3 + 24))(v3, a2);
  if ((_DWORD)result)
  {
    v5 = (__int128 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[2];
    *(_OWORD *)((char *)this + 120) = v5[3];
    *(_OWORD *)((char *)this + 104) = v8;
    *(_OWORD *)((char *)this + 88) = v7;
    *(_OWORD *)((char *)this + 72) = v6;
    v9 = *((_QWORD *)this + 9);
    v10 = *((_QWORD *)this + 10);
    v63 = __CFADD__(v9, 1);
    v11 = v9 + 1;
    v12 = v63;
    if (!v10 && (v12 & 1) == 0)
      goto LABEL_84;
    v73 = v11;
    v74 = v10;
    v77 = -1;
    v71 = 1;
    v72 = v11;
    v75 = v10;
    v76 = v11;
    memset(&v79, 0, sizeof(v79));
    *((_QWORD *)&v97 + 1) = 0x300000000;
    *(_QWORD *)&v97 = &off_24E6BE1D0;
    *(_QWORD *)&v98[8] = 0;
    *(_QWORD *)&v98[16] = 0;
    *(_QWORD *)v98 = &v98[8];
    v13 = operator new();
    v14 = v13;
    *(_QWORD *)(v13 + 8) = 0x300000000;
    v15 = (unsigned int *)(v13 + 8);
    *(_QWORD *)v13 = &off_24E6BE1D0;
    v16 = *(_QWORD *)&v98[8];
    *(_QWORD *)(v13 + 16) = *(_QWORD *)v98;
    *(_QWORD *)(v13 + 24) = v16;
    v17 = *(_QWORD *)&v98[16];
    *(_QWORD *)&v98[8] = 0;
    *(_QWORD *)&v98[16] = 0;
    *(_QWORD *)(v13 + 32) = v17;
    *(_QWORD *)v98 = &v98[8];
    if (!v17)
      v16 = v13;
    *(_QWORD *)(v16 + 16) = v13 + 24;
    v78 = (unsigned int *)v13;
    do
      v18 = __ldxr(v15);
    while (__stxr(v18 + 1, v15));
    *(_QWORD *)&v97 = &off_24E6BE1D0;
    std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v98, *(_QWORD **)&v98[8]);
    std::vector<xgboost::Json>::vector(&v95, 2uLL);
    *((_QWORD *)&v97 + 1) = 0x400000000;
    *(_QWORD *)&v97 = off_24E6BE218;
    *(_OWORD *)v98 = v95;
    *(_QWORD *)&v98[16] = v96;
    v95 = 0uLL;
    v96 = 0;
    std::string::basic_string[abi:ne180100]<0>(v92, "data");
    v19 = (uint64_t *)(*(uint64_t (**)(uint64_t, unsigned int **))(*(_QWORD *)v14 + 24))(v14, v92);
    xgboost::Json::operator=(v19, (uint64_t)&v97);
    if (v94 < 0)
      operator delete(v92[0]);
    *(_QWORD *)&v97 = off_24E6BE218;
    v92[0] = (unsigned int *)v98;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
    v92[0] = (unsigned int *)&v95;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)v92);
    *((_QWORD *)&v95 + 1) = 0x200000000;
    *(_QWORD *)&v95 = &off_24E6BE3A8;
    v96 = v10;
    std::string::basic_string[abi:ne180100]<0>(&v97, "data");
    v20 = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, &v97);
    v21 = (unsigned int **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 32))(*v20, 0);
    xgboost::Json::operator=(v21, (uint64_t)&v95);
    if ((v98[7] & 0x80000000) != 0)
      operator delete((void *)v97);
    v92[1] = (unsigned int *)0x500000000;
    v92[0] = (unsigned int *)&off_24E6BE468;
    v93 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v97, "data");
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, &v97);
    v23 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v22 + 32))(*v22, 1);
    xgboost::Json::operator=(v23, (uint64_t)v92);
    if ((v98[7] & 0x80000000) != 0)
      operator delete((void *)v97);
    std::vector<xgboost::Json>::vector(&v90, 1uLL);
    std::vector<xgboost::Json>::vector(&v88, 1uLL);
    v24 = 0;
    for (i = 1; (i & 1) != 0; i = 0)
    {
      v26 = *(&v71 + v24 + 1);
      v87[1] = 0x200000000;
      v87[0] = &off_24E6BE3A8;
      v87[2] = v26;
      xgboost::Json::operator=((unsigned int **)&v90[v24], (uint64_t)v87);
      v27 = 8 * *(&v71 + v24);
      v86[1] = 0x200000000;
      v86[0] = &off_24E6BE3A8;
      v86[2] = v27;
      xgboost::Json::operator=((unsigned int **)&v88[v24], (uint64_t)v86);
      v24 = 1;
    }
    *((_QWORD *)&v97 + 1) = 0x400000000;
    *(_QWORD *)&v97 = off_24E6BE218;
    memset(v98, 0, sizeof(v98));
    std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v98, v90, v91, v91 - v90);
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    v28 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 24))(v14, __p);
    xgboost::Json::operator=(v28, (uint64_t)&v97);
    if (SHIBYTE(v85) < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v97 = off_24E6BE218;
    __p[0] = v98;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    *((_QWORD *)&v97 + 1) = 0x400000000;
    *(_QWORD *)&v97 = off_24E6BE218;
    memset(v98, 0, sizeof(v98));
    std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v98, v88, v89, v89 - v88);
    std::string::basic_string[abi:ne180100]<0>(__p, "strides");
    v29 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 24))(v14, __p);
    xgboost::Json::operator=(v29, (uint64_t)&v97);
    if (SHIBYTE(v85) < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v97 = off_24E6BE218;
    __p[0] = v98;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[1] = (void *)0x200000000;
    __p[0] = &off_24E6BE3A8;
    v85 = 3;
    std::string::basic_string[abi:ne180100]<0>(&v97, "version");
    v30 = (unsigned int **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, &v97);
    xgboost::Json::operator=(v30, (uint64_t)__p);
    if ((v98[7] & 0x80000000) != 0)
      operator delete((void *)v97);
    std::to_string(&v82, 8uLL);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v82;
    else
      v31.__i_ = (std::__wrap_iter<const char *>::iterator_type)v82.__r_.__value_.__r.__words[0];
    std::string::insert(&v82, v31, 117);
    v83 = v82;
    memset(&v82, 0, sizeof(v82));
    v32 = std::string::insert(&v83, 0, "<");
    v33 = v32->__r_.__value_.__r.__words[0];
    v99[0] = v32->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v99 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
    v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)&v97 + 1) = 0;
    *(_QWORD *)&v97 = off_24E6BE2B8;
    *(_QWORD *)&v98[15] = *(_QWORD *)((char *)v99 + 7);
    *(_QWORD *)v98 = v33;
    *(_QWORD *)&v98[8] = v99[0];
    v98[23] = v34;
    v99[0] = 0;
    *(_QWORD *)((char *)v99 + 7) = 0;
    std::string::basic_string[abi:ne180100]<0>(v80, "typestr");
    v35 = (uint64_t *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 24))(v14, v80);
    xgboost::Json::operator=(v35, (uint64_t)&v97);
    if (v81 < 0)
      operator delete(v80[0]);
    *(_QWORD *)&v97 = off_24E6BE2B8;
    if ((v98[23] & 0x80000000) != 0)
      operator delete(*(void **)v98);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    *(_QWORD *)&v97 = &v88;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    *(_QWORD *)&v97 = &v90;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
    xgboost::Json::Dump(&v78, &v79, 16);
    do
    {
      v36 = __ldxr(v15);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v15));
    if (!v37)
    {
      __dmb(9u);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v97 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
    *(_QWORD *)v98 = *((_QWORD *)&v79.__r_.__value_.__l + 2);
    v38 = (void **)((char *)this + 136);
    if (*((char *)this + 159) < 0)
      operator delete(*v38);
    *(_OWORD *)v38 = v97;
    *((_QWORD *)this + 19) = *(_QWORD *)v98;
    v39 = *((_QWORD *)this + 16);
    v40 = *((_QWORD *)this + 9);
    v41 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v40);
    if (!v39)
    {
      if (v41)
        goto LABEL_84;
    }
    v73 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v40);
    v74 = v39;
    v77 = -1;
    v71 = 1;
    v72 = v41;
    v75 = v39;
    v76 = v41;
    v97 = 0uLL;
    *(_QWORD *)v98 = 0;
    xgboost::linalg::ArrayInterface<float,1>(v92, (uint64_t)&v71);
    xgboost::Json::Dump(v92, (std::string *)&v97, 16);
    v42 = v92[0];
    if (v92[0])
    {
      v43 = v92[0] + 2;
      do
      {
        v44 = __ldxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    v95 = v97;
    v96 = *(_QWORD *)v98;
    v46 = (void **)((char *)this + 160);
    if (*((char *)this + 183) < 0)
      operator delete(*v46);
    *(_OWORD *)v46 = v95;
    *((_QWORD *)this + 22) = v96;
    v47 = *((_QWORD *)this + 15);
    v48 = *((_QWORD *)this + 9);
    v49 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v48);
    if (!v47)
    {
      if (v49)
LABEL_84:
        std::terminate();
    }
    v73 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v48);
    v74 = v47;
    v77 = -1;
    v71 = 1;
    v72 = v49;
    v75 = v47;
    v76 = v49;
    v97 = 0uLL;
    *(_QWORD *)v98 = 0;
    xgboost::linalg::ArrayInterface<unsigned int,1>(v92, (uint64_t)&v71);
    xgboost::Json::Dump(v92, (std::string *)&v97, 16);
    v50 = v92[0];
    if (v92[0])
    {
      v51 = v92[0] + 2;
      do
      {
        v52 = __ldxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
      }
    }
    v95 = v97;
    v96 = *(_QWORD *)v98;
    v54 = (void **)((char *)this + 184);
    if (*((char *)this + 207) < 0)
      operator delete(*v54);
    *(_OWORD *)v54 = v95;
    *((_QWORD *)this + 25) = v96;
    v55 = (unsigned int *)*((_QWORD *)this + 15);
    v56 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * *((_QWORD *)this + 9));
    if (v56 >= 2)
    {
      v58 = v55 + 1;
      v57 = *v55;
      v59 = 4 * v56 - 4;
      v60 = v55 + 1;
      do
      {
        v62 = *v60++;
        v61 = v62;
        v63 = v57 >= v62;
        if (v57 <= v62)
          v57 = v61;
        if (!v63)
          v55 = v58;
        v58 = v60;
        v59 -= 4;
      }
      while (v59);
    }
    v64 = *v55;
    if (*((char *)this + 159) < 0)
      v38 = (void **)*v38;
    if (*((char *)this + 207) < 0)
      v54 = (void **)*v54;
    if (*((char *)this + 183) < 0)
      v46 = (void **)*v46;
    XGProxyDMatrixSetDataCSR(*((xgboost::data::DMatrixProxy ***)this + 7), (char *)v38, (char *)v54, (char *)v46, v64 + 1);
    v65 = *((_QWORD *)this + 11);
    if (v65)
      XGDMatrixSetDenseInfo(*((_QWORD **)this + 7), (uint64_t)"label", v65, *((_QWORD *)this + 9), 1);
    v66 = *((_QWORD *)this + 13);
    if (v66)
      XGDMatrixSetDenseInfo(*((_QWORD **)this + 7), (uint64_t)"qid", v66, *((_QWORD *)this + 9), 1);
    v67 = *((_QWORD *)this + 12);
    if (v67)
      XGDMatrixSetDenseInfo(*((_QWORD **)this + 7), (uint64_t)"weight", v67, *((_QWORD *)this + 9), 1);
    return 1;
  }
  return result;
}

void sub_220E9057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a10);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL xgboost::MetaTryLoadFloatInfo(char *a1, char **a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v17;
  _BYTE v18[120];
  uint64_t v19;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v3 = dmlc::Stream::Create((dmlc::Stream *)a1, "r", (const char *)1);
  if (v3)
  {
    dmlc::istream::istream((uint64_t)v18, v3, 0x400uLL);
    a2[1] = *a2;
    v17 = 0;
    while (1)
    {
      v4 = (_QWORD *)MEMORY[0x227666D20](v18, &v17);
      if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
        break;
      v6 = a2[1];
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = *a2;
        v9 = (v6 - *a2) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = v5 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v12);
          v8 = *a2;
          v6 = a2[1];
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = v17;
        v7 = v14 + 4;
        while (v6 != v8)
        {
          v15 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v6 = v17;
        v7 = v6 + 4;
      }
      a2[1] = v7;
    }
    MEMORY[0x227666FE4](&v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return v3 != 0;
}

void sub_220E90A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void xgboost::SparsePage::GetTranspose(uint64_t **this@<X0>, int a2@<W1>, int a3@<W2>, char ***a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char **v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  std::string *Entry;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  void *ptr;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  char *v54;
  std::string *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  int v69;
  std::exception_ptr v70;
  std::exception_ptr v71;
  std::mutex v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v65 = *(_OWORD *)xgboost::SparsePage::SparsePage(a4);
  v66 = 0u;
  v67 = 0u;
  xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitBudget(&v65, a2, a3);
  v8 = **this;
  v7 = (*this)[1];
  if (v7 == v8)
    v9 = 0;
  else
    v9 = ((v7 - v8) >> 3) - 1;
  v10 = *this[1];
  v68 = 1;
  v69 = a3;
  if (a3 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v71);
    if (v71.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v37 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: ", 14);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"n_threads >= 1", 14);
      v40 = *((char *)v71.__ptr_ + 23);
      v41 = v40 >= 0 ? v71.__ptr_ : *(void **)v71.__ptr_;
      v42 = v40 >= 0 ? *((unsigned __int8 *)v71.__ptr_ + 23) : *((_QWORD *)v71.__ptr_ + 1);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      ptr = v71.__ptr_;
      v71.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v71, (uint64_t)ptr);
    }
  }
  v71.__ptr_ = 0;
  v72.__m_.__sig = 850045863;
  memset(v72.__m_.__opaque, 0, sizeof(v72.__m_.__opaque));
  if (v9 >= 1)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(v8 + 8 * v11);
      v13 = *(_QWORD *)(v8 + 8 * v11 + 8);
      if (!v10 && v13 != v12)
        break;
      if (v13 != v12)
      {
        v14 = v13 - v12;
        v15 = (unsigned int *)(v10 + 8 * v12);
        do
        {
          v16 = *v15;
          v15 += 2;
          xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget((uint64_t *)v66, *((uint64_t *)&v67 + 1), v16);
          --v14;
        }
        while (v14);
      }
      if (++v11 == v9)
        goto LABEL_13;
    }
LABEL_55:
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v71);
  std::mutex::~mutex(&v72);
  std::exception_ptr::~exception_ptr(&v71);
  xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::InitStorage((uint64_t *)&v65);
  v68 = 1;
  v69 = a3;
  if (a3 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v71);
    if (v71.__ptr_)
    {
      v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"n_threads >= 1", 14);
      v49 = *((char *)v71.__ptr_ + 23);
      v50 = v49 >= 0 ? v71.__ptr_ : *(void **)v71.__ptr_;
      v51 = v49 >= 0 ? *((unsigned __int8 *)v71.__ptr_ + 23) : *((_QWORD *)v71.__ptr_ + 1);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v53 = v71.__ptr_;
      v71.__ptr_ = 0;
      if (v53)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v71, (uint64_t)v53);
    }
  }
  v71.__ptr_ = 0;
  v72.__m_.__sig = 850045863;
  memset(v72.__m_.__opaque, 0, sizeof(v72.__m_.__opaque));
  if (v9 >= 1)
  {
    v17 = 0;
    v19 = (uint64_t *)*((_QWORD *)&v65 + 1);
    v18 = (uint64_t *)v66;
    do
    {
      v20 = (uint64_t *)(v8 + 8 * v17);
      v22 = *v20;
      v21 = v20[1];
      v23 = v21 - *v20;
      if (!v10)
      {
        if (v23)
          goto LABEL_55;
      }
      if (v21 != v22)
      {
        v24 = *v18;
        v25 = *v19;
        v26 = (int *)(v10 + 4 + 8 * v22);
        do
        {
          v27 = *v26;
          v28 = *((_DWORD *)this + 4);
          v29 = *(v26 - 1) - *((_QWORD *)&v67 + 1);
          v30 = *(_QWORD *)(v24 + 8 * v29);
          *(_QWORD *)(v24 + 8 * v29) = v30 + 1;
          LODWORD(v29) = v28 + v17;
          v31 = (_DWORD *)(v25 + 8 * v30);
          *v31 = v29;
          v31[1] = v27;
          v26 += 2;
          --v23;
        }
        while (v23);
      }
    }
    while (++v17 != v9);
  }
  dmlc::OMPException::Rethrow(&v71);
  std::mutex::~mutex(&v72);
  std::exception_ptr::~exception_ptr(&v71);
  v32 = *a4;
  if (this[1][1] == *this[1])
  {
    v34 = a2 + 1;
    v35 = v34;
    v71.__ptr_ = 0;
    std::vector<unsigned long>::resize((uint64_t)v32, v34, &v71);
    v54 = **a4;
    v33 = (*a4)[1] - v54;
    if (v33 >= 1)
      bzero(v54, 8 * (((unint64_t)v33 >> 3) - ((unint64_t)v33 > 7)) + 8);
  }
  else
  {
    v33 = v32[1] - *v32;
    v34 = a2 + 1;
    v35 = a2 + 1;
  }
  v70.__ptr_ = (void *)(v33 >> 3);
  v69 = v34;
  if (v33 >> 3 != v35)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v71);
    if (v71.__ptr_)
    {
      v55 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      dmlc::LogMessageFatal::Entry::Init(v55, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
      v56 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v70);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: ", 14);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"transpose.offset.Size() == num_columns + 1", 42);
      v59 = *((char *)v71.__ptr_ + 23);
      if (v59 >= 0)
        v60 = v71.__ptr_;
      else
        v60 = *(void **)v71.__ptr_;
      if (v59 >= 0)
        v61 = *((unsigned __int8 *)v71.__ptr_ + 23);
      else
        v61 = *((_QWORD *)v71.__ptr_ + 1);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v60, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v70);
      v63 = v71.__ptr_;
      v71.__ptr_ = 0;
      if (v63)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v71, (uint64_t)v63);
    }
  }
  v71.__ptr_ = &v66;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
}

void sub_220E90FBC()
{
  __cxa_end_catch();
  JUMPOUT(0x220E90FFCLL);
}

void sub_220E90FC8()
{
  __cxa_end_catch();
  JUMPOUT(0x220E90FFCLL);
}

void sub_220E90FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20)
{
  uint64_t v21;

  v21 = a20;
  a20 = 0;
  if (v21)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a20, v21);
  a19 = a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a19);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(a10 + 8);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(a10);
  _Unwind_Resume(a1);
}

void sub_220E90FEC()
{
  JUMPOUT(0x220E91000);
}

void sub_220E90FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::mutex *v20;

  std::mutex::~mutex(v20);
  std::exception_ptr::~exception_ptr(&a20);
  a19 = a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(a10 + 1);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(a10);
  _Unwind_Resume(a1);
}

void sub_220E91014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v20;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  v20 = a20;
  a20 = 0;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  JUMPOUT(0x220E91074);
}

void sub_220E91028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  uint64_t v20;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a19);
  v20 = a20;
  a20 = 0;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100](&a20);
  JUMPOUT(0x220E91074);
}

void sub_220E9103C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E91048);
}

void sub_220E91060(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E91098);
}

BOOL xgboost::SparsePage::IsIndicesSorted(uint64_t **this, int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::vector<int>::pointer begin;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<int> v37;
  int v38;
  int v39;
  std::vector<int>::value_type __x[2];
  std::mutex v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t **)*this;
  v4 = this[1];
  __x[0] = 0;
  std::vector<int>::vector(&v37, a2, __x);
  v6 = **this;
  v7 = (*this)[1];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) >> 3) - 1;
  v38 = 1;
  v39 = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"n_threads >= 1", 14);
      v28 = *(char *)(*(_QWORD *)__x + 23);
      v29 = v28 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v30 = v28 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
      v32 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v32)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v32);
    }
  }
  *(_QWORD *)__x = 0;
  v41.__m_.__sig = 850045863;
  memset(v41.__m_.__opaque, 0, sizeof(v41.__m_.__opaque));
  if (v8)
  {
    v9 = 0;
    v10 = *v5;
    v11 = *v4;
    begin = v37.__begin_;
    v13 = *v37.__begin_;
    v14 = **v5;
    do
    {
      v15 = v10[++v9];
      if (v14 != v15)
      {
        v17 = (unsigned int *)(v11 + 8 * v14);
        v18 = 8 * v15 - 8 * v14 - 8;
        while (v18)
        {
          v16 = v17 + 2;
          v19 = v17[2];
          v20 = *v17;
          v18 -= 8;
          v17 += 2;
          if (v19 < v20)
            goto LABEL_12;
        }
      }
      v16 = (_DWORD *)(v11 + 8 * v15);
LABEL_12:
      if (v16 == (_DWORD *)(v11 + 8 * v15))
        ++v13;
      *begin = v13;
      v14 = v15;
    }
    while (v9 != v8);
  }
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(&v41);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v37.__begin_ == v37.__end_)
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    v22 = v37.__begin_;
    do
    {
      v23 = *v22++;
      v21 += v23;
    }
    while (v22 != v37.__end_);
  }
  v34 = **this;
  v33 = (*this)[1];
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  v35 = ((v33 - v34) >> 3) - 1;
  if (v33 == v34)
    v35 = 0;
  return v21 == v35;
}

void sub_220E91308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, char a13, std::exception_ptr a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_220E91370(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E91368);
}

void xgboost::SparsePage::SortIndices(uint64_t **this, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::string *Entry;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  void *ptr;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  std::exception_ptr v25;
  std::mutex v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = this[1];
  v5 = **this;
  v4 = (*this)[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) >> 3) - 1;
  LODWORD(v24) = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v25);
    if (v25.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"n_threads >= 1", 14);
      v19 = *((char *)v25.__ptr_ + 23);
      v20 = v19 >= 0 ? v25.__ptr_ : *(void **)v25.__ptr_;
      v21 = v19 >= 0 ? *((unsigned __int8 *)v25.__ptr_ + 23) : *((_QWORD *)v25.__ptr_ + 1);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
      ptr = v25.__ptr_;
      v25.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t)ptr);
    }
  }
  v25.__ptr_ = 0;
  v26.__m_.__sig = 850045863;
  memset(v26.__m_.__opaque, 0, sizeof(v26.__m_.__opaque));
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = (uint64_t *)(*v2 + 8 * i);
      v10 = *v8;
      v9 = v8[1];
      v11 = *v3 + 8 * v10;
      v12 = (uint64_t *)(*v3 + 8 * v9);
      v24 = (uint64_t (*)(uint64_t *, uint64_t *))xgboost::Entry::CmpIndex;
      v13 = 126 - 2 * __clz(((uint64_t)v12 - v11) >> 3);
      if (v9 == v10)
        v14 = 0;
      else
        v14 = v13;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v11, v12, &v24, v14, 1);
    }
  }
  dmlc::OMPException::Rethrow(&v25);
  std::mutex::~mutex(&v26);
  std::exception_ptr::~exception_ptr(&v25);
}

void sub_220E915C8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::exception_ptr v3;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_220E91610(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E9161CLL);
}

void xgboost::SparsePage::SortRows(uint64_t **this, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *ptr;
  BOOL (*v22)(uint64_t, uint64_t);
  std::exception_ptr v23;
  std::mutex v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = this[1];
  v5 = **this;
  v4 = (*this)[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) >> 3) - 1;
  LODWORD(v22) = a2;
  if (a2 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v23);
    if (v23.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"n_threads >= 1", 14);
      v17 = *((char *)v23.__ptr_ + 23);
      v18 = v17 >= 0 ? v23.__ptr_ : *(void **)v23.__ptr_;
      v19 = v17 >= 0 ? *((unsigned __int8 *)v23.__ptr_ + 23) : *((_QWORD *)v23.__ptr_ + 1);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
      ptr = v23.__ptr_;
      v23.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v23, (uint64_t)ptr);
    }
  }
  v23.__ptr_ = 0;
  v24.__m_.__sig = 850045863;
  memset(v24.__m_.__opaque, 0, sizeof(v24.__m_.__opaque));
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = (unint64_t *)(*v2 + 8 * i);
      v9 = *v8;
      v10 = v8[1];
      if (v9 < v10)
      {
        v11 = *v3 + 8 * v9;
        v12 = (uint64_t *)(*v3 + 8 * v10);
        v22 = xgboost::Entry::CmpValue;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v11, v12, (uint64_t (**)(uint64_t *, uint64_t *))&v22, 126 - 2 * __clz(((uint64_t)v12 - v11) >> 3), 1);
      }
    }
  }
  dmlc::OMPException::Rethrow(&v23);
  std::mutex::~mutex(&v24);
  std::exception_ptr::~exception_ptr(&v23);
}

void sub_220E91894(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::exception_ptr v3;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_220E918DC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220E918E8);
}

void xgboost::SparsePage::Push(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = (const void **)a2[1];
  v8 = *(_QWORD *)((*a1)[1] - 8);
  std::vector<xgboost::Entry>::resize((uint64_t)v5, v8 + (((_BYTE *)v7[1] - (_BYTE *)*v7) >> 3));
  v9 = *v5;
  v10 = v5[1] == *v5 || v9 == 0;
  if (!v10)
  {
    v11 = *v7;
    if (v7[1] != *v7 && v11 != 0)
      memcpy((void *)(v9 + 8 * v8), v11, a2[1][1] - *a2[1]);
  }
  v13 = **a2;
  v14 = (*a2)[1];
  v15 = ((v14 - v13) >> 3) - 1;
  v10 = v14 == v13;
  v16 = **a1;
  v17 = (*a1)[1];
  if (v10)
    v15 = 0;
  v18 = v17 - v16;
  std::vector<unsigned long>::resize((uint64_t)v4, v15 + ((v17 - v16) >> 3));
  v20 = **a2;
  v19 = (*a2)[1];
  if (v19 != v20)
  {
    v21 = ((v19 - v20) >> 3) - 1;
    if ((v19 - v20) >> 3 != 1)
    {
      v22 = 0;
      v23 = *v4 + 8 * (v18 >> 3);
      v24 = *v6 + 8;
      do
      {
        *(_QWORD *)(v23 + 8 * v22) = *(_QWORD *)(v24 + 8 * v22) + v8;
        ++v22;
      }
      while (v21 > v22);
    }
  }
}

void std::vector<xgboost::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<xgboost::Entry>::__append((void **)a1, a2 - v2);
  }
}

void xgboost::SparsePage::PushCSC(xgboost::SparsePage *this, const xgboost::SparsePage *a2)
{
  char *v2;
  uint64_t *v3;
  void **v4;
  _BYTE *v5;
  char *v6;
  void **v7;
  char *v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  std::string *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  size_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *__p[2];
  void *v80;
  void *v81[2];
  uint64_t v82;
  unint64_t v83;

  v2 = *(char **)this;
  v3 = *(uint64_t **)a2;
  v4 = (void **)*((_QWORD *)a2 + 1);
  v6 = (char *)*v4;
  v5 = v4[1];
  if (*v4 != v5)
  {
    v7 = (void **)*((_QWORD *)this + 1);
    v8 = (char *)*v7;
    if (*v7 != v7[1])
    {
      __p[0] = (void *)((uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3);
      v83 = (v3[1] - *v3) >> 3;
      if (__p[0] != (void *)v83)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v81);
        if (v81[0])
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
          v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"self_offset.size() == other_offset.size()", 41);
          v13 = *((char *)v81[0] + 23);
          v14 = v13 >= 0 ? v81[0] : *(void **)v81[0];
          v15 = v13 >= 0 ? *((unsigned __int8 *)v81[0] + 23) : *((_QWORD *)v81[0] + 1);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"self_data.size(): ", 18);
          v18 = (_QWORD *)std::ostream::operator<<();
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"other_data.size(): ", 19);
          std::ostream::operator<<();
          std::ostream::flush();
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
          v20 = v81[0];
          v81[0] = 0;
          if (v20)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v81, (uint64_t)v20);
        }
      }
      std::vector<unsigned long>::vector(v81, (v3[1] - *v3) >> 3);
      *(_QWORD *)v81[0] = 0;
      std::vector<xgboost::Entry>::vector(__p, (((_BYTE *)v4[1] - (_BYTE *)*v4) >> 3) + (((_BYTE *)v7[1] - (_BYTE *)*v7) >> 3));
      v21 = (v3[1] - *v3) >> 3;
      v83 = 0;
      v78 = 1;
      v22 = v21 - 1;
      if (v21 != 1)
      {
        v23 = 0;
        do
        {
          v24 = *(_QWORD **)v2;
          v25 = (uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3;
          if (v25 <= v23)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v26 = v23 + 1;
          if (v25 <= v23 + 1)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v27 = v24[v23];
          v28 = v24[v23 + 1];
          v76 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if (v83 > v76)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>(&v77);
            if (v77)
            {
              v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
              v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"beg <= data.size()", 18);
              v33 = *(char *)(v77 + 23);
              v34 = v33 >= 0 ? v77 : *(_QWORD *)v77;
              v35 = v33 >= 0 ? *(unsigned __int8 *)(v77 + 23) : *(_QWORD *)(v77 + 8);
              v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
              v37 = v77;
              v77 = 0;
              if (v37)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, v37);
            }
          }
          v38 = v28 - v27;
          if (__p[1] == __p[0])
            v39 = 0;
          else
            v39 = (char *)__p[0];
          v40 = &v39[8 * v83];
          if (v7[1] == *v7)
            v41 = 0;
          else
            v41 = (char *)*v7;
          memcpy(v40, &v41[8 * v27], 8 * v38);
          v42 = v83 + v38;
          v83 += v38;
          v43 = (char *)*v3;
          v44 = (v3[1] - *v3) >> 3;
          if (v44 <= v23)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          if (v44 <= v26)
            goto LABEL_85;
          v45 = *(_QWORD *)&v43[8 * v23];
          v46 = *(_QWORD *)&v43[8 * v23 + 8];
          v76 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if (v42 > v76)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>(&v77);
            if (v77)
            {
              v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ", 14);
              v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"beg <= data.size()", 18);
              v51 = *(char *)(v77 + 23);
              v52 = v51 >= 0 ? v77 : *(_QWORD *)v77;
              v53 = v51 >= 0 ? *(unsigned __int8 *)(v77 + 23) : *(_QWORD *)(v77 + 8);
              v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
              v55 = v77;
              v77 = 0;
              if (v55)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, v55);
            }
          }
          v56 = v46 - v45;
          if (__p[1] == __p[0])
            v57 = 0;
          else
            v57 = (char *)__p[0];
          v58 = &v57[8 * v83];
          if (v4[1] == *v4)
            v59 = 0;
          else
            v59 = (char *)*v4;
          memcpy(v58, &v59[8 * v45], 8 * v56);
          v83 += v56;
          v76 = ((char *)v81[1] - (char *)v81[0]) >> 3;
          if (v78 >= v76)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>(&v77);
            if (v77)
            {
              v60 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              dmlc::LogMessageFatal::Entry::Init(v60, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/data.cc");
              v61 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Check failed: ", 14);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"ptr < offset.size()", 19);
              v64 = *(char *)(v77 + 23);
              v65 = v64 >= 0 ? v77 : *(_QWORD *)v77;
              v66 = v64 >= 0 ? *(unsigned __int8 *)(v77 + 23) : *(_QWORD *)(v77 + 8);
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
              v68 = v77;
              v77 = 0;
              if (v68)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v77, v68);
            }
          }
          if (v78 >= ((char *)v81[1] - (char *)v81[0]) >> 3)
LABEL_85:
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          *((_QWORD *)v81[0] + v78++) = v83;
          v23 = v26;
        }
        while (v26 != v22);
      }
      v69 = *v7;
      if (*v7)
      {
        v7[1] = v69;
        operator delete(v69);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      *(_OWORD *)v7 = *(_OWORD *)__p;
      v7[2] = v80;
      __p[0] = 0;
      __p[1] = 0;
      v80 = 0;
      v70 = *(_QWORD **)v2;
      if (*(_QWORD *)v2)
      {
        *((_QWORD *)v2 + 1) = v70;
        operator delete(v70);
        *(_QWORD *)v2 = 0;
        *((_QWORD *)v2 + 1) = 0;
        *((_QWORD *)v2 + 2) = 0;
        v70 = __p[0];
      }
      *(_OWORD *)v2 = *(_OWORD *)v81;
      *((_QWORD *)v2 + 2) = v82;
      v81[0] = 0;
      v81[1] = 0;
      v82 = 0;
      if (v70)
      {
        __p[1] = v70;
        operator delete(v70);
        if (v81[0])
        {
          v81[1] = v81[0];
          operator delete(v81[0]);
        }
      }
      return;
    }
    if (v7 != v4)
    {
      v71 = v5 - v6;
      v72 = (v5 - v6) >> 3;
      v73 = (uint64_t)v7[2];
      if (v72 > (v73 - (uint64_t)v8) >> 3)
      {
        if (v8)
        {
          v7[1] = v8;
          operator delete(v8);
          v73 = 0;
          *v7 = 0;
          v7[1] = 0;
          v7[2] = 0;
        }
        if ((v71 & 0x8000000000000000) != 0)
          std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
        v74 = v73 >> 2;
        if (v73 >> 2 <= v72)
          v74 = v72;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        std::vector<xgboost::Json>::__vallocate[abi:ne180100](v7, v75);
        v8 = (char *)v7[1];
      }
      memmove(v8, v6, v71);
      v7[1] = &v8[8 * v72];
    }
  }
  if (v2 != (char *)v3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v2, (char *)*v3, v3[1], (v3[1] - *v3) >> 3);
}

void sub_220E92104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v19;

  v19 = (uint64_t)__p;
  __p = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v19);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Info(xgboost::data::IterativeDeviceDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Ctx(xgboost::data::IterativeDeviceDMatrix *this)
{
  return (uint64_t)this + 216;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::SingleColBlock(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 0;
}

void xgboost::data::IterativeDeviceDMatrix::~IterativeDeviceDMatrix(xgboost::data::IterativeDeviceDMatrix *this)
{
  xgboost::data::IterativeDeviceDMatrix::~IterativeDeviceDMatrix(this);
  JUMPOUT(0x227667068);
}

{
  xgboost::MetaInfo *v2;

  *(_QWORD *)this = &off_24E6B9668;
  v2 = (xgboost::data::IterativeDeviceDMatrix *)((char *)this + 8);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  xgboost::MetaInfo::~MetaInfo(v2);
  xgboost::DMatrix::~DMatrix(this);
}

uint64_t xgboost::data::IterativeDeviceDMatrix::Slice()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for Device DMatrix.", 52);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220E92278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::data::IterativeDeviceDMatrix::GetRowBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E92300(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::IterativeDeviceDMatrix::GetColumnBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::CSCPage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E92388(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

double xgboost::data::IterativeDeviceDMatrix::GetSortedColumnBatches@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v4;
  double result;
  double v6[3];
  char v7;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v7);
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(v6, 0);
  result = v6[0];
  *a1 = *(_OWORD *)v6;
  return result;
}

void sub_220E92410(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

void xgboost::data::IterativeDeviceDMatrix::GetEllpackBatches(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
  v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  v6 = (_QWORD *)operator new();
  v8 = *(_QWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 296);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *v6 = &unk_24E6B9780;
  v6[1] = v8;
  v6[2] = v7;
  xgboost::BatchIterator<xgboost::EllpackPage>::BatchIterator(&v18, (uint64_t)v6);
  v11 = v18;
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = v19;
    *a2 = v11;
    a2[1] = v12;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    *a2 = v18;
    a2[1] = 0;
  }
}

void sub_220E92540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double xgboost::data::IterativeDeviceDMatrix::GetGradientIndex@<D0>(_OWORD *a1@<X8>)
{
  std::string *Entry;
  _QWORD *v3;
  double result;
  double v5[3];
  char v6;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/iterative_device_dmatrix.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not implemented.", 16);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
  xgboost::BatchIterator<xgboost::GHistIndexMatrix>::BatchIterator(v5, 0);
  result = v5[0];
  *a1 = *(_OWORD *)v5;
  return result;
}

void sub_220E925D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v1 - 17));
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::IterativeDeviceDMatrix::EllpackExists(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 1;
}

uint64_t xgboost::data::IterativeDeviceDMatrix::SparsePageExists(xgboost::data::IterativeDeviceDMatrix *this)
{
  return 0;
}

_QWORD *xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &unk_24E6B9780;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::~SimpleBatchIteratorImpl(_QWORD *a1)
{
  *a1 = &unk_24E6B9780;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/simple_batch_iterator.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_ != nullptr", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_220E92734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::operator++(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v6;

  v6 = 0uLL;
  std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100](a1 + 8, &v6);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

BOOL xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::AtEnd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t xgboost::data::SimpleBatchIteratorImpl<xgboost::EllpackPage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

float xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, _QWORD *a2, float a3)
{
  float result;

  switch(*(_BYTE *)(a1 + 65))
  {
    case 0:
      return *(float *)(*(_QWORD *)(a1 + 48) + 4 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
    case 1:
    case 2:
      return *(double *)(*(_QWORD *)(a1 + 48) + 8
                                              * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
    case 3:
      return (float)*(char *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]);
    case 4:
      return (float)*(__int16 *)(*(_QWORD *)(a1 + 48)
                               + 2 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
    case 5:
      return (float)*(int *)(*(_QWORD *)(a1 + 48)
                           + 4 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
    case 6:
      return (float)*(uint64_t *)(*(_QWORD *)(a1 + 48)
                               + 8 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
    case 7:
      LOBYTE(a3) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]);
      goto LABEL_12;
    case 8:
      LOWORD(a3) = *(_WORD *)(*(_QWORD *)(a1 + 48)
                            + 2 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
      goto LABEL_12;
    case 9:
      a3 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
LABEL_12:
      result = (float)LODWORD(a3);
      break;
    case 0xA:
      result = (float)*(unint64_t *)(*(_QWORD *)(a1 + 48)
                                          + 8 * (*(_QWORD *)(*a2 + 16) * a2[1] + *(_QWORD *)(*a2 + 24) * a2[2]));
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

unint64_t xgboost::ArrayInterface<1,true>::DispatchCall<unsigned long xgboost::ArrayInterface<1,true>::operator()<unsigned long,unsigned long &>(unsigned long &)::{lambda(unsigned long const*)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;

  switch(*(_BYTE *)(a1 + 49))
  {
    case 0:
      result = (unint64_t)*(float *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 1:
    case 2:
      result = (unint64_t)*(double *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 3:
      result = *(char *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a2 + 16) * a3);
      break;
    case 4:
      result = *(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 5:
      result = *(int *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 6:
    case 0xA:
      result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 7:
      result = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a2 + 16) * a3);
      break;
    case 8:
      result = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * *(_QWORD *)(a2 + 16) * a3);
      break;
    case 9:
      result = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long>(unsigned long &&)::{lambda(float const*)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float result;

  switch(*(_BYTE *)(a1 + 49))
  {
    case 0:
      return *(float *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
    case 1:
    case 2:
      return *(double *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a2 + 16) * a3);
    case 3:
      return (float)*(char *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a2 + 16) * a3);
    case 4:
      return (float)*(__int16 *)(*(_QWORD *)(a1 + 32) + 2 * *(_QWORD *)(a2 + 16) * a3);
    case 5:
      return (float)*(int *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
    case 6:
      return (float)*(uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a2 + 16) * a3);
    case 7:
      LOBYTE(a4) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a2 + 16) * a3);
      goto LABEL_12;
    case 8:
      LOWORD(a4) = *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * *(_QWORD *)(a2 + 16) * a3);
      goto LABEL_12;
    case 9:
      a4 = *(float *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a2 + 16) * a3);
LABEL_12:
      result = (float)LODWORD(a4);
      break;
    case 0xA:
      result = (float)*(unint64_t *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a2 + 16) * a3);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::data::DataTableAdapterBatch::Line::DTGetValue(uint64_t a1, int a2, uint64_t a3)
{
  float result;
  int v4;
  BOOL v5;
  int v6;
  std::string *Entry;
  _QWORD *v8;
  int v10;
  uint64_t v11;
  char v12;

  switch(a2)
  {
    case 0:
      result = *(float *)(a1 + 4 * a3);
      if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000)
        return NAN;
      return result;
    case 1:
      result = NAN;
      if ((*(_QWORD *)(a1 + 8 * a3) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        return *(double *)(a1 + 8 * a3);
      return result;
    case 2:
      result = 0.0;
      if (*(_BYTE *)(a1 + a3))
        return 1.0;
      return result;
    case 3:
      v4 = *(_DWORD *)(a1 + 4 * a3);
      result = (float)v4;
      v5 = v4 == 0x80000000;
      goto LABEL_16;
    case 4:
      v6 = *(unsigned __int8 *)(a1 + a3);
      result = (float)(char)v6;
      v5 = v6 == 128;
      goto LABEL_16;
    case 5:
      v10 = *(unsigned __int16 *)(a1 + 2 * a3);
      result = (float)(__int16)v10;
      v5 = v10 == 0x8000;
      goto LABEL_16;
    case 6:
      v11 = *(_QWORD *)(a1 + 8 * a3);
      result = (float)v11;
      v5 = v11 == 0x8000000000000000;
LABEL_16:
      if (v5)
        result = NAN;
      break;
    default:
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/adapter.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown data table type.", 24);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
      result = 0.0;
      break;
  }
  return result;
}

void sub_220E92CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::linalg::ArrayInterface<float,1>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int **v13;
  _QWORD *v14;
  uint64_t *v15;
  unsigned int **v16;
  uint64_t v17;
  char i;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int **v23;
  std::string::const_iterator v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  uint64_t *v28;
  void *v29[2];
  char v30;
  std::string v31;
  _QWORD v32[3];
  std::string v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[2];
  char v37;
  _QWORD v38[3];
  void *__p;
  uint64_t *v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  void (**p_p)(xgboost::JsonString *__hidden);
  uint64_t v45;
  _BYTE v46[24];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v45 = 0x300000000;
  p_p = &off_24E6BE1D0;
  *(_QWORD *)&v46[8] = 0;
  *(_QWORD *)&v46[16] = 0;
  *(_QWORD *)v46 = &v46[8];
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v4[1] = 0x300000000;
  v6 = (unsigned int *)(v4 + 1);
  *v4 = &off_24E6BE1D0;
  v7 = *(_QWORD **)&v46[8];
  v4[2] = *(_QWORD *)v46;
  v4[3] = v7;
  v8 = *(_QWORD *)&v46[16];
  *(_QWORD *)&v46[8] = 0;
  *(_QWORD *)&v46[16] = 0;
  v4[4] = v8;
  *(_QWORD *)v46 = &v46[8];
  if (!v8)
    v7 = v4;
  v7[2] = v4 + 3;
  *a1 = v4;
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  p_p = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v46, *(_QWORD **)&v46[8]);
  std::vector<xgboost::Json>::vector(&v42, 2uLL);
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  *(_OWORD *)v46 = v42;
  *(_QWORD *)&v46[16] = v43;
  v42 = 0uLL;
  v43 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "data");
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD *, void **))(*v5 + 24))(v5, &__p);
  xgboost::Json::operator=(v10, (uint64_t)&p_p);
  if (v41 < 0)
    operator delete(__p);
  p_p = off_24E6BE218;
  __p = v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v11 = *(_QWORD *)(a2 + 24);
  v38[1] = 0x200000000;
  v38[0] = &off_24E6BE3A8;
  v38[2] = v11;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "data");
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  v13 = (unsigned int **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 32))(*v12, 0);
  xgboost::Json::operator=(v13, (uint64_t)v38);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  v36[1] = 0x500000000;
  v36[0] = &off_24E6BE468;
  v37 = 1;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "data");
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  v15 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 32))(*v14, 1);
  xgboost::Json::operator=(v15, (uint64_t)v36);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  if ((*(_DWORD *)(a2 + 48) & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&p_p, "stream");
    v16 = (unsigned int **)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
    xgboost::Json::operator=(v16);
    if ((v46[7] & 0x80000000) != 0)
      operator delete(p_p);
  }
  std::vector<xgboost::Json>::vector(&v42, 1uLL);
  std::vector<xgboost::Json>::vector(&__p, 1uLL);
  v17 = 0;
  for (i = 1; (i & 1) != 0; i = 0)
  {
    v19 = *(_QWORD *)(a2 + 8 * v17 + 8);
    v35[1] = 0x200000000;
    v35[0] = &off_24E6BE3A8;
    v35[2] = v19;
    xgboost::Json::operator=((unsigned int **)(v42 + 8 * v17), (uint64_t)v35);
    v20 = 4 * *(_QWORD *)(a2 + 8 * v17);
    v34[1] = 0x200000000;
    v34[0] = &off_24E6BE3A8;
    v34[2] = v20;
    xgboost::Json::operator=((unsigned int **)__p + v17, (uint64_t)v34);
    v17 = 1;
  }
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  memset(v46, 0, sizeof(v46));
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v46, (uint64_t *)v42, *((uint64_t **)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v33, "shape");
  v21 = (uint64_t *)(*(uint64_t (**)(_QWORD *, std::string *))(*v5 + 24))(v5, &v33);
  xgboost::Json::operator=(v21, (uint64_t)&p_p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  p_p = off_24E6BE218;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  memset(v46, 0, sizeof(v46));
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v46, (uint64_t *)__p, v40, ((char *)v40 - (_BYTE *)__p) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v33, "strides");
  v22 = (uint64_t *)(*(uint64_t (**)(_QWORD *, std::string *))(*v5 + 24))(v5, &v33);
  xgboost::Json::operator=(v22, (uint64_t)&p_p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  p_p = off_24E6BE218;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v32[1] = 0x200000000;
  v32[0] = &off_24E6BE3A8;
  v32[2] = 3;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "version");
  v23 = (unsigned int **)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  xgboost::Json::operator=(v23, (uint64_t)v32);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  std::to_string(&v31, 4uLL);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v31;
  else
    v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)v31.__r_.__value_.__r.__words[0];
  std::string::insert(&v31, v24, 102);
  v33 = v31;
  memset(&v31, 0, sizeof(v31));
  v25 = std::string::insert(&v33, 0, "<");
  v26 = v25->__r_.__value_.__r.__words[0];
  v47[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v45 = 0;
  p_p = off_24E6BE2B8;
  *(_QWORD *)&v46[15] = *(_QWORD *)((char *)v47 + 7);
  *(_QWORD *)v46 = v26;
  *(_QWORD *)&v46[8] = v47[0];
  v46[23] = v27;
  v47[0] = 0;
  *(_QWORD *)((char *)v47 + 7) = 0;
  std::string::basic_string[abi:ne180100]<0>(v29, "typestr");
  v28 = (uint64_t *)(*(uint64_t (**)(_QWORD *, void **))(*v5 + 24))(v5, v29);
  xgboost::Json::operator=(v28, (uint64_t)&p_p);
  if (v30 < 0)
    operator delete(v29[0]);
  p_p = off_24E6BE2B8;
  if ((v46[23] & 0x80000000) != 0)
    operator delete(*(void **)v46);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  p_p = (void (**)(xgboost::JsonString *__hidden))&__p;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (void (**)(xgboost::JsonString *__hidden))&v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
}

void sub_220E932D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  unsigned int *v49;
  unsigned int v51;
  unsigned int v52;

  do
  {
    v51 = __ldxr(v49);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v49));
  if (!v52)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  _Unwind_Resume(exception_object);
}

unsigned int **xgboost::Json::operator=(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (unsigned int *)operator new();
  *((_QWORD *)v2 + 1) = 0x600000000;
  v3 = v2 + 2;
  *(_QWORD *)v2 = &off_24E6BE408;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  v5 = *a1;
  *a1 = v2;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

_QWORD *std::vector<xgboost::Json>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    std::vector<xgboost::Json>::__construct_at_end(a1, a2);
  }
  return a1;
}

void sub_220E936FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<xgboost::Json>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *std::vector<xgboost::Json>::__construct_at_end(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (_QWORD *)result[1];
  if (a2)
  {
    v4 = &v3[a2];
    do
    {
      result = (_QWORD *)operator new();
      result[1] = 0x600000000;
      v5 = (unsigned int *)(result + 1);
      *result = &off_24E6BE408;
      *v3 = result;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      ++v3;
    }
    while (v3 != v4);
    v3 = v4;
  }
  v2[1] = v3;
  return result;
}

void sub_220E937E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t *std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_220E93868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<xgboost::Json>,xgboost::Json*,xgboost::Json*,xgboost::Json*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD v9[3];
  char v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *v4 = *a2;
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      ++a2;
      ++v4;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>::operator()[abi:ne180100]((_QWORD **)a1);
  return a1;
}

_QWORD **std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>::operator()[abi:ne180100](_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *result[2];
  v2 = *result[1];
  while (v1 != v2)
  {
    v3 = *(_QWORD ***)(v1 - 8);
    v1 -= 8;
    result = v3;
    if (v3)
    {
      v4 = (unsigned int *)(result + 1);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
      }
    }
  }
  return result;
}

uint64_t xgboost::ArrayInterface<1,true>::ArrayInterface(uint64_t a1, _DWORD **a2)
{
  _DWORD *v3;
  int v4;
  _QWORD *v6;
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;

  *(_WORD *)(a1 + 48) = 512;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = *a2;
  v4 = (*a2)[3];
  if (v4 == 4)
  {
    v6 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v3);
    v7 = v6[3] - v6[2];
    v23 = v7 >> 3;
    if (v7 != 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v24);
      if (v24)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v23);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"get<Array const>(array).size() == 1", 35);
        v12 = *(char *)(v24 + 23);
        if (v12 >= 0)
          v13 = v24;
        else
          v13 = *(_QWORD *)v24;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v24 + 23);
        else
          v14 = *(_QWORD *)(v24 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Column: ", 8);
        v18 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
        v19 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v23);
        v20 = v24;
        v24 = 0;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v24, v20);
      }
    }
    v3 = (_DWORD *)**((_QWORD **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*a2) + 2);
  }
  else if (v4 != 3)
  {
    return a1;
  }
  v21 = xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(v3);
  xgboost::ArrayInterface<1,true>::Initialize(a1, (uint64_t)v21 + 16);
  return a1;
}

void sub_220E93B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

void xgboost::ArrayInterface<1,true>::Initialize(uint64_t a1, uint64_t a2)
{
  _DWORD **v4;
  char *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t Mask;
  uint64_t v12;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  std::string *v26;
  _QWORD *v27;
  char v28;
  uint64_t v29[2];
  void *__p;
  uint64_t v31;
  char v32;
  std::string v33;

  xgboost::ArrayInterfaceHandler::Validate(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "typestr");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a2, (const void **)&__p);
  v5 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  if (v5[39] < 0)
    std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
  else
    v33 = *(std::string *)(v5 + 16);
  if (v32 < 0)
    operator delete(__p);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v33;
  else
    v6 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  xgboost::ArrayInterface<1,true>::AssignType(a1, (unsigned __int8 *)v6, size);
  xgboost::ArrayInterfaceHandler::ExtractShape<1>(a2, a1 + 24);
  v8 = &v33;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v9 = xgboost::ArrayInterfaceHandler::ExtractStride<1>(a2, v8->__r_.__value_.__s.__data_[2] - 48, a1 + 24, (_QWORD *)(a1 + 16));
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 32) = xgboost::ArrayInterfaceHandler::ExtractData(a2, v10);
  __p = 0;
  v31 = 0;
  Mask = xgboost::ArrayInterfaceHandler::ExtractMask(a2, (unint64_t *)&__p);
  v29[1] = Mask;
  v12 = v31;
  *(_QWORD *)a1 = __p;
  *(_QWORD *)(a1 + 8) = v12;
  if (v12)
  {
    if (Mask != *(_QWORD *)(a1 + 40))
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(v29);
      if (v29[0])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"n_bits == n", 11);
        v17 = *(char *)(v29[0] + 23);
        v18 = v17 >= 0 ? v29[0] : *(_QWORD *)v29[0];
        v19 = v17 >= 0 ? *(unsigned __int8 *)(v29[0] + 23) : *(_QWORD *)(v29[0] + 8);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Shape of bit mask doesn't match data shape. ", 44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"XGBoost doesn't support internal broadcasting.", 46);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v23 = v29[0];
        v29[0] = 0;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v29, v23);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "stream");
  v24 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)&__p);
  if (v32 < 0)
    operator delete(__p);
  if (a2 + 8 != v24)
  {
    v25 = *(_DWORD **)(v24 + 56);
    if (v25[3] != 6)
    {
      xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v25);
      v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
      v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_220E93E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_220E93E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x220E93E88);
  JUMPOUT(0x220E93E8CLL);
}

_UNKNOWN **xgboost::ArrayInterfaceErrors::Dimension(xgboost::ArrayInterfaceErrors *this)
{
  int v1;
  unsigned __int8 v2;
  std::string *v3;
  std::string::size_type size;
  std::string v6;

  v1 = (int)this;
  {
    xgboost::ArrayInterfaceErrors::Dimension(int)::str = 0;
    qword_2556510A8 = 0;
    unk_2556510B0 = 0;
    __cxa_atexit(MEMORY[0x24BEDACF0], &xgboost::ArrayInterfaceErrors::Dimension(int)::str, &dword_220DF6000);
  }
  if (byte_2556510B7 < 0)
  {
    *(_BYTE *)xgboost::ArrayInterfaceErrors::Dimension(int)::str = 0;
    qword_2556510A8 = 0;
  }
  else
  {
    LOBYTE(xgboost::ArrayInterfaceErrors::Dimension(int)::str) = 0;
    byte_2556510B7 = 0;
  }
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, "Only ");
  std::to_string(&v6, v1);
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v6;
  else
    v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  else
    size = v6.__r_.__value_.__l.__size_;
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, (const std::string::value_type *)v3, size);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::string::append((std::string *)&xgboost::ArrayInterfaceErrors::Dimension(int)::str, " dimensional array is valid.");
  if (byte_2556510B7 >= 0)
    return &xgboost::ArrayInterfaceErrors::Dimension(int)::str;
  else
    return (_UNKNOWN **)xgboost::ArrayInterfaceErrors::Dimension(int)::str;
}

void sub_220E93FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::ArrayInterfaceHandler::Validate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string *Entry;
  _QWORD *v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  char *v11;
  std::string::size_type size;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  std::string *v17;
  _QWORD *v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23[2];
  char v24;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = a1 + 8;
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  if (*((uint64_t *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v2 + 56)) + 2) >= 4)
  {
    v6 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v6, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "typestr");
  v8 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3 == v8)
  {
    v9 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(v9, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  }
  v11 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*(_DWORD **)(v8 + 56));
  if (v11[39] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 2), *((_QWORD *)v11 + 3));
  else
    __p = *(std::string *)(v11 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ == 3)
      goto LABEL_20;
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 3)
      goto LABEL_20;
  }
  if (size != 4)
  {
    v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: typestr.size() == 3 || typestr.size() == 4", 56);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(v23, "shape");
  v13 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)v23);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v3 == v13)
  {
    v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "data");
  v16 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)v23);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v3 == v16)
  {
    v17 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::Entry::Init(v17, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220E942E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::ArrayInterface<1,true>::AssignType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  int v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  dmlc::LogMessageFatal *p_p;
  char v11;
  std::string *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  std::string __p;
  char v17;

  v4 = a2[1];
  if (a3 == 4 && v4 == 102)
  {
    v5 = a2[2];
    if (v5 == 49)
    {
      if (a2[3] == 54)
      {
        *(_BYTE *)(a1 + 49) = 2;
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: sizeof(long double) == 16", 39);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"128-bit floating point is not supported on current platform.", 60);
        p_p = (dmlc::LogMessageFatal *)&__p;
LABEL_26:
        dmlc::LogMessageFatal::~LogMessageFatal(p_p);
        return;
      }
LABEL_17:
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      xgboost::ArrayInterfaceErrors::UnSupportedType((uint64_t)a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      p_p = (dmlc::LogMessageFatal *)&v17;
      goto LABEL_26;
    }
  }
  else
  {
    if (v4 == 117)
    {
      switch(a2[2])
      {
        case '1':
          v11 = 7;
          goto LABEL_28;
        case '2':
          v11 = 8;
          goto LABEL_28;
        case '4':
          v11 = 9;
          goto LABEL_28;
        case '8':
          v11 = 10;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 == 105)
    {
      switch(a2[2])
      {
        case '1':
          v11 = 3;
          goto LABEL_28;
        case '2':
          v11 = 4;
          goto LABEL_28;
        case '4':
          v11 = 5;
          goto LABEL_28;
        case '8':
          v11 = 6;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 != 102)
      goto LABEL_17;
    v5 = a2[2];
  }
  if (v5 != 56)
  {
    if (v5 == 52)
    {
      *(_BYTE *)(a1 + 49) = 0;
      return;
    }
    goto LABEL_17;
  }
  v11 = 1;
LABEL_28:
  *(_BYTE *)(a1 + 49) = v11;
}

void sub_220E94594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  _Unwind_Resume(a1);
}

void xgboost::ArrayInterfaceHandler::ExtractShape<1>(uint64_t a1, uint64_t a2)
{
  _DWORD **v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  std::string *Entry;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *__p;
  _BYTE *v36;
  char v37;

  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&__p);
  v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (v37 < 0)
    operator delete(__p);
  v6 = (uint64_t)(v5[3] - v5[2]) >> 3;
  v34 = 0;
  std::vector<unsigned long>::vector(&__p, v6, &v34);
  v7 = (unsigned int **)v5[2];
  v8 = (unsigned int **)v5[3];
  if (v7 != v8)
  {
    v9 = __p;
    do
    {
      v10 = *v7;
      if (*v7)
      {
        v11 = v10 + 2;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *v9 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v10) + 2);
      if (v10)
      {
        v13 = v10 + 2;
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
        }
      }
      ++v7;
      ++v9;
    }
    while (v7 != v8);
  }
  xgboost::ArrayInterfaceHandler::HandleRowVector<1>((uint64_t)&__p, (uint64_t)&__p);
  v34 = 0;
  v16 = v36;
  if (v36 == __p)
  {
    v17 = 0;
    goto LABEL_30;
  }
  v17 = 0;
  do
  {
    v32 = 1;
    if (v17)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v33);
      if (v33)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"i < D", 5);
        v22 = *(char *)(v33 + 23);
        if (v22 >= 0)
          v23 = v33;
        else
          v23 = *(_QWORD *)v33;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v33 + 23);
        else
          v24 = *(_QWORD *)(v33 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        v27 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
        v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
        v29 = v33;
        v33 = 0;
        if (v29)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v29);
      }
    }
    v30 = v34;
    v16 = __p;
    v31 = v36;
    *(_QWORD *)(a2 + 8 * v34) = *((_QWORD *)__p + v34);
    v17 = v30 + 1;
    v34 = v30 + 1;
  }
  while (v30 + 1 < (v31 - v16) >> 3);
  if (v30 > 0x7FFFFFFFFFFFFFFELL)
  {
LABEL_30:
    memset_pattern16((void *)(a2 + 8 * v17), &unk_220F61DD0, 8 - 8 * v17);
    if (!v16)
      return;
  }
  v36 = v16;
  operator delete(v16);
}

void sub_220E9484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL xgboost::ArrayInterfaceHandler::ExtractStride<1>(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _BOOL8 v8;
  _DWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  std::string *Entry;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int **v34;
  unsigned int **v35;
  _QWORD *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  unint64_t v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  int v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  void *__p[2];
  char v66;

  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  v7 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v66 < 0)
    operator delete(__p[0]);
  if (a1 + 8 == v7 || *(_DWORD *)(*(_QWORD *)(v7 + 56) + 12) == 6)
  {
    v8 = 1;
    *a4 = 1;
    return v8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)__p);
  v10 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v9);
  if (v66 < 0)
    operator delete(__p[0]);
  v11 = (uint64_t)(v10[3] - v10[2]) >> 3;
  v61 = 0;
  std::vector<unsigned long>::vector(__p, v11, &v61);
  v12 = (unsigned int **)v10[2];
  v13 = (unsigned int **)v10[3];
  if (v12 != v13)
  {
    v14 = __p[0];
    do
    {
      v15 = *v12;
      if (*v12)
      {
        v16 = v15 + 2;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      *v14 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v15) + 2);
      if (v15)
      {
        v18 = v15 + 2;
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      ++v12;
      ++v14;
    }
    while (v12 != v13);
  }
  v21 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v7 + 56));
  v22 = (uint64_t)(v21[3] - v21[2]) >> 3;
  v63 = (uint64_t)(v10[3] - v10[2]) >> 3;
  v64 = v22;
  if (v22 != v63)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v61);
    if (v61)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v64);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"j_strides.size() == j_shape.size()", 34);
      v27 = *(char *)(v61 + 23);
      v28 = v27 >= 0 ? v61 : *(_QWORD *)v61;
      v29 = v27 >= 0 ? *(unsigned __int8 *)(v61 + 23) : *(_QWORD *)(v61 + 8);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"stride and shape don't match.", 29);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v64);
      v32 = v61;
      v61 = 0;
      if (v32)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v32);
    }
  }
  v33 = (uint64_t)(v21[3] - v21[2]) >> 3;
  v64 = 0;
  std::vector<unsigned long>::vector(&v61, v33, &v64);
  v34 = (unsigned int **)v21[2];
  v35 = (unsigned int **)v21[3];
  if (v34 != v35)
  {
    v36 = (_QWORD *)v61;
    do
    {
      v37 = *v34;
      if (*v34)
      {
        v38 = v37 + 2;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      *v36 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v37) + 2);
      if (v37)
      {
        v40 = v37 + 2;
        do
        {
          v41 = __ldxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
        }
      }
      ++v34;
      ++v36;
    }
    while (v34 != v35);
  }
  xgboost::ArrayInterfaceHandler::HandleRowVector<1>((uint64_t)__p, (uint64_t)&v61);
  v64 = 0;
  v43 = v62;
  if (v62 == (_BYTE *)v61)
  {
    v44 = 0;
    goto LABEL_56;
  }
  v44 = 0;
  do
  {
    v60 = 1;
    if (v44)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v63);
      if (v63)
      {
        v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
        dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v60);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"i < D", 5);
        v49 = *(char *)(v63 + 23);
        v50 = v49 >= 0 ? v63 : *(_QWORD *)v63;
        v51 = v49 >= 0 ? *(unsigned __int8 *)(v63 + 23) : *(_QWORD *)(v63 + 8);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
        v54 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
        v55 = strlen(v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v60);
        v56 = v63;
        v63 = 0;
        if (v56)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v63, v56);
      }
    }
    v57 = v64;
    v43 = (_BYTE *)v61;
    v58 = v62;
    a4[v64] = *(_QWORD *)(v61 + 8 * v64) / a2;
    v44 = v57 + 1;
    v64 = v57 + 1;
  }
  while (v57 + 1 < (v58 - v43) >> 3);
  if (v57 > 0x7FFFFFFFFFFFFFFELL)
  {
LABEL_56:
    memset_pattern16(&a4[v44], &unk_220F61DD0, 8 - 8 * v44);
    v8 = *a4 == 1;
    if (!v43)
      goto LABEL_58;
    goto LABEL_57;
  }
  v8 = *a4 == 1;
LABEL_57:
  v62 = v43;
  operator delete(v43);
LABEL_58:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8;
}

void sub_220E94D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::ArrayInterfaceHandler::ExtractData(uint64_t a1, uint64_t a2)
{
  uint64_t PtrFromArray;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17[2];

  v17[1] = a2;
  xgboost::ArrayInterfaceHandler::Validate(a1);
  PtrFromArray = xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<void *>(a1);
  if (!PtrFromArray)
  {
    v16 = 0;
    if (a2)
    {
      dmlc::LogCheckFormat<unsigned long,int>(v17);
      if (v17[0])
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v16);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"size == 0", 9);
        v10 = *(char *)(v17[0] + 23);
        if (v10 >= 0)
          v11 = v17[0];
        else
          v11 = *(_QWORD *)v17[0];
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(v17[0] + 23);
        else
          v12 = *(_QWORD *)(v17[0] + 8);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Empty data with non-zero shape.", 31);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v16);
        v15 = v17[0];
        v17[0] = 0;
        if (v15)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v17, v15);
      }
    }
  }
  return PtrFromArray;
}

void sub_220E94F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

unint64_t xgboost::ArrayInterfaceHandler::ExtractMask(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _DWORD **v5;
  char *v6;
  uint64_t v7;
  uint64_t PtrFromArray;
  _DWORD **v9;
  uint64_t **v10;
  std::string *Entry;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  _DWORD **v23;
  char *v24;
  unint64_t v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  std::string *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  _DWORD **v49;
  uint64_t **v50;
  std::string *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  size_t v61;
  void *v62;
  _QWORD *v63;
  std::string *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  unint64_t v74;
  uint64_t v76;
  void *v77[2];
  char v78;
  uint64_t v79;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  std::string __p;
  _DWORD **v84;
  _BYTE *v85;
  uint64_t v86;

  std::string::basic_string[abi:ne180100]<0>(&v84, "mask");
  v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)&v84);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  if (a1 + 8 == v4)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v84, "mask");
  v5 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&v84);
  v6 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v5);
  v7 = (uint64_t)(v6 + 16);
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  xgboost::ArrayInterfaceHandler::Validate(v7);
  PtrFromArray = xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<unsigned char *>(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  v9 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v7, (const void **)&__p.__r_.__value_.__l.__data_);
  v10 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v9);
  v85 = 0;
  v86 = 0;
  v84 = 0;
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)&v84, v10[2], v10[3], v10[3] - v10[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = (void *)((v85 - (_BYTE *)v84) >> 3);
  LODWORD(v77[0]) = 1;
  if (v85 - (_BYTE *)v84 != 8)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"j_shape.size() == 1", 19);
      v15 = *(char *)(__p.__r_.__value_.__r.__words[0] + 23);
      v16 = v15 >= 0 ? __p.__r_.__value_.__r.__words[0] : *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v17 = v15 >= 0
          ? *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 23)
          : *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      v20 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
      v21 = strlen(v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
      v22 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, v22);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v80, "typestr");
  v23 = (_DWORD **)std::map<std::string,xgboost::Json>::at(v7, (const void **)&v80);
  v24 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v23);
  if (v24[39] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v24 + 2), *((_QWORD *)v24 + 3));
  else
    __p = *(std::string *)(v24 + 16);
  if (SHIBYTE(v82) < 0)
    operator delete(v80);
  v79 = 0;
  v79 = *std::string::at(&__p, 2uLL) - 48;
  if (*std::string::at(&__p, 1uLL) == 116)
  {
    LODWORD(v77[0]) = 1;
    if (v79 != 1)
    {
      dmlc::LogCheckFormat<long long,int>((uint64_t *)&v80);
      if (v80)
      {
        v26 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
        dmlc::LogMessageFatal::Entry::Init(v26, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"type_length == 1", 16);
        v30 = *((char *)v80 + 23);
        if (v30 >= 0)
          v31 = v80;
        else
          v31 = *(void **)v80;
        if (v30 >= 0)
          v32 = *((unsigned __int8 *)v80 + 23);
        else
          v32 = *((_QWORD *)v80 + 1);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"mask with bitfield type should be of 1 byte per bitfield.", 57);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v77);
        goto LABEL_44;
      }
    }
  }
  else if (*std::string::at(&__p, 1uLL) == 105)
  {
    LODWORD(v77[0]) = 1;
    if (v79 != 1)
    {
      dmlc::LogCheckFormat<long long,int>((uint64_t *)&v80);
      if (v80)
      {
        v35 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
        dmlc::LogMessageFatal::Entry::Init(v35, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v36 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v77);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: ", 14);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"type_length == 1", 16);
        v39 = *((char *)v80 + 23);
        if (v39 >= 0)
          v40 = v80;
        else
          v40 = *(void **)v80;
        if (v39 >= 0)
          v41 = *((unsigned __int8 *)v80 + 23);
        else
          v41 = *((_QWORD *)v80 + 1);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"mask with integer type should be of 1 byte per integer.", 55);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v77);
LABEL_44:
        v44 = v80;
        v80 = 0;
        if (v44)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v80, (uint64_t)v44);
      }
    }
  }
  else
  {
    v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"mask must be of integer type or bit field type.", 47);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v80);
  }
  if (v85 == (_BYTE *)v84)
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  v25 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v84) + 2);
  std::string::basic_string[abi:ne180100]<0>(&v80, "strides");
  v47 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(v7, (const void **)&v80);
  v48 = v6 + 24;
  if (SHIBYTE(v82) < 0)
    operator delete(v80);
  if (v48 != (char *)v47)
  {
    std::string::basic_string[abi:ne180100]<0>(v77, "strides");
    v49 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)v77);
    v50 = (uint64_t **)xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v49);
    v81 = 0;
    v82 = 0;
    v80 = 0;
    std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)&v80, v50[2], v50[3], v50[3] - v50[2]);
    if (v78 < 0)
      operator delete(v77[0]);
    v76 = (v81 - (_BYTE *)v80) >> 3;
    if (v81 - (_BYTE *)v80 != 8)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)v77);
      if (v77[0])
      {
        v51 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
        dmlc::LogMessageFatal::Entry::Init(v51, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v52 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: ", 14);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"strides.size() == 1", 19);
        v55 = *((char *)v77[0] + 23);
        v56 = v55 >= 0 ? v77[0] : *(void **)v77[0];
        v57 = v55 >= 0 ? *((unsigned __int8 *)v77[0] + 23) : *((_QWORD *)v77[0] + 1);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v56, v57);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": ", 2);
        v60 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)1);
        v61 = strlen(v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
        v62 = v77[0];
        v77[0] = 0;
        if (v62)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v77, (uint64_t)v62);
      }
    }
    if (v81 == v80)
      std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
    v63 = xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)v80);
    if (v63[2] != v79)
    {
      dmlc::LogCheckFormat<long long,long long>((uint64_t *)v77);
      if (v77[0])
      {
        v64 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
        dmlc::LogMessageFatal::Entry::Init(v64, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v65 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v76);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: ", 14);
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"get<Integer>(strides.at(0)) == type_length", 42);
        v68 = *((char *)v77[0] + 23);
        v69 = v68 >= 0 ? v77[0] : *(void **)v77[0];
        v70 = v68 >= 0 ? *((unsigned __int8 *)v77[0] + 23) : *((_QWORD *)v77[0] + 1);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Memory should be contiguous.", 28);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v76);
        v73 = v77[0];
        v77[0] = 0;
        if (v73)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v77, (uint64_t)v73);
      }
    }
    v77[0] = &v80;
    std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)v77);
  }
  v74 = vcvtpd_u64_f64((double)v25 * 0.125);
  if (!PtrFromArray && v74)
    std::terminate();
  *a2 = v74;
  a2[1] = PtrFromArray;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v25;
}

void sub_220E95708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  __p = (void *)(v30 - 88);
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_220E95888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x220E95898);
  JUMPOUT(0x220E95880);
}

void xgboost::ArrayInterfaceErrors::UnSupportedType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string v7;
  std::string v8;
  std::string v9;

  xgboost::ArrayInterfaceErrors::TypeStr((xgboost::ArrayInterfaceErrors *)*(char *)(a1 + 1), &v7);
  v4 = std::string::append(&v7, "-");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v8, *(_BYTE *)(a1 + 2));
  v9 = v8;
  memset(&v8, 0, sizeof(v8));
  v6 = std::string::append(&v9, " is not supported.");
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_220E9597C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::ArrayInterfaceErrors::TypeStr@<X0>(xgboost::ArrayInterfaceErrors *this@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  char *v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *result;
  char v14;
  char v15;

  v2 = (char)this;
  if ((int)this <= 97)
  {
    switch((int)this)
    {
      case 'M':
        v4 = "Datetime";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'O':
        v4 = "Object";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'S':
        v4 = "String";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'U':
        v4 = "Unicode";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'V':
        v4 = "Other";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      default:
LABEL_17:
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Invalid type code: ", 19);
        v15 = v2;
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v15, 1);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"of your input data complies to: ", 32);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"https://docs.scipy.org/doc/numpy/reference/arrays.interface.html", 64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nOr open an issue.", 18);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
        result = std::string::basic_string[abi:ne180100]<0>(a2, (char *)&unk_220F8364E);
        break;
    }
  }
  else
  {
    switch((int)this)
    {
      case 'b':
        v4 = "Boolean";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'c':
        v4 = "Complex floating point";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
        goto LABEL_17;
      case 'f':
        v4 = "Floating point";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'i':
        v4 = "Integer";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      case 'm':
        v4 = "Timedelta";
        return std::string::basic_string[abi:ne180100]<0>(a2, v4);
      default:
        if ((_DWORD)this == 117)
        {
          v4 = "Unsigned integer";
        }
        else
        {
          if ((_DWORD)this != 116)
            goto LABEL_17;
          v4 = "Bit field";
        }
        break;
    }
    return std::string::basic_string[abi:ne180100]<0>(a2, v4);
  }
  return result;
}

void sub_220E95B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  _Unwind_Resume(a1);
}

void xgboost::ArrayInterfaceHandler::HandleRowVector<1>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  v2 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
  {
    v4 = *v2;
    v3 = v2[1];
    if (v4 != 1 && v3 != 1)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v9);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: m == 1 || n == 1", 30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v9);
      return;
    }
    if (v4 == 1)
    {
      **(_QWORD **)a2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    }
    else if (v3 != 1)
    {
      return;
    }
    std::vector<unsigned long>::resize(a2, 1uLL);
  }
}

void sub_220E95C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::ArrayInterfaceHandler::GetPtrFromArrayData<unsigned char *>(uint64_t a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD **v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  v2 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (a1 + 8 == v2)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Empty data passed in.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v2 + 56));
  v6 = (_DWORD **)v5[2];
  if ((_DWORD **)v5[3] == v6)
    std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
  return *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v6) + 2);
}

void sub_220E95D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t dmlc::LogCheckFormat<long long,int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E95EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<long long,long long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E95FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::linalg::ArrayInterface<unsigned int,1>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int **v13;
  _QWORD *v14;
  uint64_t *v15;
  unsigned int **v16;
  uint64_t v17;
  char i;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int **v23;
  std::string::const_iterator v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  uint64_t *v28;
  void *v29[2];
  char v30;
  std::string v31;
  _QWORD v32[3];
  std::string v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[2];
  char v37;
  _QWORD v38[3];
  void *__p;
  uint64_t *v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  void (**p_p)(xgboost::JsonString *__hidden);
  uint64_t v45;
  _BYTE v46[24];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  v45 = 0x300000000;
  p_p = &off_24E6BE1D0;
  *(_QWORD *)&v46[8] = 0;
  *(_QWORD *)&v46[16] = 0;
  *(_QWORD *)v46 = &v46[8];
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v4[1] = 0x300000000;
  v6 = (unsigned int *)(v4 + 1);
  *v4 = &off_24E6BE1D0;
  v7 = *(_QWORD **)&v46[8];
  v4[2] = *(_QWORD *)v46;
  v4[3] = v7;
  v8 = *(_QWORD *)&v46[16];
  *(_QWORD *)&v46[8] = 0;
  *(_QWORD *)&v46[16] = 0;
  v4[4] = v8;
  *(_QWORD *)v46 = &v46[8];
  if (!v8)
    v7 = v4;
  v7[2] = v4 + 3;
  *a1 = v4;
  do
    v9 = __ldxr(v6);
  while (__stxr(v9 + 1, v6));
  p_p = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v46, *(_QWORD **)&v46[8]);
  std::vector<xgboost::Json>::vector(&v42, 2uLL);
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  *(_OWORD *)v46 = v42;
  *(_QWORD *)&v46[16] = v43;
  v42 = 0uLL;
  v43 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "data");
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD *, void **))(*v5 + 24))(v5, &__p);
  xgboost::Json::operator=(v10, (uint64_t)&p_p);
  if (v41 < 0)
    operator delete(__p);
  p_p = off_24E6BE218;
  __p = v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v11 = *(_QWORD *)(a2 + 24);
  v38[1] = 0x200000000;
  v38[0] = &off_24E6BE3A8;
  v38[2] = v11;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "data");
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  v13 = (unsigned int **)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 32))(*v12, 0);
  xgboost::Json::operator=(v13, (uint64_t)v38);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  v36[1] = 0x500000000;
  v36[0] = &off_24E6BE468;
  v37 = 1;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "data");
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  v15 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 32))(*v14, 1);
  xgboost::Json::operator=(v15, (uint64_t)v36);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  if ((*(_DWORD *)(a2 + 48) & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&p_p, "stream");
    v16 = (unsigned int **)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
    xgboost::Json::operator=(v16);
    if ((v46[7] & 0x80000000) != 0)
      operator delete(p_p);
  }
  std::vector<xgboost::Json>::vector(&v42, 1uLL);
  std::vector<xgboost::Json>::vector(&__p, 1uLL);
  v17 = 0;
  for (i = 1; (i & 1) != 0; i = 0)
  {
    v19 = *(_QWORD *)(a2 + 8 * v17 + 8);
    v35[1] = 0x200000000;
    v35[0] = &off_24E6BE3A8;
    v35[2] = v19;
    xgboost::Json::operator=((unsigned int **)(v42 + 8 * v17), (uint64_t)v35);
    v20 = 4 * *(_QWORD *)(a2 + 8 * v17);
    v34[1] = 0x200000000;
    v34[0] = &off_24E6BE3A8;
    v34[2] = v20;
    xgboost::Json::operator=((unsigned int **)__p + v17, (uint64_t)v34);
    v17 = 1;
  }
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  memset(v46, 0, sizeof(v46));
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v46, (uint64_t *)v42, *((uint64_t **)&v42 + 1), (uint64_t)(*((_QWORD *)&v42 + 1) - v42) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v33, "shape");
  v21 = (uint64_t *)(*(uint64_t (**)(_QWORD *, std::string *))(*v5 + 24))(v5, &v33);
  xgboost::Json::operator=(v21, (uint64_t)&p_p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  p_p = off_24E6BE218;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v45 = 0x400000000;
  p_p = off_24E6BE218;
  memset(v46, 0, sizeof(v46));
  std::vector<xgboost::Json>::__init_with_size[abi:ne180100]<xgboost::Json*,xgboost::Json*>((uint64_t *)v46, (uint64_t *)__p, v40, ((char *)v40 - (_BYTE *)__p) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v33, "strides");
  v22 = (uint64_t *)(*(uint64_t (**)(_QWORD *, std::string *))(*v5 + 24))(v5, &v33);
  xgboost::Json::operator=(v22, (uint64_t)&p_p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  p_p = off_24E6BE218;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v32[1] = 0x200000000;
  v32[0] = &off_24E6BE3A8;
  v32[2] = 3;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "version");
  v23 = (unsigned int **)(*(uint64_t (**)(_QWORD *, void (***)(xgboost::JsonString *__hidden)))(*v5 + 24))(v5, &p_p);
  xgboost::Json::operator=(v23, (uint64_t)v32);
  if ((v46[7] & 0x80000000) != 0)
    operator delete(p_p);
  std::to_string(&v31, 4uLL);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v31;
  else
    v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)v31.__r_.__value_.__r.__words[0];
  std::string::insert(&v31, v24, 117);
  v33 = v31;
  memset(&v31, 0, sizeof(v31));
  v25 = std::string::insert(&v33, 0, "<");
  v26 = v25->__r_.__value_.__r.__words[0];
  v47[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v45 = 0;
  p_p = off_24E6BE2B8;
  *(_QWORD *)&v46[15] = *(_QWORD *)((char *)v47 + 7);
  *(_QWORD *)v46 = v26;
  *(_QWORD *)&v46[8] = v47[0];
  v46[23] = v27;
  v47[0] = 0;
  *(_QWORD *)((char *)v47 + 7) = 0;
  std::string::basic_string[abi:ne180100]<0>(v29, "typestr");
  v28 = (uint64_t *)(*(uint64_t (**)(_QWORD *, void **))(*v5 + 24))(v5, v29);
  xgboost::Json::operator=(v28, (uint64_t)&p_p);
  if (v30 < 0)
    operator delete(v29[0]);
  p_p = off_24E6BE2B8;
  if ((v46[23] & 0x80000000) != 0)
    operator delete(*(void **)v46);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  p_p = (void (**)(xgboost::JsonString *__hidden))&__p;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (void (**)(xgboost::JsonString *__hidden))&v42;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
}

void sub_220E96620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  unsigned int *v49;
  unsigned int v51;
  unsigned int v52;

  do
  {
    v51 = __ldxr(v49);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v49));
  if (!v52)
  {
    __dmb(9u);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::FileAdapter::BeforeFirst(xgboost::data::FileAdapter *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x227667068](v2, 0x1060C40C2E02434);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t xgboost::data::FileAdapter::Next(xgboost::data::FileAdapter *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  v3 = (_QWORD *)operator new();
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v6 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  *v3 = v4;
  v3[1] = v6;
  *((_QWORD *)this + 2) = v3;
  if (v5)
    MEMORY[0x227667068](v5, 0x1060C40C2E02434);
  *((_QWORD *)this + 1) += *(_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  return v2;
}

void sub_220E96944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x1060C40C2E02434);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::FileAdapter::Value(xgboost::data::FileAdapter *this)
{
  return *((_QWORD *)this + 2);
}

void xgboost::data::FileIterator::~FileIterator(xgboost::data::FileIterator *this)
{
  uint64_t v2;

  XGDMatrixFree(*((_QWORD *)this + 7));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

xgboost::SparsePage *xgboost::SparsePage::SparsePage(char ***this)
{
  _QWORD *v2;
  char **v3;
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = xgboost::HostDeviceVector<unsigned long>::HostDeviceVector(this, 0, 0);
  xgboost::HostDeviceVector<xgboost::Entry>::HostDeviceVector(v2 + 1, 0, 0);
  this[2] = 0;
  v3 = *this;
  v4 = **this;
  v3[1] = v4;
  v5 = (unint64_t)v3[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = v5 - (_QWORD)v4;
    v8 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1)
      v8 = 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v3 + 2), v9);
    v11 = *v3;
    v12 = v3[1];
    v14 = &v10[8 * v13];
    *(_QWORD *)v10 = 0;
    v6 = v10 + 8;
    while (v12 != v11)
    {
      v15 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v10 - 1) = v15;
      v10 -= 8;
    }
    *v3 = v10;
    v3[1] = v6;
    v3[2] = v14;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v6 = v4 + 8;
  }
  v3[1] = v6;
  this[1][1] = *this[1];
  return (xgboost::SparsePage *)this;
}

void sub_220E96AEC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(v2);
  xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_220E96C60(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<std::string,std::string>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (", 2);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *(_QWORD *)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = a2;
  else
    v13 = *(_QWORD *)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") ", 2);
  v16 = operator new();
  std::stringbuf::str();
  v18[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a3 = v16;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v20);
}

void sub_220E96DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<unsigned long long,int>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E96F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_220E97098(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_220E970A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_220E971A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void xgboost::ArrayInterface<2,false>::Initialize(uint64_t a1, uint64_t a2)
{
  _DWORD **v4;
  char *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  std::string *v14;
  _QWORD *v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p[2];
  char v21;
  std::string v22;

  xgboost::ArrayInterfaceHandler::Validate(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "typestr");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a2, (const void **)__p);
  v5 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>(*v4);
  if (v5[39] < 0)
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
  else
    v22 = *(std::string *)(v5 + 16);
  if (v21 < 0)
    operator delete(__p[0]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  xgboost::ArrayInterface<2,false>::AssignType(a1, (unsigned __int8 *)v6, size);
  xgboost::ArrayInterfaceHandler::ExtractShape<2>(a2, a1 + 32);
  v8 = &v22;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 64) = xgboost::ArrayInterfaceHandler::ExtractStride<2>(a2, v8->__r_.__value_.__s.__data_[2] - 48, a1 + 32, (_QWORD *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 40) * *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 48) = xgboost::ArrayInterfaceHandler::ExtractData(a2, v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "mask");
  v10 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)__p);
  v11 = a2 + 8;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v11 != v10)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: array.find(\"mask\") == array.cend()", 48);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Masked array is not yet supported.", 34);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stream");
  v12 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a2, (const void **)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v11 != v12)
  {
    v13 = *(_DWORD **)(v12 + 56);
    if (v13[3] != 6)
    {
      xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v13);
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/common.h");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_220E974C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_220E9753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    JUMPOUT(0x220E97530);
  JUMPOUT(0x220E97534);
}

void xgboost::ArrayInterface<2,false>::AssignType(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  int v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  dmlc::LogMessageFatal *p_p;
  char v11;
  std::string *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  std::string __p;
  char v17;

  v4 = a2[1];
  if (a3 == 4 && v4 == 102)
  {
    v5 = a2[2];
    if (v5 == 49)
    {
      if (a2[3] == 54)
      {
        *(_BYTE *)(a1 + 65) = 2;
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: sizeof(long double) == 16", 39);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"128-bit floating point is not supported on current platform.", 60);
        p_p = (dmlc::LogMessageFatal *)&__p;
LABEL_26:
        dmlc::LogMessageFatal::~LogMessageFatal(p_p);
        return;
      }
LABEL_17:
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      xgboost::ArrayInterfaceErrors::UnSupportedType((uint64_t)a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      p_p = (dmlc::LogMessageFatal *)&v17;
      goto LABEL_26;
    }
  }
  else
  {
    if (v4 == 117)
    {
      switch(a2[2])
      {
        case '1':
          v11 = 7;
          goto LABEL_28;
        case '2':
          v11 = 8;
          goto LABEL_28;
        case '4':
          v11 = 9;
          goto LABEL_28;
        case '8':
          v11 = 10;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 == 105)
    {
      switch(a2[2])
      {
        case '1':
          v11 = 3;
          goto LABEL_28;
        case '2':
          v11 = 4;
          goto LABEL_28;
        case '4':
          v11 = 5;
          goto LABEL_28;
        case '8':
          v11 = 6;
          goto LABEL_28;
        default:
          goto LABEL_17;
      }
    }
    if (v4 != 102)
      goto LABEL_17;
    v5 = a2[2];
  }
  if (v5 != 56)
  {
    if (v5 == 52)
    {
      *(_BYTE *)(a1 + 65) = 0;
      return;
    }
    goto LABEL_17;
  }
  v11 = 1;
LABEL_28:
  *(_BYTE *)(a1 + 65) = v11;
}

void sub_220E9774C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  _Unwind_Resume(a1);
}

void xgboost::ArrayInterfaceHandler::ExtractShape<2>(uint64_t a1, uint64_t a2)
{
  _DWORD **v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  std::string *Entry;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  _QWORD *v35;
  char v36;

  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)&__p);
  v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v4);
  if (v36 < 0)
    operator delete(__p);
  v6 = (uint64_t)(v5[3] - v5[2]) >> 3;
  v33 = 0;
  std::vector<unsigned long>::vector(&__p, v6, &v33);
  v7 = (unsigned int **)v5[2];
  v8 = (unsigned int **)v5[3];
  v9 = __p;
  if (v7 != v8)
  {
    do
    {
      v10 = *v7;
      if (*v7)
      {
        v11 = v10 + 2;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *v9 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v10) + 2);
      if (v10)
      {
        v13 = v10 + 2;
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
        }
      }
      ++v7;
      ++v9;
    }
    while (v7 != v8);
    v9 = __p;
  }
  v33 = 0;
  if (v35 == v9)
  {
    v16 = 0;
    goto LABEL_30;
  }
  v16 = 0;
  do
  {
    v31 = 2;
    if ((unint64_t)v16 > 1)
    {
      dmlc::LogCheckFormat<unsigned long,int>(&v32);
      if (v32)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
        v18 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: ", 14);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"i < D", 5);
        v21 = *(char *)(v32 + 23);
        if (v21 >= 0)
          v22 = v32;
        else
          v22 = *(_QWORD *)v32;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(v32 + 23);
        else
          v23 = *(_QWORD *)(v32 + 8);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
        v26 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)2);
        v27 = strlen(v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
        v28 = v32;
        v32 = 0;
        if (v28)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v32, v28);
      }
    }
    v29 = v33;
    v9 = __p;
    v30 = v35;
    *(_QWORD *)(a2 + 8 * v33) = *((_QWORD *)__p + v33);
    v16 = v29 + 1;
    v33 = v16;
  }
  while (v16 < (unint64_t)(v30 - v9));
  if (v16 < 2)
  {
LABEL_30:
    memset_pattern16((void *)(a2 + 8 * v16), &unk_220F61DD0, 16 - 8 * v16);
    if (!v9)
      return;
  }
  v35 = v9;
  operator delete(v9);
}

void sub_220E979FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL xgboost::ArrayInterfaceHandler::ExtractStride<2>(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _BOOL8 v9;
  _DWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int **v35;
  unsigned int **v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void *__p[2];
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  v8 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1, (const void **)__p);
  if (v67 < 0)
    operator delete(__p[0]);
  if (a1 + 8 == v8 || *(_DWORD *)(*(_QWORD *)(v8 + 56) + 12) == 6)
  {
    v9 = 1;
    a4[1] = 1;
    *a4 = *(_QWORD *)(a3 + 8);
    return v9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v10 = (_DWORD **)std::map<std::string,xgboost::Json>::at(a1, (const void **)__p);
  v11 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v10);
  if (v67 < 0)
    operator delete(__p[0]);
  v12 = (uint64_t)(v11[3] - v11[2]) >> 3;
  v62 = 0;
  std::vector<unsigned long>::vector(__p, v12, &v62);
  v13 = (unsigned int **)v11[2];
  v14 = (unsigned int **)v11[3];
  if (v13 != v14)
  {
    v15 = __p[0];
    do
    {
      v16 = *v13;
      if (*v13)
      {
        v17 = v16 + 2;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *v15 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v16) + 2);
      if (v16)
      {
        v19 = v16 + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v13;
      ++v15;
    }
    while (v13 != v14);
  }
  v22 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v8 + 56));
  v23 = (uint64_t)(v22[3] - v22[2]) >> 3;
  v64 = (uint64_t)(v11[3] - v11[2]) >> 3;
  v65 = v23;
  if (v23 != v64)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v62);
    if (v62)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
      v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v65);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: ", 14);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"j_strides.size() == j_shape.size()", 34);
      v28 = *(char *)(v62 + 23);
      v29 = v28 >= 0 ? v62 : *(_QWORD *)v62;
      v30 = v28 >= 0 ? *(unsigned __int8 *)(v62 + 23) : *(_QWORD *)(v62 + 8);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"stride and shape don't match.", 29);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v65);
      v33 = v62;
      v62 = 0;
      if (v33)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v62, v33);
    }
  }
  v34 = (uint64_t)(v22[3] - v22[2]) >> 3;
  v65 = 0;
  std::vector<unsigned long>::vector(&v62, v34, &v65);
  v35 = (unsigned int **)v22[2];
  v36 = (unsigned int **)v22[3];
  v37 = (_QWORD *)v62;
  if (v35 != v36)
  {
    do
    {
      v38 = *v35;
      if (*v35)
      {
        v39 = v38 + 2;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      *v37 = *((_QWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(v38) + 2);
      if (v38)
      {
        v41 = v38 + 2;
        do
        {
          v42 = __ldxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          __dmb(9u);
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
        }
      }
      ++v35;
      ++v37;
    }
    while (v35 != v36);
    v37 = (_QWORD *)v62;
  }
  v65 = 0;
  if (v63 == v37)
  {
    v44 = 0;
  }
  else
  {
    v44 = 0;
    do
    {
      v61 = 2;
      if ((unint64_t)v44 > 1)
      {
        dmlc::LogCheckFormat<unsigned long,int>(&v64);
        if (v64)
        {
          v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
          dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../data/array_interface.h");
          v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"i < D", 5);
          v49 = *(char *)(v64 + 23);
          v50 = v49 >= 0 ? v64 : *(_QWORD *)v64;
          v51 = v49 >= 0 ? *(unsigned __int8 *)(v64 + 23) : *(_QWORD *)(v64 + 8);
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
          v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
          v54 = (const char *)xgboost::ArrayInterfaceErrors::Dimension((xgboost::ArrayInterfaceErrors *)2);
          v55 = strlen(v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v61);
          v56 = v64;
          v64 = 0;
          if (v56)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v64, v56);
        }
      }
      v57 = v65;
      v37 = (_QWORD *)v62;
      v58 = v63;
      a4[v65] = *(_QWORD *)(v62 + 8 * v65) / a2;
      v44 = v57 + 1;
      v65 = v44;
    }
    while (v44 < (unint64_t)(v58 - v37));
    if (v44 > 1)
      goto LABEL_57;
  }
  memset_pattern16(&a4[v44], &unk_220F61DD0, 16 - 8 * v44);
LABEL_57:
  v9 = *(_QWORD *)(a3 + 8) == *a4 && a4[1] == 1;
  if (v37)
  {
    v63 = v37;
    operator delete(v37);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_220E97F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_220E98078(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220E98070);
}

float xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long &,unsigned long &>(unsigned long &,unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, char a2, _QWORD *a3, float a4)
{
  float result;

  switch(a2)
  {
    case 0:
      return *(float *)(a1 + 4 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
    case 1:
    case 2:
      return *(double *)(a1 + 8 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
    case 3:
      return (float)*(char *)(a1 + *(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]);
    case 4:
      return (float)*(__int16 *)(a1 + 2 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
    case 5:
      return (float)*(int *)(a1 + 4 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
    case 6:
      return (float)*(uint64_t *)(a1 + 8 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
    case 7:
      LOBYTE(a4) = *(_BYTE *)(a1 + *(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]);
      goto LABEL_12;
    case 8:
      LOWORD(a4) = *(_WORD *)(a1 + 2 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
      goto LABEL_12;
    case 9:
      a4 = *(float *)(a1 + 4 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
LABEL_12:
      result = (float)LODWORD(a4);
      break;
    case 10:
      result = (float)*(unint64_t *)(a1
                                          + 8 * (*(_QWORD *)(*a3 + 16) * a3[1] + *(_QWORD *)(*a3 + 24) * a3[2]));
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

uint64_t xgboost::ArrayInterface<1,true>::DispatchCall<unsigned int xgboost::ArrayInterface<1,true>::operator()<unsigned int,unsigned long &>(unsigned long &)::{lambda(unsigned int const*)#1}>(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = *(float *)(a1 + 4 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 1:
    case 2:
      result = *(double *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 3:
      result = *(char *)(a1 + *(_QWORD *)(a3 + 16) * a4);
      break;
    case 4:
      result = *(__int16 *)(a1 + 2 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 5:
    case 9:
      result = *(unsigned int *)(a1 + 4 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 6:
      result = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 7:
      result = *(unsigned __int8 *)(a1 + *(_QWORD *)(a3 + 16) * a4);
      break;
    case 8:
      result = *(unsigned __int16 *)(a1 + 2 * *(_QWORD *)(a3 + 16) * a4);
      break;
    case 10:
      result = *(_QWORD *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

float xgboost::ArrayInterface<1,true>::DispatchCall<float xgboost::ArrayInterface<1,true>::operator()<float,unsigned long &>(unsigned long &)::{lambda(float const*)#1}>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  float result;

  switch(a2)
  {
    case 0:
      return *(float *)(a1 + 4 * *(_QWORD *)(a3 + 16) * a4);
    case 1:
    case 2:
      return *(double *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
    case 3:
      return (float)*(char *)(a1 + *(_QWORD *)(a3 + 16) * a4);
    case 4:
      return (float)*(__int16 *)(a1 + 2 * *(_QWORD *)(a3 + 16) * a4);
    case 5:
      return (float)*(int *)(a1 + 4 * *(_QWORD *)(a3 + 16) * a4);
    case 6:
      return (float)*(uint64_t *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
    case 7:
      LOBYTE(a5) = *(_BYTE *)(a1 + *(_QWORD *)(a3 + 16) * a4);
      goto LABEL_12;
    case 8:
      LOWORD(a5) = *(_WORD *)(a1 + 2 * *(_QWORD *)(a3 + 16) * a4);
      goto LABEL_12;
    case 9:
      a5 = *(float *)(a1 + 4 * *(_QWORD *)(a3 + 16) * a4);
LABEL_12:
      result = (float)LODWORD(a5);
      break;
    case 10:
      result = (float)*(unint64_t *)(a1 + 8 * *(_QWORD *)(a3 + 16) * a4);
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

uint64_t dmlc::LogCheckFormat<unsigned long long,unsigned long long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E984BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
      __str = std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return __str;
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_220E98714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t dmlc::LogCheckFormat<unsigned int,unsigned long long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220E98928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(*a1);
    std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::destroy(a1[1]);
    xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(a1 + 5));
    operator delete(a1);
  }
}

void xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry(xgboost::XGBAPIThreadLocalEntry *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 18);
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v8 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

xgboost::XGBAPIThreadLocalEntry *xgboost::XGBAPIThreadLocalEntry::XGBAPIThreadLocalEntry(xgboost::XGBAPIThreadLocalEntry *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)this + 18, 0, 0.0);
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 24) = 0;
  return this;
}

void sub_220E98AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 120);
  if (v4)
  {
    *(_QWORD *)(v2 + 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 + 96);
  if (v5)
  {
    *(_QWORD *)(v2 + 104) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v2 + 72);
  if (v6)
  {
    *(_QWORD *)(v2 + 80) = v6;
    operator delete(v6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v7 = *(void **)(v2 + 24);
  if (v7)
  {
    *(_QWORD *)(v2 + 32) = v7;
    operator delete(v7);
  }
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v1 + 40));
    operator delete((void *)v1);
  }
}

uint64_t std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__erase_unique<xgboost::DMatrix const*>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__remove_node_pointer((uint64_t **)a1, v4);
  xgboost::XGBAPIThreadLocalEntry::~XGBAPIThreadLocalEntry((xgboost::XGBAPIThreadLocalEntry *)(v4 + 5));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::__map_value_compare<xgboost::DMatrix const*,std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>,std::less<xgboost::DMatrix const*>,true>,std::allocator<std::__value_type<xgboost::DMatrix const*,xgboost::XGBAPIThreadLocalEntry>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Max,unsigned long long>(unint64_t *result, unint64_t *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<std::vector<unsigned long>>::resize(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v3 = (_QWORD *)*a1;
  v4 = (char *)a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*a1] >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = (uint64_t)(a1 + 2);
    v8 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v4) >> 3) >= v6)
    {
      bzero(v4, 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v4[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v3) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v11);
    v13 = &v12[24 * v5];
    v15 = &v12[24 * v14];
    bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
    v16 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
    v17 = (_QWORD *)*a1;
    v18 = (_QWORD *)a1[1];
    if (v18 == (_QWORD *)*a1)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (!v18)
        return;
    }
    else
    {
      do
      {
        *((_QWORD *)v13 - 3) = 0;
        *((_QWORD *)v13 - 2) = 0;
        v13 -= 24;
        *((_QWORD *)v13 + 2) = 0;
        v19 = *(_OWORD *)(v18 - 3);
        v18 -= 3;
        *(_OWORD *)v13 = v19;
        *((_QWORD *)v13 + 2) = v18[2];
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      while (v18 != v17);
      v18 = (_QWORD *)*a1;
      v20 = (_QWORD *)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (v20 != v18)
      {
        v21 = v20;
        do
        {
          v23 = (void *)*(v21 - 3);
          v21 -= 3;
          v22 = v23;
          if (v23)
          {
            *(v20 - 2) = v22;
            operator delete(v22);
          }
          v20 = v21;
        }
        while (v21 != v18);
      }
      if (!v18)
        return;
    }
    operator delete(v18);
    return;
  }
  if (a2 < v5)
  {
    v24 = (char *)&v3[3 * a2];
    if (v4 != v24)
    {
      v25 = (char *)a1[1];
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v4 - 2) = v26;
          operator delete(v26);
        }
        v4 = v25;
      }
      while (v25 != v24);
    }
    a1[1] = v24;
  }
}

void xgboost::common::ParallelGroupBuilder<xgboost::Entry,unsigned long,false>::AddBudget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a3 - a2;
  v4 = *a1;
  v5 = a3 - a2 + 1;
  if (v5 > (a1[1] - *a1) >> 3)
  {
    v7 = 0;
    std::vector<unsigned long>::resize((uint64_t)a1, v5, &v7);
    v4 = *a1;
  }
  ++*(_QWORD *)(v4 + 8 * v3);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_220E992E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL xgboost::Entry::CmpIndex(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v63 = a2;
  v64 = a2 - 2;
  v62 = a2 - 3;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v10, v9);
        if ((_DWORD)result)
        {
          v28 = *v9;
          *v9 = *v10;
          *v10 = v28;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9, v9 + 1, v10, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9, v9 + 1, v9 + 2, v10, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9, v9 + 1, v9 + 2, v9 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v29 = v9 + 1;
          v30 = v9 == a2 || v29 == a2;
          v31 = v30;
          if ((a5 & 1) != 0)
          {
            if ((v31 & 1) == 0)
            {
              v32 = 0;
              v33 = v9;
              do
              {
                v34 = v33;
                v33 = v29;
                result = (*a3)(v29, v34);
                if ((_DWORD)result)
                {
                  v67 = *v33;
                  v35 = v32;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v35 + 8) = *(uint64_t *)((char *)v9 + v35);
                    if (!v35)
                      break;
                    v35 -= 8;
                    result = (*a3)(&v67, (uint64_t *)((char *)v9 + v35));
                    if ((result & 1) == 0)
                    {
                      v36 = (uint64_t *)((char *)v9 + v35 + 8);
                      goto LABEL_74;
                    }
                  }
                  v36 = v9;
LABEL_74:
                  *v36 = v67;
                }
                v29 = v33 + 1;
                v32 += 8;
              }
              while (v33 + 1 != a2);
            }
          }
          else if ((v31 & 1) == 0)
          {
            v59 = v9 - 1;
            do
            {
              v60 = v9;
              v9 = v29;
              result = (*a3)(v29, v60);
              if ((_DWORD)result)
              {
                v67 = *v9;
                v61 = v59;
                do
                {
                  v61[2] = v61[1];
                  result = (*a3)(&v67, v61--);
                }
                while ((result & 1) != 0);
                v61[2] = v67;
              }
              v29 = v9 + 1;
              ++v59;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v37 = (v13 - 2) >> 1;
            v65 = v37;
            do
            {
              v38 = v37;
              if (v65 >= v37)
              {
                v39 = (2 * v37) | 1;
                v40 = &v9[v39];
                if (2 * v37 + 2 < (uint64_t)v13 && (*a3)(&v9[v39], v40 + 1))
                {
                  ++v40;
                  v39 = 2 * v38 + 2;
                }
                v41 = &v9[v38];
                result = (*a3)(v40, v41);
                if ((result & 1) == 0)
                {
                  v67 = *v41;
                  do
                  {
                    v42 = v40;
                    *v41 = *v40;
                    if (v65 < v39)
                      break;
                    v43 = (2 * v39) | 1;
                    v40 = &v9[v43];
                    v44 = 2 * v39 + 2;
                    if (v44 < (uint64_t)v13 && (*a3)(&v9[v43], v40 + 1))
                    {
                      ++v40;
                      v43 = v44;
                    }
                    result = (*a3)(v40, &v67);
                    v41 = v42;
                    v39 = v43;
                  }
                  while (!(_DWORD)result);
                  *v42 = v67;
                }
              }
              v37 = v38 - 1;
            }
            while (v38);
            v45 = (unint64_t)v12 >> 3;
            v46 = v63;
            do
            {
              v47 = 0;
              v66 = *v9;
              v48 = v9;
              do
              {
                v49 = &v48[v47 + 1];
                v50 = (2 * v47) | 1;
                v51 = 2 * v47 + 2;
                if (v51 < v45)
                {
                  result = (*a3)(&v48[v47 + 1], &v48[v47 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v49;
                    v50 = v51;
                  }
                }
                *v48 = *v49;
                v48 = v49;
                v47 = v50;
              }
              while (v50 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
              v52 = v46 - 1;
              if (v49 == v52)
              {
                v53 = v52;
                *v49 = v66;
              }
              else
              {
                *v49 = *v52;
                v53 = v52;
                *v52 = v66;
                v54 = (char *)v49 - (char *)v9 + 8;
                if (v54 >= 9)
                {
                  v55 = (((unint64_t)v54 >> 3) - 2) >> 1;
                  v56 = &v9[v55];
                  result = (*a3)(v56, v49);
                  if ((_DWORD)result)
                  {
                    v67 = *v49;
                    do
                    {
                      v57 = v56;
                      *v49 = *v56;
                      if (!v55)
                        break;
                      v55 = (v55 - 1) >> 1;
                      v56 = &v9[v55];
                      result = (*a3)(v56, &v67);
                      v49 = v57;
                    }
                    while ((result & 1) != 0);
                    *v57 = v67;
                  }
                }
              }
              v58 = v45-- <= 2;
              v46 = v53;
            }
            while (!v58);
          }
          return result;
        }
        v14 = &v9[v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(&v9[v13 >> 1], v9, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9, &v9[v13 >> 1], v10, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9 + 1, v14 - 1, v64, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9 + 2, &v9[(v13 >> 1) + 1], v62, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v14 - 1, &v9[v13 >> 1], &v9[(v13 >> 1) + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(v9 - 1, v9) & 1) == 0)
        {
          v67 = *v9;
          result = (*a3)(&v67, v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            a2 = v63;
            do
              result = (*a3)(&v67, ++v11);
            while ((result & 1) == 0);
          }
          else
          {
            v24 = v9 + 1;
            a2 = v63;
            do
            {
              v11 = v24;
              if (v24 >= v63)
                break;
              result = (*a3)(&v67, v24);
              v24 = v11 + 1;
            }
            while (!(_DWORD)result);
          }
          v25 = a2;
          if (v11 < a2)
          {
            v25 = a2;
            do
              result = (*a3)(&v67, --v25);
            while ((result & 1) != 0);
          }
          while (v11 < v25)
          {
            v26 = *v11;
            *v11 = *v25;
            *v25 = v26;
            do
              ++v11;
            while (!(*a3)(&v67, v11));
            do
              result = (*a3)(&v67, --v25);
            while ((result & 1) != 0);
          }
          v27 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v27;
          a5 = 0;
          *v27 = v67;
          continue;
        }
        v16 = 0;
        v67 = *v9;
        do
          ++v16;
        while (((*a3)(&v9[v16], &v67) & 1) != 0);
        v17 = &v9[v16];
        v18 = v63;
        v30 = v16 == 1;
        a2 = v63;
        if (v30)
        {
          v18 = v63;
          do
          {
            if (v17 >= v18)
              break;
            --v18;
          }
          while (((*a3)(v18, &v67) & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*a3)(v18, &v67));
        }
        if (v17 >= v18)
        {
          v22 = v17 - 1;
        }
        else
        {
          v19 = v17;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              ++v19;
            while (((*a3)(v19, &v67) & 1) != 0);
            do
              --v20;
            while (!(*a3)(v20, &v67));
          }
          while (v19 < v20);
          v22 = v19 - 1;
        }
        if (v22 != v9)
          *v9 = *v22;
        *v22 = v67;
        if (v17 < v18)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*,false>(v9, v22, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v22 + 1;
          continue;
        }
        v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v9, v22, a3);
        v11 = v22 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(v22 + 1, v63, a3);
        if (!(_DWORD)result)
        {
          if (v23)
            continue;
          goto LABEL_32;
        }
        a2 = v22;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::Entry const&,xgboost::Entry const&),xgboost::Entry*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL xgboost::Entry::CmpValue(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

void std::vector<xgboost::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<void *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<xgboost::Entry>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost::Json>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_220E9A158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned long long>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<xgboost::Json>::__throw_length_error[abi:ne180100]();
    v5 = 3 * a2;
    v6 = 24 * a2;
    v7 = operator new(24 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v7, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_220E9A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<void *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220E9A2A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_rank_obj__(xgboost::obj *this)
{
  return 0;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::~LambdaRankObj()
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (_BYTE *)(a1 + 16));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E9A4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "rank:pairwise");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::LambdaRankParam>(v10, (void *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(v8, "lambda_rank_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E9A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (_BYTE *)(a1 + 16), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v7;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::vector<unsigned int> *v19;
  unsigned int *v20;
  uint64_t v21;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v23;
  std::vector<unsigned int>::pointer *p_end;
  _QWORD *v25;
  _QWORD *v26;
  std::vector<unsigned int>::pointer *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  float v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _DWORD *v66;
  int *v67;
  unsigned int v68;
  int v69;
  _QWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  char *v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  char *v81;
  float *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  char *v94;
  char *v95;
  float v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  int v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  float v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  float *v116;
  float *v117;
  float *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float *v126;
  float v127;
  uint64_t v128;
  float *v129;
  float v130;
  std::string *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  std::vector<unsigned int> *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  std::vector<unsigned int> v156;
  void *__p;
  _QWORD *v158;
  uint64_t v159;
  unsigned int v160;
  BOOL (*v161)(float *, float *);
  BOOL (*v162)(float *, float *);
  std::vector<unsigned int>::value_type __x[2];
  std::mutex v164[4];
  uint64_t v165;

  v7 = a3;
  v165 = *MEMORY[0x24BDAC8D0];
  __p = (void *)(((*a2)[1] - **a2) >> 2);
  v156.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8)
                                                               - **(_QWORD **)(a3 + 24)) >> 2);
  if (__p != v156.__begin_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v13 = *(char *)(*(_QWORD *)__x + 23);
      v14 = v13 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v15 = v13 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"label size predict size not match", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v18 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v18)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v18);
    }
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v156, 2uLL, __x);
  v19 = (std::vector<unsigned int> *)(v7 + 48);
  v20 = *(unsigned int **)(v7 + 48);
  v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) - **(_QWORD **)(v7 + 24)) >> 2;
  begin = v156.__begin_;
  v156.__begin_[1] = v21;
  v23 = *(unsigned int **)(v7 + 56);
  if (v23 == v20)
    v19 = &v156;
  else
    begin = v20;
  v148 = v19;
  if (v23 == v20)
    p_end = &v156.__end_;
  else
    p_end = (std::vector<unsigned int>::pointer *)(v7 + 56);
  if (*p_end == begin || v21 != *(*p_end - 1))
  {
    v131 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v131, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v132 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)": ", 2);
    v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"group structure not consistent with #rows", 41);
    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"group ponter size: ", 19);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"labels size: ", 13);
    v139 = (_QWORD *)std::ostream::operator<<();
    v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"rank:pairwise", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (SHIBYTE(v159) < 0)
      operator delete(__p);
  }
  v27 = &v156.__end_;
  if (v23 != v20)
    v27 = (std::vector<unsigned int>::pointer *)(v7 + 56);
  v28 = (unint64_t)((char *)*v27 - (char *)v148->__begin_) >> 2;
  v29 = (v28 - 1);
  if ((_DWORD)v28 == 1)
  {
    v30 = 0.0;
  }
  else
  {
    v30 = 0.0;
    v31 = **(float ***)(v7 + 72);
    v32 = (v28 - 1);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v7 + 72) + 8) == **(_QWORD **)(v7 + 72))
        v33 = 1.0;
      else
        v33 = *v31;
      v30 = v30 + v33;
      ++v31;
      --v32;
    }
    while (v32);
  }
  v34 = *(uint64_t **)(v7 + 24);
  v35 = v34[1];
  v145 = *(_QWORD *)(v7 + 40);
  v146 = *v34;
  v36 = *a5;
  v144 = *a2;
  v37 = (v144[1] - *v144) >> 2;
  *(_QWORD *)__x = 0;
  v147 = (uint64_t *)v36;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v36, v37, __x);
  *(_QWORD *)__x = 0;
  v164[0].__m_.__sig = 850045863;
  memset(v164[0].__m_.__opaque, 0, sizeof(v164[0].__m_.__opaque));
  v38 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  v39 = 1111 * a4
      + 1111
      + (((v38 + ((1111 * a4 + 1111 - v38) >> 1)) >> 30) | ((v38
                                                                                       + ((1111 * a4 + 1111 - v38) >> 1)) >> 30 << 31));
  if (v39 <= 1)
    v39 = 1;
  v160 = v39;
  __p = 0;
  v158 = 0;
  v159 = 0;
  if ((_DWORD)v29)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = (float)v29 / v30;
    v143 = (v35 - v146) >> 2;
    v153 = v7;
    v141 = v29;
    while (1)
    {
      v154 = v40;
      v155 = v44;
      v150 = v42;
      v46 = v148->__begin_[v40];
      v47 = v41;
      v149 = v40 + 1;
      if (v46 < v148->__begin_[v40 + 1])
      {
        do
        {
          v48 = v46 * v145;
          if (v46 * v145 >= v143)
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          v49 = *v144;
          if (v47 >= v150)
          {
            v52 = v41;
            v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v41) >> 2);
            v54 = v53 + 1;
            if (v53 + 1 > 0x1555555555555555)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v150 - v52) >> 2) > v54)
              v54 = 0x5555555555555556 * ((v150 - v52) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v150 - v52) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v55 = 0x1555555555555555;
            else
              v55 = v54;
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v55);
            v58 = *(_DWORD *)(v146 + 4 * v48);
            v59 = &v56[12 * v53];
            *(_DWORD *)v59 = *(_DWORD *)(v49 + 4 * v46);
            *((_DWORD *)v59 + 1) = v58;
            *((_DWORD *)v59 + 2) = v46;
            v41 = v59;
            if (v47 == v52)
            {
              v51 = v149;
            }
            else
            {
              v51 = v149;
              do
              {
                v60 = *(_QWORD *)(v47 - 12);
                v47 -= 12;
                v61 = *((_DWORD *)v47 + 2);
                *(_QWORD *)(v41 - 12) = v60;
                v41 -= 12;
                *((_DWORD *)v41 + 2) = v61;
              }
              while (v47 != v52);
            }
            v150 = &v56[12 * v57];
            v47 = v59 + 12;
            if (v52)
              operator delete(v52);
          }
          else
          {
            v50 = *(_DWORD *)(v146 + 4 * v48);
            *(_DWORD *)v47 = *(_DWORD *)(v49 + 4 * v46);
            *((_DWORD *)v47 + 1) = v50;
            *((_DWORD *)v47 + 2) = v46;
            v47 += 12;
            v51 = v149;
          }
          *(_QWORD *)(*v147 + 8 * v46++) = 0;
        }
        while (v46 < v148->__begin_[v51]);
      }
      v161 = xgboost::obj::ListEntry::CmpPred;
      if (v47 - v41 < 1537)
      {
        v62 = 0;
        v64 = 0;
      }
      else
      {
        v62 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v47 - v41) >> 2));
        v64 = v63;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v41, v47, (uint64_t (**)(uint64_t, uint64_t))&v161, 0xAAAAAAAAAAAAAAABLL * ((v47 - v41) >> 2), (uint64_t)v62, v64);
      if (v62)
        operator delete(v62);
      std::vector<std::pair<float,unsigned int>>::resize(&__p, 0xAAAAAAAAAAAAAAABLL * ((v47 - v41) >> 2));
      v65 = __p;
      if (v47 != v41)
      {
        v66 = (char *)__p + 4;
        v67 = (int *)(v41 + 4);
        v68 = 1;
        do
        {
          v69 = *v67;
          v67 += 3;
          *(v66 - 1) = v69;
          *v66 = v68 - 1;
          v66 += 2;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v47 - v41) >> 2) > v68++);
      }
      v71 = v158;
      v162 = xgboost::common::CmpFirst;
      v72 = ((char *)v158 - v65) >> 3;
      if ((char *)v158 - v65 < 1)
      {
        v73 = 0;
        v75 = 0;
      }
      else
      {
        v73 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v158 - v65) >> 3);
        v75 = v74;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v65, v71, (uint64_t (**)(uint64_t *, uint64_t *))&v162, v72, v73, v75);
      if (v73)
        operator delete(v73);
      v151 = v41;
      v76 = (float *)__p;
      v77 = (char *)v158;
      if (v158 != __p)
        break;
      v81 = v43;
LABEL_116:
      v112 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      v113 = *(float *)(a1 + 32);
      if (v113 == 0.0)
      {
        v114 = v141;
        v41 = v151;
        v40 = v149;
      }
      else
      {
        v40 = v149;
        v112 = v112 * (float)(v113 / (float)(v148->__begin_[v149] - v148->__begin_[v154]));
        v114 = v141;
        v41 = v151;
      }
      if (v43 != v81)
      {
        v115 = *v147;
        v116 = (float *)v43;
        do
        {
          v117 = (float *)&v41[12 * *(unsigned int *)v116];
          v118 = (float *)&v151[12 * *((unsigned int *)v116 + 1)];
          v119 = v112 * v116[2];
          v120 = *v117 - *v118;
          if (v120 >= -88.7)
            v121 = -v120;
          else
            v121 = 88.7;
          v122 = 1.0 / (float)((float)(expf(v121) + 1.0) + 1.0e-16);
          v123 = v122 + -1.0;
          v124 = v122 * (float)(1.0 - v122);
          if (v124 < 1.0e-16)
            v124 = 1.0e-16;
          v125 = (float)(v119 + v119) * v124;
          v126 = (float *)(v115 + 8 * *((unsigned int *)v117 + 2));
          v127 = v126[1] + v125;
          *v126 = *v126 + (float)(v119 * v123);
          v126[1] = v127;
          v128 = *((unsigned int *)v118 + 2);
          v41 = v151;
          v129 = (float *)(v115 + 8 * v128);
          v130 = v129[1] + v125;
          *v129 = *v129 - (float)(v119 * v123);
          v129[1] = v130;
          v116 += 3;
        }
        while (v116 != (float *)v81);
        v40 = v149;
      }
      v42 = v150;
      v44 = v155;
      if (v40 == v114)
      {
        if (__p)
        {
          v158 = __p;
          operator delete(__p);
        }
        if (v41)
          operator delete(v41);
        if (v43)
          operator delete(v43);
        goto LABEL_139;
      }
    }
    v78 = 0;
    v79 = 0;
    v80 = ((char *)v158 - (_BYTE *)__p) >> 3;
    v81 = v43;
    while (1)
    {
      v82 = &v76[2 * v78];
      v83 = v80 - 2;
      v84 = 1;
      do
      {
        v85 = v84;
        v86 = v83;
        v78 = v79 + v84;
        if (v80 <= v78)
          break;
        ++v84;
        --v83;
      }
      while (v76[2 * v78] == *v82);
      if (v86 != -1)
      {
        v87 = *(_DWORD *)(a1 + 24);
        if (v87)
          break;
      }
LABEL_113:
      v80 = (v77 - (char *)v76) >> 3;
      v79 = v78;
      if (v80 <= v78)
        goto LABEL_116;
    }
    while (1)
    {
      v152 = v87;
      if (v79 < v78)
        break;
LABEL_111:
      v87 = v152 - 1;
      if (v152 == 1)
      {
        v76 = (float *)__p;
        v77 = (char *)v158;
        goto LABEL_113;
      }
    }
    v88 = v79;
    while (1)
    {
      LODWORD(v162) = 0;
      HIDWORD(v162) = v86;
      v89 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v160, &v162);
      if (v89 >= v79)
      {
        v92 = **(_QWORD **)(v7 + 72);
        if (*(_QWORD *)(*(_QWORD *)(v7 + 72) + 8) == v92)
          v93 = 1.0;
        else
          v93 = *(float *)(v92 + 4 * v154);
        v94 = (char *)__p + 8 * v88 + 4;
        v95 = (char *)__p + 8 * v85 + 8 * v89 + 4;
        v96 = v45 * v93;
        if (v81 >= v155)
        {
          v107 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v43) >> 2) + 1;
          if (v107 > 0x1555555555555555)
LABEL_131:
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v155 - v43) >> 2) > v107)
            v107 = 0x5555555555555556 * ((v155 - v43) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v155 - v43) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v108 = 0x1555555555555555;
          else
            v108 = v107;
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v108);
          v109 = *(_DWORD *)v95;
          v102 = &v99[4 * ((v81 - v43) >> 2)];
          *(_DWORD *)v102 = *(_DWORD *)v94;
          *((_DWORD *)v102 + 1) = v109;
          *((float *)v102 + 2) = v96;
          v103 = v102;
          if (v81 != v43)
          {
            v7 = v153;
            do
            {
              v110 = *(_QWORD *)(v81 - 12);
              v81 -= 12;
              v111 = *((_DWORD *)v81 + 2);
              *(_QWORD *)(v103 - 12) = v110;
              v103 -= 12;
              *((_DWORD *)v103 + 2) = v111;
            }
            while (v81 != v43);
            goto LABEL_107;
          }
LABEL_106:
          v7 = v153;
LABEL_107:
          v155 = &v99[12 * v100];
          v81 = v102 + 12;
          if (v43)
            operator delete(v43);
          v43 = v103;
          goto LABEL_110;
        }
      }
      else
      {
        v90 = **(_QWORD **)(v7 + 72);
        if (*(_QWORD *)(*(_QWORD *)(v7 + 72) + 8) == v90)
          v91 = 1.0;
        else
          v91 = *(float *)(v90 + 4 * v154);
        v94 = (char *)__p + 8 * v89 + 4;
        v95 = (char *)__p + 8 * v88 + 4;
        v96 = v45 * v91;
        if (v81 >= v155)
        {
          v97 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v43) >> 2) + 1;
          if (v97 > 0x1555555555555555)
            goto LABEL_131;
          if (0x5555555555555556 * ((v155 - v43) >> 2) > v97)
            v97 = 0x5555555555555556 * ((v155 - v43) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v155 - v43) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v98 = 0x1555555555555555;
          else
            v98 = v97;
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v98);
          v101 = *(_DWORD *)v95;
          v102 = &v99[4 * ((v81 - v43) >> 2)];
          *(_DWORD *)v102 = *(_DWORD *)v94;
          *((_DWORD *)v102 + 1) = v101;
          *((float *)v102 + 2) = v96;
          v103 = v102;
          if (v81 == v43)
            goto LABEL_106;
          v7 = v153;
          do
          {
            v104 = *(_QWORD *)(v81 - 12);
            v81 -= 12;
            v105 = *((_DWORD *)v81 + 2);
            *(_QWORD *)(v103 - 12) = v104;
            v103 -= 12;
            *((_DWORD *)v103 + 2) = v105;
          }
          while (v81 != v43);
          goto LABEL_107;
        }
      }
      v106 = *(_DWORD *)v95;
      *(_DWORD *)v81 = *(_DWORD *)v94;
      *((_DWORD *)v81 + 1) = v106;
      *((float *)v81 + 2) = v96;
      v81 += 12;
LABEL_110:
      if (++v88 == v78)
        goto LABEL_111;
    }
  }
LABEL_139:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v164);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v156.__begin_)
  {
    v156.__end_ = v156.__begin_;
    operator delete(v156.__begin_);
  }
}

void sub_220E9B394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a37);
  if (v37)
    operator delete(v37);
  JUMPOUT(0x220E9B518);
}

void sub_220E9B3A4(void *a1, int a2)
{
  int v2;
  void *v3;
  void *v4;
  std::mutex *v7;
  std::exception_ptr v8[7];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4)
    operator delete(v4);
  if (v3)
    operator delete(v3);
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9B20CLL);
  }
  JUMPOUT(0x220E9B498);
}

void sub_220E9B3B4(void *a1, int a2)
{
  void *v2;
  void *v3;
  int v4;
  std::mutex *v7;
  std::exception_ptr v8[7];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3)
    operator delete(v3);
  if (v2)
    operator delete(v2);
  if (a2 == v4 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9B20CLL);
  }
  JUMPOUT(0x220E9B498);
}

void sub_220E9B3D0()
{
  JUMPOUT(0x220E9B3D8);
}

void sub_220E9B468()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9B4D0);
}

void sub_220E9B474()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9B4D0);
}

void sub_220E9B484(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a35 < 0)
    operator delete(__p);
  if (v35)
    operator delete(v35);
  JUMPOUT(0x220E9B518);
}

void sub_220E9B48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v38;

  v38 = a37;
  a37 = 0;
  if (v38)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a37, v38);
  _Unwind_Resume(a1);
}

void sub_220E9B4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a37);
  JUMPOUT(0x220E9B4B8);
}

void sub_220E9B4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220E9B4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a30);
  JUMPOUT(0x220E9B4F8);
}

void sub_220E9B510(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x220E9B518);
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::PairwiseLambdaWeightComputer>::Task()
{
  return 4;
}

void xgboost::FromJson<xgboost::obj::LambdaRankParam>(std::vector<std::pair<std::string, std::string>> *a1, _DWORD *a2, _BYTE *a3)
{
  xgboost::obj::LambdaRankParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __int128 *v15;

  v5 = (xgboost::obj::LambdaRankParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(a2);
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v15 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v15);
      v5 = (xgboost::obj::LambdaRankParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  if (*a3)
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F368E0, (uint64_t)a3, v13, v14, 0, a1, 0);
  }
  else
  {
    a1->__begin_ = 0;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(v5);
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&xmmword_253F368E0, (uint64_t)a3, v13, v14, a1, 0);
    *a3 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220E9B694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void xgboost::ToJson<xgboost::obj::LambdaRankParam>(uint64_t **a1, void *a2)
{
  uint64_t **v3;
  _QWORD **v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  std::vector<std::pair<std::string, std::string>> v9;
  char v10;
  _QWORD **v11;
  _QWORD *v12[2];
  std::vector<std::pair<std::string, std::string>> *v13;

  a1[1] = (uint64_t *)0x300000000;
  *a1 = (uint64_t *)&off_24E6BE1D0;
  a1[3] = 0;
  a1[2] = (uint64_t *)(a1 + 3);
  v3 = a1 + 2;
  a1[4] = 0;
  xgboost::obj::LambdaRankParam::__MANAGER__((xgboost::obj::LambdaRankParam *)a1);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&xmmword_253F368E0, a2, &v9);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&v11, (const void **)&v9.__begin_->first.__r_.__value_.__l.__data_, (const void **)&v9.__end_->first.__r_.__value_.__l.__data_);
  v13 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v4 = v11;
  if (v11 != v12)
  {
    do
    {
      xgboost::JsonString::JsonString(&v9, (__int128 *)(v4 + 7));
      v13 = (std::vector<std::pair<std::string, std::string>> *)(v4 + 4);
      v5 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
      xgboost::Json::operator=(v5 + 7, (uint64_t)&v9);
      v9.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)off_24E6BE2B8;
      if (v10 < 0)
        operator delete(v9.__end_cap_.__value_);
      v6 = v4[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v4[2];
          v8 = *v7 == v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_220E9B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a21 = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)v21 = v23 + 16;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy(v22, *(_QWORD **)(v21 + 24));
  _Unwind_Resume(a1);
}

void xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::obj::LambdaRankParam *a1, _BYTE *a2, uint64_t *a3)
{
  if (*a2)
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F368E0, (uint64_t)a2, *a3, a3[1], 0, (uint64_t *)a1, 0);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    xgboost::obj::LambdaRankParam::__MANAGER__(a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&xmmword_253F368E0, (uint64_t)a2, *a3, a3[1], (uint64_t *)a1, 0);
    *a2 = 1;
  }
}

void sub_220E9B928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::obj::ListEntry::CmpPred(float *a1, float *a2)
{
  return *a1 > *a2;
}

void std::vector<std::pair<float,unsigned int>>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7, v11);
  v13 = &v12[8 * v5];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

void *std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xAAAAAAAAAAAAAAALL)
    v1 = 0xAAAAAAAAAAAAAAALL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(12 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = a2 - 12;
      result = (*a3)((uint64_t)(a2 - 12), result);
      if ((_DWORD)result)
      {
        v10 = *(_DWORD *)(v8 + 8);
        v11 = *(_QWORD *)v8;
        v12 = *((_DWORD *)a2 - 1);
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(_QWORD *)v9 = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v24 = a5;
      v25 = a4 >> 1;
      v26 = result + 12 * (a4 >> 1);
      v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v26, a3, v27, a5);
        v28 = v24 + 12 * v25;
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8 + 12 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        v29 = v24 + 12 * a4;
        v30 = v28;
        while (v30 != v29)
        {
          result = (*a3)(v30, v24);
          if ((_DWORD)result)
          {
            v31 = *(_QWORD *)v30;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v30 + 8);
            *(_QWORD *)v8 = v31;
            v30 += 12;
          }
          else
          {
            v32 = *(_QWORD *)v24;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v24 + 8);
            *(_QWORD *)v8 = v32;
            v24 += 12;
          }
          v8 += 12;
          if (v24 == v28)
          {
            if (v30 != v29)
            {
              v33 = 0;
              do
              {
                v34 = v8 + v33;
                v35 = *(_QWORD *)(v30 + v33);
                *(_DWORD *)(v34 + 8) = *(_DWORD *)(v30 + v33 + 8);
                *(_QWORD *)v34 = v35;
                v33 += 12;
              }
              while (v30 + v33 != v29);
            }
            return result;
          }
        }
        if (v24 != v28)
        {
          v36 = 0;
          do
          {
            v37 = v8 + v36;
            v38 = *(_QWORD *)(v24 + v36);
            *(_DWORD *)(v37 + 8) = *(_DWORD *)(v24 + v36 + 8);
            *(_QWORD *)v37 = v38;
            v36 += 12;
          }
          while (v24 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8 + 12 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v24, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v8, (char *)(v8 + 12 * (a4 >> 1)), a2, (uint64_t (**)(char *, char *))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v24, a6);
      }
    }
    else if ((char *)result != a2)
    {
      v14 = result + 12;
      if ((char *)(result + 12) != a2)
      {
        v15 = 0;
        v16 = result;
        do
        {
          v17 = v16;
          v16 = v14;
          result = (*a3)(v14, v17);
          if ((_DWORD)result)
          {
            v18 = *(_QWORD *)v16;
            v40 = *(_DWORD *)(v16 + 8);
            v39 = v18;
            v19 = v15;
            while (1)
            {
              v20 = v8 + v19;
              *(_QWORD *)(v20 + 12) = *(_QWORD *)(v8 + v19);
              *(_DWORD *)(v20 + 20) = *(_DWORD *)(v8 + v19 + 8);
              if (!v19)
                break;
              v19 -= 12;
              result = (*a3)((uint64_t)&v39, v19 + v8);
              if ((result & 1) == 0)
              {
                v21 = v8 + v19 + 12;
                goto LABEL_15;
              }
            }
            v21 = v8;
LABEL_15:
            v22 = v39;
            *(_DWORD *)(v21 + 8) = v40;
            *(_QWORD *)v21 = v22;
          }
          v14 = v16 + 12;
          v15 += 12;
        }
        while ((char *)(v16 + 12) != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v9 = result;
    if (a4 == 2)
    {
      v11 = (uint64_t *)(a2 - 12);
      result = (*a3)(a2 - 12, result);
      if ((_DWORD)result)
      {
        v12 = *v11;
        *(_DWORD *)(v5 + 8) = *((_DWORD *)v11 + 2);
        *(_QWORD *)v5 = v12;
        v13 = *(_QWORD *)v9;
        v14 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        v23 = *(_QWORD *)v9;
        *(_DWORD *)(v5 + 8) = *(_DWORD *)(v9 + 8);
        *(_QWORD *)v5 = v23;
        v13 = *v11;
        v14 = *((_DWORD *)v11 + 2);
      }
      *(_DWORD *)(v5 + 20) = v14;
      *(_QWORD *)(v5 + 12) = v13;
    }
    else if (a4 == 1)
    {
      v10 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      v24 = result + 12 * (a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(result, v24, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v9 + 12 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v5 + 12 * (a4 >> 1), a4 - (a4 >> 1));
      v25 = v9 + 12 * (a4 >> 1);
      while (v25 != a2)
      {
        result = (*a3)(v25, v9);
        if ((_DWORD)result)
        {
          v26 = *(_QWORD *)v25;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v25 + 8);
          *(_QWORD *)v5 = v26;
          v25 += 12;
        }
        else
        {
          v27 = *(_QWORD *)v9;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v9 + 8);
          *(_QWORD *)v5 = v27;
          v9 += 12;
        }
        v5 += 12;
        if (v9 == v24)
        {
          if (v25 != a2)
          {
            v28 = 0;
            do
            {
              v29 = v5 + v28;
              v30 = *(_QWORD *)(v25 + v28);
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v25 + v28 + 8);
              *(_QWORD *)v29 = v30;
              v28 += 12;
            }
            while (v25 + v28 != a2);
          }
          return result;
        }
      }
      if (v9 != v24)
      {
        v31 = 0;
        do
        {
          v32 = v5 + v31;
          v33 = *(_QWORD *)(v9 + v31);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v9 + v31 + 8);
          *(_QWORD *)v32 = v33;
          v31 += 12;
        }
        while (v9 + v31 != v24);
      }
    }
    else if (result != a2)
    {
      v15 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v15;
      v16 = result + 12;
      if (result + 12 != a2)
      {
        v17 = 0;
        v18 = a5;
        do
        {
          v19 = v18;
          v18 += 12;
          result = (*a3)(v16, v19);
          v20 = v18;
          if ((_DWORD)result)
          {
            *(_QWORD *)v18 = *(_QWORD *)v19;
            *(_DWORD *)(v18 + 8) = *(_DWORD *)(v19 + 8);
            v20 = v5;
            if (v19 != v5)
            {
              v21 = v17;
              while (1)
              {
                v20 = v5 + v21;
                result = (*a3)(v16, v5 + v21 - 12);
                if (!(_DWORD)result)
                  break;
                *(_QWORD *)v20 = *(_QWORD *)(v5 + v21 - 12);
                *(_DWORD *)(v20 + 8) = *(_DWORD *)(v5 + v21 - 4);
                v21 -= 12;
                if (!v21)
                {
                  v20 = v5;
                  break;
                }
              }
            }
          }
          v22 = *(_QWORD *)v16;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v16 + 8);
          *(_QWORD *)v20 = v22;
          v16 += 12;
          v17 += 12;
        }
        while (v16 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(char *, char *), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t (*v27)(char *, char *);
  unint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (**v83)(char *, char *);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *__src;
  char *__srca;
  char *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;

  v94 = a6;
  if (a6)
  {
    v13 = (char *)result;
    while (a5 > a8 && v94 > a8)
    {
      if (!a5)
        return result;
      v14 = 0;
      v15 = -a5;
      while (1)
      {
        v16 = &v13[v14];
        result = (*a4)(a2, &v13[v14]);
        if ((result & 1) != 0)
          break;
        v14 += 12;
        if (__CFADD__(v15++, 1))
          return result;
      }
      v18 = -v15;
      v19 = v94;
      v92 = a3;
      if (-v15 >= v94)
      {
        if (v15 == -1)
        {
          v76 = &v13[v14];
          v104 = *(_DWORD *)&v13[v14 + 8];
          v99 = *(_QWORD *)&v13[v14];
          v77 = *(_QWORD *)a2;
          *((_DWORD *)v76 + 2) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v76 = v77;
          *(_QWORD *)a2 = v99;
          *((_DWORD *)a2 + 2) = v104;
          return result;
        }
        if (v15 > 0)
          v18 = 1 - v15;
        v24 = v18 >> 1;
        v26 = a3;
        v22 = &v13[12 * (v18 >> 1) + v14];
        v25 = a2;
        if (a2 != v26)
        {
          v81 = v18 >> 1;
          v83 = a4;
          v87 = v13;
          v27 = *a4;
          v28 = 0xAAAAAAAAAAAAAAABLL * ((v92 - a2) >> 2);
          __srca = a2;
          do
          {
            v29 = &a2[12 * (v28 >> 1)];
            v30 = v27(v29, v22);
            if (v30)
              v28 += ~(v28 >> 1);
            else
              v28 >>= 1;
            if (v30)
              a2 = v29 + 12;
          }
          while (v28);
          v13 = v87;
          v24 = v81;
          a4 = v83;
          v25 = __srca;
          v19 = v94;
        }
        v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v25) >> 2);
      }
      else
      {
        if (v94 >= 0)
          v20 = v94;
        else
          v20 = v94 + 1;
        v21 = v20 >> 1;
        v22 = a2;
        a2 += 12 * (v20 >> 1);
        __src = v22;
        if (v22 - v13 != v14)
        {
          v82 = v20 >> 1;
          v86 = v13;
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v13 - v14) >> 2);
          v22 = v16;
          do
          {
            if ((*a4)(a2, &v22[12 * (v23 >> 1)]))
            {
              v23 >>= 1;
            }
            else
            {
              v22 += 12 * (v23 >> 1) + 12;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          v13 = v86;
          v19 = v94;
          v21 = v82;
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v13 - v14) >> 2);
        v25 = __src;
      }
      if (v22 == v25)
      {
        v35 = a2;
      }
      else
      {
        v31 = a2 - v25;
        if (a2 == v25)
        {
          v35 = v22;
        }
        else
        {
          v32 = v22 + 12;
          if (v22 + 12 == v25)
          {
            v101 = *((_DWORD *)v22 + 2);
            v96 = *(_QWORD *)v22;
            v88 = a7;
            v38 = v24;
            v84 = v21;
            memmove(v22, v25, a2 - v25);
            v21 = v84;
            v24 = v38;
            a7 = v88;
            v19 = v94;
            v39 = &v22[v31];
            *(_QWORD *)v39 = v96;
            v35 = &v22[v31];
            *((_DWORD *)v39 + 2) = v101;
          }
          else
          {
            v33 = v25 + 12;
            if (v25 + 12 == a2)
            {
              v102 = *((_DWORD *)a2 - 1);
              v97 = *(_QWORD *)(a2 - 12);
              if (a2 - 12 != v22)
              {
                v89 = a7;
                v40 = v24;
                v85 = v21;
                memmove(v22 + 12, v22, a2 - 12 - v22);
                v21 = v85;
                v24 = v40;
                a7 = v89;
                v19 = v94;
              }
              v35 = v22 + 12;
              *((_DWORD *)v22 + 2) = v102;
              *(_QWORD *)v22 = v97;
            }
            else
            {
              v34 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v22) >> 2);
              if (v34 == 0xAAAAAAAAAAAAAAABLL * (v31 >> 2))
              {
                v35 = v25;
                do
                {
                  v100 = *((_DWORD *)v32 - 1);
                  v95 = *(_QWORD *)(v32 - 12);
                  v36 = *(_QWORD *)(v33 - 12);
                  *((_DWORD *)v32 - 1) = *((_DWORD *)v33 - 1);
                  *(_QWORD *)(v32 - 12) = v36;
                  *(_QWORD *)(v33 - 12) = v95;
                  *((_DWORD *)v33 - 1) = v100;
                  if (v32 == v25)
                    break;
                  v32 += 12;
                  v37 = v33 == a2;
                  v33 += 12;
                }
                while (!v37);
              }
              else
              {
                v41 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 2);
                v42 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v22) >> 2);
                do
                {
                  v43 = v42;
                  v42 = v41;
                  v41 = v43 % v41;
                }
                while (v41);
                if (v42)
                {
                  v44 = &v22[12 * v42];
                  do
                  {
                    v45 = *(_QWORD *)(v44 - 12);
                    v44 -= 12;
                    v103 = *((_DWORD *)v44 + 2);
                    v98 = v45;
                    v46 = &v44[4 * ((v25 - v22) >> 2)];
                    v47 = v44;
                    do
                    {
                      v48 = v46;
                      v49 = *(_QWORD *)v46;
                      *((_DWORD *)v47 + 2) = *((_DWORD *)v48 + 2);
                      *(_QWORD *)v47 = v49;
                      v50 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v48) >> 2);
                      v46 = (char *)v48 + 4 * ((v25 - v22) >> 2);
                      v51 = __OFSUB__(v34, v50);
                      v53 = v34 - v50;
                      v52 = (v53 < 0) ^ v51;
                      v54 = &v22[12 * v53];
                      if (!v52)
                        v46 = v54;
                      v47 = (char *)v48;
                    }
                    while (v46 != v44);
                    *((_DWORD *)v48 + 2) = v103;
                    *v48 = v98;
                  }
                  while (v44 != v22);
                }
                v35 = &v22[4 * (v31 >> 2)];
              }
            }
          }
        }
      }
      a5 = -v24 - v15;
      if (v24 + v21 >= v19 - (v24 + v21) - v15)
      {
        v58 = v35;
        v59 = v24;
        v60 = a5;
        v61 = v21;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v35, a2, v92, a4, v60, v19 - v21, a7, a8);
        a2 = v22;
        v57 = v61;
        a5 = v59;
        a3 = v58;
      }
      else
      {
        v55 = &v13[v14];
        v16 = v35;
        v56 = v19 - v21;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>(v55, v22, v35, a4, v24, v21, a7, a8);
        v57 = v56;
        a3 = v92;
      }
      v94 = v57;
      v13 = v16;
      if (!v57)
        return result;
    }
    if (a5 <= v94)
    {
      if (v13 != a2)
      {
        v70 = 0;
        do
        {
          v71 = &a7[v70];
          v72 = *(_QWORD *)&v13[v70];
          *((_DWORD *)v71 + 2) = *(_DWORD *)&v13[v70 + 8];
          *(_QWORD *)v71 = v72;
          v70 += 12;
        }
        while (&v13[v70] != a2);
        if (v70)
        {
          v73 = a7;
          while (a2 != a3)
          {
            result = (*a4)(a2, v73);
            if ((_DWORD)result)
            {
              v74 = *(_QWORD *)a2;
              *((_DWORD *)v13 + 2) = *((_DWORD *)a2 + 2);
              *(_QWORD *)v13 = v74;
              a2 += 12;
            }
            else
            {
              v75 = *(_QWORD *)v73;
              *((_DWORD *)v13 + 2) = *((_DWORD *)v73 + 2);
              *(_QWORD *)v13 = v75;
              v73 += 12;
            }
            v13 += 12;
            if (&a7[v70] == v73)
              return result;
          }
          return (uint64_t)memmove(v13, v73, a7 - v73 + v70);
        }
      }
    }
    else if (a3 != a2)
    {
      v62 = 0;
      do
      {
        v63 = &a7[v62];
        v64 = *(_QWORD *)&a2[v62];
        *((_DWORD *)v63 + 2) = *(_DWORD *)&a2[v62 + 8];
        *(_QWORD *)v63 = v64;
        v62 += 12;
      }
      while (&a2[v62] != a3);
      if (v62)
      {
        v65 = &a7[v62];
        v66 = a3 - 12;
        while (a2 != v13)
        {
          result = (*a4)(v65 - 12, a2 - 12);
          if ((_DWORD)result)
            v67 = a2 - 12;
          else
            v67 = v65 - 12;
          if ((_DWORD)result)
            a2 -= 12;
          v68 = *((_DWORD *)v67 + 2);
          v69 = *(_QWORD *)v67;
          if (!(_DWORD)result)
            v65 -= 12;
          *(_QWORD *)v66 = v69;
          *((_DWORD *)v66 + 2) = v68;
          v66 -= 12;
          if (v65 == a7)
            return result;
        }
        v78 = 0;
        do
        {
          v79 = &v66[v78];
          v80 = *(_QWORD *)&v65[v78 - 12];
          *((_DWORD *)v79 + 2) = *(_DWORD *)&v65[v78 - 4];
          *(_QWORD *)v79 = v80;
          v78 -= 12;
        }
        while (&v65[v78] != a7);
      }
    }
  }
  return result;
}

uint64_t std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  __int128 v23;

  v2 = a2[1];
  v3 = v2 - *a2;
  if ((_DWORD)v2 == *a2)
    return v2;
  v4 = v3 + 1;
  if (v3 == -1)
  {
    v20 = a1;
    v21 = xmmword_220F61DF0;
    v22 = vdupq_n_s64(2uLL);
    v23 = xmmword_220F61E00;
    return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v20);
  }
  v6 = __clz(v4);
  v7 = 31;
  if (((v4 << v6) & 0x7FFFFFFF) != 0)
    v7 = 32;
  v8 = v7 - v6;
  v20 = a1;
  *(_QWORD *)&v21 = v7 - v6;
  v9 = (unint64_t)(v7 - v6) >= 0x1E;
  v10 = v7 - v6 - 30;
  if (!v9)
    v10 = v8;
  v11 = v10 != 0;
  if (v8 <= 0x1D)
    v12 = v11;
  else
    v12 = v11 + 1;
  v13 = v8 / v12;
  *((_QWORD *)&v21 + 1) = v13;
  v22.i64[0] = v12;
  v14 = (-1 << v13) & 0x7FFFFFFE;
  if (v13 >= 0x20)
    v14 = 0;
  LODWORD(v23) = v14;
  if (v14 / v12 < (v14 ^ 0x7FFFFFFE))
  {
    v13 = v8 / ++v12;
    *((_QWORD *)&v21 + 1) = v13;
    v22.i64[0] = v12;
    if (v13 > 0x1F)
    {
      LODWORD(v23) = 0;
      v22.i64[1] = v12 - (v8 % v12);
      v13 = 32;
      goto LABEL_19;
    }
    LODWORD(v23) = (-1 << (v8 / v12)) & 0x7FFFFFFE;
  }
  v22.i64[1] = v12 - v8 % v12;
  if (v13 > 0x1E)
  {
LABEL_19:
    v15 = 0;
    DWORD1(v23) = 0;
    goto LABEL_20;
  }
  DWORD1(v23) = (-2 << v13) & 0x7FFFFFFE;
  v15 = 1;
LABEL_20:
  v16 = 0xFFFFFFFF >> -(char)v13;
  if (!v13)
    v16 = 0;
  v17 = 0xFFFFFFFF >> ~(_BYTE)v13;
  if (!v15)
    v17 = -1;
  *((_QWORD *)&v23 + 1) = __PAIR64__(v17, v16);
  do
    v18 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v20);
  while (v18 >= v4);
  return *a2 + v18;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    LODWORD(result) = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      v12 = (_DWORD)result << v5;
      if (v5 >= 0x20)
        v12 = 0;
      result = ((v6 - 1) & *(_DWORD *)(a1 + 48)) + v12;
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v2 < v13)
  {
    v14 = *(unsigned int **)a1;
    v15 = *(_DWORD *)(a1 + 44);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 52);
    v18 = *v14;
    while (1)
    {
      v19 = v18 / 0xADC8;
      v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      v9 = v20 >= v19;
      v21 = v20 - v19;
      if (v9)
        v22 = 0;
      else
        v22 = 0x7FFFFFFF;
      v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        v23 = (_DWORD)result << (v16 + 1);
        if (v16 >= 0x1F)
          v23 = 0;
        result = ((v18 - 1) & v17) + v23;
        if (++v2 == v13)
          break;
      }
    }
    *v14 = v18;
  }
  return result;
}

double std::__function::__func<xgboost::obj::$_1,std::allocator<xgboost::obj::$_1>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)v0 = &off_24E6B9970;
  return result;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::~LambdaRankObj()
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (_BYTE *)(a1 + 16));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E9CB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "rank:ndcg");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::LambdaRankParam>(v10, (void *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(v8, "lambda_rank_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E9CC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (_BYTE *)(a1 + 16), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v21;
  std::vector<unsigned int> *v22;
  std::vector<unsigned int>::pointer *p_end;
  _QWORD *v24;
  _QWORD *v25;
  std::vector<unsigned int>::pointer *v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  float *v30;
  uint64_t v31;
  float v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  char *v40;
  char *v41;
  char *v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *ptr;
  _DWORD *v67;
  int *v68;
  unsigned int v69;
  int v70;
  BOOL v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  char *v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  char *v82;
  float *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  float v94;
  int *v95;
  int *v96;
  float v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  int *v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  const std::nothrow_t *v116;
  float v117;
  float *v118;
  uint64_t v119;
  float *v120;
  float *v121;
  float v122;
  float *v123;
  unint64_t v124;
  float *v125;
  float *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  unsigned int v131;
  float v132;
  float v133;
  float *v134;
  float v135;
  unsigned int v136;
  int v137;
  int v138;
  float v139;
  float v140;
  float v141;
  float v142;
  char *v143;
  float v144;
  float v145;
  uint64_t v146;
  float *v147;
  float *v148;
  float *v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  std::string *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  std::vector<unsigned int> *v175;
  char *v176;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  char *v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  char *v188;
  std::vector<unsigned int> v189;
  std::exception_ptr v190;
  _QWORD *v191;
  uint64_t v192;
  unsigned int v193;
  BOOL (*v194)(float *, float *);
  BOOL (*v195)(float *, float *);
  void *__p;
  float *v197;
  char v198;
  std::vector<unsigned int>::value_type __x[2];
  std::mutex v200[4];
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  __p = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v190.__ptr_ = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2);
  if (__p != v190.__ptr_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *(char *)(*(_QWORD *)__x + 23);
      v13 = v12 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v14 = v12 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label size predict size not match", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v17 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v17);
    }
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v189, 2uLL, __x);
  v18 = *(unsigned int **)(a3 + 48);
  v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  begin = v189.__begin_;
  v189.__begin_[1] = v19;
  v21 = *(unsigned int **)(a3 + 56);
  if (v21 == v18)
  {
    v22 = &v189;
  }
  else
  {
    begin = v18;
    v22 = (std::vector<unsigned int> *)(a3 + 48);
  }
  if (v21 == v18)
    p_end = &v189.__end_;
  else
    p_end = (std::vector<unsigned int>::pointer *)(a3 + 56);
  if (*p_end == begin || v19 != *(*p_end - 1))
  {
    v161 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v161, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v162 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)": ", 2);
    v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"group structure not consistent with #rows", 41);
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"group ponter size: ", 19);
    v167 = (_QWORD *)std::ostream::operator<<();
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"labels size: ", 13);
    v169 = (_QWORD *)std::ostream::operator<<();
    v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"rank:ndcg", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (v198 < 0)
      operator delete(__p);
  }
  v26 = &v189.__end_;
  if (v21 != v18)
    v26 = (std::vector<unsigned int>::pointer *)(a3 + 56);
  v27 = (unint64_t)((char *)*v26 - (char *)v22->__begin_) >> 2;
  v28 = (v27 - 1);
  if ((_DWORD)v27 == 1)
  {
    v29 = 0.0;
  }
  else
  {
    v29 = 0.0;
    v30 = **(float ***)(a3 + 72);
    v31 = (v27 - 1);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == **(_QWORD **)(a3 + 72))
        v32 = 1.0;
      else
        v32 = *v30;
      v29 = v29 + v32;
      ++v30;
      --v31;
    }
    while (v31);
  }
  v33 = *(_QWORD **)a2;
  v34 = *(uint64_t **)(a3 + 24);
  v35 = v34[1];
  v179 = *(_QWORD *)(a3 + 40);
  v180 = *v34;
  v36 = *a5;
  v37 = (uint64_t)(v33[1] - *v33) >> 2;
  *(_QWORD *)__x = 0;
  v181 = (uint64_t *)v36;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v36, v37, __x);
  *(_QWORD *)__x = 0;
  v200[0].__m_.__sig = 850045863;
  memset(v200[0].__m_.__opaque, 0, sizeof(v200[0].__m_.__opaque));
  v38 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  v39 = 1111 * a4
      + 1111
      + (((v38 + ((1111 * a4 + 1111 - v38) >> 1)) >> 30) | ((v38
                                                                                       + ((1111 * a4 + 1111 - v38) >> 1)) >> 30 << 31));
  if (v39 <= 1)
    v39 = 1;
  v193 = v39;
  v190.__ptr_ = 0;
  v191 = 0;
  v192 = 0;
  if ((_DWORD)v28)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v188 = 0;
    v43 = (float)v28 / v29;
    v178 = (v35 - v180) >> 2;
    v44 = 0;
    v175 = v22;
    v171 = v33;
    v172 = v28;
    while (1)
    {
      v45 = v22->__begin_[v44];
      v186 = v44;
      v182 = v44 + 1;
      v183 = v41;
      v46 = v40;
      if (v45 < v22->__begin_[v44 + 1])
      {
        do
        {
          v47 = v45 * v179;
          if (v45 * v179 >= v178)
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          v48 = v46;
          v49 = *v33;
          if (v48 >= v183)
          {
            v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v40) >> 2);
            v52 = v51 + 1;
            if (v51 + 1 > 0x1555555555555555)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v53 = v48;
            if (0x5555555555555556 * ((v183 - v40) >> 2) > v52)
              v52 = 0x5555555555555556 * ((v183 - v40) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v183 - v40) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v54 = 0x1555555555555555;
            else
              v54 = v52;
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v54);
            v57 = *(_DWORD *)(v180 + 4 * v47);
            v58 = &v55[12 * v51];
            *(_DWORD *)v58 = *(_DWORD *)(v49 + 4 * v45);
            *((_DWORD *)v58 + 1) = v57;
            *((_DWORD *)v58 + 2) = v45;
            v59 = v58;
            while (v53 != v40)
            {
              v60 = *(_QWORD *)(v53 - 12);
              v53 -= 12;
              v61 = *((_DWORD *)v53 + 2);
              *(_QWORD *)(v59 - 12) = v60;
              v59 -= 12;
              *((_DWORD *)v59 + 2) = v61;
            }
            v183 = &v55[12 * v56];
            v46 = v58 + 12;
            if (v40)
              operator delete(v40);
            v40 = v59;
          }
          else
          {
            v50 = *(_DWORD *)(v180 + 4 * v47);
            *(_DWORD *)v48 = *(_DWORD *)(v49 + 4 * v45);
            *((_DWORD *)v48 + 1) = v50;
            *((_DWORD *)v48 + 2) = v45;
            v46 = v48 + 12;
          }
          *(_QWORD *)(*v181 + 8 * v45++) = 0;
        }
        while (v45 < v22->__begin_[v182]);
      }
      v194 = xgboost::obj::ListEntry::CmpPred;
      v176 = v46;
      v62 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2);
      if (v46 - v40 < 1537)
      {
        v63 = 0;
        v65 = 0;
      }
      else
      {
        v63 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2));
        v65 = v64;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v40, v176, (uint64_t (**)(uint64_t, uint64_t))&v194, v62, (uint64_t)v63, v65);
      if (v63)
        operator delete(v63);
      std::vector<std::pair<float,unsigned int>>::resize(&v190, v62);
      ptr = v190.__ptr_;
      if (v176 != v40)
      {
        v67 = (char *)v190.__ptr_ + 4;
        v68 = (int *)(v40 + 4);
        v69 = 1;
        do
        {
          v70 = *v68;
          v68 += 3;
          *(v67 - 1) = v70;
          *v67 = v69 - 1;
          v67 += 2;
          v71 = v62 > v69++;
        }
        while (v71);
      }
      v173 = v62;
      v72 = v191;
      v195 = xgboost::common::CmpFirst;
      v73 = ((char *)v191 - ptr) >> 3;
      if ((char *)v191 - ptr < 1)
      {
        v74 = 0;
        v76 = 0;
      }
      else
      {
        v74 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(((char *)v191 - ptr) >> 3);
        v76 = v75;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)ptr, v72, (uint64_t (**)(uint64_t *, uint64_t *))&v195, v73, v74, v76);
      if (v74)
        operator delete(v74);
      v174 = v40;
      v77 = (float *)v190.__ptr_;
      v78 = (char *)v191;
      if (v191 != v190.__ptr_)
      {
        v79 = 0;
        v80 = 0;
        v81 = ((char *)v191 - (char *)v190.__ptr_) >> 3;
        v82 = v42;
        while (1)
        {
          v83 = &v77[2 * v79];
          v84 = v81 - 2;
          v85 = 1;
          do
          {
            v86 = v85;
            v87 = v84;
            v79 = v80 + v85;
            if (v81 <= v79)
              break;
            ++v85;
            --v84;
          }
          while (v77[2 * v79] == *v83);
          if (v87 != -1)
          {
            v88 = *(_DWORD *)(a1 + 24);
            if (v88)
              break;
          }
LABEL_112:
          v81 = (v78 - (char *)v77) >> 3;
          v80 = v79;
          if (v81 <= v79)
            goto LABEL_115;
        }
        while (1)
        {
          v184 = v88;
          if (v80 < v79)
            break;
LABEL_110:
          v88 = v184 - 1;
          if (v184 == 1)
          {
            v77 = (float *)v190.__ptr_;
            v78 = (char *)v191;
            goto LABEL_112;
          }
        }
        v89 = v80;
        while (2)
        {
          LODWORD(v195) = 0;
          HIDWORD(v195) = v87;
          v90 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v193, &v195);
          if (v90 >= v80)
          {
            v93 = **(_QWORD **)(a3 + 72);
            if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == v93)
              v94 = 1.0;
            else
              v94 = *(float *)(v93 + 4 * v186);
            v109 = (char *)v190.__ptr_ + 8 * v89 + 4;
            v110 = (int *)((char *)v190.__ptr_ + 8 * v86 + 8 * v90 + 4);
            v97 = v43 * v94;
            if (v82 >= v188)
            {
              v111 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v42) >> 2) + 1;
              if (v111 > 0x1555555555555555)
LABEL_160:
                std::vector<void *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v188 - v42) >> 2) > v111)
                v111 = 0x5555555555555556 * ((v188 - v42) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v188 - v42) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v112 = 0x1555555555555555;
              else
                v112 = v111;
              v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v112);
              v113 = *v110;
              v105 = &v102[4 * ((v82 - v42) >> 2)];
              *(_DWORD *)v105 = *v109;
              *((_DWORD *)v105 + 1) = v113;
              *((float *)v105 + 2) = v97;
              v106 = v105;
              while (v82 != v42)
              {
                v114 = *(_QWORD *)(v82 - 12);
                v82 -= 12;
                v115 = *((_DWORD *)v82 + 2);
                *(_QWORD *)(v106 - 12) = v114;
                v106 -= 12;
                *((_DWORD *)v106 + 2) = v115;
              }
              goto LABEL_106;
            }
            v98 = *v109;
            v99 = *v110;
LABEL_96:
            *(_DWORD *)v82 = v98;
            *((_DWORD *)v82 + 1) = v99;
            *((float *)v82 + 2) = v97;
            v82 += 12;
          }
          else
          {
            v91 = **(_QWORD **)(a3 + 72);
            if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == v91)
              v92 = 1.0;
            else
              v92 = *(float *)(v91 + 4 * v186);
            v95 = (int *)((char *)v190.__ptr_ + 8 * v90 + 4);
            v96 = (int *)((char *)v190.__ptr_ + 8 * v89 + 4);
            v97 = v43 * v92;
            if (v82 < v188)
            {
              v98 = *v95;
              v99 = *v96;
              goto LABEL_96;
            }
            v100 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v42) >> 2) + 1;
            if (v100 > 0x1555555555555555)
              goto LABEL_160;
            if (0x5555555555555556 * ((v188 - v42) >> 2) > v100)
              v100 = 0x5555555555555556 * ((v188 - v42) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v188 - v42) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v101 = 0x1555555555555555;
            else
              v101 = v100;
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v101);
            v104 = *v96;
            v105 = &v102[4 * ((v82 - v42) >> 2)];
            *(_DWORD *)v105 = *v95;
            *((_DWORD *)v105 + 1) = v104;
            *((float *)v105 + 2) = v97;
            v106 = v105;
            while (v82 != v42)
            {
              v107 = *(_QWORD *)(v82 - 12);
              v82 -= 12;
              v108 = *((_DWORD *)v82 + 2);
              *(_QWORD *)(v106 - 12) = v107;
              v106 -= 12;
              *((_DWORD *)v106 + 2) = v108;
            }
LABEL_106:
            v188 = &v102[12 * v103];
            v82 = v105 + 12;
            if (v42)
              operator delete(v42);
            v42 = v106;
          }
          if (++v89 == v79)
            goto LABEL_110;
          continue;
        }
      }
      v82 = v42;
LABEL_115:
      v40 = v174;
      v33 = v171;
      v116 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      std::vector<float>::vector(&__p, v173);
      v118 = (float *)__p;
      if (v176 != v174)
      {
        if (v173 <= 1)
          v119 = 1;
        else
          v119 = v173;
        v120 = (float *)(v174 + 4);
        v121 = (float *)__p;
        do
        {
          v122 = *v120;
          v120 += 3;
          v117 = v122;
          *v121++ = v122;
          --v119;
        }
        while (v119);
      }
      v123 = v197;
      v185 = v197 - v118;
      if ((char *)v197 - (char *)v118 < 513)
      {
LABEL_125:
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v118, v123, v185, 0, 0, v117);
      }
      else
      {
        v124 = v197 - v118;
        while (1)
        {
          v125 = (float *)operator new(4 * v124, v116);
          if (v125)
            break;
          v71 = v124 > 1;
          v124 >>= 1;
          if (!v71)
            goto LABEL_125;
        }
        v126 = v125;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v118, v123, v185, v125, v124, v117);
        operator delete(v126);
      }
      v127 = (float *)__p;
      v22 = v175;
      if ((((char *)v197 - (_BYTE *)__p) & 0x3FFFFFFFCLL) == 0)
        break;
      v128 = 0;
      v129 = ((unint64_t)((char *)v197 - (_BYTE *)__p) >> 2);
      v130 = 0.0;
      do
      {
        v131 = v127[v128];
        if (v131)
          v132 = (float)~(-1 << v131) / log2f((float)(v128 + 2));
        else
          v132 = 0.0;
        v130 = v130 + v132;
        ++v128;
      }
      while (v129 != v128);
      v133 = v130;
      v197 = v127;
      operator delete(v127);
      if (v133 == 0.0)
        goto LABEL_142;
      if (v42 != v82)
      {
        v134 = (float *)v42;
        v135 = 1.0 / v133;
        do
        {
          v136 = *((_DWORD *)v134 + 1);
          v137 = (int)*(float *)&v174[12 * *(unsigned int *)v134 + 4];
          v138 = (int)*(float *)&v174[12 * v136 + 4];
          v139 = 1.0 / log2f((float)*(unsigned int *)v134 + 2.0);
          v140 = log2f((float)v136 + 2.0);
          v141 = v135
               * (float)((float)((float)((float)(1.0 / v140) * (float)~(-1 << v138))
                               + (float)((float)~(-1 << v137) * v139))
                       - (float)((float)((float)(1.0 / v140) * (float)~(-1 << v137))
                               + (float)((float)~(-1 << v138) * v139)));
          v142 = -v141;
          if (v141 >= 0.0)
            v142 = v141;
          v134[2] = v134[2] * v142;
          v134 += 3;
        }
        while (v134 != (float *)v82);
      }
LABEL_145:
      v144 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      v145 = *(float *)(a1 + 32);
      if (v145 != 0.0)
        v144 = v144 * (float)(v145 / (float)(v175->__begin_[v182] - v175->__begin_[v186]));
      v41 = v183;
      if (v42 == v82)
      {
        v44 = v182;
      }
      else
      {
        v146 = *v181;
        v147 = (float *)v42;
        do
        {
          v148 = (float *)&v174[12 * *(unsigned int *)v147];
          v149 = (float *)&v174[12 * *((unsigned int *)v147 + 1)];
          v150 = v144 * v147[2];
          v151 = *v148 - *v149;
          if (v151 >= -88.7)
            v152 = -v151;
          else
            v152 = 88.7;
          v153 = 1.0 / (float)((float)(expf(v152) + 1.0) + 1.0e-16);
          v154 = v153 + -1.0;
          v155 = v153 * (float)(1.0 - v153);
          if (v155 < 1.0e-16)
            v155 = 1.0e-16;
          v156 = (float)(v150 + v150) * v155;
          v157 = (float *)(v146 + 8 * *((unsigned int *)v148 + 2));
          v158 = v157[1] + v156;
          *v157 = *v157 + (float)(v150 * v154);
          v157[1] = v158;
          v159 = (float *)(v146 + 8 * *((unsigned int *)v149 + 2));
          v160 = v159[1] + v156;
          *v159 = *v159 - (float)(v150 * v154);
          v159[1] = v160;
          v147 += 3;
        }
        while (v147 != (float *)v82);
        v44 = v182;
        v41 = v183;
      }
      if (v44 == v172)
      {
        if (v190.__ptr_)
        {
          v191 = v190.__ptr_;
          operator delete(v190.__ptr_);
        }
        if (v174)
          operator delete(v174);
        if (v42)
          operator delete(v42);
        goto LABEL_168;
      }
    }
    if (__p)
    {
      v197 = (float *)__p;
      operator delete(__p);
    }
LABEL_142:
    if (v42 != v82)
    {
      v143 = v42;
      do
      {
        *((_DWORD *)v143 + 2) = 0;
        v143 += 12;
      }
      while (v143 != v82);
    }
    goto LABEL_145;
  }
LABEL_168:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v200);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v189.__begin_)
  {
    v189.__end_ = v189.__begin_;
    operator delete(v189.__begin_);
  }
}

void sub_220E9DC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a41);
  if (v41)
    operator delete(v41);
  JUMPOUT(0x220E9DD9CLL);
}

void sub_220E9DC24(void *a1, int a2)
{
  int v2;
  void *v3;
  void *v4;
  std::mutex *v7;
  std::exception_ptr v8[10];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3)
    operator delete(v3);
  if (v4)
    operator delete(v4);
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9DA90);
  }
  JUMPOUT(0x220E9DD1CLL);
}

void sub_220E9DC38(void *a1, int a2)
{
  int v2;
  void *v3;
  void *v4;
  std::mutex *v7;
  std::exception_ptr v8[10];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v3)
    operator delete(v3);
  if (v4)
    operator delete(v4);
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9DA90);
  }
  JUMPOUT(0x220E9DD1CLL);
}

void sub_220E9DC54()
{
  JUMPOUT(0x220E9DC5CLL);
}

void sub_220E9DCEC()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9DD54);
}

void sub_220E9DCF8()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9DD54);
}

void sub_220E9DD08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;

  if (a43 < 0)
    operator delete(__p);
  if (v43)
    operator delete(v43);
  JUMPOUT(0x220E9DD9CLL);
}

void sub_220E9DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v42;

  v42 = a41;
  a41 = 0;
  if (v42)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a41, v42);
  _Unwind_Resume(a1);
}

void sub_220E9DD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a41);
  JUMPOUT(0x220E9DD3CLL);
}

void sub_220E9DD68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220E9DD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a38);
  JUMPOUT(0x220E9DD7CLL);
}

void sub_220E9DD94(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x220E9DD9CLL);
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::NDCGLambdaWeightComputer>::Task()
{
  return 4;
}

float std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *a1, float *a2, unint64_t a3, float *a4, uint64_t a5, float result)
{
  float *v7;
  float v8;
  float *v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float *v15;
  float *v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  float v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float v26;
  BOOL v27;
  _BOOL4 v28;
  unsigned int v29;
  float v30;
  uint64_t v31;
  char v32;
  float *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 1);
      v8 = *a1;
      if (result > *a1)
      {
        *a1 = result;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v17 = a4;
      v18 = a3 >> 1;
      v19 = &a1[a3 >> 1];
      v20 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v21 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, v20, a4, result);
        v22 = &v17[v18];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v22, v21);
        v23 = &v17[a3];
        v24 = v22;
        while (v24 != v23)
        {
          v25 = v24;
          result = *v24;
          v26 = *v17;
          v27 = *v24 <= *v17;
          v28 = *v24 > *v17;
          v29 = v27;
          if (v27)
            v30 = *v17;
          else
            v30 = result;
          v17 += v29;
          v24 = &v25[v28];
          *v7++ = v30;
          if (v17 == v22)
          {
            if (v24 != v23)
            {
              v31 = 0;
              if (result > v26)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v25[v32 & 1];
              do
              {
                result = v33[v31];
                v7[v31++] = result;
              }
              while (&v33[v31] != v23);
            }
            return result;
          }
        }
        if (v17 != v22)
        {
          v34 = 0;
          do
          {
            result = v17[v34];
            v7[v34++] = result;
          }
          while (&v17[v34] != v22);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, v20, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v17, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v7, &v7[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v17, a5);
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v13 = *v12;
          v12 = v10;
          result = *v10;
          if (*v10 > v13)
          {
            v14 = v11;
            while (1)
            {
              *(float *)((char *)a1 + v14 + 4) = v13;
              if (!v14)
                break;
              v13 = *(float *)((char *)a1 + v14 - 4);
              v14 -= 4;
              if (result <= v13)
              {
                v15 = (float *)((char *)a1 + v14 + 4);
                goto LABEL_15;
              }
            }
            v15 = a1;
LABEL_15:
            *v15 = result;
          }
          v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *a1, float *a2, unint64_t a3, float *a4, float result)
{
  float *v5;
  float *v7;
  float v9;
  BOOL v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  BOOL v23;
  _BOOL4 v24;
  float v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;

  if (a3)
  {
    v5 = a4;
    v7 = a1;
    if (a3 == 1)
    {
LABEL_9:
      result = *v7;
      *v5 = *v7;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v10 = v9 <= *a1;
      if (v9 <= *a1)
        v9 = *a1;
      *a4 = v9;
      v5 = a4 + 1;
      if (v10)
        v7 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v19 = &a1[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a1, v19, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v20 = &v7[a3 >> 1];
      while (v20 != a2)
      {
        v21 = v20;
        result = *v20;
        v22 = *v7;
        v23 = *v20 <= *v7;
        v24 = *v20 > *v7;
        if (v23)
          v25 = *v7;
        else
          v25 = result;
        v20 = &v21[v24];
        v7 += v23;
        *v5++ = v25;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            v26 = 0;
            v27 = &v21[result > v22];
            do
            {
              result = v27[v26];
              v5[v26++] = result;
            }
            while (&v27[v26] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        v28 = 0;
        do
        {
          result = v7[v28];
          v5[v28++] = result;
        }
        while (&v7[v28] != v19);
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 1;
      result = *a1;
      *a4 = *a1;
      if (a1 + 1 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v15 = *v14++;
          result = v15;
          if (*v11 <= v15)
          {
            *v14 = *v11;
          }
          else
          {
            v13[1] = result;
            v16 = a4;
            if (v13 != a4)
            {
              v17 = v12;
              while (1)
              {
                v16 = (float *)((char *)a4 + v17);
                v18 = *(float *)((char *)a4 + v17 - 4);
                if (*v11 <= v18)
                  break;
                *v16 = v18;
                v17 -= 4;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            result = *v11;
            *v16 = *v11;
          }
          ++v11;
          v12 += 4;
          v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

float *std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v7;
  float *v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  float *v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  float *v32;
  float v33;
  uint64_t v34;
  float *v35;
  float *v36;
  uint64_t v37;
  int v38;
  float v40;
  float *v41;
  int v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  int v48;
  int v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float *v72;
  float v73;
  uint64_t v74;
  float *v75;
  float v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;

  if (a5)
  {
    v7 = a5;
    v11 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = *a2;
      v14 = -a4;
      while (1)
      {
        v15 = v11[v12 / 4];
        if (v13 > v15)
          break;
        v12 += 4;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v17 = -v14;
      v18 = &v11[v12 / 4];
      if (-v14 >= v7)
      {
        if (v14 == -1)
        {
          v11[v12 / 4] = v13;
          *a2 = v15;
          return result;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v28 = v17 >> 1;
        v22 = &v11[(v17 >> 1) + v12 / 4];
        v21 = a2;
        if (a2 != a3)
        {
          v29 = a3 - a2;
          v21 = a2;
          do
          {
            v30 = v29 >> 1;
            v31 = &v21[v29 >> 1];
            v33 = *v31;
            v32 = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v33 > *v22)
              v21 = v32;
            else
              v29 = v30;
          }
          while (v29);
        }
        v20 = v21 - a2;
      }
      else
      {
        if (v7 >= 0)
          v19 = v7;
        else
          v19 = v7 + 1;
        v20 = v19 >> 1;
        v21 = &a2[v19 >> 1];
        v22 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          v23 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 2;
          v22 = &v11[v12 / 4];
          do
          {
            v24 = v23 >> 1;
            v25 = &v22[v23 >> 1];
            v27 = *v25;
            v26 = v25 + 1;
            v23 += ~(v23 >> 1);
            if (*v21 > v27)
              v23 = v24;
            else
              v22 = v26;
          }
          while (v23);
        }
        v28 = (uint64_t)((char *)v22 - (char *)v11 - v12) >> 2;
      }
      if (v22 == a2)
      {
        a2 = v21;
      }
      else
      {
        v34 = (char *)v21 - (char *)a2;
        if (v21 == a2)
        {
          a2 = v22;
        }
        else
        {
          v35 = v22 + 1;
          if (v22 + 1 == a2)
          {
            v40 = *v22;
            v83 = a6;
            v85 = a7;
            v41 = a3;
            v79 = v20;
            v81 = v28;
            memmove(v22, a2, (char *)v21 - (char *)a2);
            v20 = v79;
            v28 = v81;
            v18 = &v11[v12 / 4];
            a6 = v83;
            a7 = v85;
            a3 = v41;
            a2 = (float *)((char *)v22 + v34);
            *(float *)((char *)v22 + v34) = v40;
          }
          else
          {
            v36 = a2 + 1;
            if (a2 + 1 == v21)
            {
              v42 = *((_DWORD *)v21 - 1);
              a2 = v22 + 1;
              if (v21 - 1 != v22)
              {
                v84 = a6;
                v86 = a7;
                v43 = a3;
                v80 = v20;
                v82 = v28;
                memmove(v22 + 1, v22, (char *)(v21 - 1) - (char *)v22);
                v20 = v80;
                v28 = v82;
                v18 = &v11[v12 / 4];
                a6 = v84;
                a7 = v86;
                a3 = v43;
              }
              *(_DWORD *)v22 = v42;
            }
            else
            {
              v37 = a2 - v22;
              if (v37 == v34 >> 2)
              {
                do
                {
                  v38 = *((_DWORD *)v35 - 1);
                  *(v35 - 1) = *(v36 - 1);
                  *((_DWORD *)v36 - 1) = v38;
                  if (v35 == a2)
                    break;
                  ++v35;
                }
                while (v36++ != v21);
              }
              else
              {
                v44 = v34 >> 2;
                v45 = a2 - v22;
                do
                {
                  v46 = v45;
                  v45 = v44;
                  v44 = v46 % v44;
                }
                while (v44);
                if (v45)
                {
                  v47 = &v22[v45];
                  do
                  {
                    v48 = *((_DWORD *)v47-- - 1);
                    v49 = v48;
                    v50 = &v47[v37];
                    v51 = v47;
                    do
                    {
                      v52 = v50;
                      *v51 = *v50;
                      v53 = &v50[v37];
                      v54 = __OFSUB__(v37, v21 - v50);
                      v56 = v37 - (v21 - v50);
                      v55 = (v56 < 0) ^ v54;
                      v50 = &v22[v56];
                      if (v55)
                        v50 = v53;
                      v51 = v52;
                    }
                    while (v50 != v47);
                    *(_DWORD *)v52 = v49;
                  }
                  while (v47 != v22);
                }
                a2 = &v22[v34 >> 2];
              }
            }
          }
        }
      }
      a4 = -(v28 + v14);
      v57 = v7 - v20;
      if (v28 + v20 >= v7 - (v28 + v20) - v14)
      {
        v63 = a2;
        v64 = v21;
        v65 = v28;
        v66 = -(v28 + v14);
        v67 = v20;
        v68 = v7 - v20;
        v59 = a6;
        v60 = a7;
        v69 = v18;
        result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(a2, v64, a3, v66, v68);
        v62 = v69;
        a2 = v22;
        v57 = v67;
        a4 = v65;
        a3 = v63;
      }
      else
      {
        v58 = &v11[v12 / 4];
        v59 = a6;
        v60 = a7;
        v61 = a3;
        result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<float *>>(v58, v22, a2, v28, v20);
        a3 = v61;
        v62 = a2;
        a2 = v21;
      }
      v7 = v57;
      v11 = v62;
      a6 = v59;
      a7 = v60;
      if (!v57)
        return result;
    }
    if (a4 <= v7)
    {
      if (v11 != a2)
      {
        v74 = 0;
        do
        {
          a6[v74] = v11[v74];
          ++v74;
        }
        while (&v11[v74] != a2);
        if (v74 * 4)
        {
          v75 = a6;
          while (a2 != a3)
          {
            v76 = *a2;
            v77 = *a2 <= *v75;
            if (*a2 <= *v75)
              v76 = *v75;
            a2 += *a2 > *v75;
            v75 += v77;
            *v11++ = v76;
            if (&a6[v74] == v75)
              return result;
          }
          return (float *)memmove(v11, v75, (char *)a6 - (char *)v75 + v74 * 4);
        }
      }
    }
    else if (a3 != a2)
    {
      v70 = 0;
      do
      {
        a6[v70] = a2[v70];
        ++v70;
      }
      while (&a2[v70] != a3);
      if (v70 * 4)
      {
        v71 = &a6[v70];
        v72 = a3 - 1;
        while (a2 != v11)
        {
          v73 = *(v71 - 1);
          if (v73 <= *(a2 - 1))
            --v71;
          else
            v73 = *--a2;
          *v72-- = v73;
          if (v71 == a6)
            return result;
        }
        v78 = 0;
        do
        {
          v72[v78] = v71[v78 - 1];
          --v78;
        }
        while (&v71[v78] != a6);
      }
    }
  }
  return result;
}

double std::__function::__func<xgboost::obj::$_2,std::allocator<xgboost::obj::$_2>,xgboost::ObjFunction * ()(void)>::operator()()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)v0 = &off_24E6B9A78;
  return result;
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::~LambdaRankObj()
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::LoadConfig(uint64_t a1, _QWORD *a2)
{
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "lambda_rank_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::FromJson<xgboost::obj::LambdaRankParam>(&v7, *v4, (_BYTE *)(a1 + 16));
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220E9E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::SaveConfig(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unsigned int **v5;
  void *__p[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  uint64_t *v10[2];
  void *v11[2];
  uint64_t v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "rank:map");
  v10[1] = 0;
  *(_OWORD *)v11 = *(_OWORD *)v8;
  v12 = v9;
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10[0] = (uint64_t *)off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
  xgboost::Json::operator=(v4, (uint64_t)v10);
  if (v7 < 0)
    operator delete(__p[0]);
  v10[0] = (uint64_t *)off_24E6BE2B8;
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  xgboost::ToJson<xgboost::obj::LambdaRankParam>(v10, (void *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(v8, "lambda_rank_param");
  v5 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, v8);
  xgboost::Json::operator=(v5, (uint64_t)v10);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  v10[0] = (uint64_t *)&off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
}

void sub_220E9E924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,_QWORD *a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&__p, a25);
  _Unwind_Resume(a1);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::Configure(uint64_t a1, uint64_t *a2)
{
  _BYTE v2[24];
  void **v3;

  xgboost::XGBoostParameter<xgboost::obj::LambdaRankParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::obj::LambdaRankParam *)v2, (_BYTE *)(a1 + 16), a2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v21;
  std::vector<unsigned int> *v22;
  std::vector<unsigned int>::pointer *p_end;
  _QWORD *v24;
  _QWORD *v25;
  std::vector<unsigned int>::pointer *v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  float v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  std::vector<unsigned int> *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  int *v69;
  unsigned int v70;
  int v71;
  _QWORD *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  char *v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  char *v85;
  float *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  float v96;
  uint64_t v97;
  float v98;
  char *v99;
  char *v100;
  float v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  int v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  char *v117;
  int32x2_t v118;
  float32x2_t v119;
  unint64_t v120;
  uint64_t v121;
  float *v122;
  float32x2_t v123;
  float v124;
  char *v125;
  char *v126;
  float *v127;
  char *v128;
  int v129;
  int v130;
  float v131;
  float v132;
  float v133;
  BOOL v134;
  int v135;
  float v136;
  float v137;
  float v138;
  float v139;
  uint64_t v140;
  float *v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  uint64_t v147;
  float *v148;
  float *v149;
  float *v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float *v158;
  float v159;
  float *v160;
  float v161;
  std::string *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  std::vector<unsigned int> *v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  float *v176;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  char *v184;
  int v185;
  int v186;
  uint64_t v187;
  std::vector<unsigned int> v189;
  void *__p;
  _QWORD *v191;
  uint64_t v192;
  unsigned int v193;
  BOOL (*v194)(float *, float *);
  BOOL (*v195)(float *, float *);
  std::vector<unsigned int>::value_type __x[2];
  std::mutex v197[4];
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  __p = (void *)(((*a2)[1] - **a2) >> 2);
  v189.__begin_ = (std::vector<unsigned int>::pointer)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8)
                                                               - **(_QWORD **)(a3 + 24)) >> 2);
  if (__p != v189.__begin_)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__x);
    if (*(_QWORD *)__x)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v12 = *(char *)(*(_QWORD *)__x + 23);
      v13 = v12 >= 0 ? *(_QWORD *)__x : **(_QWORD **)__x;
      v14 = v12 >= 0 ? *(unsigned __int8 *)(*(_QWORD *)__x + 23) : *(_QWORD *)(*(_QWORD *)__x + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label size predict size not match", 33);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v17 = *(_QWORD *)__x;
      *(_QWORD *)__x = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__x, v17);
    }
  }
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v189, 2uLL, __x);
  v18 = *(unsigned int **)(a3 + 48);
  v19 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  begin = v189.__begin_;
  v189.__begin_[1] = v19;
  v21 = *(unsigned int **)(a3 + 56);
  if (v21 == v18)
  {
    v22 = &v189;
  }
  else
  {
    begin = v18;
    v22 = (std::vector<unsigned int> *)(a3 + 48);
  }
  if (v21 == v18)
    p_end = &v189.__end_;
  else
    p_end = (std::vector<unsigned int>::pointer *)(a3 + 56);
  if (*p_end == begin || v19 != *(*p_end - 1))
  {
    v162 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    dmlc::LogMessageFatal::Entry::Init(v162, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    v163 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
    v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Check failed: gptr.size() != 0 && gptr.back() == info.labels.Size()", 67);
    v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)": ", 2);
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"group structure not consistent with #rows", 41);
    v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"group ponter size: ", 19);
    v168 = (_QWORD *)std::ostream::operator<<();
    v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"labels size: ", 13);
    v170 = (_QWORD *)std::ostream::operator<<();
    v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"group pointer back: ", 20);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/rank_obj.cu");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__x, (uint64_t)&__p, 818, 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Computing ", 10);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"rank:map", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" gradients on CPU.", 18);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__x);
    if (SHIBYTE(v192) < 0)
      operator delete(__p);
  }
  v26 = &v189.__end_;
  if (v21 != v18)
    v26 = (std::vector<unsigned int>::pointer *)(a3 + 56);
  v27 = (unint64_t)((char *)*v26 - (char *)v22->__begin_) >> 2;
  v28 = (v27 - 1);
  if ((_DWORD)v27 == 1)
  {
    v29 = 0.0;
  }
  else
  {
    v29 = 0.0;
    v30 = **(float ***)(a3 + 72);
    v31 = (v27 - 1);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == **(_QWORD **)(a3 + 72))
        v32 = 1.0;
      else
        v32 = *v30;
      v29 = v29 + v32;
      ++v30;
      --v31;
    }
    while (v31);
  }
  v33 = *(uint64_t **)(a3 + 24);
  v34 = v33[1];
  v180 = *(_QWORD *)(a3 + 40);
  v181 = *v33;
  v35 = *a5;
  v179 = *a2;
  v36 = ((*a2)[1] - **a2) >> 2;
  *(_QWORD *)__x = 0;
  v182 = (uint64_t *)v35;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(v35, v36, __x);
  *(_QWORD *)__x = 0;
  v197[0].__m_.__sig = 850045863;
  memset(v197[0].__m_.__opaque, 0, sizeof(v197[0].__m_.__opaque));
  v37 = (3 * (unint64_t)(1111 * a4 + 1111)) >> 32;
  v38 = 1111 * a4
      + 1111
      + (((v37 + ((1111 * a4 + 1111 - v37) >> 1)) >> 30) | ((v37
                                                                                       + ((1111 * a4 + 1111 - v37) >> 1)) >> 30 << 31));
  if (v38 <= 1)
    v38 = 1;
  v193 = v38;
  __p = 0;
  v191 = 0;
  v192 = 0;
  if ((_DWORD)v28)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = (float)v28 / v29;
    v178 = (v34 - v181) >> 2;
    v173 = v28;
    v172 = v22;
    while (1)
    {
      v45 = v22->__begin_[v39];
      v187 = v39;
      v46 = v40;
      v183 = v39 + 1;
      v184 = v41;
      if (v45 < v22->__begin_[v39 + 1])
      {
        do
        {
          v47 = v45 * v180;
          if (v45 * v180 >= v178)
            __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
          v48 = v46;
          v49 = *v179;
          if (v48 >= v184)
          {
            v52 = v22;
            v53 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v40) >> 2);
            v54 = v53 + 1;
            if (v53 + 1 > 0x1555555555555555)
              std::vector<void *>::__throw_length_error[abi:ne180100]();
            v55 = v48;
            if (0x5555555555555556 * ((v184 - v40) >> 2) > v54)
              v54 = 0x5555555555555556 * ((v184 - v40) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v184 - v40) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v56 = 0x1555555555555555;
            else
              v56 = v54;
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v56);
            v59 = *(_DWORD *)(v181 + 4 * v47);
            v60 = &v57[12 * v53];
            *(_DWORD *)v60 = *(_DWORD *)(v49 + 4 * v45);
            *((_DWORD *)v60 + 1) = v59;
            *((_DWORD *)v60 + 2) = v45;
            v61 = v60;
            if (v55 == v40)
            {
              v51 = v183;
            }
            else
            {
              v51 = v183;
              do
              {
                v62 = *(_QWORD *)(v55 - 12);
                v55 -= 12;
                v63 = *((_DWORD *)v55 + 2);
                *(_QWORD *)(v61 - 12) = v62;
                v61 -= 12;
                *((_DWORD *)v61 + 2) = v63;
              }
              while (v55 != v40);
            }
            v184 = &v57[12 * v58];
            v46 = v60 + 12;
            if (v40)
              operator delete(v40);
            v40 = v61;
            v22 = v52;
          }
          else
          {
            v50 = *(_DWORD *)(v181 + 4 * v47);
            *(_DWORD *)v48 = *(_DWORD *)(v49 + 4 * v45);
            *((_DWORD *)v48 + 1) = v50;
            *((_DWORD *)v48 + 2) = v45;
            v46 = v48 + 12;
            v51 = v183;
          }
          *(_QWORD *)(*v182 + 8 * v45++) = 0;
        }
        while (v45 < v22->__begin_[v51]);
      }
      v194 = xgboost::obj::ListEntry::CmpPred;
      if (v46 - v40 < 1537)
      {
        v64 = 0;
        v66 = 0;
      }
      else
      {
        v64 = std::get_temporary_buffer[abi:ne180100]<xgboost::obj::ListEntry>(0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2));
        v66 = v65;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost::obj::ListEntry const&,xgboost::obj::ListEntry const&),std::__wrap_iter<xgboost::obj::ListEntry*>>((uint64_t)v40, v46, (uint64_t (**)(uint64_t, uint64_t))&v194, 0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2), (uint64_t)v64, v66);
      if (v64)
        operator delete(v64);
      std::vector<std::pair<float,unsigned int>>::resize(&__p, 0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2));
      v67 = __p;
      if (v46 != v40)
      {
        v68 = (char *)__p + 4;
        v69 = (int *)(v40 + 4);
        v70 = 1;
        do
        {
          v71 = *v69;
          v69 += 3;
          *(v68 - 1) = v71;
          *v68 = v70 - 1;
          v68 += 2;
          v134 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2) > v70++;
        }
        while (v134);
      }
      v72 = v191;
      v195 = xgboost::common::CmpFirst;
      v73 = ((char *)v191 - v67) >> 3;
      v74 = v43;
      if ((char *)v191 - v67 < 1)
      {
        v77 = 0;
        v79 = 0;
      }
      else
      {
        v75 = ((char *)v191 - v67) >> 3;
        v76 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v75);
        v73 = v75;
        v77 = v76;
        v79 = v78;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::__wrap_iter<std::pair<float,unsigned int>*>>((uint64_t)v67, v72, (uint64_t (**)(uint64_t *, uint64_t *))&v195, v73, v77, v79);
      if (v77)
        operator delete(v77);
      v174 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v40) >> 2);
      v175 = v46;
      v176 = (float *)v40;
      v80 = (float *)__p;
      v81 = (char *)v191;
      if (v191 != __p)
        break;
      v85 = v42;
LABEL_116:
      v40 = (char *)v176;
      v43 = v74;
      if (v175 == (char *)v176)
      {
        v126 = 0;
        v117 = 0;
        v22 = v172;
      }
      else
      {
        v22 = v172;
        if (v174 >> 60)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v117 = (char *)operator new(16 * v174);
        bzero(v117, 16 * v174);
        v120 = 0;
        if (v174 <= 1)
          v121 = 1;
        else
          v121 = v174;
        v122 = v176 + 1;
        v123 = 0;
        v124 = 0.0;
        v125 = v117;
        v118.i32[0] = 0;
        do
        {
          ++v120;
          if (*v122 > 0.0)
          {
            *(float *)v118.i32 = *(float *)v118.i32 + 1.0;
            v119.f32[0] = (float)v120;
            v124 = v124 + (float)(*(float *)v118.i32 / (float)v120);
            v119 = vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32(v118, 0), (float32x2_t)0x3F800000BF800000), (float32x2_t)vdup_lane_s32((int32x2_t)v119, 0));
            v123 = vadd_f32(v123, v119);
          }
          *(float *)v125 = v124;
          *(float32x2_t *)(v125 + 4) = v123;
          *((_DWORD *)v125 + 3) = v118.i32[0];
          v125 += 16;
          v122 += 3;
        }
        while (v121 != v120);
        v126 = &v117[16 * v174];
      }
      v41 = v184;
      if (v42 != v85)
      {
        v127 = (float *)&v117[16 * ((unint64_t)(v126 - v117) >> 4) - 4];
        v128 = v42;
        do
        {
          v129 = *(_DWORD *)v128;
          v130 = *((_DWORD *)v128 + 1);
          v131 = 0.0;
          if (*(_DWORD *)v128 != v130 && *v127 != 0.0)
          {
            v132 = v176[3 * v129 + 1];
            v133 = v176[3 * v130 + 1];
            v134 = v129 <= v130;
            if (v129 > v130)
              v135 = *((_DWORD *)v128 + 1);
            else
              v135 = *(_DWORD *)v128;
            if (v129 <= v130)
              v129 = *((_DWORD *)v128 + 1);
            if (v134)
              v136 = v132;
            else
              v136 = v176[3 * v130 + 1];
            if (!v134)
              v133 = v132;
            v137 = *(float *)&v117[16 * v129];
            if (v135)
              v137 = v137 - *(float *)&v117[16 * v135 - 16];
            v134 = v136 <= 0.0;
            v131 = 0.0;
            if (v134)
              v138 = 0.0;
            else
              v138 = 1.0;
            if (v133 <= 0.0)
              v139 = 0.0;
            else
              v139 = 1.0;
            if (v138 != v139)
            {
              v140 = v129 - 1;
              if (v138 >= v139)
              {
                v142 = *(float *)&v117[16 * v140 + 4] - *(float *)&v117[16 * v135 + 4];
                v143 = *(float *)&v117[16 * v129 + 12];
                v135 = v129;
              }
              else
              {
                v141 = (float *)&v117[16 * v135];
                v142 = *(float *)&v117[16 * v140 + 8] - v141[2];
                v143 = v141[3] + 1.0;
              }
              v144 = (float)((float)((float)(v142 + 0.0) + (float)(v143 / (float)(v135 + 1))) - v137) / *v127;
              if (v144 >= 0.0)
                v131 = (float)((float)((float)(v142 + 0.0) + (float)(v143 / (float)(v135 + 1))) - v137) / *v127;
              else
                v131 = -v144;
            }
          }
          *((float *)v128 + 2) = v131 * *((float *)v128 + 2);
          v128 += 12;
        }
        while (v128 != v85);
      }
      if (v117)
        operator delete(v117);
      v145 = 1.0 / (float)*(unint64_t *)(a1 + 24);
      v146 = *(float *)(a1 + 32);
      if (v146 != 0.0)
        v145 = v145 * (float)(v146 / (float)(v22->__begin_[v183] - v22->__begin_[v187]));
      if (v42 == v85)
      {
        v39 = v183;
      }
      else
      {
        v147 = *v182;
        v148 = (float *)v42;
        do
        {
          v149 = &v176[3 * *(unsigned int *)v148];
          v150 = &v176[3 * *((unsigned int *)v148 + 1)];
          v151 = v145 * v148[2];
          v152 = *v149 - *v150;
          if (v152 >= -88.7)
            v153 = -v152;
          else
            v153 = 88.7;
          v154 = 1.0 / (float)((float)(expf(v153) + 1.0) + 1.0e-16);
          v155 = v154 + -1.0;
          v156 = v154 * (float)(1.0 - v154);
          if (v156 < 1.0e-16)
            v156 = 1.0e-16;
          v157 = (float)(v151 + v151) * v156;
          v158 = (float *)(v147 + 8 * *((unsigned int *)v149 + 2));
          v159 = v158[1] + v157;
          *v158 = *v158 + (float)(v151 * v155);
          v158[1] = v159;
          v160 = (float *)(v147 + 8 * *((unsigned int *)v150 + 2));
          v161 = v160[1] + v157;
          *v160 = *v160 - (float)(v151 * v155);
          v160[1] = v161;
          v148 += 3;
        }
        while (v148 != (float *)v85);
        v39 = v183;
        v41 = v184;
      }
      if (v39 == v173)
      {
        if (__p)
        {
          v191 = __p;
          operator delete(__p);
        }
        if (v176)
          operator delete(v176);
        if (v42)
          operator delete(v42);
        goto LABEL_183;
      }
    }
    v82 = 0;
    v83 = 0;
    v84 = ((char *)v191 - (_BYTE *)__p) >> 3;
    v85 = v42;
    while (1)
    {
      v86 = &v80[2 * v82];
      v87 = v84 - 2;
      v88 = 1;
      do
      {
        v89 = v88;
        v90 = v87;
        v82 = v83 + v88;
        if (v84 <= v82)
          break;
        ++v88;
        --v87;
      }
      while (v80[2 * v82] == *v86);
      if (v90 != -1)
      {
        v91 = *(_DWORD *)(a1 + 24);
        if (v91)
          break;
      }
LABEL_113:
      v84 = (v81 - (char *)v80) >> 3;
      v83 = v82;
      if (v84 <= v82)
        goto LABEL_116;
    }
    v186 = v89;
    while (1)
    {
      v185 = v91;
      if (v83 < v82)
        break;
LABEL_111:
      v91 = v185 - 1;
      if (v185 == 1)
      {
        v80 = (float *)__p;
        v81 = (char *)v191;
        goto LABEL_113;
      }
    }
    v92 = v83;
    while (1)
    {
      LODWORD(v195) = 0;
      HIDWORD(v195) = v90;
      v93 = std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v193, &v195);
      if (v93 >= v83)
      {
        v97 = **(_QWORD **)(a3 + 72);
        v95 = (unint64_t)v74;
        if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == v97)
          v98 = 1.0;
        else
          v98 = *(float *)(v97 + 4 * v187);
        v99 = (char *)__p + 8 * v92 + 4;
        v100 = (char *)__p + 8 * v186 + 8 * v93 + 4;
        v101 = v44 * v98;
        if ((unint64_t)v85 >= v95)
        {
          v112 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v42) >> 2) + 1;
          if (v112 > 0x1555555555555555)
LABEL_174:
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v95 - (_QWORD)v42) >> 2) > v112)
            v112 = 0x5555555555555556 * ((uint64_t)(v95 - (_QWORD)v42) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)v42) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v113 = 0x1555555555555555;
          else
            v113 = v112;
          v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v113);
          v114 = *(_DWORD *)v100;
          v107 = &v104[4 * ((v85 - v42) >> 2)];
          *(_DWORD *)v107 = *(_DWORD *)v99;
          *((_DWORD *)v107 + 1) = v114;
          *((float *)v107 + 2) = v101;
          v108 = v107;
          while (v85 != v42)
          {
            v115 = *(_QWORD *)(v85 - 12);
            v85 -= 12;
            v116 = *((_DWORD *)v85 + 2);
            *(_QWORD *)(v108 - 12) = v115;
            v108 -= 12;
            *((_DWORD *)v108 + 2) = v116;
          }
          goto LABEL_107;
        }
      }
      else
      {
        v94 = **(_QWORD **)(a3 + 72);
        v95 = (unint64_t)v74;
        if (*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) == v94)
          v96 = 1.0;
        else
          v96 = *(float *)(v94 + 4 * v187);
        v99 = (char *)__p + 8 * v93 + 4;
        v100 = (char *)__p + 8 * v92 + 4;
        v101 = v44 * v96;
        if ((unint64_t)v85 >= v95)
        {
          v102 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v42) >> 2) + 1;
          if (v102 > 0x1555555555555555)
            goto LABEL_174;
          if (0x5555555555555556 * ((uint64_t)(v95 - (_QWORD)v42) >> 2) > v102)
            v102 = 0x5555555555555556 * ((uint64_t)(v95 - (_QWORD)v42) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)v42) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v103 = 0x1555555555555555;
          else
            v103 = v102;
          v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::obj::ListEntry>>(v103);
          v106 = *(_DWORD *)v100;
          v107 = &v104[4 * ((v85 - v42) >> 2)];
          *(_DWORD *)v107 = *(_DWORD *)v99;
          *((_DWORD *)v107 + 1) = v106;
          *((float *)v107 + 2) = v101;
          v108 = v107;
          while (v85 != v42)
          {
            v109 = *(_QWORD *)(v85 - 12);
            v85 -= 12;
            v110 = *((_DWORD *)v85 + 2);
            *(_QWORD *)(v108 - 12) = v109;
            v108 -= 12;
            *((_DWORD *)v108 + 2) = v110;
          }
LABEL_107:
          v74 = &v104[12 * v105];
          v85 = v107 + 12;
          if (v42)
            operator delete(v42);
          v42 = v108;
          goto LABEL_110;
        }
      }
      v111 = *(_DWORD *)v100;
      *(_DWORD *)v85 = *(_DWORD *)v99;
      *((_DWORD *)v85 + 1) = v111;
      *((float *)v85 + 2) = v101;
      v85 += 12;
      v74 = (char *)v95;
LABEL_110:
      if (++v92 == v82)
        goto LABEL_111;
    }
  }
LABEL_183:
  dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
  std::mutex::~mutex(v197);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
  if (v189.__begin_)
  {
    v189.__end_ = v189.__begin_;
    operator delete(v189.__begin_);
  }
}

void sub_220E9F8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a39);
  if (v39)
    operator delete(v39);
  JUMPOUT(0x220E9FA3CLL);
}

void sub_220E9F8C4(void *a1, int a2)
{
  int v2;
  void *v3;
  void *v4;
  std::mutex *v7;
  std::exception_ptr v8[7];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4)
    operator delete(v4);
  if (v3)
    operator delete(v3);
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9F730);
  }
  JUMPOUT(0x220E9F9BCLL);
}

void sub_220E9F8D8(void *a1, int a2)
{
  int v2;
  void *v3;
  void *v4;
  std::mutex *v7;
  std::exception_ptr v8[7];
  std::exception_ptr v9;

  __cxa_end_catch();
  if (v8[0].__ptr_)
  {
    v8[1] = v8[0];
    operator delete(v8[0].__ptr_);
  }
  if (v4)
    operator delete(v4);
  if (v3)
    operator delete(v3);
  if (a2 == v2 || a2 == 2)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(v7);
    if (!v9.__ptr_)
    {
      std::current_exception();
      std::exception_ptr::operator=(&v9, v8);
      std::exception_ptr::~exception_ptr(v8);
    }
    std::mutex::unlock(v7);
    __cxa_end_catch();
    JUMPOUT(0x220E9F730);
  }
  JUMPOUT(0x220E9F9BCLL);
}

void sub_220E9F8F4()
{
  JUMPOUT(0x220E9F8FCLL);
}

void sub_220E9F98C()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9F9F4);
}

void sub_220E9F998()
{
  std::mutex *v0;
  std::exception_ptr v1;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220E9F9F4);
}

void sub_220E9F9A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (a37 < 0)
    operator delete(__p);
  if (v37)
    operator delete(v37);
  JUMPOUT(0x220E9FA3CLL);
}

void sub_220E9F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v40;

  v40 = a39;
  a39 = 0;
  if (v40)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a39, v40);
  _Unwind_Resume(a1);
}

void sub_220E9F9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a39);
  JUMPOUT(0x220E9F9DCLL);
}

void sub_220E9FA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_220E9FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a32);
  JUMPOUT(0x220E9FA1CLL);
}

void sub_220E9FA34(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x220E9FA3CLL);
  __clang_call_terminate(a1);
}

const char *xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::DefaultEvalMetric()
{
  return "map";
}

uint64_t xgboost::obj::LambdaRankObj<xgboost::obj::MAPLambdaWeightComputer>::Task()
{
  return 4;
}

void rabit::c_api::Allreduce(rabit::engine *a1, const char *a2, int a3, int a4)
{
  char *v4;
  void (*v5)(void);

  switch(a4)
  {
    case 0:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_10;
        default:
          goto LABEL_8;
      }
    case 1:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_10;
        default:
          goto LABEL_8;
      }
    case 2:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_10;
        default:
          goto LABEL_8;
      }
    case 3:
      switch(a3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
LABEL_10:
          v5 = *(void (**)(void))(*(_QWORD *)rabit::engine::GetEngine(a1) + 8);
          v5();
          break;
        case 6:
        case 7:
          v4 = "DataType does not support bitwise or operation";
          goto LABEL_9;
        default:
LABEL_8:
          v4 = "unknown data_type";
          goto LABEL_9;
      }
      break;
    default:
      v4 = "unknown enum_op";
LABEL_9:
      rabit::utils::Error((rabit::utils *)v4, a2);
      break;
  }
}

void rabit::utils::Error(rabit::utils *this, const char *a2, ...)
{
  void *v3;
  std::string *Entry;
  _QWORD *v5;
  char v6;
  va_list v7;
  va_list va;

  va_start(va, a2);
  v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  va_copy(v7, va);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/rabit/src/rabit/internal/utils.h");
  v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v3, 4096);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
  operator delete(v3);
}

void sub_220E9FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  void *v12;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a12);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void rabit::c_api::Allgather(rabit::c_api *this, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6)
{
  void (*v6)(void);

  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v6 = **(void (***)(void))rabit::engine::GetEngine(this);
      v6();
      break;
    default:
      rabit::utils::Error((rabit::utils *)"unknown data_type", a2);
      break;
  }
}

uint64_t RabitInit(rabit::engine *a1, uint64_t a2, char **a3)
{
  uint64_t v3;

  v3 = rabit::engine::Init(a1, a2, a3);
  if ((v3 & 1) == 0)
    XGBAPISetLastError("Failed to initialize RABIT.");
  return v3;
}

uint64_t RabitFinalize(rabit::engine *a1)
{
  uint64_t v1;

  v1 = rabit::engine::Finalize(a1);
  if ((v1 & 1) == 0)
    XGBAPISetLastError("Failed to shutdown RABIT worker.");
  return v1;
}

uint64_t RabitGetRingPrevRank(rabit::engine *a1)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 56))(Engine);
}

uint64_t RabitGetRank(rabit::engine *a1)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 64))(Engine);
}

uint64_t RabitGetWorldSize(rabit::engine *a1)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 72))(Engine);
}

uint64_t RabitIsDistributed(rabit::engine *a1)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 80))(Engine);
}

uint64_t RabitTrackerPrint(char *__s)
{
  rabit::engine *v1;
  void *Engine;
  void *__p[2];
  char v5;

  v1 = (rabit::engine *)std::string::basic_string[abi:ne180100]<0>(__p, __s);
  Engine = rabit::engine::GetEngine(v1);
  (*(void (**)(void *, void **))(*(_QWORD *)Engine + 96))(Engine, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_220EA0130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::string *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  const char *v17;
  void *v18;
  char *v19;
  const char *v20;

  if (a2 == 2)
  {
    v16 = __cxa_begin_catch(exception_object);
    v17 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
    XGBAPISetLastError(v17);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v18 = __cxa_begin_catch(exception_object);
    v19 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
    std::string::basic_string[abi:ne180100]<0>(&a11, v19);
    std::runtime_error::runtime_error(&a10, (const std::string *)&a11);
    a10.__vftable = (std::runtime_error_vtbl *)&unk_24E6B55B0;
    v20 = std::runtime_error::what(&a10);
    XGBAPISetLastError(v20);
    std::runtime_error::~runtime_error(&a10);
    if (a16 < 0)
      operator delete(a11);
  }
  __cxa_end_catch();
  JUMPOUT(0x220EA0120);
}

void RabitGetProcessorName(rabit::engine *a1, std::string::size_type *a2, std::string::size_type a3)
{
  void *Engine;
  std::string::size_type size;
  unsigned __int8 v8;
  void *v9;
  std::string v10;

  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Engine + 88))(&v10);
  size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v10.__r_.__value_.__l.__size_;
  if (size > a3)
  {
    std::string::resize(&v10, a3 - 1, 0);
    v8 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  if ((v8 & 0x80) != 0)
  {
    v9 = (void *)v10.__r_.__value_.__r.__words[0];
    strcpy((char *)a1, v10.__r_.__value_.__l.__data_);
    *a2 = v10.__r_.__value_.__l.__size_;
    operator delete(v9);
  }
  else
  {
    strcpy((char *)a1, (const char *)&v10);
    *a2 = v8;
  }
}

void sub_220EA02E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RabitBroadcast(rabit::engine *a1, uint64_t a2, uint64_t a3)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, rabit::engine *, uint64_t, uint64_t))(*(_QWORD *)Engine + 16))(Engine, a1, a2, a3);
  return 0;
}

uint64_t RabitAllgather(rabit::c_api *a1, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6)
{
  rabit::c_api::Allgather(a1, a2, a3, a4, a5, a6);
  return 0;
}

uint64_t RabitAllreduce(rabit::engine *a1, const char *a2, int a3, int a4)
{
  rabit::c_api::Allreduce(a1, a2, a3, a4);
  return 0;
}

uint64_t RabitLoadCheckPoint(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *Engine;
  uint64_t v11;
  uint64_t (*v12)(void *, _QWORD *, _QWORD *, uint64_t);
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v7 = a1;
  v8 = atomic_load((unsigned __int8 *)&_MergedGlobals_8);
  if ((v8 & 1) == 0)
  {
    a1 = (uint64_t **)__cxa_guard_acquire(&_MergedGlobals_8);
    if ((_DWORD)a1)
    {
      qword_253F36940 = 0;
      unk_253F36948 = 0;
      qword_253F36938 = 0;
      __cxa_atexit(MEMORY[0x24BEDACF0], &qword_253F36938, &dword_220DF6000);
      __cxa_guard_release(&_MergedGlobals_8);
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_253F36930);
  if ((v9 & 1) == 0)
  {
    a1 = (uint64_t **)__cxa_guard_acquire(&qword_253F36930);
    if ((_DWORD)a1)
    {
      qword_253F36958 = 0;
      unk_253F36960 = 0;
      qword_253F36950 = 0;
      __cxa_atexit(MEMORY[0x24BEDACF0], &qword_253F36950, &dword_220DF6000);
      __cxa_guard_release(&qword_253F36930);
    }
  }
  v23[0] = &off_24E6B9B10;
  v23[1] = &qword_253F36938;
  v22[0] = &off_24E6B9B10;
  v22[1] = &qword_253F36950;
  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  v12 = *(uint64_t (**)(void *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)Engine + 24);
  if (a3)
  {
    result = v12(Engine, v23, v22, v11);
    if (byte_253F3694F < 0)
    {
      if (qword_253F36940)
        v14 = (uint64_t *)qword_253F36938;
      else
        v14 = 0;
    }
    else if (byte_253F3694F)
    {
      v14 = &qword_253F36938;
    }
    else
    {
      v14 = 0;
    }
    *v7 = v14;
    v16 = byte_253F3694F;
    if (byte_253F3694F < 0)
      v16 = qword_253F36940;
    *a2 = v16;
    if (byte_253F36967 < 0)
    {
      v17 = (uint64_t *)qword_253F36950;
      if (!qword_253F36958)
        v17 = 0;
    }
    else if (byte_253F36967)
    {
      v17 = &qword_253F36950;
    }
    else
    {
      v17 = 0;
    }
    *a3 = v17;
    v18 = &qword_253F36958;
    v19 = &byte_253F36967;
    a2 = a4;
  }
  else
  {
    result = v12(Engine, v23, 0, v11);
    if (byte_253F3694F < 0)
    {
      if (qword_253F36940)
        v15 = (uint64_t *)qword_253F36938;
      else
        v15 = 0;
    }
    else if (byte_253F3694F)
    {
      v15 = &qword_253F36938;
    }
    else
    {
      v15 = 0;
    }
    *v7 = v15;
    v18 = &qword_253F36940;
    v19 = &byte_253F3694F;
  }
  v20 = *v19;
  v21 = *v18;
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  *a2 = v21;
  return result;
}

uint64_t RabitCheckPoint(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *Engine;
  _QWORD *v6;
  _QWORD v8[3];
  _QWORD v9[3];

  v9[0] = &off_24E6B9B68;
  v9[1] = a1;
  v9[2] = a2;
  v8[0] = &off_24E6B9B68;
  v8[1] = a3;
  v8[2] = a4;
  Engine = rabit::engine::GetEngine(a1);
  if (a3)
    v6 = v8;
  else
    v6 = 0;
  return (*(uint64_t (**)(void *, _QWORD *, _QWORD *))(*(_QWORD *)Engine + 32))(Engine, v9, v6);
}

uint64_t RabitVersionNumber(rabit::engine *a1)
{
  void *Engine;

  Engine = rabit::engine::GetEngine(a1);
  return (*(uint64_t (**)(void *))(*(_QWORD *)Engine + 48))(Engine);
}

uint64_t RabitLinkTag()
{
  return 0;
}

void rabit::c_api::ReadWrapper::~ReadWrapper(rabit::c_api::ReadWrapper *this)
{
  JUMPOUT(0x227667068);
}

void rabit::c_api::ReadWrapper::Load(uint64_t a1, uint64_t (***a2)(_QWORD, std::string::size_type *, uint64_t))
{
  _BOOL8 v4;
  const char *v5;
  uint64_t **v6;
  _BOOL8 v7;
  const char *v8;
  std::string::size_type __n;

  __n = 0;
  v4 = (**a2)(a2, &__n, 8) != 0;
  rabit::utils::Assert((rabit::utils *)v4, "Read pickle string", v5);
  std::string::resize(*(std::string **)(a1 + 8), __n, 0);
  if (__n)
  {
    v6 = *(uint64_t ***)(a1 + 8);
    if (*((char *)v6 + 23) < 0)
      v6 = (uint64_t **)*v6;
    v7 = ((uint64_t (*)(uint64_t (***)(_QWORD, std::string::size_type *, uint64_t), uint64_t **))**a2)(a2, v6) != 0;
    rabit::utils::Assert((rabit::utils *)v7, "Read pickle string", v8);
  }
}

void rabit::c_api::ReadWrapper::Save(uint64_t a1, const char *a2)
{
  rabit::utils::Error((rabit::utils *)"not implemented", a2);
}

void rabit::c_api::WriteWrapper::~WriteWrapper(rabit::c_api::WriteWrapper *this)
{
  JUMPOUT(0x227667068);
}

void rabit::c_api::WriteWrapper::Load(uint64_t a1, const char *a2)
{
  rabit::utils::Error((rabit::utils *)"not implemented", a2);
}

uint64_t rabit::c_api::WriteWrapper::Save(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(unsigned __int16 *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v5, 8);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

char *rabit::op::Reducer<rabit::op::Max,char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if ((char)*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *rabit::op::Reducer<rabit::op::Max,unsigned char>(unsigned __int8 *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;
  unsigned int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Max,int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned int *rabit::op::Reducer<rabit::op::Max,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Max,long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *rabit::op::Reducer<rabit::op::Max,float>(float *result, float *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (*a2 < *result)
        *a2 = *result;
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double *rabit::op::Reducer<rabit::op::Max,double>(double *result, double *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (*a2 < *result)
        *a2 = *result;
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Min,char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if ((char)*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *rabit::op::Reducer<rabit::op::Min,unsigned char>(unsigned __int8 *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;
  unsigned int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Min,int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned int *rabit::op::Reducer<rabit::op::Min,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Min,long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t *rabit::op::Reducer<rabit::op::Min,unsigned long>(unint64_t *result, unint64_t *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 > v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *rabit::op::Reducer<rabit::op::Min,float>(float *result, float *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (*a2 > *result)
        *a2 = *result;
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double *rabit::op::Reducer<rabit::op::Min,double>(double *result, double *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (*a2 > *result)
        *a2 = *result;
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Sum,char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::Sum,unsigned char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Sum,int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::Sum,unsigned int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::Sum,long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ += v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::BitOR,char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *rabit::op::Reducer<rabit::op::BitOR,unsigned char>(char *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  char v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,unsigned int>(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::BitOR,long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *rabit::op::Reducer<rabit::op::BitOR,unsigned long>(uint64_t *result, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t dmlc::RecordIOWriter::WriteRecord(dmlc::RecordIOWriter *this, char *a2, unint64_t a3)
{
  unsigned int v3;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;

  v3 = a3;
  if (a3 >> 29)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: size < (1 << 29U)", 31);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RecordIO only accept record less than 2^29 bytes", 48);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
  }
  v18 = -824761590;
  if (v3 <= 3)
    goto LABEL_17;
  v10 = 0;
  v11 = 0;
  do
  {
    if (a2[v10] == v18
      && __PAIR64__(a2[v10 + 2], a2[v10 + 1]) == __PAIR64__(BYTE2(v18), BYTE1(v18))
      && a2[v10 + 3] == HIBYTE(v18))
    {
      if (v11)
        v12 = 0x40000000;
      else
        v12 = 0x20000000;
      v17 = v12 | (v10 - v11);
      (*(void (**)(_QWORD, int *, uint64_t))(**(_QWORD **)this + 8))(*(_QWORD *)this, &v18, 4);
      (*(void (**)(_QWORD, int *, uint64_t))(**(_QWORD **)this + 8))(*(_QWORD *)this, &v17, 4);
      if (v10 != v11)
        (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this, &a2[v11], (v10 - v11));
      ++*((_QWORD *)this + 2);
      v11 = v10 + 4;
    }
    v10 += 4;
  }
  while (v10 < (v3 & 0xFFFFFFFC));
  if (v11)
  {
    v13 = 1610612736;
  }
  else
  {
LABEL_17:
    v11 = 0;
    v13 = 0;
  }
  v14 = (v3 + 3) & 0xFFFFFFFC;
  v17 = v13 | (v3 - v11);
  (*(void (**)(_QWORD, int *, uint64_t))(**(_QWORD **)this + 8))(*(_QWORD *)this, &v18, 4);
  result = (*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)this + 8))(*(_QWORD *)this, &v17, 4);
  if (v3 != v11)
    result = (*(uint64_t (**)(_QWORD, char *, _QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this, &a2[v11], v3 - v11);
  v16 = 0;
  if (v14 != v3)
    return (*(uint64_t (**)(_QWORD, int *, _QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this, &v16, v14 - v3);
  return result;
}

void sub_220EA10EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a11);
  _Unwind_Resume(a1);
}

uint64_t dmlc::RecordIOReader::NextRecord(_QWORD *a1, std::string *a2)
{
  uint64_t result;
  std::string::size_type v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string *v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 16))
    return 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  }
  v5 = 0;
  while (1)
  {
    result = (**(uint64_t (***)(_QWORD, int *, uint64_t))*a1)(*a1, &v25, 8);
    if (result == 8)
      goto LABEL_10;
    if (!result)
      break;
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
    v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: nread == sizeof(header)", 37);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Inavlid RecordIO File", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
LABEL_10:
    if (v25 != -824761590)
    {
      v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: header[0] == RecordIOWriter::kMagic", 49);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid RecordIO File", 21);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
    }
    v14 = v26;
    v15 = v26 & 0x1FFFFFFF;
    v16 = ((v26 & 0x1FFFFFFF) + 3) & 0x3FFFFFFC;
    std::string::resize(a2, v5 + v16, 0);
    if ((_DWORD)v16)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        v17 = a2->__r_.__value_.__l.__size_ ? a2->__r_.__value_.__r.__words[0] : 0;
      else
        v17 = *((_BYTE *)&a2->__r_.__value_.__s + 23) ? (uint64_t)a2 : 0;
      if ((**(uint64_t (***)(_QWORD, std::string::size_type, uint64_t))*a1)(*a1, v17 + v5, v16) != v16)
      {
        v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v24);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: stream_->Read(BeginPtr(*out_rec) + size, upper_align) == upper_align", 82);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Invalid RecordIO File upper_align=", 34);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v24);
      }
    }
    v22 = v5 + v15;
    std::string::resize(a2, v22, 0);
    if (!(v14 >> 29) || v14 >> 29 == 3)
      return 1;
    v5 = v22 + 4;
    std::string::resize(a2, v22 + 4, 0);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      if (a2->__r_.__value_.__l.__size_)
        v23 = (std::string *)a2->__r_.__value_.__r.__words[0];
      else
        v23 = 0;
    }
    else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
    {
      v23 = a2;
    }
    else
    {
      v23 = 0;
    }
    *(_DWORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = -824761590;
  }
  *((_BYTE *)a1 + 16) = 1;
  return result;
}

void sub_220EA13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::RecordIOChunkReader::RecordIOChunkReader(_QWORD *a1, uint64_t a2, char *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *NextRecordIOHead;
  char *v13;
  unint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = ((unint64_t)&a3[a5 - 1] / a5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9 * a4;
  if (v10 >= (unint64_t)a3)
    v10 = (unint64_t)a3;
  v11 = &a3[a2];
  NextRecordIOHead = dmlc::FindNextRecordIOHead((dmlc *)(a2 + v10), &a3[a2], a3);
  v14 = v9 * (a4 + 1);
  if (v14 >= (unint64_t)a3)
    v14 = (unint64_t)a3;
  a1[3] = NextRecordIOHead;
  a1[4] = dmlc::FindNextRecordIOHead((dmlc *)(a2 + v14), v11, v13);
  return a1;
}

void sub_220EA14B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *dmlc::FindNextRecordIOHead(dmlc *this, char *a2, char *a3)
{
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v25 = this & 3;
  if ((this & 3) != 0)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v26);
    if (v26)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: ", 14);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(reinterpret_cast<size_t>(begin) & 3UL) == 0U", 45);
      v9 = *(char *)(v26 + 23);
      v10 = v9 >= 0 ? v26 : *(_QWORD *)v26;
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(_QWORD *)(v26 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
      v13 = v26;
      v26 = 0;
      if (v13)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v13);
    }
  }
  v25 = a2 & 3;
  if ((a2 & 3) != 0)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>(&v26);
    if (v26)
    {
      v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v25);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(reinterpret_cast<size_t>(end) & 3UL) == 0U", 43);
      v18 = *(char *)(v26 + 23);
      if (v18 >= 0)
        v19 = v26;
      else
        v19 = *(_QWORD *)v26;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(v26 + 23);
      else
        v20 = *(_QWORD *)(v26 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v25);
      v22 = v26;
      v26 = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v26, v22);
    }
  }
  v23 = (_DWORD *)((char *)this + 4);
  if ((char *)this + 4 < a2)
  {
    while (*(v23 - 1) != -824761590 || *v23 >> 30)
    {
      if (++v23 >= (_DWORD *)a2)
        return a2;
    }
    return (char *)(v23 - 1);
  }
  return a2;
}

void sub_220EA16A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

BOOL dmlc::RecordIOChunkReader::NextRecord(std::string *this, _QWORD *a2)
{
  std::string::pointer data;
  std::string::size_type size;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string::size_type v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string::pointer v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  data = this[1].__r_.__value_.__l.__data_;
  size = this[1].__r_.__value_.__l.__size_;
  if ((unint64_t)data < size)
  {
    if (*(_DWORD *)data != -824761590)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v40);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v40);
    }
    v9 = *((_DWORD *)data + 1);
    if (v9 >> 29 != 1)
    {
      if (!(v9 >> 29))
      {
        v10 = v9 & 0x1FFFFFFF;
        v11 = this[1].__r_.__value_.__l.__size_;
        v12 = this[1].__r_.__value_.__r.__words[0] + 8;
        *a2 = v12;
        v13 = v12 + ((v10 + 3) & 0x3FFFFFFC);
        this[1].__r_.__value_.__r.__words[0] = v13;
        if (v13 > v11)
        {
          v14 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
          dmlc::LogMessageFatal::Entry::Init(v14, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
          v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v39);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: pbegin_ <= pend_", 30);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Invalid RecordIO Format", 23);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v39);
        }
        v18 = v10;
LABEL_46:
        a2[1] = v18;
        return (unint64_t)data < size;
      }
      v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v38);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: cflag == 1U", 25);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid RecordIO Format", 23);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v38);
    }
    std::string::resize(this, 0, 0);
    while (1)
    {
      v23 = this[1].__r_.__value_.__l.__data_;
      if ((unint64_t)(v23 + 8) > this[1].__r_.__value_.__l.__size_)
      {
        v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v37);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: pbegin_ + 2 * sizeof(uint32_t) <= pend_", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v37);
        v23 = this[1].__r_.__value_.__l.__data_;
      }
      if (*(_DWORD *)v23 != -824761590)
      {
        v27 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
        dmlc::LogMessageFatal::Entry::Init(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/recordio.cc");
        v28 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: p[0] == RecordIOWriter::kMagic", 44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
      }
      v30 = *((_DWORD *)v23 + 1);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v31 = this->__r_.__value_.__l.__size_;
      else
        v31 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      std::string::resize(this, v31 + (v30 & 0x1FFFFFFF), 0);
      if ((v30 & 0x1FFFFFFF) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_)
            v32 = (std::string *)this->__r_.__value_.__r.__words[0];
          else
            v32 = 0;
        }
        else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
        {
          v32 = this;
        }
        else
        {
          v32 = 0;
        }
        memcpy((char *)v32 + v31, (const void *)(this[1].__r_.__value_.__r.__words[0] + 8), v30 & 0x1FFFFFFF);
        v31 += v30 & 0x1FFFFFFF;
      }
      this[1].__r_.__value_.__r.__words[0] += (((v30 & 0x1FFFFFFF) + 3) & 0x3FFFFFFC) + 8;
      if (v30 >> 29 == 3)
        break;
      std::string::resize(this, v31 + 4, 0);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        if (this->__r_.__value_.__l.__size_)
          v33 = (std::string *)this->__r_.__value_.__r.__words[0];
        else
          v33 = 0;
      }
      else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
      {
        v33 = this;
      }
      else
      {
        v33 = 0;
      }
      *(_DWORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = -824761590;
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_)
        v34 = (std::string *)this->__r_.__value_.__r.__words[0];
      else
        v34 = 0;
    }
    else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
    {
      v34 = this;
    }
    else
    {
      v34 = 0;
    }
    *a2 = v34;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v18 = this->__r_.__value_.__l.__size_;
    else
      v18 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    goto LABEL_46;
  }
  return (unint64_t)data < size;
}

void sub_220EA1A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a14);
  _Unwind_Resume(a1);
}

unint64_t xgboost::Version::Load(xgboost::Version *this, const xgboost::Json *a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  _DWORD **v6;
  _QWORD *v7;
  _DWORD **v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void *__p[2];
  char v19;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)this) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  v4 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  v5 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)this) + 24;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v5 == (char *)v4)
  {
    v16 = 0xFFFFFFFF00000000;
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "version");
    v6 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, __p);
    v7 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*v6);
    if (v19 < 0)
      operator delete(__p[0]);
    v8 = (_DWORD **)v7[2];
    if ((_DWORD **)v7[3] == v8
      || (v9 = (unsigned int *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v8),
          v10 = v7[2],
          (unint64_t)(v7[3] - v10) < 9)
      || (v11 = v9,
          v12 = xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v10 + 8)),
          v13 = v7[2],
          (unint64_t)(v7[3] - v13) <= 0x10))
    {
      std::vector<xgboost::Json>::__throw_out_of_range[abi:ne180100]();
    }
    v14 = v12;
    xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*(_DWORD **)(v13 + 16));
    v15 = v11[4];
    v16 = v14[2] << 32;
  }
  return v16 | v15;
}

void sub_220EA1C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unsigned int **v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Invaid version format in loaded JSON object: ", 45);
    xgboost::operator<<(v18, *v15);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x220EA1BE0);
  }
  _Unwind_Resume(a1);
}

void sub_220EA1CB0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  __cxa_end_catch();
  JUMPOUT(0x220EA1C20);
}

_QWORD *xgboost::operator<<(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *v12;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v12 = a2;
  if (a2)
  {
    v4 = a2 + 2;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  xgboost::Json::Dump(&v12, &__p, 16);
  if (a2)
  {
    v6 = a2 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_220EA1D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Version::Load(uint64_t (***a1)(_QWORD, std::string *, size_t))
{
  size_t v2;
  std::string *v3;
  size_t v4;
  uint64_t v5;
  size_t v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  std::string::size_type size;
  std::string *v22;
  void **p_s1;
  std::string *v24;
  _QWORD *v25;
  void *p_p;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  std::string *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  std::string *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string v51;
  void *__s1;
  size_t __n;
  unsigned __int8 v54;
  void *__p;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  uint64_t v59;

  v59 = 0;
  v58 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Incorrect version format found in binary file.  Binary file from XGBoost < 1.0.0 is no longer supported. Please generate it again.");
  std::string::basic_string[abi:ne180100]<0>(&__s1, "version:");
  memset(&v51, 0, sizeof(v51));
  if ((v54 & 0x80u) == 0)
    v2 = v54;
  else
    v2 = __n;
  std::string::resize(&v51, v2, 0);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v51;
  else
    v3 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v54 & 0x80u) == 0)
    v4 = v54;
  else
    v4 = __n;
  v5 = (**a1)(a1, v3, v4);
  v6 = v54;
  if ((v54 & 0x80u) != 0)
    v6 = __n;
  v49 = v5;
  if (v5 != v6)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v50);
    if (v50)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"fi->Read(&read[0], verstr.size()) == verstr.size()", 50);
      v11 = *(char *)(v50 + 23);
      v12 = v11 >= 0 ? v50 : *(_QWORD *)v50;
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v50 + 23) : *(_QWORD *)(v50 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      v16 = (v57 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v57 & 0x80u) == 0 ? v57 : v56;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
      v18 = v50;
      v50 = 0;
      if (v18)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v50, v18);
    }
  }
  v19 = v54;
  if ((v54 & 0x80u) == 0)
    v20 = v54;
  else
    v20 = __n;
  size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v51.__r_.__value_.__l.__size_;
  if (v20 == size)
  {
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v51;
    else
      v22 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v54 & 0x80) != 0)
    {
      if (!memcmp(__s1, v22, __n))
        goto LABEL_51;
    }
    else
    {
      if (!v54)
        goto LABEL_51;
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == v22->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        v22 = (std::string *)((char *)v22 + 1);
        if (!--v19)
          goto LABEL_51;
      }
    }
  }
  v24 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
  dmlc::LogMessageFatal::Entry::Init(v24, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
  v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
  if ((v57 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v57 & 0x80u) == 0)
    v27 = v57;
  else
    v27 = v56;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
LABEL_51:
  if ((**a1)(a1, (std::string *)((char *)&v59 + 4), 4) != 4)
  {
    v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: fi->Read(&major)", 30);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
    if ((v57 & 0x80u) == 0)
      v35 = &__p;
    else
      v35 = __p;
    if ((v57 & 0x80u) == 0)
      v36 = v57;
    else
      v36 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
  }
  if ((**a1)(a1, (std::string *)&v59, 4) != 4)
  {
    v37 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    dmlc::LogMessageFatal::Entry::Init(v37, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    v38 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: fi->Read(&minor)", 30);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
    if ((v57 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v57 & 0x80u) == 0)
      v42 = v57;
    else
      v42 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
  }
  if ((**a1)(a1, (std::string *)&v58, 4) != 4)
  {
    v43 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    dmlc::LogMessageFatal::Entry::Init(v43, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/common/version.cc");
    v44 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v50);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Check failed: fi->Read(&patch)", 30);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
    if ((v57 & 0x80u) == 0)
      v47 = &__p;
    else
      v47 = __p;
    if ((v57 & 0x80u) == 0)
      v48 = v57;
    else
      v48 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v50);
  }
  v29 = v59;
  v28 = HIDWORD(v59);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((char)v54 < 0)
    operator delete(__s1);
  if ((char)v57 < 0)
    operator delete(__p);
  return v28 | (v29 << 32);
}

void sub_220EA2228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

unsigned int *xgboost::Version::Save(xgboost::Version *this, xgboost::Json *a2)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int *result;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[2];
  _QWORD v28[4];
  char v29;
  void *__p[2];
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)operator new();
  *v3 = &off_24E6BE3A8;
  v3[2] = 1;
  v35[0] = v3;
  v3[1] = 0x200000000;
  v4 = (unsigned int *)(v3 + 1);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v6 = (_QWORD *)operator new();
  v6[1] = 0x200000000;
  v7 = (unsigned int *)(v6 + 1);
  *v6 = &off_24E6BE3A8;
  v6[2] = 6;
  v35[1] = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (_QWORD *)operator new();
  v9[1] = 0x200000000;
  v10 = (unsigned int *)(v9 + 1);
  *v9 = &off_24E6BE3A8;
  v9[2] = 1;
  v35[2] = v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v28[3] = &v24;
  v29 = 0;
  v12 = operator new(0x18uLL);
  v13 = 0;
  v24 = v12;
  v25 = v12;
  v26 = v12 + 3;
  v33 = v12;
  __p[0] = &v26;
  __p[1] = &v33;
  v31 = &v34;
  do
  {
    v14 = v35[v13];
    *v12 = v14;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ++v13;
    ++v12;
  }
  while (v13 != 3);
  v34 = v12;
  v32 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::Json>,xgboost::Json*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)__p);
  v27[1] = 0x400000000;
  v28[0] = v24;
  v28[1] = v12;
  v28[2] = v26;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27[0] = off_24E6BE218;
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  v17 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, __p);
  xgboost::Json::operator=(v17, (uint64_t)v27);
  v18 = &v36;
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  v27[0] = off_24E6BE218;
  __p[0] = v28;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v24;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  do
  {
    v20 = *--v18;
    result = (unsigned int *)v20;
    if (v20)
    {
      v21 = result + 2;
      do
      {
        v22 = __ldxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        __dmb(9u);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  while (v18 != v35);
  return result;
}

void sub_220EA25AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  a12 = v24 + 16;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a9;
  std::vector<xgboost::Json>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v27 = v25 - 56;
  while (1)
  {
    v29 = *(unsigned int **)(v27 - 8);
    v27 -= 8;
    v28 = v29;
    if (v29)
    {
      v30 = v28 + 2;
      do
      {
        v31 = __ldxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        __dmb(9u);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
      }
    }
    if (v27 == v25 - 80)
      _Unwind_Resume(a1);
  }
}

uint64_t xgboost::Version::Self(xgboost::Version *this)
{
  return 0x600000001;
}

void xgboost::Version::Save(uint64_t a1)
{
  void **v2;
  unint64_t v3;
  void *__p[2];
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;

  v7 = 6;
  v8 = 1;
  v6 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "version:");
  if ((v5 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v3 = v5;
  else
    v3 = (unint64_t)__p[1];
  (*(void (**)(uint64_t, void **, unint64_t))(*(_QWORD *)a1 + 8))(a1, v2, v3);
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v8, 4);
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v7, 4);
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v6, 4);
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_220EA2760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::Version::String()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[13];
  char v5;
  uint64_t v6;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)".", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4[2] = v2;
  v4[3] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227666FE4](&v6);
}

void sub_220EA2864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::Version::Same(_DWORD *a1)
{
  return *a1 == 1 && a1[1] == 6 && a1[2] == 1;
}

uint64_t xgboost::data::SparsePageDMatrix::Info(xgboost::data::SparsePageDMatrix *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t xgboost::data::detail::NSamplesDevice(xgboost::data::detail *this, xgboost::data::DMatrixProxy *a2)
{
  std::string *Entry;
  _QWORD *v3;
  char v5;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return 0;
}

void sub_220EA290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::detail::NFeaturesDevice(xgboost::data::detail *this, xgboost::data::DMatrixProxy *a2)
{
  std::string *Entry;
  _QWORD *v3;
  char v5;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v5);
  return 0;
}

void sub_220EA2980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageDMatrix::SparsePageDMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, __int128 *a7, float a8)
{
  rabit::engine *v16;
  const std::string::value_type **v17;
  __int128 v18;
  std::string::size_type v19;
  void *Engine;
  rabit::engine *v21;
  void *v22;
  void *v23;
  int v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  uint64_t Proxy;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const xgboost::MetaInfo *v39;
  std::string::size_type v40;
  uint64_t v41;
  _BOOL4 v42;
  std::string::size_type v43;
  unint64_t v44;
  std::string::size_type v45;
  uint64_t v46;
  xgboost::data::detail *v47;
  xgboost::data::DMatrixProxy *v48;
  int v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  _BOOL4 v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  xgboost::data::detail *v59;
  xgboost::data::DMatrixProxy *v60;
  int v61;
  std::string::size_type v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  rabit::engine *v72;
  void *v73;
  std::string *Entry;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t);
  uint64_t v85;
  xgboost::MetaInfo *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  std::string v91;
  std::string v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24E6B9BB0;
  v87 = (xgboost::MetaInfo *)(a1 + 8);
  v16 = xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)(a1 + 8));
  *(_DWORD *)(a1 + 216) = -1;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 233) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 280) = a3;
  *(_QWORD *)(a1 + 288) = a2;
  *(_QWORD *)(a1 + 296) = a4;
  *(_QWORD *)(a1 + 304) = a5;
  *(float *)(a1 + 312) = a8;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 340) = 0xFFFFFFFF00000000;
  *(_WORD *)(a1 + 348) = 0;
  v17 = (const std::string::value_type **)(a1 + 352);
  v18 = *a7;
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a7 + 2);
  *(_OWORD *)(a1 + 352) = v18;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 340) = a6;
  if (*(char *)(a1 + 375) < 0)
  {
    v19 = *(_QWORD *)(a1 + 360);
    if (v19)
    {
      std::string::__init_copy_ctor_external(&v92, *v17, v19);
      goto LABEL_7;
    }
LABEL_6:
    v16 = (rabit::engine *)std::string::basic_string[abi:ne180100]<0>(&v92, "DMatrix");
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 375))
    goto LABEL_6;
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
  v92.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 368);
LABEL_7:
  if (*(char *)(a1 + 375) < 0)
    operator delete((void *)*v17);
  *(_OWORD *)v17 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 368) = *((_QWORD *)&v92.__r_.__value_.__l + 2);
  Engine = rabit::engine::GetEngine(v16);
  v21 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)Engine + 80))(Engine);
  if ((_DWORD)v21)
  {
    v23 = rabit::engine::GetEngine(v21);
    v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 64))(v23);
    std::to_string(&v91, v24);
    v25 = std::string::insert(&v91, 0, "-r");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v92;
    else
      v27 = (std::string *)v92.__r_.__value_.__r.__words[0];
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    else
      size = v92.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(a1 + 352), (const std::string::value_type *)v27, size);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
  }
  Proxy = xgboost::data::MakeProxy(*(xgboost::data **)(a1 + 280), v22);
  v30 = *(_QWORD *)(a1 + 288);
  v31 = *(uint64_t (**)(uint64_t))(a1 + 296);
  xgboost::data::SparsePageDMatrix::GetRowBatchesImpl((std::__shared_weak_count **)a1, (std::__shared_weak_count **)&v91);
  v90 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v84 = v31;
  v85 = v30;
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v88, 0);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=((uint64_t *)&v90) & 1) != 0)
  {
    v38 = xgboost::BatchIterator<xgboost::SparsePage>::operator*((uint64_t *)&v90);
    v39 = (const xgboost::MetaInfo *)(**(uint64_t (***)(uint64_t))Proxy)(Proxy);
    xgboost::MetaInfo::Extend(v87, v39, 0, 0);
    v40 = *(_QWORD *)(Proxy + 216);
    v92.__r_.__value_.__r.__words[0] = v40;
    if (v40
      && ((*(void (**)(std::string::size_type *, uint64_t))(v40 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224), v92.__r_.__value_.__r.__words[0]))
    {
      v41 = *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 16);
    }
    else
    {
      v41 = MEMORY[0x24BEDB7C8];
    }
    if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
      (*(void (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
    if (v42)
    {
      v43 = *(_QWORD *)(Proxy + 216);
      v92.__r_.__value_.__r.__words[0] = v43;
      if (v43)
        (*(void (**)(std::string::size_type *, uint64_t))(v43 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224);
      dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>((uint64_t *)&v92);
      v44 = *(unsigned int *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v92.__r_.__value_.__l.__size_
                                                                                + 32))(v92.__r_.__value_.__l.__size_)
                            + 168);
      if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
        goto LABEL_37;
    }
    else
    {
      v45 = *(_QWORD *)(Proxy + 216);
      v92.__r_.__value_.__r.__words[0] = v45;
      if (v45
        && ((*(void (**)(std::string::size_type *, uint64_t))(v45 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224), v92.__r_.__value_.__r.__words[0]))
      {
        v46 = *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 16);
      }
      else
      {
        v46 = MEMORY[0x24BEDB7C8];
      }
      v49 = (int)v47;
      if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
        v47 = (xgboost::data::detail *)(*(uint64_t (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
      if (v49)
      {
        v50 = *(_QWORD *)(Proxy + 216);
        v92.__r_.__value_.__r.__words[0] = v50;
        if (v50)
          (*(void (**)(std::string::size_type *, uint64_t))(v50 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224);
        dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>((uint64_t *)&v92);
        v44 = *(_QWORD *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v92.__r_.__value_.__l.__size_
                                                                            + 32))(v92.__r_.__value_.__l.__size_)
                        + 40);
        if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
LABEL_37:
          (*(void (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
      }
      else
      {
        xgboost::data::detail::NFeaturesDevice(v47, v48);
        v44 = 0;
      }
    }
    if (v34 <= v44)
      v34 = v44;
    v51 = *(_QWORD *)(Proxy + 216);
    v92.__r_.__value_.__r.__words[0] = v51;
    if (v51
      && ((*(void (**)(std::string::size_type *, uint64_t))(v51 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224), v92.__r_.__value_.__r.__words[0]))
    {
      v52 = *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 16);
    }
    else
    {
      v52 = MEMORY[0x24BEDB7C8];
    }
    if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
      (*(void (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
    if (v53)
    {
      v54 = *(_QWORD *)(Proxy + 216);
      v92.__r_.__value_.__r.__words[0] = v54;
      if (v54)
        (*(void (**)(std::string::size_type *, uint64_t))(v54 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224);
      dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>((uint64_t *)&v92);
      v55 = *(_QWORD *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v92.__r_.__value_.__l.__size_
                                                                          + 32))(v92.__r_.__value_.__l.__size_)
                      + 24);
      if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
        (*(void (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
      if (v55)
        v56 = v55 - 1;
      else
        v56 = 0;
    }
    else
    {
      v57 = *(_QWORD *)(Proxy + 216);
      v92.__r_.__value_.__r.__words[0] = v57;
      if (v57
        && ((*(void (**)(std::string::size_type *, uint64_t))(v57 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224), v92.__r_.__value_.__r.__words[0]))
      {
        v58 = *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 16);
      }
      else
      {
        v58 = MEMORY[0x24BEDB7C8];
      }
      v61 = (int)v59;
      if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
        v59 = (xgboost::data::detail *)(*(uint64_t (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
      if (v61)
      {
        v62 = *(_QWORD *)(Proxy + 216);
        v92.__r_.__value_.__r.__words[0] = v62;
        if (v62)
          (*(void (**)(std::string::size_type *, uint64_t))(v62 + 8))(&v92.__r_.__value_.__l.__size_, Proxy + 224);
        dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>((uint64_t *)&v92);
        v56 = *(_QWORD *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v92.__r_.__value_.__l.__size_
                                                                            + 32))(v92.__r_.__value_.__l.__size_)
                        + 32);
        if (v92.__r_.__value_.__r.__words[0] && *(_QWORD *)v92.__r_.__value_.__l.__data_)
          (*(void (**)(std::string::size_type *))v92.__r_.__value_.__l.__data_)(&v92.__r_.__value_.__l.__size_);
      }
      else
      {
        xgboost::data::detail::NSamplesDevice(v59, v60);
        v56 = 0;
      }
    }
    v36 += v56;
    v37 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 8) - **(_QWORD **)(v38 + 8)) >> 3;
    ++v35;
    xgboost::BatchIterator<xgboost::SparsePage>::operator++((uint64_t *)&v90);
  }
  v63 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v70 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (rabit::engine *)v84(v85);
  *(_QWORD *)(a1 + 16) = v34;
  *(_DWORD *)(a1 + 376) = v35;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 24) = v37;
  v73 = rabit::engine::GetEngine(v72);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)v73 + 8))(v73, a1 + 16, 8, 1, rabit::op::Reducer<rabit::op::Max,unsigned long long>, 0, 0);
  LODWORD(v91.__r_.__value_.__l.__data_) = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
    dmlc::LogCheckFormat<unsigned long long,int>((uint64_t *)&v92);
    if (v92.__r_.__value_.__r.__words[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v91);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v76 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v91);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Check failed: ", 14);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"info_.num_col_ != 0", 19);
      v79 = *(char *)(v92.__r_.__value_.__r.__words[0] + 23);
      v80 = v79 >= 0 ? v92.__r_.__value_.__r.__words[0] : *(_QWORD *)v92.__r_.__value_.__l.__data_;
      v81 = v79 >= 0
          ? *(unsigned __int8 *)(v92.__r_.__value_.__r.__words[0] + 23)
          : *(_QWORD *)(v92.__r_.__value_.__r.__words[0] + 8);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v80, v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v91);
      v83 = v92.__r_.__value_.__r.__words[0];
      v92.__r_.__value_.__r.__words[0] = 0;
      if (v83)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v92, v83);
    }
  }
  return a1;
}

void sub_220EA3138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, _QWORD **a11, uint64_t a12, uint64_t a13, xgboost::DMatrix *a14, xgboost::MetaInfo *a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 464);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 448);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 432);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 416);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 400);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)a14 + 384);
  if (*((char *)a14 + 375) < 0)
    operator delete(*a10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*a11);
  xgboost::MetaInfo::~MetaInfo(a15);
  xgboost::DMatrix::~DMatrix(a14);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::MakeProxy(xgboost::data *this, void *a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  if (!this)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./proxy_dmatrix.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: proxy_handle", 26);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid proxy handle.", 21);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  return *(_QWORD *)this;
}

void sub_220EA33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageDMatrix::GetRowBatchesImpl(std::__shared_weak_count **this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  xgboost::data::SparsePageDMatrix::InitializeSparsePage((xgboost::data::SparsePageDMatrix *)this);
  v5 = this[48];
  v4 = this[49];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *a2 = v5;
    a2[1] = v4;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a2 = v5;
    a2[1] = 0;
  }
}

void xgboost::data::SparsePageDMatrix::InitializeSparsePage(xgboost::data::SparsePageDMatrix *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Proxy;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;
  char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *Entry;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  std::string v41;
  void *__p[2];
  char v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  _QWORD v49[11];
  char v50;
  uint64_t v51;

  std::string::basic_string[abi:ne180100]<0>(__p, ".row.page");
  if (*((char *)this + 375) < 0)
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 44), *((_QWORD *)this + 45));
  else
    v41 = *(std::string *)((char *)this + 352);
  xgboost::data::MakeCache((__int128 *)v44, (uint64_t)this, (uint64_t)__p, (uint64_t)&v41, (uint64_t)this + 256);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(__p[0]);
  if (**(_BYTE **)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v44))
  {
    v3 = *((_QWORD *)this + 48);
    if (!v3)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v49);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v38 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v49);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: sparse_page_source_", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v49);
      v3 = *((_QWORD *)this + 48);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  }
  else
  {
    v40 = *(_OWORD *)((char *)this + 296);
    v4 = *((_QWORD *)this + 36);
    Proxy = xgboost::data::MakeProxy(*((xgboost::data **)this + 35), v2);
    std::shared_ptr<xgboost::data::SparsePageSource>::reset[abi:ne180100]((_QWORD *)this + 48);
    v6 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v44);
    v7 = *((_DWORD *)this + 78);
    v8 = *((_QWORD *)this + 2);
    v9 = *((_DWORD *)this + 94);
    v10 = *v6;
    v11 = (std::__shared_weak_count *)v6[1];
    v12 = (char *)operator new(0xD0uLL);
    v13 = v12;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_24E6B9CD0;
    v46 = v10;
    v47 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    *((_QWORD *)v12 + 17) = v10;
    *((_QWORD *)v12 + 3) = off_24E6B9DB0;
    *((_QWORD *)v12 + 4) = 850045863;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 97) = 0u;
    *((_DWORD *)v12 + 29) = v7;
    *((_DWORD *)v12 + 30) = 1;
    *((_DWORD *)v12 + 31) = v8;
    *((_DWORD *)v12 + 32) = 0;
    *((_DWORD *)v12 + 33) = v9;
    v48[1] = 0;
    v48[2] = 0;
    *((_QWORD *)v12 + 18) = v11;
    *((_QWORD *)v12 + 19) = 0;
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = (_BYTE *)*((_QWORD *)v13 + 17);
    *((_QWORD *)v13 + 3) = &off_24E6B9D20;
    *((_QWORD *)v13 + 20) = v17;
    *((_QWORD *)v13 + 21) = v4;
    *((_OWORD *)v13 + 11) = v40;
    *((_QWORD *)v13 + 24) = Proxy;
    *((_QWORD *)v13 + 25) = 0;
    if (!*v18)
    {
      ((void (*)(uint64_t))v40)(v4);
      if (!(*((unsigned int (**)(_QWORD))v13 + 23))(*((_QWORD *)v13 + 21)))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" (", 2);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs. ", 5);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") ", 2);
        v21 = operator new();
        std::stringbuf::str();
        v48[0] = v21;
        v49[0] = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)v49 + *(_QWORD *)(v49[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v49[1] = MEMORY[0x24BEDB848] + 16;
        if (v50 < 0)
          operator delete((void *)v49[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x227666FE4](&v51);
        v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v49);
        dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v49);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"iter_.Next() == 1", 17);
        v26 = *(char *)(v48[0] + 23);
        if (v26 >= 0)
          v27 = v48[0];
        else
          v27 = *(_QWORD *)v48[0];
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(v48[0] + 23);
        else
          v28 = *(_QWORD *)(v48[0] + 8);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Must have at least 1 batch.", 27);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v49);
        v31 = v48[0];
        v48[0] = 0;
        if (v31)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v48, v31);
      }
    }
    xgboost::data::SparsePageSource::Fetch((xgboost::data::SparsePageSource *)(v13 + 24));
    if (v11)
    {
      v32 = (unint64_t *)&v11->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 48) = v13 + 24;
    *((_QWORD *)this + 49) = v13;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (v45 < 0)
    operator delete(v44[0]);
}

void sub_220EA391C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void xgboost::data::MakeCache(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t size;
  std::string *v9;
  std::string *v10;
  const std::string::value_type *p_p;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  __int128 *v15;
  _QWORD *v16;
  uint64_t v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::locale v34;
  void *__p;
  std::string::size_type v36;
  unsigned __int8 v37;
  std::string v38;
  __int128 *v39[13];
  char v40;
  uint64_t v41;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v32 = *(std::string *)a4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  std::ostream::operator<<();
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v9 = &v38;
  std::string::basic_string[abi:ne180100]((uint64_t)&v38, size + 1);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v32;
    else
      v10 = (std::string *)v32.__r_.__value_.__r.__words[0];
    memmove(v9, v10, size);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + size) = 45;
  std::stringbuf::str();
  if ((v37 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v37 & 0x80u) == 0)
    v12 = v37;
  else
    v12 = v36;
  v13 = std::string::append(&v38, p_p, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((char)v37 < 0)
    operator delete(__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v39[0] = *(__int128 **)MEMORY[0x24BEDB7F0];
  v15 = *(__int128 **)(MEMORY[0x24BEDB7F0] + 72);
  *(__int128 **)((char *)v39 + *((_QWORD *)v39[0] - 3)) = *(__int128 **)(MEMORY[0x24BEDB7F0] + 64);
  v39[2] = v15;
  v39[3] = (__int128 *)(MEMORY[0x24BEDB848] + 16);
  if (v40 < 0)
    operator delete(v39[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227666FE4](&v41);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v33.__r_.__value_.__l.__data_, (const void **)a3, (uint64_t)a1);
  if (a5 + 8 == std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a5, (const void **)a1))
  {
    v39[0] = a1;
    v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (const void **)a1, v39);
    v17 = operator new();
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v31 = v33;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v30 = *(std::string *)a3;
    *(_BYTE *)v17 = 0;
    *(std::string *)(v17 + 8) = v31;
    memset(&v31, 0, sizeof(v31));
    *(_OWORD *)(v17 + 32) = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    v18 = v30.__r_.__value_.__r.__words[2];
    memset(&v30, 0, sizeof(v30));
    *(_QWORD *)(v17 + 48) = v18;
    *(_QWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = 0;
    v19 = operator new(8uLL);
    *v19 = 0;
    *(_QWORD *)(v17 + 64) = v19 + 1;
    *(_QWORD *)(v17 + 72) = v19 + 1;
    *(_QWORD *)(v17 + 56) = v19;
    v20 = (_QWORD *)operator new();
    *v20 = &off_24E6B9C58;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v17;
    v21 = (std::__shared_weak_count *)v16[8];
    v16[7] = v17;
    v16[8] = v20;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_dmatrix.h");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v39, (uint64_t)&v38, 149, 2);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Make cache:", 11);
      v34.__locale_ = (std::locale::__imp *)a1;
      v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (const void **)a1, (__int128 **)&v34);
      xgboost::data::Cache::ShardName((xgboost::data::Cache *)v25[7], (uint64_t)&__p);
      if ((v37 & 0x80u) == 0)
        v26 = &__p;
      else
        v26 = __p;
      if ((v37 & 0x80u) == 0)
        v27 = v37;
      else
        v27 = v36;
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v29 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale(&v34);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v37 < 0)
        operator delete(__p);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v39);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_220EA3ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::locale a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v51;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x227667068](v51, 0x1012C40982C4C30);
  if (*(char *)(v50 + 23) < 0)
    operator delete(*(void **)v50);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

void sub_220EA4058()
{
  JUMPOUT(0x220EA403CLL);
}

void std::shared_ptr<xgboost::data::SparsePageSource>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void xgboost::data::SparsePageDMatrix::GetColumnBatches(xgboost::data::SparsePageDMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *Entry;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string __p;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  _QWORD v62[2];
  uint64_t v63[2];

  std::string::basic_string[abi:ne180100]<0>(v54, ".col.page");
  if (*((char *)this + 375) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 44), *((_QWORD *)this + 45));
  else
    __p = *(std::string *)((char *)this + 352);
  xgboost::data::MakeCache((__int128 *)v56, (uint64_t)this, (uint64_t)v54, (uint64_t)&__p, (uint64_t)this + 256);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54[0]);
  v4 = *(_QWORD *)((**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this) + 8);
  LODWORD(v62[0]) = 0;
  if (!v4)
  {
    dmlc::LogCheckFormat<unsigned long long,int>(v63);
    if (v63[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"this->Info().num_col_ != 0", 26);
      v18 = *(char *)(v63[0] + 23);
      v19 = v18 >= 0 ? v63[0] : *(_QWORD *)v63[0];
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v63[0] + 23) : *(_QWORD *)(v63[0] + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v22 = v63[0];
      v63[0] = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v63, v22);
    }
  }
  xgboost::data::SparsePageDMatrix::InitializeSparsePage(this);
  v5 = *((_QWORD *)this + 52);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  else
  {
    v23 = (**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this);
    v24 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v56);
    v25 = *((_DWORD *)this + 78);
    v26 = *(_QWORD *)(v23 + 8);
    v27 = *((_DWORD *)this + 94);
    v29 = *v24;
    v28 = (std::__shared_weak_count *)v24[1];
    v30 = (char *)operator new(0xC0uLL);
    v31 = v30;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = 0;
    *(_QWORD *)v30 = &off_24E6B9E00;
    v60 = v29;
    v61 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v34 = *((_QWORD *)this + 49);
    v58 = *((_QWORD *)this + 48);
    v59 = (std::__shared_weak_count *)v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v62[0] = v29;
    v62[1] = v28;
    if (v28)
    {
      v37 = (unint64_t *)&v28->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldxr(v37);
      while (__stxr(v39 + 1, v37));
    }
    *((_QWORD *)v30 + 17) = v29;
    *((_QWORD *)v30 + 3) = off_24E6B9F48;
    *((_QWORD *)v30 + 4) = 850045863;
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 56) = 0u;
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 97) = 0u;
    *((_DWORD *)v30 + 29) = v25;
    *((_DWORD *)v30 + 30) = 1;
    *((_DWORD *)v30 + 31) = v26;
    *((_DWORD *)v30 + 32) = 0;
    *((_DWORD *)v30 + 33) = v27;
    v63[0] = 0;
    v63[1] = 0;
    *((_QWORD *)v30 + 18) = v28;
    *((_QWORD *)v30 + 19) = 0;
    v40 = (_QWORD *)operator new();
    v41 = v31 + 24;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = 0;
    *((_QWORD *)v31 + 21) = 0;
    *((_QWORD *)v31 + 20) = v40;
    *((_QWORD *)v31 + 3) = off_24E6B9EF8;
    *((_QWORD *)v31 + 22) = 0;
    v31[184] = 1;
    if (v28)
    {
      v42 = (unint64_t *)&v28->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    *v41 = &off_24E6B9E50;
    v44 = v59;
    std::shared_ptr<xgboost::data::SparsePageSource>::operator=[abi:ne180100]((_QWORD *)v31 + 21, v58, (uint64_t)v59);
    xgboost::data::CSCPageSource::Fetch((xgboost::data::CSCPageSource *)(v31 + 24));
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v61;
    if (v61)
    {
      v48 = (unint64_t *)&v61->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
    *((_QWORD *)this + 52) = v41;
    *((_QWORD *)this + 53) = v31;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v7 = *((_QWORD *)this + 52);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 - 1, v8));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v12 = __ldxr(v8);
    while (__stxr(v12 + 1, v8));
    *a2 = v7;
    a2[1] = v6;
    do
      v13 = __ldaxr(v8);
    while (__stlxr(v13 - 1, v8));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = v7;
    a2[1] = 0;
  }
  if (v57 < 0)
    operator delete(v56[0]);
}

void sub_220EA455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  std::__shared_weak_count *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;

  *v33 = v35;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v34);
  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)v33);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v37);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageDMatrix::GetSortedColumnBatches(xgboost::data::SparsePageDMatrix *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *Entry;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string __p;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  _QWORD v62[2];
  uint64_t v63[2];

  std::string::basic_string[abi:ne180100]<0>(v54, ".sorted.col.page");
  if (*((char *)this + 375) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 44), *((_QWORD *)this + 45));
  else
    __p = *(std::string *)((char *)this + 352);
  xgboost::data::MakeCache((__int128 *)v56, (uint64_t)this, (uint64_t)v54, (uint64_t)&__p, (uint64_t)this + 256);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v55 < 0)
    operator delete(v54[0]);
  v4 = *(_QWORD *)((**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this) + 8);
  LODWORD(v62[0]) = 0;
  if (!v4)
  {
    dmlc::LogCheckFormat<unsigned long long,int>(v63);
    if (v63[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v15 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v62);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: ", 14);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"this->Info().num_col_ != 0", 26);
      v18 = *(char *)(v63[0] + 23);
      v19 = v18 >= 0 ? v63[0] : *(_QWORD *)v63[0];
      v20 = v18 >= 0 ? *(unsigned __int8 *)(v63[0] + 23) : *(_QWORD *)(v63[0] + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v62);
      v22 = v63[0];
      v63[0] = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v63, v22);
    }
  }
  xgboost::data::SparsePageDMatrix::InitializeSparsePage(this);
  v5 = *((_QWORD *)this + 54);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  else
  {
    v23 = (**(uint64_t (***)(xgboost::data::SparsePageDMatrix *))this)(this);
    v24 = (uint64_t *)std::map<std::string,xgboost::Json>::at((uint64_t)this + 256, (const void **)v56);
    v25 = *((_DWORD *)this + 78);
    v26 = *(_QWORD *)(v23 + 8);
    v27 = *((_DWORD *)this + 94);
    v29 = *v24;
    v28 = (std::__shared_weak_count *)v24[1];
    v30 = (char *)operator new(0xC0uLL);
    v31 = v30;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = 0;
    *(_QWORD *)v30 = &off_24E6BA0C0;
    v60 = v29;
    v61 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v34 = *((_QWORD *)this + 49);
    v58 = *((_QWORD *)this + 48);
    v59 = (std::__shared_weak_count *)v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v62[0] = v29;
    v62[1] = v28;
    if (v28)
    {
      v37 = (unint64_t *)&v28->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldxr(v37);
      while (__stxr(v39 + 1, v37));
    }
    *((_QWORD *)v30 + 17) = v29;
    *((_QWORD *)v30 + 3) = off_24E6BA208;
    *((_QWORD *)v30 + 4) = 850045863;
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 56) = 0u;
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 97) = 0u;
    *((_DWORD *)v30 + 29) = v25;
    *((_DWORD *)v30 + 30) = 1;
    *((_DWORD *)v30 + 31) = v26;
    *((_DWORD *)v30 + 32) = 0;
    *((_DWORD *)v30 + 33) = v27;
    v63[0] = 0;
    v63[1] = 0;
    *((_QWORD *)v30 + 18) = v28;
    *((_QWORD *)v30 + 19) = 0;
    v40 = (_QWORD *)operator new();
    v41 = v31 + 24;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = 0;
    *((_QWORD *)v31 + 21) = 0;
    *((_QWORD *)v31 + 20) = v40;
    *((_QWORD *)v31 + 3) = off_24E6BA1B8;
    *((_QWORD *)v31 + 22) = 0;
    v31[184] = 1;
    if (v28)
    {
      v42 = (unint64_t *)&v28->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    *v41 = &off_24E6BA110;
    v44 = v59;
    std::shared_ptr<xgboost::data::SparsePageSource>::operator=[abi:ne180100]((_QWORD *)v31 + 21, v58, (uint64_t)v59);
    xgboost::data::SortedCSCPageSource::Fetch((xgboost::data::SortedCSCPageSource *)(v31 + 24));
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v61;
    if (v61)
    {
      v48 = (unint64_t *)&v61->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
    *((_QWORD *)this + 54) = v41;
    *((_QWORD *)this + 55) = v31;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v7 = *((_QWORD *)this + 54);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 - 1, v8));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v12 = __ldxr(v8);
    while (__stxr(v12 + 1, v8));
    *a2 = v7;
    a2[1] = v6;
    do
      v13 = __ldaxr(v8);
    while (__stlxr(v13 - 1, v8));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = v7;
    a2[1] = 0;
  }
  if (v57 < 0)
    operator delete(v56[0]);
}

void sub_220EA4B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  std::__shared_weak_count *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;

  *v33 = v35;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v34);
  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)v33);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v37);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageDMatrix::GetGradientIndex(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  __n128 v17;
  __n128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  BOOL v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::string *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  std::string *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[2];
  std::__shared_weak_count *v98;
  int v99;
  _QWORD v100[2];
  void *__p[2];
  char v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106[31];
  std::string v107;
  void *v108[2];
  char v109;
  __int128 v110;
  char v111;
  std::string v112;
  void *v113[2];
  char v114;
  __int128 v115;
  char v116;
  _QWORD v117[3];

  LODWORD(v115) = a2[1];
  LODWORD(__p[0]) = 2;
  if ((int)v115 < 2)
  {
    dmlc::LogCheckFormat<int,int>(&v103);
    if (v103)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v115);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"param.max_bin >= 2", 18);
      v10 = *(char *)(v103 + 23);
      v11 = v10 >= 0 ? v103 : *(_QWORD *)v103;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v103 + 23) : *(_QWORD *)(v103 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v115);
      v14 = v103;
      v103 = 0;
      if (v14)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v103, v14);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v113, ".gradient_index.page");
  v15 = (_OWORD *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
  {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(a1 + 352), *(_QWORD *)(a1 + 360));
  }
  else
  {
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = *v15;
    v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 368);
  }
  v16 = (_QWORD *)(a1 + 256);
  xgboost::data::MakeCache(&v115, a1, (uint64_t)v113, (uint64_t)&v112, a1 + 256);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (v114 < 0)
    operator delete(v113[0]);
  xgboost::data::SparsePageDMatrix::InitializeSparsePage((xgboost::data::SparsePageDMatrix *)a1);
  if (**(_BYTE **)std::map<std::string,xgboost::Json>::at(a1 + 256, (const void **)&v115))
  {
    v17.n128_u64[0] = *(_QWORD *)(a1 + 248);
    v20 = *a2;
    v19 = a2[1];
    v18.n128_u64[0] = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 1))
    {
      if (v20 == -1 && !v19 && !*((_QWORD *)a2 + 2))
        goto LABEL_30;
    }
    else if (v20 == -1 && !v19)
    {
      goto LABEL_30;
    }
    if (!*((_BYTE *)a2 + 24)
      && *(_DWORD *)(a1 + 216) == v20
      && *(_DWORD *)(a1 + 220) == v19
      && v17.n128_f64[0] == v18.n128_f64[0])
    {
LABEL_30:
      v21 = *(_QWORD *)(a1 + 464);
      if (!v21)
      {
        v85 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        dmlc::LogMessageFatal::Entry::Init(v85, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
        v86 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v103);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Check failed: ghist_index_source_", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v103);
        v21 = *(_QWORD *)(a1 + 464);
      }
      (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v21 + 56))(v21, v17, v18);
      goto LABEL_87;
    }
  }
  v22 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>(a1 + 256, (const void **)&v115);
  if (a1 + 264 != v22)
  {
    v23 = (uint64_t *)v22;
    v24 = *(_QWORD **)(v22 + 8);
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      v26 = (_QWORD *)v22;
      do
      {
        v25 = (_QWORD *)v26[2];
        v27 = *v25 == (_QWORD)v26;
        v26 = v25;
      }
      while (!v27);
    }
    if (*v16 == v22)
      *v16 = v25;
    v28 = *(uint64_t **)(a1 + 264);
    --*(_QWORD *)(a1 + 272);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, v23);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)(v23 + 4));
    operator delete(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(v108, ".gradient_index.page");
  if (*(char *)(a1 + 375) < 0)
  {
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a1 + 352), *(_QWORD *)(a1 + 360));
  }
  else
  {
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *v15;
    v107.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 368);
  }
  xgboost::data::MakeCache(&v110, a1, (uint64_t)v108, (uint64_t)&v107, a1 + 256);
  if (v111 < 0)
    operator delete((void *)v110);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (v109 < 0)
    operator delete(v108[0]);
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v103, (uint64_t)__p, 167, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Generating new Gradient Index.", 30);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v103);
    if (v102 < 0)
      operator delete(__p[0]);
  }
  v29 = *((_BYTE *)a2 + 24);
  v30 = a2[1];
  v31 = *((_QWORD *)a2 + 2);
  v100[0] = *((_QWORD *)a2 + 1);
  v100[1] = v31;
  xgboost::common::SketchOnDMatrix(a1, v30, 1, v29, v100, (xgboost::common::HistogramCuts *)&v103);
  xgboost::data::SparsePageDMatrix::InitializeSparsePage((xgboost::data::SparsePageDMatrix *)a1);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 6);
  std::shared_ptr<xgboost::data::SparsePageSource>::reset[abi:ne180100]((_QWORD *)(a1 + 464));
  v32 = *v104;
  v33 = v104[1];
  v99 = 0;
  v34 = v33 - v32;
  v117[0] = v34 >> 2;
  if (!v34)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
    if (__p[0])
    {
      v76 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v117);
      dmlc::LogMessageFatal::Entry::Init(v76, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/sparse_page_dmatrix.cc");
      v77 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v117);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: ", 14);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"cuts.Values().size() != 0", 25);
      v80 = *((char *)__p[0] + 23);
      v81 = v80 >= 0 ? __p[0] : *(void **)__p[0];
      v82 = v80 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v81, v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v117);
      v84 = __p[0];
      __p[0] = 0;
      if (v84)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v84);
    }
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8);
  v91 = **(_QWORD **)(a1 + 176);
  v36 = operator new();
  v37 = *(_DWORD *)(a1 + 312);
  v38 = *(_DWORD *)((**(uint64_t (***)(uint64_t))a1)(a1) + 8);
  v39 = *(_DWORD *)(a1 + 376);
  v40 = (uint64_t *)std::map<std::string,xgboost::Json>::at(a1 + 256, (const void **)&v115);
  v90 = v35;
  v41 = *v40;
  v42 = (std::__shared_weak_count *)v40[1];
  v97[1] = *v40;
  v98 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
  }
  v88 = a3;
  v89 = a2[1];
  v45 = *((_QWORD *)a2 + 4);
  xgboost::common::HistogramCuts::HistogramCuts((uint64_t)&v94, &v103);
  v46 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 16);
  v47 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v48 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 8);
  v49 = *(std::__shared_weak_count **)(a1 + 392);
  v92 = *(_QWORD *)(a1 + 384);
  v93 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v117[0] = v41;
  v117[1] = v42;
  if (v42)
  {
    v52 = (unint64_t *)&v42->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    do
      v54 = __ldxr(v52);
    while (__stxr(v54 + 1, v52));
  }
  *(_QWORD *)v36 = &unk_24E6BA5A0;
  *(_QWORD *)(v36 + 8) = 850045863;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 73) = 0u;
  *(_DWORD *)(v36 + 92) = v37;
  *(_DWORD *)(v36 + 96) = 1;
  *(_DWORD *)(v36 + 100) = v38;
  *(_DWORD *)(v36 + 104) = 0;
  *(_DWORD *)(v36 + 108) = v39;
  *(_QWORD *)(v36 + 112) = v41;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)(v36 + 120) = v42;
  *(_QWORD *)(v36 + 128) = 0;
  v55 = (_QWORD *)operator new();
  v56 = v46 == v48 * v47;
  *v55 = 0;
  v55[1] = 0;
  v55[2] = 0;
  *(_QWORD *)(v36 + 136) = v55;
  *(_QWORD *)v36 = &unk_24E6BA550;
  *(_QWORD *)(v36 + 144) = 0;
  *(_QWORD *)(v36 + 152) = 0;
  *(_BYTE *)(v36 + 160) = 0;
  if (v42)
  {
    v57 = (unint64_t *)&v42->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_QWORD *)v36 = &off_24E6BE888;
  xgboost::common::HistogramCuts::HistogramCuts(v36 + 168, &v94);
  *(_BYTE *)(v36 + 200) = v56;
  *(_DWORD *)(v36 + 204) = v89;
  *(_QWORD *)(v36 + 208) = v90 - v91;
  *(_QWORD *)(v36 + 216) = v91;
  *(_QWORD *)(v36 + 224) = v45;
  std::shared_ptr<xgboost::data::SparsePageSource>::operator=[abi:ne180100]((_QWORD *)(v36 + 144), v92, (uint64_t)v93);
  xgboost::data::GradientIndexPageSource::Fetch((xgboost::data::GradientIndexPageSource *)v36);
  v59 = (_QWORD *)operator new();
  a3 = v88;
  *v59 = &off_24E6BA380;
  v59[1] = 0;
  v59[2] = 0;
  v59[3] = v36;
  v60 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = v36;
  *(_QWORD *)(a1 + 472) = v59;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v93)
  {
    v63 = (unint64_t *)&v93->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v97);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(&v96);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(&v95);
  v65 = v98;
  if (v98)
  {
    v66 = (unint64_t *)&v98->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  xgboost::HostDeviceVector<float>::~HostDeviceVector(v106);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(&v105);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v104);
LABEL_87:
  v69 = *(_QWORD *)(a1 + 464);
  v68 = *(std::__shared_weak_count **)(a1 + 472);
  if (v68)
  {
    v70 = (unint64_t *)&v68->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldxr(v70);
    while (__stxr(v72 + 1, v70));
    do
      v73 = __ldaxr(v70);
    while (__stlxr(v73 - 1, v70));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    do
      v74 = __ldxr(v70);
    while (__stxr(v74 + 1, v70));
    *a3 = v69;
    a3[1] = v68;
    do
      v75 = __ldaxr(v70);
    while (__stlxr(v75 - 1, v70));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  else
  {
    *a3 = v69;
    a3[1] = 0;
  }
  if (v116 < 0)
    operator delete((void *)v115);
}

void sub_220EA5528(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void xgboost::common::SketchOnDMatrix(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, _QWORD *a5@<X4>, xgboost::common::HistogramCuts *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t **v19;
  void **v20;
  unint64_t v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66[2];
  _QWORD v67[2];
  void *__p;
  void *v69;
  uint64_t v70;
  void **v71;
  void **v72;
  _BYTE v73[24];
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  char *v78[8];
  void *v79;
  void *v80;
  unint64_t v81[2];
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void **v87;
  std::__shared_weak_count *v88;
  void ***v89;
  std::__shared_weak_count *v90;
  _QWORD *v91;
  _BYTE *v92;
  _QWORD v93[4];

  xgboost::common::HistogramCuts::HistogramCuts(a6);
  v12 = (**(uint64_t (***)(uint64_t))a1)(a1);
  std::vector<std::vector<unsigned long>>::vector(v93, a3);
  v13 = v93[0];
  v14 = v93[1];
  while (v13 != v14)
  {
    v15 = *(_QWORD *)(v12 + 8);
    v71 = 0;
    std::vector<unsigned long>::resize(v13, v15, &v71);
    v13 += 24;
  }
  v16 = *(_QWORD *)(v12 + 8);
  v71 = 0;
  std::vector<unsigned long>::vector(&v91, v16, &v71);
  (*(void (**)(void ****__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v89, a1);
  v87 = (void **)v89;
  v88 = v90;
  if (v90)
  {
    p_shared_owners = (unint64_t *)&v90->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v85, 0);
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=((uint64_t *)&v87) & 1) != 0)
  {
    v19 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*((uint64_t *)&v87);
    xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::CalcColumnSize(v19, (uint64_t *)&v71, *(_DWORD *)(v12 + 8), a3);
    v20 = v71;
    if (v72 == v71)
    {
      if (!v72)
        goto LABEL_17;
    }
    else
    {
      v21 = v72 - v71;
      v22 = v91;
      if (v21 <= 1)
        v21 = 1;
      v23 = v71;
      do
      {
        v24 = (uint64_t)*v23++;
        *v22++ += v24;
        --v21;
      }
      while (v21);
    }
    v72 = v20;
    operator delete(v20);
LABEL_17:
    xgboost::BatchIterator<xgboost::SparsePage>::operator++((uint64_t *)&v87);
  }
  v25 = v86;
  if (v86)
  {
    v26 = (unint64_t *)&v86->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v88;
  if (v88)
  {
    v29 = (unint64_t *)&v88->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v90;
  if (!v90)
    goto LABEL_32;
  v32 = (unint64_t *)&v90->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if ((a4 & 1) == 0)
      goto LABEL_67;
LABEL_33:
    v34 = (**(uint64_t (***)(uint64_t))a1)(a1);
    __p = 0;
    v69 = 0;
    v70 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 3);
    v35 = *(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48) >= 8uLL
       && *(_QWORD *)v12 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v12 + 72) + 8) - **(_QWORD **)(v12 + 72)) >> 2;
    v36 = a5[1];
    v67[0] = *a5;
    v67[1] = v36;
    xgboost::common::SortedSketchContainer::SortedSketchContainer((uint64_t)&v71, a2, v34, (uint64_t)&__p, v35, (uint64_t)v67, a3);
    if (__p)
    {
      v69 = __p;
      operator delete(__p);
    }
    (*(void (**)(void ****__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v89, a1);
    v87 = (void **)v89;
    v88 = v90;
    if (v90)
    {
      v37 = (unint64_t *)&v90->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v85, 0);
    while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v87) & 1) != 0)
    {
      v39 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v87);
      v40 = a5[1];
      v66[0] = *a5;
      v66[1] = v40;
      xgboost::common::SortedSketchContainer::PushColPage((uint64_t)&v71, v39, (const xgboost::MetaInfo *)v12, v66);
      xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v87);
    }
    v41 = v86;
    if (v86)
    {
      v42 = (unint64_t *)&v86->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v88;
    if (v88)
    {
      v45 = (unint64_t *)&v88->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v90;
    if (v90)
    {
      v48 = (unint64_t *)&v90->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::MakeCuts((uint64_t)&v71, (uint64_t)a6);
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    xgboost::common::Monitor::~Monitor(v78);
    if (v76)
    {
      v77 = v76;
      operator delete(v76);
    }
    if (v74)
    {
      v75 = v74;
      operator delete(v74);
    }
    v89 = (void ***)v73;
    std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    v89 = &v71;
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  }
  else
  {
LABEL_32:
    if ((a4 & 1) != 0)
      goto LABEL_33;
LABEL_67:
    v50 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v82, v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 3);
    v52 = *(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48) >= 8uLL
       && *(_QWORD *)v12 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v12 + 72) + 8) - **(_QWORD **)(v12 + 72)) >> 2;
    xgboost::common::HostSketchContainer::HostSketchContainer((uint64_t)&v71, a2, v50, (uint64_t)&v82, v52, v51, a3);
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    (*(void (**)(void ****__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v89, a1);
    v87 = (void **)v89;
    v88 = v90;
    if (v90)
    {
      v53 = (unint64_t *)&v90->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v85, 0);
    while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=((uint64_t *)&v87) & 1) != 0)
    {
      v55 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*((uint64_t *)&v87);
      v56 = a5[1];
      v81[0] = *a5;
      v81[1] = v56;
      xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::PushRowPage((uint64_t)&v71, v55, (unsigned int *)v12, v81);
      xgboost::BatchIterator<xgboost::SparsePage>::operator++((uint64_t *)&v87);
    }
    v57 = v86;
    if (v86)
    {
      v58 = (unint64_t *)&v86->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v88;
    if (v88)
    {
      v61 = (unint64_t *)&v88->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v90;
    if (v90)
    {
      v64 = (unint64_t *)&v90->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::MakeCuts((uint64_t)&v71, (uint64_t)a6);
    xgboost::common::Monitor::~Monitor(v78);
    if (v76)
    {
      v77 = v76;
      operator delete(v76);
    }
    if (v74)
    {
      v75 = v74;
      operator delete(v74);
    }
    v89 = (void ***)v73;
    std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    v89 = &v71;
    std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  v71 = (void **)v93;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v71);
}

void sub_220EA5DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  xgboost::common::HistogramCuts *v8;
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a8);
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl((uint64_t)va);
  v11 = *(void **)(v9 - 136);
  if (v11)
  {
    *(_QWORD *)(v9 - 128) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(v9 - 136) = v9 - 112;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 136));
  xgboost::common::HistogramCuts::~HistogramCuts(v8);
  _Unwind_Resume(a1);
}

void xgboost::common::HistogramCuts::~HistogramCuts(xgboost::common::HistogramCuts *this)
{
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 3);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector((uint64_t *)this + 2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 1);
}

void xgboost::data::SparsePageDMatrix::GetEllpackBatches(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *Entry;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
  v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v14);
  v7 = *(_QWORD *)(a1 + 400);
  v6 = *(std::__shared_weak_count **)(a1 + 408);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *a2 = v7;
    a2[1] = v6;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = v7;
    a2[1] = 0;
  }
}

void sub_220EA6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageDMatrix::Ctx(xgboost::data::SparsePageDMatrix *this)
{
  return (uint64_t)this + 320;
}

uint64_t xgboost::data::SparsePageDMatrix::SingleColBlock(xgboost::data::SparsePageDMatrix *this)
{
  return 0;
}

void xgboost::data::SparsePageDMatrix::~SparsePageDMatrix(xgboost::data::SparsePageDMatrix *this)
{
  xgboost::data::SparsePageDMatrix::~SparsePageDMatrix(this);
  JUMPOUT(0x227667068);
}

{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  xgboost::data::SparsePageDMatrix *v12;
  uint64_t v13;
  xgboost::data::Cache *v14;
  std::error_code *v15;
  const std::__fs::filesystem::path *v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  _QWORD *v20;
  xgboost::data::SparsePageDMatrix *v21;
  xgboost::data::SparsePageDMatrix *v22;
  BOOL v23;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  void *v27[2];
  unsigned __int8 v28;
  void *__p[2];
  char v30;
  _QWORD v31[35];

  *(_QWORD *)this = &off_24E6B9BB0;
  v2 = (char *)this + 384;
  std::shared_ptr<xgboost::data::SparsePageSource>::reset[abi:ne180100]((_QWORD *)this + 48);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::shared_ptr<xgboost::data::SparsePageSource>::reset[abi:ne180100]((_QWORD *)this + 58);
  v12 = (xgboost::data::SparsePageDMatrix *)*((_QWORD *)this + 32);
  if (v12 != (xgboost::data::SparsePageDMatrix *)((char *)this + 264))
  {
    v13 = dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst();
    do
    {
      v14 = (xgboost::data::Cache *)*((_QWORD *)v12 + 7);
      if (!v14)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_dmatrix.h");
        v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v31);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: kv.second", 23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v31);
        v14 = (xgboost::data::Cache *)*((_QWORD *)v12 + 7);
      }
      xgboost::data::Cache::ShardName(v14, (uint64_t)v27);
      if ((v28 & 0x80u) == 0)
        v16 = (const std::__fs::filesystem::path *)v27;
      else
        v16 = (const std::__fs::filesystem::path *)v27[0];
      if (remove(v16, v15) && *(int *)(v13 + 4) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v31, (uint64_t)__p, 32, 1);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Couldn't remove external memory cache file ", 43);
        v18 = (v28 & 0x80u) == 0 ? v27 : (void **)v27[0];
        v19 = (v28 & 0x80u) == 0 ? (void *)v28 : v27[1];
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, (uint64_t)v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"; you may want to remove it manually",
          36);
        xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v31);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      if ((char)v28 < 0)
        operator delete(v27[0]);
      v21 = (xgboost::data::SparsePageDMatrix *)*((_QWORD *)v12 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(xgboost::data::SparsePageDMatrix **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (xgboost::data::SparsePageDMatrix *)*((_QWORD *)v12 + 2);
          v23 = *(_QWORD *)v22 == (_QWORD)v12;
          v12 = v22;
        }
        while (!v23);
      }
      v12 = v22;
    }
    while (v22 != (xgboost::data::SparsePageDMatrix *)((char *)this + 264));
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*((_QWORD **)this + 33));
  xgboost::MetaInfo::~MetaInfo((xgboost::data::SparsePageDMatrix *)((char *)this + 8));
  xgboost::DMatrix::~DMatrix(this);
}

uint64_t xgboost::data::SparsePageDMatrix::Slice()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_dmatrix.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Slicing DMatrix is not supported for external memory.", 53);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220EA60D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::SparsePageDMatrix::EllpackExists(xgboost::data::SparsePageDMatrix *this)
{
  return *((_QWORD *)this + 50) != 0;
}

BOOL xgboost::data::SparsePageDMatrix::SparsePageExists(xgboost::data::SparsePageDMatrix *this)
{
  return *((_QWORD *)this + 48) != 0;
}

void dmlc::any::~any(dmlc::any *this)
{
  void (*v2)(char *);

  if (*(_QWORD *)this)
  {
    v2 = **(void (***)(char *))this;
    if (v2)
      v2((char *)this + 8);
    *(_QWORD *)this = 0;
  }
}

void dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  char v21;
  char v22;

  v2 = *a1;
  if (!*a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: type_ != nullptr", 30);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"The any container is empty", 26);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" requested=", 11);
    v9 = strlen((const char *)(0x8000000220F62CD1 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, 0x8000000220F62CD1 & 0x7FFFFFFFFFFFFFFFLL, v9);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    v2 = *a1;
  }
  {
    v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"The stored type mismatch", 24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" stored=", 8);
    v16 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v17 = strlen(v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" requested=", 11);
    v20 = strlen((const char *)(0x8000000220F62CD1 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, 0x8000000220F62CD1 & 0x7FFFFFFFFFFFFFFFLL, v20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
}

void sub_220EA6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>(uint64_t *a1)
{
  uint64_t v2;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  std::string *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  char v21;
  char v22;

  v2 = *a1;
  if (!*a1)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v22);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: type_ != nullptr", 30);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"The any container is empty", 26);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" requested=", 11);
    v9 = strlen((const char *)(0x8000000220F62D08 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, 0x8000000220F62D08 & 0x7FFFFFFFFFFFFFFFLL, v9);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v22);
    v2 = *a1;
  }
  {
    v10 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    dmlc::LogMessageFatal::Entry::Init(v10, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/././././any.h");
    v11 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v21);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"The stored type mismatch", 24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" stored=", 8);
    v16 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v17 = strlen(v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" requested=", 11);
    v20 = strlen((const char *)(0x8000000220F62D08 & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, 0x8000000220F62D08 & 0x7FFFFFFFFFFFFFFFLL, v20);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v21);
  }
}

void sub_220EA64E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void xgboost::data::Cache::ShardName(xgboost::data::Cache *this@<X0>, uint64_t a2@<X8>)
{
  std::string __p;
  std::string v5;

  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v5 = *(std::string *)((char *)this + 8);
  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    __p = *(std::string *)((char *)this + 32);
  xgboost::data::Cache::ShardName((const void **)&v5.__r_.__value_.__l.__data_, (char *)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_220EA65BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, const void **a2, __int128 **a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::__find_equal<std::string>(a1, &v17, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v6 = operator new(0x48uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    v16 = 0;
    v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      v6[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v16 = 1;
    v11 = v17;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *v7 = v6;
    v12 = **(_QWORD **)a1;
    v13 = v6;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_220EA66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>(uint64_t a1)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<xgboost::data::Cache>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xgboost::data::Cache *,std::shared_ptr<xgboost::data::Cache>::__shared_ptr_default_delete<xgboost::data::Cache,xgboost::data::Cache>,std::allocator<xgboost::data::Cache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<xgboost::data::Cache>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 56);
    if (v2)
    {
      *(_QWORD *)(v1 + 64) = v2;
      operator delete(v2);
    }
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t xgboost::data::Cache::ShardName@<X0>(const void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  char v18;
  uint64_t v19;

  v6 = a2;
  if (a2[23] < 0)
    v6 = *(char **)a2;
  v18 = 46;
  if (*v6 != 46)
  {
    dmlc::LogCheckFormat<char,char>(v6, &v18, &v19);
    if (v19)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v17);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: ", 14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"format.front() == '.'", 21);
      v11 = *(char *)(v19 + 23);
      if (v11 >= 0)
        v12 = v19;
      else
        v12 = *(_QWORD *)v19;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v19 + 23);
      else
        v13 = *(_QWORD *)(v19 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v17);
      v15 = v19;
      v19 = 0;
      if (v15)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v19, v15);
    }
  }
  return std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (const void **)a2, a3);
}

void sub_220EA6950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void xgboost::common::SortedSketchContainer::~SortedSketchContainer(xgboost::common::SortedSketchContainer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  xgboost::common::Monitor::~Monitor((char **)this + 14);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 24);
  std::vector<std::set<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)this;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t xgboost::common::SortedSketchContainer::SortedSketchContainer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7)
{
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::string v25;
  unint64_t v26[2];
  void *__p;
  void *v28;
  uint64_t v29;

  __p = 0;
  v28 = 0;
  v29 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v12 = **(_QWORD **)(a3 + 168);
  v26[0] = *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8) - v12;
  v26[1] = v12;
  xgboost::common::SketchContainerImpl<xgboost::common::WXQuantileSketch<float,float>>::SketchContainerImpl(a1, (uint64_t)&__p, a2, v26, a5, a7);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v25, "SortedSketchContainer");
  std::string::operator=((std::string *)(a1 + 112), &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::vector<xgboost::common::SortedQuantile>::resize(a1 + 176, *(_QWORD *)(a3 + 8));
  v13 = *(_QWORD **)(a1 + 176);
  v14 = *(_QWORD **)(a1 + 184);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = 2.0 / (double)a2;
    do
    {
      v18 = *(_QWORD *)a1;
      v19 = (_QWORD *)(*(_QWORD *)a1 + v15);
      v20 = *(_DWORD *)(a1 + 96);
      v13[4] = 0xBFF0000000000000;
      v13[5] = v19;
      v13[1] = 0;
      v13[2] = 0;
      v21 = (v20 + 1);
      v22 = v19 + 14;
      if (v21 > (uint64_t)(v19[15] - v19[14]) >> 4)
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)(v19 + 14), v21);
        if (v19[15] == *v22)
          v23 = 0;
        else
          v23 = *v22;
        *(_QWORD *)(v18 + v15 + 96) = v23;
        v19 = (_QWORD *)v13[5];
      }
      v19[13] = 0;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::LimitSizeLevel(*(_QWORD *)(*(_QWORD *)(a1 + 72) + v16), v19 + 4, v19 + 5, v17);
      std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)v19, 1uLL);
      v19[3] = 0;
      v19[10] = v19[9];
      v19[7] = v19[6];
      v13 += 6;
      v16 += 8;
      v15 += 136;
    }
    while (v13 != v14);
  }
  return a1;
}

void sub_220EA6BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  void **v19;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 184) = v21;
    operator delete(v21);
  }
  xgboost::common::SketchContainerImpl<xgboost::common::WQuantileSketch<float,float>>::~SketchContainerImpl(v18);
  _Unwind_Resume(a1);
}

void std::vector<xgboost::common::SortedQuantile>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost::common::SortedQuantile>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

void std::vector<xgboost::common::SortedQuantile>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::LimitSizeLevel(unint64_t a1, uint64_t *a2, unint64_t *a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;

  v4 = 1;
  do
  {
    *a2 = v4;
    v5 = vcvtpd_u64_f64((double)(unint64_t)v4 / a4);
    if (v5 + 1 < a1)
      v6 = v5 + 1;
    else
      v6 = a1;
    *a3 = v6;
    v4 = *a2 + 1;
  }
  while (v6 << *a2 < a1);
  v7 = (unint64_t)((double)v6 * a4);
  if (v7 <= 1)
    v7 = 1;
  if (*a2 > v7)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/quantile.h");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: nlevel <= std::max(static_cast<size_t>(1), static_cast<size_t>(limit_size * eps))", 95);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"invalid init parameter", 22);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  }
}

void sub_220EA6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::common::HistogramCuts::HistogramCuts(uint64_t a1, uint64_t *a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = -1082130432;
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(a1 + 8), 0, 0.0);
  xgboost::HostDeviceVector<unsigned int>::HostDeviceVector((std::vector<unsigned int> **)(a1 + 16), 0, 0);
  xgboost::HostDeviceVector<float>::HostDeviceVector((_QWORD *)(a1 + 24), 0, 0.0);
  xgboost::common::HistogramCuts::Swap((char *)a1, a2);
  return a1;
}

float xgboost::common::HistogramCuts::Swap(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float result;
  uint64_t v12;

  v4 = operator new();
  v5 = *((_QWORD *)a1 + 1);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v12 = v4;
  xgboost::HostDeviceVector<float>::operator=((uint64_t *)a1 + 1, a2 + 1);
  xgboost::HostDeviceVector<float>::operator=(a2 + 1, &v12);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(&v12);
  v6 = operator new();
  v7 = *((_QWORD *)a1 + 2);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  v12 = v6;
  xgboost::HostDeviceVector<unsigned int>::operator=((uint64_t *)a1 + 2, a2 + 2);
  xgboost::HostDeviceVector<unsigned int>::operator=(a2 + 2, &v12);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(&v12);
  v8 = operator new();
  v9 = *((_QWORD *)a1 + 3);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v12 = v8;
  xgboost::HostDeviceVector<float>::operator=((uint64_t *)a1 + 3, a2 + 3);
  xgboost::HostDeviceVector<float>::operator=(a2 + 3, &v12);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(&v12);
  v10 = *a1;
  *a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v10;
  result = *((float *)a1 + 1);
  *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
  *((float *)a2 + 1) = result;
  return result;
}

void sub_220EA70B0(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)va);
  __clang_call_terminate(a1);
}

_QWORD *std::shared_ptr<xgboost::data::SparsePageSource>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

void sub_220EA71D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::GHistIndexMatrix>::operator++(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  std::mutex *v30;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v30, (std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 160))
    xgboost::data::SparsePageSource::operator++(*(_QWORD *)(a1 + 144));
  v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  v7 = v2 == *(_DWORD *)(a1 + 108);
  *(_BYTE *)(a1 + 88) = v7;
  if (v7)
  {
    v3 = *(_QWORD *)(a1 + 112);
    if (!*(_BYTE *)v3)
    {
      v5 = *(uint64_t **)(v3 + 56);
      v4 = *(uint64_t **)(v3 + 64);
      v6 = v5 + 1;
      v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(_BYTE *)v3 = 1;
    }
    v28 = 1;
    if (!v2)
    {
      dmlc::LogCheckFormat<unsigned int,int>(&v29);
      if (v29)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"this->count_ >= 1", 17);
        v13 = *(char *)(v29 + 23);
        v14 = v13 >= 0 ? v29 : *(_QWORD *)v29;
        v15 = v13 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v17 = v29;
        v29 = 0;
        if (v17)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v17);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v28 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 104);
    if (v28 != *(_DWORD *)(a1 + 104))
    {
      dmlc::LogCheckFormat<unsigned int,unsigned int>(&v29);
      if (v29)
      {
        v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"source_->Iter() == this->count_", 31);
        v22 = *(char *)(v29 + 23);
        if (v22 >= 0)
          v23 = v29;
        else
          v23 = *(_QWORD *)v29;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v29 + 23);
        else
          v24 = *(_QWORD *)(v29 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v26 = v29;
        v29 = 0;
        if (v26)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v26);
      }
    }
  }
  std::mutex::unlock(v30);
  return a1;
}

void sub_220EA7428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 80);
  *a2 = *(_QWORD *)(result + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::Reset(uint64_t a1)
{
  std::mutex *v2;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_220EA7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSource::operator++(uint64_t a1)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  int v11;
  int v12;
  std::string *Entry;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::mutex *v34;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v34, (std::mutex *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  if (**(_BYTE **)(a1 + 112))
    v3 = v2 == *(_DWORD *)(a1 + 108);
  else
    v3 = (*(unsigned int (**)(_QWORD))(a1 + 160))(*(_QWORD *)(a1 + 144)) == 0;
  v4 = v3;
  *(_BYTE *)(a1 + 88) = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 112);
    if (!*(_BYTE *)v5)
    {
      v7 = *(uint64_t **)(v5 + 56);
      v6 = *(uint64_t **)(v5 + 64);
      v8 = v7 + 1;
      if (v7 != v6 && v8 != v6)
      {
        v10 = *v7;
        do
        {
          v10 += *v8;
          *v8++ = v10;
        }
        while (v8 != v6);
      }
      *(_BYTE *)v5 = 1;
    }
    v11 = *(_DWORD *)(a1 + 108);
    v12 = *(_DWORD *)(a1 + 104);
    if (v11)
    {
      if (v12 != v11)
      {
        dmlc::LogCheckFormat<unsigned int,unsigned int>(&v33);
        if (v33)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
          v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"count_ == n_batches_", 20);
          v17 = *(char *)(v33 + 23);
          v18 = v17 >= 0 ? v33 : *(_QWORD *)v33;
          v19 = v17 >= 0 ? *(unsigned __int8 *)(v33 + 23) : *(_QWORD *)(v33 + 8);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
          v21 = v33;
          v33 = 0;
          if (v21)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v21);
        }
      }
      v12 = *(_DWORD *)(a1 + 104);
    }
    v32 = 1;
    if (!v12)
    {
      dmlc::LogCheckFormat<unsigned int,int>(&v33);
      if (v33)
      {
        v23 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
        dmlc::LogMessageFatal::Entry::Init(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v24 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v32);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: ", 14);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"count_ >= 1", 11);
        v27 = *(char *)(v33 + 23);
        if (v27 >= 0)
          v28 = v33;
        else
          v28 = *(_QWORD *)v33;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v33 + 23);
        else
          v29 = *(_QWORD *)(v33 + 8);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v32);
        v31 = v33;
        v33 = 0;
        if (v31)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, v31);
      }
    }
    *(_QWORD *)(a1 + 168) = 0;
  }
  else
  {
    xgboost::data::SparsePageSource::Fetch((xgboost::data::SparsePageSource *)a1);
  }
  std::mutex::unlock(v34);
  return a1;
}

void sub_220EA7760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

xgboost::data::TryLockGuard *xgboost::data::TryLockGuard::TryLockGuard(xgboost::data::TryLockGuard *this, std::mutex *a2)
{
  std::string *Entry;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  *(_QWORD *)this = a2;
  if (!std::mutex::try_lock(a2))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v5 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v8);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: lock_.try_lock()", 30);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Multiple threads attempting to use Sparse DMatrix.", 50);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v8);
  }
  return this;
}

void sub_220EA7854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSource::Fetch(xgboost::data::SparsePageSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  std::string *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  std::string *Entry;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  char v20;

  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v19);
  std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100]((uint64_t)this + 72, &v19);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  result = xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache((uint64_t)this);
  if ((result & 1) == 0)
  {
    v20 = 0;
    v6 = *((_QWORD *)this + 21);
    if (!v6)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v17 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: proxy_", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
      v6 = *((_QWORD *)this + 21);
    }
    _ZN7xgboost4data19HostAdapterDispatchIZNS0_16SparsePageSource5FetchEvEUlRKT_E_EEDcPKNS0_12DMatrixProxyES3_Pb(v6, (uint64_t)this, &v20);
    if (v20)
    {
      v7 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
      dmlc::LogMessageFatal::Entry::Init(v7, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./../common/common.h");
      v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v19);
    }
    v9 = (uint64_t **)*((_QWORD *)this + 9);
    v10 = **v9;
    v11 = (*v9)[1];
    v12 = ((v11 - v10) >> 3) - 1;
    v13 = v11 == v10;
    v14 = (uint64_t *)*((_QWORD *)this + 22);
    v9[2] = v14;
    if (v13)
      v15 = 0;
    else
      v15 = v12;
    *((_QWORD *)this + 22) = (char *)v14 + v15;
    ++*((_DWORD *)this + 27);
    return xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::WriteCache((uint64_t)this);
  }
  return result;
}

void sub_220EA79D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

BOOL xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *Entry;
  _QWORD *v59;
  _QWORD *v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;

  if (*(_BYTE *)(a1 + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v59 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v61);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v61);
  }
  v2 = *(_BYTE **)(a1 + 112);
  v3 = *v2;
  if (*v2)
  {
    v4 = *(_QWORD *)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)(a1 + 128) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::resize(*(uint64_t **)(a1 + 136), *(unsigned int *)(a1 + 108));
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 108);
    if (v5 >= 4)
      v5 = 4;
    else
      v5 = v5;
    v64 = v5;
    LODWORD(v63) = 0;
    if (!(_DWORD)v5)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v61);
      if ((_QWORD)v61)
      {
        v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v63);
        dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v63);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"n_prefetch_batches > 0", 22);
        v38 = *(char *)(v61 + 23);
        v39 = v38 >= 0 ? v61 : *(_QWORD *)v61;
        v40 = v38 >= 0 ? *(unsigned __int8 *)(v61 + 23) : *(_QWORD *)(v61 + 8);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"total batches:", 14);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v63);
        v43 = v61;
        *(_QWORD *)&v61 = 0;
        if (v43)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v43);
      }
    }
    v6 = *(unsigned int *)(a1 + 104);
    v63 = v6;
    v7 = v64;
    if (v64)
    {
      v8 = 0;
      do
      {
        v9 = v6 % *(unsigned int *)(a1 + 108);
        v63 = v9;
        v10 = *(_QWORD **)(a1 + 136);
        if (v9 >= (uint64_t)(v10[1] - *v10) >> 3)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        if (!*(_QWORD *)(*v10 + 8 * v9))
        {
          v62 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 64) - *(_QWORD *)(*(_QWORD *)(a1 + 112) + 56)) >> 3;
          if (v9 >= v62)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v61);
            if ((_QWORD)v61)
            {
              v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
              dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
              v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
              v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
              v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"fetch_it < cache_info_->offset.size()", 37);
              v15 = *(char *)(v61 + 23);
              v16 = v15 >= 0 ? v61 : *(_QWORD *)v61;
              v17 = v15 >= 0 ? *(unsigned __int8 *)(v61 + 23) : *(_QWORD *)(v61 + 8);
              v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
              v19 = v61;
              *(_QWORD *)&v61 = 0;
              if (v19)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v19);
            }
          }
          *(_QWORD *)&v61 = v63;
          *((_QWORD *)&v61 + 1) = a1;
          std::async[abi:ne180100]<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>(1, &v61, (uint64_t *)&v62);
          v20 = *(uint64_t **)(a1 + 136);
          v21 = *v20;
          if (v63 >= (v20[1] - *v20) >> 3)
            std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
          v22 = v62;
          v62 = 0;
          v23 = *(unint64_t **)(v21 + 8 * v63);
          *(_QWORD *)(v21 + 8 * v63) = v22;
          if (v23)
          {
            v24 = v23 + 1;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
              (*(void (**)(unint64_t *))(*v23 + 16))(v23);
          }
          v26 = v62;
          if (v62)
          {
            v27 = (unint64_t *)(v62 + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          }
          v9 = v63;
          v7 = v64;
        }
        ++v8;
        v6 = v9 + 1;
        v63 = v6;
      }
      while (v8 < v7);
    }
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(_QWORD **)v29;
    v31 = *(_QWORD **)(v29 + 8);
    if (v30 == v31)
    {
      v32 = 0;
    }
    else
    {
      v32 = 0;
      do
      {
        if (*v30++)
          ++v32;
      }
      while (v30 != v31);
    }
    v62 = v32;
    if (v32 != v7)
    {
      dmlc::LogCheckFormat<long,unsigned long>((uint64_t *)&v61);
      if ((_QWORD)v61)
      {
        v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
        dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v62);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"std::count_if (ring_->cbegin(), ring_->cend(), [](auto const& f) { return f.valid(); }) == n_prefetch_batches",
                108);
        v48 = *(char *)(v61 + 23);
        v49 = v48 >= 0 ? v61 : *(_QWORD *)v61;
        v50 = v48 >= 0 ? *(unsigned __int8 *)(v61 + 23) : *(_QWORD *)(v61 + 8);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Sparse DMatrix assumes forward iteration.", 41);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v62);
        v53 = v61;
        *(_QWORD *)&v61 = 0;
        if (v53)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v53);
      }
    }
    std::future<std::shared_ptr<xgboost::SparsePage>>::get((uint64_t *)(**(_QWORD **)(a1 + 136) + 8 * *(unsigned int *)(a1 + 104)), &v61);
    std::shared_ptr<xgboost::HostDeviceVector<unsigned int>>::operator=[abi:ne180100](a1 + 72, &v61);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  return v3 != 0;
}

void sub_220EA7EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void _ZN7xgboost4data19HostAdapterDispatchIZNS0_16SparsePageSource5FetchEvEUlRKT_E_EEDcPKNS0_12DMatrixProxyES3_Pb(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  void (**v9)(_QWORD *);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  void (**v23)(_QWORD *);
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string *Entry;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  size_t v35;
  void (**v36)(_QWORD *);
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 216);
  v38 = v6;
  if (v6)
  {
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(&v39, a1 + 224);
    v7 = *(_QWORD *)(v38 + 16);
  }
  else
  {
    v7 = MEMORY[0x24BEDB7C8];
  }
  if (v38 && *(_QWORD *)v38)
    (*(void (**)(uint64_t *))v38)(&v39);
  if (v8)
  {
    v9 = *(void (***)(_QWORD *))(a1 + 216);
    v36 = v9;
    if (v9)
      ((void (*)(_QWORD *, uint64_t))v9[1])(v37, a1 + 224);
    dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>((uint64_t *)&v36);
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37[0] + 32))(v37[0]);
    v11 = *(_QWORD *)(v10 + 8);
    v38 = *(_QWORD *)v10;
    v39 = v11;
    v12 = *(_OWORD *)(v10 + 16);
    v13 = *(_OWORD *)(v10 + 32);
    LOWORD(v42) = *(_WORD *)(v10 + 48);
    v41 = v13;
    v40 = v12;
    v14 = *(_QWORD *)(v10 + 64);
    *((_QWORD *)&v42 + 1) = *(_QWORD *)(v10 + 56);
    v43 = v14;
    v15 = *(_WORD *)(v10 + 104);
    v16 = *(_OWORD *)(v10 + 88);
    v44 = *(_OWORD *)(v10 + 72);
    v45 = v16;
    v46 = v15;
    v17 = *(_QWORD *)(v10 + 120);
    v47 = *(_QWORD *)(v10 + 112);
    v48 = v17;
    v18 = *(_OWORD *)(v10 + 128);
    v19 = *(_OWORD *)(v10 + 144);
    v51 = *(_WORD *)(v10 + 160);
    v50 = v19;
    v49 = v18;
    v52 = *(_DWORD *)(v10 + 168);
    if (v36 && *v36)
      (*v36)(v37);
    if (a3)
      *a3 = 0;
    xgboost::SparsePage::Push<xgboost::data::CSRArrayAdapterBatch>(*(uint64_t ***)(a2 + 72), (xgboost::data::CSRArrayAdapterBatch *)&v38, *(_DWORD *)(a2 + 96), *(float *)(a2 + 92));
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 216);
    v38 = v20;
    if (v20)
    {
      (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(&v39, a1 + 224);
      v21 = *(_QWORD *)(v38 + 16);
    }
    else
    {
      v21 = MEMORY[0x24BEDB7C8];
    }
    if (v38 && *(_QWORD *)v38)
      (*(void (**)(uint64_t *))v38)(&v39);
    if (v22)
    {
      v23 = *(void (***)(_QWORD *))(a1 + 216);
      v36 = v23;
      if (v23)
        ((void (*)(_QWORD *, uint64_t))v23[1])(v37, a1 + 224);
      dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>((uint64_t *)&v36);
      v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v37[0] + 32))(v37[0]);
      v25 = *(_QWORD *)(v24 + 8);
      v38 = *(_QWORD *)v24;
      v39 = v25;
      v27 = *(_OWORD *)(v24 + 32);
      v26 = *(_OWORD *)(v24 + 48);
      v28 = *(_OWORD *)(v24 + 16);
      LOWORD(v43) = *(_WORD *)(v24 + 64);
      v42 = v26;
      v40 = v28;
      v41 = v27;
      if (v36 && *v36)
        (*v36)(v37);
      if (a3)
        *a3 = 0;
      xgboost::SparsePage::Push<xgboost::data::ArrayAdapterBatch>(*(uint64_t ***)(a2 + 72), (uint64_t)&v38, *(_DWORD *)(a2 + 96), *(float *)(a2 + 92));
    }
    else if (a3)
    {
      *a3 = 1;
    }
    else
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./proxy_dmatrix.h");
      v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v36);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unknown type: ", 14);
      v32 = *(_QWORD *)(a1 + 216);
      v38 = v32;
      if (v32 && ((*(void (**)(uint64_t *, uint64_t))(v32 + 8))(&v39, a1 + 224), v38))
        v33 = *(_QWORD *)(v38 + 16);
      else
        v33 = MEMORY[0x24BEDB7C8];
      v34 = (const char *)(*(_QWORD *)(v33 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v35 = strlen(v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v34, v35);
      if (v38 && *(_QWORD *)v38)
        (*(void (**)(uint64_t *))v38)(&v39);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v36);
    }
  }
}

void sub_220EA82BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::WriteCache(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  std::string *Entry;
  _QWORD *v25;
  _QWORD *v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;

  if (**(_BYTE **)(a1 + 112))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v25 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !cache_info_->written", 35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  v2 = xgboost::data::CreatePageFormat<xgboost::SparsePage>((uint64_t)__p);
  if (v30 < 0)
    operator delete(__p[0]);
  v3 = *(_QWORD *)(a1 + 128);
  if (!v3)
  {
    xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a1 + 112), (uint64_t)__p);
    if (v30 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v5 = dmlc::Stream::Create((dmlc::Stream *)v4, "w", 0);
    v6 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    if (v30 < 0)
      operator delete(__p[0]);
    v3 = *(_QWORD *)(a1 + 128);
  }
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, *(_QWORD *)(a1 + 72), v3);
  std::chrono::steady_clock::now();
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v27, 164, 2);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" MB written in ", 15);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" seconds.", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
    if (v28 < 0)
      operator delete(v27[0]);
  }
  v10 = *(_QWORD **)(a1 + 112);
  v11 = (uint64_t *)v10[8];
  v12 = v10[9];
  if ((unint64_t)v11 >= v12)
  {
    v14 = (uint64_t *)v10[7];
    v15 = v11 - v14;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)v14;
    v17 = (uint64_t)(v12 - (_QWORD)v14) >> 2;
    if (v17 <= v15 + 1)
      v17 = v15 + 1;
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v10 + 9), v18);
      v14 = (uint64_t *)v10[7];
      v11 = (uint64_t *)v10[8];
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v7;
    v13 = v20 + 1;
    while (v11 != v14)
    {
      v22 = *--v11;
      *--v20 = v22;
    }
    v10[7] = v20;
    v10[8] = v13;
    v10[9] = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v11 = v7;
    v13 = v11 + 1;
  }
  v10[8] = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_220EA85F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x30uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN7xgboost10SparsePageENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_220EA86C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN7xgboost10SparsePageENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24E6BA438;
  *(_QWORD *)(a1 + 8) = 0;
  xgboost::SparsePage::SparsePage((char ***)(a1 + 24));
  return a1;
}

void sub_220EA870C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::SparsePage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6BA438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::SparsePage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24E6BA438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t *std::__shared_ptr_emplace<xgboost::SparsePage>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 24);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)(a1 + 32));
  return xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v1);
}

void std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 8 * a2;
      while (v3 != v5)
      {
        v7 = *(unint64_t **)(v3 - 8);
        v3 -= 8;
        v6 = v7;
        if (v7)
        {
          v8 = v6 + 1;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
            (*(void (**)(unint64_t *))(*v6 + 16))(v6);
        }
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__append(a1, a2 - v4);
  }
}

void std::async[abi:ne180100]<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>(char a1@<W0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v3;

  if ((a1 & 1) != 0)
  {
    v3 = *a2;
    std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>(&v3, a3);
  }
  else if ((a1 & 2) != 0)
  {
    v3 = *a2;
    std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>(&v3, a3);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_220EA88B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::future<std::shared_ptr<xgboost::SparsePage>>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *a1;
  *a1 = 0;
  std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::move(v2, a2);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
}

void sub_220EA8928(_Unwind_Exception *exception_object)
{
  unint64_t *v1;
  unint64_t *v3;
  unint64_t v4;

  if (v1)
  {
    v3 = v1 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[8 * v10];
    v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    v16 = &v15[8 * a2];
    std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer((unint64_t *)&v14);
  }
}

void sub_220EA8A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::future<std::shared_ptr<xgboost::SparsePage>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *--a3;
      *(_QWORD *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>::operator()[abi:ne180100]((unint64_t *)a1);
  return a1;
}

unint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::future<std::shared_ptr<xgboost::SparsePage>>>,std::reverse_iterator<std::future<std::shared_ptr<xgboost::SparsePage>>*>>::operator()[abi:ne180100](unint64_t *result)
{
  unint64_t **v1;
  unint64_t **v2;
  unint64_t *v3;
  unint64_t v4;

  v1 = *(unint64_t ***)(result[2] + 8);
  v2 = *(unint64_t ***)(result[1] + 8);
  while (v1 != v2)
  {
    result = *v1;
    if (*v1)
    {
      v3 = result + 1;
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
        result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

unint64_t *std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::~__split_buffer(unint64_t *a1)
{
  std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete((void *)*a1);
  return a1;
}

unint64_t *std::__split_buffer<std::future<std::shared_ptr<xgboost::SparsePage>>>::clear[abi:ne180100](unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      result = *(unint64_t **)(v1 - 8);
      v3[2] = v1 - 8;
      if (result)
      {
        v4 = result + 1;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
          result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
      }
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::thread v9;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24E6BA488;
  *(_OWORD *)(v4 + 160) = *a1;
  v8 = xmmword_220F620A0;
  v7 = v4;
  std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*,void>(&v9.__t_, &v8, &v7);
  std::thread::detach(&v9);
  std::thread::~thread(&v9);
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_220EA8D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::thread a14)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v17;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  _Unwind_Resume(exception_object);
}

void std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)v4 = &off_24E6BA4E8;
  *(_OWORD *)(v4 + 160) = *a1;
  *(_DWORD *)(v4 + 136) = 8;
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_220EA8E8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}::operator()((_QWORD *)(a1 + 160), &v5);
  std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::set_value<std::shared_ptr<xgboost::SparsePage>>(a1, (uint64_t)&v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_220EA901C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x220EA900CLL);
}

void sub_220EA905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::__on_zero_shared(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::set_value<std::shared_ptr<xgboost::SparsePage>>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_220EA9140(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x227666C90](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], MEMORY[0x24BEDAD80]);
}

void sub_220EA919C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}::operator()@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  dmlc::SeekStream *v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23[2];
  char v24;
  void *__p[2];
  char v26;
  __int128 v27;
  void *v28;
  void *v29[2];
  char v30;

  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  v4 = xgboost::data::CreatePageFormat<xgboost::SparsePage>((uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(a1[1] + 112), (uint64_t)v29);
  v28 = 0;
  v5 = *(_QWORD *)(a1[1] + 112);
  v6 = *(_QWORD *)(v5 + 56);
  if (*a1 >= (unint64_t)((*(_QWORD *)(v5 + 64) - v6) >> 3))
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v28 = *(void **)(v6 + 8 * *a1);
  if (v30 >= 0)
    v7 = (dmlc::SeekStream *)v29;
  else
    v7 = (dmlc::SeekStream *)v29[0];
  v8 = dmlc::SeekStream::CreateForRead(v7, 0);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v8 + 32))(v8, v28);
  v23[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  if (v23[0] != v28)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"fi->Tell() == offset", 20);
      v13 = *((char *)__p[0] + 23);
      v14 = v13 >= 0 ? __p[0] : *(void **)__p[0];
      v15 = v13 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
      v17 = __p[0];
      __p[0] = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v17);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN7xgboost10SparsePageENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v27);
  if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, v27, v8) & 1) == 0)
  {
    v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: fmt->Read(page.get(), fi.get())", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v23, 141, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read a page in ", 15);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" seconds.", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  *a2 = v27;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  if (v30 < 0)
    operator delete(v29[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_220EA9474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v23 - 80);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

void sub_220EA9540(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EA954CLL);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::SparsePage>(uint64_t a1)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *Entry;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  const void *v11;
  uint64_t v12;
  char v13;

  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SparsePage>>::Get();
  v3 = std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)(v2 + 3), (const void **)a1);
  if ((__int128 *)((char *)v2 + 56) == (__int128 *)v3 || (v4 = *(_QWORD *)(v3 + 56)) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    v8 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unknown format type ", 20);
    v10 = *(char *)(a1 + 23);
    if (v10 >= 0)
      v11 = (const void *)a1;
    else
      v11 = *(const void **)a1;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 23);
    else
      v12 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
    return 0;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 96);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
}

void sub_220EA9634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_OWORD *)(v7 + 8) = *a2;
  *(_QWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](v9, 0);
  }
}

void sub_220EA9714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  const void **v7;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (char *)v7[3] + (v4 >> 1);
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_220EA97CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x227667068);
  }
  return result;
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_220EA9890(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__deferred_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::~__deferred_assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227667068);
}

void std::__deferred_assoc_state<std::shared_ptr<xgboost::SparsePage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::ReadCache(void)::{lambda(void)#1}::operator()((_QWORD *)(a1 + 160), &v5);
  std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::set_value<std::shared_ptr<xgboost::SparsePage>>(a1, (uint64_t)&v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_220EA99C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x220EA99B4);
}

void sub_220EA9A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t dmlc::LogCheckFormat<long,unsigned long>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220EA9B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__assoc_state<std::shared_ptr<xgboost::SparsePage>>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_220EA9C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::GHistIndexMatrix>::~SparsePageSourceImpl(uint64_t a1)
{
  uint64_t **v2;
  void ***v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;

  *(_QWORD *)a1 = &unk_24E6BA5A0;
  v3 = (void ***)(a1 + 136);
  v2 = *(uint64_t ***)(a1 + 136);
  v4 = *v2;
  v5 = v2[1];
  while (v4 != v5)
  {
    if (*v4)
    {
      std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>::get(v4, &v11);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    ++v4;
  }
  std::unique_ptr<std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>>::reset[abi:ne180100](v3, 0);
  v9 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 72);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>::get(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *a1;
  *a1 = 0;
  std::__assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>>::move(v2, a2);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
}

void sub_220EA9D80(_Unwind_Exception *exception_object)
{
  unint64_t *v1;
  unint64_t *v3;
  unint64_t v4;

  if (v1)
  {
    v3 = v1 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__assoc_state<std::shared_ptr<xgboost::GHistIndexMatrix>>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_220EA9E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x227667068](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__clear[abi:ne180100]((unint64_t *)v2);
    operator delete(**a1);
  }
}

unint64_t *std::vector<std::future<std::shared_ptr<xgboost::GHistIndexMatrix>>>::__clear[abi:ne180100](unint64_t *result)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t i;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = result;
  v2 = *result;
  for (i = result[1]; i != v2; i -= 8)
  {
    v4 = *(unint64_t **)(i - 8);
    result = v4;
    if (v4)
    {
      v5 = result + 1;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
        result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_220EAA274(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<xgboost::data::Cache>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<xgboost::data::Cache>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::SparsePageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::~SparsePageSourceImpl(uint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;

  *(_QWORD *)a1 = off_24E6B9DB0;
  v2 = *(uint64_t ***)(a1 + 136);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
    *(_QWORD *)(a1 + 136) = 0;
LABEL_12:
    v8 = *v2;
    if (*v2)
    {
      v9 = v2[1];
      v10 = *v2;
      if (v9 != v8)
      {
        do
        {
          v12 = (unint64_t *)*--v9;
          v11 = v12;
          if (v12)
          {
            v13 = v11 + 1;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
              (*(void (**)(unint64_t *))(*v11 + 16))(v11);
          }
        }
        while (v9 != v8);
        v10 = *v2;
      }
      v2[1] = v8;
      operator delete(v10);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
    goto LABEL_23;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::SparsePage>>::get(v3, &v17);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    ++v3;
  }
  while (v3 != v4);
  v2 = *(uint64_t ***)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    goto LABEL_12;
LABEL_23:
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 72);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void xgboost::data::SparsePageSource::~SparsePageSource(xgboost::data::SparsePageSource *this)
{
  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::~SparsePageSourceImpl((uint64_t)this);
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

void sub_220EAA538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 80);
  *a2 = *(_QWORD *)(result + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void xgboost::data::SparsePageSource::Reset(xgboost::data::SparsePageSource *this)
{
  std::mutex *v2;

  if (*((_QWORD *)this + 21))
  {
    xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)((char *)this + 8));
    (*((void (**)(_QWORD))this + 19))(*((_QWORD *)this + 18));
    std::mutex::unlock(v2);
  }
  xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Reset((uint64_t)this);
  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)((char *)this + 8));
  *((_QWORD *)this + 22) = 0;
  std::mutex::unlock(v2);
}

void sub_220EAA5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void xgboost::data::SparsePageSourceImpl<xgboost::SparsePage>::Reset(uint64_t a1)
{
  std::mutex *v2;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_220EAA650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::CSCPageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::CSCPageSource::Fetch(xgboost::data::CSCPageSource *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char ***v22;
  xgboost::SparsePage *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::string *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  std::__thread_struct *v71;
  char *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  std::string *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  std::string *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  void *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  unint64_t *v108;
  std::string *Entry;
  _QWORD *v110;
  _QWORD *v111;
  std::string *v112;
  _QWORD *v113;
  _QWORD *v114;
  pthread_t v115;
  std::__shared_weak_count *v116;
  unint64_t v117;
  uint64_t v118;
  void *v119[2];
  char v120;
  void *__p[2];
  char v122;

  if (*((_BYTE *)this + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v110 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (**((_BYTE **)this + 14))
  {
    v2 = *((_QWORD *)this + 16);
    if (v2)
    {
      *((_QWORD *)this + 16) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
      v3 = *((_QWORD *)this + 17);
      v4 = *((unsigned int *)this + 27);
      v6 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
      v7 = ((uint64_t)v5 - *(_QWORD *)v3) >> 3;
      if (v4 <= v7)
      {
        if (v4 < v7)
        {
          v36 = &v6[v4];
          while (v5 != v36)
          {
            v38 = (unint64_t *)*--v5;
            v37 = v38;
            if (v38)
            {
              v39 = v37 + 1;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
                (*(void (**)(unint64_t *))(*v37 + 16))(v37);
            }
          }
          *(_QWORD *)(v3 + 8) = v36;
        }
      }
      else
      {
        v8 = v4 - v7;
        v9 = *(_QWORD *)(v3 + 16);
        if (v4 - v7 <= (v9 - (uint64_t)v5) >> 3)
        {
          bzero(*(void **)(v3 + 8), 8 * v8);
          *(_QWORD *)(v3 + 8) = &v5[v8];
        }
        else
        {
          v10 = v9 - (_QWORD)v6;
          if (v10 >> 2 > v4)
            v4 = v10 >> 2;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v4;
          if (v11 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v12 = (char *)operator new(8 * v11);
          v13 = &v12[8 * v7];
          v14 = &v12[8 * v11];
          bzero(v13, 8 * v8);
          v15 = &v13[8 * v8];
          if (v5 == v6)
          {
            *(_QWORD *)v3 = v13;
            *(_QWORD *)(v3 + 8) = v15;
            *(_QWORD *)(v3 + 16) = v14;
          }
          else
          {
            do
            {
              v16 = *--v5;
              *((_QWORD *)v13 - 1) = v16;
              v13 -= 8;
              *v5 = 0;
            }
            while (v5 != v6);
            v5 = *(_QWORD **)v3;
            v17 = *(_QWORD **)(v3 + 8);
            *(_QWORD *)v3 = v13;
            *(_QWORD *)(v3 + 8) = v15;
            *(_QWORD *)(v3 + 16) = v14;
            while (v17 != v5)
            {
              v19 = (unint64_t *)*--v17;
              v18 = v19;
              if (v19)
              {
                v20 = v18 + 1;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                  (*(void (**)(unint64_t *))(*v18 + 16))(v18);
              }
            }
          }
          if (v5)
            operator delete(v5);
        }
      }
    }
    LODWORD(v53) = *((_DWORD *)this + 27);
    if (v53 >= 4)
      v53 = 4;
    else
      v53 = v53;
    v118 = v53;
    LODWORD(v119[0]) = 0;
    if (!(_DWORD)v53)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
      if (__p[0])
      {
        v84 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
        dmlc::LogMessageFatal::Entry::Init(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
        v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: ", 14);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"n_prefetch_batches > 0", 22);
        v88 = *((char *)__p[0] + 23);
        v89 = v88 >= 0 ? __p[0] : *(void **)__p[0];
        v90 = v88 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v89, v90);
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"total batches:", 14);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v119);
        v93 = __p[0];
        __p[0] = 0;
        if (v93)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v93);
      }
    }
    v54 = *((unsigned int *)this + 26);
    v117 = v54;
    v55 = (char *)v118;
    if (v118)
    {
      v56 = 0;
      do
      {
        v57 = v54 % *((unsigned int *)this + 27);
        v117 = v57;
        v58 = **((_QWORD **)this + 17);
        if (v57 >= (*(_QWORD *)(*((_QWORD *)this + 17) + 8) - v58) >> 3)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        if (!*(_QWORD *)(v58 + 8 * v57))
        {
          v119[0] = (void *)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 14) + 64)
                                     - *(_QWORD *)(*((_QWORD *)this + 14) + 56)) >> 3);
          if ((void *)v57 >= v119[0])
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
            if (__p[0])
            {
              v59 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
              dmlc::LogMessageFatal::Entry::Init(v59, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
              v60 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Check failed: ", 14);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"fetch_it < cache_info_->offset.size()", 37);
              v63 = *((char *)__p[0] + 23);
              v64 = v63 >= 0 ? __p[0] : *(void **)__p[0];
              v65 = v63 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v64, v65);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v119);
              v67 = __p[0];
              __p[0] = 0;
              if (v67)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v67);
            }
          }
          v68 = v117;
          v69 = operator new();
          *(_QWORD *)(v69 + 8) = 0;
          v70 = (unint64_t *)(v69 + 8);
          *(_QWORD *)(v69 + 16) = 0;
          *(_QWORD *)(v69 + 24) = 850045863;
          *(_OWORD *)(v69 + 32) = 0u;
          *(_OWORD *)(v69 + 48) = 0u;
          *(_OWORD *)(v69 + 64) = 0u;
          *(_QWORD *)(v69 + 80) = 0;
          *(_QWORD *)(v69 + 88) = 1018212795;
          *(_OWORD *)(v69 + 96) = 0u;
          *(_OWORD *)(v69 + 112) = 0u;
          *(_OWORD *)(v69 + 124) = 0u;
          *(_QWORD *)v69 = &off_24E6B9F98;
          *(_QWORD *)(v69 + 160) = v68;
          *(_QWORD *)(v69 + 168) = this;
          v71 = (std::__thread_struct *)operator new();
          std::__thread_struct::__thread_struct(v71);
          __p[0] = v71;
          v72 = (char *)operator new();
          __p[0] = 0;
          *(_QWORD *)v72 = v71;
          *(_OWORD *)(v72 + 8) = xmmword_220F620A0;
          *((_QWORD *)v72 + 3) = v69;
          v119[0] = v72;
          v73 = pthread_create(&v115, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>, v72);
          if (v73)
          {
            std::__throw_system_error(v73, "thread constructor failed");
            __break(1u);
            return;
          }
          v119[0] = 0;
          std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)v119);
          std::thread::detach((std::thread *)&v115);
          std::thread::~thread((std::thread *)&v115);
          std::__assoc_sub_state::__attach_future[abi:ne180100](v69);
          do
            v74 = __ldaxr(v70);
          while (__stlxr(v74 - 1, v70));
          if (!v74)
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
          v75 = **((_QWORD **)this + 17);
          if (v117 >= (*(_QWORD *)(*((_QWORD *)this + 17) + 8) - v75) >> 3)
            std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
          v76 = *(unint64_t **)(v75 + 8 * v117);
          *(_QWORD *)(v75 + 8 * v117) = v69;
          if (v76)
          {
            v77 = v76 + 1;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
              (*(void (**)(unint64_t *))(*v76 + 16))(v76);
          }
          v57 = v117;
          v55 = (char *)v118;
        }
        ++v56;
        v54 = v57 + 1;
        v117 = v54;
      }
      while (v56 < (unint64_t)v55);
    }
    v79 = *((_QWORD *)this + 17);
    v80 = *(_QWORD **)v79;
    v81 = *(_QWORD **)(v79 + 8);
    if (v80 == v81)
    {
      v82 = 0;
    }
    else
    {
      v82 = 0;
      do
      {
        if (*v80++)
          ++v82;
      }
      while (v80 != v81);
    }
    v119[0] = v82;
    if (v82 != v55)
    {
      dmlc::LogCheckFormat<long,unsigned long>((uint64_t *)__p);
      if (__p[0])
      {
        v94 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
        dmlc::LogMessageFatal::Entry::Init(v94, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v95 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v119);
        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: ", 14);
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"std::count_if (ring_->cbegin(), ring_->cend(), [](auto const& f) { return f.valid(); }) == n_prefetch_batches",
                108);
        v98 = *((char *)__p[0] + 23);
        v99 = v98 >= 0 ? __p[0] : *(void **)__p[0];
        v100 = v98 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v99, v100);
        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Sparse DMatrix assumes forward iteration.", 41);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v119);
        v103 = __p[0];
        __p[0] = 0;
        if (v103)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v103);
      }
    }
    std::future<std::shared_ptr<xgboost::CSCPage>>::get(__p, (uint64_t *)(**((_QWORD **)this + 17) + 8 * *((unsigned int *)this + 26)));
    v104 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v105 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    *(_OWORD *)((char *)this + 72) = v104;
    if (v105)
    {
      p_shared_owners = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldaxr(p_shared_owners);
      while (__stlxr(v107 - 1, p_shared_owners));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v50 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v108 = (unint64_t *)((char *)__p[1] + 8);
      do
        v52 = __ldaxr(v108);
      while (__stlxr(v52 - 1, v108));
      goto LABEL_136;
    }
  }
  else
  {
    (*(void (**)(pthread_t *__return_ptr))(**((_QWORD **)this + 18) + 40))(&v115);
    v22 = (char ***)operator new();
    xgboost::SparsePage::SparsePage(v22);
    std::shared_ptr<xgboost::CSCPage>::reset[abi:ne180100]<xgboost::CSCPage,void>((_QWORD *)this + 9, (uint64_t)v22);
    v23 = (xgboost::SparsePage *)*((_QWORD *)this + 9);
    xgboost::SparsePage::GetTranspose((uint64_t **)v115, *((_DWORD *)this + 25), *((_DWORD *)this + 24), (char ***)__p);
    xgboost::SparsePage::PushCSC(v23, (const xgboost::SparsePage *)__p);
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)&__p[1]);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)__p);
    *(_QWORD *)(*((_QWORD *)this + 9) + 16) = *(_QWORD *)v115->__opaque;
    if (**((_BYTE **)this + 14))
    {
      v112 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v112, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v113 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"Check failed: !cache_info_->written", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    }
    std::chrono::steady_clock::now();
    std::chrono::steady_clock::now();
    std::string::basic_string[abi:ne180100]<0>(__p, "raw");
    v24 = xgboost::data::CreatePageFormat<xgboost::CSCPage>((uint64_t)__p);
    if (v122 < 0)
      operator delete(__p[0]);
    v25 = *((_QWORD *)this + 16);
    if (!v25)
    {
      xgboost::data::Cache::ShardName(*((xgboost::data::Cache **)this + 14), (uint64_t)__p);
      if (v122 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      v27 = dmlc::Stream::Create((dmlc::Stream *)v26, "w", 0);
      v28 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v27;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      if (v122 < 0)
        operator delete(__p[0]);
      v25 = *((_QWORD *)this + 16);
    }
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, *((_QWORD *)this + 9), v25);
    std::chrono::steady_clock::now();
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v119, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v119, 164, 2);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" MB written in ", 15);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" seconds.", 9);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (v120 < 0)
        operator delete(v119[0]);
    }
    v32 = (_QWORD *)*((_QWORD *)this + 14);
    v33 = (uint64_t *)v32[8];
    v34 = v32[9];
    if ((unint64_t)v33 >= v34)
    {
      v41 = (uint64_t *)v32[7];
      v42 = v33 - v41;
      if ((unint64_t)(v42 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v43 = v34 - (_QWORD)v41;
      v44 = (uint64_t)(v34 - (_QWORD)v41) >> 2;
      if (v44 <= v42 + 1)
        v44 = v42 + 1;
      if (v43 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v32 + 9), v45);
        v41 = (uint64_t *)v32[7];
        v33 = (uint64_t *)v32[8];
      }
      else
      {
        v46 = 0;
      }
      v47 = (uint64_t *)&v46[8 * v42];
      v48 = &v46[8 * v45];
      *v47 = v29;
      v35 = v47 + 1;
      while (v33 != v41)
      {
        v49 = *--v33;
        *--v47 = v49;
      }
      v32[7] = v47;
      v32[8] = v35;
      v32[9] = v48;
      if (v41)
        operator delete(v41);
    }
    else
    {
      *v33 = v29;
      v35 = v33 + 1;
    }
    v32[8] = v35;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v50 = v116;
    if (v116)
    {
      v51 = (unint64_t *)&v116->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
LABEL_136:
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
}

void sub_220EAB2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EAB300);
}

void sub_220EAB31C()
{
  __cxa_end_catch();
  JUMPOUT(0x220EAB324);
}

void xgboost::data::CSCPageSource::~CSCPageSource(xgboost::data::CSCPageSource *this)
{
  *(_QWORD *)this = off_24E6B9EF8;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)this);
}

{
  *(_QWORD *)this = off_24E6B9EF8;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl((uint64_t)this);
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

void sub_220EAB420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::CSCPage>::operator++(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  std::mutex *v30;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v30, (std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 160))
    xgboost::data::SparsePageSource::operator++(*(_QWORD *)(a1 + 144));
  v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  v7 = v2 == *(_DWORD *)(a1 + 108);
  *(_BYTE *)(a1 + 88) = v7;
  if (v7)
  {
    v3 = *(_QWORD *)(a1 + 112);
    if (!*(_BYTE *)v3)
    {
      v5 = *(uint64_t **)(v3 + 56);
      v4 = *(uint64_t **)(v3 + 64);
      v6 = v5 + 1;
      v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(_BYTE *)v3 = 1;
    }
    v28 = 1;
    if (!v2)
    {
      dmlc::LogCheckFormat<unsigned int,int>(&v29);
      if (v29)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"this->count_ >= 1", 17);
        v13 = *(char *)(v29 + 23);
        v14 = v13 >= 0 ? v29 : *(_QWORD *)v29;
        v15 = v13 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v17 = v29;
        v29 = 0;
        if (v17)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v17);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v28 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 104);
    if (v28 != *(_DWORD *)(a1 + 104))
    {
      dmlc::LogCheckFormat<unsigned int,unsigned int>(&v29);
      if (v29)
      {
        v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"source_->Iter() == this->count_", 31);
        v22 = *(char *)(v29 + 23);
        if (v22 >= 0)
          v23 = v29;
        else
          v23 = *(_QWORD *)v29;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v29 + 23);
        else
          v24 = *(_QWORD *)(v29 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v26 = v29;
        v29 = 0;
        if (v26)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v26);
      }
    }
  }
  std::mutex::unlock(v30);
  return a1;
}

void sub_220EAB670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 80);
  *a2 = *(_QWORD *)(result + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::Reset(uint64_t a1)
{
  std::mutex *v2;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_220EAB74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::CSCPage>::reset[abi:ne180100]<xgboost::CSCPage,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::CSCPage>::shared_ptr[abi:ne180100]<xgboost::CSCPage,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::future<std::shared_ptr<xgboost::CSCPage>>::get(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::unique_lock<std::mutex> __lk;

  v3 = *a2;
  *a2 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  v4 = *(_QWORD *)(v3 + 16);
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(v3 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
  }
  else
  {
    *a1 = *(_OWORD *)(v3 + 144);
    *(_QWORD *)(v3 + 144) = 0;
    *(_QWORD *)(v3 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
}

void sub_220EAB8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a10);
  if (a12)
    std::mutex::unlock(a11);
  if (v12)
  {
    v14 = v12 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v12 + 16))(v12);
  }
  _Unwind_Resume(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dmlc::SeekStream *v6;
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23[2];
  char v24;
  void *__p[2];
  char v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30[2];
  char v31;

  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  v2 = xgboost::data::CreatePageFormat<xgboost::CSCPage>((uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(*(_QWORD *)(a1 + 168) + 112), (uint64_t)v30);
  v29 = 0;
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 112);
  v5 = *(_QWORD *)(v4 + 56);
  if (v3 >= (*(_QWORD *)(v4 + 64) - v5) >> 3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v29 = *(void **)(v5 + 8 * v3);
  if (v31 >= 0)
    v6 = (dmlc::SeekStream *)v30;
  else
    v6 = (dmlc::SeekStream *)v30[0];
  v7 = dmlc::SeekStream::CreateForRead(v6, 0);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 32))(v7, v29);
  v23[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v23[0] != v29)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"fi->Tell() == offset", 20);
      v12 = *((char *)__p[0] + 23);
      v13 = v12 >= 0 ? __p[0] : *(void **)__p[0];
      v14 = v12 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
      v16 = __p[0];
      __p[0] = 0;
      if (v16)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v16);
    }
  }
  v17 = (char *)operator new(0x30uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24E6B9FF8;
  xgboost::SparsePage::SparsePage((char ***)v17 + 3);
  v27 = v17 + 24;
  v28 = v17;
  if (((*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v17 + 24, v7) & 1) == 0)
  {
    v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: fmt->Read(page.get(), fi.get())", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v23, 141, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read a page in ", 15);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" seconds.", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (v31 < 0)
    operator delete(v30[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (__p[0] = 0, v19 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr((std::exception_ptr *)__p), v19))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_QWORD *)(a1 + 144) = v17 + 24;
  *(_QWORD *)(a1 + 152) = v17;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_220EABD40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__assoc_sub_state *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::exception_ptr v28;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v26 - 96);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  if (*(char *)(v26 - 49) < 0)
    operator delete(*(void **)(v26 - 72));
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  __cxa_begin_catch(a1);
  std::current_exception();
  v28.__ptr_ = &a9;
  std::__assoc_sub_state::set_exception(v23, v28);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x220EABCC8);
}

void sub_220EABE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::CSCPage>(uint64_t a1)
{
  __int128 *v2;
  const void **v3;
  char *v4;
  uint64_t v5;
  const void **v6;
  _BOOL4 v7;
  char **v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  const void *v16;
  uint64_t v17;
  char v18;

  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::CSCPage>>::Get();
  v3 = (const void **)v2 + 7;
  v4 = (char *)*((_QWORD *)v2 + 7);
  if (!v4)
    goto LABEL_11;
  v5 = (uint64_t)(v2 + 4);
  v6 = (const void **)v2 + 7;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)v4 + 4, (const void **)a1);
    v8 = (char **)(v4 + 8);
    if (!v7)
    {
      v8 = (char **)v4;
      v6 = (const void **)v4;
    }
    v4 = *v8;
  }
  while (*v8);
  if (v6 == v3
    || std::less<std::string>::operator()[abi:ne180100](v5, (const void **)a1, v6 + 4)
    || (v9 = v6[7]) == 0)
  {
LABEL_11:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown format type ", 20);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = (const void *)a1;
    else
      v16 = *(const void **)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
    return 0;
  }
  else
  {
    v10 = v9[12];
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  }
}

void sub_220EABFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::CSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::CSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6B9FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t *std::__shared_ptr_emplace<xgboost::CSCPage>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 24);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)(a1 + 32));
  return xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD *v6;
  uint64_t *v8;

  v8 = a1;
  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[2];
  v5 = (void (*)(_QWORD *))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *))(*v6 + v5);
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_220EAC0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x227667068);
  }
  return result;
}

_QWORD *std::shared_ptr<xgboost::CSCPage>::shared_ptr[abi:ne180100]<xgboost::CSCPage,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6BA048;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_220EAC190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

void std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<xgboost::CSCPage>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xgboost::CSCPage *,std::shared_ptr<xgboost::CSCPage>::__shared_ptr_default_delete<xgboost::CSCPage,xgboost::CSCPage>,std::allocator<xgboost::CSCPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<xgboost::CSCPage>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(a2 + 1);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(a2);
    JUMPOUT(0x227667068);
  }
}

uint64_t **std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector(v2 + 1);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v2);
    JUMPOUT(0x227667068);
  }
  return result;
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::~SparsePageSourceImpl(uint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;

  *(_QWORD *)a1 = off_24E6B9F48;
  v2 = *(uint64_t ***)(a1 + 136);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
    *(_QWORD *)(a1 + 136) = 0;
LABEL_12:
    v8 = *v2;
    if (*v2)
    {
      v9 = v2[1];
      v10 = *v2;
      if (v9 != v8)
      {
        do
        {
          v12 = (unint64_t *)*--v9;
          v11 = v12;
          if (v12)
          {
            v13 = v11 + 1;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
              (*(void (**)(unint64_t *))(*v11 + 16))(v11);
          }
        }
        while (v9 != v8);
        v10 = *v2;
      }
      v2[1] = v8;
      operator delete(v10);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
    goto LABEL_23;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::CSCPage>>::get(&v17, v3);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    ++v3;
  }
  while (v3 != v4);
  v2 = *(uint64_t ***)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    goto LABEL_12;
LABEL_23:
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 72);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BA0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BA0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_emplace<xgboost::data::SortedCSCPageSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void xgboost::data::SortedCSCPageSource::Fetch(xgboost::data::SortedCSCPageSource *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char ***v22;
  _QWORD *v23;
  xgboost::SparsePage *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::string *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  std::__thread_struct *v93;
  char *v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  char *v104;
  std::string *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  int v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  std::string *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  int v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  unint64_t *v130;
  std::string *Entry;
  _QWORD *v132;
  _QWORD *v133;
  std::string *v134;
  _QWORD *v135;
  _QWORD *v136;
  pthread_t v137;
  std::__shared_weak_count *v138;
  unint64_t v139;
  int64_t v140;
  void *v141[2];
  char v142;
  void *__p[2];
  char v144;

  if (*((_BYTE *)this + 88))
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v132 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Check failed: !at_end_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (**((_BYTE **)this + 14))
  {
    v2 = *((_QWORD *)this + 16);
    if (v2)
    {
      *((_QWORD *)this + 16) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
      v3 = *((_QWORD *)this + 17);
      v4 = *((unsigned int *)this + 27);
      v6 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
      v7 = ((uint64_t)v5 - *(_QWORD *)v3) >> 3;
      if (v4 <= v7)
      {
        if (v4 < v7)
        {
          v58 = &v6[v4];
          while (v5 != v58)
          {
            v60 = (unint64_t *)*--v5;
            v59 = v60;
            if (v60)
            {
              v61 = v59 + 1;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
                (*(void (**)(unint64_t *))(*v59 + 16))(v59);
            }
          }
          *(_QWORD *)(v3 + 8) = v58;
        }
      }
      else
      {
        v8 = v4 - v7;
        v9 = *(_QWORD *)(v3 + 16);
        if (v4 - v7 <= (v9 - (uint64_t)v5) >> 3)
        {
          bzero(*(void **)(v3 + 8), 8 * v8);
          *(_QWORD *)(v3 + 8) = &v5[v8];
        }
        else
        {
          v10 = v9 - (_QWORD)v6;
          if (v10 >> 2 > v4)
            v4 = v10 >> 2;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v4;
          if (v11 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v12 = (char *)operator new(8 * v11);
          v13 = &v12[8 * v7];
          v14 = &v12[8 * v11];
          bzero(v13, 8 * v8);
          v15 = &v13[8 * v8];
          if (v5 == v6)
          {
            *(_QWORD *)v3 = v13;
            *(_QWORD *)(v3 + 8) = v15;
            *(_QWORD *)(v3 + 16) = v14;
          }
          else
          {
            do
            {
              v16 = *--v5;
              *((_QWORD *)v13 - 1) = v16;
              v13 -= 8;
              *v5 = 0;
            }
            while (v5 != v6);
            v5 = *(_QWORD **)v3;
            v17 = *(_QWORD **)(v3 + 8);
            *(_QWORD *)v3 = v13;
            *(_QWORD *)(v3 + 8) = v15;
            *(_QWORD *)(v3 + 16) = v14;
            while (v17 != v5)
            {
              v19 = (unint64_t *)*--v17;
              v18 = v19;
              if (v19)
              {
                v20 = v18 + 1;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                  (*(void (**)(unint64_t *))(*v18 + 16))(v18);
              }
            }
          }
          if (v5)
            operator delete(v5);
        }
      }
    }
    LODWORD(v75) = *((_DWORD *)this + 27);
    if (v75 >= 4)
      v75 = 4;
    else
      v75 = v75;
    v140 = v75;
    LODWORD(v141[0]) = 0;
    if (!(_DWORD)v75)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)__p);
      if (__p[0])
      {
        v106 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        dmlc::LogMessageFatal::Entry::Init(v106, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v107 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Check failed: ", 14);
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"n_prefetch_batches > 0", 22);
        v110 = *((char *)__p[0] + 23);
        v111 = v110 >= 0 ? __p[0] : *(void **)__p[0];
        v112 = v110 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v111, v112);
        v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"total batches:", 14);
        std::ostream::operator<<();
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v141);
        v115 = __p[0];
        __p[0] = 0;
        if (v115)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v115);
      }
    }
    v76 = *((unsigned int *)this + 26);
    v139 = v76;
    v77 = (char *)v140;
    if (v140)
    {
      v78 = 0;
      do
      {
        v79 = v76 % *((unsigned int *)this + 27);
        v139 = v79;
        v80 = **((_QWORD **)this + 17);
        if (v79 >= (*(_QWORD *)(*((_QWORD *)this + 17) + 8) - v80) >> 3)
          std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
        if (!*(_QWORD *)(v80 + 8 * v79))
        {
          v141[0] = (void *)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 14) + 64)
                                     - *(_QWORD *)(*((_QWORD *)this + 14) + 56)) >> 3);
          if ((void *)v79 >= v141[0])
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
            if (__p[0])
            {
              v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
              dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
              v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
              v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Check failed: ", 14);
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"fetch_it < cache_info_->offset.size()", 37);
              v85 = *((char *)__p[0] + 23);
              v86 = v85 >= 0 ? __p[0] : *(void **)__p[0];
              v87 = v85 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
              v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v86, v87);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v141);
              v89 = __p[0];
              __p[0] = 0;
              if (v89)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v89);
            }
          }
          v90 = v139;
          v91 = operator new();
          *(_QWORD *)(v91 + 8) = 0;
          v92 = (unint64_t *)(v91 + 8);
          *(_QWORD *)(v91 + 16) = 0;
          *(_QWORD *)(v91 + 24) = 850045863;
          *(_OWORD *)(v91 + 32) = 0u;
          *(_OWORD *)(v91 + 48) = 0u;
          *(_OWORD *)(v91 + 64) = 0u;
          *(_QWORD *)(v91 + 80) = 0;
          *(_QWORD *)(v91 + 88) = 1018212795;
          *(_OWORD *)(v91 + 96) = 0u;
          *(_OWORD *)(v91 + 112) = 0u;
          *(_OWORD *)(v91 + 124) = 0u;
          *(_QWORD *)v91 = &off_24E6BA258;
          *(_QWORD *)(v91 + 160) = v90;
          *(_QWORD *)(v91 + 168) = this;
          v93 = (std::__thread_struct *)operator new();
          std::__thread_struct::__thread_struct(v93);
          __p[0] = v93;
          v94 = (char *)operator new();
          __p[0] = 0;
          *(_QWORD *)v94 = v93;
          *(_OWORD *)(v94 + 8) = xmmword_220F620A0;
          *((_QWORD *)v94 + 3) = v91;
          v141[0] = v94;
          v95 = pthread_create(&v137, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>, v94);
          if (v95)
          {
            std::__throw_system_error(v95, "thread constructor failed");
            __break(1u);
            return;
          }
          v141[0] = 0;
          std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)v141);
          std::thread::detach((std::thread *)&v137);
          std::thread::~thread((std::thread *)&v137);
          std::__assoc_sub_state::__attach_future[abi:ne180100](v91);
          do
            v96 = __ldaxr(v92);
          while (__stlxr(v96 - 1, v92));
          if (!v96)
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
          v97 = **((_QWORD **)this + 17);
          if (v139 >= (*(_QWORD *)(*((_QWORD *)this + 17) + 8) - v97) >> 3)
            std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
          v98 = *(unint64_t **)(v97 + 8 * v139);
          *(_QWORD *)(v97 + 8 * v139) = v91;
          if (v98)
          {
            v99 = v98 + 1;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
              (*(void (**)(unint64_t *))(*v98 + 16))(v98);
          }
          v79 = v139;
          v77 = (char *)v140;
        }
        ++v78;
        v76 = v79 + 1;
        v139 = v76;
      }
      while (v78 < (unint64_t)v77);
    }
    v101 = *((_QWORD *)this + 17);
    v102 = *(_QWORD **)v101;
    v103 = *(_QWORD **)(v101 + 8);
    if (v102 == v103)
    {
      v104 = 0;
    }
    else
    {
      v104 = 0;
      do
      {
        if (*v102++)
          ++v104;
      }
      while (v102 != v103);
    }
    v141[0] = v104;
    if (v104 != v77)
    {
      dmlc::LogCheckFormat<long,unsigned long>((uint64_t *)__p);
      if (__p[0])
      {
        v116 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        dmlc::LogMessageFatal::Entry::Init(v116, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v117 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"Check failed: ", 14);
        v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"std::count_if (ring_->cbegin(), ring_->cend(), [](auto const& f) { return f.valid(); }) == n_prefetch_batches",
                 108);
        v120 = *((char *)__p[0] + 23);
        v121 = v120 >= 0 ? __p[0] : *(void **)__p[0];
        v122 = v120 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
        v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"Sparse DMatrix assumes forward iteration.", 41);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v141);
        v125 = __p[0];
        __p[0] = 0;
        if (v125)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v125);
      }
    }
    std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(__p, (uint64_t *)(**((_QWORD **)this + 17) + 8 * *((unsigned int *)this + 26)));
    v126 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v127 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    *(_OWORD *)((char *)this + 72) = v126;
    if (v127)
    {
      p_shared_owners = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(p_shared_owners);
      while (__stlxr(v129 - 1, p_shared_owners));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v72 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v130 = (unint64_t *)((char *)__p[1] + 8);
      do
        v74 = __ldaxr(v130);
      while (__stlxr(v74 - 1, v130));
      goto LABEL_159;
    }
  }
  else
  {
    (*(void (**)(pthread_t *__return_ptr))(**((_QWORD **)this + 18) + 40))(&v137);
    v22 = (char ***)operator new();
    xgboost::SparsePage::SparsePage(v22);
    v23 = (_QWORD *)((char *)this + 72);
    std::shared_ptr<xgboost::SortedCSCPage>::reset[abi:ne180100]<xgboost::SortedCSCPage,void>((_QWORD *)this + 9, (uint64_t)v22);
    v24 = (xgboost::SparsePage *)*((_QWORD *)this + 9);
    xgboost::SparsePage::GetTranspose((uint64_t **)v137, *((_DWORD *)this + 25), *((_DWORD *)this + 24), (char ***)__p);
    xgboost::SparsePage::PushCSC(v24, (const xgboost::SparsePage *)__p);
    xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)&__p[1]);
    xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector((uint64_t *)__p);
    v25 = ***((_QWORD ***)this + 9);
    v26 = *(_QWORD *)(**((_QWORD **)this + 9) + 8);
    if (v26 == v25)
      v27 = 0;
    else
      v27 = (void *)(((v26 - v25) >> 3) - 1);
    v141[0] = v27;
    if (v27 != (void *)*((unsigned int *)this + 25))
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)__p);
      if (__p[0])
      {
        v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: ", 14);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"this->page_->Size() == n_features_", 34);
        v32 = *((char *)__p[0] + 23);
        v33 = v32 >= 0 ? __p[0] : *(void **)__p[0];
        v34 = v32 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v141);
        v36 = __p[0];
        __p[0] = 0;
        if (v36)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v36);
      }
    }
    v141[0] = (void *)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*v23 + 8) + 8) - **(_QWORD **)(*v23 + 8)) >> 3);
    v140 = ((char *)v137->__cleanup_stack->__arg - (char *)v137->__cleanup_stack->__routine) >> 3;
    if (v141[0] != (void *)v140)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
      if (__p[0])
      {
        v37 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        dmlc::LogMessageFatal::Entry::Init(v37, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v38 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v141);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: ", 14);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"this->page_->data.Size() == csr->data.Size()", 44);
        v41 = *((char *)__p[0] + 23);
        v42 = v41 >= 0 ? __p[0] : *(void **)__p[0];
        v43 = v41 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v141);
        v45 = __p[0];
        __p[0] = 0;
        if (v45)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v45);
      }
    }
    xgboost::SparsePage::SortRows(*((uint64_t ***)this + 9), *((_DWORD *)this + 24));
    *(_QWORD *)(*((_QWORD *)this + 9) + 16) = *(_QWORD *)v137->__opaque;
    if (**((_BYTE **)this + 14))
    {
      v134 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      dmlc::LogMessageFatal::Entry::Init(v134, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v135 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
      v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"Check failed: !cache_info_->written", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
    }
    std::chrono::steady_clock::now();
    std::chrono::steady_clock::now();
    std::string::basic_string[abi:ne180100]<0>(__p, "raw");
    v46 = xgboost::data::CreatePageFormat<xgboost::SortedCSCPage>((uint64_t)__p);
    if (v144 < 0)
      operator delete(__p[0]);
    v47 = *((_QWORD *)this + 16);
    if (!v47)
    {
      xgboost::data::Cache::ShardName(*((xgboost::data::Cache **)this + 14), (uint64_t)__p);
      if (v144 >= 0)
        v48 = __p;
      else
        v48 = (void **)__p[0];
      v49 = dmlc::Stream::Create((dmlc::Stream *)v48, "w", 0);
      v50 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v49;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      if (v144 < 0)
        operator delete(__p[0]);
      v47 = *((_QWORD *)this + 16);
    }
    v51 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 24))(v46, *v23, v47);
    std::chrono::steady_clock::now();
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v141, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v141, 164, 2);
      v52 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" MB written in ", 15);
      v53 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" seconds.", 9);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
      if (v142 < 0)
        operator delete(v141[0]);
    }
    v54 = (_QWORD *)*((_QWORD *)this + 14);
    v55 = (uint64_t *)v54[8];
    v56 = v54[9];
    if ((unint64_t)v55 >= v56)
    {
      v63 = (uint64_t *)v54[7];
      v64 = v55 - v63;
      if ((unint64_t)(v64 + 1) >> 61)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v65 = v56 - (_QWORD)v63;
      v66 = (uint64_t)(v56 - (_QWORD)v63) >> 2;
      if (v66 <= v64 + 1)
        v66 = v64 + 1;
      if (v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
      {
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v54 + 9), v67);
        v63 = (uint64_t *)v54[7];
        v55 = (uint64_t *)v54[8];
      }
      else
      {
        v68 = 0;
      }
      v69 = (uint64_t *)&v68[8 * v64];
      v70 = &v68[8 * v67];
      *v69 = v51;
      v57 = v69 + 1;
      while (v55 != v63)
      {
        v71 = *--v55;
        *--v69 = v71;
      }
      v54[7] = v69;
      v54[8] = v57;
      v54[9] = v70;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *v55 = v51;
      v57 = v55 + 1;
    }
    v54[8] = v57;
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v72 = v138;
    if (v138)
    {
      v73 = (unint64_t *)&v138->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
LABEL_159:
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
}

void sub_220EAD2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EAD2B4);
}

void sub_220EAD2D0()
{
  __cxa_end_catch();
  JUMPOUT(0x220EAD2D8);
}

void xgboost::data::SortedCSCPageSource::~SortedCSCPageSource(xgboost::data::SortedCSCPageSource *this)
{
  *(_QWORD *)this = off_24E6BA1B8;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)this);
}

{
  *(_QWORD *)this = off_24E6BA1B8;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl((uint64_t)this);
  JUMPOUT(0x227667068);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::operator*(uint64_t a1)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: page_", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

void sub_220EAD3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::PageSourceIncMixIn<xgboost::SortedCSCPage>::operator++(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  std::string *Entry;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  std::mutex *v30;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v30, (std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 160))
    xgboost::data::SparsePageSource::operator++(*(_QWORD *)(a1 + 144));
  v2 = *(_DWORD *)(a1 + 104) + 1;
  *(_DWORD *)(a1 + 104) = v2;
  v7 = v2 == *(_DWORD *)(a1 + 108);
  *(_BYTE *)(a1 + 88) = v7;
  if (v7)
  {
    v3 = *(_QWORD *)(a1 + 112);
    if (!*(_BYTE *)v3)
    {
      v5 = *(uint64_t **)(v3 + 56);
      v4 = *(uint64_t **)(v3 + 64);
      v6 = v5 + 1;
      v7 = v5 == v4 || v6 == v4;
      if (!v7)
      {
        v8 = *v5;
        do
        {
          v8 += *v6;
          *v6++ = v8;
        }
        while (v6 != v4);
      }
      *(_BYTE *)v3 = 1;
    }
    v28 = 1;
    if (!v2)
    {
      dmlc::LogCheckFormat<unsigned int,int>(&v29);
      if (v29)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v10 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: ", 14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"this->count_ >= 1", 17);
        v13 = *(char *)(v29 + 23);
        v14 = v13 >= 0 ? v29 : *(_QWORD *)v29;
        v15 = v13 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v17 = v29;
        v29 = 0;
        if (v17)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v17);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v28 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 104);
    if (v28 != *(_DWORD *)(a1 + 104))
    {
      dmlc::LogCheckFormat<unsigned int,unsigned int>(&v29);
      if (v29)
      {
        v18 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        dmlc::LogMessageFatal::Entry::Init(v18, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
        v19 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v28);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: ", 14);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"source_->Iter() == this->count_", 31);
        v22 = *(char *)(v29 + 23);
        if (v22 >= 0)
          v23 = v29;
        else
          v23 = *(_QWORD *)v29;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v29 + 23);
        else
          v24 = *(_QWORD *)(v29 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v28);
        v26 = v29;
        v29 = 0;
        if (v26)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v29, v26);
      }
    }
  }
  std::mutex::unlock(v30);
  return a1;
}

void sub_220EAD624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, std::mutex *a13)
{
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::AtEnd(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::Page@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 80);
  *a2 = *(_QWORD *)(result + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::Reset(uint64_t a1)
{
  std::mutex *v2;

  xgboost::data::TryLockGuard::TryLockGuard((xgboost::data::TryLockGuard *)&v2, (std::mutex *)(a1 + 8));
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  std::mutex::unlock(v2);
}

void sub_220EAD700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void std::shared_ptr<xgboost::SortedCSCPage>::reset[abi:ne180100]<xgboost::SortedCSCPage,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<xgboost::SortedCSCPage>::shared_ptr[abi:ne180100]<xgboost::SortedCSCPage,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::unique_lock<std::mutex> __lk;

  v3 = *a2;
  *a2 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v3, &__lk);
  v4 = *(_QWORD *)(v3 + 16);
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(v3 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
  }
  else
  {
    *a1 = *(_OWORD *)(v3 + 144);
    *(_QWORD *)(v3 + 144) = 0;
    *(_QWORD *)(v3 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
}

void sub_220EAD86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::mutex *a11, char a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a10);
  if (a12)
    std::mutex::unlock(a11);
  if (v12)
  {
    v14 = v12 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v12 + 16))(v12);
  }
  _Unwind_Resume(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::~__async_assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::__execute(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dmlc::SeekStream *v6;
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23[2];
  char v24;
  void *__p[2];
  char v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30[2];
  char v31;

  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::string::basic_string[abi:ne180100]<0>(__p, "raw");
  v2 = xgboost::data::CreatePageFormat<xgboost::SortedCSCPage>((uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  xgboost::data::Cache::ShardName(*(xgboost::data::Cache **)(*(_QWORD *)(a1 + 168) + 112), (uint64_t)v30);
  v29 = 0;
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 112);
  v5 = *(_QWORD *)(v4 + 56);
  if (v3 >= (*(_QWORD *)(v4 + 64) - v5) >> 3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v29 = *(void **)(v5 + 8 * v3);
  if (v31 >= 0)
    v6 = (dmlc::SeekStream *)v30;
  else
    v6 = (dmlc::SeekStream *)v30[0];
  v7 = dmlc::SeekStream::CreateForRead(v6, 0);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 32))(v7, v29);
  v23[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v23[0] != v29)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)__p);
    if (__p[0])
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
      v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v23);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: ", 14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"fi->Tell() == offset", 20);
      v12 = *((char *)__p[0] + 23);
      v13 = v12 >= 0 ? __p[0] : *(void **)__p[0];
      v14 = v12 >= 0 ? *((unsigned __int8 *)__p[0] + 23) : *((_QWORD *)__p[0] + 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v23);
      v16 = __p[0];
      __p[0] = 0;
      if (v16)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v16);
    }
  }
  v17 = (char *)operator new(0x30uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24E6BA2B8;
  xgboost::SparsePage::SparsePage((char ***)v17 + 3);
  v27 = v17 + 24;
  v28 = v17;
  if (((*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v17 + 24, v7) & 1) == 0)
  {
    v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: fmt->Read(page.get(), fi.get())", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__p);
  }
  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_source.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)__p, (uint64_t)v23, 141, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read a page in ", 15);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" seconds.", 9);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)__p);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (v31 < 0)
    operator delete(v30[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (__p[0] = 0, v19 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr((std::exception_ptr *)__p), v19))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_QWORD *)(a1 + 144) = v17 + 24;
  *(_QWORD *)(a1 + 152) = v17;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_220EADCF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__assoc_sub_state *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::exception_ptr v28;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a18);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](v26 - 96);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  if (*(char *)(v26 - 49) < 0)
    operator delete(*(void **)(v26 - 72));
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  __cxa_begin_catch(a1);
  std::current_exception();
  v28.__ptr_ = &a9;
  std::__assoc_sub_state::set_exception(v23, v28);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x220EADC7CLL);
}

void sub_220EADE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t xgboost::data::CreatePageFormat<xgboost::SortedCSCPage>(uint64_t a1)
{
  __int128 *v2;
  const void **v3;
  char *v4;
  uint64_t v5;
  const void **v6;
  _BOOL4 v7;
  char **v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *Entry;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  const void *v16;
  uint64_t v17;
  char v18;

  dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  v2 = dmlc::Registry<xgboost::data::SparsePageFormatReg<xgboost::SortedCSCPage>>::Get();
  v3 = (const void **)v2 + 7;
  v4 = (char *)*((_QWORD *)v2 + 7);
  if (!v4)
    goto LABEL_11;
  v5 = (uint64_t)(v2 + 4);
  v6 = (const void **)v2 + 7;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)v4 + 4, (const void **)a1);
    v8 = (char **)(v4 + 8);
    if (!v7)
    {
      v8 = (char **)v4;
      v6 = (const void **)v4;
    }
    v4 = *v8;
  }
  while (*v8);
  if (v6 == v3
    || std::less<std::string>::operator()[abi:ne180100](v5, (const void **)a1, v6 + 4)
    || (v9 = v6[7]) == 0)
  {
LABEL_11:
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/./sparse_page_writer.h");
    v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v18);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown format type ", 20);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = (const void *)a1;
    else
      v16 = *(const void **)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v18);
    return 0;
  }
  else
  {
    v10 = v9[12];
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  }
}

void sub_220EADF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost::SortedCSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BA2B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost::SortedCSCPage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24E6BA2B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t *std::__shared_ptr_emplace<xgboost::SortedCSCPage>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 24);
  xgboost::HostDeviceVector<xgboost::Entry>::~HostDeviceVector((uint64_t *)(a1 + 32));
  return xgboost::HostDeviceVector<unsigned long>::~HostDeviceVector(v1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::SortedCSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD *v6;
  uint64_t *v8;

  v8 = a1;
  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[2];
  v5 = (void (*)(_QWORD *))a1[1];
  v6 = (_QWORD *)(a1[3] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *))(*v6 + v5);
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100](&v8);
  return 0;
}

void sub_220EAE06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>::*)(void),std::__async_assoc_state<std::shared_ptr<xgboost::CSCPage>,std::__async_func<xgboost::data::SparsePageSourceImpl<xgboost::CSCPage>::ReadCache(void)::{lambda(void)#1}>>*>>::reset[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<xgboost::SortedCSCPage>::shared_ptr[abi:ne180100]<xgboost::SortedCSCPage,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24E6BA308;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_220EAE0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<xgboost::CSCPage>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

void std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<xgboost::CSCPage>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xgboost::SortedCSCPage *,std::shared_ptr<xgboost::SortedCSCPage>::__shared_ptr_default_delete<xgboost::SortedCSCPage,xgboost::SortedCSCPage>,std::allocator<xgboost::SortedCSCPage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t xgboost::data::SparsePageSourceImpl<xgboost::SortedCSCPage>::~SparsePageSourceImpl(uint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v17;

  *(_QWORD *)a1 = off_24E6BA208;
  v2 = *(uint64_t ***)(a1 + 136);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
  {
    *(_QWORD *)(a1 + 136) = 0;
LABEL_12:
    v8 = *v2;
    if (*v2)
    {
      v9 = v2[1];
      v10 = *v2;
      if (v9 != v8)
      {
        do
        {
          v12 = (unint64_t *)*--v9;
          v11 = v12;
          if (v12)
          {
            v13 = v11 + 1;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
              (*(void (**)(unint64_t *))(*v11 + 16))(v11);
          }
        }
        while (v9 != v8);
        v10 = *v2;
      }
      v2[1] = v8;
      operator delete(v10);
    }
    MEMORY[0x227667068](v2, 0x20C40960023A9);
    goto LABEL_23;
  }
  do
  {
    if (*v3)
    {
      std::future<std::shared_ptr<xgboost::SortedCSCPage>>::get(&v17, v3);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    ++v3;
  }
  while (v3 != v4);
  v2 = *(uint64_t ***)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    goto LABEL_12;
LABEL_23:
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](a1 + 72);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227667068);
}

uint64_t std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost::data::GradientIndexPageSource *,std::shared_ptr<xgboost::data::GradientIndexPageSource>::__shared_ptr_default_delete<xgboost::data::GradientIndexPageSource,xgboost::data::GradientIndexPageSource>,std::allocator<xgboost::data::GradientIndexPageSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

xgboost::GHistIndexMatrix *xgboost::GHistIndexMatrix::GHistIndexMatrix(xgboost::GHistIndexMatrix *this)
{
  _OWORD *v2;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 10) = xgboost::common::Index::GetValueFromUint8;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  xgboost::common::HistogramCuts::HistogramCuts((xgboost::GHistIndexMatrix *)((char *)this + 112));
  *((_QWORD *)this + 19) = 0;
  v2 = (_OWORD *)operator new();
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)this + 20) = v2;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  return this;
}

void sub_220EAE400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  xgboost::common::HistogramCuts *v11;
  void **v12;
  xgboost::common::HistogramCuts *v13;
  void *v15;
  void *v16;

  v13 = v11;
  xgboost::common::HistogramCuts::~HistogramCuts(v13);
  v15 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 96) = v15;
    operator delete(v15);
  }
  xgboost::common::Index::~Index((xgboost::common::Index *)(v10 + 24));
  v16 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void xgboost::common::Index::~Index(xgboost::common::Index *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t xgboost::GHistIndexMatrix::GHistIndexMatrix(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _QWORD *a6, double a7)
{
  uint64_t v14;
  _QWORD v16[2];

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = xgboost::common::Index::GetValueFromUint8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  xgboost::common::HistogramCuts::HistogramCuts((xgboost::common::HistogramCuts *)(a1 + 112));
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v14 = a6[1];
  v16[0] = *a6;
  v16[1] = v14;
  xgboost::GHistIndexMatrix::Init(a1, a2, a3, a4, a5, v16, a7);
  return a1;
}

void sub_220EAE57C(_Unwind_Exception *a1)
{
  uint64_t v1;
  xgboost::common::HistogramCuts *v2;
  uint64_t *v3;
  void **v4;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v6 = *(void **)(v1 + 168);
  if (v6)
  {
    *(_QWORD *)(v1 + 176) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100]((uint64_t)v3, v7);
  xgboost::common::HistogramCuts::~HistogramCuts(v2);
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 96) = v8;
    operator delete(v8);
  }
  xgboost::common::Index::~Index((xgboost::common::Index *)(v1 + 24));
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void xgboost::GHistIndexMatrix::Init(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _QWORD *a6, double a7)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::mutex **v41;
  uint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  const xgboost::SparsePage *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *Entry;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v72[2];
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t v81;

  v13 = a6[1];
  v77[0] = *a6;
  v77[1] = v13;
  xgboost::common::SketchOnDMatrix(a2, a3, a5, a4, v77, (xgboost::common::HistogramCuts *)&v78);
  xgboost::common::HistogramCuts::Swap((char *)(a1 + 112), &v78);
  xgboost::HostDeviceVector<float>::~HostDeviceVector(&v81);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector(&v80);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v79);
  *(_QWORD *)(a1 + 144) = a3;
  v14 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) - 4);
  v78 = 0;
  std::vector<unsigned long>::resize(a1 + 88, v14, &v78);
  v78 = 0;
  std::vector<unsigned long>::resize(a1 + 168, (v14 * a5), &v78);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v78, a2);
  v75 = v78;
  v76 = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v73, 0);
  v17 = 1;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v75) & 1) != 0)
  {
    v18 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v75);
    v19 = **v18;
    v20 = (*v18)[1];
    if (v20 == v19)
      v21 = 0;
    else
      v21 = ((v20 - v19) >> 3) - 1;
    v17 += v21;
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v75);
  }
  v22 = v74;
  if (v74)
  {
    v23 = (unint64_t *)&v74->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)v76;
  if (v76)
  {
    v26 = (unint64_t *)(v76 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v79;
  if (v79)
  {
    v29 = (unint64_t *)&v79->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::vector<unsigned long>::resize(a1, v17);
  **(_QWORD **)a1 = 0;
  v31 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 16);
  v32 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_BYTE *)(a1 + 192) = v31 == *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 8) * v32;
  v33 = *(unint64_t **)((**(uint64_t (***)(uint64_t))a2)(a2) + 168);
  v35 = *v33;
  v34 = v33[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v78, a2);
  v75 = v78;
  v76 = (uint64_t)v79;
  if (v79)
  {
    v36 = (unint64_t *)&v79->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v73, 0);
  v38 = 0;
  v39 = 0;
  v40 = v34 - v35;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v75) & 1) != 0)
  {
    v41 = (std::mutex **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v75);
    v72[0] = v40;
    v72[1] = v35;
    xgboost::GHistIndexMatrix::PushBatch(a1, v41, v72, v39, v38, v14, a5);
    v42 = *(_QWORD *)(*v41)->__m_.__opaque - (*v41)->__m_.__sig;
    if (v42)
    {
      v42 = (v42 >> 3) - 1;
      v43 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v42 + v39));
    }
    else
    {
      v43 = (uint64_t *)(*(_QWORD *)a1 + 8 * v39);
    }
    v38 = *v43;
    v39 += v42;
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v75);
  }
  v44 = v74;
  if (v74)
  {
    v45 = (unint64_t *)&v74->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)v76;
  if (v76)
  {
    v48 = (unint64_t *)(v76 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v79;
  if (v79)
  {
    v51 = (unint64_t *)&v79->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (_OWORD *)operator new();
  *v53 = 0u;
  v53[1] = 0u;
  v53[2] = 0u;
  v53[3] = 0u;
  v53[4] = 0u;
  v53[5] = 0u;
  v53[6] = 0u;
  v53[7] = 0u;
  v53[8] = 0u;
  v53[9] = 0u;
  v54 = *(_QWORD *)(a1 + 160);
  v78 = 0;
  *(_QWORD *)(a1 + 160) = v53;
  if (v54)
  {
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100](a1 + 160, v54);
    v55 = v78;
    v78 = 0;
    if (v55)
      std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100]((uint64_t)&v78, v55);
  }
  if (!*a6)
  {
    if (a4)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
      v69 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v78);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: !sorted_sketch", 28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v78);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v78, a2);
    v75 = v78;
    v76 = (uint64_t)v79;
    if (v79)
    {
      v56 = (unint64_t *)&v79->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v73, 0);
    while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v75) & 1) != 0)
    {
      v58 = (const xgboost::SparsePage *)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v75);
      xgboost::common::ColumnMatrix::Init(*(xgboost::common::ColumnMatrix **)(a1 + 160), v58, (const xgboost::GHistIndexMatrix *)a1, a7, a5);
      xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v75);
    }
    v59 = v74;
    if (v74)
    {
      v60 = (unint64_t *)&v74->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)v76;
    if (v76)
    {
      v63 = (unint64_t *)(v76 + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v79;
    if (v79)
    {
      v66 = (unint64_t *)&v79->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
}

void sub_220EAEBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

void xgboost::GHistIndexMatrix::~GHistIndexMatrix(xgboost::GHistIndexMatrix *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100]((uint64_t)this + 160, v3);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 17);
  xgboost::HostDeviceVector<unsigned int>::~HostDeviceVector((uint64_t *)this + 16);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)this + 15);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

void xgboost::GHistIndexMatrix::PushBatch(uint64_t a1, std::mutex **a2, unint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  std::mutex *v11;
  uint64_t v12;
  uint64_t sig;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  std::string *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  std::string *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  float *v93;
  uint64_t v94;
  unsigned int v95;
  BOOL v96;
  std::string *Entry;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  void *ptr;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  std::string *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  int v118;
  void *v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  std::string *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  float *v143;
  uint64_t v144;
  unsigned int v145;
  std::string *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  void *v151;
  uint64_t v152;
  _QWORD *v153;
  void *v154;
  uint64_t v155;
  BOOL v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  std::string *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  int v167;
  void *v168;
  uint64_t v169;
  _QWORD *v170;
  void *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  std::string *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  float *v191;
  uint64_t v192;
  unsigned int v193;
  std::string *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  int v198;
  void *v199;
  uint64_t v200;
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  BOOL v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  std::string *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  int v215;
  void *v216;
  uint64_t v217;
  _QWORD *v218;
  void *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  std::string *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  float *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  std::string *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  int v251;
  void *v252;
  uint64_t v253;
  _QWORD *v254;
  void *v255;
  std::string *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  int v260;
  void *v261;
  uint64_t v262;
  _QWORD *v263;
  void *v264;
  std::string *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  int v269;
  void *v270;
  uint64_t v271;
  _QWORD *v272;
  void *v273;
  std::string *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  int v278;
  void *v279;
  uint64_t v280;
  _QWORD *v281;
  void *v282;
  std::bad_alloc *exception;
  std::bad_alloc *v284;
  int v285;
  std::mutex *v287;
  std::mutex *v288;
  std::mutex *v289;
  unint64_t v290;
  std::mutex *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t *v308;
  unint64_t v309;
  uint64_t *v310;
  uint64_t *v311;
  _BYTE *v312;
  unint64_t v313;
  _BYTE v314[1024];
  unint64_t v315;
  void *v316;
  uint64_t v317;
  std::exception_ptr v318;
  std::exception_ptr v319;
  std::mutex v320;
  std::exception_ptr v321;
  std::mutex v322;
  uint64_t v323;

  v323 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  sig = (*a2)->__m_.__sig;
  v12 = *(_QWORD *)(*a2)->__m_.__opaque;
  v14 = ((v12 - sig) >> 3) - 1;
  if (v12 == sig)
    v15 = 0;
  else
    v15 = ((v12 - sig) >> 3) - 1;
  if (v15 >= a7)
    v16 = a7;
  else
    v16 = v15;
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  v18 = a2[1]->__m_.__sig;
  v313 = v17;
  if (v17 > 0x80)
  {
    v19 = malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    v312 = v19;
    if (!v19)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v284 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v284, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v11 = *a2;
    v20 = (*a2)->__m_.__sig;
    v12 = *(_QWORD *)(*a2)->__m_.__opaque;
    v14 = ((v12 - v20) >> 3) - 1;
  }
  else
  {
    v19 = v314;
    v312 = v314;
    v20 = (*a2)->__m_.__sig;
  }
  v21 = 0;
  v22 = 0;
  if (v12 == v20)
    v23 = 0;
  else
    v23 = v14;
  v24 = v23 / v17;
  v319.__ptr_ = 0;
  v320.__m_.__sig = 850045863;
  memset(v320.__m_.__opaque, 0, sizeof(v320.__m_.__opaque));
  v25 = v17 - 1;
  v26 = 8 * a4 + 8;
  v27 = 8 * v24;
  v28 = (uint64_t *)(sig + 8);
  do
  {
    if (v22 == v25)
    {
      v29 = *(_QWORD *)v11->__m_.__opaque - v11->__m_.__sig;
      if (!v29)
        goto LABEL_27;
      v30 = (v29 >> 3) - 1;
    }
    else
    {
      v30 = v24 + v24 * v22;
    }
    if (v22 * v24 < v30)
    {
      v31 = 0;
      v32 = v30 + v21;
      v33 = v28;
      v34 = v26;
      do
      {
        v36 = *(v33 - 1);
        v35 = *v33;
        if (!v18 && v35 != v36)
          goto LABEL_245;
        ++v33;
        v31 += v35 - v36;
        *(_QWORD *)(*(_QWORD *)a1 + v34) = v31;
        v34 += 8;
        --v32;
      }
      while (v32);
    }
LABEL_27:
    ++v22;
    v21 -= v24;
    v26 += v27;
    v28 = (uint64_t *)((char *)v28 + v27);
  }
  while (v22 != v17);
  *v19 = a5;
  if (v16 > 1)
  {
    v37 = v19 + 1;
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * (a4 + v24));
    v39 = v17 - 1;
    do
    {
      a5 += *v38;
      *v37++ = a5;
      v38 = (_QWORD *)((char *)v38 + v27);
      --v39;
    }
    while (v39);
  }
  v40 = 0;
  v41 = 0;
  v42 = 8 * a4 + 8;
  while (2)
  {
    if (v41 != v25)
    {
      v44 = v24 + v24 * v41;
      goto LABEL_36;
    }
    v43 = *(_QWORD *)v11->__m_.__opaque - v11->__m_.__sig;
    if (v43)
    {
      v44 = (v43 >> 3) - 1;
LABEL_36:
      if (v41 * v24 < v44)
      {
        v45 = v44 + v40;
        v46 = (_QWORD *)(*(_QWORD *)a1 + v42);
        do
        {
          *v46++ += v19[v41];
          --v45;
        }
        while (v45);
      }
    }
    ++v41;
    v40 -= v24;
    v42 += v27;
    if (v41 != v17)
      continue;
    break;
  }
  v285 = a7;
  dmlc::OMPException::Rethrow(&v319);
  v47 = (*a2)->__m_.__sig;
  v48 = *(_QWORD *)(*a2)->__m_.__opaque;
  if (v48 == v47)
    v49 = 0;
  else
    v49 = ((unint64_t)(v48 - v47) >> 3) - 1;
  v50 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v49 + a4));
  xgboost::GHistIndexMatrix::ResizeIndex((std::vector<char> *)a1, v50, *(unsigned __int8 *)(a1 + 192));
  v51 = **(_QWORD **)(a1 + 120);
  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
  LODWORD(v317) = 0;
  v53 = v52 - v51;
  v318.__ptr_ = (void *)(v53 >> 2);
  if (!v53)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v321);
    if (v321.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
      v98 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: ", 14);
      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"cut.Values().size() > 0U", 24);
      v101 = *((char *)v321.__ptr_ + 23);
      v102 = v101 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
      v103 = v101 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
      v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)v102, v103);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
      ptr = v321.__ptr_;
      v321.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)ptr);
    }
  }
  if (!*(_BYTE *)(a1 + 192))
  {
    v54 = (uint64_t *)(a1 + 24);
    goto LABEL_100;
  }
  v54 = (uint64_t *)(a1 + 24);
  xgboost::common::Index::SetBinOffset((std::vector<unsigned int> *)(a1 + 24), *(_QWORD *)(a1 + 128));
  if (!*(_BYTE *)(a1 + 192))
  {
LABEL_100:
    v106 = *v54;
    if (v50)
      v107 = v106 == 0;
    else
      v107 = 0;
    if (v107)
      goto LABEL_245;
    v108 = *a3;
    v309 = a3[1];
    v299 = a2[1]->__m_.__sig;
    v291 = *a2;
    v110 = (*a2)->__m_.__sig;
    v109 = *(_QWORD *)(*a2)->__m_.__opaque;
    v111 = (v109 - v110) >> 3;
    v112 = v109 - v110;
    if (v112)
      v113 = v111 - 1;
    else
      v113 = 0;
    v315 = v113;
    v318.__ptr_ = (void *)v111;
    if (v113 >= v112 >> 3)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v114 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v114, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
        v115 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Check failed: ", 14);
        v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"batch_size < offset_vec.size()", 30);
        v118 = *((char *)v321.__ptr_ + 23);
        v119 = v118 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v120 = v118 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v119, v120);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v122 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v122)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v122);
      }
    }
    v123 = *(uint64_t **)(a1 + 120);
    v124 = *(uint64_t **)(a1 + 128);
    v295 = v315;
    LODWORD(v318.__ptr_) = v17;
    LODWORD(v317) = 1;
    if ((int)v17 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v146 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v146, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
        v147 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"Check failed: ", 14);
        v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"n_threads >= 1", 14);
        v150 = *((char *)v321.__ptr_ + 23);
        v151 = v150 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v152 = v150 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)v151, v152);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v154 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v154)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v154);
      }
    }
    v321.__ptr_ = 0;
    v322.__m_.__sig = 850045863;
    memset(v322.__m_.__opaque, 0, sizeof(v322.__m_.__opaque));
    if (!v295)
      goto LABEL_246;
    v125 = 0;
    while (1)
    {
      v126 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v125 + a4));
      v127 = *(void **)(*(_QWORD *)a1 + 8 * (v125 + 1 + a4));
      v318.__ptr_ = v127;
      v128 = *(_QWORD *)(v291->__m_.__sig + 8 * (v125 + 1));
      v129 = *(_QWORD *)(v291->__m_.__sig + 8 * v125);
      if (!v299 && v128 != v129)
        goto LABEL_245;
      v304 = v125 + 1;
      v130 = v128 - v129;
      v316 = (void *)(v128 - v129 + v126);
      if (v316 != v127)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v317);
        if (v317)
        {
          v131 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          dmlc::LogMessageFatal::Entry::Init(v131, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
          v132 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Check failed: ", 14);
          v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"ibegin + inst.size() == iend", 28);
          v135 = *(char *)(v317 + 23);
          v136 = v135 >= 0 ? v317 : *(_QWORD *)v317;
          v137 = v135 >= 0 ? *(unsigned __int8 *)(v317 + 23) : *(_QWORD *)(v317 + 8);
          v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, v136, v137);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v316);
          v139 = v317;
          v317 = 0;
          if (v139)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v317, v139);
        }
      }
      if (v128 != v129)
      {
        v140 = 0;
        v141 = v299 + 8 * v129;
        v142 = 1;
        do
        {
          v143 = (float *)(v141 + 8 * v140);
          v144 = *(_QWORD *)v143;
          if (!v108)
            goto LABEL_138;
          if (v108 <= v144)
            goto LABEL_245;
          if (*(_BYTE *)(v309 + *(_QWORD *)v143) == 1)
            v145 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v143, v143[1]);
          else
LABEL_138:
            v145 = xgboost::common::HistogramCuts::SearchBin(v144, *v124, *v123, *((float *)&v144 + 1));
          *(_DWORD *)(v106 + 4 * (v140 + v126)) = v145;
          ++*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v145);
          v140 = v142;
          v96 = v130 > v142++;
        }
        while (v96);
      }
      v125 = v304;
      if (v304 == v295)
        goto LABEL_246;
    }
  }
  v55 = *(_QWORD *)(a1 + 48);
  v56 = *(_DWORD *)(a1 + 72);
  if (v56 == 2)
  {
    v155 = *v54;
    if (v50)
      v156 = v155 == 0;
    else
      v156 = 0;
    if (v156)
      goto LABEL_245;
    v157 = *a3;
    v305 = a3[1];
    v296 = a2[1]->__m_.__sig;
    v288 = *a2;
    v159 = (*a2)->__m_.__sig;
    v158 = *(_QWORD *)(*a2)->__m_.__opaque;
    v160 = (v158 - v159) >> 3;
    v161 = v158 - v159;
    if (v161)
      v162 = v160 - 1;
    else
      v162 = 0;
    v315 = v162;
    v318.__ptr_ = (void *)v160;
    if (v162 >= v161 >> 3)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v163 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v163, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
        v164 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Check failed: ", 14);
        v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"batch_size < offset_vec.size()", 30);
        v167 = *((char *)v321.__ptr_ + 23);
        v168 = v167 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v169 = v167 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)v168, v169);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v171 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v171)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v171);
      }
    }
    v172 = *(uint64_t **)(a1 + 120);
    v310 = *(uint64_t **)(a1 + 128);
    v292 = v315;
    LODWORD(v318.__ptr_) = v17;
    LODWORD(v317) = 1;
    if ((int)v17 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v265 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v265, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
        v266 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v267 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)"Check failed: ", 14);
        v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)"n_threads >= 1", 14);
        v269 = *((char *)v321.__ptr_ + 23);
        v270 = v269 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v271 = v269 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v272 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)v270, v271);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v273 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v273)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v273);
      }
    }
    v321.__ptr_ = 0;
    v322.__m_.__sig = 850045863;
    memset(v322.__m_.__opaque, 0, sizeof(v322.__m_.__opaque));
    if (!v292)
      goto LABEL_246;
    v173 = 0;
    while (1)
    {
      v174 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v173 + a4));
      v175 = *(void **)(*(_QWORD *)a1 + 8 * (v173 + 1 + a4));
      v318.__ptr_ = v175;
      v176 = *(_QWORD *)(v288->__m_.__sig + 8 * (v173 + 1));
      v177 = *(_QWORD *)(v288->__m_.__sig + 8 * v173);
      if (!v296 && v176 != v177)
        goto LABEL_245;
      v300 = v173 + 1;
      v178 = v176 - v177;
      v316 = (void *)(v176 - v177 + v174);
      if (v316 != v175)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v317);
        if (v317)
        {
          v179 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          dmlc::LogMessageFatal::Entry::Init(v179, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
          v180 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"Check failed: ", 14);
          v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"ibegin + inst.size() == iend", 28);
          v183 = *(char *)(v317 + 23);
          v184 = v183 >= 0 ? v317 : *(_QWORD *)v317;
          v185 = v183 >= 0 ? *(unsigned __int8 *)(v317 + 23) : *(_QWORD *)(v317 + 8);
          v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, v184, v185);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v316);
          v187 = v317;
          v317 = 0;
          if (v187)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v317, v187);
        }
      }
      if (v176 != v177)
      {
        v188 = 0;
        v189 = v296 + 8 * v177;
        v190 = 1;
        do
        {
          v191 = (float *)(v189 + 8 * v188);
          v192 = *(_QWORD *)v191;
          if (!v157)
            goto LABEL_189;
          if (v157 <= v192)
            goto LABEL_245;
          if (*(_BYTE *)(v305 + *(_QWORD *)v191) == 1)
            v193 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v191, v191[1]);
          else
LABEL_189:
            v193 = xgboost::common::HistogramCuts::SearchBin(v192, *v310, *v172, *((float *)&v192 + 1));
          *(_WORD *)(v155 + 2 * (v188 + v174)) = v193 - *(_DWORD *)(v55 + 4 * v188);
          ++*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v193);
          v188 = v190;
          v96 = v178 > v190++;
        }
        while (v96);
      }
      v173 = v300;
      if (v300 == v292)
        goto LABEL_246;
    }
  }
  if (v56 != 1)
  {
    LODWORD(v318.__ptr_) = 4;
    if (v56 != 4)
    {
      dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v194 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v194, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
        v195 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"Check failed: ", 14);
        v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"curent_bin_size == common::kUint32BinsTypeSize", 46);
        v198 = *((char *)v321.__ptr_ + 23);
        v199 = v198 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v200 = v198 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)v199, v200);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v202 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v202)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v202);
      }
    }
    v203 = *v54;
    if (v50)
      v204 = v203 == 0;
    else
      v204 = 0;
    if (v204)
      goto LABEL_245;
    v205 = *a3;
    v306 = a3[1];
    v297 = a2[1]->__m_.__sig;
    v289 = *a2;
    v207 = (*a2)->__m_.__sig;
    v206 = *(_QWORD *)(*a2)->__m_.__opaque;
    v208 = (v206 - v207) >> 3;
    v209 = v206 - v207;
    if (v209)
      v210 = v208 - 1;
    else
      v210 = 0;
    v315 = v210;
    v318.__ptr_ = (void *)v208;
    if (v210 >= v209 >> 3)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v211 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v211, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
        v212 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v213 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)"Check failed: ", 14);
        v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)"batch_size < offset_vec.size()", 30);
        v215 = *((char *)v321.__ptr_ + 23);
        v216 = v215 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v217 = v215 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)v216, v217);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v219 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v219)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v219);
      }
    }
    v220 = *(uint64_t **)(a1 + 120);
    v311 = *(uint64_t **)(a1 + 128);
    v293 = v315;
    LODWORD(v318.__ptr_) = v17;
    LODWORD(v317) = 1;
    if ((int)v17 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v321);
      if (v321.__ptr_)
      {
        v274 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        dmlc::LogMessageFatal::Entry::Init(v274, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
        v275 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
        v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)"Check failed: ", 14);
        v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)"n_threads >= 1", 14);
        v278 = *((char *)v321.__ptr_ + 23);
        v279 = v278 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
        v280 = v278 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
        v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)v279, v280);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
        v282 = v321.__ptr_;
        v321.__ptr_ = 0;
        if (v282)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v282);
      }
    }
    v321.__ptr_ = 0;
    v322.__m_.__sig = 850045863;
    memset(v322.__m_.__opaque, 0, sizeof(v322.__m_.__opaque));
    if (!v293)
      goto LABEL_246;
    v221 = 0;
    while (1)
    {
      v222 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v221 + a4));
      v223 = *(void **)(*(_QWORD *)a1 + 8 * (v221 + 1 + a4));
      v318.__ptr_ = v223;
      v224 = *(_QWORD *)(v289->__m_.__sig + 8 * (v221 + 1));
      v225 = *(_QWORD *)(v289->__m_.__sig + 8 * v221);
      if (!v297 && v224 != v225)
        break;
      v226 = v224 - v225;
      v316 = (void *)(v224 - v225 + v222);
      v301 = v221 + 1;
      if (v316 != v223)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v317);
        if (v317)
        {
          v227 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          dmlc::LogMessageFatal::Entry::Init(v227, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
          v228 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, (uint64_t)"Check failed: ", 14);
          v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"ibegin + inst.size() == iend", 28);
          v231 = *(char *)(v317 + 23);
          v232 = v231 >= 0 ? v317 : *(_QWORD *)v317;
          v233 = v231 >= 0 ? *(unsigned __int8 *)(v317 + 23) : *(_QWORD *)(v317 + 8);
          v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, v232, v233);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v316);
          v235 = v317;
          v317 = 0;
          if (v235)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v317, v235);
        }
      }
      if (v224 != v225)
      {
        v236 = 0;
        v237 = v297 + 8 * v225;
        v238 = 1;
        do
        {
          v239 = (float *)(v237 + 8 * v236);
          v240 = *(_QWORD *)v239;
          if (!v205)
            goto LABEL_241;
          if (v205 <= v240)
            goto LABEL_245;
          if (*(_BYTE *)(v306 + *(_QWORD *)v239) == 1)
            v241 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v239, v239[1]);
          else
LABEL_241:
            v241 = xgboost::common::HistogramCuts::SearchBin(v240, *v311, *v220, *((float *)&v240 + 1));
          *(_DWORD *)(v203 + 4 * (v236 + v222)) = v241 - *(_DWORD *)(v55 + 4 * v236);
          ++*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v241);
          v236 = v238;
          v96 = v226 > v238++;
        }
        while (v96);
      }
      v221 = v301;
      if (v301 == v293)
        goto LABEL_246;
    }
LABEL_245:
    std::terminate();
  }
  v57 = *v54;
  if (v50)
    v58 = v57 == 0;
  else
    v58 = 0;
  if (v58)
    goto LABEL_245;
  v59 = *a3;
  v303 = a3[1];
  v294 = a2[1]->__m_.__sig;
  v287 = *a2;
  v61 = (*a2)->__m_.__sig;
  v60 = *(_QWORD *)(*a2)->__m_.__opaque;
  v62 = (v60 - v61) >> 3;
  v63 = v60 - v61;
  if (v63)
    v64 = v62 - 1;
  else
    v64 = 0;
  v315 = v64;
  v318.__ptr_ = (void *)v62;
  if (v64 >= v63 >> 3)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v321);
    if (v321.__ptr_)
    {
      v65 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      dmlc::LogMessageFatal::Entry::Init(v65, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
      v66 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: ", 14);
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"batch_size < offset_vec.size()", 30);
      v69 = *((char *)v321.__ptr_ + 23);
      v70 = v69 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
      v71 = v69 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v70, v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
      v73 = v321.__ptr_;
      v321.__ptr_ = 0;
      if (v73)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v73);
    }
  }
  v74 = *(uint64_t **)(a1 + 120);
  v308 = *(uint64_t **)(a1 + 128);
  v290 = v315;
  LODWORD(v318.__ptr_) = v17;
  LODWORD(v317) = 1;
  if ((int)v17 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v321);
    if (v321.__ptr_)
    {
      v256 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      dmlc::LogMessageFatal::Entry::Init(v256, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v257 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"Check failed: ", 14);
      v259 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"n_threads >= 1", 14);
      v260 = *((char *)v321.__ptr_ + 23);
      v261 = v260 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
      v262 = v260 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
      v263 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)v261, v262);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
      v264 = v321.__ptr_;
      v321.__ptr_ = 0;
      if (v264)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v264);
    }
  }
  v321.__ptr_ = 0;
  v322.__m_.__sig = 850045863;
  memset(v322.__m_.__opaque, 0, sizeof(v322.__m_.__opaque));
  if (v290)
  {
    v75 = 0;
    do
    {
      v76 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v75 + a4));
      v77 = *(void **)(*(_QWORD *)a1 + 8 * (v75 + 1 + a4));
      v318.__ptr_ = v77;
      v78 = *(_QWORD *)(v287->__m_.__sig + 8 * (v75 + 1));
      v79 = *(_QWORD *)(v287->__m_.__sig + 8 * v75);
      if (!v294 && v78 != v79)
        goto LABEL_245;
      v80 = v78 - v79;
      v316 = (void *)(v78 - v79 + v76);
      v298 = v75 + 1;
      if (v316 != v77)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>(&v317);
        if (v317)
        {
          v81 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          dmlc::LogMessageFatal::Entry::Init(v81, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.h");
          v82 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Check failed: ", 14);
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"ibegin + inst.size() == iend", 28);
          v85 = *(char *)(v317 + 23);
          v86 = v85 >= 0 ? v317 : *(_QWORD *)v317;
          v87 = v85 >= 0 ? *(unsigned __int8 *)(v317 + 23) : *(_QWORD *)(v317 + 8);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v316);
          v89 = v317;
          v317 = 0;
          if (v89)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v317, v89);
        }
      }
      if (v78 != v79)
      {
        v90 = 0;
        v91 = v294 + 8 * v79;
        v92 = 1;
        do
        {
          v93 = (float *)(v91 + 8 * v90);
          v94 = *(_QWORD *)v93;
          if (!v59)
            goto LABEL_86;
          if (v59 <= v94)
            goto LABEL_245;
          if (*(_BYTE *)(v303 + *(_QWORD *)v93) == 1)
            v95 = xgboost::common::HistogramCuts::SearchCatBin(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), *(_DWORD *)v93, v93[1]);
          else
LABEL_86:
            v95 = xgboost::common::HistogramCuts::SearchBin(v94, *v308, *v74, *((float *)&v94 + 1));
          *(_BYTE *)(v57 + v90 + v76) = v95 - *(_DWORD *)(v55 + 4 * v90);
          ++*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v95);
          v90 = v92;
          v96 = v80 > v92++;
        }
        while (v96);
      }
      v75 = v298;
    }
    while (v298 != v290);
  }
LABEL_246:
  dmlc::OMPException::Rethrow(&v321);
  std::mutex::~mutex(&v322);
  std::exception_ptr::~exception_ptr(&v321);
  LODWORD(v318.__ptr_) = v285;
  LODWORD(v317) = 1;
  if (v285 < 1)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v321);
    if (v321.__ptr_)
    {
      v247 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      dmlc::LogMessageFatal::Entry::Init(v247, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
      v248 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v318);
      v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248, (uint64_t)"Check failed: ", 14);
      v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"n_threads >= 1", 14);
      v251 = *((char *)v321.__ptr_ + 23);
      v252 = v251 >= 0 ? v321.__ptr_ : *(void **)v321.__ptr_;
      v253 = v251 >= 0 ? *((unsigned __int8 *)v321.__ptr_ + 23) : *((_QWORD *)v321.__ptr_ + 1);
      v254 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)v252, v253);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v318);
      v255 = v321.__ptr_;
      v321.__ptr_ = 0;
      if (v255)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v321, (uint64_t)v255);
    }
  }
  v321.__ptr_ = 0;
  v322.__m_.__sig = 850045863;
  memset(v322.__m_.__opaque, 0, sizeof(v322.__m_.__opaque));
  if (a6)
  {
    v242 = 0;
    do
    {
      if (v285 >= 1)
      {
        v243 = *(_QWORD *)(a1 + 168);
        v244 = *(_QWORD *)(a1 + 88);
        v245 = v242;
        v246 = v285;
        do
        {
          *(_QWORD *)(v244 + 8 * v242) += *(_QWORD *)(v243 + 8 * v245);
          *(_QWORD *)(v243 + 8 * v245) = 0;
          v245 += a6;
          --v246;
        }
        while (v246);
      }
      ++v242;
    }
    while (v242 != a6);
  }
  dmlc::OMPException::Rethrow(&v321);
  std::mutex::~mutex(&v322);
  std::exception_ptr::~exception_ptr(&v321);
  std::mutex::~mutex(&v320);
  std::exception_ptr::~exception_ptr(&v319);
  if (v313 >= 0x81)
    free(v312);
}

void sub_220EB0598()
{
  JUMPOUT(0x220EB0750);
}

void sub_220EB0668()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB067C()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB0690()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB06A4()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB06B8()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB06CC()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB06E0()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB0714(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  std::mutex *v4;
  void *v5;
  unint64_t v6;

  v3 = STACK[0x4D8];
  STACK[0x4D8] = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v1 - 168, v3);
  std::mutex::~mutex(v4);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 240));
  if (v6 >= 0x81)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_220EB0734()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB0748()
{
  JUMPOUT(0x220EB0750);
}

void sub_220EB0760()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB0778()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB078C()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 248));
  JUMPOUT(0x220EB0718);
}

void sub_220EB079C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220EB07D4);
}

void xgboost::GHistIndexMatrix::ResizeIndex(std::vector<char> *this, unint64_t a2, int a3)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer v6;
  char *v7;
  BOOL v8;
  std::vector<char>::size_type v9;
  std::vector<char> *v10;
  std::vector<char>::size_type v11;
  unint64_t v12;
  std::vector<char>::pointer v13;
  char *v14;
  char *v15;

  begin = this[6].__begin_;
  if ((unint64_t)(begin - 1) <= 0xFF && a3 != 0)
  {
    v6 = this[1].__begin_;
    LODWORD(this[3].__begin_) = 1;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint8;
    v7 = (char *)(this[1].__end_ - v6);
    v8 = a2 >= (unint64_t)v7;
    v9 = a2 - (_QWORD)v7;
    if (v9 == 0 || !v8)
    {
      if (v8)
        return;
      v15 = &v6[a2];
      goto LABEL_22;
    }
    v10 = this + 1;
    v11 = v9;
LABEL_15:
    std::vector<char>::__append(v10, v11);
    return;
  }
  if ((unint64_t)(begin - 257) >> 8 > 0xFE || a3 == 0)
  {
    LODWORD(this[3].__begin_) = 4;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint32;
    v12 = 4 * a2;
  }
  else
  {
    LODWORD(this[3].__begin_) = 2;
    this[3].__end_ = (std::vector<char>::pointer)xgboost::common::Index::GetValueFromUint16;
    v12 = 2 * a2;
  }
  v13 = this[1].__begin_;
  v14 = (char *)(this[1].__end_ - v13);
  v11 = v12 - (_QWORD)v14;
  if (v12 > (unint64_t)v14)
  {
    v10 = this + 1;
    goto LABEL_15;
  }
  if (v12 >= (unint64_t)v14)
    return;
  v15 = &v13[v12];
LABEL_22:
  this[1].__end_ = v15;
}

std::vector<unsigned int>::pointer xgboost::common::Index::SetBinOffset(std::vector<unsigned int> *a1, uint64_t a2)
{
  std::vector<unsigned int>::pointer result;
  std::vector<unsigned int>::pointer end;

  std::vector<unsigned int>::resize(a1 + 1, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) - 1);
  result = a1[1].__begin_;
  end = a1[1].__end_;
  if (end != result)
    return (std::vector<unsigned int>::pointer)memmove(result, *(const void **)a2, (char *)end - (char *)result);
  return result;
}

void xgboost::common::ColumnMatrix::Init(xgboost::common::ColumnMatrix *this, const xgboost::SparsePage *a2, const xgboost::GHistIndexMatrix *a3, double a4, int a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  double v20;
  BOOL *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int *v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  std::string *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::string *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  unint64_t v111;
  _WORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  std::string *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::string *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  int *v143;
  int v144;
  unint64_t v145;
  std::string *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  void *v151;
  uint64_t v152;
  _QWORD *v153;
  void *v154;
  _DWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  std::string *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  std::string *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  int *v186;
  int v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  std::string *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  std::string *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned int *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  std::string *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  void *v233;
  uint64_t v234;
  _QWORD *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  std::string *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  std::string *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  unsigned int *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  unint64_t v281;
  _WORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  unint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t v291;
  std::string *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  int v296;
  void *v297;
  uint64_t v298;
  _QWORD *v299;
  void *v300;
  std::string *Entry;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  int v305;
  void *v306;
  uint64_t v307;
  _QWORD *v308;
  void *v309;
  std::string *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  int v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  void *v318;
  unint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  BOOL **v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v336;
  _BYTE *v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  void *__p;
  std::mutex v344;
  uint64_t v345;

  v345 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*((_QWORD *)a3 + 16) + 8) - **((_QWORD **)a3 + 16);
  v321 = v7 >> 2;
  v8 = (v7 >> 2) - 1;
  v9 = *((_QWORD *)a3 + 1) - *(_QWORD *)a3;
  v10 = (uint64_t *)((char *)this + 24);
  std::vector<unsigned long>::resize((uint64_t)this + 24, v8);
  v11 = *((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 7) - v11;
  v328 = (BOOL **)((char *)this + 48);
  if (v8 <= v12)
  {
    if (v8 < v12)
      *((_QWORD *)this + 7) = v11 + v8;
  }
  else
  {
    std::vector<xgboost::common::ColumnType>::__append((uint64_t)this + 48, v8 - v12);
  }
  v13 = v9 >> 3;
  v14 = *((_QWORD *)this + 3);
  v15 = *((_QWORD *)this + 4) - v14;
  if (v15 >= 1)
    bzero(*((void **)this + 3), 8 * (((unint64_t)v15 >> 3) - ((unint64_t)v15 > 7)) + 8);
  v16 = v13 - 1;
  if ((_DWORD)v8)
  {
    v17 = 0;
    do
    {
      LODWORD(v336) = *(_DWORD *)(**((_QWORD **)a3 + 16) + v17 + 4) - *(_DWORD *)(**((_QWORD **)a3 + 16) + v17);
      v17 += 4;
    }
    while (4 * v8 != v17);
    LOBYTE(v18) = *((_BYTE *)a3 + 192) != 0;
    xgboost::GHistIndexMatrix::GetFeatureCounts(*((_QWORD *)a3 + 11), **((unint64_t ***)a3 + 16), *(_QWORD *)(*((_QWORD *)a3 + 16) + 8), *v10);
    v19 = (unint64_t *)*v10;
    v20 = (double)v16 * a4;
    v21 = *v328;
    v22 = (v7 >> 2) - 1;
    do
    {
      v23 = *v19++;
      v18 = (v20 <= (double)v23) & v18;
      *v21++ = v20 > (double)v23;
      --v22;
    }
    while (v22);
  }
  else
  {
    v18 = *((_BYTE *)a3 + 192) != 0;
    xgboost::GHistIndexMatrix::GetFeatureCounts(*((_QWORD *)a3 + 11), **((unint64_t ***)a3 + 16), *(_QWORD *)(*((_QWORD *)a3 + 16) + 8), v14);
  }
  v24 = (uint64_t **)((char *)this + 96);
  v25 = (v7 >> 2);
  std::vector<unsigned long>::resize((uint64_t)this + 96, v25);
  v26 = (_QWORD *)*((_QWORD *)this + 12);
  *v26 = 0;
  if (v321 >= 2)
  {
    v27 = 0;
    v28 = 0;
    v29 = *v328;
    do
    {
      v30 = v16;
      if (v29[v27])
        v30 = *(_QWORD *)(*v10 + 8 * v27);
      v28 += v30;
      v26[++v27] = v28;
    }
    while (v25 - 1 != v27);
  }
  v31 = *((_QWORD *)a3 + 18) - 1;
  if (v31 <= 0xFF)
  {
    v32 = 1;
  }
  else if (v31 >> 16)
  {
    v32 = 4;
  }
  else
  {
    v32 = 2;
  }
  *((_DWORD *)this + 38) = v32;
  v33 = v26[v8] * v32;
  LOBYTE(__p) = 0;
  v34 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v33 <= v34)
  {
    if (v33 < v34)
      *((_QWORD *)this + 1) = *(_QWORD *)this + v33;
  }
  else
  {
    std::vector<unsigned char>::__append(this, v33 - v34, &__p);
    v26 = (_QWORD *)*((_QWORD *)this + 12);
  }
  if ((v18 & 1) == 0)
  {
    std::vector<unsigned long>::resize((uint64_t)this + 72, v26[v8]);
    v26 = (_QWORD *)*((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 15) = **((_QWORD **)a3 + 16);
  v35 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v16);
  v36 = v16 * v8;
  v37 = v16 * v8 != v35;
  *((_BYTE *)this + 156) = v37;
  v38 = (_QWORD *)((char *)this + 128);
  *((_QWORD *)this + 17) = 0;
  std::vector<BOOL>::resize((uint64_t)this + 128, v26[v8], v37);
  if (v18)
  {
    v39 = *((_DWORD *)a3 + 18);
    LODWORD(v339) = v39;
    if (v39 == 2)
    {
      v112 = (_WORD *)*((_QWORD *)a3 + 3);
      v113 = *(_QWORD *)this;
      if (v36 == v35)
      {
        LODWORD(v336) = a5;
        LODWORD(v342) = 1;
        if (a5 < 1)
        {
          dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
          if (__p)
          {
            Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
            v302 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            v303 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v302, (uint64_t)"Check failed: ", 14);
            v304 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v303, (uint64_t)"n_threads >= 1", 14);
            v305 = *((char *)__p + 23);
            v306 = v305 >= 0 ? __p : *(void **)__p;
            v307 = v305 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
            v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)v306, v307);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v336);
            v309 = __p;
            __p = 0;
            if (v309)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v309);
          }
        }
        __p = 0;
        v344.__m_.__sig = 850045863;
        memset(v344.__m_.__opaque, 0, sizeof(v344.__m_.__opaque));
        if (v16)
        {
          v278 = 0;
          do
          {
            v279 = v278 + 1;
            if (v278 * v8 < (v278 + 1) * v8)
            {
              v280 = *v24;
              v281 = v8;
              v282 = v112;
              do
              {
                v284 = *v280++;
                v283 = v284;
                LOWORD(v284) = *v282++;
                *(_WORD *)(v113 + 2 * (v283 + v278)) = v284;
                --v281;
              }
              while (v281);
            }
            v112 += v8;
            ++v278;
          }
          while (v279 != v16);
        }
        goto LABEL_300;
      }
      v336 = 0;
      std::vector<unsigned long>::vector(&__p, v8, &v336);
      v114 = *(_QWORD **)a2;
      v324 = *(_QWORD **)a2;
      v331 = **((_QWORD **)a2 + 1);
      v115 = *((_QWORD *)a3 + 1);
      if (v115 == *(_QWORD *)a3)
        v116 = 0;
      else
        v116 = (void *)(((v115 - *(_QWORD *)a3) >> 3) - 1);
      v336 = v116;
      v341 = (uint64_t)(v114[1] - *v114) >> 3;
      if ((unint64_t)v116 >= v341)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v342);
        if (v342)
        {
          v117 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
          dmlc::LogMessageFatal::Entry::Init(v117, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
          v118 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"Check failed: ", 14);
          v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"batch_size < offset_vec.size()", 30);
          v121 = *(char *)(v342 + 23);
          v122 = v121 >= 0 ? v342 : *(_QWORD *)v342;
          v123 = v121 >= 0 ? *(unsigned __int8 *)(v342 + 23) : *(_QWORD *)(v342 + 8);
          v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, v122, v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v341);
          v125 = v342;
          v342 = 0;
          if (v125)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v342, v125);
        }
      }
      if (!v336)
        goto LABEL_184;
      v126 = 0;
      while (1)
      {
        v127 = *(_QWORD *)a3;
        v128 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v126);
        v342 = 0;
        v129 = v126 + 1;
        v130 = *(_QWORD *)(v127 + 8 * (v126 + 1));
        v342 = v130;
        v131 = *(_QWORD *)(*v324 + 8 * (v126 + 1));
        v132 = *(_QWORD *)(*v324 + 8 * v126);
        if (!v331 && v131 != v132)
          goto LABEL_276;
        v133 = v131 - v132;
        v340 = v131 - v132 + v128;
        if (v340 != v130)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
          if (v341)
          {
            v134 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            dmlc::LogMessageFatal::Entry::Init(v134, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
            v135 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"Check failed: ", 14);
            v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"ibegin + inst.size() == iend", 28);
            v138 = *(char *)(v341 + 23);
            v139 = v138 >= 0 ? v341 : *(_QWORD *)v341;
            v140 = v138 >= 0 ? *(unsigned __int8 *)(v341 + 23) : *(_QWORD *)(v341 + 8);
            v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, v139, v140);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
            v142 = v341;
            v341 = 0;
            if (v142)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v142);
          }
        }
        if (v128 < v342)
          break;
LABEL_139:
        ++v126;
        if (v129 >= (unint64_t)v336)
          goto LABEL_184;
      }
      v143 = (int *)(v331 + 8 * v132);
      while (v133)
      {
        v144 = *v143;
        v143 += 2;
        v145 = (*v24)[v144] + v126;
        *(_WORD *)(v113 + 2 * v145) = v112[v128];
        *(_QWORD *)(*v38 + ((v145 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v145);
        ++v128;
        --v133;
        if (v128 >= v342)
          goto LABEL_139;
      }
    }
    else
    {
      if (v39 == 1)
      {
        v40 = *((_QWORD *)a3 + 3);
        v41 = *(_QWORD *)this;
        if (v36 != v35)
        {
          v336 = 0;
          std::vector<unsigned long>::vector(&__p, v8, &v336);
          v42 = *(_QWORD **)a2;
          v322 = *(_QWORD **)a2;
          v329 = **((_QWORD **)a2 + 1);
          v43 = *((_QWORD *)a3 + 1);
          if (v43 == *(_QWORD *)a3)
            v44 = 0;
          else
            v44 = (void *)(((v43 - *(_QWORD *)a3) >> 3) - 1);
          v336 = v44;
          v341 = (uint64_t)(v42[1] - *v42) >> 3;
          if ((unint64_t)v44 >= v341)
          {
            dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v342);
            if (v342)
            {
              v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
              dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
              v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
              v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
              v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"batch_size < offset_vec.size()", 30);
              v49 = *(char *)(v342 + 23);
              v50 = v49 >= 0 ? v342 : *(_QWORD *)v342;
              v51 = v49 >= 0 ? *(unsigned __int8 *)(v342 + 23) : *(_QWORD *)(v342 + 8);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v341);
              v53 = v342;
              v342 = 0;
              if (v53)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v342, v53);
            }
          }
          if (v336)
          {
            v54 = 0;
            while (1)
            {
              v55 = *(_QWORD *)a3;
              v56 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v54);
              v342 = 0;
              v57 = v54 + 1;
              v58 = *(_QWORD *)(v55 + 8 * (v54 + 1));
              v342 = v58;
              v59 = *(_QWORD *)(*v322 + 8 * (v54 + 1));
              v60 = *(_QWORD *)(*v322 + 8 * v54);
              if (!v329 && v59 != v60)
                goto LABEL_276;
              v61 = v59 - v60;
              v340 = v59 - v60 + v56;
              if (v340 != v58)
              {
                dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
                if (v341)
                {
                  v62 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
                  dmlc::LogMessageFatal::Entry::Init(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
                  v63 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
                  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: ", 14);
                  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"ibegin + inst.size() == iend", 28);
                  v66 = *(char *)(v341 + 23);
                  if (v66 >= 0)
                    v67 = v341;
                  else
                    v67 = *(_QWORD *)v341;
                  if (v66 >= 0)
                    v68 = *(unsigned __int8 *)(v341 + 23);
                  else
                    v68 = *(_QWORD *)(v341 + 8);
                  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v67, v68);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": ", 2);
                  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
                  v70 = v341;
                  v341 = 0;
                  if (v70)
                    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v70);
                }
              }
              if (v56 < v342)
                break;
LABEL_65:
              ++v54;
              if (v57 >= (unint64_t)v336)
                goto LABEL_184;
            }
            v71 = (int *)(v329 + 8 * v60);
            while (v61)
            {
              v72 = *v71;
              v71 += 2;
              v73 = (*v24)[v72] + v54;
              *(_BYTE *)(v41 + v73) = *(_BYTE *)(v40 + v56);
              *(_QWORD *)(*v38 + ((v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v73);
              ++v56;
              --v61;
              if (v56 >= v342)
                goto LABEL_65;
            }
            goto LABEL_276;
          }
LABEL_184:
          v189 = __p;
          if (__p)
          {
            v344.__m_.__sig = (uint64_t)__p;
LABEL_275:
            operator delete(v189);
            return;
          }
          return;
        }
        LODWORD(v336) = a5;
        LODWORD(v342) = 1;
        if (a5 < 1)
        {
          dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
          if (__p)
          {
            v292 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            dmlc::LogMessageFatal::Entry::Init(v292, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
            v293 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            v294 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)"Check failed: ", 14);
            v295 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"n_threads >= 1", 14);
            v296 = *((char *)__p + 23);
            v297 = v296 >= 0 ? __p : *(void **)__p;
            v298 = v296 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
            v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)v297, v298);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v336);
            v300 = __p;
            __p = 0;
            if (v300)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v300);
          }
        }
        __p = 0;
        v344.__m_.__sig = 850045863;
        memset(v344.__m_.__opaque, 0, sizeof(v344.__m_.__opaque));
        if (v16)
        {
          v275 = 0;
          do
          {
            v276 = v275 + 1;
            if (v275 * v8 < (v275 + 1) * v8)
            {
              v277 = 0;
              do
              {
                *(_BYTE *)(v41 + (*v24)[v277] + v275) = *(_BYTE *)(v40 + v277);
                ++v277;
              }
              while (v8 != v277);
            }
            v40 += v8;
            ++v275;
          }
          while (v276 != v16);
        }
LABEL_300:
        dmlc::OMPException::Rethrow((std::exception_ptr *)&__p);
        std::mutex::~mutex(&v344);
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p);
        return;
      }
      LODWORD(v336) = 4;
      if (v39 != 4)
      {
        dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>((uint64_t *)&__p);
        if (__p)
        {
          v146 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
          dmlc::LogMessageFatal::Entry::Init(v146, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
          v147 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
          v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"Check failed: ", 14);
          v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"gmat_bin_size == kUint32BinsTypeSize", 36);
          v150 = *((char *)__p + 23);
          v151 = v150 >= 0 ? __p : *(void **)__p;
          v152 = v150 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
          v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)v151, v152);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v336);
          v154 = __p;
          __p = 0;
          if (v154)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v154);
        }
      }
      v155 = (_DWORD *)*((_QWORD *)a3 + 3);
      v156 = *(_QWORD *)this;
      if (v36 == v35)
      {
        LODWORD(v336) = a5;
        LODWORD(v342) = 1;
        if (a5 < 1)
        {
          dmlc::LogCheckFormat<int,int>((uint64_t *)&__p);
          if (__p)
          {
            v310 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            dmlc::LogMessageFatal::Entry::Init(v310, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/threading_utils.h");
            v311 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
            v312 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, (uint64_t)"Check failed: ", 14);
            v313 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)"n_threads >= 1", 14);
            v314 = *((char *)__p + 23);
            v315 = v314 >= 0 ? __p : *(void **)__p;
            v316 = v314 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
            v317 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v313, (uint64_t)v315, v316);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v336);
            v318 = __p;
            __p = 0;
            if (v318)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v318);
          }
        }
        __p = 0;
        v344.__m_.__sig = 850045863;
        memset(v344.__m_.__opaque, 0, sizeof(v344.__m_.__opaque));
        if (v16)
        {
          v285 = 0;
          do
          {
            v286 = v285 + 1;
            if (v285 * v8 < (v285 + 1) * v8)
            {
              v287 = *v24;
              v288 = v8;
              v289 = v155;
              do
              {
                v291 = *v287++;
                v290 = v291;
                LODWORD(v291) = *v289++;
                *(_DWORD *)(v156 + 4 * (v290 + v285)) = v291;
                --v288;
              }
              while (v288);
            }
            v155 += v8;
            ++v285;
          }
          while (v286 != v16);
        }
        goto LABEL_300;
      }
      v336 = 0;
      std::vector<unsigned long>::vector(&__p, v8, &v336);
      v157 = *(_QWORD **)a2;
      v325 = *(_QWORD **)a2;
      v332 = **((_QWORD **)a2 + 1);
      v158 = *((_QWORD *)a3 + 1);
      if (v158 == *(_QWORD *)a3)
        v159 = 0;
      else
        v159 = (void *)(((v158 - *(_QWORD *)a3) >> 3) - 1);
      v336 = v159;
      v341 = (uint64_t)(v157[1] - *v157) >> 3;
      if ((unint64_t)v159 >= v341)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v342);
        if (v342)
        {
          v160 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
          dmlc::LogMessageFatal::Entry::Init(v160, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
          v161 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v341);
          v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Check failed: ", 14);
          v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"batch_size < offset_vec.size()", 30);
          v164 = *(char *)(v342 + 23);
          v165 = v164 >= 0 ? v342 : *(_QWORD *)v342;
          v166 = v164 >= 0 ? *(unsigned __int8 *)(v342 + 23) : *(_QWORD *)(v342 + 8);
          v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, v165, v166);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v341);
          v168 = v342;
          v342 = 0;
          if (v168)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v342, v168);
        }
      }
      if (!v336)
        goto LABEL_184;
      v169 = 0;
      while (1)
      {
        v170 = *(_QWORD *)a3;
        v171 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v169);
        v342 = 0;
        v172 = v169 + 1;
        v173 = *(_QWORD *)(v170 + 8 * (v169 + 1));
        v342 = v173;
        v174 = *(_QWORD *)(*v325 + 8 * (v169 + 1));
        v175 = *(_QWORD *)(*v325 + 8 * v169);
        if (!v332 && v174 != v175)
          goto LABEL_276;
        v176 = v174 - v175;
        v340 = v174 - v175 + v171;
        if (v340 != v173)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
          if (v341)
          {
            v177 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            dmlc::LogMessageFatal::Entry::Init(v177, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
            v178 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"Check failed: ", 14);
            v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"ibegin + inst.size() == iend", 28);
            v181 = *(char *)(v341 + 23);
            v182 = v181 >= 0 ? v341 : *(_QWORD *)v341;
            v183 = v181 >= 0 ? *(unsigned __int8 *)(v341 + 23) : *(_QWORD *)(v341 + 8);
            v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, v182, v183);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
            v185 = v341;
            v341 = 0;
            if (v185)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v185);
          }
        }
        if (v171 < v342)
          break;
LABEL_183:
        ++v169;
        if (v172 >= (unint64_t)v336)
          goto LABEL_184;
      }
      v186 = (int *)(v332 + 8 * v175);
      while (v176)
      {
        v187 = *v186;
        v186 += 2;
        v188 = (*v24)[v187] + v169;
        *(_DWORD *)(v156 + 4 * v188) = v155[v171];
        *(_QWORD *)(*v38 + ((v188 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v188);
        ++v171;
        --v176;
        if (v171 >= v342)
          goto LABEL_183;
      }
    }
LABEL_276:
    std::terminate();
  }
  v74 = *((_DWORD *)this + 38);
  if (v74 == 2)
  {
    v190 = *((_QWORD *)a3 + 3);
    v191 = *(_QWORD *)this;
    v336 = 0;
    v337 = 0;
    v338 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v336, v8);
    if (v337 - (_BYTE *)v336 >= 1)
      bzero(v336, 8 * (((unint64_t)(v337 - (_BYTE *)v336) >> 3) - ((unint64_t)(v337 - (_BYTE *)v336) > 7)) + 8);
    v342 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v342);
    v192 = *(_QWORD **)a2;
    v326 = *(_QWORD **)a2;
    v333 = **((_QWORD **)a2 + 1);
    v193 = *((_QWORD *)a3 + 1);
    if (v193 == *(_QWORD *)a3)
      v194 = 0;
    else
      v194 = ((v193 - *(_QWORD *)a3) >> 3) - 1;
    v342 = v194;
    v340 = (uint64_t)(v192[1] - *v192) >> 3;
    if (v194 >= v340)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
      if (v341)
      {
        v195 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        dmlc::LogMessageFatal::Entry::Init(v195, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
        v196 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"Check failed: ", 14);
        v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"batch_size < offset_vec.size()", 30);
        v199 = *(char *)(v341 + 23);
        v200 = v199 >= 0 ? v341 : *(_QWORD *)v341;
        v201 = v199 >= 0 ? *(unsigned __int8 *)(v341 + 23) : *(_QWORD *)(v341 + 8);
        v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, v200, v201);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
        v203 = v341;
        v341 = 0;
        if (v203)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v203);
      }
    }
    if (v342)
    {
      v204 = 0;
      while (1)
      {
        v205 = *(_QWORD *)a3;
        v206 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v204);
        v341 = 0;
        v207 = v204 + 1;
        v208 = *(_QWORD *)(v205 + 8 * (v204 + 1));
        v341 = v208;
        v209 = *(_QWORD *)(*v326 + 8 * (v204 + 1));
        v210 = *(_QWORD *)(*v326 + 8 * v204);
        if (!v333 && v209 != v210)
          goto LABEL_276;
        v211 = v209 - v210;
        v339 = v209 - v210 + v206;
        if (v339 != v208)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v340);
          if (v340)
          {
            v212 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            dmlc::LogMessageFatal::Entry::Init(v212, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
            v213 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)"Check failed: ", 14);
            v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"ibegin + inst.size() == iend", 28);
            v216 = *(char *)(v340 + 23);
            v217 = v216 >= 0 ? v340 : *(_QWORD *)v340;
            v218 = v216 >= 0 ? *(unsigned __int8 *)(v340 + 23) : *(_QWORD *)(v340 + 8);
            v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, v217, v218);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v339);
            v220 = v340;
            v340 = 0;
            if (v220)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v340, v220);
          }
        }
        if (v206 < v341)
          break;
LABEL_222:
        ++v204;
        if (v207 >= v342)
          goto LABEL_271;
      }
      v221 = (unsigned int *)(v333 + 8 * v210);
      v222 = v336;
      while (v211)
      {
        v223 = *v221;
        v224 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v223);
        v225 = v191 + 2 * v224;
        v226 = *(_DWORD *)(v190 + 4 * v206) - *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v223);
        if (*(_BYTE *)(*((_QWORD *)this + 6) + v223))
        {
          v227 = v222[v223];
          *(_WORD *)(v225 + 2 * v227) = v226;
          *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v227 + v224)) = v204;
          ++v222[v223];
        }
        else
        {
          *(_WORD *)(v225 + 2 * v204) = v226;
          *(_QWORD *)(*v38 + (((unint64_t)(v224 + v204) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v224 + v204));
        }
        ++v206;
        v221 += 2;
        --v211;
        if (v206 >= v341)
          goto LABEL_222;
      }
      goto LABEL_276;
    }
  }
  else if (v74 == 1)
  {
    v75 = *((_QWORD *)a3 + 3);
    v76 = *(_QWORD *)this;
    v336 = 0;
    v337 = 0;
    v338 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v336, v8);
    if (v337 - (_BYTE *)v336 >= 1)
      bzero(v336, 8 * (((unint64_t)(v337 - (_BYTE *)v336) >> 3) - ((unint64_t)(v337 - (_BYTE *)v336) > 7)) + 8);
    v342 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v342);
    v77 = *(_QWORD **)a2;
    v323 = *(_QWORD **)a2;
    v330 = **((_QWORD **)a2 + 1);
    v78 = *((_QWORD *)a3 + 1);
    if (v78 == *(_QWORD *)a3)
      v79 = 0;
    else
      v79 = ((v78 - *(_QWORD *)a3) >> 3) - 1;
    v342 = v79;
    v340 = (uint64_t)(v77[1] - *v77) >> 3;
    if (v79 >= v340)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
      if (v341)
      {
        v80 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        dmlc::LogMessageFatal::Entry::Init(v80, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
        v81 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Check failed: ", 14);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"batch_size < offset_vec.size()", 30);
        v84 = *(char *)(v341 + 23);
        v85 = v84 >= 0 ? v341 : *(_QWORD *)v341;
        v86 = v84 >= 0 ? *(unsigned __int8 *)(v341 + 23) : *(_QWORD *)(v341 + 8);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
        v88 = v341;
        v341 = 0;
        if (v88)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v88);
      }
    }
    if (v342)
    {
      v89 = 0;
      while (1)
      {
        v90 = *(_QWORD *)a3;
        v91 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v89);
        v341 = 0;
        v92 = v89 + 1;
        v93 = *(_QWORD *)(v90 + 8 * (v89 + 1));
        v341 = v93;
        v94 = *(_QWORD *)(*v323 + 8 * (v89 + 1));
        v95 = *(_QWORD *)(*v323 + 8 * v89);
        if (!v330 && v94 != v95)
          goto LABEL_276;
        v96 = v94 - v95;
        v339 = v94 - v95 + v91;
        if (v339 != v93)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v340);
          if (v340)
          {
            v97 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            dmlc::LogMessageFatal::Entry::Init(v97, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
            v98 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: ", 14);
            v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"ibegin + inst.size() == iend", 28);
            v101 = *(char *)(v340 + 23);
            v102 = v101 >= 0 ? v340 : *(_QWORD *)v340;
            v103 = v101 >= 0 ? *(unsigned __int8 *)(v340 + 23) : *(_QWORD *)(v340 + 8);
            v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, v102, v103);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v339);
            v105 = v340;
            v340 = 0;
            if (v105)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v340, v105);
          }
        }
        if (v91 < v341)
          break;
LABEL_105:
        ++v89;
        if (v92 >= v342)
          goto LABEL_271;
      }
      v106 = (unsigned int *)(v330 + 8 * v95);
      while (v96)
      {
        v107 = *v106;
        v108 = v76 + *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v107);
        v109 = *(_DWORD *)(v75 + 4 * v91) - *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v107);
        if (*(_BYTE *)(*((_QWORD *)this + 6) + v107))
        {
          *(_BYTE *)(v108 + *((_QWORD *)v336 + v107)) = v109;
          v110 = v336;
          *(_QWORD *)(*((_QWORD *)this + 9)
                    + 8 * (*((_QWORD *)v336 + v107) + *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v107))) = v89;
          ++v110[v107];
        }
        else
        {
          *(_BYTE *)(v108 + v89) = v109;
          v111 = (*v24)[v107] + v89;
          *(_QWORD *)(*v38 + ((v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v111);
        }
        ++v91;
        v106 += 2;
        --v96;
        if (v91 >= v341)
          goto LABEL_105;
      }
      goto LABEL_276;
    }
  }
  else
  {
    LODWORD(v336) = 4;
    if (v74 != 4)
    {
      dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>((uint64_t *)&__p);
      if (__p)
      {
        v228 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
        dmlc::LogMessageFatal::Entry::Init(v228, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
        v229 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v336);
        v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"Check failed: ", 14);
        v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, (uint64_t)"bins_type_size_ == kUint32BinsTypeSize", 38);
        v232 = *((char *)__p + 23);
        v233 = v232 >= 0 ? __p : *(void **)__p;
        v234 = v232 >= 0 ? *((unsigned __int8 *)__p + 23) : *((_QWORD *)__p + 1);
        v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)v233, v234);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v336);
        v236 = __p;
        __p = 0;
        if (v236)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v236);
      }
    }
    v237 = *((_QWORD *)a3 + 3);
    v238 = *(_QWORD *)this;
    v336 = 0;
    v337 = 0;
    v338 = 0;
    std::vector<unsigned long>::resize((uint64_t)&v336, v8);
    if (v337 - (_BYTE *)v336 >= 1)
      bzero(v336, 8 * (((unint64_t)(v337 - (_BYTE *)v336) >> 3) - ((unint64_t)(v337 - (_BYTE *)v336) > 7)) + 8);
    v342 = 0;
    std::vector<unsigned long>::vector(&__p, v8, &v342);
    v239 = *(_QWORD **)a2;
    v327 = *(_QWORD **)a2;
    v334 = **((_QWORD **)a2 + 1);
    v240 = *((_QWORD *)a3 + 1);
    if (v240 == *(_QWORD *)a3)
      v241 = 0;
    else
      v241 = ((v240 - *(_QWORD *)a3) >> 3) - 1;
    v342 = v241;
    v340 = (uint64_t)(v239[1] - *v239) >> 3;
    if (v241 >= v340)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v341);
      if (v341)
      {
        v242 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        dmlc::LogMessageFatal::Entry::Init(v242, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
        v243 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
        v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"Check failed: ", 14);
        v245 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"batch_size < offset_vec.size()", 30);
        v246 = *(char *)(v341 + 23);
        v247 = v246 >= 0 ? v341 : *(_QWORD *)v341;
        v248 = v246 >= 0 ? *(unsigned __int8 *)(v341 + 23) : *(_QWORD *)(v341 + 8);
        v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, v247, v248);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
        v250 = v341;
        v341 = 0;
        if (v250)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v341, v250);
      }
    }
    if (v342)
    {
      v251 = 0;
      while (1)
      {
        v252 = *(_QWORD *)a3;
        v253 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v251);
        v341 = 0;
        v254 = v251 + 1;
        v255 = *(_QWORD *)(v252 + 8 * (v251 + 1));
        v341 = v255;
        v256 = *(_QWORD *)(*v327 + 8 * (v251 + 1));
        v257 = *(_QWORD *)(*v327 + 8 * v251);
        if (!v334 && v256 != v257)
          goto LABEL_276;
        v258 = v256 - v257;
        v339 = v256 - v257 + v253;
        if (v339 != v255)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v340);
          if (v340)
          {
            v259 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            dmlc::LogMessageFatal::Entry::Init(v259, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/../common/column_matrix.h");
            v260 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v339);
            v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v260, (uint64_t)"Check failed: ", 14);
            v262 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)"ibegin + inst.size() == iend", 28);
            v263 = *(char *)(v340 + 23);
            v264 = v263 >= 0 ? v340 : *(_QWORD *)v340;
            v265 = v263 >= 0 ? *(unsigned __int8 *)(v340 + 23) : *(_QWORD *)(v340 + 8);
            v266 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, v264, v265);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v339);
            v267 = v340;
            v340 = 0;
            if (v267)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v340, v267);
          }
        }
        if (v253 < v341)
          break;
LABEL_270:
        ++v251;
        if (v254 >= v342)
          goto LABEL_271;
      }
      v268 = (unsigned int *)(v334 + 8 * v257);
      v269 = v336;
      while (v258)
      {
        v270 = *v268;
        v271 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v270);
        v272 = v238 + 4 * v271;
        v273 = *(_DWORD *)(v237 + 4 * v253) - *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v270);
        if (*(_BYTE *)(*((_QWORD *)this + 6) + v270))
        {
          v274 = v269[v270];
          *(_DWORD *)(v272 + 4 * v274) = v273;
          *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v274 + v271)) = v251;
          ++v269[v270];
        }
        else
        {
          *(_DWORD *)(v272 + 4 * v251) = v273;
          *(_QWORD *)(*v38 + (((unint64_t)(v271 + v251) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v271 + v251));
        }
        ++v253;
        v268 += 2;
        --v258;
        if (v253 >= v341)
          goto LABEL_270;
      }
      goto LABEL_276;
    }
  }
LABEL_271:
  if (__p)
  {
    v344.__m_.__sig = (uint64_t)__p;
    operator delete(__p);
  }
  v189 = v336;
  if (v336)
  {
    v337 = v336;
    goto LABEL_275;
  }
}

void sub_220EB2358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::GHistIndexMatrix::Init(uint64_t a1, std::mutex **a2, unint64_t *a3, xgboost::common::HistogramCuts *a4, int a5, char a6, int a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  std::string *Entry;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42[2];
  uint64_t v43;
  uint64_t v44;
  int v45;

  LODWORD(v43) = a7;
  v45 = 1;
  if (a7 < 1)
  {
    dmlc::LogCheckFormat<int,int>(&v44);
    if (v44)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
      v34 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Check failed: ", 14);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"n_threads >= 1", 14);
      v37 = *(char *)(v44 + 23);
      v38 = v37 >= 0 ? v44 : *(_QWORD *)v44;
      v39 = v37 >= 0 ? *(unsigned __int8 *)(v44 + 23) : *(_QWORD *)(v44 + 8);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
      v41 = v44;
      v44 = 0;
      if (v41)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, v41);
    }
  }
  *(_QWORD *)(a1 + 152) = a2[2];
  *(_BYTE *)(a1 + 192) = a6;
  xgboost::common::HistogramCuts::Copy((xgboost::common::HistogramCuts *)(a1 + 112), a4);
  *(_QWORD *)(a1 + 144) = a5;
  v17 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  v45 = 0;
  v18 = v16 - v17;
  v43 = v18 >> 3;
  if (v18)
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v44);
    if (v44)
    {
      v19 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      dmlc::LogMessageFatal::Entry::Init(v19, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
      v20 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v43);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: ", 14);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"row_ptr.size() == 0", 19);
      v23 = *(char *)(v44 + 23);
      v24 = v23 >= 0 ? v44 : *(_QWORD *)v44;
      v25 = v23 >= 0 ? *(unsigned __int8 *)(v44 + 23) : *(_QWORD *)(v44 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v43);
      v27 = v44;
      v44 = 0;
      if (v27)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v44, v27);
    }
  }
  if (*(_QWORD *)(*a2)->__m_.__opaque == (*a2)->__m_.__sig)
    v28 = 1;
  else
    v28 = (*(_QWORD *)(*a2)->__m_.__opaque - (*a2)->__m_.__sig) >> 3;
  v44 = 0;
  std::vector<unsigned long>::resize(a1, v28, &v44);
  v29 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) - 4);
  v44 = 0;
  std::vector<unsigned long>::resize(a1 + 88, v29, &v44);
  v44 = 0;
  std::vector<unsigned long>::resize(a1 + 168, (v29 * a7), &v44);
  v30 = a3[1];
  v42[0] = *a3;
  v42[1] = v30;
  xgboost::GHistIndexMatrix::PushBatch(a1, a2, v42, 0, 0, v29, a7);
  v31 = (_OWORD *)operator new();
  *v31 = 0u;
  v31[1] = 0u;
  v31[2] = 0u;
  v31[3] = 0u;
  v31[4] = 0u;
  v31[5] = 0u;
  v31[6] = 0u;
  v31[7] = 0u;
  v31[8] = 0u;
  v31[9] = 0u;
  v32 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v31;
  if (v32)
    std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100](a1 + 160, v32);
  xgboost::common::ColumnMatrix::Init(*(xgboost::common::ColumnMatrix **)(a1 + 160), (const xgboost::SparsePage *)a2, (const xgboost::GHistIndexMatrix *)a1, a8, a7);
}

void sub_220EB28F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::GHistIndexMatrix::Transpose(xgboost::GHistIndexMatrix *this)
{
  uint64_t result;
  std::string *Entry;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/data/gradient_index.cc");
    v4 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: columns_", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v6);
    return *((_QWORD *)this + 20);
  }
  return result;
}

void sub_220EB29B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::GHistIndexMatrix::ReadColumnPage(uint64_t a1, uint64_t (***a2)(_QWORD, unint64_t *, uint64_t))
{
  return xgboost::common::ColumnMatrix::Read(*(std::vector<char> **)(a1 + 160), a2, **(char ***)(a1 + 128));
}

uint64_t xgboost::common::ColumnMatrix::Read(std::vector<char> *a1, uint64_t (***a2)(_QWORD, unint64_t *, uint64_t), char *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::vector<char>::pointer begin;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;

  v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    v6 = v19;
    v7 = a1->__end_ - a1->__begin_;
    v8 = v19 >= v7;
    if (v19 <= v7)
    {
      v9 = v19;
      if (!v8)
      {
        a1->__end_ = &a1->__begin_[v19];
        v9 = v6;
      }
    }
    else
    {
      std::vector<char>::__append(a1, v19 - v7);
      v9 = v19;
    }
    if (v9)
      (**a2)(a2, (unint64_t *)a1->__begin_, v6);
  }
  v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    v10 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[1], v19);
    if (v19)
      (**a2)(a2, (unint64_t *)a1[1].__begin_, 8 * v10);
  }
  v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    v11 = v19;
    begin = a1[2].__begin_;
    v13 = a1[2].__end_ - begin;
    v14 = v19 >= v13;
    if (v19 <= v13)
    {
      v15 = v19;
      if (!v14)
      {
        a1[2].__end_ = &begin[v19];
        v15 = v11;
      }
    }
    else
    {
      std::vector<xgboost::common::ColumnType>::__append((uint64_t)&a1[2], v19 - v13);
      v15 = v19;
    }
    if (v15)
      (**a2)(a2, (unint64_t *)a1[2].__begin_, v11);
  }
  v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    v16 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[3], v19);
    if (v19)
      (**a2)(a2, (unint64_t *)a1[3].__begin_, 8 * v16);
  }
  v19 = 0;
  if ((**a2)(a2, &v19, 8) == 8)
  {
    v17 = v19;
    std::vector<unsigned long>::resize((uint64_t)&a1[4], v19);
    if (v19)
      (**a2)(a2, (unint64_t *)a1[4].__begin_, 8 * v17);
  }
  a1[5].__begin_ = a3;
  (**a2)(a2, (unint64_t *)&a1[6].__end_, 4);
  (**a2)(a2, (unint64_t *)((char *)&a1[6].__end_ + 4), 1);
  return 1;
}

uint64_t xgboost::GHistIndexMatrix::WriteColumnPage(uint64_t a1, uint64_t a2)
{
  return xgboost::common::ColumnMatrix::Write(*(_QWORD **)(a1 + 160), a2);
}

uint64_t xgboost::common::ColumnMatrix::Write(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a1[1] - *a1;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v15, 8);
  if (v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *a1, a1[1] - *a1);
  v13 = *a1;
  v14 = a1[1];
  v15 = (uint64_t)(a1[4] - a1[3]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v15, 8);
  if (v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[3], a1[4] - a1[3]);
  v5 = a1[3];
  v4 = a1[4];
  v15 = a1[7] - a1[6];
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v15, 8);
  if (v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[6], a1[7] - a1[6]);
  v6 = a1[6];
  v7 = a1[7];
  v15 = (uint64_t)(a1[10] - a1[9]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v15, 8);
  if (v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
  v8 = a1[9];
  v9 = a1[10];
  v15 = (uint64_t)(a1[13] - a1[12]) >> 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v15, 8);
  if (v15)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, a1[12], a1[13] - a1[12]);
  v11 = a1[12];
  v10 = a1[13];
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 19, 4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, (uint64_t)a1 + 156, 1);
  return v14 + v4 + v7 + v9 + v10 - (v13 + v5 + v6 + v8 + v11) + 45;
}

uint64_t xgboost::GHistIndexMatrix::GetFeatureCounts(uint64_t this, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if ((a3 - (uint64_t)a2) >> 2 != 1)
  {
    v4 = 0;
    do
    {
      v5 = *((unsigned int *)a2 + v4);
      v6 = v4 + 1;
      v7 = *((unsigned int *)a2 + (v4 + 1));
      if (v5 < v7)
      {
        v8 = *(_QWORD *)(a4 + 8 * v4);
        v9 = v7 - v5;
        v10 = (uint64_t *)(this + 8 * v5);
        do
        {
          v11 = *v10++;
          v8 += v11;
          *(_QWORD *)(a4 + 8 * v4) = v8;
          --v9;
        }
        while (v9);
      }
      ++v4;
    }
    while (((a3 - (uint64_t)a2) >> 2) - 1 > (unint64_t)v6);
  }
  return this;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_220EB3038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::common::ColumnType>::__append(uint64_t a1, size_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = &v5[-*(_QWORD *)a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v7[(_QWORD)v11];
    v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v12[a2];
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete((void *)v6);
  }
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_220EB3330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v6 = v5 - 1;
  }
  v7 = v6 >> 6;
  if (v5 >= 0x41)
    v8 = v7;
  else
    v8 = 0;
  *(_QWORD *)(*a1 + 8 * v8) = 0;
LABEL_9:
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *a1 + 8 * (v4 >> 6);
  v18 = *(_QWORD *)a2;
  v19 = v9;
  v16 = v10;
  v17 = v11;
  v14 = v12;
  v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

float xgboost::common::HistogramCuts::Copy(xgboost::common::HistogramCuts *this, const xgboost::common::HistogramCuts *a2)
{
  const void ***v4;
  unint64_t v5;
  void ***v6;
  std::vector<unsigned int>::size_type v7;
  unint64_t v8;
  float result;
  int v10;
  std::vector<unsigned int>::value_type __x;
  int v12;

  v4 = (const void ***)((char *)a2 + 8);
  v5 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 2;
  v10 = 0;
  v6 = (void ***)((char *)this + 8);
  std::vector<float>::resize(*((_QWORD *)this + 1), v5, &v10);
  v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) - **((_QWORD **)a2 + 2)) >> 2;
  __x = 0;
  std::vector<unsigned int>::resize(*((std::vector<unsigned int> **)this + 2), v7, &__x);
  v8 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) - **((_QWORD **)a2 + 3)) >> 2;
  v12 = 0;
  std::vector<float>::resize(*((_QWORD *)this + 3), v8, &v12);
  xgboost::HostDeviceVector<float>::Copy(v6, v4);
  xgboost::HostDeviceVector<unsigned int>::Copy((void ***)this + 2, (const void ***)a2 + 2);
  xgboost::HostDeviceVector<float>::Copy((void ***)this + 3, (const void ***)a2 + 3);
  *(_BYTE *)this = *(_BYTE *)a2;
  result = *((float *)a2 + 1);
  *((float *)this + 1) = result;
  return result;
}

uint64_t xgboost::common::Index::GetValueFromUint8(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return a2[(_QWORD)this];
}

uint64_t xgboost::common::Index::GetValueFromUint16(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return *((unsigned __int16 *)this + (_QWORD)a2);
}

uint64_t xgboost::common::Index::GetValueFromUint32(xgboost::common::Index *this, const unsigned __int8 *a2)
{
  return *((unsigned int *)this + (_QWORD)a2);
}

uint64_t dmlc::LogCheckFormat<xgboost::common::BinTypeSize,xgboost::common::BinTypeSize>(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220EB3A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::default_delete<xgboost::common::ColumnMatrix>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a2)
  {
    v3 = *(void **)(a2 + 128);
    if (v3)
      operator delete(v3);
    v4 = *(void **)(a2 + 96);
    if (v4)
    {
      *(_QWORD *)(a2 + 104) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a2 + 72);
    if (v5)
    {
      *(_QWORD *)(a2 + 80) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a2 + 48);
    if (v6)
    {
      *(_QWORD *)(a2 + 56) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(a2 + 24);
    if (v7)
    {
      *(_QWORD *)(a2 + 32) = v7;
      operator delete(v7);
    }
    v8 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v8;
      operator delete(v8);
    }
    JUMPOUT(0x227667068);
  }
}

uint64_t xgboost::common::HistogramCuts::SearchCatBin(uint64_t *a1, uint64_t *a2, unsigned int a3, float a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float *v15;
  float v16;

  v4 = a3 + 1;
  v5 = *a2;
  if (v4 >= (a2[1] - *a2) >> 2)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v6 = *(unsigned int *)(v5 + 4 * v4);
  v7 = *a1;
  v8 = *a1 + 4 * v6;
  v9 = *(unsigned int *)(v5 + 4 * a3);
  if ((_DWORD)v6 != (_DWORD)v9)
  {
    v10 = (float)(int)a4;
    v11 = (float *)(v7 + 4 * v9);
    v12 = (v8 - (uint64_t)v11) >> 2;
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < v10)
        v11 = v15;
      else
        v12 = v13;
    }
    while (v12);
    v8 = (uint64_t)v11;
  }
  return ((v8 - v7) >> 2) - ((v8 - v7) >> 2 == v6);
}

uint64_t xgboost::common::HistogramCuts::SearchBin(unsigned int a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  float *v11;
  float v12;

  v4 = *(unsigned int *)(a2 + 4 * (a1 + 1));
  v5 = *(unsigned int *)(a2 + 4 * a1);
  v6 = (float *)(a3 + 4 * v4);
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v7 = (float *)(a3 + 4 * v5);
    v8 = v6 - v7;
    do
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v12 = *v10;
      v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 > a4)
        v8 = v9;
      else
        v7 = v11;
    }
    while (v8);
    v6 = v7;
  }
  return (((unint64_t)v6 - a3) >> 2)
       - ((_DWORD)v4 == (((unint64_t)v6 - a3) >> 2));
}

double xgboost::metric::BinaryROCAUC(unint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  std::string *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  double v28;
  double v29;
  unint64_t v30;
  float v31;
  unint64_t v32;
  unint64_t *v33;
  double v34;
  double v35;
  double v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  double v41;
  float v42;
  float v43;
  _BOOL4 v44;
  double v45;
  std::string *Entry;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *__p;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(&__p, a1);
  v7 = *a1;
  v6 = a1[1];
  v8 = *a2;
  v9 = a2[2];
  v10 = a2[4];
  v11 = a2[5];
  v12 = *a3;
  v13 = a3[1];
  v14 = *((float *)a3 + 4);
  v59 = v11;
  LODWORD(v58) = 0;
  if (!v11)
  {
    dmlc::LogCheckFormat<unsigned long,int>(&v60);
    if (v60)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ", 14);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"labels.Size() != 0", 18);
      v51 = *(char *)(v60 + 23);
      v52 = v51 >= 0 ? v60 : *(_QWORD *)v60;
      v53 = v51 >= 0 ? *(unsigned __int8 *)(v60 + 23) : *(_QWORD *)(v60 + 8);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
      v55 = v60;
      v60 = 0;
      if (v55)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v60, v55);
    }
  }
  v58 = v7;
  v59 = v11;
  if (v11 != v7)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>(&v60);
    if (v60)
    {
      v15 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      dmlc::LogMessageFatal::Entry::Init(v15, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      v16 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v59);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: ", 14);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"labels.Size() == predts.size()", 30);
      v19 = *(char *)(v60 + 23);
      v20 = v19 >= 0 ? v60 : *(_QWORD *)v60;
      v21 = v19 >= 0 ? *(unsigned __int8 *)(v60 + 23) : *(_QWORD *)(v60 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v59);
      v23 = v60;
      v60 = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v60, v23);
    }
  }
  v24 = *(_QWORD *)__p;
  v25 = *(_QWORD *)__p * v8;
  if (v25 >= v9)
    goto LABEL_42;
  v26 = *(float *)(v10 + 4 * v25);
  v27 = v14;
  if (v12)
  {
    if (v12 <= v24)
LABEL_43:
      std::terminate();
    v27 = *(float *)(v13 + 4 * v24);
  }
  v28 = (1.0 - v26) * v27;
  v29 = (float)(v26 * v27);
  if ((unint64_t)(v57 - (_BYTE *)__p) >= 9)
  {
    v30 = (v57 - (_BYTE *)__p) >> 3;
    if (v30 <= 2)
      v30 = 2;
    v31 = *(float *)(v6 + 4 * v24);
    v32 = v30 - 1;
    v33 = (unint64_t *)((char *)__p + 8);
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    while (1)
    {
      v37 = v31;
      v39 = *v33++;
      v38 = v39;
      v31 = *(float *)(v6 + 4 * v39);
      v40 = v31 == v37;
      v41 = v36 + (v35 + v29) * vabdd_f64(v34, v28) * 0.5;
      if (!v40)
      {
        v36 = v41;
        v35 = v29;
        v34 = v28;
      }
      if (v38 * v8 >= v9)
        break;
      v42 = *(float *)(v10 + 4 * v38 * v8);
      v43 = v14;
      if (v12)
      {
        if (v12 <= v38)
          goto LABEL_43;
        v43 = *(float *)(v13 + 4 * v38);
      }
      v28 = v28 + (float)((float)(1.0 - v42) * v43);
      v29 = v29 + (float)(v42 * v43);
      if (!--v32)
        goto LABEL_27;
    }
LABEL_42:
    __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
  }
LABEL_27:
  v44 = v28 <= 0.0;
  if (v29 <= 0.0)
    v44 = 1;
  if (v44)
    v45 = 0.0;
  else
    v45 = v28;
  v57 = __p;
  operator delete(__p);
  return v45;
}

void sub_220EB3F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(_QWORD *a1, unint64_t *a2)
{
  unint64_t **v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;

  v3 = (unint64_t **)std::vector<unsigned long>::vector(a1, *a2);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    v6 = 0;
    v7 = *v3;
    do
      *v7++ = v6++;
    while (v7 != v5);
  }
  v11 = a2;
  if ((char *)v5 - (char *)v4 < 1025)
  {
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v8 = (unint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v5 - v4);
    v10 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v4, v5, &v11, v5 - v4, v8, v10);
  if (v8)
    operator delete(v8);
}

void sub_220EB4080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double xgboost::metric::GroupRankingROC(unint64_t *a1, uint64_t a2, float a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  BOOL v19;
  float v20;
  double v21;
  double v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::string *Entry;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  void *v37[3];
  unint64_t v38[2];
  _QWORD v39[11];
  char v40;
  uint64_t v41;

  xgboost::common::Span<float,18446744073709551615ul>::subspan((_QWORD *)(a2 + 16), 0, *(_QWORD *)(a2 + 40), v38);
  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(v37, v38);
  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    v7 = 0;
    v8 = v6 - 1;
    v9 = (char *)v37[0] + 8;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = v7 + 1;
      if (v7 + 1 < v6)
      {
        v13 = *((_QWORD *)v37[0] + v7);
        if (*a1 > v13)
        {
          v14 = (unint64_t *)v9;
          v15 = v8;
          while (1)
          {
            v17 = *v14++;
            v16 = v17;
            if (*a1 <= v17)
              break;
            v18 = *(float *)(a1[1] + 4 * v13) - *(float *)(a1[1] + 4 * v16);
            v19 = v18 <= 0.0;
            if (v18 == 0.0)
              v20 = 0.5;
            else
              v20 = 0.0;
            if (!v19)
              v20 = 1.0;
            v11 = v11 + (float)((float)(a3 * a3) * v20);
            v10 = v10 + (float)(a3 * a3);
            if (!--v15)
              goto LABEL_13;
          }
        }
        std::terminate();
      }
LABEL_13:
      --v8;
      v9 += 8;
      v7 = v12;
    }
    while (v12 != v6);
    if (v10 == 0.0)
      v21 = 1.0;
    else
      v21 = v10;
    v22 = v11 / v21;
    if (v11 / v21 > 1.0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" (", 2);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" vs. ", 5);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") ", 2);
      v25 = operator new();
      std::stringbuf::str();
      v36 = v25;
      v39[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v39[1] = MEMORY[0x24BEDB848] + 16;
      if (v40 < 0)
        operator delete((void *)v39[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x227666FE4](&v41);
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v39);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v39);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"auc <= 1.0f", 11);
      v30 = *(char *)(v36 + 23);
      if (v30 >= 0)
        v31 = v36;
      else
        v31 = *(_QWORD *)v36;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(v36 + 23);
      else
        v32 = *(_QWORD *)(v36 + 8);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v39);
      v34 = v36;
      v36 = 0;
      if (v34)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v36, v34);
    }
  }
  else
  {
    v22 = 0.0;
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v22;
}

void sub_220EB4350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  MEMORY[0x227667068](v16, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double xgboost::metric::BinaryPRAUC(unint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  unint64_t *v42;
  double v43;
  float v44;
  double v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  long double v57;
  float v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float v66;
  double v67;
  double v68;
  void *__p;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(&__p, a1);
  v6 = a2[5];
  if (!v6)
    goto LABEL_40;
  v7 = 0;
  v8 = 0;
  v9 = *a3;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v12 = (float *)(a3 + 2);
    if (v9)
    {
      if (v9 <= v8)
        goto LABEL_50;
      v12 = (float *)(a3[1] + v7);
    }
    v13 = *a2;
    v14 = *a2 * v8;
    v15 = a2[2];
    if (v14 >= v15)
      __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
    v16 = a2[4];
    v17 = *(float *)(v16 + 4 * v14);
    v11 = v11 + (float)(*v12 * v17);
    v10 = v10 + (float)(*v12 * (float)(1.0 - v17));
    ++v8;
    v7 += 4;
  }
  while (v6 != v8);
  if (v11 > 0.0 && v10 > 0.0)
  {
    v18 = *a1;
    v19 = a1[1];
    v20 = a3[1];
    v21 = *((float *)a3 + 4);
    v71 = v18;
    v72 = v6;
    if (v6 != v18)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>(&v73);
      if (v73)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
        v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"labels.Size() == predts.size()", 30);
        v26 = *(char *)(v73 + 23);
        v27 = v26 >= 0 ? v73 : *(_QWORD *)v73;
        v28 = v26 >= 0 ? *(unsigned __int8 *)(v73 + 23) : *(_QWORD *)(v73 + 8);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
        v30 = v73;
        v73 = 0;
        if (v30)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v73, v30);
      }
    }
    v31 = __p;
    v32 = *(_QWORD *)__p;
    v33 = *(_QWORD *)__p * v13;
    if (v33 >= v15)
      goto LABEL_51;
    v34 = *(float *)(v16 + 4 * v33);
    v35 = v21;
    if (v9)
    {
      if (v9 <= v32)
LABEL_50:
        std::terminate();
      v35 = *(float *)(v20 + 4 * v32);
    }
    v36 = (1.0 - v34) * v35;
    v37 = (float)(v34 * v35);
    v38 = 0.0;
    if ((unint64_t)(v70 - (_BYTE *)__p) >= 9)
    {
      v39 = (v70 - (_BYTE *)__p) >> 3;
      if (v39 <= 2)
        v39 = 2;
      v40 = *(float *)(v19 + 4 * v32);
      v41 = v39 - 1;
      v42 = (unint64_t *)((char *)__p + 8);
      v43 = 0.0;
      v44 = 1.0;
      v45 = 0.0;
      v66 = v21;
      while (1)
      {
        v46 = v40;
        v48 = *v42++;
        v47 = v48;
        v40 = *(float *)(v19 + 4 * v48);
        if (v40 != v46)
        {
          v49 = v45 / v11;
          v50 = 1.0;
          v51 = v37 / v11;
          if (v37 == v45
            || (v53 = (v36 - v43) / (v37 - v45), v50 = v53 + 1.0, v54 = (v43 - v53 * v45) / v11, v54 == 0.0))
          {
            v52 = v51 - v49;
          }
          else
          {
            v67 = v51 - v49;
            v68 = v38;
            v55 = log(v54 + v50 * v51);
            v56 = log(v54 + v50 * v49);
            v44 = 1.0;
            v38 = v68;
            v57 = v55 - v56;
            v21 = v66;
            v52 = v67 + -v54 / v50 * v57;
          }
          v38 = v38 + v52 / v50;
          v45 = v37;
          v43 = v36;
        }
        if (v47 * v13 >= v15)
          break;
        v58 = *(float *)(v16 + 4 * v47 * v13);
        v59 = v21;
        if (v9)
        {
          if (v9 <= v47)
            goto LABEL_50;
          v59 = *(float *)(v20 + 4 * v47);
        }
        v36 = v36 + (float)((float)(v44 - v58) * v59);
        v37 = v37 + (float)(v58 * v59);
        if (!--v41)
          goto LABEL_43;
      }
LABEL_51:
      __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
    }
    v45 = 0.0;
    v43 = 0.0;
LABEL_43:
    v60 = v45 / v11;
    v61 = v37 / v11;
    if (v37 != v45)
    {
      v62 = (v36 - v43) / (v37 - v45);
      v63 = v62 + 1.0;
      v64 = (v43 - v62 * v45) / v11;
      if (v64 != 0.0)
      {
        log(v64 + v63 * v61);
        log(v64 + v63 * v60);
      }
    }
  }
  else
  {
LABEL_40:
    v31 = __p;
    if (!__p)
      return 1.0;
  }
  v70 = v31;
  operator delete(v31);
  return 1.0;
}

void sub_220EB4820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  uint64_t v19;

  v19 = a18;
  a18 = 0;
  if (v19)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a18, v19);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double xgboost::metric::GPUBinaryROCAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_220EB48D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::metric::GPUMultiClassROCAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_220EB4948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::GPURankingAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220EB49C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::metric::GPUBinaryPRAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_220EB4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

double xgboost::metric::GPUMultiClassPRAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0.0;
}

void sub_220EB4AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::GPURankingPRAUC()
{
  std::string *Entry;
  _QWORD *v1;
  char v3;

  Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/common.h");
  v1 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"XGBoost version not compiled with GPU support.", 46);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v3);
  return 0;
}

void sub_220EB4B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

unint64_t *std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  unint64_t *v23;
  char *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  char *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  char v40;
  unint64_t *v41;
  uint64_t v42;

  if (a4 >= 2)
  {
    v8 = (char *)result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = **a3;
      if (v10 > v9)
      {
        v11 = *result;
        if (v10 > *result)
        {
          if (*(float *)((*a3)[1] + 4 * v9) > *(float *)((*a3)[1] + 4 * v11))
          {
            *result = v9;
            *(a2 - 1) = v11;
          }
          return result;
        }
      }
LABEL_44:
      std::terminate();
    }
    if ((uint64_t)a4 > 128)
    {
      v25 = (char *)a5;
      v26 = a4 >> 1;
      v27 = &result[a4 >> 1];
      v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5);
        v29 = (unint64_t *)&v25[8 * v26];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>((unint64_t *)&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v25[8 * a4];
        v31 = *a3;
        v32 = v29;
        while (v32 != (unint64_t *)v30)
        {
          v33 = v32;
          v34 = *v32;
          if (*v31 <= v34)
            goto LABEL_44;
          v35 = *(_QWORD *)v25;
          if (*v31 <= *(_QWORD *)v25)
            goto LABEL_44;
          v36 = v31[1];
          v37 = *(float *)(v36 + 4 * v34);
          v38 = *(float *)(v36 + 4 * v35);
          if (v37 > v38)
            v35 = v34;
          v25 += 8 * (v37 <= v38);
          v32 = &v33[v37 > v38];
          *(_QWORD *)v8 = v35;
          v8 += 8;
          if (v25 == (char *)v29)
          {
            if (v32 != (unint64_t *)v30)
            {
              v39 = 0;
              if (v37 > v38)
                v40 = 1;
              else
                v40 = 2;
              v41 = &v33[v40 & 1];
              do
              {
                *(_QWORD *)&v8[v39 * 8] = v41[v39];
                ++v39;
              }
              while (&v41[v39] != (unint64_t *)v30);
            }
            return result;
          }
        }
        if (v25 != (char *)v29)
        {
          v42 = 0;
          do
          {
            *(_QWORD *)&v8[v42] = *(_QWORD *)&v25[v42];
            v42 += 8;
          }
          while (&v25[v42] != (char *)v29);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v27, a3, v28, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25, a6);
        return (unint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v8, &v8[8 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      v13 = result + 1;
      if (result + 1 != a2)
      {
        v14 = 0;
        v15 = *a3;
        v16 = result;
        while (1)
        {
          v17 = v13;
          v18 = *v13;
          if (*v15 <= v18)
            goto LABEL_44;
          v19 = *v16;
          if (*v15 <= *v16)
            goto LABEL_44;
          v20 = v15[1];
          v21 = *(float *)(v20 + 4 * v18);
          if (v21 > *(float *)(v20 + 4 * v19))
          {
            v22 = v14;
            while (1)
            {
              *(unint64_t *)((char *)result + v22 + 8) = v19;
              if (!v22)
                break;
              if (*v15 <= v18)
                goto LABEL_44;
              v19 = *(unint64_t *)((char *)result + v22 - 8);
              if (*v15 <= v19)
                goto LABEL_44;
              v22 -= 8;
              if (v21 <= *(float *)(v20 + 4 * v19))
              {
                v23 = (unint64_t *)((char *)result + v22 + 8);
                goto LABEL_21;
              }
            }
            v23 = result;
LABEL_21:
            *v23 = v18;
          }
          v13 = v17 + 1;
          v14 += 8;
          v16 = v17;
          if (v17 + 1 == a2)
            return result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2, unint64_t **a3, unint64_t a4, unint64_t *a5)
{
  unint64_t *v5;
  unint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      if (v11 > v10 && v11 > *result)
      {
        v12 = (*a3)[1];
        v13 = *(float *)(v12 + 4 * v10);
        v14 = *(float *)(v12 + 4 * *result);
        if (v13 <= v14)
          v10 = *result;
        *a5 = v10;
        v5 = a5 + 1;
        if (v13 <= v14)
          v7 = a2 - 1;
        goto LABEL_10;
      }
LABEL_46:
      std::terminate();
    }
    if ((uint64_t)a4 > 8)
    {
      v26 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(result, v26, a3, a4 >> 1, a5, a4 >> 1);
      result = (unint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v27 = *a3;
      v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        v29 = v28;
        v30 = *v28;
        if (*v27 <= v30)
          goto LABEL_46;
        v31 = *v7;
        if (*v27 <= *v7)
          goto LABEL_46;
        v32 = v27[1];
        v33 = *(float *)(v32 + 4 * v30);
        v34 = *(float *)(v32 + 4 * v31);
        if (v33 > v34)
          v31 = v30;
        v28 = &v29[v33 > v34];
        v7 += v33 <= v34;
        *v5++ = v31;
        if (v7 == v26)
        {
          if (v28 != a2)
          {
            v35 = 0;
            v36 = &v29[v33 > v34];
            do
            {
              v5[v35] = v36[v35];
              ++v35;
            }
            while (&v36[v35] != a2);
          }
          return result;
        }
      }
      if (v7 != v26)
      {
        v37 = 0;
        do
        {
          v5[v37] = v7[v37];
          ++v37;
        }
        while (&v7[v37] != v26);
      }
    }
    else if (result != a2)
    {
      v15 = *a3;
      v16 = (uint64_t *)(result + 1);
      *a5 = *result;
      if (result + 1 != a2)
      {
        v17 = 0;
        v18 = (uint64_t *)a5;
        while (1)
        {
          v19 = *v16;
          if (*v15 <= *v16)
            goto LABEL_46;
          v20 = *v18;
          if (*v15 <= *v18)
            goto LABEL_46;
          v21 = v18 + 1;
          v22 = v15[1];
          if (*(float *)(v22 + 4 * v19) <= *(float *)(v22 + 4 * v20))
          {
            *v21 = v19;
          }
          else
          {
            v18[1] = v20;
            v23 = a5;
            if (v18 != (uint64_t *)a5)
            {
              v24 = v17;
              while (1)
              {
                if (*v15 <= *v16)
                  goto LABEL_46;
                v25 = *(unint64_t *)((char *)a5 + v24 - 8);
                if (*v15 <= v25)
                  goto LABEL_46;
                if (*(float *)(v22 + 4 * *v16) <= *(float *)(v22 + 4 * v25))
                  break;
                *(unint64_t *)((char *)a5 + v24) = v25;
                v24 -= 8;
                if (!v24)
                {
                  v23 = a5;
                  goto LABEL_28;
                }
              }
              v23 = (unint64_t *)((char *)a5 + v24);
            }
LABEL_28:
            *v23 = *v16;
          }
          ++v16;
          v17 += 8;
          v18 = v21;
          if (v16 == (uint64_t *)a2)
            return result;
        }
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, char *a3, unint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  float v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  float v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t **v64;
  char *__src;

  if (a6)
  {
    v10 = a6;
    v13 = result;
    while (a5 > a8 && v10 > a8)
    {
      if (!a5)
        return result;
      v14 = *(_QWORD *)a2;
      v15 = **a4;
      if (v15 <= *(_QWORD *)a2)
        goto LABEL_70;
      v16 = 0;
      v17 = -a5;
      while (1)
      {
        v18 = *(_QWORD *)&v13[v16];
        if (v15 <= v18)
          goto LABEL_70;
        v19 = (*a4)[1];
        if (*(float *)(v19 + 4 * v14) > *(float *)(v19 + 4 * v18))
          break;
        v16 += 8;
        if (__CFADD__(v17++, 1))
          return result;
      }
      v64 = a4;
      __src = a7;
      v62 = a8;
      v63 = a3;
      v61 = &v13[v16];
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          *(_QWORD *)&v13[v16] = v14;
          *(_QWORD *)a2 = v18;
          return result;
        }
        if (v17 <= 0)
          v31 = -v17;
        else
          v31 = 1 - v17;
        v30 = v31 >> 1;
        v24 = &v13[8 * (v31 >> 1) + v16];
        v23 = a2;
        if (a2 != a3)
        {
          v32 = *(_QWORD *)v24;
          v33 = (a3 - a2) >> 3;
          v23 = a2;
          while (1)
          {
            v34 = v33 >> 1;
            v35 = &v23[8 * (v33 >> 1)];
            if (v15 <= *(_QWORD *)v35 || v15 <= v32)
              break;
            v36 = *(float *)(v19 + 4 * *(_QWORD *)v35);
            v37 = v35 + 8;
            v33 += ~v34;
            if (v36 > *(float *)(v19 + 4 * v32))
              v23 = v37;
            else
              v33 = v34;
            if (!v33)
              goto LABEL_38;
          }
LABEL_70:
          std::terminate();
        }
LABEL_38:
        v22 = (v23 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0)
          v21 = v10;
        else
          v21 = v10 + 1;
        v22 = v21 >> 1;
        v23 = &a2[8 * (v21 >> 1)];
        v24 = a2;
        if (a2 - v13 != v16)
        {
          if (v15 > *(_QWORD *)v23)
          {
            v25 = (a2 - v13 - v16) >> 3;
            v24 = &v13[v16];
            while (1)
            {
              v26 = v25 >> 1;
              v27 = &v24[8 * (v25 >> 1)];
              if (v15 <= *(_QWORD *)v27)
                break;
              v28 = *(float *)(v19 + 4 * *(_QWORD *)v27);
              v29 = v27 + 8;
              v25 += ~v26;
              if (*(float *)(v19 + 4 * *(_QWORD *)v23) > v28)
                v25 = v26;
              else
                v24 = v29;
              if (!v25)
                goto LABEL_25;
            }
          }
          goto LABEL_70;
        }
LABEL_25:
        v30 = (v24 - v13 - v16) >> 3;
      }
      a5 = -v30 - v17;
      v38 = v10 - v22;
      v39 = v30;
      v40 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v24, a2, v23);
      v41 = v39;
      v42 = v40;
      if (v41 + v22 >= v10 - (v41 + v22) - v17)
      {
        v45 = v23;
        a4 = v64;
        v46 = v41;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(v40, v45, v63, v64, a5, v10 - v22, __src, v62);
        a2 = v24;
        a8 = v62;
        v38 = v22;
        a7 = __src;
        a5 = v46;
        a3 = v42;
        v13 = v61;
      }
      else
      {
        v43 = v24;
        v44 = v22;
        a7 = __src;
        a8 = v62;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::vector<unsigned long> xgboost::common::ArgSort<unsigned long,xgboost::common::Span<float const,18446744073709551615ul>,float,std::greater<void>>(xgboost::common::Span<float const,18446744073709551615ul> const&,std::greater<void>)::{lambda(unsigned long const&,unsigned long const&)#1} &,std::__wrap_iter<unsigned long *>>(&v13[v16], v43, v40, v64, v41, v44, __src, v62);
        v13 = v42;
        a2 = v23;
        a4 = v64;
        a3 = v63;
      }
      v10 = v38;
      if (!v38)
        return result;
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        v53 = 0;
        do
        {
          *(_QWORD *)&a7[v53] = *(_QWORD *)&v13[v53];
          v53 += 8;
        }
        while (&v13[v53] != a2);
        if (v53)
        {
          v54 = *a4;
          v55 = a7;
          while (a2 != a3)
          {
            v56 = *(_QWORD *)a2;
            if (*v54 <= *(_QWORD *)a2 || *v54 <= *(_QWORD *)v55)
              goto LABEL_70;
            v57 = v54[1];
            v58 = *(float *)(v57 + 4 * v56);
            v59 = *(float *)(v57 + 4 * *(_QWORD *)v55);
            if (v58 <= v59)
              v56 = *(_QWORD *)v55;
            a2 += 8 * (v58 > v59);
            v55 += 8 * (v58 <= v59);
            *(_QWORD *)v13 = v56;
            v13 += 8;
            if (&a7[v53] == v55)
              return result;
          }
          return (char *)memmove(v13, v55, a7 - v55 + v53);
        }
      }
    }
    else if (a3 != a2)
    {
      v47 = 0;
      do
      {
        *(_QWORD *)&a7[v47] = *(_QWORD *)&a2[v47];
        v47 += 8;
      }
      while (&a2[v47] != a3);
      if (v47)
      {
        v48 = &a7[v47];
        v49 = a3 - 8;
        while (a2 != v13)
        {
          v50 = *((_QWORD *)v48 - 1);
          v51 = **a4;
          if (v51 <= v50)
            goto LABEL_70;
          v52 = *((_QWORD *)a2 - 1);
          if (v51 <= v52)
            goto LABEL_70;
          if (*(float *)((*a4)[1] + 4 * v50) <= *(float *)((*a4)[1] + 4 * v52))
          {
            v48 -= 8;
          }
          else
          {
            v50 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v49 = v50;
          v49 -= 8;
          if (v48 == a7)
            return result;
        }
        v60 = 0;
        do
        {
          *(_QWORD *)&v49[v60] = *(_QWORD *)&v48[v60 - 8];
          v60 -= 8;
        }
        while (&v48[v60] != a7);
      }
    }
  }
  return result;
}

void xgboost::metric::EvalROCAUC::~EvalROCAUC(xgboost::metric::EvalROCAUC *this)
{
  *(_QWORD *)this = &off_24E6BA660;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24E6BA660;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x227667068);
}

void xgboost::metric::EvalAUC<xgboost::metric::EvalROCAUC>::Eval(rabit::engine *a1, uint64_t **a2, uint64_t a3)
{
  void *Engine;
  __n128 v7;
  rabit::engine *v8;
  rabit::engine *v9;
  uint64_t v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::string *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  unsigned int v67;
  double v68;
  double *v69;
  double v70;
  double v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  double v81;
  unsigned int v82;
  void *v83;
  std::string *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  int8x16_t v95;
  uint64_t v96;
  void *v97;
  std::string *Entry;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  std::string *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  double v119;
  void *v120;
  void *v121;
  unsigned int v122;
  void *__p;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  _QWORD v132[2];
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  int v137;
  unint64_t v138[2];
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  int v143;
  unint64_t v144[2];
  int8x16_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v119 = 0.0;
  v117 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  v118 = ((*a2)[1] - **a2) >> 2;
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v117, 8, 2, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  if (v117)
  {
    v9 = *(rabit::engine **)(a3 + 48);
    v8 = *(rabit::engine **)(a3 + 56);
    if (v9 == v8)
    {
      if (v117 == v118 || v118 % v117)
      {
        v33 = **a2;
        v34 = 0.0;
        v35 = (*a2)[1] - v33;
        if (v35)
        {
          v36 = **(_QWORD **)(a3 + 24);
          v37 = 0.0;
          v38 = 0.0;
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v36;
          if (v39)
          {
            if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
            {
              *(_QWORD *)&v139 = v35 >> 2;
              *((_QWORD *)&v139 + 1) = v33;
              if (!v36)
LABEL_128:
                std::terminate();
              v95 = *(int8x16_t *)(a3 + 32);
              v145 = vextq_s8(v95, v95, 8uLL);
              *(_QWORD *)&v146 = v39 >> 2;
              *((_QWORD *)&v146 + 1) = v36;
              *(_QWORD *)&v147 = v36;
              *((_QWORD *)&v147 + 1) = v95.i64[0];
              LODWORD(v148) = -1;
              v96 = **(_QWORD **)(a3 + 72);
              __p = (void *)((*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v96) >> 2);
              v124 = v96;
              LODWORD(v125) = 1065353216;
              v37 = xgboost::metric::BinaryROCAUC((unint64_t *)&v139, v145.i64, (uint64_t *)&__p);
            }
            else
            {
              xgboost::metric::GPUBinaryROCAUC();
              v37 = 0.0;
              v38 = 0.0;
              v34 = 0.0;
            }
            v119 = v34;
          }
        }
        else
        {
          v37 = 0.0;
          v38 = 0.0;
        }
        *(double *)&__p = v37 * v38;
        *(double *)v145.i64 = v34;
        *(double *)&v145.i64[1] = v37 * v38;
        v97 = rabit::engine::GetEngine(v8);
        (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v97 + 8))(v97, &v145, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        __p = (void *)v145.i64[1];
        v119 = *(double *)v145.i64;
        if (*(double *)&v145.i64[1] <= 0.0)
        {
          v81 = NAN;
        }
        else
        {
          if (*(double *)v145.i64 > *(double *)&v145.i64[1])
          {
            dmlc::LogCheckFormat<double,double>((uint64_t *)&v139);
            if ((_QWORD)v139)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v133);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
              v99 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v133);
              v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Check failed: ", 14);
              v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"auc <= local_area", 17);
              v102 = *(char *)(v139 + 23);
              v103 = v102 >= 0 ? v139 : *(_QWORD *)v139;
              v104 = v102 >= 0 ? *(unsigned __int8 *)(v139 + 23) : *(_QWORD *)(v139 + 8);
              v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, v103, v104);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v133);
              v106 = v139;
              *(_QWORD *)&v139 = 0;
              if (v106)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v139, v106);
            }
          }
          v81 = v119 / *(double *)&__p;
        }
      }
      else
      {
        *(_QWORD *)&v139 = v118 / v117;
        LODWORD(__p) = 0;
        if (v117 > v118)
        {
          dmlc::LogCheckFormat<unsigned long,int>(v145.i64);
          if (v145.i64[0])
          {
            v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: ", 14);
            v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"n_classes != 0", 14);
            v76 = *(char *)(v145.i64[0] + 23);
            v77 = v76 >= 0 ? v145.i64[0] : *(_QWORD *)v145.i64[0];
            v78 = v76 >= 0 ? *(unsigned __int8 *)(v145.i64[0] + 23) : *(_QWORD *)(v145.i64[0] + 8);
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, v77, v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
            v80 = v145.i64[0];
            v145.i64[0] = 0;
            if (v80)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v145, v80);
          }
        }
        __p = *(void **)&v139;
        LODWORD(v133) = 0;
        if (!(_QWORD)v139)
        {
          dmlc::LogCheckFormat<unsigned long,int>(v145.i64);
          if (v145.i64[0])
          {
            v107 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v133);
            dmlc::LogMessageFatal::Entry::Init(v107, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v108 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v133);
            v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Check failed: ", 14);
            v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"n_classes != 0", 14);
            v111 = *(char *)(v145.i64[0] + 23);
            v112 = v111 >= 0 ? v145.i64[0] : *(_QWORD *)v145.i64[0];
            v113 = v111 >= 0 ? *(unsigned __int8 *)(v145.i64[0] + 23) : *(_QWORD *)(v145.i64[0] + 8);
            v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, v112, v113);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v133);
            v115 = v145.i64[0];
            v145.i64[0] = 0;
            if (v115)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v145, v115);
          }
        }
        if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
        {
          v116 = **a2;
          v145.i64[0] = ((*a2)[1] - v116) >> 2;
          v145.i64[1] = v116;
          v81 = xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>(v145.i64, (uint64_t *)a3, (uint64_t)__p, 1, (void (*)(uint64_t *, _QWORD *, _QWORD *))xgboost::metric::BinaryROCAUC);
        }
        else
        {
          xgboost::metric::GPUMultiClassROCAUC();
          v81 = 0.0;
        }
      }
      v119 = v81;
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - **(_QWORD **)(a3 + 72);
      if (v10)
      {
        __p = (void *)(v10 >> 2);
        *(_QWORD *)&v139 = ((v8 - v9) >> 2) - 1;
        if (v10 >> 2 != (_QWORD)v139)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>(v145.i64);
          if (v145.i64[0])
          {
            v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
            v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"info.weights_.Size() == info.group_ptr_.size() - 1", 50);
            v15 = *(char *)(v145.i64[0] + 23);
            v16 = v15 >= 0 ? v145.i64[0] : *(_QWORD *)v145.i64[0];
            v17 = v15 >= 0 ? *(unsigned __int8 *)(v145.i64[0] + 23) : *(_QWORD *)(v145.i64[0] + 8);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
            v19 = v145.i64[0];
            v145.i64[0] = 0;
            if (v19)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v145, v19);
          }
        }
        v8 = *(rabit::engine **)(a3 + 56);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
      if (v20)
      {
        v21 = *((_DWORD *)v8 - 1);
        __p = (void *)(v20 >> 2);
        if (v20 >> 2 != v21)
        {
          dmlc::LogCheckFormat<unsigned int,unsigned long>(v145.i64);
          if (v145.i64[0])
          {
            v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"info.group_ptr_.back() == info.labels.Size()", 44);
            v26 = *(char *)(v145.i64[0] + 23);
            v27 = v26 >= 0 ? v145.i64[0] : *(_QWORD *)v145.i64[0];
            v28 = v26 >= 0 ? *(unsigned __int8 *)(v145.i64[0] + 23) : *(_QWORD *)(v145.i64[0] + 8);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
            v30 = v145.i64[0];
            v145.i64[0] = 0;
            if (v30)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v145, v30);
          }
        }
        if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
        {
          v40 = *a2;
          v41 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
          __p = (void *)(v41 >> 2);
          LODWORD(v139) = 2;
          if ((unint64_t)v41 < 8)
          {
            dmlc::LogCheckFormat<unsigned long,int>(v145.i64);
            if (v145.i64[0])
            {
              v42 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
              dmlc::LogMessageFatal::Entry::Init(v42, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
              v43 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
              v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Check failed: ", 14);
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"info.group_ptr_.size() >= 2", 27);
              v46 = *(char *)(v145.i64[0] + 23);
              v47 = v46 >= 0 ? v145.i64[0] : *(_QWORD *)v145.i64[0];
              v48 = v46 >= 0 ? *(unsigned __int8 *)(v145.i64[0] + 23) : *(_QWORD *)(v145.i64[0] + 8);
              v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
              v50 = v145.i64[0];
              v145.i64[0] = 0;
              if (v50)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v145, v50);
            }
          }
          v51 = *v40;
          v132[0] = (v40[1] - *v40) >> 2;
          v132[1] = v51;
          v52 = *(_QWORD *)(a3 + 32);
          v53 = **(_QWORD **)(a3 + 24);
          v54 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v53;
          v127 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v53) >> 2;
          v128 = v53;
          v131 = -1;
          v55 = *(_QWORD *)(a3 + 48);
          v56 = *(_QWORD *)(a3 + 56);
          v57 = *(void **)(a3 + 40);
          v125 = v52;
          v126 = v57;
          __p = v57;
          v124 = 1;
          v58 = (_QWORD)v57 * v52;
          if (v54)
            v58 = 0;
          v129 = v53;
          v130 = v58;
          v59 = *(uint64_t **)(a3 + 72);
          v61 = *v59;
          v60 = v59[1];
          v122 = 0;
          v145.i64[0] = 0;
          std::vector<double>::vector(&v120, 1uLL, &v145);
          v62 = (unint64_t)(v56 - v55) >> 2;
          v145.i64[0] = 0;
          v145.i64[1] = 850045863;
          v146 = 0u;
          v147 = 0u;
          v148 = 0u;
          v149 = 0;
          v63 = (v62 - 1);
          if ((_DWORD)v62 != 1)
          {
            v64 = 0;
            do
            {
              v65 = v64 + 1;
              if (v60 == v61)
              {
                v66 = 1.0;
              }
              else
              {
                if ((v60 - v61) >> 2 <= v64)
                  goto LABEL_128;
                v66 = *(float *)(v61 + 4 * v64);
              }
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v132, *(unsigned int *)(*(_QWORD *)(a3 + 48) + 4 * v64), (*(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * (v64 + 1))- *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v64)), v144);
              xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>((uint64_t)&v139, (uint64_t *)&__p, *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v64), *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v65));
              if (*((_QWORD *)&v142 + 1) >= 3uLL)
              {
                v138[0] = v144[0];
                v138[1] = v144[1];
                v133 = v139;
                v134 = v140;
                v135 = v141;
                v136 = v142;
                v137 = v143;
                v68 = xgboost::metric::GroupRankingROC(v138, (uint64_t)&v133, v66);
              }
              else
              {
                do
                  v67 = __ldaxr(&v122);
                while (__stlxr(v67 + 1, &v122));
                v68 = 0.0;
              }
              *(double *)v120 = v68 + *(double *)v120;
              ++v64;
            }
            while (v65 != v63);
          }
          dmlc::OMPException::Rethrow((std::exception_ptr *)&v145);
          std::mutex::~mutex((std::mutex *)&v145.u64[1]);
          std::exception_ptr::~exception_ptr((std::exception_ptr *)&v145);
          v69 = (double *)v120;
          if (v120 == v121)
          {
            v31 = 0.0;
          }
          else
          {
            v70 = 0.0;
            do
            {
              v71 = *v69++;
              v70 = v70 + v71;
            }
            while (v69 != v121);
            v31 = v70;
          }
          v82 = atomic_load(&v122);
          if (v120)
          {
            v121 = v120;
            operator delete(v120);
          }
          v32 = v63 - v82;
        }
        else
        {
          xgboost::metric::GPURankingAUC();
          v31 = 0.0;
          v32 = 0;
        }
        v119 = v31;
        v8 = *(rabit::engine **)(a3 + 56);
      }
      else
      {
        v32 = 0;
      }
      if ((((uint64_t)v8 - *(_QWORD *)(a3 + 48)) >> 2) - 1 != v32)
        xgboost::metric::InvalidGroupAUC(v8);
      *(double *)v145.i64 = v119;
      *(double *)&v145.i64[1] = (double)v32;
      v83 = rabit::engine::GetEngine(v8);
      (*(void (**)(void *, int8x16_t *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v83 + 8))(v83, &v145, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
      if (*(double *)&v145.i64[1])
      {
        v119 = *(double *)v145.i64 / (double)*(double *)&v145.i64[1];
        LODWORD(v120) = 1;
        if (v119 > 1.0)
        {
          dmlc::LogCheckFormat<double,int>((uint64_t *)&__p);
          if (*(double *)&__p != 0.0)
          {
            v84 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v120);
            dmlc::LogMessageFatal::Entry::Init(v84, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v85 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v120);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: ", 14);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"auc <= 1", 8);
            v88 = *((char *)__p + 23);
            if (v88 >= 0)
              v89 = __p;
            else
              v89 = *(void **)__p;
            if (v88 >= 0)
              v90 = *((unsigned __int8 *)__p + 23);
            else
              v90 = *((_QWORD *)__p + 1);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v89, v90);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Total AUC across groups: ", 25);
            v93 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)", valid groups: ", 16);
            std::ostream::operator<<();
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v120);
            v94 = __p;
            *(double *)&__p = 0.0;
            if (v94)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v94);
          }
        }
      }
      else
      {
        v119 = NAN;
      }
    }
  }
  else
  {
    v119 = NAN;
    v7.n128_u64[0] = 0x7FF8000000000000;
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)&v145, (uint64_t)&__p, 330, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v145, (uint64_t)"Dataset is empty, or contains only positive or negative samples.", 64);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&v145);
      if (SHIBYTE(v125) < 0)
        operator delete(__p);
    }
  }
}

void sub_220EB6180(_Unwind_Exception *a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::exception_ptr v4;

  std::mutex::~mutex(v2);
  std::exception_ptr::~exception_ptr(&v4);
  if (!v3)
    _Unwind_Resume(a1);
  JUMPOUT(0x220EB6268);
}

void sub_220EB6200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a17);
  v47 = a47;
  a47 = 0;
  if (v47)
    JUMPOUT(0x220EB62BCLL);
  JUMPOUT(0x220EB62D8);
}

void sub_220EB6214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a29);
  JUMPOUT(0x220EB6220);
}

void sub_220EB6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    JUMPOUT(0x220EB62BCLL);
  _Unwind_Resume(a1);
}

void sub_220EB623C()
{
  JUMPOUT(0x220EB628CLL);
}

void sub_220EB6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a50);
  if (a22 < 0)
    JUMPOUT(0x220EB6268);
  _Unwind_Resume(a1);
}

void sub_220EB6270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a17);
  v47 = a47;
  a47 = 0;
  if (v47)
    JUMPOUT(0x220EB62BCLL);
  JUMPOUT(0x220EB62D8);
}

void sub_220EB6280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EB628CLL);
}

void sub_220EB62A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EB62ACLL);
}

void sub_220EB62C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalROCAUC::Name(xgboost::metric::EvalROCAUC *this)
{
  return "auc";
}

void xgboost::metric::InvalidGroupAUC(xgboost::metric *this)
{
  rabit::engine *v1;
  void *Engine;
  _QWORD *v3;
  _QWORD *v4;
  void *__p[2];
  char v6;
  _QWORD v7[34];

  if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.h");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v7, (uint64_t)__p, 103, 2);
    v1 = (rabit::engine *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Invalid group with less than 3 samples is found on worker ", 58);
    Engine = rabit::engine::GetEngine(v1);
    (*(void (**)(void *))(*(_QWORD *)Engine + 64))(Engine);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)".  Calculating AUC value requires at ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"least 2 pairs of samples.", 25);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v7);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_220EB63B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *result;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15[2];

  if (a2[2] < (unint64_t)a4)
    __assert_rtn("MakeSliceDim", "linalg.h", 274, "static_cast<decltype(shape_[old_dim])>(range.end) <= shape_[old_dim]");
  v6 = a4 - a3;
  v7 = *a2;
  v8 = a2 + 4;
  if (a2[4])
    v9 = *a2 * a3;
  else
    v9 = 0;
  result = xgboost::common::Span<float,18446744073709551615ul>::subspan(v8, v9, 0xFFFFFFFFFFFFFFFFLL, v15);
  v11 = *((_DWORD *)a2 + 16);
  v12 = v15[0];
  v13 = v15[1];
  if (v15[0])
    v14 = v6;
  else
    v14 = 0;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t dmlc::LogCheckFormat<double,int>(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220EB65A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, void (*a5)(uint64_t *, _QWORD *, _QWORD *))
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  rabit::engine *v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  float v41;
  _BYTE *v42;
  _BYTE *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *Engine;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  std::string *Entry;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  void *ptr;
  std::string *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[8];
  int v83;
  void *__p;
  _BYTE *v85;
  uint64_t v86;
  _QWORD v87[2];
  int v88;
  _QWORD v89[2];
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  std::exception_ptr v98;
  _BYTE *v99;
  _DWORD *v100;
  _BYTE *v101;
  unint64_t v102;
  std::exception_ptr v103;
  std::mutex v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v86 = a3;
  LODWORD(v82[0]) = 0;
  if (!a3)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v103);
    if (v103.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v82);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      v59 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v82);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Check failed: ", 14);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"n_classes != 0", 14);
      v62 = *((char *)v103.__ptr_ + 23);
      v63 = v62 >= 0 ? v103.__ptr_ : *(void **)v103.__ptr_;
      v64 = v62 >= 0 ? *((unsigned __int8 *)v103.__ptr_ + 23) : *((_QWORD *)v103.__ptr_ + 1);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v82);
      ptr = v103.__ptr_;
      v103.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v103, (uint64_t)ptr);
    }
  }
  v8 = (uint64_t *)a2[3];
  v10 = *v8;
  v9 = v8[1];
  v11 = a2[5];
  if (a2[4])
  {
    v82[0] = a2[5];
    LODWORD(v89[0]) = 1;
    if (v11 != 1)
    {
      dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v103);
      if (v103.__ptr_)
      {
        v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v82);
        dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
        v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v82);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"labels.Shape(1) == 1", 20);
        v16 = *((char *)v103.__ptr_ + 23);
        v17 = v16 >= 0 ? v103.__ptr_ : *(void **)v103.__ptr_;
        v18 = v16 >= 0 ? *((unsigned __int8 *)v103.__ptr_ + 23) : *((_QWORD *)v103.__ptr_ + 1);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"AUC doesn't support multi-target model.", 39);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v82);
        v21 = v103.__ptr_;
        v103.__ptr_ = 0;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v103, (uint64_t)v21);
      }
    }
  }
  v103.__ptr_ = 0;
  v22 = (rabit::engine *)std::vector<double>::vector(&__p, 3 * v86, &v103);
  v23 = (double *)__p;
  v81 = v86;
  if (v85 != __p && !__p
    || (v24 = (v85 - (_BYTE *)__p) >> 3, v25 = v85 != __p, v77 = v24 - v25, v24 < v25)
    || !__p && v24 != v25
    || v24 < 2 * (unint64_t)(v85 != __p)
    || (v26 = 2 * (v85 != __p), !__p) && v24 != v26)
  {
LABEL_83:
    std::terminate();
  }
  v27 = (char *)__p + 8 * v25;
  v76 = v24 - v26;
  v28 = (char *)__p + 16 * (v85 != __p);
  v29 = a1;
  v30 = *(_QWORD *)(a2[9] + 8);
  v80 = *(_QWORD *)a2[9];
  v31 = *v29;
  v32 = v29[1];
  v83 = -1;
  v33 = *a2;
  v82[4] = v31;
  v82[5] = v32;
  v82[2] = v33;
  v82[3] = v86;
  v82[0] = v86;
  v82[1] = 1;
  v34 = v33 * v86;
  if (!v31)
    v34 = 0;
  v82[6] = v32;
  v82[7] = v34;
  if (*(_QWORD *)(a2[3] + 8) != *(_QWORD *)a2[3])
  {
    LODWORD(v89[0]) = a4;
    LODWORD(v100) = 1;
    if (a4 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v103);
      if (v103.__ptr_)
      {
        v67 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v89);
        dmlc::LogMessageFatal::Entry::Init(v67, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/../common/threading_utils.h");
        v68 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v89);
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed: ", 14);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"n_threads >= 1", 14);
        v71 = *((char *)v103.__ptr_ + 23);
        v72 = v71 >= 0 ? v103.__ptr_ : *(void **)v103.__ptr_;
        v73 = v71 >= 0 ? *((unsigned __int8 *)v103.__ptr_ + 23) : *((_QWORD *)v103.__ptr_ + 1);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v72, v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v89);
        v75 = v103.__ptr_;
        v103.__ptr_ = 0;
        if (v75)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v103, (uint64_t)v75);
      }
    }
    v103.__ptr_ = 0;
    v104.__m_.__sig = 850045863;
    memset(v104.__m_.__opaque, 0, sizeof(v104.__m_.__opaque));
    if (v81)
    {
      v35 = 0;
      v36 = (v9 - v10) >> 2;
      v78 = (v30 - v80) >> 2;
      if (v77 >= v76)
        v37 = v76;
      else
        v37 = v77;
      do
      {
        v102 = v35;
        std::vector<float>::vector(&v100, (uint64_t)(*(_QWORD *)(a2[3] + 8) - *(_QWORD *)a2[3]) >> 2);
        std::vector<float>::vector(&v98, (uint64_t)(*(_QWORD *)(a2[3] + 8) - *(_QWORD *)a2[3]) >> 2);
        v97 = 0;
        if (v101 == (_BYTE *)v100)
        {
          v95 = 0;
          v96 = v101;
          v42 = v98.__ptr_;
          v43 = v99;
          if (!v98.__ptr_ && v99)
            goto LABEL_83;
        }
        else
        {
          do
          {
            v38 = (_DWORD *)xgboost::linalg::TensorView<float const,2>::operator()<unsigned long &,unsigned long &>(v82, &v97, &v102);
            v39 = v97;
            v40 = v100;
            v100[v97] = *v38;
            if (v39 * v11 >= v36)
              __assert_rtn("operator()", "linalg.h", 422, "offset < data_.size() && \"Out of bound access.\"");
            if (*(float *)(v10 + 4 * v39 * v11) == (float)v102)
              v41 = 1.0;
            else
              v41 = 0.0;
            v42 = v98.__ptr_;
            *((float *)v98.__ptr_ + v39) = v41;
            v97 = v39 + 1;
          }
          while (v39 + 1 < (unint64_t)((v101 - (_BYTE *)v40) >> 2));
          v95 = (v101 - (_BYTE *)v40) >> 2;
          v96 = v40;
          v43 = v99;
        }
        v90 = (v43 - v42) >> 2;
        v91 = v42;
        v92 = v42;
        v93 = v90;
        v94 = -1;
        v89[0] = 1;
        v89[1] = v90;
        v87[0] = v78;
        v87[1] = v80;
        v88 = 1065353216;
        a5(&v95, v89, v87);
        v47 = 3 * v102;
        if (3 * v102 >= v37)
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        *(_QWORD *)&v27[24 * v102] = v45;
        *(_QWORD *)&v28[8 * v47] = v46;
        if (v47 >= v24)
          __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
        v23[v47] = v44 * *(double *)&v27[8 * v47];
        if (v98.__ptr_)
        {
          v99 = v98.__ptr_;
          operator delete(v98.__ptr_);
        }
        if (v100)
        {
          v101 = v100;
          operator delete(v100);
        }
        ++v35;
      }
      while (v35 != v81);
    }
    dmlc::OMPException::Rethrow(&v103);
    std::mutex::~mutex(&v104);
    std::exception_ptr::~exception_ptr(&v103);
  }
  Engine = rabit::engine::GetEngine(v22);
  (*(void (**)(void *, double *, uint64_t, unint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, v23, 8, v24, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
  v49 = v86;
  if (v86)
  {
    v50 = 0;
    v51 = v77;
    if (v76 < v77)
      v51 = v76;
    v52 = 0.0;
    v53 = 0.0;
    do
    {
      if (v50 >= v24)
        goto LABEL_82;
      v54 = v23[v50];
      if (v54 == 0.0)
        goto LABEL_60;
      if (v50 >= v51)
LABEL_82:
        __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
      v55 = *(double *)&v27[8 * v50];
      v53 = v53 + *(double *)&v28[8 * v50] / v54 * v55;
      v52 = v52 + v55;
      v50 += 3;
      --v49;
    }
    while (v49);
    v56 = NAN;
    if (v52 != 0.0)
      v56 = v53 / v52;
  }
  else
  {
LABEL_60:
    v56 = NAN;
  }
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  return v56;
}

void sub_220EB6D68()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 184));
  JUMPOUT(0x220EB6E40);
}

void sub_220EB6D74()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 184));
  JUMPOUT(0x220EB6E40);
}

void sub_220EB6D80(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_220EB6E2C();
}

void sub_220EB6D88()
{
  JUMPOUT(0x220EB6DA4);
}

void sub_220EB6DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a35);
  JUMPOUT(0x220EB6DD0);
}

void sub_220EB6DE8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  sub_220EB6E2C();
}

void sub_220EB6DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  v11 = *(_QWORD *)(v10 - 184);
  *(_QWORD *)(v10 - 184) = 0;
  if (v11)
    std::default_delete<std::string>::operator()[abi:ne180100](v10 - 184);
  JUMPOUT(0x220EB6E50);
}

void sub_220EB6E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EB6E10);
}

uint64_t sub_220EB6E28(uint64_t a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  return sub_220EB6E2C();
}

void sub_220EB6E2C()
{
  JUMPOUT(0x220EB6E50);
}

void sub_220EB6E38()
{
  JUMPOUT(0x220EB6E40);
}

uint64_t dmlc::LogCheckFormat<double,double>@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" vs. ", 5);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") ", 2);
  v4 = operator new();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *a1 = v4;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x227666FE4](&v8);
}

void sub_220EB6F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227667068](v2, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost::metric::EvalPRAUC::~EvalPRAUC(xgboost::metric::EvalPRAUC *this)
{
  *(_QWORD *)this = &off_24E6BA758;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24E6BA758;
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x227667068);
}

void xgboost::metric::EvalAUC<xgboost::metric::EvalPRAUC>::Eval(rabit::engine *a1, void ***a2, uint64_t a3)
{
  void *Engine;
  __n128 v7;
  rabit::engine *v8;
  rabit::engine *v9;
  uint64_t v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  double v31;
  unsigned int v32;
  _BYTE *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  void *ptr;
  double v53;
  std::string *v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  float v82;
  double v83;
  double *v84;
  double v85;
  double v86;
  unsigned int v87;
  void *v88;
  std::string *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  int8x16_t v100;
  uint64_t v101;
  void *v102;
  std::string *Entry;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  unint64_t v114;
  double v115;
  void *v116;
  void *v117;
  unsigned int v118;
  void *__p;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _QWORD v128[2];
  uint64_t v129[2];
  float v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  unint64_t v136[2];
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  unint64_t v142[2];
  std::exception_ptr v143[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v115 = 0.0;
  v113 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  v114 = ((_BYTE *)(*a2)[1] - (_BYTE *)**a2) >> 2;
  Engine = rabit::engine::GetEngine(a1);
  (*(void (**)(void *, unint64_t *, uint64_t, uint64_t, unint64_t *(*)(unint64_t *, unint64_t *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v113, 8, 2, rabit::op::Reducer<rabit::op::Max,unsigned long>, 0, 0);
  if (v113)
  {
    v9 = *(rabit::engine **)(a3 + 48);
    v8 = *(rabit::engine **)(a3 + 56);
    if (v9 == v8)
    {
      if (v113 == v114 || v114 % v113)
      {
        v33 = **a2;
        v34 = 0.0;
        v35 = (_BYTE *)(*a2)[1] - v33;
        if (v35)
        {
          v36 = **(_QWORD **)(a3 + 24);
          v37 = 0.0;
          v38 = 0.0;
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v36;
          if (v39)
          {
            if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
            {
              *(_QWORD *)&v137 = v35 >> 2;
              *((_QWORD *)&v137 + 1) = v33;
              if (!v36)
LABEL_124:
                std::terminate();
              v100 = *(int8x16_t *)(a3 + 32);
              *(int8x16_t *)&v143[0].__ptr_ = vextq_s8(v100, v100, 8uLL);
              *(_QWORD *)&v144 = v39 >> 2;
              *((_QWORD *)&v144 + 1) = v36;
              *(_QWORD *)&v145 = v36;
              *((_QWORD *)&v145 + 1) = v100.i64[0];
              LODWORD(v146) = -1;
              v101 = **(_QWORD **)(a3 + 72);
              __p = (void *)((*(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v101) >> 2);
              v120 = v101;
              LODWORD(v121) = 1065353216;
              v37 = xgboost::metric::BinaryPRAUC((unint64_t *)&v137, (uint64_t *)v143, (uint64_t *)&__p);
            }
            else
            {
              xgboost::metric::GPUBinaryPRAUC();
              v37 = 0.0;
              v38 = 0.0;
              v34 = 0.0;
            }
            v115 = v34;
          }
        }
        else
        {
          v37 = 0.0;
          v38 = 0.0;
        }
        *(double *)&__p = v37 * v38;
        v143[0] = *(std::exception_ptr *)&v34;
        *(double *)&v143[1].__ptr_ = v37 * v38;
        v102 = rabit::engine::GetEngine(v8);
        (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v102 + 8))(v102, v143, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
        v115 = *(double *)&v143[0].__ptr_;
        __p = v143[1].__ptr_;
        if (*(double *)&v143[1].__ptr_ <= 0.0)
        {
          v53 = NAN;
        }
        else
        {
          if (*(double *)&v143[0].__ptr_ > *(double *)&v143[1].__ptr_)
          {
            dmlc::LogCheckFormat<double,double>((uint64_t *)&v137);
            if ((_QWORD)v137)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
              v104 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
              v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Check failed: ", 14);
              v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"auc <= local_area", 17);
              v107 = *(char *)(v137 + 23);
              v108 = v107 >= 0 ? v137 : *(_QWORD *)v137;
              v109 = v107 >= 0 ? *(unsigned __int8 *)(v137 + 23) : *(_QWORD *)(v137 + 8);
              v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, v108, v109);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
              v111 = v137;
              *(_QWORD *)&v137 = 0;
              if (v111)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v137, v111);
            }
          }
          v53 = v115 / *(double *)&__p;
        }
      }
      else
      {
        __p = (void *)(v114 / v113);
        LODWORD(v137) = 0;
        if (v113 > v114)
        {
          dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)v143);
          if (v143[0].__ptr_)
          {
            v44 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
            dmlc::LogMessageFatal::Entry::Init(v44, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v45 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v137);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Check failed: ", 14);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"n_classes != 0", 14);
            v48 = *((char *)v143[0].__ptr_ + 23);
            v49 = v48 >= 0 ? v143[0].__ptr_ : *(void **)v143[0].__ptr_;
            v50 = v48 >= 0 ? *((unsigned __int8 *)v143[0].__ptr_ + 23) : *((_QWORD *)v143[0].__ptr_ + 1);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v49, v50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v137);
            ptr = v143[0].__ptr_;
            v143[0].__ptr_ = 0;
            if (ptr)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v143, (uint64_t)ptr);
          }
        }
        if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
        {
          v112 = **a2;
          v143[0].__ptr_ = (void *)(((_BYTE *)(*a2)[1] - v112) >> 2);
          v143[1].__ptr_ = v112;
          v53 = xgboost::metric::MultiClassOVR<std::tuple<double,double,double> (&)(xgboost::common::Span<float const,18446744073709551615ul>,xgboost::linalg::TensorView<float const,1>,xgboost::common::OptionalWeights)>((uint64_t *)v143, (uint64_t *)a3, (uint64_t)__p, 1, (void (*)(uint64_t *, _QWORD *, _QWORD *))xgboost::metric::BinaryPRAUC);
        }
        else
        {
          xgboost::metric::GPUMultiClassPRAUC();
          v53 = 0.0;
        }
      }
      v115 = v53;
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - **(_QWORD **)(a3 + 72);
      if (v10)
      {
        __p = (void *)(v10 >> 2);
        *(_QWORD *)&v137 = ((v8 - v9) >> 2) - 1;
        if (v10 >> 2 != (_QWORD)v137)
        {
          dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v143);
          if (v143[0].__ptr_)
          {
            v11 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            dmlc::LogMessageFatal::Entry::Init(v11, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v12 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: ", 14);
            v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"info.weights_.Size() == info.group_ptr_.size() - 1", 50);
            v15 = *((char *)v143[0].__ptr_ + 23);
            v16 = v15 >= 0 ? v143[0].__ptr_ : *(void **)v143[0].__ptr_;
            v17 = v15 >= 0 ? *((unsigned __int8 *)v143[0].__ptr_ + 23) : *((_QWORD *)v143[0].__ptr_ + 1);
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
            v19 = v143[0].__ptr_;
            v143[0].__ptr_ = 0;
            if (v19)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v143, (uint64_t)v19);
          }
        }
        v8 = *(rabit::engine **)(a3 + 56);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
      if (v20)
      {
        v21 = *((_DWORD *)v8 - 1);
        __p = (void *)(v20 >> 2);
        if (v20 >> 2 != v21)
        {
          dmlc::LogCheckFormat<unsigned int,unsigned long>((uint64_t *)v143);
          if (v143[0].__ptr_)
          {
            v22 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            dmlc::LogMessageFatal::Entry::Init(v22, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"info.group_ptr_.back() == info.labels.Size()", 44);
            v26 = *((char *)v143[0].__ptr_ + 23);
            v27 = v26 >= 0 ? v143[0].__ptr_ : *(void **)v143[0].__ptr_;
            v28 = v26 >= 0 ? *((unsigned __int8 *)v143[0].__ptr_ + 23) : *((_QWORD *)v143[0].__ptr_ + 1);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
            v30 = v143[0].__ptr_;
            v143[0].__ptr_ = 0;
            if (v30)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v143, (uint64_t)v30);
          }
        }
        if (*(_DWORD *)(*((_QWORD *)a1 + 1) + 24) == -1)
        {
          v40 = **(float ***)(a3 + 24);
          v41 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - (_QWORD)v40;
          if (v41)
          {
            v42 = v41 >> 2;
            while (1)
            {
              if (!v42)
                goto LABEL_124;
              if (*v40 < 0.0 || *v40 > 1.0)
                break;
              ++v40;
              if (!--v42)
                goto LABEL_62;
            }
            v54 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v143);
            dmlc::LogMessageFatal::Entry::Init(v54, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.h");
            v55 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)v143);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"PR-AUC supports only binary relevance for learning to rank.", 59);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)v143);
          }
LABEL_62:
          v56 = *a2;
          v57 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
          __p = (void *)(v57 >> 2);
          LODWORD(v137) = 2;
          if ((unint64_t)v57 < 8)
          {
            dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)v143);
            if (v143[0].__ptr_)
            {
              v58 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
              dmlc::LogMessageFatal::Entry::Init(v58, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
              v59 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
              v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Check failed: ", 14);
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"info.group_ptr_.size() >= 2", 27);
              v62 = *((char *)v143[0].__ptr_ + 23);
              v63 = v62 >= 0 ? v143[0].__ptr_ : *(void **)v143[0].__ptr_;
              v64 = v62 >= 0 ? *((unsigned __int8 *)v143[0].__ptr_ + 23) : *((_QWORD *)v143[0].__ptr_ + 1);
              v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)": ", 2);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
              v66 = v143[0].__ptr_;
              v143[0].__ptr_ = 0;
              if (v66)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v143, (uint64_t)v66);
            }
          }
          v67 = *v56;
          v128[0] = ((_BYTE *)v56[1] - (_BYTE *)*v56) >> 2;
          v128[1] = v67;
          v68 = *(_QWORD *)(a3 + 32);
          v69 = **(_QWORD **)(a3 + 24);
          v70 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) == v69;
          v123 = (*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - v69) >> 2;
          v124 = v69;
          v127 = -1;
          v71 = *(_QWORD *)(a3 + 48);
          v72 = *(_QWORD *)(a3 + 56);
          v73 = *(void **)(a3 + 40);
          v121 = v68;
          v122 = v73;
          __p = v73;
          v120 = 1;
          v74 = (_QWORD)v73 * v68;
          if (v70)
            v74 = 0;
          v125 = v69;
          v126 = v74;
          v75 = *(uint64_t **)(a3 + 72);
          v77 = *v75;
          v76 = v75[1];
          v118 = 0;
          v143[0].__ptr_ = 0;
          std::vector<double>::vector(&v116, 1uLL, v143);
          v78 = (unint64_t)(v72 - v71) >> 2;
          v143[0].__ptr_ = 0;
          v143[1].__ptr_ = (void *)850045863;
          v144 = 0u;
          v145 = 0u;
          v146 = 0u;
          v147 = 0;
          v79 = (v78 - 1);
          if ((_DWORD)v78 != 1)
          {
            v80 = 0;
            do
            {
              v81 = v80 + 1;
              if (v76 == v77)
              {
                v82 = 1.0;
              }
              else
              {
                if ((v76 - v77) >> 2 <= v80)
                  goto LABEL_124;
                v82 = *(float *)(v77 + 4 * v80);
              }
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v128, *(unsigned int *)(*(_QWORD *)(a3 + 48) + 4 * v80), (*(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * (v80 + 1))- *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v80)), v142);
              xgboost::linalg::TensorView<float const,2>::Slice<xgboost::linalg::detail::RangeTag<unsigned int>>((uint64_t)&v137, (uint64_t *)&__p, *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v80), *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4 * v81));
              v136[0] = v142[0];
              v136[1] = v142[1];
              v131 = v137;
              v132 = v138;
              v133 = v139;
              v134 = v140;
              v135 = v141;
              v129[0] = 0;
              v129[1] = 0;
              v130 = v82;
              xgboost::metric::BinaryPRAUC(v136, (uint64_t *)&v131, v129);
              *(double *)v116 = v83 + *(double *)v116;
              ++v80;
            }
            while (v81 != v79);
          }
          dmlc::OMPException::Rethrow(v143);
          std::mutex::~mutex((std::mutex *)&v143[1]);
          std::exception_ptr::~exception_ptr(v143);
          v84 = (double *)v116;
          if (v116 == v117)
          {
            v31 = 0.0;
          }
          else
          {
            v85 = 0.0;
            do
            {
              v86 = *v84++;
              v85 = v85 + v86;
            }
            while (v84 != v117);
            v31 = v85;
          }
          v87 = atomic_load(&v118);
          if (v116)
          {
            v117 = v116;
            operator delete(v116);
          }
          v32 = v79 - v87;
        }
        else
        {
          xgboost::metric::GPURankingPRAUC();
          v31 = 0.0;
          v32 = 0;
        }
        v115 = v31;
        v8 = *(rabit::engine **)(a3 + 56);
      }
      else
      {
        v32 = 0;
      }
      if ((((uint64_t)v8 - *(_QWORD *)(a3 + 48)) >> 2) - 1 != v32)
        xgboost::metric::InvalidGroupAUC(v8);
      v143[0] = *(std::exception_ptr *)&v115;
      *(double *)&v143[1].__ptr_ = (double)v32;
      v88 = rabit::engine::GetEngine(v8);
      (*(void (**)(void *, std::exception_ptr *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)v88 + 8))(v88, v143, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
      if (*(double *)&v143[1].__ptr_)
      {
        v115 = *(double *)&v143[0].__ptr_ / (double)*(double *)&v143[1].__ptr_;
        LODWORD(v116) = 1;
        if (v115 > 1.0)
        {
          dmlc::LogCheckFormat<double,int>((uint64_t *)&__p);
          if (*(double *)&__p != 0.0)
          {
            v89 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
            dmlc::LogMessageFatal::Entry::Init(v89, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
            v90 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v116);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Check failed: ", 14);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"auc <= 1", 8);
            v93 = *((char *)__p + 23);
            if (v93 >= 0)
              v94 = __p;
            else
              v94 = *(void **)__p;
            if (v93 >= 0)
              v95 = *((unsigned __int8 *)__p + 23);
            else
              v95 = *((_QWORD *)__p + 1);
            v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
            v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)": ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Total AUC across groups: ", 25);
            v98 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)", valid groups: ", 16);
            std::ostream::operator<<();
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v116);
            v99 = __p;
            *(double *)&__p = 0.0;
            if (v99)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (uint64_t)v99);
          }
        }
      }
      else
      {
        v115 = NAN;
      }
    }
  }
  else
  {
    v115 = NAN;
    v7.n128_u64[0] = 0x7FF8000000000000;
    if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(v7) + 4) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/auc.cc");
      xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v143, (uint64_t)&__p, 330, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Dataset is empty, or contains only positive or negative samples.", 64);
      xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v143);
      if (SHIBYTE(v121) < 0)
        operator delete(__p);
    }
  }
}

void sub_220EB7C20(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v3;
  std::exception_ptr v4;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr(&v4);
  if (!v3)
    _Unwind_Resume(a1);
  JUMPOUT(0x220EB7D04);
}

void sub_220EB7C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  v49 = a49;
  a49 = 0;
  if (v49)
    JUMPOUT(0x220EB7D58);
  JUMPOUT(0x220EB7D74);
}

void sub_220EB7CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a31);
  JUMPOUT(0x220EB7CBCLL);
}

void sub_220EB7CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    JUMPOUT(0x220EB7D58);
  _Unwind_Resume(a1);
}

void sub_220EB7CD8()
{
  JUMPOUT(0x220EB7D28);
}

void sub_220EB7CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)&a52);
  if (a21 < 0)
    JUMPOUT(0x220EB7D04);
  _Unwind_Resume(a1);
}

void sub_220EB7D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a16);
  v49 = a49;
  a49 = 0;
  if (v49)
    JUMPOUT(0x220EB7D58);
  JUMPOUT(0x220EB7D74);
}

void sub_220EB7D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EB7D28);
}

void sub_220EB7D3C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  JUMPOUT(0x220EB7D48);
}

void sub_220EB7D60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

const char *xgboost::metric::EvalPRAUC::Name(xgboost::metric::EvalPRAUC *this)
{
  return "aucpr";
}

uint64_t dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get()
{
  _BYTE *v0;
  uint64_t (**v1)(_QWORD);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);

  v1 = &dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst;
  if ((*v0 & 1) == 0)
  {
    *(_DWORD *)dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get(void)::inst) = 5489;
    do
    {
      v5 = v4(v3);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(_QWORD *)(v4(v3) + 2496) = 0;
    *(_BYTE *)v9(v8) = 1;
  }
  return (*v1)(v1);
}

uint64_t xgboost::common::AllVisibleGPUs(xgboost::common *this)
{
  return 0;
}

void xgboost::PesudoHuberParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  std::string __p;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__p, "huber_slope");
  v3 = operator new();
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)v3 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v3 + 24), &__p);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "float");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__p.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 1065353216;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "The delta term in Pseudo-Huber loss.");
  std::string::operator=((std::string *)(v3 + 72), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_220EB7F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void xgboost::FeatureInteractionConstraintHost::Configure(std::string *this, const xgboost::tree::TrainParam *a2, int a3)
{
  if (*((char *)a2 + 127) < 0)
  {
    if (*((_QWORD *)a2 + 14))
      goto LABEL_3;
  }
  else if (*((_BYTE *)a2 + 127))
  {
LABEL_3:
    this[4].__r_.__value_.__s.__data_[4] = 1;
    std::string::operator=(this + 3, (const std::string *)((char *)a2 + 104));
    LODWORD(this[4].__r_.__value_.__l.__data_) = a3;
    xgboost::FeatureInteractionConstraintHost::Reset((xgboost::FeatureInteractionConstraintHost *)this);
    return;
  }
  this[4].__r_.__value_.__s.__data_[4] = 0;
}

void xgboost::FeatureInteractionConstraintHost::Reset(xgboost::FeatureInteractionConstraintHost *this)
{
  unsigned int **v2;
  char *v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;

  if (*((_BYTE *)this + 100))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    xgboost::ParseInteractionConstraint((uint64_t)this + 72, &v16);
    v2 = (unsigned int **)v16;
    v3 = v17;
    if (v16 != v17)
    {
      v4 = (unint64_t *)((char *)this + 16);
      v5 = *((_QWORD *)this + 1);
      do
      {
        v6 = *v2;
        v7 = v2[1];
        if (v5 >= *v4)
        {
          v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *(_QWORD *)this) >> 3);
          v9 = v8 + 1;
          if (v8 + 1 > 0x666666666666666)
            std::vector<void *>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(*v4 - *(_QWORD *)this) >> 3) > v9)
            v9 = 0x999999999999999ALL * ((uint64_t)(*v4 - *(_QWORD *)this) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v4 - *(_QWORD *)this) >> 3) >= 0x333333333333333)
            v10 = 0x666666666666666;
          else
            v10 = v9;
          v21 = (char *)this + 16;
          if (v10)
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>((uint64_t)this + 16, v10);
          else
            v11 = 0;
          *(_QWORD *)&v19 = v11;
          *((_QWORD *)&v19 + 1) = &v11[40 * v8];
          *(_QWORD *)&v20 = *((_QWORD *)&v19 + 1);
          *((_QWORD *)&v20 + 1) = &v11[40 * v10];
          std::unordered_set<unsigned int>::unordered_set<std::__wrap_iter<unsigned int const*>>(*((uint64_t *)&v19 + 1), v6, v7);
          *(_QWORD *)&v20 = v20 + 40;
          std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer((uint64_t *)this, &v19);
          v5 = *((_QWORD *)this + 1);
          std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer((uint64_t)&v19);
        }
        else
        {
          std::unordered_set<unsigned int>::unordered_set<std::__wrap_iter<unsigned int const*>>(v5, *v2, v2[1]);
          v5 += 40;
          *((_QWORD *)this + 1) = v5;
        }
        *((_QWORD *)this + 1) = v5;
        v2 += 3;
      }
      while (v2 != (unsigned int **)v3);
    }
    v13 = *((_QWORD *)this + 3);
    for (i = *((_QWORD *)this + 4);
          i != v13;
    *((_QWORD *)this + 4) = v13;
    v19 = 0u;
    v20 = 0u;
    LODWORD(v21) = 1065353216;
    std::vector<std::unordered_set<unsigned int>>::resize((uint64_t *)this + 3, 1uLL, (uint64_t)&v19);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v19);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(*((_QWORD *)this + 3), vcvtps_u32_f32((float)*((unsigned int *)this + 24) / *(float *)(*((_QWORD *)this + 3) + 32)));
    LODWORD(v19) = 0;
    if (*((_DWORD *)this + 24))
    {
      do
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*((_QWORD *)this + 3), (unsigned int *)&v19, &v19);
        LODWORD(v19) = v19 + 1;
      }
      while (v19 < *((_DWORD *)this + 24));
    }
    v15 = *((_QWORD *)this + 6);
    for (j = *((_QWORD *)this + 7);
          j != v15;
    *((_QWORD *)this + 7) = v15;
    v19 = 0u;
    v20 = 0u;
    LODWORD(v21) = 1065353216;
    std::vector<std::unordered_set<unsigned int>>::resize((uint64_t *)this + 6, 1uLL, (uint64_t)&v19);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v19);
    *(_QWORD *)&v19 = &v16;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  }
}

void sub_220EB8270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::unordered_set<unsigned int>>::resize(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  uint64_t *v27;

  v4 = result;
  v5 = *result;
  v6 = result[1];
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *result) >> 3);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      v21 = v5 + 40 * a2;
      while (v6 != v21)
      {
        v6 -= 40;
        result = (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v6);
      }
      v4[1] = v21;
    }
  }
  else
  {
    v10 = (uint64_t)(result + 2);
    v11 = v4[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v6) >> 3) >= v8)
    {
      v22 = v6 + 40 * v8;
      v23 = 40 * a2 - 40 * v7;
      do
      {
        result = (uint64_t *)std::unordered_set<unsigned int>::unordered_set(v6, a3);
        v6 += 40;
        v23 -= 40;
      }
      while (v23);
      v4[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= a2)
        v13 = a2;
      if (v12 >= 0x333333333333333)
        v14 = 0x666666666666666;
      else
        v14 = v13;
      v27 = v4 + 2;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>(v10, v14);
      v16 = (uint64_t)&v15[40 * v7];
      v24[0] = v15;
      v24[1] = v16;
      v25 = v16;
      v26 = &v15[40 * v17];
      v18 = 5 * a2;
      v19 = &v15[40 * a2];
      v20 = 8 * v18 - 40 * v7;
      do
      {
        std::unordered_set<unsigned int>::unordered_set(v16, a3);
        v16 += 40;
        v20 -= 40;
      }
      while (v20);
      v25 = (uint64_t)v19;
      std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(v4, v24);
      return (uint64_t *)std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer((uint64_t)v24);
    }
  }
  return result;
}

void sub_220EB8528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::FeatureInteractionConstraintHost::SplitImpl(xgboost::FeatureInteractionConstraintHost *this, int a2, unsigned int a3, int a4, int a5)
{
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t **i;
  _QWORD *j;
  _QWORD *v32;
  uint64_t **v33;
  uint64_t *k;
  std::string *Entry;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t **v46;
  int v47;
  unsigned int v48[2];
  int v49;
  __int128 v50;
  __int128 v51;
  char *v52;

  v48[0] = a3;
  if (a4 <= a5)
    v8 = a5;
  else
    v8 = a4;
  v9 = (uint64_t *)((char *)this + 48);
  std::unordered_set<unsigned int>::unordered_set((uint64_t)v45, *((_QWORD *)this + 6) + 40 * a2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v45, v48, v48);
  v10 = v8 + 1;
  v11 = v8 + 1;
  v13 = *((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 7);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v13) >> 3);
  v15 = v8 + 1 - v14;
  if (v8 + 1 <= v14)
  {
    if (v10 < v14)
    {
      v23 = v13 + 40 * v11;
      while (v12 != v23)
        v12 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v12 - 40);
      *((_QWORD *)this + 7) = v23;
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 8);
    if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v12) >> 3) >= v15)
    {
      v24 = v12 + 40 * v15;
      do
      {
        *(_OWORD *)v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_DWORD *)(v12 + 32) = 1065353216;
        v12 += 40;
      }
      while (v12 != v24);
      *((_QWORD *)this + 7) = v24;
    }
    else
    {
      if (v8 <= -2)
        std::vector<void *>::__throw_length_error[abi:ne180100]();
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v10)
        v18 = v10;
      if (v17 >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v18;
      v52 = (char *)this + 64;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>((uint64_t)this + 64, v19);
      v21 = &v20[40 * v14];
      *(_QWORD *)&v50 = v20;
      *((_QWORD *)&v50 + 1) = v21;
      *((_QWORD *)&v51 + 1) = &v20[40 * v22];
      do
      {
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v21 + 1) = 0uLL;
        *((_DWORD *)v21 + 8) = 1065353216;
        v21 += 40;
      }
      while (v21 != &v20[40 * v11]);
      *(_QWORD *)&v51 = &v20[40 * v11];
      std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(v9, &v50);
      std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer((uint64_t)&v50);
    }
  }
  v25 = *v9;
  v26 = *v9 + 40 * a4;
  if ((_BYTE *)v26 != v45)
  {
    *(_DWORD *)(v26 + 32) = v47;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((_QWORD *)v26, v46);
    v25 = *v9;
  }
  v27 = v25 + 40 * a5;
  if ((_BYTE *)v27 != v45)
  {
    *(_DWORD *)(v27 + 32) = v47;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((_QWORD *)v27, v46);
  }
  v48[1] = 0;
  v49 = v10;
  if (!v10)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v50);
    if ((_QWORD)v50)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/constraints.cc");
      v37 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v49);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Check failed: ", 14);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"newsize != 0", 12);
      v40 = *(char *)(v50 + 23);
      v41 = v40 >= 0 ? v50 : *(_QWORD *)v50;
      v42 = v40 >= 0 ? *(unsigned __int8 *)(v50 + 23) : *(_QWORD *)(v50 + 8);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v49);
      v44 = v50;
      *(_QWORD *)&v50 = 0;
      if (v44)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v50, v44);
    }
  }
  v28 = (_QWORD *)((char *)this + 24);
  v50 = 0u;
  v51 = 0u;
  LODWORD(v52) = 1065353216;
  std::vector<std::unordered_set<unsigned int>>::resize((uint64_t *)this + 3, v10, (uint64_t)&v50);
  v29 = a5;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v50);
  for (i = v46; i; i = (uint64_t **)*i)
  {
    LODWORD(v50) = *((_DWORD *)i + 4);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * a4, (unsigned int *)&v50, &v50);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * v29, (unsigned int *)&v50, &v50);
  }
  v32 = *(_QWORD **)this;
  for (j = (_QWORD *)*((_QWORD *)this + 1); v32 != j; v32 += 5)
  {
    v33 = v46;
    if (v46)
    {
      while (1)
      {
        LODWORD(v50) = *((_DWORD *)v33 + 4);
        if (!std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(v32, (unsigned int *)&v50))break;
        v33 = (uint64_t **)*v33;
        if (!v33)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_34:
      for (k = (uint64_t *)v32[2]; k; k = (uint64_t *)*k)
      {
        LODWORD(v50) = *((_DWORD *)k + 4);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * a4, (unsigned int *)&v50, &v50);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*v28 + 40 * v29, (unsigned int *)&v50, &v50);
      }
    }
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
}

void sub_220EB88FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned int>::unordered_set<std::__wrap_iter<unsigned int const*>>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_220EB89C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::unordered_set<unsigned int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 32) = 0;
      v9 = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v4 + v5 - 24) = v9;
      v10 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 16) = v10;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v9 + 8);
        v12 = *(_QWORD *)(v6 - 32);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v11 %= v12;
        }
        else
        {
          v11 &= v12 - 1;
        }
        *(_QWORD *)(v8 + 8 * v11) = v4 + v5 - 24;
        *(_QWORD *)(v2 + v5 - 24) = 0;
        *(_QWORD *)(v2 + v5 - 16) = 0;
      }
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v13 = *result;
  *result = v4;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_set<unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *inserted;
  unint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v4 = a1[1];
  if (!v4)
    goto LABEL_9;
  for (i = 0; i != v4; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v7 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v6 + 4) = v7;
      v8 = (uint64_t *)*v6;
      v6[1] = v7;
      inserted = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare((uint64_t)a1, v7, (_DWORD *)v6 + 4);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(a1, v6, inserted);
      a2 = (uint64_t **)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_9;
    }
    do
    {
      v13 = (uint64_t *)*v6;
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      v10 = *((unsigned int *)a2 + 4);
      v11 = operator new(0x18uLL);
      v11[4] = v10;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = v10;
      v12 = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare((uint64_t)a1, v10, v11 + 4);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(a1, v11, v12);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_220EB8BE4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_220EB8C04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = *v16; *v16; i = *v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = (uint64_t **)i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = (uint64_t **)i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t xgboost::predictor::__dmlc_registry_file_tag_cpu_predictor__(xgboost::predictor *this)
{
  return 0;
}

float xgboost::predictor::PredValue(unint64_t *a1, uint64_t *a2, _QWORD *a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int Leaf;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v35[6];

  v12 = *a1;
  if (*a1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *a1;
    while (v15 < v16)
    {
      v17 = a1[1];
      v18 = *(unsigned int *)(v17 + v13);
      if (v18 < (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
      {
        *(_DWORD *)(*(_QWORD *)a5 + 4 * v18) = *(_DWORD *)(v17 + v13 + 4);
        ++v14;
        v16 = *a1;
      }
      if (v15 == v16)
        break;
      ++v15;
      v13 += 8;
      if (v12 == v15)
        goto LABEL_10;
    }
LABEL_27:
    std::terminate();
  }
  v16 = 0;
  v14 = 0;
LABEL_10:
  *(_BYTE *)(a5 + 24) = v14 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2;
  v19 = 0.0;
  if (a6 < a7)
  {
    v20 = a7;
    v21 = a6;
    do
    {
      if (*(_DWORD *)(*a3 + 4 * v21) == a4)
      {
        v22 = *a2;
        v23 = *(uint64_t **)(*a2 + 8 * v21);
        v24 = v23[32];
        v25 = v23[33];
        v26 = v23[29];
        v35[0] = v23[30] - v26;
        v35[1] = v26;
        v27 = v23[35];
        v35[4] = (v23[36] - v27) >> 4;
        v35[5] = v27;
        v28 = v25 - v24;
        v35[2] = v28 >> 2;
        v35[3] = v24;
        if (v28)
        {
          Leaf = xgboost::predictor::GetLeafIndex<true,true>((uint64_t)v23, a5, v35);
          v22 = *a2;
        }
        else
        {
          Leaf = xgboost::predictor::GetLeafIndex<true,false>(v23[20], *(_QWORD *)a5);
        }
        v19 = v19 + *(float *)(*(_QWORD *)(*(_QWORD *)(v22 + 8 * v21) + 160) + 20 * Leaf + 16);
      }
      ++v21;
    }
    while (v20 != v21);
    v16 = *a1;
  }
  if (v16)
  {
    v30 = 0;
    v31 = 0;
    v32 = v16;
    while (v31 < v32)
    {
      v33 = *(unsigned int *)(a1[1] + v30);
      if (v33 < (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
      {
        *(_DWORD *)(*(_QWORD *)a5 + 4 * v33) = -1;
        v32 = *a1;
      }
      if (v31 == v32)
        break;
      ++v31;
      v30 += 8;
      if (v16 == v31)
        goto LABEL_26;
    }
    goto LABEL_27;
  }
LABEL_26:
  *(_BYTE *)(a5 + 24) = 1;
  return v19;
}

uint64_t xgboost::predictor::GetLeafIndex<true,true>(uint64_t a1, uint64_t Next, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  float v9;

  v3 = *(_QWORD *)(a1 + 160);
  if (*(_DWORD *)(v3 + 4) == -1)
    return 0;
  v5 = (_QWORD *)Next;
  v7 = 0;
  LODWORD(Next) = 0;
  do
  {
    v8 = v3 + 20 * v7;
    v9 = *(float *)(*v5 + 4 * (*(_DWORD *)(v8 + 12) & 0x7FFFFFFF));
    Next = xgboost::predictor::GetNextNode<true,true>(v8, Next, LODWORD(v9) == -1, a3, v9);
    v7 = (int)Next;
    v3 = *(_QWORD *)(a1 + 160);
  }
  while (*(_DWORD *)(v3 + 20 * (int)Next + 4) != -1);
  return Next;
}

uint64_t xgboost::predictor::GetLeafIndex<true,false>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  float v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1)
    return 0;
  v3 = 0;
  do
  {
    v4 = *(_DWORD *)(a1 + 20 * v3 + 12);
    v5 = *(float *)(a2 + 4 * (v4 & 0x7FFFFFFF));
    if (v5 == NAN)
    {
      v7 = *(_DWORD *)(a1 + 20 * v3 + 8);
      if (v4 >= 0)
        v6 = v7;
      else
        v6 = v2;
    }
    else if (*(float *)(a1 + 20 * v3 + 16) > v5)
    {
      v6 = v2;
    }
    else
    {
      v6 = v2 + 1;
    }
    v3 = (int)v6;
    v2 = *(_DWORD *)(a1 + 20 * (int)v6 + 4);
  }
  while (v2 != -1);
  return v6;
}

uint64_t xgboost::predictor::PredictByAllTrees(uint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  float v24;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  unint64_t v48;
  uint64_t v49;
  unint64_t v50[2];

  v38 = result;
  if (a2 < a3)
  {
    do
    {
      v9 = *(int *)(*(_QWORD *)(v38 + 224) + 4 * a2);
      v10 = *(uint64_t **)(*(_QWORD *)(v38 + 176) + 8 * a2);
      v11 = v10[29];
      v45 = v10[30] - v11;
      v46 = v11;
      v13 = v10[32];
      v12 = v10[33];
      v14 = v10[35];
      v48 = (v10[36] - v14) >> 4;
      v49 = v14;
      v15 = v12 - v13;
      v47[0] = v15 >> 2;
      v47[1] = v13;
      v39 = a2;
      if (v15)
      {
        if (a9)
        {
          v16 = 0;
          while (1)
          {
            v17 = *a7 + 32 * (v16 + a8);
            if (!*(_BYTE *)(v17 + 24))
              break;
            result = xgboost::predictor::GetLeafIndex<true,true>((uint64_t)v10, *a7 + 32 * (v16 + a8), &v45);
            v18 = v10[20];
LABEL_34:
            *(float *)(*a4 + 4 * (v9 + (v16 + a5) * a6)) = *(float *)(v18 + 20 * (int)result + 16)
                                                         + *(float *)(*a4 + 4 * (v9 + (v16 + a5) * a6));
            if (++v16 == a9)
              goto LABEL_49;
          }
          v18 = v10[20];
          v19 = *(_DWORD *)(v18 + 4);
          if (v19 == -1)
          {
            result = 0;
            goto LABEL_34;
          }
          v20 = 0;
          LODWORD(result) = 0;
          while (2)
          {
            v21 = v18 + 20 * v20;
            v23 = *(_DWORD *)(v21 + 12);
            v22 = (_DWORD *)(v21 + 12);
            v24 = *(float *)(*(_QWORD *)v17 + 4 * (v23 & 0x7FFFFFFF));
            if (!v45)
              goto LABEL_25;
            if (v45 <= result)
              goto LABEL_51;
            if (*(_BYTE *)(v46 + result) == 1)
            {
              if (v48 <= (int)result)
                goto LABEL_51;
              xgboost::common::Span<float,18446744073709551615ul>::subspan(v47, *(_QWORD *)(v49 + 16 * (int)result), *(_QWORD *)(v49 + 16 * (int)result + 8), v50);
              if (v24 >= 0.0 && v24 < 16777000.0 && v24 < (float)(32 * v50[0]))
              {
                if (v50[0] > (unint64_t)v24 >> 5)
                {
                  v27 = (unint64_t)(int)v24 >> 5;
                  if (v27 >= v50[0])
LABEL_51:
                    std::terminate();
                  if (((*(_DWORD *)(v50[1] + 4 * v27) >> ~(int)v24) & 1) != 0)
                    goto LABEL_24;
                }
LABEL_29:
                v28 = (unsigned int *)(v18 + 20 * v20 + 4);
              }
              else
              {
                if ((*v22 & 0x80000000) != 0)
                  goto LABEL_29;
LABEL_24:
                v28 = (unsigned int *)(v18 + 20 * v20 + 8);
              }
              result = *v28;
              v18 = v10[20];
            }
            else
            {
LABEL_25:
              if (*(float *)(v18 + 20 * v20 + 16) > v24)
                result = v19;
              else
                result = v19 + 1;
            }
            v20 = (int)result;
            v19 = *(_DWORD *)(v18 + 20 * (int)result + 4);
            if (v19 == -1)
              goto LABEL_34;
            continue;
          }
        }
      }
      else if (a9)
      {
        v29 = 0;
        v30 = *a7;
        v31 = *a4;
        do
        {
          v32 = v30 + 32 * (v29 + a8);
          v33 = *(_QWORD *)v32;
          v34 = v10[20];
          if (*(_BYTE *)(v32 + 24))
          {
            result = xgboost::predictor::GetLeafIndex<true,false>(v10[20], v33);
          }
          else
          {
            v35 = *(_DWORD *)(v34 + 4);
            if (v35 == -1)
            {
              result = 0;
            }
            else
            {
              v36 = 0;
              do
              {
                if (*(float *)(v34 + 20 * v36 + 16) > *(float *)(v33
                                                                + 4 * (*(_DWORD *)(v34 + 20 * v36 + 12) & 0x7FFFFFFF)))
                  result = v35;
                else
                  result = v35 + 1;
                v36 = (int)result;
                v35 = *(_DWORD *)(v34 + 20 * (int)result + 4);
              }
              while (v35 != -1);
            }
          }
          *(float *)(v31 + 4 * (v9 + (v29 + a5) * a6)) = *(float *)(v34 + 20 * (int)result + 16)
                                                       + *(float *)(v31 + 4 * (v9 + (v29 + a5) * a6));
          ++v29;
        }
        while (v29 != a9);
      }
LABEL_49:
      a2 = v39 + 1;
    }
    while (v39 + 1 != a3);
  }
  return result;
}

void xgboost::predictor::FillNodeMeanValues(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  float v10;
  float v11;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 160);
  v6 = v5 + 20 * a2;
  v8 = *(_DWORD *)(v6 + 4);
  v7 = (int *)(v6 + 4);
  if (v8 == -1)
  {
    v11 = *(float *)(v5 + 20 * a2 + 16);
  }
  else
  {
    v10 = ((float (*)(void))xgboost::predictor::FillNodeMeanValues)()
        * *(float *)(*(_QWORD *)(a1 + 208) + 16 * *v7 + 4);
    v11 = (float)(v10
                + (float)(xgboost::predictor::FillNodeMeanValues(a1, *(unsigned int *)(v5 + 20 * (int)v4 + 8), a3)
                        * *(float *)(*(_QWORD *)(a1 + 208) + 16 * *(int *)(v5 + 20 * (int)v4 + 8) + 4)))
        / *(float *)(*(_QWORD *)(a1 + 208) + 16 * v4 + 4);
  }
  *(float *)(*a3 + 4 * v4) = v11;
}

void xgboost::predictor::FillNodeMeanValues(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = *(int *)(a1 + 12);
  if (v3 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    std::vector<float>::resize((uint64_t)a2, v3);
    xgboost::predictor::FillNodeMeanValues(a1, 0, a2);
  }
}

uint64_t xgboost::predictor::GetNextNode<true,true>(uint64_t a1, unsigned int a2, int a3, _QWORD *a4, float a5)
{
  unsigned int *v6;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12[2];

  if (a3)
  {
    if (*(int *)(a1 + 12) >= 0)
      v6 = (unsigned int *)(a1 + 8);
    else
      v6 = (unsigned int *)(a1 + 4);
    return *v6;
  }
  if (*a4)
  {
    if (*a4 <= (unint64_t)a2)
      goto LABEL_20;
    if (*(_BYTE *)(a4[1] + a2) == 1)
    {
      if (a4[4] > (unint64_t)(int)a2)
      {
        v9 = (unint64_t *)(a4[5] + 16 * (int)a2);
        xgboost::common::Span<float,18446744073709551615ul>::subspan(a4 + 2, *v9, v9[1], v12);
        if (a5 < 0.0 || a5 >= 16777000.0 || (float)(32 * v12[0]) <= a5)
        {
          if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0)
            goto LABEL_16;
          goto LABEL_22;
        }
        if (v12[0] <= (unint64_t)a5 >> 5)
          goto LABEL_22;
        v10 = (unint64_t)(int)a5 >> 5;
        if (v10 < v12[0])
        {
          if (((*(_DWORD *)(v12[1] + 4 * v10) >> ~(int)a5) & 1) != 0)
          {
LABEL_16:
            v6 = (unsigned int *)(a1 + 8);
            return *v6;
          }
LABEL_22:
          v6 = (unsigned int *)(a1 + 4);
          return *v6;
        }
      }
LABEL_20:
      std::terminate();
    }
  }
  v11 = *(_DWORD *)(a1 + 4);
  if (*(float *)(a1 + 16) > a5)
    return v11;
  else
    return v11 + 1;
}

void std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::~__func()
{
  JUMPOUT(0x227667068);
}

_QWORD *std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24E6BA7E0;
  return result;
}

void std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E6BA7E0;
}

_QWORD *std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *a2;
  result = (_QWORD *)operator new();
  *result = &off_24E6BA860;
  result[1] = v2;
  return result;
}

uint64_t std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<xgboost::predictor::$_0,std::allocator<xgboost::predictor::$_0>,xgboost::Predictor * ()(xgboost::GenericParameter const*)>::target_type()
{
}

void xgboost::predictor::CPUPredictor::~CPUPredictor(xgboost::predictor::CPUPredictor *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::predictor::CPUPredictor::PredictBatch(xgboost::predictor::CPUPredictor *this, xgboost::DMatrix *a2, uint64_t **a3, const xgboost::gbm::GBTreeModel *a4, int a5, int a6)
{
  xgboost::DMatrix *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t **v19;
  std::string *Entry;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *ptr;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  xgboost::DMatrix *v79;
  _QWORD v80[5];
  _QWORD v81[5];
  void *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89[3];
  std::exception_ptr v90;
  std::exception_ptr v91;
  std::mutex v92;
  uint64_t v93;

  v8 = a2;
  v93 = *MEMORY[0x24BDAC8D0];
  if (a6)
    v9 = a6;
  else
    v9 = (*((_QWORD *)a4 + 23) - *((_QWORD *)a4 + 22)) >> 3;
  v10 = *a3;
  v11 = *(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))a2)(a2);
  v12 = (**(uint64_t (***)(xgboost::DMatrix *))v8)(v8);
  if ((unint64_t)(*(_QWORD *)(v12 + 8) * v11) <= 1)
    v13 = 1;
  else
    v13 = *(_QWORD *)(v12 + 8) * v11;
  v14 = (double)*(unint64_t *)((**(uint64_t (***)(xgboost::DMatrix *))v8)(v8) + 16) / (double)v13;
  memset(v89, 0, sizeof(v89));
  if (v14 <= 0.5)
    v15 = 1;
  else
    v15 = 64;
  xgboost::predictor::CPUPredictor::InitThreadTemp(v15, v89);
  (*(void (**)(uint64_t *__return_ptr, xgboost::DMatrix *))(*(_QWORD *)v8 + 72))(&v87, v8);
  v85 = v87;
  v86 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v83, 0);
  v18 = v9;
  v79 = v8;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v85) & 1) != 0)
  {
    v19 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v85);
    v90.__ptr_ = (void *)((v10[1] - *v10) >> 2);
    v82 = (void *)(*(_QWORD *)(**(uint64_t (***)(xgboost::DMatrix *))v8)(v8)
                 * *(unsigned int *)(*((_QWORD *)a4 + 1) + 8));
    if (v90.__ptr_ != v82)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long long>((uint64_t *)&v91);
      if (v91.__ptr_)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"out_preds->size() == p_fmat->Info().num_row_ * model.learner_model_param->num_output_group", 90);
        v24 = *((char *)v91.__ptr_ + 23);
        v25 = v24 >= 0 ? v91.__ptr_ : *(void **)v91.__ptr_;
        v26 = v24 >= 0 ? *((unsigned __int8 *)v91.__ptr_ + 23) : *((_QWORD *)v91.__ptr_ + 1);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v90);
        ptr = v91.__ptr_;
        v91.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v91, (uint64_t)ptr);
      }
    }
    if (v14 <= 0.5)
    {
      v51 = **v19;
      v52 = ((*v19)[1] - v51) >> 3;
      v53 = *v19[1];
      v54 = (v19[1][1] - v53) >> 3;
      v80[0] = v19[2];
      v80[1] = v52;
      v80[2] = v51;
      v80[3] = v54;
      v80[4] = v53;
      v55 = *(int *)(*((_QWORD *)a4 + 1) + 8);
      LODWORD(v90.__ptr_) = *((_DWORD *)a4 + 11);
      LODWORD(v82) = 0;
      if (LODWORD(v90.__ptr_))
      {
        dmlc::LogCheckFormat<int,int>((uint64_t *)&v91);
        if (v91.__ptr_)
        {
          v56 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
          dmlc::LogMessageFatal::Entry::Init(v56, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
          v57 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: ", 14);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"model.param.size_leaf_vector == 0", 33);
          v60 = *((char *)v91.__ptr_ + 23);
          v61 = v60 >= 0 ? v91.__ptr_ : *(void **)v91.__ptr_;
          v62 = v60 >= 0 ? *((unsigned __int8 *)v91.__ptr_ + 23) : *((_QWORD *)v91.__ptr_ + 1);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v61, v62);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v90);
          v65 = v91.__ptr_;
          v91.__ptr_ = 0;
          if (v65)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v91, (uint64_t)v65);
        }
      }
      v66 = v52 - 1;
      if (!v52)
        v66 = 0;
      v67 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 4);
      v91.__ptr_ = 0;
      v92.__m_.__sig = 850045863;
      memset(v92.__m_.__opaque, 0, sizeof(v92.__m_.__opaque));
      v68 = v66;
      if (v66)
      {
        v69 = 0;
        do
        {
          xgboost::predictor::FVecFill<xgboost::predictor::SparsePageView<8ul>>((void *)1, v69, v67, (uint64_t)v80, v89);
          xgboost::predictor::PredictByAllTrees((uint64_t)a4, a5, v18, v10, v69 + v80[0], v55, v89, 0, 1);
          xgboost::predictor::FVecDrop<xgboost::predictor::SparsePageView<8ul>>(1, v69++, (uint64_t)v80, v89);
        }
        while (v68 != v69);
      }
      dmlc::OMPException::Rethrow(&v91);
      std::mutex::~mutex(&v92);
      std::exception_ptr::~exception_ptr(&v91);
    }
    else
    {
      v29 = **v19;
      v30 = ((*v19)[1] - v29) >> 3;
      v31 = *v19[1];
      v32 = (v19[1][1] - v31) >> 3;
      v81[0] = v19[2];
      v81[1] = v30;
      v81[2] = v29;
      v81[3] = v32;
      v81[4] = v31;
      v33 = *(int *)(*((_QWORD *)a4 + 1) + 8);
      LODWORD(v90.__ptr_) = *((_DWORD *)a4 + 11);
      LODWORD(v82) = 0;
      if (LODWORD(v90.__ptr_))
      {
        dmlc::LogCheckFormat<int,int>((uint64_t *)&v91);
        if (v91.__ptr_)
        {
          v34 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
          dmlc::LogMessageFatal::Entry::Init(v34, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
          v35 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v90);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Check failed: ", 14);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"model.param.size_leaf_vector == 0", 33);
          v38 = *((char *)v91.__ptr_ + 23);
          v39 = v38 >= 0 ? v91.__ptr_ : *(void **)v91.__ptr_;
          v40 = v38 >= 0 ? *((unsigned __int8 *)v91.__ptr_ + 23) : *((_QWORD *)v91.__ptr_ + 1);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v90);
          v43 = v91.__ptr_;
          v91.__ptr_ = 0;
          if (v43)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v91, (uint64_t)v43);
        }
      }
      LODWORD(v44) = v30 - 1;
      if (!v30)
        LODWORD(v44) = 0;
      v45 = *(_DWORD *)(*((_QWORD *)a4 + 1) + 4);
      v46 = vcvtpd_u64_f64((double)v44 * 0.015625) | 0x3F90000000000000;
      v91.__ptr_ = 0;
      v92.__m_.__sig = 850045863;
      memset(v92.__m_.__opaque, 0, sizeof(v92.__m_.__opaque));
      if ((_DWORD)v46)
      {
        v47 = 0;
        v44 = v44;
        v48 = v46 << 6;
        do
        {
          v49 = v44 - 64;
          if (v44 >= 0x40)
            v50 = 64;
          else
            v50 = v44;
          xgboost::predictor::FVecFill<xgboost::predictor::SparsePageView<8ul>>((void *)v50, v47, v45, (uint64_t)v81, v89);
          xgboost::predictor::PredictByAllTrees((uint64_t)a4, a5, v18, v10, v47 + v81[0], v33, v89, 0, v50);
          xgboost::predictor::FVecDrop<xgboost::predictor::SparsePageView<8ul>>(v50, v47, (uint64_t)v81, v89);
          v47 += 64;
          v44 = v49;
        }
        while (v48 != v47);
      }
      dmlc::OMPException::Rethrow(&v91);
      std::mutex::~mutex(&v92);
      std::exception_ptr::~exception_ptr(&v91);
      v8 = v79;
    }
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v85);
  }
  v70 = v84;
  if (v84)
  {
    v71 = (unint64_t *)&v84->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v86;
  if (v86)
  {
    v74 = (unint64_t *)&v86->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v88;
  if (v88)
  {
    v77 = (unint64_t *)&v88->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v91.__ptr_ = v89;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
}

void sub_220EBA13C()
{
  __cxa_end_catch();
  JUMPOUT(0x220EBA19CLL);
}

void sub_220EBA148()
{
  __cxa_end_catch();
  JUMPOUT(0x220EBA19CLL);
}

void sub_220EBA15C()
{
  __cxa_end_catch();
  JUMPOUT(0x220EBA19CLL);
}

void sub_220EBA168()
{
  __cxa_end_catch();
  JUMPOUT(0x220EBA19CLL);
}

void sub_220EBA178()
{
  JUMPOUT(0x220EBA260);
}

void sub_220EBA180()
{
  JUMPOUT(0x220EBA2D0);
}

void sub_220EBA198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char *a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,char a30)
{
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  std::mutex::~mutex(a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v30 - 184));
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  v34 = a27;
  if (a27)
  {
    v35 = (unint64_t *)&a27->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = a29;
  if (a29)
  {
    v38 = (unint64_t *)&a29->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  a26 = &a30;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void sub_220EBA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void **a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  v32 = *(_QWORD *)(v30 - 184);
  *(_QWORD *)(v30 - 184) = 0;
  if (v32)
    std::default_delete<std::string>::operator()[abi:ne180100](v30 - 184, v32);
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  v35 = a27;
  if (a27)
  {
    v36 = (unint64_t *)&a27->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = a29;
  if (a29)
  {
    v39 = (unint64_t *)&a29->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  a26 = (void **)&a30;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Unwind_Resume(a1);
}

void sub_220EBA214(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220EBA2E0);
}

BOOL xgboost::predictor::CPUPredictor::InplacePredict(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7, float a8)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t (***v17)(_QWORD, void *);
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  size_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void *ptr;
  int v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t (***v58)(_QWORD, void *);
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::string *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  size_t v68;
  std::string *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  size_t v75;
  _QWORD *v76;
  _QWORD *v77;
  size_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  std::string *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::mutex *v98;
  std::string *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  int v103;
  void *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  std::mutex *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t i;
  _QWORD *v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  unint64_t v122;
  uint64_t j;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t (***v136)(_QWORD, void *);
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  int v145;
  std::string *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  void *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  std::string *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  int v164;
  void *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  _BOOL8 result;
  std::__shared_weak_count *v189;
  uint64_t (***v190)(_QWORD, void *);
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  void *v198;
  int v199;
  std::string *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  int v204;
  void *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  std::mutex *v213;
  std::string *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  void *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  void *v223;
  uint64_t v224;
  unint64_t v225;
  std::mutex *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t k;
  _QWORD *v231;
  void **v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _DWORD *v236;
  unint64_t v237;
  uint64_t m;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  unsigned int *v242;
  uint64_t v243;
  unsigned int v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  uint64_t v248;
  BOOL v249;
  void *v250;
  uint64_t *v251;
  uint64_t v252;
  std::string *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  int v257;
  void *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  void *v262;
  uint64_t v263;
  unsigned int v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  unsigned int *v277;
  uint64_t v278;
  unsigned int v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  std::__shared_weak_count *v292;
  uint64_t *v293;
  std::__shared_weak_count *v294;
  std::mutex *v295;
  std::mutex *v296;
  std::__shared_weak_count *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count *v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  float v303;
  uint64_t v304;
  void *v305;
  void *__p;
  void *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  _BYTE *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  std::exception_ptr v319;
  std::mutex v320[3];
  uint64_t v321;

  v321 = *MEMORY[0x24BDAC8D0];
  if (*a2)
    v15 = *(_QWORD *)(*a2 + 16);
  else
    v15 = MEMORY[0x24BEDB7C8];
  {
    v17 = *(uint64_t (****)(_QWORD, void *))a3;
    v16 = *(std::__shared_weak_count **)(a3 + 8);
    v301 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = *a2;
    if (!*a2)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: type_ != nullptr", 30);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"The any container is empty", 26);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" requested=", 11);
      v27 = strlen((const char *)(0x8000000220F62F8FLL & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, 0x8000000220F62F8FLL & 0x7FFFFFFFFFFFFFFFLL, v27);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v319);
      v20 = *a2;
    }
    {
      v28 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      dmlc::LogMessageFatal::Entry::Init(v28, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      v29 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)": ", 2);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"The stored type mismatch", 24);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" stored=", 8);
      v34 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL, v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" requested=", 11);
      v37 = strlen((const char *)(0x8000000220F62F8FLL & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, 0x8000000220F62F8FLL & 0x7FFFFFFFFFFFFFFFLL, v37);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v319);
    }
    v38 = a2[1];
    v39 = (std::__shared_weak_count *)a2[2];
    v313 = v38;
    v314 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v302 = *(_QWORD *)(v38 + 48);
    v42 = *(_QWORD *)(a4 + 8);
    v44 = *(_DWORD *)(v42 + 4);
    ptr = (void *)(v42 + 4);
    if (v302 != v44)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v45 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        dmlc::LogMessageFatal::Entry::Init(v45, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v46 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: ", 14);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"m->NumColumns() == model.learner_model_param->num_feature", 57);
        v49 = *((char *)v319.__ptr_ + 23);
        v50 = v49 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v51 = v49 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Number of columns in data must equal to trained model.", 54);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v302);
        ptr = v319.__ptr_;
        v319.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)ptr);
      }
    }
    if (v17)
    {
      v54 = *(_QWORD *)(v38 + 40);
      *(_QWORD *)(**v17)(v17, ptr) = v54;
      v55 = ((uint64_t (*)(uint64_t (***)(_QWORD, void *)))**v17)(v17);
      xgboost::Predictor::InitOutPredictions(a1, v55, a5, a4);
    }
    else
    {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v319);
      v319.__ptr_ = *(void **)(v38 + 40);
      xgboost::Predictor::InitOutPredictions(a1, (uint64_t)&v319, a5, a4);
      xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&v319);
    }
    std::vector<xgboost::Entry>::vector(&v311, 8 * *(_QWORD *)(v38 + 48));
    v291 = (uint64_t *)*a5;
    v308 = 0;
    v309 = 0;
    v310 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(64, (uint64_t *)&v308);
    v302 = v38;
    v303 = a8;
    v304 = (v312 - (_BYTE *)v311) >> 3;
    v305 = v311;
    v319.__ptr_ = 0;
    std::vector<unsigned long>::vector(&__p, 1uLL, &v319);
    v289 = *(int *)(*(_QWORD *)(a4 + 8) + 8);
    LODWORD(v317) = *(_DWORD *)(a4 + 44);
    LODWORD(v315) = 0;
    v283 = v39;
    if ((_DWORD)v317)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v99 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        dmlc::LogMessageFatal::Entry::Init(v99, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v100 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: ", 14);
        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"model.param.size_leaf_vector == 0", 33);
        v103 = *((char *)v319.__ptr_ + 23);
        v104 = v103 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v105 = v103 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v104, v105);
        v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v317);
        v108 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v108)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v108);
      }
    }
    v109 = *(_QWORD *)(v302 + 40);
    v110 = *(int *)(*(_QWORD *)(a4 + 8) + 4);
    LODWORD(v98) = vcvtpd_u64_f64((double)v109 * 0.015625);
    v319.__ptr_ = 0;
    v320[0].__m_.__sig = 850045863;
    *(_OWORD *)v320[0].__m_.__opaque = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[32] = 0u;
    *(_QWORD *)&v320[0].__m_.__opaque[48] = 0;
    v295 = v98;
    if ((_DWORD)v98)
    {
      v111 = 0;
      v285 = a6;
      v287 = v109;
      v112 = a7;
      do
      {
        v113 = (_QWORD)v111 << 6;
        if ((unint64_t)(v287 - ((_QWORD)v111 << 6)) >= 0x40)
          v114 = 64;
        else
          v114 = v287 - ((_QWORD)v111 << 6);
        if (v114)
        {
          for (i = 0; i != v114; ++i)
          {
            v116 = v308;
            v117 = (void **)&v308[4 * i];
            if (v117[1] == *v117)
            {
              std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)&v308[4 * i], v110);
              v118 = (_BYTE *)v117[1] - (_BYTE *)*v117;
              if (v118 >= 1)
                memset(*v117, 255, 4 * (((unint64_t)v118 >> 2) - ((unint64_t)v118 > 3)) + 4);
              LOBYTE(v116[4 * i + 3]) = 1;
            }
            xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](&v315, (float *)&v302, i + v113);
            v119 = v315;
            if (v315)
            {
              v120 = 0;
              v121 = (_DWORD *)(v316 + 4);
              do
              {
                v122 = *(v121 - 1);
                if (v122 < ((_BYTE *)v117[1] - (_BYTE *)*v117) >> 2)
                {
                  *((_DWORD *)*v117 + v122) = *v121;
                  ++v120;
                }
                v121 += 2;
                --v119;
              }
              while (v119);
            }
            else
            {
              v120 = 0;
            }
            LOBYTE(v116[4 * i + 3]) = v120 != ((_BYTE *)v117[1] - (_BYTE *)*v117) >> 2;
          }
        }
        xgboost::predictor::PredictByAllTrees(a4, v285, v112, v291, (_QWORD)v111 << 6, v289, (uint64_t *)&v308, 0, v114);
        if (v114)
        {
          for (j = 0; j != v114; ++j)
          {
            v124 = v308;
            xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](&v317, (float *)&v302, j + v113);
            v125 = v317;
            if (v317)
            {
              v126 = &v124[4 * j];
              v127 = v318;
              do
              {
                v129 = *v127;
                v127 += 2;
                v128 = v129;
                if (v129 < (unint64_t)((uint64_t)(v126[1] - *v126) >> 2))
                  *(_DWORD *)(*v126 + 4 * v128) = -1;
                --v125;
              }
              while (v125);
            }
            LOBYTE(v124[4 * j + 3]) = 1;
          }
        }
        v111 = (std::mutex *)((char *)v111 + 1);
      }
      while (v111 != v295);
    }
    dmlc::OMPException::Rethrow(&v319);
    std::mutex::~mutex(v320);
    std::exception_ptr::~exception_ptr(&v319);
    if (__p)
    {
      v307 = __p;
      operator delete(__p);
    }
    v319.__ptr_ = &v308;
    std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    if (v311)
    {
      v312 = v311;
      operator delete(v311);
    }
    if (v283)
    {
      v130 = (unint64_t *)&v283->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
    }
    v132 = v301;
    if (!v301)
      return 1;
    v133 = (unint64_t *)&v301->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
LABEL_292:
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
    return 1;
  }
  if (*a2)
    v56 = *(_QWORD *)(*a2 + 16);
  else
    v56 = MEMORY[0x24BEDB7C8];
  {
    v58 = *(uint64_t (****)(_QWORD, void *))a3;
    v57 = *(std::__shared_weak_count **)(a3 + 8);
    v300 = v57;
    if (v57)
    {
      v59 = (unint64_t *)&v57->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = *a2;
    if (!*a2)
    {
      v62 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      dmlc::LogMessageFatal::Entry::Init(v62, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      v63 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: type_ != nullptr", 30);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)": ", 2);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"The any container is empty", 26);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" requested=", 11);
      v68 = strlen((const char *)(0x8000000220F62FC3 & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, 0x8000000220F62FC3 & 0x7FFFFFFFFFFFFFFFLL, v68);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v319);
      v61 = *a2;
    }
    {
      v69 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      dmlc::LogMessageFatal::Entry::Init(v69, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/dmlc/any.h");
      v70 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v319);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Check failed: *(type_->ptype_info) == typeid(T)", 47);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)": ", 2);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"The stored type mismatch", 24);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" stored=", 8);
      v75 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL, v75);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" requested=", 11);
      v78 = strlen((const char *)(0x8000000220F62FC3 & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, 0x8000000220F62FC3 & 0x7FFFFFFFFFFFFFFFLL, v78);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v319);
    }
    v79 = a2[1];
    v80 = (std::__shared_weak_count *)a2[2];
    v313 = v79;
    v314 = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v302 = *(_QWORD *)(v79 + 56);
    v83 = *(_QWORD *)(a4 + 8);
    v85 = *(_DWORD *)(v83 + 4);
    v84 = (void *)(v83 + 4);
    if (v302 != v85)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v86 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        dmlc::LogMessageFatal::Entry::Init(v86, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v87 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Check failed: ", 14);
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"m->NumColumns() == model.learner_model_param->num_feature", 57);
        v90 = *((char *)v319.__ptr_ + 23);
        v91 = v90 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v92 = v90 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v91, v92);
        v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Number of columns in data must equal to trained model.", 54);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v302);
        v84 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v84)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v84);
      }
    }
    if (v58)
    {
      v95 = *(_QWORD *)(v79 + 48);
      *(_QWORD *)(**v58)(v58, v84) = v95;
      v96 = ((uint64_t (*)(uint64_t (***)(_QWORD, void *)))**v58)(v58);
      xgboost::Predictor::InitOutPredictions(a1, v96, a5, a4);
    }
    else
    {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v319);
      v319.__ptr_ = *(void **)(v79 + 48);
      xgboost::Predictor::InitOutPredictions(a1, (uint64_t)&v319, a5, a4);
      xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&v319);
    }
    std::vector<xgboost::Entry>::vector(&v311, 8 * *(_QWORD *)(v79 + 56));
    v158 = (uint64_t *)*a5;
    v308 = 0;
    v309 = 0;
    v310 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(1, (uint64_t *)&v308);
    v302 = v79;
    v303 = a8;
    v304 = (v312 - (_BYTE *)v311) >> 3;
    v305 = v311;
    v319.__ptr_ = 0;
    std::vector<unsigned long>::vector(&__p, 1uLL, &v319);
    v159 = *(int *)(*(_QWORD *)(a4 + 8) + 8);
    LODWORD(v317) = *(_DWORD *)(a4 + 44);
    LODWORD(v315) = 0;
    v292 = v80;
    if ((_DWORD)v317)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v160 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        dmlc::LogMessageFatal::Entry::Init(v160, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v161 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Check failed: ", 14);
        v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"model.param.size_leaf_vector == 0", 33);
        v164 = *((char *)v319.__ptr_ + 23);
        v165 = v164 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v166 = v164 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)v165, v166);
        v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v317);
        v169 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v169)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v169);
      }
    }
    v170 = *(unsigned int *)(v302 + 48);
    v171 = *(int *)(*(_QWORD *)(a4 + 8) + 4);
    v319.__ptr_ = 0;
    v320[0].__m_.__sig = 850045863;
    *(_OWORD *)v320[0].__m_.__opaque = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[32] = 0u;
    *(_QWORD *)&v320[0].__m_.__opaque[48] = 0;
    if (v170)
    {
      v172 = 0;
      v173 = a7;
      do
      {
        v174 = v308;
        if (v308[1] == *v308)
        {
          std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)v308, v171);
          v175 = v174[1] - *v174;
          if (v175 >= 1)
            memset((void *)*v174, 255, 4 * (((unint64_t)v175 >> 2) - ((unint64_t)v175 > 3)) + 4);
          *((_BYTE *)v174 + 24) = 1;
        }
        xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](&v315, (float *)&v302, v172);
        v176 = v315;
        if (v315)
        {
          v177 = 0;
          v178 = (_DWORD *)(v316 + 4);
          do
          {
            v179 = *(v178 - 1);
            if (v179 < (uint64_t)(v174[1] - *v174) >> 2)
            {
              *(_DWORD *)(*v174 + 4 * v179) = *v178;
              ++v177;
            }
            v178 += 2;
            --v176;
          }
          while (v176);
        }
        else
        {
          v177 = 0;
        }
        *((_BYTE *)v174 + 24) = v177 != (uint64_t)(v174[1] - *v174) >> 2;
        xgboost::predictor::PredictByAllTrees(a4, a6, v173, v158, v172, v159, (uint64_t *)&v308, 0, 1);
        v180 = v308;
        xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](&v317, (float *)&v302, v172);
        v181 = v317;
        if (v317)
        {
          v182 = v318;
          do
          {
            v184 = *v182;
            v182 += 2;
            v183 = v184;
            if (v184 < (unint64_t)((uint64_t)(v180[1] - *v180) >> 2))
              *(_DWORD *)(*v180 + 4 * v183) = -1;
            --v181;
          }
          while (v181);
        }
        *((_BYTE *)v180 + 24) = 1;
        ++v172;
      }
      while (v172 != v170);
    }
    dmlc::OMPException::Rethrow(&v319);
    std::mutex::~mutex(v320);
    std::exception_ptr::~exception_ptr(&v319);
    if (__p)
    {
      v307 = __p;
      operator delete(__p);
    }
    v319.__ptr_ = &v308;
    std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    if (v311)
    {
      v312 = v311;
      operator delete(v311);
    }
    if (v292)
    {
      v185 = (unint64_t *)&v292->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
    v132 = v300;
    if (!v300)
      return 1;
    v187 = (unint64_t *)&v300->__shared_owners_;
    do
      v134 = __ldaxr(v187);
    while (__stlxr(v134 - 1, v187));
    goto LABEL_292;
  }
  if (*a2)
    v97 = *(_QWORD *)(*a2 + 16);
  else
    v97 = MEMORY[0x24BEDB7C8];
  {
    v136 = *(uint64_t (****)(_QWORD, void *))a3;
    v135 = *(std::__shared_weak_count **)(a3 + 8);
    v299 = v135;
    if (v135)
    {
      v137 = (unint64_t *)&v135->__shared_owners_;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    dmlc::any::check_type<std::shared_ptr<xgboost::data::ArrayAdapter>>(a2);
    v139 = a2[1];
    v140 = (std::__shared_weak_count *)a2[2];
    v313 = v139;
    v314 = v140;
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    v302 = *(_QWORD *)(v139 + 128);
    v143 = *(_QWORD *)(a4 + 8);
    v145 = *(_DWORD *)(v143 + 4);
    v144 = (void *)(v143 + 4);
    if (v302 != v145)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v146 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        dmlc::LogMessageFatal::Entry::Init(v146, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v147 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"Check failed: ", 14);
        v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"m->NumColumns() == model.learner_model_param->num_feature", 57);
        v150 = *((char *)v319.__ptr_ + 23);
        v151 = v150 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v152 = v150 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)v151, v152);
        v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"Number of columns in data must equal to trained model.", 54);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v302);
        v144 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v144)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v144);
      }
    }
    if (v136)
    {
      v155 = *(_QWORD *)(v139 + 120);
      *(_QWORD *)(**v136)(v136, v144) = v155;
      v156 = ((uint64_t (*)(uint64_t (***)(_QWORD, void *)))**v136)(v136);
      xgboost::Predictor::InitOutPredictions(a1, v156, a5, a4);
    }
    else
    {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v319);
      v319.__ptr_ = *(void **)(v139 + 120);
      xgboost::Predictor::InitOutPredictions(a1, (uint64_t)&v319, a5, a4);
      xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&v319);
    }
    std::vector<xgboost::Entry>::vector(&v311, 8 * *(_QWORD *)(v139 + 128));
    v293 = (uint64_t *)*a5;
    v308 = 0;
    v309 = 0;
    v310 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(64, (uint64_t *)&v308);
    v302 = v139;
    v303 = a8;
    v304 = (v312 - (_BYTE *)v311) >> 3;
    v305 = v311;
    v319.__ptr_ = 0;
    std::vector<unsigned long>::vector(&__p, 1uLL, &v319);
    v290 = *(int *)(*(_QWORD *)(a4 + 8) + 8);
    LODWORD(v317) = *(_DWORD *)(a4 + 44);
    LODWORD(v315) = 0;
    v284 = v140;
    if ((_DWORD)v317)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v214 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        dmlc::LogMessageFatal::Entry::Init(v214, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v215 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"Check failed: ", 14);
        v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)"model.param.size_leaf_vector == 0", 33);
        v218 = *((char *)v319.__ptr_ + 23);
        v219 = v218 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v220 = v218 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)v219, v220);
        v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v317);
        v223 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v223)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v223);
      }
    }
    v224 = *(_QWORD *)(v302 + 120);
    v225 = *(int *)(*(_QWORD *)(a4 + 8) + 4);
    LODWORD(v213) = vcvtpd_u64_f64((double)v224 * 0.015625);
    v319.__ptr_ = 0;
    v320[0].__m_.__sig = 850045863;
    *(_OWORD *)v320[0].__m_.__opaque = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[32] = 0u;
    *(_QWORD *)&v320[0].__m_.__opaque[48] = 0;
    v296 = v213;
    if ((_DWORD)v213)
    {
      v226 = 0;
      v286 = a6;
      v288 = v224;
      v227 = a7;
      do
      {
        v228 = (_QWORD)v226 << 6;
        if ((unint64_t)(v288 - ((_QWORD)v226 << 6)) >= 0x40)
          v229 = 64;
        else
          v229 = v288 - ((_QWORD)v226 << 6);
        if (v229)
        {
          for (k = 0; k != v229; ++k)
          {
            v231 = v308;
            v232 = (void **)&v308[4 * k];
            if (v232[1] == *v232)
            {
              std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)&v308[4 * k], v225);
              v233 = (_BYTE *)v232[1] - (_BYTE *)*v232;
              if (v233 >= 1)
                memset(*v232, 255, 4 * (((unint64_t)v233 >> 2) - ((unint64_t)v233 > 3)) + 4);
              LOBYTE(v231[4 * k + 3]) = 1;
            }
            xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](&v315, (float *)&v302, k + v228);
            v234 = v315;
            if (v315)
            {
              v235 = 0;
              v236 = (_DWORD *)(v316 + 4);
              do
              {
                v237 = *(v236 - 1);
                if (v237 < ((_BYTE *)v232[1] - (_BYTE *)*v232) >> 2)
                {
                  *((_DWORD *)*v232 + v237) = *v236;
                  ++v235;
                }
                v236 += 2;
                --v234;
              }
              while (v234);
            }
            else
            {
              v235 = 0;
            }
            LOBYTE(v231[4 * k + 3]) = v235 != ((_BYTE *)v232[1] - (_BYTE *)*v232) >> 2;
          }
        }
        xgboost::predictor::PredictByAllTrees(a4, v286, v227, v293, (_QWORD)v226 << 6, v290, (uint64_t *)&v308, 0, v229);
        if (v229)
        {
          for (m = 0; m != v229; ++m)
          {
            v239 = v308;
            xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](&v317, (float *)&v302, m + v228);
            v240 = v317;
            if (v317)
            {
              v241 = &v239[4 * m];
              v242 = v318;
              do
              {
                v244 = *v242;
                v242 += 2;
                v243 = v244;
                if (v244 < (unint64_t)((uint64_t)(v241[1] - *v241) >> 2))
                  *(_DWORD *)(*v241 + 4 * v243) = -1;
                --v240;
              }
              while (v240);
            }
            LOBYTE(v239[4 * m + 3]) = 1;
          }
        }
        v226 = (std::mutex *)((char *)v226 + 1);
      }
      while (v226 != v296);
    }
    dmlc::OMPException::Rethrow(&v319);
    std::mutex::~mutex(v320);
    std::exception_ptr::~exception_ptr(&v319);
    if (__p)
    {
      v307 = __p;
      operator delete(__p);
    }
    v319.__ptr_ = &v308;
    std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    if (v311)
    {
      v312 = v311;
      operator delete(v311);
    }
    if (v284)
    {
      v245 = (unint64_t *)&v284->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    v132 = v299;
    if (!v299)
      return 1;
    v247 = (unint64_t *)&v299->__shared_owners_;
    do
      v134 = __ldaxr(v247);
    while (__stlxr(v134 - 1, v247));
    goto LABEL_292;
  }
  if (*a2)
    v157 = *(_QWORD *)(*a2 + 16);
  else
    v157 = MEMORY[0x24BEDB7C8];
  if (result)
  {
    v190 = *(uint64_t (****)(_QWORD, void *))a3;
    v189 = *(std::__shared_weak_count **)(a3 + 8);
    v298 = v189;
    if (v189)
    {
      v191 = (unint64_t *)&v189->__shared_owners_;
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 1, v191));
    }
    dmlc::any::check_type<std::shared_ptr<xgboost::data::CSRArrayAdapter>>(a2);
    v193 = a2[1];
    v194 = (std::__shared_weak_count *)a2[2];
    v313 = v193;
    v314 = v194;
    if (v194)
    {
      v195 = (unint64_t *)&v194->__shared_owners_;
      do
        v196 = __ldxr(v195);
      while (__stxr(v196 + 1, v195));
    }
    v302 = *(_QWORD *)(v193 + 360);
    v197 = *(_QWORD *)(a4 + 8);
    v199 = *(_DWORD *)(v197 + 4);
    v198 = (void *)(v197 + 4);
    if (v302 != v199)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v200 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        dmlc::LogMessageFatal::Entry::Init(v200, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v201 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v302);
        v202 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Check failed: ", 14);
        v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)"m->NumColumns() == model.learner_model_param->num_feature", 57);
        v204 = *((char *)v319.__ptr_ + 23);
        v205 = v204 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v206 = v204 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)v205, v206);
        v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"Number of columns in data must equal to trained model.", 54);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v302);
        v198 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v198)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v198);
      }
    }
    if (v190)
    {
      v209 = *(_QWORD *)(v193 + 216);
      v210 = (_QWORD *)(**v190)(v190, v198);
      v211 = v209 - 1;
      if (!v209)
        v211 = 0;
      *v210 = v211;
      v212 = ((uint64_t (*)(uint64_t (***)(_QWORD, void *)))**v190)(v190);
      xgboost::Predictor::InitOutPredictions(a1, v212, a5, a4);
    }
    else
    {
      xgboost::MetaInfo::MetaInfo((xgboost::MetaInfo *)&v319);
      v248 = *(_QWORD *)(v193 + 216);
      v249 = v248 != 0;
      v250 = (void *)(v248 - 1);
      if (!v249)
        v250 = 0;
      v319.__ptr_ = v250;
      xgboost::Predictor::InitOutPredictions(a1, (uint64_t)&v319, a5, a4);
      xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&v319);
    }
    std::vector<xgboost::Entry>::vector(&v311, 8 * *(_QWORD *)(v193 + 360));
    v251 = (uint64_t *)*a5;
    v308 = 0;
    v309 = 0;
    v310 = 0;
    xgboost::predictor::CPUPredictor::InitThreadTemp(1, (uint64_t *)&v308);
    v302 = v193;
    v303 = a8;
    v304 = (v312 - (_BYTE *)v311) >> 3;
    v305 = v311;
    v319.__ptr_ = 0;
    std::vector<unsigned long>::vector(&__p, 1uLL, &v319);
    v252 = *(int *)(*(_QWORD *)(a4 + 8) + 8);
    LODWORD(v317) = *(_DWORD *)(a4 + 44);
    LODWORD(v315) = 0;
    v294 = v194;
    if ((_DWORD)v317)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v319);
      if (v319.__ptr_)
      {
        v253 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        dmlc::LogMessageFatal::Entry::Init(v253, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
        v254 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v317);
        v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"Check failed: ", 14);
        v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"model.param.size_leaf_vector == 0", 33);
        v257 = *((char *)v319.__ptr_ + 23);
        v258 = v257 >= 0 ? v319.__ptr_ : *(void **)v319.__ptr_;
        v259 = v257 >= 0 ? *((unsigned __int8 *)v319.__ptr_ + 23) : *((_QWORD *)v319.__ptr_ + 1);
        v260 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)v258, v259);
        v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v260, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)"size_leaf_vector is enforced to 0 so far", 40);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v317);
        v262 = v319.__ptr_;
        v319.__ptr_ = 0;
        if (v262)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v319, (uint64_t)v262);
      }
    }
    v263 = *(_QWORD *)(v302 + 216);
    v249 = v263 != 0;
    v264 = v263 - 1;
    if (!v249)
      v264 = 0;
    v265 = *(int *)(*(_QWORD *)(a4 + 8) + 4);
    v319.__ptr_ = 0;
    v320[0].__m_.__sig = 850045863;
    *(_OWORD *)v320[0].__m_.__opaque = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[16] = 0u;
    *(_OWORD *)&v320[0].__m_.__opaque[32] = 0u;
    *(_QWORD *)&v320[0].__m_.__opaque[48] = 0;
    v266 = v264;
    if (v264)
    {
      v267 = 0;
      v268 = a7;
      do
      {
        v269 = v308;
        if (v308[1] == *v308)
        {
          std::vector<xgboost::RegTree::FVec::Entry>::resize((uint64_t)v308, v265);
          v270 = v269[1] - *v269;
          if (v270 >= 1)
            memset((void *)*v269, 255, 4 * (((unint64_t)v270 >> 2) - ((unint64_t)v270 > 3)) + 4);
          *((_BYTE *)v269 + 24) = 1;
        }
        xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](&v315, (float *)&v302, v267);
        v271 = v315;
        if (v315)
        {
          v272 = 0;
          v273 = (_DWORD *)(v316 + 4);
          do
          {
            v274 = *(v273 - 1);
            if (v274 < (uint64_t)(v269[1] - *v269) >> 2)
            {
              *(_DWORD *)(*v269 + 4 * v274) = *v273;
              ++v272;
            }
            v273 += 2;
            --v271;
          }
          while (v271);
        }
        else
        {
          v272 = 0;
        }
        *((_BYTE *)v269 + 24) = v272 != (uint64_t)(v269[1] - *v269) >> 2;
        xgboost::predictor::PredictByAllTrees(a4, a6, v268, v251, v267, v252, (uint64_t *)&v308, 0, 1);
        v275 = v308;
        xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](&v317, (float *)&v302, v267);
        v276 = v317;
        if (v317)
        {
          v277 = v318;
          do
          {
            v279 = *v277;
            v277 += 2;
            v278 = v279;
            if (v279 < (unint64_t)((uint64_t)(v275[1] - *v275) >> 2))
              *(_DWORD *)(*v275 + 4 * v278) = -1;
            --v276;
          }
          while (v276);
        }
        *((_BYTE *)v275 + 24) = 1;
        ++v267;
      }
      while (v267 != v266);
    }
    dmlc::OMPException::Rethrow(&v319);
    std::mutex::~mutex(v320);
    std::exception_ptr::~exception_ptr(&v319);
    if (__p)
    {
      v307 = __p;
      operator delete(__p);
    }
    v319.__ptr_ = &v308;
    std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    if (v311)
    {
      v312 = v311;
      operator delete(v311);
    }
    if (v294)
    {
      v280 = (unint64_t *)&v294->__shared_owners_;
      do
        v281 = __ldaxr(v280);
      while (__stlxr(v281 - 1, v280));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
        std::__shared_weak_count::__release_weak(v294);
      }
    }
    v132 = v298;
    if (!v298)
      return 1;
    v282 = (unint64_t *)&v298->__shared_owners_;
    do
      v134 = __ldaxr(v282);
    while (__stlxr(v134 - 1, v282));
    goto LABEL_292;
  }
  return result;
}

void sub_220EBBD84()
{
  std::mutex *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;
  std::exception_ptr v7;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v7);
  if (v1)
    operator delete(v1);
  v6 = (void **)&v2;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v5);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBBE58()
{
  JUMPOUT(0x220EBBF34);
}

void sub_220EBBE68()
{
  JUMPOUT(0x220EBBF5CLL);
}

void sub_220EBBE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void **v53;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  if (v48)
    operator delete(v48);
  v53 = (void **)&v49;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v53);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBBE7C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;

  if (v0)
    operator delete(v0);
  v5 = &v1;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](&v4);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBBE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&a47);
  JUMPOUT(0x220EBC124);
}

void sub_220EBBE98()
{
  JUMPOUT(0x220EBBF54);
}

void sub_220EBBEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a27);
  JUMPOUT(0x220EBBEACLL);
}

void sub_220EBBEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  JUMPOUT(0x220EBC040);
}

void sub_220EBBEE8()
{
  JUMPOUT(0x220EBC020);
}

void sub_220EBBEF8()
{
  JUMPOUT(0x220EBC048);
}

void sub_220EBBF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a45);
  JUMPOUT(0x220EBBF10);
}

void sub_220EBBF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void **v53;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  if (v48)
    operator delete(v48);
  v53 = (void **)&v49;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v53);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBBF70()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;

  if (v0)
    operator delete(v0);
  v5 = &v1;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](&v4);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBBF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  xgboost::MetaInfo::~MetaInfo((xgboost::MetaInfo *)&a47);
  JUMPOUT(0x220EBC1ECLL);
}

void sub_220EBBF8C()
{
  JUMPOUT(0x220EBC040);
}

void sub_220EBBF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a27);
  JUMPOUT(0x220EBBFA0);
}

void sub_220EBBFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  JUMPOUT(0x220EBC124);
}

void sub_220EBBFDC()
{
  JUMPOUT(0x220EBC104);
}

void sub_220EBBFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a45);
  JUMPOUT(0x220EBBFFCLL);
}

void sub_220EBC054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void **v53;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  if (v48)
    operator delete(v48);
  v53 = (void **)&v49;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v53);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
  JUMPOUT(0x220EBC1F8);
}

void sub_220EBC05C(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;

  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
  v9 = &v5;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](&v8);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100](&v2);
  _Unwind_Resume(a1);
}

void sub_220EBC064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a27);
  JUMPOUT(0x220EBC070);
}

void sub_220EBC08C()
{
  JUMPOUT(0x220EBC124);
}

void sub_220EBC094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  v47 = a47;
  a47 = 0;
  if (v47)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v47);
  JUMPOUT(0x220EBC1ECLL);
}

void sub_220EBC0B4()
{
  JUMPOUT(0x220EBC1CCLL);
}

void sub_220EBC0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a47);
  JUMPOUT(0x220EBC12CLL);
}

void sub_220EBC0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a45);
  JUMPOUT(0x220EBC0E0);
}

void sub_220EBC138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void **v56;

  v48 = a47;
  a47 = 0;
  if (v48)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a47, v48);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  v56 = (void **)&v52;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](&v56);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
  _Unwind_Resume(a1);
}

void sub_220EBC140()
{
  JUMPOUT(0x220EBC12CLL);
}

void sub_220EBC148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a27);
  JUMPOUT(0x220EBC154);
}

void sub_220EBC170()
{
  JUMPOUT(0x220EBC1ECLL);
}

void sub_220EBC178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a47);
  JUMPOUT(0x220EBC12CLL);
}

void sub_220EBC18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a47);
  JUMPOUT(0x220EBC1F4);
}

void sub_220EBC19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a45);
  JUMPOUT(0x220EBC1A8);
}

void sub_220EBC208()
{
  JUMPOUT(0x220EBC1F4);
}

void sub_220EBC210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a47);
  JUMPOUT(0x220EBC1F4);
}

void sub_220EBC220(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220EBC1FCLL);
}

void xgboost::predictor::CPUPredictor::PredictInstance(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  void *__p[2];
  __int128 v18;
  uint64_t v19[3];

  memset(v19, 0, sizeof(v19));
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  std::vector<xgboost::RegTree::FVec>::resize(v19, 1uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v9 = v19[0];
  std::vector<xgboost::RegTree::FVec::Entry>::resize(v19[0], *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4));
  v10 = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
  if (v10 >= 1)
    memset(*(void **)v9, 255, 4 * (((unint64_t)v10 >> 2) - ((unint64_t)v10 > 3)) + 4);
  *(_BYTE *)(v9 + 24) = 1;
  v11 = *(_DWORD *)(*(_QWORD *)(a4 + 8) + 8);
  v12 = (v11 * a5);
  if (!(_DWORD)v12)
  {
    v13 = *(_QWORD *)(a4 + 184) - *(_QWORD *)(a4 + 176);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a4 + 184) - *(_QWORD *)(a4 + 176);
  if (v12 > v13 >> 3)
LABEL_9:
    v12 = (unint64_t)v13 >> 3;
  std::vector<float>::resize((uint64_t)a3, (v11 + v11 * *(_DWORD *)(a4 + 44)));
  if (*(_DWORD *)(*(_QWORD *)(a4 + 8) + 8))
  {
    v14 = 0;
    do
    {
      v15 = xgboost::predictor::PredValue(a2, (uint64_t *)(a4 + 176), (_QWORD *)(a4 + 224), v14, v19[0], 0, v12);
      v16 = *(_QWORD *)(a4 + 8);
      *(float *)(*a3 + 4 * v14++) = v15 + *(float *)v16;
    }
    while (v14 < *(unsigned int *)(v16 + 8));
  }
  __p[0] = v19;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_220EBC3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a14;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void xgboost::predictor::CPUPredictor::PredictLeaf(uint64_t a1, uint64_t a2, _QWORD **a3, _QWORD *a4, unsigned int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61[3];
  _QWORD v62[6];
  std::exception_ptr v63;
  std::mutex v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  memset(v61, 0, sizeof(v61));
  v50 = *(int *)(a4[1] + 4);
  xgboost::predictor::CPUPredictor::InitThreadTemp(1, v61);
  v9 = (_QWORD *)(**(uint64_t (***)(uint64_t))a2)(a2);
  if (a5)
  {
    v10 = a5;
    v11 = a4[23] - a4[22];
    if (a5 <= (unint64_t)(v11 >> 3))
    {
      LODWORD(v51) = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v11 = a4[23] - a4[22];
  }
  v51 = (unint64_t)v11 >> 3;
  v10 = ((unint64_t)v11 >> 3);
LABEL_6:
  v12 = *a3;
  std::vector<float>::resize((uint64_t)v12, *v9 * v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v59, a2);
  v57 = v59;
  v58 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v55, 0);
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v57) & 1) != 0)
  {
    v15 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v57);
    v16 = v15;
    v53 = **v15;
    v17 = (*v15)[1] - v53;
    if (v17)
    {
      v54 = *v15[1];
      v63.__ptr_ = 0;
      v64.__m_.__sig = 850045863;
      memset(v64.__m_.__opaque, 0, sizeof(v64.__m_.__opaque));
      v52 = (v17 >> 3) - 1;
      if ((v17 >> 3) != 1)
      {
        v18 = 0;
        do
        {
          v19 = v16[2];
          v20 = v61[0];
          if (*(_QWORD *)(v61[0] + 8) == *(_QWORD *)v61[0])
          {
            std::vector<xgboost::RegTree::FVec::Entry>::resize(v61[0], v50);
            v21 = *(_QWORD *)(v20 + 8) - *(_QWORD *)v20;
            if (v21 >= 1)
              memset(*(void **)v20, 255, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
            *(_BYTE *)(v20 + 24) = 1;
          }
          v22 = (uint64_t *)(v53 + 8 * v18);
          v24 = *v22;
          v23 = v22[1];
          v25 = v23 - *v22;
          if (!v54 && v23 != *v22)
            goto LABEL_56;
          if (v23 == v24)
          {
            v26 = 0;
          }
          else
          {
            v26 = 0;
            v27 = (_DWORD *)(v54 + 4 + 8 * v24);
            do
            {
              v28 = *(v27 - 1);
              if (v28 < (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2)
              {
                *(_DWORD *)(*(_QWORD *)v20 + 4 * v28) = *v27;
                ++v26;
              }
              v27 += 2;
              --v25;
            }
            while (v25);
          }
          *(_BYTE *)(v20 + 24) = v26 != (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2;
          if ((_DWORD)v51)
          {
            v29 = 0;
            v30 = 4 * v10 * ((_QWORD)v19 + v18);
            do
            {
              v31 = *(_QWORD **)(a4[22] + 8 * v29);
              v32 = v31[29];
              v62[0] = v31[30] - v32;
              v62[1] = v32;
              v33 = v31[32];
              v62[2] = (v31[33] - v33) >> 2;
              v62[3] = v33;
              v34 = v31[35];
              v62[4] = (v31[36] - v34) >> 4;
              v62[5] = v34;
              *(float *)(*v12 + v30 + 4 * v29++) = (float)(int)xgboost::predictor::GetLeafIndex<true,true>((uint64_t)v31, v20, v62);
            }
            while (v10 != v29);
          }
          v36 = *v22;
          v35 = v22[1];
          if (!v54 && v35 != v36)
LABEL_56:
            std::terminate();
          if (v35 != v36)
          {
            v37 = v35 - v36;
            v38 = (unsigned int *)(v54 + 8 * v36);
            do
            {
              v40 = *v38;
              v38 += 2;
              v39 = v40;
              if (v40 < (unint64_t)((uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2))
                *(_DWORD *)(*(_QWORD *)v20 + 4 * v39) = -1;
              --v37;
            }
            while (v37);
          }
          *(_BYTE *)(v20 + 24) = 1;
          ++v18;
        }
        while (v18 != v52);
      }
    }
    else
    {
      v63.__ptr_ = 0;
      v64.__m_.__sig = 850045863;
      memset(v64.__m_.__opaque, 0, sizeof(v64.__m_.__opaque));
    }
    dmlc::OMPException::Rethrow(&v63);
    std::mutex::~mutex(&v64);
    std::exception_ptr::~exception_ptr(&v63);
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v57);
  }
  v41 = v56;
  if (v56)
  {
    v42 = (unint64_t *)&v56->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v58;
  if (v58)
  {
    v45 = (unint64_t *)&v58->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v60;
  if (v60)
  {
    v48 = (unint64_t *)&v60->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v63.__ptr_ = v61;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
}

void sub_220EBC8BC()
{
  uint64_t v0;
  std::mutex *v1;

  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220EBC924);
}

void sub_220EBC91C()
{
  JUMPOUT(0x220EBC924);
}

void xgboost::predictor::CPUPredictor::PredictContribution(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, int a5, _QWORD *a6, char a7, unsigned int a8, int a9)
{
  unint64_t v10;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *Entry;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *ptr;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  void *v63;
  float **v64;
  xgboost::RegTree *v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  float *v77;
  std::string *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  char *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  int v127;
  uint64_t v128[3];
  uint64_t v129;
  std::exception_ptr v130;
  std::exception_ptr v131;
  _BYTE *v132;
  std::exception_ptr v133;
  std::mutex v134;
  uint64_t v135;

  LODWORD(v10) = a5;
  v135 = *MEMORY[0x24BDAC8D0];
  v97 = *(int *)(a4[1] + 4);
  memset(v128, 0, sizeof(v128));
  xgboost::predictor::CPUPredictor::InitThreadTemp(1, v128);
  v14 = (_QWORD *)(**(uint64_t (***)(uint64_t))a2)(a2);
  if (!(_DWORD)v10)
  {
    v15 = a4[23] - a4[22];
    goto LABEL_5;
  }
  v15 = a4[23] - a4[22];
  if (v10 > (unint64_t)(v15 >> 3))
LABEL_5:
    v10 = (unint64_t)v15 >> 3;
  v127 = *(_DWORD *)(a4[1] + 8);
  LODWORD(v131.__ptr_) = v127;
  LODWORD(v123) = 0;
  if (!v127)
  {
    dmlc::LogCheckFormat<int,int>((uint64_t *)&v133);
    if (v133.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
      v23 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Check failed: ", 14);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"ngroup != 0", 11);
      v26 = *((char *)v133.__ptr_ + 23);
      v27 = v26 >= 0 ? v133.__ptr_ : *(void **)v133.__ptr_;
      v28 = v26 >= 0 ? *((unsigned __int8 *)v133.__ptr_ + 23) : *((_QWORD *)v133.__ptr_ + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
      ptr = v133.__ptr_;
      v133.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v133, (uint64_t)ptr);
    }
  }
  LODWORD(v131.__ptr_) = 0;
  v126 = v97 + 1;
  if ((_DWORD)v97 == -1)
  {
    dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v133);
    if (v133.__ptr_)
    {
      v31 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
      dmlc::LogMessageFatal::Entry::Init(v31, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
      v32 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v131);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Check failed: ", 14);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"ncolumns != 0", 13);
      v35 = *((char *)v133.__ptr_ + 23);
      v36 = v35 >= 0 ? v133.__ptr_ : *(void **)v133.__ptr_;
      v37 = v35 >= 0 ? *((unsigned __int8 *)v133.__ptr_ + 23) : *((_QWORD *)v133.__ptr_ + 1);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v131);
      v39 = v133.__ptr_;
      v133.__ptr_ = 0;
      if (v39)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v133, (uint64_t)v39);
    }
  }
  v16 = *a3;
  std::vector<float>::resize(v16, v126 * *v14 * *(unsigned int *)(a4[1] + 8));
  v17 = *(_QWORD *)(v16 + 8) - *(_QWORD *)v16;
  if (v17 >= 1)
    bzero(*(void **)v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  v18 = v10;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v133.__ptr_ = &v123;
  LOBYTE(v134.__m_.__sig) = 0;
  v109 = v10;
  if ((_DWORD)v10)
  {
    v19 = (char *)operator new(24 * v10);
    v123 = v19;
    v125 = &v19[24 * v10];
    bzero(v19, 24 * ((24 * (unint64_t)v10 - 24) / 0x18) + 24);
    v20 = 0;
    v21 = 0;
    v124 = &v19[24 * ((24 * v18 - 24) / 0x18uLL) + 24];
    v133.__ptr_ = 0;
    v134.__m_.__sig = 850045863;
    memset(v134.__m_.__opaque, 0, sizeof(v134.__m_.__opaque));
    do
    {
      xgboost::predictor::FillNodeMeanValues(*(_QWORD *)(a4[22] + v21), &v123[v20]);
      v21 += 8;
      v20 += 24;
    }
    while (8 * v18 != v21);
  }
  else
  {
    v133.__ptr_ = 0;
    v134.__m_.__sig = 850045863;
    memset(v134.__m_.__opaque, 0, sizeof(v134.__m_.__opaque));
  }
  dmlc::OMPException::Rethrow(&v133);
  std::mutex::~mutex(&v134);
  std::exception_ptr::~exception_ptr(&v133);
  v40 = v14[11];
  v41 = *(_QWORD *)(v14[10] + 8);
  v103 = *(_QWORD *)v14[10];
  v105 = v14[12];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v121, a2);
  v119 = v121;
  v120 = v122;
  if (v122)
  {
    p_shared_owners = (unint64_t *)&v122->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v117, 0);
  v102 = (v41 - v103) >> 2;
  v45 = v41 == v103 || v105 * v40 == 0;
  v107 = v45;
  v108 = v16;
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v119) & 1) != 0)
  {
    v46 = xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v119);
    v98 = **(_QWORD **)v46;
    v47 = *(_QWORD *)(*(_QWORD *)v46 + 8) - v98;
    if (v47)
    {
      v112 = **(_QWORD **)(v46 + 8);
      v133.__ptr_ = 0;
      v134.__m_.__sig = 850045863;
      memset(v134.__m_.__opaque, 0, sizeof(v134.__m_.__opaque));
      v100 = (v47 >> 3) - 1;
      if ((v47 >> 3) != 1)
      {
        v101 = 0;
        v99 = v46;
        do
        {
          v48 = *(_QWORD *)(v46 + 16);
          v49 = v128[0];
          if (*(_QWORD *)(v128[0] + 8) == *(_QWORD *)v128[0])
          {
            std::vector<xgboost::RegTree::FVec::Entry>::resize(v128[0], v97);
            v50 = *(_QWORD *)(v49 + 8) - *(_QWORD *)v49;
            if (v50 >= 1)
              memset(*(void **)v49, 255, 4 * (((unint64_t)v50 >> 2) - ((unint64_t)v50 > 3)) + 4);
            *(_BYTE *)(v49 + 24) = 1;
          }
          std::vector<float>::vector(&v131, v126);
          v51 = v127;
          if (v127 >= 1)
          {
            v52 = 0;
            v53 = v126;
            v54 = (uint64_t *)(v98 + 8 * v101);
            v110 = v48 + v101;
            v111 = v54;
            v104 = (v48 + v101) * v105;
            v106 = v48 + v101;
            do
            {
              v114 = *(char **)v16;
              v56 = *v54;
              v55 = v54[1];
              v57 = v55 - *v54;
              if (!v112 && v55 != *v54)
                goto LABEL_107;
              if (v55 == v56)
              {
                v58 = 0;
              }
              else
              {
                v58 = 0;
                v59 = (_DWORD *)(v112 + 4 + 8 * v56);
                do
                {
                  v60 = *(v59 - 1);
                  if (v60 < (uint64_t)(*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 2)
                  {
                    *(_DWORD *)(*(_QWORD *)v49 + 4 * v60) = *v59;
                    ++v58;
                  }
                  v59 += 2;
                  --v57;
                }
                while (v57);
              }
              v113 = v51;
              *(_BYTE *)(v49 + 24) = v58 != (uint64_t)(*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 2;
              if (v109)
              {
                v61 = 0;
                do
                {
                  v62 = v123;
                  if (0xAAAAAAAAAAAAAAABLL * ((v124 - v123) >> 3) <= v61)
                    std::vector<xgboost::detail::GradientPairInternal<float>>::__throw_out_of_range[abi:ne180100]();
                  v63 = v131.__ptr_;
                  if (v132 - (char *)v131.__ptr_ >= 1)
                    bzero(v131.__ptr_, 4* (((unint64_t)(v132 - (char *)v131.__ptr_) >> 2)- ((unint64_t)(v132 - (char *)v131.__ptr_) > 3))+ 4);
                  if (v52 == *(_DWORD *)(a4[28] + 4 * v61))
                  {
                    v64 = (float **)&v62[24 * v61];
                    v65 = *(xgboost::RegTree **)(a4[22] + 8 * v61);
                    if ((a7 & 1) != 0)
                      xgboost::RegTree::CalculateContributionsApprox(v65, (_QWORD *)v49, (uint64_t)v64, (uint64_t)v63);
                    else
                      xgboost::RegTree::CalculateContributions(v65, (_QWORD *)v49, v64, (uint64_t)v63, a8, a9);
                    v66 = v126;
                    if (v126)
                    {
                      v67 = (float *)v131.__ptr_;
                      v68 = (float *)&v114[4 * v53 * (v52 + v106 * v113)];
                      do
                      {
                        if (a6)
                          v69 = *(float *)(*a6 + 4 * v61);
                        else
                          v69 = 1.0;
                        v70 = *v67++;
                        *v68 = *v68 + (float)(v70 * v69);
                        ++v68;
                        --v66;
                      }
                      while (v66);
                    }
                  }
                  ++v61;
                }
                while (v61 != v18);
              }
              v54 = (uint64_t *)(v98 + 8 * v101);
              v72 = *v111;
              v71 = v111[1];
              if (!v112 && v71 != v72)
LABEL_107:
                std::terminate();
              v16 = v108;
              if (v71 != v72)
              {
                v73 = v71 - v72;
                v74 = (unsigned int *)(v112 + 8 * v72);
                do
                {
                  v76 = *v74;
                  v74 += 2;
                  v75 = v76;
                  if (v76 < (unint64_t)((uint64_t)(*(_QWORD *)(v49 + 8) - *(_QWORD *)v49) >> 2))
                    *(_DWORD *)(*(_QWORD *)v49 + 4 * v75) = -1;
                  --v73;
                }
                while (v73);
              }
              *(_BYTE *)(v49 + 24) = 1;
              if (v107)
              {
                v77 = (float *)a4[1];
              }
              else
              {
                v129 = v105;
                if (v105 != v127)
                {
                  dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v130);
                  if (v130.__ptr_)
                  {
                    v78 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
                    dmlc::LogMessageFatal::Entry::Init(v78, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/predictor/cpu_predictor.cc");
                    v79 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v129);
                    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: ", 14);
                    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"base_margin.Shape(1) == ngroup", 30);
                    v82 = *((char *)v130.__ptr_ + 23);
                    v83 = v82 >= 0 ? v130.__ptr_ : *(void **)v130.__ptr_;
                    v84 = v82 >= 0 ? *((unsigned __int8 *)v130.__ptr_ + 23) : *((_QWORD *)v130.__ptr_ + 1);
                    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v83, v84);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": ", 2);
                    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v129);
                    v86 = v130.__ptr_;
                    v130.__ptr_ = 0;
                    if (v86)
                      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v130, (uint64_t)v86);
                  }
                }
                if (v52 + v104 >= v102)
                  __assert_rtn("operator()", "linalg.h", 412, "offset < data_.size() && \"Out of bound access.\"");
                v77 = (float *)(v103 + 4 * (v52 + v104));
              }
              v87 = &v114[4 * (v52 + v110 * v113) * v53];
              v53 = v126;
              *(float *)&v87[4 * v126 - 4] = *v77 + *(float *)&v87[4 * v126 - 4];
              ++v52;
              v51 = v127;
            }
            while (v52 < v127);
          }
          if (v131.__ptr_)
          {
            v132 = v131.__ptr_;
            operator delete(v131.__ptr_);
          }
          ++v101;
          v46 = v99;
        }
        while (v101 != v100);
      }
    }
    else
    {
      v133.__ptr_ = 0;
      v134.__m_.__sig = 850045863;
      memset(v134.__m_.__opaque, 0, sizeof(v134.__m_.__opaque));
    }
    dmlc::OMPException::Rethrow(&v133);
    std::mutex::~mutex(&v134);
    std::exception_ptr::~exception_ptr(&v133);
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v119);
  }
  v88 = v118;
  if (v118)
  {
    v89 = (unint64_t *)&v118->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v120;
  if (v120)
  {
    v92 = (unint64_t *)&v120->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v122;
  if (v122)
  {
    v95 = (unint64_t *)&v122->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v133.__ptr_ = &v123;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__ptr_ = v128;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
}

void sub_220EBD498()
{
  std::mutex *v0;
  uint64_t v1;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 168));
  JUMPOUT(0x220EBD5ACLL);
}

void sub_220EBD528()
{
  JUMPOUT(0x220EBD5BCLL);
}

void sub_220EBD530()
{
  uint64_t v0;
  uint64_t v1;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 192));
  v1 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
    std::default_delete<std::string>::operator()[abi:ne180100](v0 - 168);
  JUMPOUT(0x220EBD5BCLL);
}

void sub_220EBD540()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 192));
  JUMPOUT(0x220EBD54CLL);
}

void sub_220EBD58C()
{
  JUMPOUT(0x220EBD594);
}

uint64_t *xgboost::predictor::CPUPredictor::PredictInteractionContributions(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t (***v10)(_QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)(_QWORD);
  unsigned int v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;

  v10 = a2;
  v12 = (uint64_t *)(**a2)(a2);
  v13 = *(int *)(*(_QWORD *)(a4 + 8) + 8);
  v43 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4);
  v14 = v43 + 1;
  v15 = (v43 + 1) * v13;
  v39 = (uint64_t *)*a3;
  std::vector<float>::resize(*a3, (v43 + 1) * *v12 * v15);
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v50, *v12 * v15, 0.0);
  v16 = v50;
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v49, *v12 * v15, 0.0);
  v17 = v49;
  v40 = (v43 + 1) * v13;
  xgboost::HostDeviceVector<float>::HostDeviceVector(&v48, *v12 * v15, 0.0);
  v18 = v48;
  v41 = a1;
  v42 = a4;
  (*(void (**)(uint64_t, uint64_t (***)(_QWORD), uint64_t **, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD))(*(_QWORD *)a1 + 56))(a1, v10, &v48, a4, a5, a6, a7, 0, 0);
  v19 = 0;
  v20 = v43 + 1;
  v47 = 0;
  v21 = a6;
  v44 = v10;
  do
  {
    (*(void (**)(uint64_t, uint64_t (***)(_QWORD), _QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _DWORD))(*(_QWORD *)v41 + 56))(v41, v10, &v50, v42, a5, v21, a7, 0xFFFFFFFFLL, v19);
    (*(void (**)(uint64_t, uint64_t (***)(_QWORD), _QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _DWORD))(*(_QWORD *)v41 + 56))(v41, v44, &v49, v42, a5, a6, a7, 1, v19);
    v22 = *v12;
    v21 = a6;
    v10 = v44;
    if (*v12)
    {
      v23 = 0;
      v24 = 0;
      v25 = *v39;
      v26 = v47;
      do
      {
        if ((int)v13 >= 1)
        {
          v27 = 0;
          v28 = v26;
          v29 = v23;
          do
          {
            v30 = 0;
            v31 = ((v24 * v40 + v19 + v27 * v14) * v14) + v19;
            *(_DWORD *)(v25 + 4 * v31) = 0;
            v32 = *v18;
            v33 = *v16 + 4 * v29;
            v34 = *v17 + 4 * v29;
            v35 = 0.0;
            do
            {
              if (v19 == v30)
              {
                v35 = v35 + *(float *)(v32 + 4 * ((v27 * v14 + v24 * v40) + v19));
              }
              else
              {
                v36 = (float)(*(float *)(v34 + 4 * v30) - *(float *)(v33 + 4 * v30)) * 0.5;
                *(float *)(v25 + 4 * v28 + 4 * v30) = v36;
                v35 = *(float *)(v25 + 4 * v31) - v36;
              }
              *(float *)(v25 + 4 * v31) = v35;
              ++v30;
            }
            while (v14 != v30);
            ++v27;
            v29 += v20;
            v28 += v20 * v20;
          }
          while (v27 != v13);
        }
        ++v24;
        v23 += v13 * (v43 + 1);
        v26 += v13 * v20 * v20;
      }
      while (v24 != v22);
    }
    v47 += v20;
  }
  while (v19++ != v43);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v48);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v49);
  return xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v50);
}

void sub_220EBD8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v16 = va_arg(va1, _QWORD);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)va);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)va1);
  xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)(v14 - 104));
  _Unwind_Resume(a1);
}

void xgboost::predictor::CPUPredictor::InitThreadTemp(int a1, uint64_t *a2)
{
  void *__p[2];
  __int128 v3;

  if ((int)((unint64_t)(a2[1] - *a2) >> 5) < a1)
  {
    *(_OWORD *)__p = 0u;
    v3 = 0u;
    std::vector<xgboost::RegTree::FVec>::resize(a2, a1, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_220EBD95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost::RegTree::FVec>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v6 = *a1 + 32 * a2;
      if (v4 != v6)
      {
        v7 = a1[1];
        do
        {
          v9 = *(void **)(v7 - 32);
          v7 -= 32;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v4 - 24) = v8;
            operator delete(v8);
          }
          v4 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    std::vector<xgboost::RegTree::FVec>::__append(a1, a2 - v5, a3);
  }
}

_QWORD *std::vector<xgboost::RegTree::FVec>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      v16 = 32 * a2;
      v17 = v9 + 32 * a2;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        result = std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>((_QWORD *)v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        *(_BYTE *)(v9 + 24) = *(_BYTE *)(a3 + 24);
        v9 += 32;
        v16 -= 32;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 5);
    if (v11 >> 59)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 5;
    v13 = v7 - *a1;
    if (v13 >> 4 > v11)
      v11 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v22 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>>((uint64_t)result, v14);
    else
      v15 = 0;
    v18 = v15;
    v19 = &v15[32 * v12];
    v20 = v19;
    v21 = &v15[32 * v14];
    std::__split_buffer<xgboost::RegTree::FVec>::__construct_at_end(&v18, a2, a3);
    std::vector<xgboost::RegTree::FVec>::__swap_out_circular_buffer(a1, &v18);
    return (_QWORD *)std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer((uint64_t)&v18);
  }
  return result;
}

void sub_220EBDB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<xgboost::RegTree::FVec>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = 32 * a2;
    v7 = v4 + 32 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      result = std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>((_QWORD *)v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      *(_BYTE *)(v4 + 24) = *(_BYTE *)(a3 + 24);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    v4 = v7;
  }
  v3[2] = v4;
  return result;
}

void sub_220EBDBB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost::RegTree::FVec>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<xgboost::RegTree::FVec::Entry>::__init_with_size[abi:ne180100]<xgboost::RegTree::FVec::Entry*,xgboost::RegTree::FVec::Entry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::RegTree::FVec::Entry>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220EBDC90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::RegTree::FVec::Entry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>,std::reverse_iterator<xgboost::RegTree::FVec*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost::RegTree::FVec>,std::reverse_iterator<xgboost::RegTree::FVec*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<xgboost::RegTree::FVec>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<xgboost::RegTree::FVec>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<xgboost::RegTree::FVec>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void *xgboost::predictor::FVecFill<xgboost::predictor::SparsePageView<8ul>>(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;

  if (result)
  {
    v8 = result;
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = *a5;
      v12 = *a5 + 32 * (_QWORD)v9;
      if (*(_QWORD *)(v12 + 8) == *(_QWORD *)v12)
      {
        std::vector<xgboost::RegTree::FVec::Entry>::resize(*a5 + 32 * (_QWORD)v9, v10);
        result = *(void **)v12;
        v13 = *(_QWORD *)(v12 + 8) - *(_QWORD *)v12;
        if (v13 >= 1)
          result = memset(result, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
        *(_BYTE *)(v11 + 32 * (_QWORD)v9 + 24) = 1;
      }
      v14 = (uint64_t *)(*(_QWORD *)(a4 + 16) + 8 * ((_QWORD)v9 + a2));
      v16 = *v14;
      v15 = v14[1];
      v17 = v15 - *v14;
      v18 = *(_QWORD *)(a4 + 32);
      if (v17)
        v19 = v18 == 0;
      else
        v19 = 0;
      if (v19)
        std::terminate();
      if (v15 == v16)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        v21 = (_DWORD *)(v18 + 8 * v16 + 4);
        do
        {
          v22 = *(v21 - 1);
          if (v22 < (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2)
          {
            *(_DWORD *)(*(_QWORD *)v12 + 4 * v22) = *v21;
            ++v20;
          }
          v21 += 2;
          --v17;
        }
        while (v17);
      }
      *(_BYTE *)(v11 + 32 * (_QWORD)v9 + 24) = v20 != (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2;
      v9 = (char *)v9 + 1;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t xgboost::predictor::FVecDrop<xgboost::predictor::SparsePageView<8ul>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;

  if (result)
  {
    for (i = 0; i != result; ++i)
    {
      v5 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 8 * (i + a2));
      v7 = *v5;
      v6 = v5[1];
      v8 = v6 - *v5;
      v9 = *(_QWORD *)(a3 + 32);
      if (v8)
        v10 = v9 == 0;
      else
        v10 = 0;
      if (v10)
        std::terminate();
      v11 = *a4;
      if (v6 != v7)
      {
        v12 = (_QWORD *)(v11 + 32 * i);
        v13 = (unsigned int *)(v9 + 8 * v7);
        do
        {
          v15 = *v13;
          v13 += 2;
          v14 = v15;
          if (v15 < (unint64_t)((uint64_t)(v12[1] - *v12) >> 2))
            *(_DWORD *)(*v12 + 4 * v14) = -1;
          --v8;
        }
        while (v8);
      }
      *(_BYTE *)(v11 + 32 * i + 24) = 1;
    }
  }
  return result;
}

void std::vector<xgboost::RegTree::FVec::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<xgboost::RegTree::FVec::Entry>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost::RegTree::FVec::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost::RegTree::FVec>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<xgboost::RegTree::FVec>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::DenseAdapter,8ul>::operator[](_QWORD *a1, float *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t *result;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19[2];

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  v8 = v7[2];
  v9 = **((_QWORD **)a2 + 4) * v6;
  v10 = v9;
  if (v8)
  {
    v11 = 0;
    v12 = *v7 + 4 * v8 * a3;
    v10 = **((_QWORD **)a2 + 4) * v6;
    do
    {
      v13 = *(float *)(v12 + 4 * v11);
      if (a2[2] != v13)
      {
        if (*((_QWORD *)a2 + 2) <= v10)
          std::terminate();
        v14 = *((_QWORD *)a2 + 3) + 8 * v10;
        *(_DWORD *)v14 = v11;
        *(float *)(v14 + 4) = v13;
        ++v10;
      }
      ++v11;
    }
    while (v8 != v11);
  }
  result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(v19, (_QWORD *)a2 + 2, v9, v10 - v9);
  v16 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (*v16 == 7)
    v17 = 0;
  else
    v17 = *v16 + 1;
  *v16 = v17;
  v18 = v19[1];
  *a1 = v19[0];
  a1[1] = v18;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::CSRAdapter,8ul>::operator[](_QWORD *a1, float *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  float *v14;
  int v15;
  int v16;
  float v17;
  float *v18;
  unint64_t *result;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23[2];

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 56);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  v8 = (uint64_t *)(*v7 + 8 * a3);
  v9 = *v8;
  v10 = **((_QWORD **)a2 + 4) * v6;
  v11 = v10;
  v12 = v8[1] - *v8;
  if (v12)
  {
    v13 = (int *)(v7[1] + 4 * v9);
    v14 = (float *)(v7[2] + 4 * v9);
    v11 = **((_QWORD **)a2 + 4) * v6;
    do
    {
      v16 = *v13++;
      v15 = v16;
      v17 = *v14;
      if (a2[2] != *v14)
      {
        if (*((_QWORD *)a2 + 2) <= v11)
          std::terminate();
        v18 = (float *)(*((_QWORD *)a2 + 3) + 8 * v11);
        *(_DWORD *)v18 = v15;
        v18[1] = v17;
        ++v11;
      }
      ++v14;
      --v12;
    }
    while (v12);
  }
  result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(v23, (_QWORD *)a2 + 2, v10, v11 - v10);
  v20 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (*v20 == 7)
    v21 = 0;
  else
    v21 = *v20 + 1;
  *v20 = v21;
  v22 = v23[1];
  *a1 = v23[0];
  a1[1] = v22;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::ArrayAdapter,8ul>::operator[](_QWORD *a1, float *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t *result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 128);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_OWORD *)(v7 + 16);
  v11 = *(_OWORD *)(v7 + 32);
  v12 = *(_OWORD *)(v7 + 48);
  v25 = *(_WORD *)(v7 + 64);
  v24 = v12;
  v23 = v11;
  v22 = v10;
  v21[0] = v8;
  v21[1] = v9;
  v26 = a3;
  v13 = **((_QWORD **)a2 + 4) * v6;
  v14 = v13;
  if (*((_QWORD *)&v11 + 1))
  {
    v15 = 0;
    v14 = v13;
    do
    {
      v27 = v21;
      v28 = v26;
      v29 = v15;
      *(float *)&v10 = xgboost::ArrayInterface<2,false>::DispatchCall<float xgboost::ArrayInterface<2,false>::operator()<float,unsigned long const&,unsigned long &>(unsigned long const&,unsigned long &)::{lambda(float const*)#1}>((uint64_t)v21, &v27, *(float *)&v10);
      if (a2[2] != *(float *)&v10)
      {
        if (*((_QWORD *)a2 + 2) <= v14)
          std::terminate();
        v16 = (_DWORD *)(*((_QWORD *)a2 + 3) + 8 * v14);
        *v16 = v15;
        v16[1] = v10;
        ++v14;
      }
      ++v15;
    }
    while (v15 < *((_QWORD *)&v23 + 1));
  }
  result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan((unint64_t *)&v27, (_QWORD *)a2 + 2, v13, v14 - v13);
  v18 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (*v18 == 7)
    v19 = 0;
  else
    v19 = *v18 + 1;
  *v18 = v19;
  v20 = v28;
  *a1 = v27;
  a1[1] = v20;
  return result;
}

unint64_t *xgboost::predictor::AdapterView<xgboost::data::CSRArrayAdapter,8ul>::operator[](_QWORD *a1, float *a2, uint64_t a3)
{
  uint64_t v6;
  xgboost::data::CSRArrayAdapterBatch *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float *v12;
  unint64_t *result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  _BYTE v20[80];
  unint64_t v21;

  v6 = *(unsigned int *)(*(_QWORD *)a2 + 360);
  v7 = (xgboost::data::CSRArrayAdapterBatch *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  xgboost::data::CSRArrayAdapterBatch::GetLine(v7, a3, (uint64_t)v20);
  v8 = **((_QWORD **)a2 + 4) * v6;
  v9 = v8;
  if (v21)
  {
    v10 = 0;
    v9 = v8;
    do
    {
      xgboost::data::CSRArrayAdapterBatch::Line::GetElement((xgboost::data::CSRArrayAdapterBatch::Line *)v20, v10, (uint64_t)&v17);
      v11 = v19;
      if (a2[2] != v19)
      {
        if (*((_QWORD *)a2 + 2) <= v9)
          std::terminate();
        v12 = (float *)(*((_QWORD *)a2 + 3) + 8 * v9);
        *(_DWORD *)v12 = v18;
        v12[1] = v11;
        ++v9;
      }
      ++v10;
    }
    while (v10 < v21);
  }
  result = xgboost::common::Span<unsigned long,18446744073709551615ul>::subspan(&v17, (_QWORD *)a2 + 2, v8, v9 - v8);
  v14 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (*v14 == 7)
    v15 = 0;
  else
    v15 = *v14 + 1;
  *v14 = v15;
  v16 = v18;
  *a1 = v17;
  a1[1] = v16;
  return result;
}

uint64_t dmlc::io::LineSplitter::SeekRecordBegin(uint64_t a1, uint64_t (***a2)(_QWORD, char *, uint64_t))
{
  uint64_t v3;
  char v7;

  v3 = 0;
  v7 = 0;
  while ((**a2)(a2, &v7, 1))
  {
    ++v3;
    if (v7 == 13 || v7 == 10)
    {
      while ((**a2)(a2, &v7, 1))
      {
        if (v7 != 13 && v7 != 10)
          break;
        ++v3;
      }
      return v3;
    }
  }
  return v3;
}

const char *dmlc::io::LineSplitter::FindLastRecordBegin(dmlc::io::LineSplitter *this, const char *a2, const char *a3)
{
  const char *v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  int v9;
  int v10;
  char v13;

  v4 = a2;
  if (a2 == a3)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/dmlc/src/io/line_split.cc");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: begin != end", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v13);
  }
  v8 = a3 - 1;
  while (v8 != v4)
  {
    v10 = *(unsigned __int8 *)v8--;
    v9 = v10;
    if (v10 == 13 || v9 == 10)
      return v8 + 2;
  }
  return v4;
}

void sub_220EBE7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

BOOL dmlc::io::LineSplitter::ExtractNextRecord(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = (unsigned __int8 *)*a3;
  v4 = (unsigned __int8 *)a3[1];
  if ((unsigned __int8 *)*a3 != v4)
  {
    v5 = (unsigned __int8 *)*a3;
    while (1)
    {
      v6 = *v5;
      if (v6 == 10 || v6 == 13)
        break;
      if (++v5 == v4)
      {
        v5 = (unsigned __int8 *)a3[1];
        break;
      }
    }
    while (v5 != v4)
    {
      v8 = *v5;
      if (v8 != 13 && v8 != 10)
      {
        v10 = v5 - 1;
        goto LABEL_17;
      }
      ++v5;
    }
    v10 = (unsigned __int8 *)a3[1];
    v5 = v10;
LABEL_17:
    *v10 = 0;
    v11 = &v5[-*a3];
    *a2 = *a3;
    a2[1] = v11;
    *a3 = v5;
  }
  return v3 != v4;
}

uint64_t dmlc::io::InputSplitBase::NextRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + 112;
  do
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v4);
  while ((v5 & 1) == 0 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v4) & 1) != 0);
  return v5;
}

BOOL dmlc::io::InputSplitBase::NextChunk(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 14;
  while (1)
  {
    v5 = a1[14];
    v6 = a1[15];
    if (v5 != v6)
      break;
    if (((*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 96))(a1, v4) & 1) == 0)
      return v5 != v6;
  }
  *a2 = v5;
  a2[1] = v6 - v5;
  *v4 = v6;
  return v5 != v6;
}

uint64_t dmlc::InputSplit::NextBatch(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void dmlc::io::LineSplitter::~LineSplitter(dmlc::io::LineSplitter *this)
{
  dmlc::io::InputSplitBase::~InputSplitBase(this);
  JUMPOUT(0x227667068);
}

void sub_220EBE954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10B3C40F1CB0773);
  _Unwind_Resume(a1);
}

uint64_t dmlc::io::LineSplitter::IsTextParser(dmlc::io::LineSplitter *this)
{
  return 1;
}

uint64_t dmlc::io::InputSplitBase::NextChunkEx(dmlc::io::InputSplitBase *this, dmlc::io::InputSplitBase::Chunk *a2)
{
  return dmlc::io::InputSplitBase::Chunk::Load(a2, this, *((_QWORD *)this + 19));
}

uint64_t dmlc::io::InputSplitBase::NextBatchEx(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t xgboost::Metric::Create(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *Entry;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = xgboost::CreateMetricImpl<xgboost::MetricReg>(a1);
  if (!v4)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/metric.cc");
    v6 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v12);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown metric function ", 24);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v12);
  }
  *(_QWORD *)(v4 + 8) = a2;
  return v4;
}

void sub_220EBEA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t xgboost::CreateMetricImpl<xgboost::MetricReg>(uint64_t a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *p_str;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::string *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string __str;
  std::string *v23;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    __str = *(std::string *)a1;
LABEL_4:
    v21 = *(std::string *)a1;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    goto LABEL_4;
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_5:
  v2 = std::string::find(&__str, 64, 0);
  if (v2 != -1)
  {
    v3 = v2;
    std::string::basic_string(&v20, &__str, 0, v2, (std::allocator<char> *)&__p);
    dmlc::Registry<xgboost::MetricReg>::Get();
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v20;
    else
      v4 = (std::string *)v20.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v4);
    dmlc::Registry<xgboost::MetricReg>::Get();
    v5 = std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>((const void **)&__p.__r_.__value_.__l.__data_);
    if (v5 == &qword_253F37428)
      v6 = 0;
    else
      v6 = v5[7];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v6)
        goto LABEL_17;
    }
    else if (v6)
    {
LABEL_17:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&__p, &__str, v3 + 1, size, (std::allocator<char> *)&v23);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v23 = p_p;
      v11 = *(_QWORD *)(v6 + 96);
      if (!v11)
        std::__throw_bad_function_call[abi:ne180100]();
      v12 = (*(uint64_t (**)(uint64_t, std::string **))(*(_QWORD *)v11 + 48))(v11, &v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_28;
    }
    v12 = 0;
LABEL_28:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      p_str = &__str;
      goto LABEL_33;
    }
LABEL_37:
    std::string::operator=(&v21, &__str);
    v13 = 0;
    goto LABEL_38;
  }
  v7 = __str.__r_.__value_.__l.__size_;
  if (!__str.__r_.__value_.__l.__size_)
    goto LABEL_37;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_33:
  if (p_str->__r_.__value_.__s.__data_[v7 - 1] != 45)
    goto LABEL_37;
  std::string::basic_string(&v20, &__str, 0, v7 - 1, (std::allocator<char> *)&__p);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v21 = v20;
  v13 = "-";
LABEL_38:
  dmlc::Registry<xgboost::MetricReg>::Get();
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v21;
  else
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&v20, (char *)v14);
  dmlc::Registry<xgboost::MetricReg>::Get();
  v15 = std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>((const void **)&v20.__r_.__value_.__l.__data_);
  if (v15 == &qword_253F37428)
    v16 = 0;
  else
    v16 = v15[7];
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_46;
LABEL_49:
    v12 = 0;
    goto LABEL_50;
  }
  if (!v16)
    goto LABEL_49;
LABEL_46:
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  v17 = *(_QWORD *)(v16 + 96);
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 48))(v17, &v20);
LABEL_50:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v12;
}

void sub_220EBED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::GPUMetric::CreateGPUMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *__p[2];
  char v13;
  _QWORD v14[34];

  v4 = xgboost::CreateMetricImpl<xgboost::MetricGPUReg>(a1);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = a2;
  }
  else if (*(int *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/metric.cc");
    xgboost::ConsoleLogger::ConsoleLogger((xgboost::BaseLogger *)v14, (uint64_t)__p, 60, 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Cannot find a GPU metric builder for metric ", 44);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)". Resorting to the CPU builder", 30);
    xgboost::ConsoleLogger::~ConsoleLogger((xgboost::ConsoleLogger *)v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v5;
}

void sub_220EBEE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::CreateMetricImpl<xgboost::MetricGPUReg>(uint64_t a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *p_str;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::string *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string __str;
  std::string *v23;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    __str = *(std::string *)a1;
LABEL_4:
    v21 = *(std::string *)a1;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    goto LABEL_4;
  std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_5:
  v2 = std::string::find(&__str, 64, 0);
  if (v2 != -1)
  {
    v3 = v2;
    std::string::basic_string(&v20, &__str, 0, v2, (std::allocator<char> *)&__p);
    dmlc::Registry<xgboost::MetricGPUReg>::Get();
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v20;
    else
      v4 = (std::string *)v20.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v4);
    dmlc::Registry<xgboost::MetricGPUReg>::Get();
    v5 = std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>((const void **)&__p.__r_.__value_.__l.__data_);
    if (v5 == &qword_253F369A8)
      v6 = 0;
    else
      v6 = v5[7];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v6)
        goto LABEL_17;
    }
    else if (v6)
    {
LABEL_17:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&__p, &__str, v3 + 1, size, (std::allocator<char> *)&v23);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v23 = p_p;
      v11 = *(_QWORD *)(v6 + 96);
      if (!v11)
        std::__throw_bad_function_call[abi:ne180100]();
      v12 = (*(uint64_t (**)(uint64_t, std::string **))(*(_QWORD *)v11 + 48))(v11, &v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_28;
    }
    v12 = 0;
LABEL_28:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      p_str = &__str;
      goto LABEL_33;
    }
LABEL_37:
    std::string::operator=(&v21, &__str);
    v13 = 0;
    goto LABEL_38;
  }
  v7 = __str.__r_.__value_.__l.__size_;
  if (!__str.__r_.__value_.__l.__size_)
    goto LABEL_37;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_33:
  if (p_str->__r_.__value_.__s.__data_[v7 - 1] != 45)
    goto LABEL_37;
  std::string::basic_string(&v20, &__str, 0, v7 - 1, (std::allocator<char> *)&__p);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v21 = v20;
  v13 = "-";
LABEL_38:
  dmlc::Registry<xgboost::MetricGPUReg>::Get();
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v21;
  else
    v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&v20, (char *)v14);
  dmlc::Registry<xgboost::MetricGPUReg>::Get();
  v15 = std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>((const void **)&v20.__r_.__value_.__l.__data_);
  if (v15 == &qword_253F369A8)
    v16 = 0;
  else
    v16 = v15[7];
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_46;
LABEL_49:
    v12 = 0;
    goto LABEL_50;
  }
  if (!v16)
    goto LABEL_49;
LABEL_46:
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  v17 = *(_QWORD *)(v16 + 96);
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 48))(v17, &v20);
LABEL_50:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v12;
}

void sub_220EBF17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t dmlc::Registry<xgboost::MetricReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

__int128 *dmlc::Registry<xgboost::MetricGPUReg>::Get()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_9);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_9))
  {
    qword_253F369A8 = 0;
    unk_253F36980 = 0u;
    unk_253F36990 = 0u;
    xmmword_253F36970 = 0u;
    qword_253F369A0 = (uint64_t)&qword_253F369A8;
    qword_253F369B0 = 0;
    unk_253F369B8 = 850045863;
    unk_253F369C0 = 0u;
    unk_253F369D0 = 0u;
    unk_253F369E0 = 0u;
    qword_253F369F0 = 0;
    __cxa_atexit((void (*)(void *))dmlc::Registry<xgboost::MetricGPUReg>::~Registry, &xmmword_253F36970, &dword_220DF6000);
    __cxa_guard_release(&_MergedGlobals_9);
  }
  return &xmmword_253F36970;
}

uint64_t dmlc::Registry<xgboost::MetricGPUReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::MetricReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricReg *>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;

  v1 = qword_253F37428;
  if (!qword_253F37428)
    return &qword_253F37428;
  v3 = &qword_253F37428;
  do
  {
    v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37430, (const void **)(v1 + 32), a1);
    v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_253F37428
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F37430, a1, (const void **)v3 + 4))
  {
    return &qword_253F37428;
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::string,xgboost::MetricGPUReg *>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::MetricGPUReg *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::MetricGPUReg *>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;

  v1 = qword_253F369A8;
  if (!qword_253F369A8)
    return &qword_253F369A8;
  v3 = &qword_253F369A8;
  do
  {
    v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F369B0, (const void **)(v1 + 32), a1);
    v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_253F369A8
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_253F369B0, a1, (const void **)v3 + 4))
  {
    return &qword_253F369A8;
  }
  return v3;
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_refresh__(xgboost::tree *this)
{
  return 0;
}

uint64_t std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()()
{
  uint64_t v0;
  const char *v1;

  v0 = operator new();
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)v0 = off_24E6BAA18;
  *(_DWORD *)(v0 + 44) = 4;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  rabit::utils::Assert((rabit::utils *)1, "cannot initialize reduce handle twice", v1);
  *(_QWORD *)(v0 + 160) = rabit::ReducerSafeImpl<xgboost::tree::GradStats,&xgboost::tree::GradStats::Reduce>;
  return v0;
}

void sub_220EBF6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10F3C4086137120);
  _Unwind_Resume(a1);
}

void xgboost::tree::TreeRefresher::~TreeRefresher(void **this)
{
  void *v2;

  *this = off_24E6BAA18;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *this = off_24E6BAA18;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v2 = this[12];
  if (v2)
  {
    this[13] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227667068);
}

void xgboost::tree::TreeRefresher::LoadConfig(xgboost::tree::TreeRefresher *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::TreeRefresher *)((char *)this + 16), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220EBF85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::TreeRefresher::SaveConfig(xgboost::tree::TreeRefresher *this, xgboost::Json *a2)
{
  unsigned int **v3;
  void *__p[2];
  char v5;
  _QWORD v6[2];
  _QWORD *v7[3];

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::TreeRefresher *)((char *)this + 16), (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v3 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  v6[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v7, v7[1]);
}

void sub_220EBF904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void xgboost::tree::TreeRefresher::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];
  void **v3;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t xgboost::tree::TreeRefresher::CanModifyTree(xgboost::tree::TreeRefresher *this)
{
  return 1;
}

void xgboost::tree::TreeRefresher::Update(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _QWORD *v30;
  void *v31;
  double v32;
  int8x16_t v33;
  double v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  _QWORD *v39;
  uint64_t v40;
  float v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50[3];
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _BYTE v56[24];
  _BYTE *v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v54 = a3;
  if (a4[1] == *a4)
    return;
  v6 = *a2;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  memset(v50, 0, sizeof(v50));
  v49 = 1;
  v59 = 0u;
  *(_OWORD *)__p = 0u;
  std::vector<xgboost::RegTree::FVec>::resize(v50, 1uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = v52;
  v8 = ((char *)v52 - (char *)v51) / 24;
  if (v52 == v51)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v52) >> 3) >= 1 - v8)
    {
      v19 = &v52[3 * (1 - v8)];
      v20 = 24 - 24 * v8;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(v7, 0, 0, 0);
        v7 += 3;
        v20 -= 24;
      }
      while (v20);
      v52 = v19;
    }
    else
    {
      v13 = 0x5555555555555556 * ((v53 - (uint64_t)v51) >> 3);
      if (v13 <= 1)
        v13 = 1;
      if (0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v51) >> 3) >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      *(_QWORD *)&v60 = &v53;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)&v53, v14);
      v16 = 24 * v8;
      __p[0] = v15;
      __p[1] = &v15[24 * v8];
      *(void **)&v59 = __p[1];
      *((_QWORD *)&v59 + 1) = &v15[24 * v17];
      do
      {
        v18 = &v15[v16];
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(&v15[v16], 0, 0, 0);
        v16 += 24;
      }
      while (v16 != 24);
      *(_QWORD *)&v59 = v15 + 24;
      std::vector<std::vector<xgboost::tree::GradStats>>::__swap_out_circular_buffer((uint64_t *)&v51, __p);
      std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)__p);
    }
  }
  else if (v8 >= 2)
  {
    v9 = v51 + 3;
    if (v52 != v51 + 3)
    {
      v10 = v52;
      do
      {
        v12 = (void *)*(v10 - 3);
        v10 -= 3;
        v11 = v12;
        if (v12)
        {
          *(v7 - 2) = v11;
          operator delete(v11);
        }
        v7 = v10;
      }
      while (v10 != v9);
    }
    v52 = v9;
  }
  __p[0] = 0;
  __p[1] = (void *)850045863;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v21 = *a4;
  v22 = a4[1];
  if (*a4 == v22)
  {
    v23 = 0;
  }
  else
  {
    LODWORD(v23) = 0;
    do
    {
      v24 = *v21++;
      v23 = *(int *)(v24 + 12) + (uint64_t)(int)v23;
    }
    while (v21 != v22);
  }
  v55 = 0uLL;
  std::vector<xgboost::tree::GradStats>::resize((uint64_t)v51, v23, &v55);
  v25 = v51[1] - *v51;
  if (v25 >= 1)
    bzero((void *)*v51, 16 * (((unint64_t)v25 >> 4) - ((unint64_t)v25 > 0xF)) + 16);
  v26 = v50[0];
  std::vector<xgboost::RegTree::FVec::Entry>::resize(v50[0], *(unsigned int *)(**a4 + 24));
  v27 = *(_QWORD *)(v26 + 8) - *(_QWORD *)v26;
  if (v27 >= 1)
    memset(*(void **)v26, 255, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
  *(_BYTE *)(v26 + 24) = 1;
  dmlc::OMPException::Rethrow((std::exception_ptr *)__p);
  v29 = (_BYTE *)*v51;
  v28 = (_BYTE *)v51[1];
  v57 = 0;
  v30 = operator new(0x40uLL);
  *v30 = &off_24E6BAA88;
  v30[1] = &v54;
  if (v28 == v29)
    v31 = 0;
  else
    v31 = v29;
  v30[2] = a1;
  v30[3] = v50;
  v30[4] = a4;
  v30[5] = v6;
  v30[6] = &v51;
  v30[7] = &v49;
  v57 = v30;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 152), v31, (const char *)0x10, (v28 - v29) >> 4, (void (*)(void *))rabit::InvokeLambda, v56);
  v39 = v57;
  if (v57 == v56)
  {
    v40 = 4;
    v39 = v56;
    goto LABEL_40;
  }
  if (v57)
  {
    v40 = 5;
LABEL_40:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = *(float *)(a1 + 20);
  v43 = *a4;
  v42 = a4[1];
  v44 = v42 == *a4;
  *(float *)&v32 = v41 / (float)(unint64_t)(v42 - *a4);
  *(_DWORD *)(a1 + 20) = LODWORD(v32);
  if (!v44)
  {
    v45 = 0;
    do
    {
      v47 = *v43++;
      v46 = v47;
      v48 = (void *)*v51;
      if (v51[1] == *v51)
        v48 = 0;
      xgboost::tree::TreeRefresher::Refresh(a1, (uint64_t)v48 + 16 * v45, 0, v46, v32, v33, v34, v35, v36, v37, v38);
      v45 += *(_DWORD *)(v46 + 12);
    }
    while (v43 != v42);
  }
  *(float *)(a1 + 20) = v41;
  std::mutex::~mutex((std::mutex *)&__p[1]);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)__p);
  __p[0] = v50;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v51;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_220EBFDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::exception_ptr a25,uint64_t a26)
{
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer((uint64_t)&a25);
  a18.__ptr_ = &a11;
  std::vector<xgboost::RegTree::FVec>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a11 = &a14;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

const char *xgboost::tree::TreeRefresher::Name(xgboost::tree::TreeRefresher *this)
{
  return "refresh";
}

float64x2_t rabit::ReducerSafeImpl<xgboost::tree::GradStats,&xgboost::tree::GradStats::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t result;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *a1++;
      result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t xgboost::tree::TreeRefresher::Refresh(uint64_t result, uint64_t a2, int a3, uint64_t a4, double a5, int8x16_t a6, double a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11)
{
  int8x16_t v11;
  uint64_t v14;
  float64x2_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  float v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  float v26;
  int v27;
  float v28;
  float *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  double v43;
  float v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  float v55;
  float v56;
  double v57;
  float v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float v67;
  float v68;
  double v69;
  float v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float v78;
  int8x16_t v79;

  v14 = result;
  v15.f64[0] = NAN;
  v15.f64[1] = NAN;
  v79 = (int8x16_t)vnegq_f64(v15);
  while (1)
  {
    v16 = (double *)(a2 + 16 * a3);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(float *)(v14 + 48);
    v20 = v18 <= 0.0 || v18 < v19;
    a8.i64[0] = 0;
    if (!v20)
    {
      v21 = *(float *)(v14 + 56);
      v22 = v21;
      v20 = v17 < (float)-v21;
      v23 = v17 + v21;
      if (!v20)
        v23 = 0.0;
      v24 = v17 <= v22;
      v25 = v17 - v22;
      if (!v24)
        v23 = v25;
      *(double *)a8.i64 = -v23 / (v18 + *(float *)(v14 + 52));
      v26 = *(float *)(v14 + 60);
      if (v26 != 0.0)
      {
        *(double *)a9.i64 = v26;
        if (fabs(*(double *)a8.i64) > *(double *)a9.i64)
        {
          a10.i64[1] = v79.i64[1];
          a8.i64[0] = vbslq_s8(v79, a9, a8).u64[0];
        }
      }
    }
    v27 = a3;
    v28 = *(double *)a8.i64;
    v29 = (float *)(*(_QWORD *)(a4 + 208) + 16 * a3);
    v30 = v18;
    v29[1] = v30;
    v29[2] = v28;
    v31 = *(_QWORD *)(a4 + 160);
    v32 = v31 + 20 * a3;
    v35 = *(int *)(v32 + 4);
    v34 = (_QWORD *)(v32 + 4);
    v33 = v35;
    if ((_DWORD)v35 == -1)
      break;
    v36 = (double *)(a2 + 16 * v33);
    v37 = v36[1];
    v38 = 0.0;
    v39 = 0.0;
    if (v37 >= v19)
    {
      v40 = *v36;
      v41 = *(float *)(v14 + 60);
      if (v41 == 0.0)
      {
        v42 = *(float *)(v14 + 56);
        if (v42 == 0.0)
        {
          v43 = v40 * v40;
        }
        else
        {
          v49 = v42;
          if (v40 <= v42)
          {
            v51 = (float)-v42;
            v50 = 0.0;
            if (v40 < v51)
              v50 = v40 + v49;
          }
          else
          {
            v50 = v40 - v49;
          }
          v43 = v50 * v50;
        }
        v39 = v43 / (v37 + *(float *)(v14 + 52));
      }
      else
      {
        if (v37 <= 0.0)
        {
          v44 = *(float *)(v14 + 56);
          v48 = v37 + *(float *)(v14 + 52);
          a10.i64[0] = 0;
        }
        else
        {
          v44 = *(float *)(v14 + 56);
          v45 = v44;
          v46 = v40 + v44;
          if (v40 >= (float)-v44)
            v46 = 0.0;
          v24 = v40 <= v45;
          v47 = v40 - v45;
          if (v24)
            v47 = v46;
          v48 = v37 + *(float *)(v14 + 52);
          *(double *)a10.i64 = -v47 / v48;
          *(double *)v11.i64 = v41;
          if (fabs(*(double *)a10.i64) > *(double *)v11.i64)
            a10 = vbslq_s8(v79, v11, a10);
        }
        v39 = -(v48 * (*(double *)a10.i64 * *(double *)a10.i64) + (v40 + v40) * *(double *)a10.i64);
        if (v44 != 0.0)
          v39 = v39 + v44 * fabs(*(double *)a10.i64);
      }
    }
    v52 = (double *)(a2 + 16 * *(int *)(v31 + 20 * v27 + 8));
    v53 = v52[1];
    if (v53 >= v19)
    {
      v54 = *v52;
      v55 = *(float *)(v14 + 60);
      if (v55 == 0.0)
      {
        v56 = *(float *)(v14 + 56);
        if (v56 == 0.0)
        {
          v57 = v54 * v54;
        }
        else
        {
          v63 = v56;
          if (v54 <= v56)
          {
            v65 = (float)-v56;
            v64 = 0.0;
            if (v54 < v65)
              v64 = v54 + v63;
          }
          else
          {
            v64 = v54 - v63;
          }
          v57 = v64 * v64;
        }
        v38 = v57 / (v53 + *(float *)(v14 + 52));
      }
      else
      {
        if (v53 <= 0.0)
        {
          v58 = *(float *)(v14 + 56);
          v62 = v53 + *(float *)(v14 + 52);
          a10.i64[0] = 0;
        }
        else
        {
          v58 = *(float *)(v14 + 56);
          v59 = v58;
          v60 = v54 + v58;
          if (v54 >= (float)-v58)
            v60 = 0.0;
          v24 = v54 <= v59;
          v61 = v54 - v59;
          if (v24)
            v61 = v60;
          v62 = v53 + *(float *)(v14 + 52);
          *(double *)a10.i64 = -v61 / v62;
          *(double *)v11.i64 = v55;
          if (fabs(*(double *)a10.i64) > *(double *)v11.i64)
            a10.i64[0] = vbslq_s8(v79, v11, a10).u64[0];
        }
        v38 = -(v62 * (*(double *)a10.i64 * *(double *)a10.i64) + (v54 + v54) * *(double *)a10.i64);
        if (v58 != 0.0)
          v38 = v38 + v58 * fabs(*(double *)a10.i64);
      }
    }
    v66 = 0.0;
    if (v18 >= v19)
    {
      v67 = *(float *)(v14 + 60);
      if (v67 == 0.0)
      {
        v68 = *(float *)(v14 + 56);
        if (v68 == 0.0)
        {
          v69 = v17 * v17;
        }
        else
        {
          v75 = v68;
          if (v17 <= v68)
          {
            v77 = (float)-v68;
            v76 = 0.0;
            if (v17 < v77)
              v76 = v17 + v75;
          }
          else
          {
            v76 = v17 - v75;
          }
          v69 = v76 * v76;
        }
        v66 = v69 / (v18 + *(float *)(v14 + 52));
      }
      else
      {
        if (v18 <= 0.0)
        {
          v70 = *(float *)(v14 + 56);
          v74 = v18 + *(float *)(v14 + 52);
          a6.i64[0] = 0;
        }
        else
        {
          v70 = *(float *)(v14 + 56);
          v71 = v70;
          v72 = v17 + v70;
          if (v17 >= (float)-v70)
            v72 = 0.0;
          v24 = v17 <= v71;
          v73 = v17 - v71;
          if (v24)
            v73 = v72;
          v74 = v18 + *(float *)(v14 + 52);
          *(double *)a6.i64 = -v73 / v74;
          *(double *)a11.i64 = v67;
          if (fabs(*(double *)a6.i64) > *(double *)a11.i64)
            a6.i64[0] = vbslq_s8(v79, a11, a6).u64[0];
        }
        v66 = -(v74 * (*(double *)a6.i64 * *(double *)a6.i64) + (v17 + v17) * *(double *)a6.i64);
        if (v70 != 0.0)
          v66 = v66 + v70 * fabs(*(double *)a6.i64);
      }
    }
    v78 = v39 + v38 - v66;
    *v29 = v78;
    result = xgboost::tree::TreeRefresher::Refresh(v14, a2);
    a3 = *(_DWORD *)(*(_QWORD *)(a4 + 160) + 20 * v27 + 8);
  }
  if (*(_BYTE *)(v14 + 93))
  {
    *(float *)(v31 + 20 * v27 + 16) = *(float *)(v14 + 20) * v28;
    *v34 = -1;
  }
  return result;
}

uint64_t std::vector<std::vector<xgboost::tree::GradStats>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<xgboost::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost::tree::GradStats*,xgboost::tree::GradStats*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_220EC04AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<void *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost::tree::GradStats>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<xgboost::tree::GradStats>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<xgboost::tree::GradStats>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<xgboost::tree::GradStats>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<xgboost::tree::GradStats>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<xgboost::tree::GradStats>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost::tree::GradStats>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost::common::WQSummary<float,float>::Entry>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t rabit::InvokeLambda(rabit *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

void std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x227667068);
}

__n128 std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24E6BAA88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24E6BAA88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  std::string *Entry;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *ptr;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  signed int Next;
  uint64_t v43;
  float v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  float64x2_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::exception_ptr v86;
  _QWORD v87[6];
  std::exception_ptr v88;
  std::mutex v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  (****(void (*****)(_QWORD))(a1 + 8))(**(_QWORD **)(a1 + 8));
  v69 = (_QWORD *)a1;
  (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)(a1 + 8) + 72))(&v84);
  v82 = v84;
  v83 = v85;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SparsePage>::BatchIterator(&v80, 0);
  while ((xgboost::BatchIterator<xgboost::SparsePage>::operator!=(&v82) & 1) != 0)
  {
    v4 = (uint64_t **)xgboost::BatchIterator<xgboost::SparsePage>::operator*(&v82);
    v74 = **v4;
    v75 = *v4[1];
    v5 = (*v4)[1] - v74;
    if (v5)
    {
      v86.__ptr_ = (void *)((v5 >> 3) - 1);
      if ((unint64_t)v86.__ptr_ > 0xFFFFFFFE)
      {
        dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v88);
        if (v88.__ptr_)
        {
          Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
          dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_refresh.cc");
          v7 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
          v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: ", 14);
          v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"batch.Size() < std::numeric_limits<unsigned>::max()", 51);
          v10 = *((char *)v88.__ptr_ + 23);
          v11 = v10 >= 0 ? v88.__ptr_ : *(void **)v88.__ptr_;
          v12 = v10 >= 0 ? *((unsigned __int8 *)v88.__ptr_ + 23) : *((_QWORD *)v88.__ptr_ + 1);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
          ptr = v88.__ptr_;
          v88.__ptr_ = 0;
          if (ptr)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v88, (uint64_t)ptr);
        }
      }
    }
    v15 = **v4;
    v16 = (*v4)[1];
    v17 = (_QWORD *)v69[5];
    v71 = (uint64_t **)v69[4];
    v72 = (uint64_t *)v69[3];
    v79 = (uint64_t **)v69[6];
    v88.__ptr_ = 0;
    v89.__m_.__sig = 850045863;
    memset(v89.__m_.__opaque, 0, sizeof(v89.__m_.__opaque));
    v73 = ((unint64_t)(v16 - v15) >> 3) - 1;
    if (v16 != v15 && ((unint64_t)(v16 - v15) >> 3) != 1)
    {
      v19 = 0;
      v70 = v4;
      do
      {
        v20 = (uint64_t *)(v74 + 8 * v19);
        v22 = *v20;
        v21 = v20[1];
        if (!v75 && v21 != v22)
          std::terminate();
        v77 = *v20;
        v78 = v19;
        v23 = v21 - v22;
        v24 = v4[2];
        v25 = *v72;
        v76 = v21;
        v26 = 0;
        if (v21 != v22)
        {
          v27 = (_DWORD *)(v75 + 4 + 8 * v22);
          v28 = v23;
          do
          {
            v29 = *(v27 - 1);
            if (v29 < (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2)
            {
              *(_DWORD *)(*(_QWORD *)v25 + 4 * v29) = *v27;
              ++v26;
            }
            v27 += 2;
            --v28;
          }
          while (v28);
        }
        *(_BYTE *)(v25 + 24) = v26 != (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2;
        v30 = *v71;
        v31 = v71[1];
        if (*v71 != v31)
        {
          v32 = 0;
          v33 = ((_DWORD)v24 + v78);
          do
          {
            v34 = *v30;
            v35 = **v79;
            if ((*v79)[1] == v35)
              v35 = 0;
            v36 = (float64x2_t *)(v35 + 16 * v32);
            *v36 = vaddq_f64(*v36, vcvtq_f64_f32(*(float32x2_t *)(*v17 + 8 * v33)));
            v37 = *(_QWORD *)(v34 + 232);
            v87[0] = *(_QWORD *)(v34 + 240) - v37;
            v87[1] = v37;
            v38 = *(_QWORD *)(v34 + 256);
            v87[2] = (*(_QWORD *)(v34 + 264) - v38) >> 2;
            v87[3] = v38;
            v39 = *(_QWORD *)(v34 + 280);
            v87[4] = (*(_QWORD *)(v34 + 288) - v39) >> 4;
            v87[5] = v39;
            v40 = *(_QWORD *)(v34 + 160);
            if (*(_DWORD *)(v40 + 4) != -1)
            {
              v41 = 0;
              Next = 0;
              do
              {
                v43 = v40 + 20 * v41;
                v44 = *(float *)(*(_QWORD *)v25 + 4 * (*(_DWORD *)(v43 + 12) & 0x7FFFFFFF));
                Next = xgboost::predictor::GetNextNode<true,true>(v43, Next, LODWORD(v44) == -1, v87, v44);
                v41 = Next;
                v36[Next] = vaddq_f64(v36[Next], vcvtq_f64_f32(*(float32x2_t *)(*v17 + 8 * v33)));
                v40 = *(_QWORD *)(v34 + 160);
              }
              while (*(_DWORD *)(v40 + 20 * Next + 4) != -1);
            }
            v32 += *(_DWORD *)(v34 + 12);
            ++v30;
          }
          while (v30 != v31);
        }
        if (v76 != v77)
        {
          v45 = (unsigned int *)(v75 + 8 * v77);
          do
          {
            v47 = *v45;
            v45 += 2;
            v46 = v47;
            if (v47 < (unint64_t)((uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2))
              *(_DWORD *)(*(_QWORD *)v25 + 4 * v46) = -1;
            --v23;
          }
          while (v23);
        }
        *(_BYTE *)(v25 + 24) = 1;
        v4 = v70;
        v19 = v78 + 1;
      }
      while (v78 + 1 != v73);
    }
    dmlc::OMPException::Rethrow(&v88);
    std::mutex::~mutex(&v89);
    std::exception_ptr::~exception_ptr(&v88);
    xgboost::BatchIterator<xgboost::SparsePage>::operator++(&v82);
  }
  v48 = v81;
  if (v81)
  {
    v49 = (unint64_t *)&v81->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v83;
  if (v83)
  {
    v52 = (unint64_t *)&v83->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v85;
  if (v85)
  {
    v55 = (unint64_t *)&v85->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (unsigned int *)v69[7];
  v58 = *(uint64_t **)v69[6];
  v59 = *v58;
  v60 = v58[1] - *v58;
  v88.__ptr_ = 0;
  v89.__m_.__sig = 850045863;
  memset(v89.__m_.__opaque, 0, sizeof(v89.__m_.__opaque));
  if ((int)(v60 >> 4) >= 1)
  {
    v61 = 0;
    v62 = *v57;
    v63 = (v60 >> 4);
    v64 = v58 + 3;
    do
    {
      if ((int)v62 >= 2)
      {
        v65 = *(float64x2_t *)(v59 + 16 * v61);
        v66 = v64;
        v67 = v62 - 1;
        do
        {
          v68 = *v66;
          v66 += 3;
          v65 = vaddq_f64(v65, *(float64x2_t *)(v68 + 16 * v61));
          *(float64x2_t *)(v59 + 16 * v61) = v65;
          --v67;
        }
        while (v67);
      }
      ++v61;
    }
    while (v61 != v63);
  }
  dmlc::OMPException::Rethrow(&v88);
  std::mutex::~mutex(&v89);
  std::exception_ptr::~exception_ptr(&v88);
}

void sub_220EC0EF0()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220EC0F98);
}

void sub_220EC0EFC()
{
  uint64_t v0;
  std::mutex *v1;

  __cxa_end_catch();
  std::mutex::~mutex(v1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v0 - 168));
  JUMPOUT(0x220EC0F98);
}

void sub_220EC0F08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220EC0F90()
{
  JUMPOUT(0x220EC0F98);
}

uint64_t std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2},std::allocator<xgboost::tree::TreeRefresher::Update(xgboost::HostDeviceVector<xgboost::detail::GradientPairInternal<float>> *,xgboost::DMatrix *,std::vector<xgboost::RegTree *> const&)::{lambda(void)#2}>,void ()(void)>::target_type()
{
}

_QWORD *std::operator>>(_QWORD *a1, char **a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  __darwin_ct_rune_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  void *__p[2];
  char *v42;
  int v43;

  a2[1] = *a2;
  v4 = MEMORY[0x24BDAC740];
  while (1)
  {
    v5 = std::istream::peek();
    v6 = v5 << 24;
    v7 = (char)v5;
    if (v5 << 24 < 0)
    {
      std::istream::get();
      goto LABEL_9;
    }
    v8 = v4 + 4 * (char)v5;
    v10 = *(_DWORD *)(v8 + 60);
    v9 = (_DWORD *)(v8 + 60);
    if ((v10 & 0x400) != 0)
    {
      v11 = (_QWORD *)MEMORY[0x227666D2C](a1, __p);
      if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) == 0)
      {
        v12 = (unint64_t)a2[2];
        v13 = a2[1];
        if ((unint64_t)v13 >= v12)
        {
          v31 = *a2;
          v32 = (v13 - *a2) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
          v34 = v12 - (_QWORD)v31;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v35);
            v31 = *a2;
            v13 = a2[1];
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * v32];
          v38 = &v36[4 * v35];
          *(_DWORD *)v37 = __p[0];
          v14 = v37 + 4;
          while (v13 != v31)
          {
            v39 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v37 - 1) = v39;
            v37 -= 4;
          }
          *a2 = v37;
          a2[1] = v14;
          a2[2] = v38;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_DWORD *)v13 = __p[0];
          v14 = v13 + 4;
        }
        a2[1] = v14;
      }
      return a1;
    }
    std::istream::get();
    if (v6 == 671088640)
      break;
    if (v6 > 0x7F000000)
    {
LABEL_9:
      if (!__maskrune(v7, 0x4000uLL))
      {
LABEL_10:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
        return a1;
      }
    }
    else if ((*v9 & 0x4000) == 0)
    {
      goto LABEL_10;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  while (1)
  {
    v15 = std::istream::peek();
    if ((v15 << 24) <= 0x7F000000)
      break;
    if (!__maskrune((char)v15, 0x4000uLL))
      goto LABEL_20;
LABEL_19:
    std::istream::get();
  }
  if ((*(_DWORD *)(v4 + 4 * (char)v15 + 60) & 0x4000) != 0)
    goto LABEL_19;
LABEL_20:
  if (std::istream::peek() == 41)
  {
    std::istream::get();
LABEL_22:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
LABEL_24:
    v16 = (_QWORD *)MEMORY[0x227666D2C](a1, &v43);
    if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) != 0)
      goto LABEL_57;
    v17 = (char *)__p[1];
    if (__p[1] >= v42)
    {
      v19 = (char *)__p[0];
      v20 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
      v22 = v42 - (char *)__p[0];
      if ((v42 - (char *)__p[0]) >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v23);
        v19 = (char *)__p[0];
        v17 = (char *)__p[1];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = v43;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      __p[0] = v25;
      __p[1] = v18;
      v42 = &v24[4 * v23];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)__p[1] = v43;
      v18 = v17 + 4;
    }
    __p[1] = v18;
    do
    {
      while (1)
      {
        v27 = std::istream::get();
        if ((v27 << 24) <= 0x7F000000)
          break;
        if (!__maskrune((char)v27, 0x4000uLL))
          goto LABEL_46;
      }
    }
    while ((*(_DWORD *)(v4 + 4 * (char)v27 + 60) & 0x4000) != 0);
LABEL_46:
    if (v27 << 24 == 1275068416)
      v27 = std::istream::get();
    if (v27 << 24 == 738197504)
    {
      while (1)
      {
        v28 = std::istream::peek();
        v29 = v28 << 24;
        if ((v28 << 24) <= 0x7F000000)
        {
          if ((*(_DWORD *)(v4 + 4 * (char)v28 + 60) & 0x4000) == 0)
          {
LABEL_54:
            if (v29 == 687865856)
            {
              std::istream::get();
              goto LABEL_57;
            }
            goto LABEL_24;
          }
        }
        else if (!__maskrune((char)v28, 0x4000uLL))
        {
          goto LABEL_54;
        }
        std::istream::get();
      }
    }
    if (v27 << 24 != 687865856)
    {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
      goto LABEL_22;
    }
LABEL_57:
    v30 = *a2;
    if (*a2)
    {
      a2[1] = v30;
      operator delete(v30);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    a2[2] = v42;
  }
  return a1;
}

void sub_220EC14D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::ParseInteractionConstraint(uint64_t a1, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  xgboost::Value **v32;
  xgboost::Value **v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  unint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int **v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  std::string *v57;
  _QWORD *v58;
  _QWORD *v59;
  void **v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  std::string *Entry;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t result;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  _QWORD *v85;
  void *__p[2];
  unsigned __int8 v87;
  double v88;
  uint64_t v89;
  unsigned int *v90;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v4 = v3;
  }
  xgboost::Json::Load(a1, v4, 8, &v90);
  v84 = v90;
  v5 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(v90);
  v6 = v5[3] - v5[2];
  v7 = v6 >> 3;
  v8 = *a2;
  v9 = a2[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a2) >> 3);
  v11 = (v6 >> 3) - v10;
  v85 = v5;
  if (v6 >> 3 > v10)
  {
    v12 = a2[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3) >= v11)
    {
      bzero(v9, 24 * ((24 * v11 - 24) / 0x18) + 24);
      a2[1] = &v9[24 * ((24 * v11 - 24) / 0x18) + 24];
      goto LABEL_33;
    }
    if ((unint64_t)v6 >= 0x5555555555555551)
      std::vector<void *>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    v14 = 0x5555555555555556 * ((v12 - v8) >> 3);
    if (v14 > v7)
      v7 = v14;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v7;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(24 * v15);
    v17 = &v16[24 * v10];
    v18 = &v16[24 * v15];
    bzero(v17, 24 * ((24 * v11 - 24) / 0x18) + 24);
    v19 = &v17[24 * ((24 * v11 - 24) / 0x18) + 24];
    if (v9 == v8)
    {
      *a2 = v17;
      a2[1] = v19;
      a2[2] = v18;
    }
    else
    {
      do
      {
        v20 = *(_OWORD *)(v9 - 24);
        v9 -= 24;
        *(_OWORD *)(v17 - 24) = v20;
        v17 -= 24;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v9 + 2);
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
      }
      while (v9 != v8);
      v9 = *a2;
      v21 = a2[1];
      *a2 = v17;
      a2[1] = v19;
      a2[2] = v18;
      if (v21 != v9)
      {
        v22 = v21;
        v5 = v85;
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 3);
          v22 -= 24;
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v21 - 2) = v23;
            operator delete(v23);
          }
          v21 = v22;
        }
        while (v22 != v9);
        if (!v9)
          goto LABEL_33;
LABEL_32:
        operator delete(v9);
        goto LABEL_33;
      }
    }
    v5 = v85;
    if (!v9)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v6 >> 3 < v10)
  {
    v25 = &v8[24 * v7];
    if (v9 != v25)
    {
      v26 = a2[1];
      do
      {
        v28 = (void *)*((_QWORD *)v26 - 3);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *((_QWORD *)v9 - 2) = v27;
          operator delete(v27);
        }
        v9 = v26;
      }
      while (v26 != v25);
    }
    a2[1] = v25;
  }
LABEL_33:
  v29 = v5[2];
  if (v5[3] != v29)
  {
    v30 = 0;
    do
    {
      v31 = xgboost::Cast<xgboost::JsonArray const,xgboost::Value const>(*(_DWORD **)(v29 + 8 * v30));
      v33 = (xgboost::Value **)*((_QWORD *)v31 + 2);
      v32 = (xgboost::Value **)*((_QWORD *)v31 + 3);
      while (v33 != v32)
      {
        v34 = *((_DWORD *)*v33 + 3);
        if (v34 == 2)
        {
          v35 = *((_DWORD *)xgboost::Cast<xgboost::JsonInteger const,xgboost::Value const>(*v33) + 4);
          v36 = (uint64_t)&(*a2)[24 * v30];
          v38 = (_DWORD **)(v36 + 8);
          v37 = *(_DWORD **)(v36 + 8);
          v40 = (_QWORD *)(v36 + 16);
          v39 = *(_QWORD *)(v36 + 16);
          if ((unint64_t)v37 >= v39)
          {
            v42 = *(_DWORD **)v36;
            v43 = ((uint64_t)v37 - *(_QWORD *)v36) >> 2;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 1 > v44)
              v44 = v45 >> 1;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
              v46 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v40, v46);
              v37 = *v38;
              v42 = *(_DWORD **)v36;
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[4 * v43];
            *(_DWORD *)v48 = v35;
            v41 = v48 + 4;
            while (v37 != v42)
            {
              v49 = *--v37;
              *((_DWORD *)v48 - 1) = v49;
              v48 -= 4;
            }
            *(_QWORD *)v36 = v48;
            *v38 = v41;
            *v40 = &v47[4 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v37 = v35;
            v41 = v37 + 1;
          }
          *v38 = v41;
        }
        else if (v34 == 1)
        {
          __p[0] = 0;
          *(double *)__p = *((float *)xgboost::Cast<xgboost::JsonNumber const,xgboost::Value const>(*v33) + 4);
          v88 = floor(*(double *)__p);
          if (v88 != *(double *)__p)
          {
            dmlc::LogCheckFormat<double,double>(&v89);
            if (v89)
            {
              Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
              dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.cc");
              v69 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v88);
              v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: ", 14);
              v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"std::floor(d) == d", 18);
              v72 = *(char *)(v89 + 23);
              v73 = v72 >= 0 ? v89 : *(_QWORD *)v89;
              v74 = v72 >= 0 ? *(unsigned __int8 *)(v89 + 23) : *(_QWORD *)(v89 + 8);
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
              v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)": ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Found floating point number in interaction constraints", 54);
              dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v88);
              v77 = v89;
              v89 = 0;
              if (v77)
                std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v89, v77);
            }
          }
          v50 = (uint64_t)&(*a2)[24 * v30];
          v51 = *(double *)__p;
          v53 = (unsigned int **)(v50 + 8);
          v52 = *(unsigned int **)(v50 + 8);
          v55 = (_QWORD *)(v50 + 16);
          v54 = *(_QWORD *)(v50 + 16);
          if ((unint64_t)v52 >= v54)
          {
            v62 = *(unsigned int **)v50;
            v63 = ((uint64_t)v52 - *(_QWORD *)v50) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v65 = v54 - (_QWORD)v62;
            if (v65 >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v55, v66);
              v52 = *v53;
              v62 = *(unsigned int **)v50;
            }
            else
            {
              v67 = 0;
            }
            v78 = (unsigned int *)&v67[4 * v63];
            *v78 = v51;
            v56 = v78 + 1;
            while (v52 != v62)
            {
              v79 = *--v52;
              *--v78 = v79;
            }
            *(_QWORD *)v50 = v78;
            *v53 = v56;
            *v55 = &v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v52 = v51;
            v56 = v52 + 1;
          }
          *v53 = v56;
        }
        else
        {
          v57 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
          dmlc::LogMessageFatal::Entry::Init(v57, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/param.cc");
          v58 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v89);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Unknown value type for interaction constraint:", 46);
          xgboost::Value::TypeStr(*v33, __p);
          if ((v87 & 0x80u) == 0)
            v60 = __p;
          else
            v60 = (void **)__p[0];
          if ((v87 & 0x80u) == 0)
            v61 = v87;
          else
            v61 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          if ((char)v87 < 0)
            operator delete(__p[0]);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v89);
        }
        ++v33;
      }
      ++v30;
      v29 = v85[2];
    }
    while (v30 < (v85[3] - v29) >> 3);
  }
  result = (uint64_t)v84;
  if (v84)
  {
    v81 = v84 + 2;
    do
    {
      v82 = __ldxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      __dmb(9u);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
    }
  }
  return result;
}

void sub_220EC1B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a9)
  {
    v19 = a9 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      __dmb(9u);
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 8))(a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_hinge_obj__(xgboost::obj *this)
{
  return 0;
}

_QWORD *std::__function::__func<xgboost::obj::$_0,std::allocator<xgboost::obj::$_0>,xgboost::ObjFunction * ()(void)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6BAB88;
  result[1] = 0;
  return result;
}

void xgboost::obj::HingeObj::~HingeObj(xgboost::obj::HingeObj *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::obj::HingeObj::SaveConfig(xgboost::obj::HingeObj *this, xgboost::Json *a2)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  uint64_t v7;
  _QWORD v8[2];
  void *v9[2];
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(v6, "binary:hinge");
  v8[1] = 0;
  *(_OWORD *)v9 = *(_OWORD *)v6;
  v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v8[0] = off_24E6BE2B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v8);
  if (v5 < 0)
    operator delete(__p[0]);
  v8[0] = off_24E6BE2B8;
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_220EC1D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::HingeObj::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  std::string *v39;
  _QWORD *v40;
  std::string *Entry;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *ptr;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  std::exception_ptr v74;
  std::mutex v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v9 = **(_QWORD **)(a3 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  LODWORD(v72) = 0;
  v11 = v10 - v9;
  v73 = v11 >> 2;
  if (!v11)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v74);
    if (v74.__ptr_)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/hinge.cu");
      v42 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Check failed: ", 14);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"info.labels.Size() != 0U", 24);
      v45 = *((char *)v74.__ptr_ + 23);
      v46 = v45 >= 0 ? v74.__ptr_ : *(void **)v74.__ptr_;
      v47 = v45 >= 0 ? *((unsigned __int8 *)v74.__ptr_ + 23) : *((_QWORD *)v74.__ptr_ + 1);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"label set cannot be empty", 25);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
      ptr = v74.__ptr_;
      v74.__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v74, (uint64_t)ptr);
    }
  }
  v73 = ((*a2)[1] - **a2) >> 2;
  v72 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24)) >> 2;
  if (v73 != v72)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v74);
    if (v74.__ptr_)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/hinge.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v73);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"preds.Size() == info.labels.Size()", 34);
      v16 = *((char *)v74.__ptr_ + 23);
      v17 = v16 >= 0 ? v74.__ptr_ : *(void **)v74.__ptr_;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v74.__ptr_ + 23) : *((_QWORD *)v74.__ptr_ + 1);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"labels are not correctly provided", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"preds.size=", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", label.size=", 13);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v73);
      v23 = v74.__ptr_;
      v74.__ptr_ = 0;
      if (v23)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v74, (uint64_t)v23);
    }
  }
  v24 = ((*a2)[1] - **a2) >> 2;
  v73 = v24;
  v25 = *(uint64_t **)(a3 + 72);
  v27 = *v25;
  v26 = v25[1];
  v28 = v26 - *v25;
  if (v28)
  {
    v72 = v28 >> 2;
    if (v28 >> 2 != v24)
    {
      dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)&v74);
      if (v74.__ptr_)
      {
        v29 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        dmlc::LogMessageFatal::Entry::Init(v29, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/hinge.cu");
        v30 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v72);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: ", 14);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"info.weights_.Size() == ndata", 29);
        v33 = *((char *)v74.__ptr_ + 23);
        v34 = v33 >= 0 ? v74.__ptr_ : *(void **)v74.__ptr_;
        v35 = v33 >= 0 ? *((unsigned __int8 *)v74.__ptr_ + 23) : *((_QWORD *)v74.__ptr_ + 1);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v72);
        v38 = v74.__ptr_;
        v74.__ptr_ = 0;
        if (v38)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v74, (uint64_t)v38);
      }
    }
    v24 = v73;
  }
  v74.__ptr_ = 0;
  std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v24, &v74);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) & 0x80000000) != 0)
  {
    v51 = v73;
    v74.__ptr_ = 0;
    v75.__m_.__sig = 850045863;
    memset(v75.__m_.__opaque, 0, sizeof(v75.__m_.__opaque));
    if (v73)
    {
      v53 = *(_QWORD *)*a5;
      v52 = *(_QWORD *)(*a5 + 8);
      if (v53 || !v52)
      {
        v54 = **a2;
        v55 = (*a2)[1];
        if (v54 || !v55)
        {
          v56 = *(uint64_t **)(a3 + 24);
          v57 = *v56;
          v58 = v56[1];
          if (*v56 || !v58)
          {
            v59 = *(uint64_t **)(a3 + 72);
            v60 = *v59;
            v61 = v59[1];
            if (*v59 || !v61)
            {
              v62 = 0;
              v63 = (v52 - v53) >> 3;
              v64 = (v55 - v54) >> 2;
              v65 = (v58 - v57) >> 2;
              v66 = (v61 - v60) >> 2;
              v67 = (float *)(v53 + 4);
              while (v64 != v62)
              {
                if (v26 == v27)
                {
                  v68 = 1.0;
                }
                else
                {
                  if (v66 <= v62)
                    break;
                  v68 = *(float *)(v60 + 4 * v62);
                }
                if (v65 == v62 || v63 == v62)
                  break;
                v69 = *(float *)(v57 + 4 * v62) * 2.0 + -1.0;
                v70 = 1.1755e-38;
                if ((float)(*(float *)(v54 + 4 * v62) * v69) < 1.0)
                  v70 = v68;
                v71 = -(float)(v69 * v68);
                if ((float)(*(float *)(v54 + 4 * v62) * v69) >= 1.0)
                  v71 = 0.0;
                *(v67 - 1) = v71;
                *v67 = v70;
                ++v62;
                v67 += 2;
                if (v51 == v62)
                  goto LABEL_57;
              }
            }
          }
        }
      }
      std::terminate();
    }
LABEL_57:
    dmlc::OMPException::Rethrow(&v74);
    std::mutex::~mutex(&v75);
    std::exception_ptr::~exception_ptr(&v74);
  }
  else
  {
    v39 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    dmlc::LogMessageFatal::Entry::Init(v39, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v40 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v74);
  }
}

void sub_220EC22A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::exception_ptr a11)
{
  std::mutex *v11;

  std::mutex::~mutex(v11);
  std::exception_ptr::~exception_ptr(&a11);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::HingeObj::DefaultEvalMetric(xgboost::obj::HingeObj *this)
{
  return "error";
}

void xgboost::obj::HingeObj::PredTransform(uint64_t a1, float ***a2)
{
  float *v2;
  float *v3;
  BOOL v4;
  uint64_t v5;
  float v6;
  std::exception_ptr v7;
  std::mutex v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = **a2;
  v3 = (*a2)[1];
  v7.__ptr_ = 0;
  v8.__m_.__sig = 850045863;
  memset(v8.__m_.__opaque, 0, sizeof(v8.__m_.__opaque));
  if (v3 != v2)
  {
    if (v2)
      v4 = 1;
    else
      v4 = v3 == 0;
    if (v4)
    {
      v5 = v3 - v2;
      while (v5)
      {
        if (*v2 <= 0.0)
          v6 = 0.0;
        else
          v6 = 1.0;
        *v2++ = v6;
        if (!--v5)
          goto LABEL_13;
      }
    }
    std::terminate();
  }
LABEL_13:
  dmlc::OMPException::Rethrow(&v7);
  std::mutex::~mutex(&v8);
  std::exception_ptr::~exception_ptr(&v7);
}

void sub_220EC2418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::mutex *v9;

  std::mutex::~mutex(v9);
  std::exception_ptr::~exception_ptr(&a9);
  _Unwind_Resume(a1);
}

uint64_t xgboost::obj::HingeObj::Task(xgboost::obj::HingeObj *this)
{
  return 0;
}

uint64_t dmlc::Registry<xgboost::GradientBoosterReg>::~Registry(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void **v11;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3[v4];
      if (v5)
        break;
LABEL_16:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v3) >> 3))
        goto LABEL_17;
    }
    if (*(char *)(v5 + 127) < 0)
      operator delete(*(void **)(v5 + 104));
    v6 = *(_QWORD **)(v5 + 96);
    if (v6 == (_QWORD *)(v5 + 72))
    {
      v6 = (_QWORD *)(v5 + 72);
      v7 = 4;
    }
    else
    {
      if (!v6)
      {
LABEL_11:
        v11 = (void **)(v5 + 48);
        std::vector<dmlc::ParamFieldInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        MEMORY[0x227667068](v5, 0x1032C40EA5FD255);
        v3 = *(_QWORD **)a1;
        v2 = *(_QWORD *)(a1 + 8);
        goto LABEL_16;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_11;
  }
LABEL_17:
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  std::__tree<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::ParserFactoryReg<unsigned int,float> *>>>::destroy(*(char **)(a1 + 56));
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t xgboost::GradientBooster::Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  std::string *Entry;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  char v15;

  dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  dmlc::Registry<xgboost::GradientBoosterReg>::Get();
  v6 = (uint64_t *)std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::find<std::string>((uint64_t)&qword_253F37968, (const void **)a1);
  if (v6 == &qword_253F37970 || (v7 = v6[7]) == 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/gbm/gbm.cc");
    v9 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v15);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unknown gbm type ", 17);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = (const void *)a1;
    else
      v12 = *(const void **)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v15);
    v7 = 0;
  }
  return std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(v7 + 72, a3, a2);
}

void sub_220EC261C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::function<xgboost::GradientBooster * ()(xgboost::LearnerModelParam const*,xgboost::GenericParameter const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t xgboost::detail::ToCharsFloatImpl(xgboost::detail *this, float a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  char *v10;
  BOOL v11;
  unsigned int v12;

  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = (LODWORD(a2) >> 23);
  if ((_DWORD)v6 == 255 || (v6 | v5) == 0)
  {
    if ((_DWORD)v5)
    {
      *((_BYTE *)this + 2) = 78;
      *(_WORD *)this = 24910;
      return 3;
    }
    else
    {
      if ((LODWORD(a2) & 0x80000000) != 0)
        *(_BYTE *)this = 45;
      v10 = (char *)this + (LODWORD(a2) >> 31);
      if ((LODWORD(a2) >> 23))
      {
        *(_QWORD *)v10 = 0x7974696E69666E49;
        v11 = a2 < 0.0;
        v12 = 8;
      }
      else
      {
        v10[2] = 48;
        *(_WORD *)v10 = 17712;
        v11 = a2 < 0.0;
        v12 = 3;
      }
      if (v11)
        return v12 + 1;
      else
        return v12;
    }
  }
  else
  {
    v8 = xgboost::detail::PowerBaseComputer::Binary2Decimal(v5 | (v6 << 32));
    return xgboost::detail::RyuPrinter::PrintBase10Float(v8, LODWORD(a2) >> 31, this);
  }
}

unint64_t xgboost::detail::PowerBaseComputer::Binary2Decimal(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  __int16 v8;
  unint64_t v9[2];

  v1 = a1 | 0x800000;
  if (!HIDWORD(a1))
    v1 = a1;
  v2 = 4294967145;
  if (HIDWORD(a1))
    v2 = (HIDWORD(a1) - 152);
  v3 = (v1 & 1) == 0;
  if ((_DWORD)a1)
    v4 = 0;
  else
    v4 = HIDWORD(a1) >= 2;
  v5 = !v4;
  v8 = 0;
  v6 = xgboost::detail::PowerBaseComputer::ToDecimalBase((v1 & 1) == 0, v5, v2 | ((unint64_t)(~v5 + 4 * v1) << 32), (4 * v1) | ((unint64_t)(((4 * v1) | 2u) >> 1) << 33), v9, (BOOL *)&v8 + 1, (char *)&v8);
  return xgboost::detail::PowerBaseComputer::ShortestRepresentation(HIBYTE(v8), v8, v6, v3, v9[0], v9[1]);
}

uint64_t xgboost::detail::RyuPrinter::PrintBase10Float(uint64_t a1, int a2, _BYTE *a3)
{
  unsigned int v3;
  unsigned int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned __int16 v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;

  v3 = a1;
  if (a2)
  {
    *a3 = 45;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  if (a1 > 0x3B9AC9FF)
    __assert_rtn("OutputLength", "charconv.cc", 548, "v < Tens(9)");
  v5 = &a3[v4];
  if (a1 >= 0x5F5E100)
  {
    v6 = 9;
    goto LABEL_20;
  }
  if (a1 > 0x98967F)
  {
    v6 = 8;
    goto LABEL_20;
  }
  if (a1 > 0xF423F)
  {
    v6 = 7;
    goto LABEL_20;
  }
  if (a1 >> 5 > 0xC34)
  {
    v6 = 6;
    goto LABEL_20;
  }
  if (a1 >> 4 > 0x270)
  {
    v6 = 5;
LABEL_20:
    v7 = 0;
    v8 = &v5[v6];
    do
    {
      v9 = v3;
      v3 /= 0x2710u;
      v10 = v9 - 10000 * v3;
      v11 = &v8[-v7];
      *(_WORD *)(v11 - 1) = *((_WORD *)&xgboost::detail::kItoaLut + v10 % 0x64u);
      *(_WORD *)(v11 - 3) = *((_WORD *)&xgboost::detail::kItoaLut + v10 / 0x64u);
      v7 += 4;
    }
    while (v9 >= 0x5F5E100);
    goto LABEL_22;
  }
  if (a1 > 0x3E7)
  {
    v6 = 4;
  }
  else if (a1 > 0x63)
  {
    v6 = 3;
  }
  else if (a1 < 0xA)
  {
    v6 = 1;
  }
  else
  {
    v6 = 2;
  }
  v7 = 0;
  v8 = &v5[v6];
LABEL_22:
  if (v3 >= 0x64)
  {
    *(_WORD *)&v8[~(unint64_t)v7] = *((_WORD *)&xgboost::detail::kItoaLut + (unsigned __int16)v3 % 0x64u);
    v7 |= 2u;
    v3 = (unsigned __int16)v3 / 0x64u;
  }
  if (v3 < 0xA)
  {
    v13 = v3 + 48;
  }
  else
  {
    v12 = 2 * v3;
    a3[v6 + v4 - v7] = *((_BYTE *)&xgboost::detail::kItoaLut + (v12 & 0xFFFFFFFE) + 1);
    v13 = *((_BYTE *)&xgboost::detail::kItoaLut + v12);
  }
  *v5 = v13;
  if (v6 < 2)
  {
    v14 = 1;
  }
  else
  {
    v5[1] = 46;
    v14 = v6 + 1;
  }
  v15 = v14 + (unint64_t)v4;
  v16 = v15 + 1;
  a3[v15] = 69;
  v17 = v6 + HIDWORD(a1);
  if (((int)(v6 + HIDWORD(a1)) < 0) ^ __OFADD__(v6, HIDWORD(a1)) | (v6 + HIDWORD(a1) == 0))
  {
    a3[v16] = 45;
    LODWORD(v16) = v15 + 2;
    v18 = 1 - v17;
  }
  else
  {
    v18 = v17 - 1;
  }
  if (v18 < 0xA)
  {
    result = (v16 + 1);
    a3[(int)v16] = v18 + 48;
  }
  else
  {
    *(_WORD *)&a3[(int)v16] = *((_WORD *)&xgboost::detail::kItoaLut + v18);
    return (v16 + 2);
  }
  return result;
}

_BYTE *xgboost::detail::ItoaUnsignedImpl(_BYTE *this, char *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char v8;

  if (a3 >= 0x64)
  {
    v4 = (_DWORD)a2 - 1;
    do
    {
      v3 = a3 / 0x64;
      v5 = (char *)&xgboost::detail::kItoaLut + 2 * (a3 % 0x64);
      this[v4] = v5[1];
      this[v4 - 1] = *v5;
      v4 -= 2;
      v6 = a3 >> 4;
      a3 /= 0x64uLL;
    }
    while (v6 > 0x270);
  }
  else
  {
    v3 = a3;
  }
  if (v3 < 0xA)
  {
    v8 = v3 + 48;
  }
  else
  {
    v7 = (char *)&xgboost::detail::kItoaLut + 2 * v3;
    v8 = *v7;
    this[1] = v7[1];
  }
  *this = v8;
  return this;
}

char *xgboost::detail::ToCharsUnsignedImpl(xgboost::detail *this, xgboost::detail *a2, char *a3)
{
  char *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (char *)a2;
  if ((unint64_t)a3 >= 0xA)
  {
    v5 = 4;
    v6 = (unint64_t)a3;
    while (1)
    {
      if (v6 < 0x64)
      {
        v5 = (v5 - 2);
        goto LABEL_11;
      }
      if (v6 < 0x3E8)
        break;
      if (v6 >> 4 < 0x271)
        goto LABEL_11;
      v7 = v6 >> 5;
      v6 /= 0x2710uLL;
      v5 = (v5 + 4);
      if (v7 <= 0xC34)
      {
        v5 = (v5 - 3);
        goto LABEL_11;
      }
    }
    v5 = (v5 - 1);
  }
  else
  {
    v5 = 1;
  }
LABEL_11:
  if (a2 != this)
  {
    xgboost::detail::ItoaUnsignedImpl(this, (char *)v5, (unint64_t)a3);
    return (char *)this + v5;
  }
  return v3;
}

_BYTE *xgboost::detail::FromCharFloatImpl(_BYTE *this, const char *a2, float *a3, float *a4)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  xgboost::detail::RyuPowLogUtils *v17;
  float v18;
  unsigned int v19;
  signed int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  char v37;
  char v38;
  unsigned int v39;
  char v40;
  unsigned int v41;
  int v42;
  int v43;

  if (!(_DWORD)a2)
    return this;
  v5 = *this;
  v6 = v5 == 45;
  if (v6 >= (int)a2)
  {
    v8 = 0;
    v7 = 0;
    v15 = 0;
    v10 = (int)a2;
    v11 = (int)a2;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = 0;
  v9 = v5 == 45;
  v10 = (int)a2;
  v11 = (int)a2;
  while (1)
  {
    v12 = (char)this[v9];
    if (v12 == 46)
    {
      if (v10 != (_DWORD)a2)
        goto LABEL_38;
      v10 = v9;
      goto LABEL_11;
    }
    if ((v12 - 58) < 0xF6u)
      break;
    if (v8 > 8)
    {
LABEL_38:
      this += v9;
      return this;
    }
    v13 = v12 + 10 * v7;
    v7 = v13 - 48;
    if (v13 != 48)
      ++v8;
LABEL_11:
    if (a2 == ++v9)
    {
      v14 = 0;
      goto LABEL_20;
    }
  }
  if ((this[v9] | 0x20) != 0x65)
  {
    v15 = 0;
    v11 = (int)a2;
    v6 = v9;
    goto LABEL_14;
  }
  v6 = v9 + 1;
  if ((int)v9 + 1 < (int)a2 && ((v25 = this[v6], v25 == 43) || v25 == 45))
  {
    v15 = v25 == 45;
    v6 = v9 + 2;
  }
  else
  {
    v15 = 0;
  }
  v26 = (_DWORD)a2 - v6;
  if ((int)a2 <= v6)
  {
    v11 = v9;
LABEL_14:
    if (v6 < (int)a2)
    {
      this += v6;
      return this;
    }
    v14 = 0;
LABEL_18:
    if (v15)
      v14 = -v14;
LABEL_20:
    if (v10 >= v11)
      v16 = 0;
    else
      v16 = v11 + ~v10;
    if (!v7 || (v17 = (xgboost::detail::RyuPowLogUtils *)(v14 - v16), (int)v17 + v8 <= -46))
    {
      this = 0;
      v18 = -0.0;
      if (v5 != 45)
        v18 = 0.0;
LABEL_68:
      *a3 = v18;
      return this;
    }
    if ((int)v17 + v8 >= 40)
    {
LABEL_66:
      this = 0;
      v18 = INFINITY;
      if (v5 == 45)
        v18 = -INFINITY;
      goto LABEL_68;
    }
    v19 = __clz(v7);
    if ((v17 & 0x80000000) != 0)
    {
      v28 = v16 - v14;
      v20 = v14
          - v16
          - v19
          + ~xgboost::detail::RyuPowLogUtils::Log2Pow5((xgboost::detail::RyuPowLogUtils *)(v16 - v14))
          + 7;
      v29 = xgboost::detail::RyuPowLogUtils::Log2Pow5((xgboost::detail::RyuPowLogUtils *)-(int)v17);
      v30 = v20 - (_DWORD)v17;
      v23 = (((xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v28] * (unint64_t)v7) >> 32)
           + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v28]) * (unint64_t)v7) >> (v29 + v20 - v17 + 27);
      if (v20 >= (int)v17)
      {
        v24 = 0;
        if (v30 > 31 || __clz(__rbit32(v7)) < v30)
        {
LABEL_65:
          v33 = __clz(v23);
          v34 = (v20 - v33 + 158) & ~((int)(v20 - v33 + 158) >> 31);
          if (v34 < 0xFF)
          {
            if (v34 <= 1)
              v35 = 1;
            else
              v35 = v34;
            v36 = v35 - v20;
            v37 = v35 - v20 + 106;
            if (v36 - 150 < 0)
              __assert_rtn("FromCharFloatImpl", "charconv.cc", 914, "shift >= 0");
            v38 = v36 + 105;
            v39 = v23 >> v38;
            v40 = v24 ^ 1;
            if ((v23 & ~(-1 << v38)) != 0)
              v40 = 1;
            v41 = v23 >> v37;
            v42 = v41 & 1;
            if ((v40 & 1) != 0)
              v42 = 1;
            if ((v39 & 1) == 0)
              v42 = 0;
            if (v42 + v41 >= 0x1000001)
              __assert_rtn("FromCharFloatImpl", "charconv.cc", 929, "f_m2 <= (1u << (IEEE754::kFloatMantissaBits + 1))");
            this = 0;
            v43 = (v42 + v41) & 0x7FFFFF;
            if (v43)
              v42 = 0;
            *(_DWORD *)a3 = ((v5 == 45) << 31) | ((v42 + v34) << 23) | v43;
            return this;
          }
          goto LABEL_66;
        }
      }
      if (-858993459 * v7 <= 0x33333333)
      {
        v31 = 0;
        do
        {
          v7 /= 5u;
          ++v31;
        }
        while (-858993459 * v7 < 0x33333334);
      }
      else
      {
        v31 = 0;
      }
      v32 = v31 >= v28;
    }
    else
    {
      v20 = (_DWORD)v17 - v19 + xgboost::detail::RyuPowLogUtils::Log2Pow5(v17) + 7;
      v21 = v20 - (_DWORD)v17;
      v22 = v20 - (_DWORD)v17 + ~xgboost::detail::RyuPowLogUtils::Log2Pow5(v17);
      if ((int)(v22 + 61) < 0)
        __assert_rtn("FromCharFloatImpl", "charconv.cc", 857, "j >= 0");
      v23 = (((xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v17] * (unint64_t)v7) >> 32)
           + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v17])
           * (unint64_t)v7) >> (v22 + 29);
      if (v20 < (int)v17)
      {
        v24 = 1;
        goto LABEL_65;
      }
      if (v21 > 31)
      {
        v24 = 0;
        goto LABEL_65;
      }
      v32 = __clz(__rbit32(v7)) >= v21;
    }
    v24 = v32;
    goto LABEL_65;
  }
  v14 = 0;
  v27 = 0;
  this += v6;
  while ((*this - 58) >= 0xF6u && v27 <= 3)
  {
    v14 = (char)*this + 10 * v14 - 48;
    if (v14)
      ++v27;
    ++this;
    if (!--v26)
    {
      v11 = v9;
      goto LABEL_18;
    }
  }
  return this;
}

uint64_t xgboost::detail::RyuPowLogUtils::Log2Pow5(xgboost::detail::RyuPowLogUtils *this)
{
  if ((this & 0x80000000) != 0)
    __assert_rtn("Log2Pow5", "charconv.cc", 237, "e >= 0");
  if (this >= 0xDC9)
    __assert_rtn("Log2Pow5", "charconv.cc", 238, "e <= 3528");
  return (1217359 * (_DWORD)this) >> 19;
}

uint64_t xgboost::detail::PowerBaseComputer::ToDecimalBase(int a1, int a2, unint64_t a3, unint64_t a4, _DWORD *a5, BOOL *a6, char *a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  char v32;

  v7 = HIDWORD(a3);
  v8 = HIDWORD(a4);
  if ((a3 & 0x80000000) != 0)
  {
    v19 = -(int)a3;
    if (v19 > 0x8000)
      __assert_rtn("Log10Pow5", "charconv.cc", 311, "expoent <= 1 << 15");
    v20 = (unint64_t)(0xB2EFB2BD8218 * v19) >> 48;
    v21 = v19 - v20;
    v22 = xgboost::detail::RyuPowLogUtils::kFloatPow5Split[(v19 - v20)];
    v23 = (((v22 * (unint64_t)HIDWORD(a4)) >> 32) + HIDWORD(v22) * (unint64_t)HIDWORD(a4)) >> (v20 + 28 - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    a5[2] = (((v22 * (unint64_t)a4) >> 32)
           + HIDWORD(v22) * (unint64_t)a4) >> (v20
                                                                  + 28
                                                                  - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    a5[3] = v23;
    v24 = (((v22 * (unint64_t)HIDWORD(a3)) >> 32) + HIDWORD(v22) * (unint64_t)HIDWORD(a3)) >> (v20 + 28 - (((unint64_t)(0x949A784BCD1BLL * ((int)v19 - (int)v20)) >> 32) >> 14));
    *a5 = v20 + a3;
    a5[1] = v24;
    if ((_DWORD)v20)
    {
      if (((int)v23 - 1) / 0xAu <= v24 / 0xA)
      {
        v29 = xgboost::detail::RyuPowLogUtils::kFloatPow5Split[v21 + 1];
        v18 = ((((v29 * (unint64_t)a4) >> 32)
                            + HIDWORD(v29) * (unint64_t)a4) >> (v20
                                                                                   + 28
                                                                                   + ~((unint64_t)(0x949A784BCD1BLL * (v21 + 1)) >> 46)))
            % 0xA;
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      if (v20 > 1)
      {
        if (v20 > 0x1E)
          return v18;
        v27 = __clz(__rbit32(a4)) >= (int)v20 - 1;
        goto LABEL_30;
      }
    }
    else
    {
      LOBYTE(v18) = 0;
    }
    *a7 = 1;
    if (a1)
    {
      v30 = a2 == 1;
LABEL_37:
      *a6 = v30;
      return v18;
    }
    v31 = v23 - 1;
LABEL_41:
    a5[3] = v31;
    return v18;
  }
  if (a3 > 0x8000)
    __assert_rtn("Log10Pow2", "charconv.cc", 302, "e <= 1 << 15");
  v9 = (0x9A209A84FBCFLL * (unint64_t)a3) >> 49;
  v10 = v9 - a3;
  v11 = xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[v9];
  v12 = HIDWORD(v11);
  v13 = v11;
  v14 = v10 + ((0x949A784BCD1BLL * v9) >> 46) + 27;
  v15 = (((v11 * (unint64_t)v7) >> 32)
       + HIDWORD(v11) * (unint64_t)v7) >> v14;
  *a5 = v9;
  a5[1] = v15;
  v16 = (((v11 * (unint64_t)a4) >> 32)
       + HIDWORD(v11) * (unint64_t)a4) >> v14;
  v17 = (((v13 * (unint64_t)HIDWORD(a4)) >> 32) + v12 * (unint64_t)HIDWORD(a4)) >> v14;
  a5[2] = v16;
  a5[3] = v17;
  if (!(_DWORD)v9)
  {
    LOBYTE(v18) = 0;
LABEL_13:
    if ((-858993459 * a4) > 0x33333333)
    {
      if (a1)
      {
        if ((-858993459 * v7) <= 0x33333333)
        {
          v25 = 0;
          do
          {
            LODWORD(v7) = v7 / 5;
            ++v25;
          }
          while ((-858993459 * v7) < 0x33333334);
        }
        else
        {
          v25 = 0;
        }
        v30 = v25 >= v9;
        goto LABEL_37;
      }
      if ((-858993459 * HIDWORD(a4)) <= 0x33333333)
      {
        v28 = 0;
        do
        {
          LODWORD(v8) = v8 / 5;
          ++v28;
        }
        while ((-858993459 * v8) < 0x33333334);
      }
      else
      {
        v28 = 0;
      }
      v31 = v17 - (v28 >= v9);
      goto LABEL_41;
    }
    v26 = 0;
    do
    {
      LODWORD(a4) = a4 / 5;
      ++v26;
    }
    while ((-858993459 * a4) < 0x33333334);
    v27 = v26 >= v9;
LABEL_30:
    v32 = v27;
    *a7 = v32;
    return v18;
  }
  if (((int)v17 - 1) / 0xAu <= v15 / 0xA)
    v18 = ((((xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[(v9 - 1)]
                          * (unint64_t)a4) >> 32)
                        + HIDWORD(xgboost::detail::RyuPowLogUtils::kFloatPow5InvSplit[(v9 - 1)])
                        * (unint64_t)a4) >> (v10
                                                                + ((0x949A784BCD1BLL
                                                                                   * (unint64_t)(v9 - 1)) >> 46)
                                                                + 26))
        % 0xA;
  else
    LOBYTE(v18) = 0;
  if (v9 <= 9)
    goto LABEL_13;
  return v18;
}

unint64_t xgboost::detail::PowerBaseComputer::ShortestRepresentation(int a1, int a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v16;
  BOOL v17;
  unint64_t v18;

  v6 = HIDWORD(a5);
  v7 = HIDWORD(a6) / 0xA;
  v8 = HIDWORD(a5) / 0xA;
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    if (v7 <= v8)
    {
      v9 = 0;
      v14 = a6;
    }
    else
    {
      v9 = 0;
      v11 = HIDWORD(a5) / 0xA;
      v12 = HIDWORD(a5);
      do
      {
        LODWORD(v6) = v11;
        HIDWORD(v13) = -858993459 * v12;
        LODWORD(v13) = -858993459 * v12;
        a1 = a1 & ((v13 >> 1) < 0x1999999A);
        a2 = a2 & (a3 == 0);
        v14 = a6 / 0xA;
        a3 = a6 % 0xA;
        ++v9;
        v7 /= 0xAu;
        v11 /= 0xAu;
        LODWORD(a6) = a6 / 0xA;
        LODWORD(v12) = v6;
      }
      while (v7 > v11);
    }
    if (a1)
      v17 = v6 % 0xA == 0;
    else
      v17 = 0;
    if (v17)
    {
      do
      {
        a2 = a2 & (a3 == 0);
        LODWORD(a6) = v14 / 0xA;
        a3 = v14 % 0xA;
        LODWORD(v6) = v6 / 0xA;
        ++v9;
        HIDWORD(v18) = -858993459 * v6;
        LODWORD(v18) = -858993459 * v6;
        v14 /= 0xAu;
      }
      while ((v18 >> 1) < 0x1999999A);
    }
    else
    {
      LODWORD(a6) = v14;
    }
    v16 = ((_DWORD)a6 == (_DWORD)v6) & ~(a1 & a4) | ((a3 != 5) | ~a2 | a6) & (a3 > 4);
  }
  else
  {
    if (v7 <= v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = a6;
        LODWORD(v6) = v8;
        LODWORD(a6) = a6 / 0xA;
        ++v9;
        v7 /= 0xAu;
        v8 /= 0xAu;
      }
      while (v7 > v8);
      a3 = (v10 - 10 * a6);
    }
    v16 = (_DWORD)a6 == (_DWORD)v6 || a3 > 4;
  }
  return (a6 + v16) | ((unint64_t)(v9 + a5) << 32);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_sync__(xgboost::tree *this)
{
  return 0;
}

_QWORD *std::__function::__func<xgboost::tree::$_0,std::allocator<xgboost::tree::$_0>,xgboost::TreeUpdater * ()(xgboost::ObjInfo)>::operator()()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24E6BAC90;
  result[1] = 0;
  return result;
}

{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  bzero(v0, 0x2D0uLL);
  *((_DWORD *)v0 + 11) = 4;
  *((_OWORD *)v0 + 6) = 0u;
  *((_OWORD *)v0 + 7) = 0u;
  *((_OWORD *)v0 + 8) = 0u;
  *(_OWORD *)(v0 + 21) = 0u;
  *(_OWORD *)(v0 + 23) = 0u;
  *(_OWORD *)(v0 + 25) = 0u;
  *(_OWORD *)(v0 + 27) = 0u;
  *(_OWORD *)(v0 + 29) = 0u;
  *(_OWORD *)(v0 + 31) = 0u;
  v0[39] = 0;
  *(_OWORD *)(v0 + 19) = 0u;
  *(_OWORD *)(v0 + 33) = 0u;
  *(_OWORD *)(v0 + 35) = 0u;
  *(_OWORD *)(v0 + 37) = 0u;
  *(_OWORD *)(v0 + 41) = 0u;
  *(_OWORD *)(v0 + 43) = 0u;
  *(_OWORD *)(v0 + 45) = 0u;
  *(_OWORD *)(v0 + 47) = 0u;
  *(_OWORD *)(v0 + 49) = 0u;
  *(_OWORD *)(v0 + 51) = 0u;
  v0[51] = rabit::ReducerSafeImpl<xgboost::tree::GradStats,&xgboost::tree::GradStats::Reduce>;
  *((_OWORD *)v0 + 27) = 0u;
  v0[56] = 0;
  *v0 = &off_24E6BB178;
  *(_OWORD *)(v0 + 89) = 0u;
  v0[91] = 0;
  *(_OWORD *)(v0 + 57) = 0u;
  *(_OWORD *)(v0 + 59) = 0u;
  *(_OWORD *)(v0 + 61) = 0u;
  *(_OWORD *)(v0 + 63) = 0u;
  *(_OWORD *)(v0 + 65) = 0u;
  *(_OWORD *)(v0 + 67) = 0u;
  *(_OWORD *)(v0 + 69) = 0u;
  *(_OWORD *)(v0 + 71) = 0u;
  *(_OWORD *)(v0 + 73) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  *(_OWORD *)(v0 + 77) = 0u;
  *(_OWORD *)(v0 + 79) = 0u;
  *(_OWORD *)(v0 + 81) = 0u;
  *(_OWORD *)(v0 + 83) = 0u;
  *(_OWORD *)(v0 + 85) = 0u;
  v0[87] = 0;
  v0[86] = rabit::SerializeReducerFuncImpl<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>;
  v0[94] = 0;
  *((_OWORD *)v0 + 46) = 0u;
  return v0;
}

void xgboost::tree::TreeSyncher::~TreeSyncher(xgboost::tree::TreeSyncher *this)
{
  JUMPOUT(0x227667068);
}

void xgboost::tree::TreeSyncher::Update(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  void *Engine;
  rabit::engine *v6;
  void *v7;
  rabit::engine *v8;
  std::string::size_type size;
  void *v10;
  rabit::engine *v11;
  std::string::size_type v12;
  int v13;
  std::string::size_type v14;
  void *v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t (**v21[2])(_QWORD, uint64_t, uint64_t);
  uint64_t v22;
  std::string v23;
  std::string::size_type v24;

  Engine = rabit::engine::GetEngine(a1);
  v6 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)Engine + 72))(Engine);
  if ((_DWORD)v6 != 1)
  {
    memset(&v23, 0, sizeof(v23));
    v21[0] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&unk_24E6B8398;
    v21[1] = (uint64_t (**)(_QWORD, uint64_t, uint64_t))&v23;
    v22 = 0;
    v7 = rabit::engine::GetEngine(v6);
    v8 = (rabit::engine *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 64))(v7);
    if (!(_DWORD)v8)
    {
      v19 = *a4;
      v20 = a4[1];
      while (v19 != v20)
        v8 = (rabit::engine *)xgboost::RegTree::Save(*v19++, (uint64_t)v21);
    }
    v22 = 0;
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v23.__r_.__value_.__l.__size_;
    v24 = size;
    v10 = rabit::engine::GetEngine(v8);
    v11 = (rabit::engine *)(*(uint64_t (**)(void *, std::string::size_type *, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, &v24, 8, 0);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      v12 = v23.__r_.__value_.__l.__size_;
    if (v12 != v24)
    {
      std::string::resize(&v23, v24, 0);
      v12 = v24;
    }
    if (v12)
    {
      v13 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      v14 = v23.__r_.__value_.__r.__words[0];
      v15 = rabit::engine::GetEngine(v11);
      if (v13 >= 0)
        v16 = &v23;
      else
        v16 = (std::string *)v14;
      (*(void (**)(void *, std::string *, std::string::size_type, _QWORD))(*(_QWORD *)v15 + 16))(v15, v16, v12, 0);
    }
    v18 = *a4;
    v17 = a4[1];
    while (v18 != v17)
      xgboost::RegTree::Load(*v18++, v21);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_220EC3864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *xgboost::tree::TreeSyncher::Name(xgboost::tree::TreeSyncher *this)
{
  return "prune";
}

uint64_t xgboost::obj::__dmlc_registry_file_tag_multiclass_obj__(xgboost::obj *this)
{
  return 0;
}

void sub_220EC3940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407F06B5FFLL);
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::~SoftmaxMultiClassObj(xgboost::obj::SoftmaxMultiClassObj *this)
{
  *(_QWORD *)this = &off_24E6BAD80;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 4);
}

{
  *(_QWORD *)this = &off_24E6BAD80;
  xgboost::HostDeviceVector<int>::~HostDeviceVector((uint64_t *)this + 4);
  JUMPOUT(0x227667068);
}

void xgboost::obj::SoftmaxMultiClassObj::LoadConfig(xgboost::obj::SoftmaxMultiClassObj *this, const xgboost::Json *a2)
{
  _DWORD **v4;
  xgboost::obj::SoftmaxMultiClassParam *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _BYTE *v13;
  int v14;
  void *__p[2];
  char v16;
  std::vector<std::pair<std::string, std::string>> v17;
  std::vector<std::pair<std::string, std::string>> *v18;
  _QWORD *v19[2];
  __int128 *v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_multiclass_param");
  v4 = (_DWORD **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  v5 = (xgboost::obj::SoftmaxMultiClassParam *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*v4);
  v19[0] = 0;
  v19[1] = 0;
  v18 = (std::vector<std::pair<std::string, std::string>> *)v19;
  v6 = (_QWORD *)*((_QWORD *)v5 + 2);
  v7 = (_QWORD *)((char *)v5 + 24);
  if (v6 != (_QWORD *)((char *)v5 + 24))
  {
    do
    {
      v8 = (char *)xgboost::Cast<xgboost::JsonString const,xgboost::Value const>((_DWORD *)v6[7]);
      v20 = (__int128 *)(v6 + 4);
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v20);
      v5 = (xgboost::obj::SoftmaxMultiClassParam *)std::string::operator=((std::string *)(v9 + 7), (const std::string *)(v8 + 16));
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  v14 = *((unsigned __int8 *)this + 20);
  v13 = (char *)this + 20;
  memset(&v17, 0, sizeof(v17));
  xgboost::obj::SoftmaxMultiClassParam::__MANAGER__(v5);
  if (v14)
  {
    dmlc::parameter::ParamManager::RunUpdate<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36A10, (uint64_t)v13, v18, v19, 0, &v17, 0);
  }
  else
  {
    dmlc::parameter::ParamManager::RunInit<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)&stru_253F36A10, (uint64_t)v13, v18, v19, &v17, 0);
    *v13 = 1;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19[0]);
  v18 = &v17;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_220EC3BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 56) = &a16;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::SaveConfig(xgboost::obj::SoftmaxMultiClassObj *this, xgboost::Json *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  BOOL v10;
  unsigned int **v11;
  void *v12[2];
  uint64_t *v13;
  _QWORD *v14[2];
  void *v15;
  const void **v16;
  void *v17[2];
  uint64_t *v18;
  void *__p;
  _QWORD *v20;
  char v21;
  void **v22;

  if (*((_BYTE *)this + 16))
    std::string::basic_string[abi:ne180100]<0>(v12, "multi:softprob");
  else
    std::string::basic_string[abi:ne180100]<0>(v12, "multi:softmax");
  v15 = off_24E6BE2B8;
  v16 = 0;
  *(_OWORD *)v17 = *(_OWORD *)v12;
  v18 = v13;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = (uint64_t *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &__p);
  v5 = xgboost::Json::operator=(v4, (uint64_t)&v15);
  if (v21 < 0)
    operator delete(__p);
  v15 = off_24E6BE2B8;
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  v12[1] = (void *)0x300000000;
  v12[0] = &off_24E6BE1D0;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  xgboost::obj::SoftmaxMultiClassParam::__MANAGER__((xgboost::obj::SoftmaxMultiClassParam *)v5);
  dmlc::parameter::ParamManager::GetDict((dmlc::parameter::ParamManager *)&stru_253F36A10, (char *)this + 20, (std::vector<std::pair<std::string, std::string>> *)&v15);
  std::map<std::string,std::string>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string> *>>((uint64_t)&__p, (const void **)v15, v16);
  v22 = &v15;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v6 = (char *)__p;
  if (__p != &v20)
  {
    do
    {
      xgboost::JsonString::JsonString(&v15, (__int128 *)(v6 + 56));
      v22 = (void **)(v6 + 32);
      v7 = std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v13, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
      xgboost::Json::operator=(v7 + 7, (uint64_t)&v15);
      v15 = off_24E6BE2B8;
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      v8 = (char *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (char *)&v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v20);
  std::string::basic_string[abi:ne180100]<0>(&v15, "softmax_multiclass_param");
  v11 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, &v15);
  xgboost::Json::operator=(v11, (uint64_t)v12);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v15);
  v12[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_220EC3EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void xgboost::obj::SoftmaxMultiClassObj::Configure(_BYTE *a1, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v3 = a1 + 20;
  if (a1[20])
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    xgboost::obj::SoftmaxMultiClassParam::__MANAGER__((xgboost::obj::SoftmaxMultiClassParam *)a1);
    dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36A10, (uint64_t)v3, *a2, a2[1], 0, &v4, 0);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    xgboost::obj::SoftmaxMultiClassParam::__MANAGER__((xgboost::obj::SoftmaxMultiClassParam *)a1);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(&stru_253F36A10, (uint64_t)v3, *a2, a2[1], &v4, 0);
    *v3 = 1;
  }
  v7 = (void **)&v4;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_220EC401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void xgboost::obj::SoftmaxMultiClassObj::GetGradient(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  int v9;
  std::vector<int> *v10;
  void ***v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::string *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  std::string *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  float v60;
  double v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  float v67;
  uint64_t v68;
  unint64_t v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  std::string *Entry;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _DWORD *v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  float *v99;
  std::vector<int>::value_type __x[2];
  std::mutex v101;
  void *__p;
  char v103;
  _QWORD v104[21];

  v104[19] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
  if (v5)
  {
    v6 = a3;
    v7 = a2;
    v8 = ((*a2)[1] - **a2) >> 2;
    v89 = *(_DWORD *)(a1 + 24);
    v94 = v89;
    v85 = a1;
    if (v8 != (v5 >> 2) * v89)
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/multiclass_obj.cu");
      v75 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Check failed: preds.Size() == (static_cast<size_t>(param_.num_class) * info.labels.Size())", 90);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)": ", 2);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"SoftmaxMultiClassObj: label size and pred size does not match.\n", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"label.Size() * num_class: ", 26);
      v79 = (_QWORD *)std::ostream::operator<<();
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"num_class: ", 11);
      v81 = (_QWORD *)std::ostream::operator<<();
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"preds.Size(): ", 14);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      a1 = v85;
      v8 = ((*v7)[1] - **v7) >> 2;
      v94 = *(int *)(v85 + 24);
      v89 = *(_DWORD *)(v85 + 24);
    }
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
    v11 = (void ***)(a1 + 32);
    v10 = *(std::vector<int> **)(a1 + 32);
    __x[0] = 0;
    std::vector<int>::resize(v10, 1uLL, __x);
    v12 = ((*v7)[1] - **v7) >> 2;
    *(_QWORD *)__x = 0;
    std::vector<xgboost::detail::GradientPairInternal<float>>::resize(*a5, v12, __x);
    v13 = **v11;
    v14 = (_BYTE *)(*v11)[1] - v13;
    if (v14 >= 1)
      memset_pattern16(v13, &unk_220F5E2F0, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
    v15 = *(uint64_t **)(v6 + 72);
    v92 = v8 / v94;
    v87 = *v15;
    v88 = v15[1];
    v16 = v88 - *v15;
    if (v88 != v87 && v16 >> 2 != v92)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)" (", 2);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vs. ", 5);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") ", 2);
      v19 = operator new();
      std::stringbuf::str();
      v98 = v19;
      *(_QWORD *)__x = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)__x + *(_QWORD *)(*(_QWORD *)__x - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v101.__m_.__sig = MEMORY[0x24BEDB848] + 16;
      if (v103 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x227666FE4](v104);
      if (v98)
      {
        v20 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        dmlc::LogMessageFatal::Entry::Init(v20, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/multiclass_obj.cu");
        v21 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: ", 14);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"info.weights_.Size() == ndata", 29);
        v24 = *(char *)(v98 + 23);
        if (v24 >= 0)
          v25 = v98;
        else
          v25 = *(_QWORD *)v98;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v98 + 23);
        else
          v26 = *(_QWORD *)(v98 + 8);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Number of weights should be equal to number of data points.", 59);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        v29 = v98;
        v98 = 0;
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v98, v29);
      }
    }
    if (v9 < 0)
    {
      *(_QWORD *)__x = 0;
      v101.__m_.__sig = 850045863;
      memset(v101.__m_.__opaque, 0, sizeof(v101.__m_.__opaque));
      v32 = v85;
      if (v8 >= v94)
      {
        v38 = 0;
        v39 = 0;
        v40 = 4;
        v83 = v7;
        v84 = v6;
        while (1)
        {
          v41 = *(_QWORD *)(*a5 + 8);
          if (*(_QWORD *)*a5)
            v42 = 1;
          else
            v42 = v41 == 0;
          if (!v42)
            goto LABEL_77;
          v93 = *(_QWORD *)*a5;
          v43 = *(uint64_t **)(v6 + 24);
          v44 = *v43;
          v45 = v43[1];
          if (!*v43 && v45 != 0)
            goto LABEL_77;
          v48 = **v7;
          v47 = (*v7)[1];
          v97[0] = (v47 - v48) >> 2;
          v97[1] = v48;
          if (!v48 && v47 != 0)
            goto LABEL_77;
          v96 = v40;
          v50 = *(uint64_t **)(v6 + 72);
          v52 = *v50;
          v51 = v50[1];
          if (!*v50 && v51 != 0)
            goto LABEL_77;
          v54 = *(_QWORD **)(v32 + 32);
          v56 = (_DWORD *)*v54;
          v55 = (_DWORD *)v54[1];
          v91 = v56;
          if (!v56)
          {
            if (v55)
              goto LABEL_77;
          }
          v90 = v55;
          xgboost::common::Span<float,18446744073709551615ul>::subspan(v97, v39 * v94, v94, (unint64_t *)&v98);
          v57 = v98;
          if (v98)
          {
            v86 = v41;
            v58 = 0;
            v59 = v99;
            v60 = 1.1755e-38;
            do
              v60 = fmaxf(v99[v58++], v60);
            while (v98 != v58);
            v61 = 0.0;
            v62 = v98;
            do
            {
              v63 = *v59++;
              v61 = v61 + expf(v63 - v60);
              --v62;
            }
            while (v62);
            v64 = v61;
            v32 = v85;
            v41 = v86;
          }
          else
          {
            v64 = 0.0;
            v60 = 1.1755e-38;
          }
          if ((v45 - v44) >> 2 <= v39)
            goto LABEL_77;
          v65 = *(float *)(v44 + 4 * v39);
          if (v65 < 0.0 || v65 >= (float)v89)
          {
            if (v90 == v91)
              goto LABEL_77;
            *v91 = 0;
            v65 = 0.0;
          }
          if (v88 == v87)
          {
            v67 = 1.0;
          }
          else
          {
            if ((v51 - v52) >> 2 <= v39)
              goto LABEL_77;
            v67 = *(float *)(v52 + 4 * v39);
          }
          if (v89 >= 1)
            break;
LABEL_75:
          ++v39;
          v7 = v83;
          v40 = v96 + 8 * v89;
          v38 += v89;
          v6 = v84;
          if (v39 == v92)
            goto LABEL_21;
        }
        v68 = 0;
        v69 = (v41 - v93) >> 3;
        v70 = v99;
        v71 = (float *)(v93 + v96);
        while (v57 != v68 && v69 > v38 + v68)
        {
          v72 = expf(v70[v68] - v60) / v64;
          v73 = v72 + -1.0;
          if (v65 != (float)(int)v68)
            v73 = v72;
          *(v71 - 1) = v67 * v73;
          *v71 = fmaxf(v67 * (float)((float)(v72 + v72) * (float)(1.0 - v72)), 1.0e-16);
          ++v68;
          v71 += 2;
          if (v89 == v68)
            goto LABEL_75;
        }
LABEL_77:
        std::terminate();
      }
LABEL_21:
      dmlc::OMPException::Rethrow((std::exception_ptr *)__x);
      std::mutex::~mutex(&v101);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)__x);
    }
    else
    {
      v30 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      dmlc::LogMessageFatal::Entry::Init(v30, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
      v31 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
      std::ostream::operator<<();
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
      v32 = v85;
    }
    v33 = *(_QWORD *)(v32 + 32);
    v34 = *(_DWORD **)v33;
    v35 = *(_DWORD **)(v33 + 8);
    if (*(_DWORD **)v33 != v35)
    {
      do
      {
        if (*v34 != 1)
        {
          v36 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          dmlc::LogMessageFatal::Entry::Init(v36, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/multiclass_obj.cu");
          v37 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"SoftmaxMultiClassObj: label must be in [0, num_class).", 54);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)__x);
        }
        ++v34;
      }
      while (v34 != v35);
    }
  }
}

void sub_220EC4814(_Unwind_Exception *a1)
{
  std::mutex *v2;
  std::exception_ptr v3;

  std::mutex::~mutex(v2);
  std::exception_ptr::~exception_ptr(&v3);
  _Unwind_Resume(a1);
}

void sub_220EC485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  MEMORY[0x227667068](v32, 0x1012C40EC159624);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_220EC48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a32);
  _Unwind_Resume(a1);
}

const char *xgboost::obj::SoftmaxMultiClassObj::DefaultEvalMetric(xgboost::obj::SoftmaxMultiClassObj *this)
{
  return "mlogloss";
}

void xgboost::obj::SoftmaxMultiClassObj::PredTransform(uint64_t a1, uint64_t **a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v15;
  uint64_t i;
  float v17;
  const void **v18;
  _QWORD v19[2];
  unint64_t v20;
  uint64_t v21;
  std::exception_ptr v22;
  std::mutex v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 24);
  v4 = ((*a2)[1] - **a2) >> 2;
  v5 = v3;
  v6 = v4 / v3;
  if (*(_BYTE *)(a1 + 16))
  {
    *(_OWORD *)&v23.__m_.__sig = xmmword_220F60900;
    *(_QWORD *)&v23.__m_.__opaque[8] = v4 / v3;
    *(_QWORD *)&v23.__m_.__opaque[16] = 1;
    LODWORD(v22.__ptr_) = v3;
    *(_QWORD *)&v23.__m_.__opaque[24] = 0xFFFFFFFF00000001;
    xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>((int *)&v22, a2);
  }
  else
  {
    xgboost::HostDeviceVector<float>::HostDeviceVector(&v18, 0, 0.0);
    LODWORD(v22.__ptr_) = 0;
    std::vector<float>::resize((uint64_t)v18, v6, &v22);
    v22.__ptr_ = 0;
    v23.__m_.__sig = 850045863;
    memset(v23.__m_.__opaque, 0, sizeof(v23.__m_.__opaque));
    if (v4 >= v5)
    {
      v8 = 0;
      do
      {
        v9 = **a2;
        v10 = (*a2)[1];
        if (v9)
          v11 = 1;
        else
          v11 = v10 == 0;
        if (!v11)
          goto LABEL_27;
        v19[0] = (v10 - v9) >> 2;
        v19[1] = v9;
        v12 = *v18;
        v13 = v18[1];
        if (!*v18 && v13 != 0)
          goto LABEL_27;
        xgboost::common::Span<float,18446744073709551615ul>::subspan(v19, v8 * v5, v5, &v20);
        if (v20)
        {
          v15 = 0;
          for (i = 0; i != v20; ++i)
          {
            if (v15 >= v20)
              goto LABEL_27;
            if (*(float *)(v21 + 4 * i) > *(float *)(v21 + 4 * v15))
              v15 = i;
          }
          v17 = (float)v15;
        }
        else
        {
          v17 = 0.0;
        }
        if ((v13 - v12) >> 2 <= v8)
LABEL_27:
          std::terminate();
        *(float *)&v12[4 * v8++] = v17;
      }
      while (v8 != v6);
    }
    dmlc::OMPException::Rethrow(&v22);
    std::mutex::~mutex(&v23);
    std::exception_ptr::~exception_ptr(&v22);
    v7 = ((_BYTE *)v18[1] - (_BYTE *)*v18) >> 2;
    LODWORD(v22.__ptr_) = 0;
    std::vector<float>::resize((uint64_t)*a2, v7, &v22);
    xgboost::HostDeviceVector<float>::Copy((void ***)a2, &v18);
    xgboost::HostDeviceVector<float>::~HostDeviceVector((uint64_t *)&v18);
  }
}

void sub_220EC4BA4()
{
  std::mutex *v0;
  std::exception_ptr v1;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220EC4BF4);
}

void sub_220EC4BE8()
{
  JUMPOUT(0x220EC4BFCLL);
}

void xgboost::obj::SoftmaxMultiClassObj::EvalTransform(uint64_t a1, uint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(int *)(a1 + 24);
  v3 = (((*a2)[1] - **a2) >> 2) / v2;
  v5 = xmmword_220F60900;
  v6 = v3;
  v7 = 1;
  v4 = v2;
  v8 = 0xFFFFFFFF00000001;
  xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>(&v4, a2);
}

uint64_t xgboost::obj::SoftmaxMultiClassObj::Task(xgboost::obj::SoftmaxMultiClassObj *this)
{
  return 2;
}

void xgboost::common::Transform<false>::Evaluator<xgboost::obj::SoftmaxMultiClassObj::Transform(xgboost::HostDeviceVector<float> *,BOOL)::{lambda(unsigned long,xgboost::common::Span<float,18446744073709551615ul>)#1}>::Eval<xgboost::HostDeviceVector<float> *>(int *a1, uint64_t **a2)
{
  std::string *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  double v18;
  float v19;
  float v20;
  std::string *Entry;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *ptr;
  _QWORD v30[2];
  unint64_t v31;
  float *v32;
  std::exception_ptr v33;
  std::mutex v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a1[11] < 0)
  {
    v5 = *a1;
    v6 = *((_QWORD *)a1 + 3);
    LODWORD(v31) = a1[10];
    LODWORD(v30[0]) = 1;
    if ((int)v31 < 1)
    {
      dmlc::LogCheckFormat<int,int>((uint64_t *)&v33);
      if (v33.__ptr_)
      {
        Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/threading_utils.h");
        v22 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v31);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: ", 14);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"n_threads >= 1", 14);
        v25 = *((char *)v33.__ptr_ + 23);
        v26 = v25 >= 0 ? v33.__ptr_ : *(void **)v33.__ptr_;
        v27 = v25 >= 0 ? *((unsigned __int8 *)v33.__ptr_ + 23) : *((_QWORD *)v33.__ptr_ + 1);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v31);
        ptr = v33.__ptr_;
        v33.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v33, (uint64_t)ptr);
      }
    }
    v33.__ptr_ = 0;
    v34.__m_.__sig = 850045863;
    memset(v34.__m_.__opaque, 0, sizeof(v34.__m_.__opaque));
    if (v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v9 = **a2;
        v8 = (*a2)[1];
        v30[0] = (v8 - v9) >> 2;
        v30[1] = v9;
        if (v9)
          v10 = 1;
        else
          v10 = v8 == 0;
        if (!v10
          || (xgboost::common::Span<float,18446744073709551615ul>::subspan(v30, i * v5, v5, &v31), (v11 = v31) == 0))
        {
LABEL_31:
          std::terminate();
        }
        v12 = v32;
        v13 = *v32;
        v14 = v31 - 1;
        if (v31 != 1)
        {
          v15 = v32 + 1;
          do
          {
            v16 = *v15++;
            v13 = fmaxf(v16, v13);
            --v14;
          }
          while (v14);
        }
        v17 = 0;
        v18 = 0.0;
        do
        {
          if (v11 == v17)
            goto LABEL_31;
          v19 = expf(v12[v17] - v13);
          v12[v17] = v19;
          v18 = v18 + v19;
          ++v17;
        }
        while (v11 != v17);
        do
        {
          if (!v11)
            goto LABEL_31;
          v20 = v18;
          *v12 = *v12 / v20;
          ++v12;
          --v11;
        }
        while (v11);
      }
    }
    dmlc::OMPException::Rethrow(&v33);
    std::mutex::~mutex(&v34);
    std::exception_ptr::~exception_ptr(&v33);
  }
  else
  {
    v2 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    dmlc::LogMessageFatal::Entry::Init(v2, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/objective/../common/transform.h");
    v3 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Not part of device code. WITH_CUDA: ", 36);
    std::ostream::operator<<();
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v33);
  }
}

void sub_220EC4F60()
{
  std::mutex *v0;
  std::exception_ptr v1;

  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v1);
  JUMPOUT(0x220EC4FECLL);
}

void sub_220EC4F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;

  v16 = a15;
  a15 = 0;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&a15, v16);
  _Unwind_Resume(a1);
}

void sub_220EC4FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)va);
  _Unwind_Resume(a1);
}

void sub_220EC4FD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_220EC5098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227667068](v1, 0x10E1C407F06B5FFLL);
  _Unwind_Resume(a1);
}

uint64_t xgboost::metric::__dmlc_registry_file_tag_multiclass_metric__(xgboost::metric *this)
{
  return 0;
}

double std::__function::__func<xgboost::metric::$_0,std::allocator<xgboost::metric::$_0>,xgboost::Metric * ()(char const*)>::operator()()
{
  _OWORD *v0;
  double result;

  v0 = (_OWORD *)operator new();
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  *(_QWORD *)v0 = &off_24E6BAF08;
  return result;
}

{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)v0 = &off_24E6BE948;
  *(_QWORD *)(v0 + 32) = 0;
  return result;
}

void xgboost::metric::EvalMatchError::~EvalMatchError(xgboost::metric::EvalMatchError *this)
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalMClassBase<xgboost::metric::EvalMatchError>::Eval(rabit::engine *a1, float ***a2, uint64_t a3, int a4)
{
  rabit::engine *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  double v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  float **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double *v37;
  float v38;
  uint64_t v39;
  float *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float *v50;
  uint64_t v51;
  std::string *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  void *ptr;
  double *v61;
  double v62;
  double *v63;
  double *v64;
  double v65;
  void *Engine;
  std::string *Entry;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  double *v80;
  double *v81;
  void *__p;
  double *v83;
  double v84;
  double v85;
  std::exception_ptr v86;
  std::mutex v87;
  uint64_t v88;

  v7 = a1;
  v88 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
  if (v8)
  {
    if (((*a2)[1] - **a2) % (unint64_t)(v8 >> 2))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v69 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: preds.Size() % info.labels.Size() == 0", 52);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"label and prediction size not match", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
    }
  }
  else
  {
    v49 = **a2;
    v50 = (*a2)[1];
    LODWORD(v80) = 0;
    v51 = (char *)v50 - (char *)v49;
    __p = (void *)(v51 >> 2);
    if (v51)
    {
      a1 = (rabit::engine *)dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v86);
      if (v86.__ptr_)
      {
        v52 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v52, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
        v53 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Check failed: ", 14);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"preds.Size() == 0", 17);
        v56 = *((char *)v86.__ptr_ + 23);
        v57 = v56 >= 0 ? v86.__ptr_ : *(void **)v86.__ptr_;
        v58 = v56 >= 0 ? *((unsigned __int8 *)v86.__ptr_ + 23) : *((_QWORD *)v86.__ptr_ + 1);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v57, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
        ptr = v86.__ptr_;
        v86.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v86, (uint64_t)ptr);
      }
    }
  }
  v84 = 0.0;
  v85 = 0.0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
  if (!v9)
  {
    v24 = 0.0;
    v23 = 0.0;
    if (!a4)
      return v23 / v24;
    goto LABEL_61;
  }
  v10 = (char *)(*a2)[1] - (char *)**a2;
  v11 = v9 >> 2;
  v79 = (v10 >> 2) / v11;
  LODWORD(__p) = 1;
  if (v11 > v10 >> 2)
  {
    a1 = (rabit::engine *)dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v86);
    if (v86.__ptr_)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nclass >= 1U", 12);
      v16 = *((char *)v86.__ptr_ + 23);
      v17 = v16 >= 0 ? v86.__ptr_ : *(void **)v86.__ptr_;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v86.__ptr_ + 23) : *((_QWORD *)v86.__ptr_ + 1);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"mlogloss and merror are only used for multi-class classification,", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" use logloss for binary classification", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v22 = v86.__ptr_;
      v86.__ptr_ = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v86, (uint64_t)v22);
    }
  }
  v23 = 0.0;
  v24 = 0.0;
  if ((*(_DWORD *)(*((_QWORD *)v7 + 1) + 24) & 0x80000000) != 0)
  {
    v25 = *(uint64_t **)(a3 + 72);
    v26 = *(uint64_t **)(a3 + 24);
    v27 = *a2;
    v29 = *v26;
    v28 = v26[1];
    v31 = *v25;
    v30 = v25[1];
    v86.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v86);
    v86.__ptr_ = 0;
    std::vector<double>::vector(&v80, 1uLL, &v86);
    v86.__ptr_ = 0;
    v87.__m_.__sig = 850045863;
    memset(v87.__m_.__opaque, 0, sizeof(v87.__m_.__opaque));
    if (v28 == v29)
    {
      LODWORD(v39) = 0;
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v34 = (v28 - v29) >> 2;
      v35 = *v26;
      v36 = (double *)__p;
      v37 = v80;
      do
      {
        v38 = 1.0;
        if (v30 != v31)
          v38 = *(float *)(*v25 + 4 * v33);
        v39 = (int)*(float *)(v35 + 4 * v33);
        if ((v39 & 0x80000000) == 0 && (int)v39 < (int)v79)
        {
          v40 = &(*v27)[v33 * v79];
          if (v79)
          {
            v41 = *v40;
            v42 = 4 * v79;
            v43 = (uint64_t)&(*v27)[v33 * v79];
            v44 = (float *)v43;
            v45 = (float *)v43;
            do
            {
              v46 = *v45++;
              v47 = v46;
              if (v46 > v41)
              {
                v41 = v47;
                v44 = (float *)v43;
              }
              v43 = (uint64_t)v45;
              v42 -= 4;
            }
            while (v42);
          }
          else
          {
            v44 = *v27;
          }
          if (v44 == &v40[v39])
            v48 = 0.0;
          else
            v48 = 1.0;
          *v36 = *v36 + (float)(v38 * v48);
          *v37 = *v37 + v38;
          v39 = v32;
        }
        ++v33;
        v32 = v39;
      }
      while (v33 != v34);
    }
    dmlc::OMPException::Rethrow(&v86);
    std::mutex::~mutex(&v87);
    std::exception_ptr::~exception_ptr(&v86);
    v61 = (double *)__p;
    v24 = 0.0;
    v23 = 0.0;
    while (v61 != v83)
    {
      v62 = *v61++;
      v23 = v23 + v62;
    }
    v63 = v80;
    if (v80 != v81)
    {
      v24 = 0.0;
      v64 = v80;
      do
      {
        v65 = *v64++;
        v24 = v24 + v65;
      }
      while (v64 != v81);
    }
    if ((v39 & 0x80000000) != 0 || (int)v39 >= (int)v79)
    {
      v72 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      dmlc::LogMessageFatal::Entry::Init(v72, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v73 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v86);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: label_error >= 0 && label_error < static_cast<int32_t>(n_class)", 77);
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"MultiClassEvaluation: label must be in [0, num_class),", 54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" num_class=", 11);
      v77 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" but found ", 11);
      v78 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" in label", 9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v86);
      v63 = v80;
      if (!v80)
      {
LABEL_58:
        a1 = (rabit::engine *)__p;
        if (__p)
        {
          v83 = (double *)__p;
          operator delete(__p);
        }
        goto LABEL_60;
      }
    }
    else if (!v80)
    {
      goto LABEL_58;
    }
    v81 = v63;
    operator delete(v63);
    goto LABEL_58;
  }
LABEL_60:
  v84 = v23;
  v85 = v24;
  if (a4)
  {
LABEL_61:
    Engine = rabit::engine::GetEngine(a1);
    (*(void (**)(void *, double *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v84, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v23 = v84;
    v24 = v85;
  }
  return v23 / v24;
}

void sub_220EC579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

const char *xgboost::metric::EvalMatchError::Name(xgboost::metric::EvalMatchError *this)
{
  return "merror";
}

double std::__function::__func<xgboost::metric::$_1,std::allocator<xgboost::metric::$_1>,xgboost::Metric * ()(char const*)>::operator()()
{
  _OWORD *v0;
  double result;

  v0 = (_OWORD *)operator new();
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  *(_QWORD *)v0 = &off_24E6BB000;
  return result;
}

void xgboost::metric::EvalMultiLogLoss::~EvalMultiLogLoss(xgboost::metric::EvalMultiLogLoss *this)
{
  JUMPOUT(0x227667068);
}

double xgboost::metric::EvalMClassBase<xgboost::metric::EvalMultiLogLoss>::Eval(rabit::engine *a1, uint64_t **a2, uint64_t a3, int a4)
{
  rabit::engine *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  double v23;
  double v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  void *ptr;
  double *v56;
  double v57;
  double *v58;
  double *v59;
  double v60;
  void *Engine;
  std::string *Entry;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  unint64_t v77;
  double *v78;
  double *v79;
  void *__p;
  void *v81;
  double v82;
  double v83;
  std::exception_ptr v84;
  std::mutex v85;
  uint64_t v86;

  v7 = a1;
  v86 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
  if (v8)
  {
    if ((((*a2)[1] - **a2) >> 2) % (unint64_t)(v8 >> 2))
    {
      Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
      dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v64 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Check failed: preds.Size() % info.labels.Size() == 0", 52);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)": ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"label and prediction size not match", 35);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
    }
  }
  else
  {
    v44 = **a2;
    v45 = (*a2)[1];
    LODWORD(v78) = 0;
    v46 = v45 - v44;
    __p = (void *)(v46 >> 2);
    if (v46)
    {
      a1 = (rabit::engine *)dmlc::LogCheckFormat<unsigned long,int>((uint64_t *)&v84);
      if (v84.__ptr_)
      {
        v47 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        dmlc::LogMessageFatal::Entry::Init(v47, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
        v48 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Check failed: ", 14);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"preds.Size() == 0", 17);
        v51 = *((char *)v84.__ptr_ + 23);
        v52 = v51 >= 0 ? v84.__ptr_ : *(void **)v84.__ptr_;
        v53 = v51 >= 0 ? *((unsigned __int8 *)v84.__ptr_ + 23) : *((_QWORD *)v84.__ptr_ + 1);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
        ptr = v84.__ptr_;
        v84.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v84, (uint64_t)ptr);
      }
    }
  }
  v82 = 0.0;
  v83 = 0.0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) - **(_QWORD **)(a3 + 24);
  if (!v9)
  {
    v24 = 0.0;
    v23 = 0.0;
    if (!a4)
      return v23 / v24;
    goto LABEL_53;
  }
  v10 = (*a2)[1] - **a2;
  v11 = v9 >> 2;
  v77 = (v10 >> 2) / v11;
  LODWORD(__p) = 1;
  if (v11 > v10 >> 2)
  {
    a1 = (rabit::engine *)dmlc::LogCheckFormat<unsigned long,unsigned int>((uint64_t *)&v84);
    if (v84.__ptr_)
    {
      v12 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      dmlc::LogMessageFatal::Entry::Init(v12, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v13 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: ", 14);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nclass >= 1U", 12);
      v16 = *((char *)v84.__ptr_ + 23);
      v17 = v16 >= 0 ? v84.__ptr_ : *(void **)v84.__ptr_;
      v18 = v16 >= 0 ? *((unsigned __int8 *)v84.__ptr_ + 23) : *((_QWORD *)v84.__ptr_ + 1);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"mlogloss and merror are only used for multi-class classification,", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" use logloss for binary classification", 38);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&__p);
      v22 = v84.__ptr_;
      v84.__ptr_ = 0;
      if (v22)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v84, (uint64_t)v22);
    }
  }
  v23 = 0.0;
  v24 = 0.0;
  if ((*(_DWORD *)(*((_QWORD *)v7 + 1) + 24) & 0x80000000) != 0)
  {
    v25 = *(_QWORD **)(a3 + 72);
    v26 = *(uint64_t **)(a3 + 24);
    v76 = *a2;
    v28 = *v26;
    v27 = v26[1];
    v29 = *v25;
    v74 = v25[1];
    v75 = v25;
    v84.__ptr_ = 0;
    std::vector<double>::vector(&__p, 1uLL, &v84);
    v84.__ptr_ = 0;
    std::vector<double>::vector(&v78, 1uLL, &v84);
    v84.__ptr_ = 0;
    v85.__m_.__sig = 850045863;
    memset(v85.__m_.__opaque, 0, sizeof(v85.__m_.__opaque));
    v31 = v74;
    v30 = v75;
    if (v27 == v28)
    {
      LODWORD(v40) = 0;
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = (v27 - v28) >> 2;
      v36 = *v26;
      v37 = (double *)__p;
      v38 = v78;
      do
      {
        if (v31 == v29)
          v39 = 1.0;
        else
          v39 = *(float *)(*v30 + 4 * v34);
        v40 = (int)*(float *)(v36 + 4 * v34);
        if ((v40 & 0x80000000) == 0 && (int)v40 < (int)v77)
        {
          v41 = *(float *)(*v76 + 4 * v40 + v32);
          v42 = 36.841;
          if (v41 > 1.0e-16)
          {
            v43 = logf(v41);
            v31 = v74;
            v30 = v75;
            v42 = -v43;
          }
          *v37 = *v37 + (float)(v39 * v42);
          *v38 = *v38 + v39;
          v40 = v33;
        }
        ++v34;
        v32 += 4 * v77;
        v33 = v40;
      }
      while (v35 != v34);
    }
    dmlc::OMPException::Rethrow(&v84);
    std::mutex::~mutex(&v85);
    std::exception_ptr::~exception_ptr(&v84);
    v56 = (double *)__p;
    v24 = 0.0;
    v23 = 0.0;
    if (__p != v81)
    {
      do
      {
        v57 = *v56++;
        v23 = v23 + v57;
      }
      while (v56 != v81);
    }
    v58 = v78;
    if (v78 != v79)
    {
      v24 = 0.0;
      v59 = v78;
      do
      {
        v60 = *v59++;
        v24 = v24 + v60;
      }
      while (v59 != v79);
    }
    if ((v40 & 0x80000000) != 0 || (int)v40 >= (int)v77)
    {
      v67 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
      dmlc::LogMessageFatal::Entry::Init(v67, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/metric/multiclass_metric.cu");
      v68 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v84);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed: label_error >= 0 && label_error < static_cast<int32_t>(n_class)", 77);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": ", 2);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"MultiClassEvaluation: label must be in [0, num_class),", 54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" num_class=", 11);
      v72 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" but found ", 11);
      v73 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" in label", 9);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v84);
      v58 = v78;
      if (!v78)
      {
LABEL_50:
        a1 = (rabit::engine *)__p;
        if (__p)
        {
          v81 = __p;
          operator delete(__p);
        }
        goto LABEL_52;
      }
    }
    else if (!v78)
    {
      goto LABEL_50;
    }
    v79 = v58;
    operator delete(v58);
    goto LABEL_50;
  }
LABEL_52:
  v82 = v23;
  v83 = v24;
  if (a4)
  {
LABEL_53:
    Engine = rabit::engine::GetEngine(a1);
    (*(void (**)(void *, double *, uint64_t, uint64_t, double (*)(double *, double *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, &v82, 8, 2, rabit::op::Reducer<rabit::op::Sum,double>, 0, 0);
    v23 = v82;
    v24 = v83;
  }
  return v23 / v24;
}

void sub_220EC5F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

const char *xgboost::metric::EvalMultiLogLoss::Name(xgboost::metric::EvalMultiLogLoss *this)
{
  return "mlogloss";
}

void xgboost::common::AFTParam::__DECLARE__(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  std::string v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  std::string __str;
  std::string v13;

  std::string::basic_string[abi:ne180100]<0>(&__str, "aft_loss_distribution");
  v3 = operator new();
  *(_BYTE *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = v3 + 160;
  *(_WORD *)(v3 + 108) = 0;
  *(_QWORD *)v3 = &off_24E6BB088;
  *(_BYTE *)(v3 + 120) = 1;
  *(_QWORD *)(v3 + 168) = 0;
  std::string::operator=((std::string *)(v3 + 24), &__str);
  if (*(char *)(v3 + 71) < 0)
  {
    if (*(_QWORD *)(v3 + 56))
      goto LABEL_8;
  }
  else if (*(_BYTE *)(v3 + 71))
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "int");
  v4 = (void **)(v3 + 48);
  if (*(char *)(v3 + 71) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 64) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
LABEL_8:
  *(_QWORD *)(v3 + 96) = 4;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v3);
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "normal");
  dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)&v13.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v10, "logistic");
  dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "extreme");
  dmlc::parameter::FieldEntry<int>::add_enum(v3, (const void **)__p, 2);
  std::string::basic_string[abi:ne180100]<0>(&v7, "Choice of distribution for the noise term in Accelerated Failure Time model");
  std::string::operator=((std::string *)(v3 + 72), &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "aft_loss_distribution_scale");
  v5 = operator new();
  *(_QWORD *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_QWORD *)v5 = &unk_24E6B5478;
  std::string::operator=((std::string *)(v5 + 24), &__str);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_25;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "float");
  v6 = (void **)(v5 + 48);
  if (*(char *)(v5 + 71) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 64) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
LABEL_25:
  *(_QWORD *)(v5 + 96) = 8;
  dmlc::parameter::ParamManager::AddEntry(a2, (const void **)&__str.__r_.__value_.__l.__data_, v5);
  *(_DWORD *)(v5 + 104) = 1065353216;
  *(_BYTE *)(v5 + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v13, "Scaling factor used to scale the distribution in Accelerated Failure Time model");
  std::string::operator=((std::string *)(v5 + 72), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_220EC62EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void dmlc::parameter::FieldEntry<xgboost::common::ProbabilityDistributionType>::~FieldEntry(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
}

{
  *(_QWORD *)a1 = &unk_24E6B5E08;
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::__map_value_compare<std::string,std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dmlc::parameter::FieldAccessEntry *>>>::destroy(a1 + 128, *(char **)(a1 + 136));
  dmlc::parameter::FieldAccessEntry::~FieldAccessEntry((void **)a1);
  JUMPOUT(0x227667068);
}

uint64_t dmlc::CustomLogMessage::Log()
{
  _BYTE *v0;
  uint64_t (**v1)(_QWORD);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v1 = &dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst;
  if ((*v0 & 1) == 0)
  {
    *(_QWORD *)dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst) = xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke;
    *(_BYTE *)v6(v5) = 1;
  }
  v2 = *(uint64_t (**)(uint64_t))(*v1)(v1);
  if (*(char *)(v3 + 23) >= 0)
    return v2(v3);
  else
    return v2(*(_QWORD *)v3);
}

void xgboost::ConsoleLogger::~ConsoleLogger(xgboost::ConsoleLogger *this)
{
  int v2;
  int v3;
  _BYTE *v5;
  uint64_t (**v6)(_QWORD);
  void (*v7)(void *);
  void *p_p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *__p;
  char v14;

  v3 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  if (v2 == 4 || v3 >= v2)
  {
    std::stringbuf::str();
    v6 = &dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst;
    if ((*v5 & 1) == 0)
    {
      *(_QWORD *)dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst(&dmlc::ThreadLocalStore<xgboost::LogCallbackRegistry>::Get(void)::inst) = xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke;
      *(_BYTE *)v12(v11) = 1;
    }
    v7 = *(void (**)(void *))(*v6)(v6);
    if (v14 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v7(p_p);
    if (v14 < 0)
      operator delete(__p);
  }
  v9 = MEMORY[0x24BEDB800];
  v10 = *MEMORY[0x24BEDB800];
  *(_QWORD *)this = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4]((char *)this + 112);
}

BOOL xgboost::ConsoleLogger::ShouldLog()
{
  int v0;
  int v1;

  v1 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  return v0 == 4 || v1 >= v0;
}

void xgboost::TrackerLogger::~TrackerLogger(xgboost::TrackerLogger *this)
{
  rabit::engine *v2;
  void *Engine;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  LOBYTE(__p[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)__p, 1);
  v2 = (rabit::engine *)std::stringbuf::str();
  Engine = rabit::engine::GetEngine(v2);
  (*(void (**)(void *, void **))(*(_QWORD *)Engine + 96))(Engine, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = MEMORY[0x24BEDB800];
  v5 = *MEMORY[0x24BEDB800];
  *(_QWORD *)this = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(v4 + 24);
  *((_QWORD *)this + 1) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227666FE4]((char *)this + 112);
}

void xgboost::ConsoleLogger::Configure(__n128 a1)
{
  xgboost::GlobalConfiguration *v1;
  uint64_t *v2;
  uint64_t v3[3];
  void **v4;

  v1 = (xgboost::GlobalConfiguration *)dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst(a1);
  xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(v1, v2, v3);
  v4 = (void **)v3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void xgboost::XGBoostParameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(xgboost::GlobalConfiguration *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  if (*(_BYTE *)this)
  {
    dmlc::Parameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>(this, a2, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = xgboost::GlobalConfiguration::__MANAGER__(this);
    dmlc::parameter::ParamManager::RunInit<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)this, *a2, a2[1], a3, 0);
    *(_BYTE *)this = 1;
  }
}

void sub_220EC67D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::ConsoleLogger::DefaultVerbosity(xgboost::ConsoleLogger *this)
{
  return 1;
}

uint64_t xgboost::ConsoleLogger::GlobalVerbosity(xgboost::ConsoleLogger *this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(dmlc::ThreadLocalStore<xgboost::GlobalConfiguration>::Get(void)::inst() + 4);
  if (v1 >= 4)
    return 1;
  else
    return v1;
}

xgboost::BaseLogger *xgboost::ConsoleLogger::ConsoleLogger(xgboost::BaseLogger *a1, int a2)
{
  xgboost::BaseLogger *result;

  result = xgboost::BaseLogger::BaseLogger(a1);
  *((_DWORD *)result + 66) = a2;
  return result;
}

{
  xgboost::BaseLogger *result;

  result = xgboost::BaseLogger::BaseLogger(a1);
  *((_DWORD *)result + 66) = a2;
  return result;
}

xgboost::BaseLogger *xgboost::BaseLogger::BaseLogger(xgboost::BaseLogger *this)
{
  _QWORD *v2;
  _QWORD *v3;
  dmlc::DateLogger *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v8[9];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"[", 1);
  v4 = dmlc::DateLogger::HumanDate((dmlc::DateLogger *)v8);
  v5 = strlen((const char *)v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
  return this;
}

void sub_220EC68E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

xgboost::BaseLogger *xgboost::ConsoleLogger::ConsoleLogger(xgboost::BaseLogger *a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *((_DWORD *)xgboost::BaseLogger::BaseLogger(a1) + 66) = a4;
  v7 = "DEBUG: ";
  v8 = 7;
  v9 = a1;
  switch(a4)
  {
    case 1:
      v7 = "WARNING: ";
      v8 = 9;
      goto LABEL_4;
    case 2:
      v7 = "INFO: ";
      v8 = 6;
      goto LABEL_4;
    case 3:
LABEL_4:
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, v8);
      goto LABEL_5;
    case 4:
LABEL_5:
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_220EC69F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost::LogCallbackRegistry::LogCallbackRegistry(void)::{lambda(char const*)#1}::__invoke(const char *a1)
{
  size_t v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  std::locale v6;

  v2 = strlen(a1);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)a1, v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_220EC6AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *dmlc::Parameter<xgboost::GlobalConfiguration>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>@<X0>(xgboost::GlobalConfiguration *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = xgboost::GlobalConfiguration::__MANAGER__(a1);
  return dmlc::parameter::ParamManager::RunUpdate<std::__wrap_iter<std::pair<std::string,std::string> const*>>(v6, (uint64_t)a1, *a2, a2[1], 0, a3, 0);
}

void sub_220EC6B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost::tree::__dmlc_registry_file_tag_updater_histmaker__(xgboost::tree *this)
{
  return 0;
}

void xgboost::tree::CQHistMaker::~CQHistMaker(void **this)
{
  xgboost::tree::CQHistMaker::~CQHistMaker(this);
  JUMPOUT(0x227667068);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *this = &off_24E6BB178;
  v10 = this + 92;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 735) < 0)
    operator delete(this[89]);
  v10 = this + 82;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v2 = this[79];
  if (v2)
  {
    this[80] = v2;
    operator delete(v2);
  }
  v10 = this + 76;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = this + 73;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = this + 70;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = this[67];
  if (v3)
  {
    this[68] = v3;
    operator delete(v3);
  }
  v4 = this[64];
  if (v4)
  {
    this[65] = v4;
    operator delete(v4);
  }
  v5 = this[61];
  if (v5)
  {
    this[62] = v5;
    operator delete(v5);
  }
  v6 = this[58];
  if (v6)
  {
    this[59] = v6;
    operator delete(v6);
  }
  *this = off_24E6BB248;
  v7 = this[54];
  if (v7)
  {
    this[55] = v7;
    operator delete(v7);
  }
  v10 = this + 47;
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WQSummary<float,float>>::SummaryContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v8 = this[44];
  if (v8)
  {
    this[45] = v8;
    operator delete(v8);
  }
  v9 = this[41];
  if (v9)
  {
    this[42] = v9;
    operator delete(v9);
  }
  xgboost::tree::BaseMaker::~BaseMaker(this);
}

void xgboost::tree::BaseMaker::LoadConfig(xgboost::tree::BaseMaker *this, const xgboost::Json *a2)
{
  char *v3;
  _DWORD **v4;
  void *__p[2];
  char v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::vector<std::pair<std::string, std::string>> *v8;

  v3 = (char *)xgboost::Cast<xgboost::JsonObject const,xgboost::Value const>(*(_DWORD **)a2) + 16;
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v4 = (_DWORD **)std::map<std::string,xgboost::Json>::at((uint64_t)v3, (const void **)__p);
  xgboost::FromJson<xgboost::tree::TrainParam>(v4, (xgboost::tree::BaseMaker *)((char *)this + 16), &v7);
  v8 = &v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_220EC6D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xgboost::tree::BaseMaker::SaveConfig(xgboost::tree::BaseMaker *this, xgboost::Json *a2)
{
  unsigned int **v3;
  void *__p[2];
  char v5;
  _QWORD v6[2];
  _QWORD *v7[3];

  xgboost::ToJson<xgboost::tree::TrainParam>((xgboost::tree::BaseMaker *)((char *)this + 16), (uint64_t)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "train_param");
  v3 = (unsigned int **)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2, __p);
  xgboost::Json::operator=(v3, (uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  v6[0] = &off_24E6BE1D0;
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)v7, v7[1]);
}

void sub_220EC6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<std::string,xgboost::Json>,std::__map_value_compare<std::string,std::__value_type<std::string,xgboost::Json>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xgboost::Json>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void xgboost::tree::BaseMaker::Configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];
  void **v3;

  xgboost::XGBoostParameter<xgboost::tree::TrainParam>::UpdateAllowUnknown<std::vector<std::pair<std::string,std::string>>>((xgboost::tree::TrainParam *)(a1 + 16), a2, v2);
  v3 = (void **)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void xgboost::tree::HistMaker::Update(float *a1, _QWORD *a2, uint64_t (***a3)(_QWORD), _QWORD **a4)
{
  std::string *v8;
  const xgboost::tree::TrainParam *v9;
  uint64_t v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD **v14;
  uint64_t v15;

  v8 = (std::string *)(a1 + 56);
  v9 = (const xgboost::tree::TrainParam *)(a1 + 4);
  v10 = (**a3)(a3);
  xgboost::FeatureInteractionConstraintHost::Configure(v8, v9, *(_DWORD *)(v10 + 8));
  v11 = a1[5];
  v14 = a4;
  v12 = *a4;
  v13 = v14[1];
  a1[5] = v11 / (float)(unint64_t)(v13 - v12);
  while (v12 != v13)
  {
    v15 = *v12++;
    (*(void (**)(float *, _QWORD, uint64_t (***)(_QWORD), uint64_t))(*(_QWORD *)a1 + 80))(a1, *a2, a3, v15);
  }
  a1[5] = v11;
}

const char *xgboost::tree::CQHistMaker::Name(xgboost::tree::CQHistMaker *this)
{
  return "grow_local_histmaker";
}

void xgboost::tree::BaseMaker::SetNonDefaultPositionCol(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t **v8;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::vector<unsigned int> __p;
  std::exception_ptr v42;
  std::mutex v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  xgboost::tree::BaseMaker::GetSplitSet(*a2, a2[1], a4, &__p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 88))(&v39, a3);
  v37 = v39;
  v38 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v35, 0);
  while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=(&v37) & 1) != 0)
  {
    v8 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*(&v37);
    begin = __p.__begin_;
    end = __p.__end_;
    if (__p.__begin_ != __p.__end_)
    {
      v11 = **v8;
      v12 = *v8[1];
      do
      {
        v13 = *begin;
        v14 = (uint64_t *)(v11 + 8 * v13);
        v16 = *v14;
        v15 = v14[1];
        v17 = v15 - *v14;
        if (!v12 && v17)
          std::terminate();
        v42.__ptr_ = 0;
        v43.__m_.__sig = 850045863;
        memset(v43.__m_.__opaque, 0, sizeof(v43.__m_.__opaque));
        if (v15 != v16)
        {
          v18 = *(_QWORD *)(a4 + 160);
          v19 = *(_QWORD *)(a1 + 200);
          v20 = (float *)(v12 + 4 + 8 * v16);
          do
          {
            v21 = *((unsigned int *)v20 - 1);
            v22 = *(_DWORD *)(v19 + 4 * v21);
            v23 = v22 ^ (v22 >> 31);
            v24 = *(_DWORD *)(v18 + 20 * v23 + 4);
            if (v24 != -1 && (*(_DWORD *)(v18 + 20 * v23 + 12) & 0x7FFFFFFF) == (_DWORD)v13)
            {
              if (*v20 >= *(float *)(v18 + 20 * v23 + 16))
                v24 = *(_DWORD *)(v18 + 20 * v23 + 8);
              *(_DWORD *)(v19 + 4 * v21) = v24 ^ (v22 >> 31);
            }
            v20 += 2;
            --v17;
          }
          while (v17);
        }
        dmlc::OMPException::Rethrow(&v42);
        std::mutex::~mutex(&v43);
        std::exception_ptr::~exception_ptr(&v42);
        ++begin;
      }
      while (begin != end);
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++(&v37);
  }
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_220EC71EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost::tree::HistMaker::UpdateTree(uint64_t a1, _QWORD *a2, uint64_t a3, xgboost::RegTree *a4)
{
  void **v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  int v12;
  std::string *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *ptr;
  float v24;
  uint64_t v25;
  _DWORD *v26;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v31;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  std::vector<int>::pointer begin;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  std::string *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float64x2_t *v79;
  unsigned int *v80;
  _DWORD *v81;
  _BYTE *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  _BOOL4 v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  _QWORD *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float v100;
  float v101;
  double v102;
  double v103;
  float v104;
  double v105;
  double v106;
  BOOL v107;
  double v108;
  double v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  float64x2_t *v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t *v117;
  int *v118;
  uint64_t v119;
  float64x2_t v120;
  double v121;
  double v122;
  float v123;
  float v124;
  float v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  float v141;
  int v142;
  float v143;
  uint64_t v144;
  unsigned int v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  double v149;
  float v150;
  float v151;
  float v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  float v159;
  float v160;
  float v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float v168;
  int v169;
  float v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  uint64_t v175;
  unsigned int v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  double *v180;
  double v181;
  double v182;
  double v183;
  BOOL v184;
  float v185;
  double v186;
  double v187;
  double v188;
  float v189;
  uint64_t v190;
  char *v191;
  float *v192;
  float v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  double v198;
  double v199;
  double v200;
  float v201;
  char *v202;
  double v203;
  BOOL v204;
  double v205;
  float v206;
  double v207;
  double v208;
  double v209;
  float v210;
  char *v211;
  double v212;
  double v214;
  float v215;
  double v216;
  double v217;
  double v218;
  float v219;
  float v220;
  double v221;
  float v222;
  char *v223;
  char *v224;
  unsigned int v225;
  float v226;
  float v227;
  float v228;
  int8x16_t v229;
  uint64_t *v230;
  int8x16_t v231;
  float v232;
  double v233;
  double v234;
  double v235;
  float v236;
  double v237;
  double v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  float v242;
  uint64_t v243;
  uint64_t v244;
  float v245;
  double v247;
  float v248;
  double v249;
  double v250;
  double v251;
  float v252;
  float v253;
  uint64_t v254;
  float v255;
  uint64_t v256;
  int *v257;
  int *v258;
  char *sig;
  int v260;
  int v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  int64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  int v271;
  int v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  int v280;
  void *v281;
  uint64_t v282;
  int *v283;
  int *v284;
  uint64_t v285;
  unint64_t v286;
  std::vector<int>::pointer v287;
  uint64_t v288;
  uint64_t v289;
  std::string *Entry;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  xgboost::RegTree *v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v300;
  char *v301;
  std::vector<int> *v302;
  uint64_t v303;
  unint64_t v304;
  double *v305;
  int8x16_t v306;
  uint64_t *v307;
  xgboost::FeatureInteractionConstraintHost *v308;
  uint64_t v309;
  void *__p;
  void *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  std::exception_ptr v316;
  uint64_t v317;
  int v318;
  int v319;
  std::exception_ptr v320;
  std::mutex v321;
  uint64_t v322;

  v322 = *MEMORY[0x24BDAC8D0];
  v298 = a2;
  if (*(int *)(a1 + 28) <= 0)
  {
    Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v320);
    dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
    v291 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v320);
    v292 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"Check failed: param_.max_depth > 0", 34);
    v293 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)"max_depth must be larger than 0", 31);
    dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v320);
    a2 = v298;
  }
  v6 = (void **)(a1 + 200);
  std::vector<int>::resize((std::vector<int> *)(a1 + 200), (uint64_t)(a2[1] - *a2) >> 3);
  v7 = *(int **)(a1 + 200);
  v8 = *(int **)(a1 + 208);
  v9 = (char *)v8 - (char *)v7;
  if ((char *)v8 - (char *)v7 >= 1)
    bzero(*v6, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  if (v8 != v7)
  {
    v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1)
      v10 = 1;
    v11 = (float *)(*v298 + 4);
    do
    {
      if (*v11 < 0.0)
        *v7 = ~*v7;
      ++v7;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  if (*(float *)(a1 + 64) < 1.0)
  {
    v12 = *(_DWORD *)(a1 + 68);
    LODWORD(v313) = 0;
    if (v12)
    {
      dmlc::LogCheckFormat<int,xgboost::tree::TrainParam::SamplingMethod>((uint64_t *)&v320);
      if (v320.__ptr_)
      {
        v13 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v313);
        dmlc::LogMessageFatal::Entry::Init(v13, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_basemaker-inl.h");
        v14 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v313);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: ", 14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param_.sampling_method == TrainParam::kUniform", 46);
        v17 = *((char *)v320.__ptr_ + 23);
        v18 = v17 >= 0 ? v320.__ptr_ : *(void **)v320.__ptr_;
        v19 = v17 >= 0 ? *((unsigned __int8 *)v320.__ptr_ + 23) : *((_QWORD *)v320.__ptr_ + 1);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Only uniform sampling is supported, ", 36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"gradient-based sampling is only support by GPU Hist.", 52);
        dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v313);
        ptr = v320.__ptr_;
        v320.__ptr_ = 0;
        if (ptr)
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v320, (uint64_t)ptr);
      }
    }
    v24 = *(float *)(a1 + 64);
    v25 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
    v26 = *(_DWORD **)(a1 + 200);
    if (*(_DWORD **)(a1 + 208) != v26)
    {
      v27 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v25;
      v28 = 0;
      v29 = v24;
      v30 = 4;
      do
      {
        if (*(float *)(*v298 + v30) >= 0.0)
        {
          v31 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v27);
          v32 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v27);
          v26 = *v6;
          if (((double)v31 + (double)v32 * 4294967300.0) * 5.42101086e-20 + 0.0 >= v29)
            v26[v28] = ~v26[v28];
        }
        ++v28;
        v30 += 8;
      }
      while (v28 < (uint64_t)(*(_QWORD *)(a1 + 208) - (_QWORD)v26) >> 2);
    }
  }
  v301 = (char *)(a1 + 152);
  std::vector<int>::reserve((std::vector<int> *)(a1 + 152), 0x100uLL);
  v33 = *(_DWORD **)(a1 + 152);
  v34 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v33;
  if ((unint64_t)v33 >= v34)
  {
    v36 = v34 - (_QWORD)v33;
    v37 = v36 >> 1;
    if ((unint64_t)(v36 >> 1) <= 1)
      v37 = 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v38);
    v40 = *(char **)(a1 + 152);
    v41 = *(char **)(a1 + 160);
    v43 = &v39[v42];
    *v39 = 0;
    v35 = v39 + 1;
    while (v41 != v40)
    {
      v44 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *--v39 = v44;
    }
    *(_QWORD *)(a1 + 152) = v39;
    *(_QWORD *)(a1 + 160) = v35;
    *(_QWORD *)(a1 + 168) = v43;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v33 = 0;
    v35 = v33 + 1;
  }
  v45 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v35;
  v302 = (std::vector<int> *)(a1 + 176);
  v46 = *(_QWORD *)(a1 + 184) - (_QWORD)v45;
  if (v46 >= 1)
    memset(v45, 255, 4 * (((unint64_t)v46 >> 2) - ((unint64_t)v46 > 3)) + 4);
  std::vector<int>::resize(v302, *((int *)a4 + 3));
  v47 = *(_QWORD *)(a1 + 152);
  v48 = *(_QWORD *)(a1 + 160);
  v49 = v48 - v47;
  if (v48 != v47)
  {
    v50 = 0;
    v51 = v49 >> 2;
    begin = v302->__begin_;
    if (v51 <= 1)
      v51 = 1;
    do
    {
      begin[*(int *)(v47 + 4 * v50)] = v50;
      ++v50;
    }
    while (v51 != v50);
  }
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v308 = (xgboost::FeatureInteractionConstraintHost *)(a1 + 224);
  xgboost::FeatureInteractionConstraintHost::Configure((std::string *)(a1 + 224), (const xgboost::tree::TrainParam *)(a1 + 16), *(_DWORD *)(v53 + 8));
  v307 = (uint64_t *)(a1 + 432);
  (*(void (**)(uint64_t, uint64_t, xgboost::RegTree *))(*(_QWORD *)a1 + 96))(a1, a3, a4);
  v54 = *((_QWORD *)a4 + 20);
  *(_DWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 4) = 0xFFFFFFFFLL;
  if (*(int *)(a1 + 28) >= 1)
  {
    v295 = 0;
    v55.f64[0] = NAN;
    v55.f64[1] = NAN;
    v306 = (int8x16_t)vnegq_f64(v55);
    v294 = a4;
    v56 = v298;
    while (1)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t *, xgboost::RegTree *))(*(_QWORD *)a1 + 88))(a1, v56, a3, v307, a4);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t *, xgboost::RegTree *))(*(_QWORD *)a1 + 112))(a1, v298, a3, v307, a4);
      v58 = *(_QWORD *)(a1 + 432);
      v57 = *(_QWORD *)(a1 + 440);
      v59 = *(_QWORD *)(a1 + 152);
      v60 = *(_QWORD *)(a1 + 160);
      v314 = 0;
      v315 = 0;
      v313 = 0;
      v320.__ptr_ = &v313;
      LOBYTE(v321.__m_.__sig) = 0;
      v61 = v60 - v59;
      if (v60 == v59)
      {
        __p = 0;
        v311 = 0;
        v64 = v60;
        v312 = 0;
      }
      else
      {
        if ((unint64_t)v61 >= 0xCCCCCCCCCCCCCCDLL)
          std::vector<void *>::__throw_length_error[abi:ne180100]();
        v62 = (char *)operator new(80 * (v61 >> 2));
        v313 = v62;
        v315 = &v62[80 * (v61 >> 2)];
        bzero(v62, 80 * ((80 * (v61 >> 2) - 80) / 0x50uLL) + 80);
        v314 = &v62[80 * ((80 * (v61 >> 2) - 80) / 0x50uLL) + 80];
        __p = 0;
        v311 = 0;
        v312 = 0;
        std::vector<xgboost::tree::GradStats>::__vallocate[abi:ne180100](&__p, v61 >> 2);
        v63 = (char *)v311;
        bzero(v311, 4 * v61);
        v311 = &v63[4 * v61];
        v60 = *(_QWORD *)(a1 + 152);
        v64 = *(_QWORD *)(a1 + 160);
      }
      v303 = (v57 - v58) >> 2;
      v320.__ptr_ = 0;
      v321.__m_.__sig = 850045863;
      v304 = (v64 - v60) >> 2;
      memset(v321.__m_.__opaque, 0, sizeof(v321.__m_.__opaque));
      v296 = v64;
      v297 = v60;
      if (v64 != v60)
        break;
LABEL_187:
      dmlc::OMPException::Rethrow(&v320);
      std::mutex::~mutex(&v321);
      std::exception_ptr::~exception_ptr(&v320);
      a4 = v294;
      if (v296 != v297)
      {
        v175 = 0;
        v176 = 1;
        do
        {
          v177 = *(_QWORD **)(a1 + 376);
          v178 = *(unsigned int *)(*v177 + 4 * (v303 + v175 * (v303 + 1)));
          v179 = v177[2];
          v180 = (double *)(v179 + 16 * v178);
          v182 = *v180;
          v181 = v180[1];
          v183 = *(float *)(a1 + 48);
          v184 = v181 < v183 || v181 <= 0.0;
          v172.i64[0] = 0;
          if (!v184)
          {
            v185 = *(float *)(a1 + 56);
            v186 = v185;
            v204 = v182 < (float)-v185;
            v187 = v182 + v185;
            if (!v204)
              v187 = 0.0;
            v107 = v182 <= v186;
            v188 = v182 - v186;
            if (!v107)
              v187 = v188;
            *(double *)v172.i64 = -v187 / (v181 + *(float *)(a1 + 52));
            v189 = *(float *)(a1 + 60);
            if (v189 != 0.0)
            {
              *(double *)v173.i64 = v189;
              if (fabs(*(double *)v172.i64) > *(double *)v173.i64)
                v172 = vbslq_s8(v306, v173, v172);
            }
          }
          v190 = *(int *)(*(_QWORD *)(a1 + 152) + 4 * v175);
          v191 = v313;
          v192 = (float *)&v313[80 * v175];
          v193 = *(double *)v172.i64;
          v194 = *((_QWORD *)v294 + 26) + 16 * v190;
          v195 = v181;
          *(float *)(v194 + 4) = v195;
          *(float *)(v194 + 8) = v193;
          v196 = *v192;
          *(float *)v194 = *v192;
          if (v196 <= 0.000001)
          {
            v256 = *((_QWORD *)v294 + 20) + 20 * (int)v190;
            *(float *)(v256 + 16) = *(float *)(a1 + 20) * v193;
            v171.i64[1] = -1;
            *(_QWORD *)(v256 + 4) = -1;
          }
          else
          {
            v173.i64[0] = 0;
            v172.i64[0] = 0;
            if (!v184)
            {
              v197 = *(float *)(a1 + 56);
              v198 = v197;
              v204 = v182 < (float)-v197;
              v199 = v182 + v197;
              if (!v204)
                v199 = 0.0;
              v107 = v182 <= v198;
              v200 = v182 - v198;
              if (!v107)
                v199 = v200;
              *(double *)v172.i64 = -v199 / (v181 + *(float *)(a1 + 52));
              v201 = *(float *)(a1 + 60);
              if (v201 != 0.0)
              {
                *(double *)v174.i64 = v201;
                if (fabs(*(double *)v172.i64) > *(double *)v174.i64)
                  v172.i64[0] = vbslq_s8(v306, v174, v172).u64[0];
              }
            }
            v202 = &v191[80 * v175];
            v203 = *((double *)v202 + 7);
            v204 = v203 <= 0.0 || v203 < v183;
            if (!v204)
            {
              v205 = *((double *)v202 + 6);
              v206 = *(float *)(a1 + 56);
              v207 = v206;
              v204 = v205 < (float)-v206;
              v208 = v205 + v206;
              if (!v204)
                v208 = 0.0;
              v107 = v205 <= v207;
              v209 = v205 - v207;
              if (v107)
                v209 = v208;
              *(double *)v173.i64 = -v209 / (v203 + *(float *)(a1 + 52));
              v210 = *(float *)(a1 + 60);
              if (v210 != 0.0)
              {
                *(double *)v174.i64 = v210;
                if (fabs(*(double *)v173.i64) > *(double *)v174.i64)
                  v173.i64[0] = vbslq_s8(v306, v174, v173).u64[0];
              }
            }
            v211 = &v191[80 * v175];
            v212 = *((double *)v211 + 9);
            v174.i64[0] = 0;
            if (v212 > 0.0 && v212 >= v183)
            {
              v214 = *((double *)v211 + 8);
              v215 = *(float *)(a1 + 56);
              v216 = v215;
              v204 = v214 < (float)-v215;
              v217 = v214 + v215;
              if (!v204)
                v217 = 0.0;
              v107 = v214 <= v216;
              v218 = v214 - v216;
              if (v107)
                v218 = v217;
              *(double *)v174.i64 = -v218 / (v212 + *(float *)(a1 + 52));
              v219 = *(float *)(a1 + 60);
              if (v219 != 0.0)
              {
                *(double *)v171.i64 = v219;
                if (fabs(*(double *)v174.i64) > *(double *)v171.i64)
                  v174.i64[0] = vbslq_s8(v306, v171, v174).u64[0];
              }
            }
            v220 = *(double *)v172.i64;
            v221 = *(float *)(a1 + 20);
            v222 = *(double *)v173.i64 * v221;
            v223 = &v191[80 * v175];
            v225 = *((_DWORD *)v223 + 1);
            v224 = v223 + 4;
            v226 = *(double *)v174.i64 * v221;
            v227 = v203;
            v228 = v212;
            xgboost::RegTree::ExpandNode(v294, v190, v225 & 0x7FFFFFFF, *((float *)v224 + 1), v225 >> 31, v220, v222, v226, v196, v195, v227, v228, -1);
            v230 = (uint64_t *)((char *)__p + 16 * v175);
            v172.i64[0] = *v230;
            v174.i64[0] = v230[1];
            *(double *)v173.i64 = *(float *)(a1 + 48);
            v171.i64[0] = 0;
            v231.i64[0] = 0;
            if (*(double *)v174.i64 > 0.0)
            {
              v231.i64[0] = 0;
              if (*(double *)v174.i64 >= *(double *)v173.i64)
              {
                v232 = *(float *)(a1 + 56);
                v233 = v232;
                v204 = *(double *)v172.i64 < (float)-v232;
                v234 = *(double *)v172.i64 + v232;
                if (!v204)
                  v234 = 0.0;
                v107 = *(double *)v172.i64 <= v233;
                v235 = *(double *)v172.i64 - v233;
                if (!v107)
                  v234 = v235;
                *(double *)v231.i64 = -v234 / (*(double *)v174.i64 + *(float *)(a1 + 52));
                v236 = *(float *)(a1 + 60);
                if (v236 != 0.0)
                {
                  *(double *)v229.i64 = v236;
                  if (fabs(*(double *)v231.i64) > *(double *)v229.i64)
                    v231.i64[0] = vbslq_s8(v306, v229, v231).u64[0];
                }
              }
            }
            v237 = *v180;
            v238 = *(double *)(v179 + 16 * v178 + 8) - *(double *)v174.i64;
            v239 = *((_QWORD *)v294 + 20) + 20 * (int)v190;
            v240 = *(int *)(v239 + 4);
            v241 = *(int *)(v239 + 8);
            v242 = *(double *)v231.i64;
            v243 = *((_QWORD *)v294 + 26);
            v244 = v243 + 16 * v240;
            v245 = *(double *)v174.i64;
            *(float *)(v244 + 4) = v245;
            *(float *)(v244 + 8) = v242;
            if (v238 > 0.0 && v238 >= *(double *)v173.i64)
            {
              v247 = v237 - *(double *)v172.i64;
              v248 = *(float *)(a1 + 56);
              v249 = v248;
              v204 = v247 < (float)-v248;
              v250 = v247 + v248;
              if (!v204)
                v250 = 0.0;
              v107 = v247 <= v249;
              v251 = v247 - v249;
              if (v107)
                v251 = v250;
              *(double *)v171.i64 = -v251 / (v238 + *(float *)(a1 + 52));
              v252 = *(float *)(a1 + 60);
              if (v252 != 0.0)
              {
                *(double *)v172.i64 = v252;
                if (fabs(*(double *)v171.i64) > *(double *)v172.i64)
                {
                  v173.i64[1] = v306.i64[1];
                  v171 = vbslq_s8(v306, v172, v171);
                }
              }
            }
            v253 = *(double *)v171.i64;
            v254 = v243 + 16 * v241;
            v255 = v238;
            *(float *)(v254 + 4) = v255;
            *(float *)(v254 + 8) = v253;
            if (*(_BYTE *)(a1 + 324))
              xgboost::FeatureInteractionConstraintHost::SplitImpl(v308, v190, *(_DWORD *)v224 & 0x7FFFFFFF, v240, v241);
          }
          v175 = v176;
          v107 = v304 > v176++;
        }
        while (v107);
      }
      if (__p)
      {
        v311 = __p;
        operator delete(__p);
      }
      v320.__ptr_ = &v313;
      std::vector<xgboost::tree::SplitEntryContainer<xgboost::tree::GradStats>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
      (*(void (**)(uint64_t, uint64_t, xgboost::RegTree *))(*(_QWORD *)a1 + 104))(a1, a3, v294);
      v320.__ptr_ = 0;
      v321.__m_.__sig = 0;
      *(_QWORD *)v321.__m_.__opaque = 0;
      v257 = *(int **)(a1 + 152);
      v258 = *(int **)(a1 + 160);
      if (v257 == v258)
      {
        sig = 0;
      }
      else
      {
        sig = 0;
        do
        {
          v260 = *v257;
          v261 = *(_DWORD *)(*((_QWORD *)v294 + 20) + 20 * *v257 + 4);
          if (v261 != -1)
          {
            v262 = *(char **)v321.__m_.__opaque;
            if ((unint64_t)sig >= *(_QWORD *)v321.__m_.__opaque)
            {
              v264 = (char *)v320.__ptr_;
              v265 = (sig - (char *)v320.__ptr_) >> 2;
              v266 = v265 + 1;
              if ((unint64_t)(v265 + 1) >> 62)
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              v267 = *(_QWORD *)v321.__m_.__opaque - (unint64_t)v320.__ptr_;
              if ((uint64_t)(*(_QWORD *)v321.__m_.__opaque - (unint64_t)v320.__ptr_) >> 1 > v266)
                v266 = v267 >> 1;
              if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
                v268 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v268 = v266;
              if (v268)
              {
                v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v321.__m_.__opaque, v268);
                v264 = (char *)v320.__ptr_;
                sig = (char *)v321.__m_.__sig;
              }
              else
              {
                v269 = 0;
              }
              v270 = &v269[4 * v265];
              *(_DWORD *)v270 = v261;
              v263 = v270 + 4;
              while (sig != v264)
              {
                v271 = *((_DWORD *)sig - 1);
                sig -= 4;
                *((_DWORD *)v270 - 1) = v271;
                v270 -= 4;
              }
              v262 = &v269[4 * v268];
              v320.__ptr_ = v270;
              v321.__m_.__sig = (uint64_t)v263;
              *(_QWORD *)v321.__m_.__opaque = v262;
              if (v264)
              {
                operator delete(v264);
                v262 = *(char **)v321.__m_.__opaque;
              }
            }
            else
            {
              *(_DWORD *)sig = v261;
              v263 = sig + 4;
            }
            v321.__m_.__sig = (uint64_t)v263;
            v272 = *(_DWORD *)(*((_QWORD *)v294 + 20) + 20 * v260 + 8);
            if (v263 >= v262)
            {
              v273 = (char *)v320.__ptr_;
              v274 = (v263 - (char *)v320.__ptr_) >> 2;
              v275 = v274 + 1;
              if ((unint64_t)(v274 + 1) >> 62)
                std::vector<xgboost::TreeUpdaterReg const*>::__throw_length_error[abi:ne180100]();
              v276 = v262 - (char *)v320.__ptr_;
              if (v276 >> 1 > v275)
                v275 = v276 >> 1;
              if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL)
                v277 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v277 = v275;
              if (v277)
              {
                v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v321.__m_.__opaque, v277);
                v273 = (char *)v320.__ptr_;
                v263 = (char *)v321.__m_.__sig;
              }
              else
              {
                v278 = 0;
              }
              v279 = &v278[4 * v274];
              *(_DWORD *)v279 = v272;
              sig = v279 + 4;
              while (v263 != v273)
              {
                v280 = *((_DWORD *)v263 - 1);
                v263 -= 4;
                *((_DWORD *)v279 - 1) = v280;
                v279 -= 4;
              }
              v320.__ptr_ = v279;
              v321.__m_.__sig = (uint64_t)sig;
              *(_QWORD *)v321.__m_.__opaque = &v278[4 * v277];
              if (v273)
                operator delete(v273);
            }
            else
            {
              *(_DWORD *)v263 = v272;
              sig = v263 + 4;
            }
            v321.__m_.__sig = (uint64_t)sig;
          }
          ++v257;
        }
        while (v257 != v258);
      }
      v56 = v298;
      if (v301 != (char *)&v320)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v301, (char *)v320.__ptr_, (uint64_t)sig, (sig - (char *)v320.__ptr_) >> 2);
      v281 = *(void **)(a1 + 176);
      v282 = *(_QWORD *)(a1 + 184) - (_QWORD)v281;
      if (v282 >= 1)
        memset(v281, 255, 4 * (((unint64_t)v282 >> 2) - ((unint64_t)v282 > 3)) + 4);
      std::vector<int>::resize(v302, *((int *)v294 + 3));
      v284 = *(int **)(a1 + 152);
      v283 = *(int **)(a1 + 160);
      if (v283 != v284)
      {
        v285 = 0;
        v286 = v283 - v284;
        v287 = v302->__begin_;
        if (v286 <= 1)
          v286 = 1;
        do
        {
          v287[v284[v285]] = v285;
          ++v285;
        }
        while (v286 != v285);
      }
      if (v320.__ptr_)
      {
        v321.__m_.__sig = (uint64_t)v320.__ptr_;
        operator delete(v320.__ptr_);
        v284 = *(int **)(a1 + 152);
        v283 = *(int **)(a1 + 160);
      }
      if (v283 != v284 && ++v295 < *(_DWORD *)(a1 + 28))
        continue;
      goto LABEL_310;
    }
    v65 = 0;
    v300 = v303 + 1;
    while (1)
    {
      v309 = *(int *)(*(_QWORD *)v301 + 4 * v65);
      v66 = v302->__begin_[v309];
      v318 = v65;
      v319 = v66;
      if (v66 != (_DWORD)v65)
      {
        dmlc::LogCheckFormat<int,int>(&v317);
        if (v317)
        {
          v67 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          dmlc::LogMessageFatal::Entry::Init(v67, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
          v68 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v316);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed: ", 14);
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"node2workindex_[nid] == static_cast<int>(wid)", 45);
          v71 = *(char *)(v317 + 23);
          v72 = v71 >= 0 ? v317 : *(_QWORD *)v317;
          v73 = v71 >= 0 ? *(unsigned __int8 *)(v317 + 23) : *(_QWORD *)(v317 + 8);
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)": ", 2);
          dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v316);
          v75 = v317;
          v317 = 0;
          if (v75)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v317, v75);
        }
      }
      v76 = *(_QWORD *)(a1 + 432);
      if (*(_QWORD *)(a1 + 440) != v76)
        break;
LABEL_186:
      if (++v65 == v304)
        goto LABEL_187;
    }
    v77 = 0;
    v78 = (float *)&v313[80 * v65];
    v79 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 16)
                        + 16 * *(unsigned int *)(**(_QWORD **)(a1 + 376) + 4 * (v65 * v300 + v303)));
    v305 = &v79->f64[1];
    v80 = (unsigned int *)(v78 + 1);
    v81 = v78 + 2;
    v82 = v78 + 10;
    v83 = (float64x2_t *)(v78 + 12);
    v84 = (float64x2_t *)(v78 + 16);
LABEL_67:
    v85 = xgboost::FeatureInteractionConstraintHost::Query(v308, v309, *(_DWORD *)(v76 + 4 * v77));
    v76 = *v307;
    if (!v85)
      goto LABEL_185;
    v92 = *(_QWORD **)(a1 + 376);
    v93 = (unsigned int *)(*v92 + 4 * (v77 + v65 * v300));
    v94 = *v93;
    LODWORD(v93) = v93[1];
    v95 = ((_DWORD)v93 - v94);
    if ((_DWORD)v93 == (_DWORD)v94)
      goto LABEL_185;
    v96 = *v305;
    v97 = *(float *)(a1 + 48);
    v98 = 0.0;
    if (*v305 >= v97)
    {
      v99 = v79->f64[0];
      v100 = *(float *)(a1 + 60);
      if (v100 == 0.0)
      {
        v101 = *(float *)(a1 + 56);
        if (v101 != 0.0)
        {
          v102 = v101;
          v204 = v99 < (float)-v101;
          v103 = v99 + v101;
          if (!v204)
            v103 = 0.0;
          if (v99 > v102)
            v99 = v99 - v102;
          else
            v99 = v103;
        }
        v98 = v99 * v99 / (v96 + *(float *)(a1 + 52));
      }
      else
      {
        if (v96 <= 0.0)
        {
          v104 = *(float *)(a1 + 56);
          v109 = v96 + *(float *)(a1 + 52);
          v86.i64[0] = 0;
        }
        else
        {
          v104 = *(float *)(a1 + 56);
          v105 = v104;
          v106 = v99 + v104;
          if (v99 >= (float)-v104)
            v106 = 0.0;
          v107 = v99 <= v105;
          v108 = v99 - v105;
          if (v107)
            v108 = v106;
          v109 = v96 + *(float *)(a1 + 52);
          *(double *)v86.i64 = -v108 / v109;
          *(double *)v88.i64 = v100;
          if (fabs(*(double *)v86.i64) > *(double *)v88.i64)
            v86.i64[0] = vbslq_s8(v306, v88, v86).u64[0];
        }
        v98 = -(v109 * (*(double *)v86.i64 * *(double *)v86.i64) + (v99 + v99) * *(double *)v86.i64);
        v110 = v98 + v104 * fabs(*(double *)v86.i64);
        if (v104 != 0.0)
          v98 = v110;
      }
    }
    v111 = v92[2];
    v112 = v92[1] + 4 * v94;
    v113 = *(_DWORD *)(v76 + 4 * v77);
    v114 = (float64x2_t *)(v111 + 16 * v94);
    v115 = (float64x2_t *)__p;
    v116 = 0uLL;
    v117 = v114;
    v118 = (int *)v112;
    v119 = v95;
    while (1)
    {
      v116 = vaddq_f64(v116, *v117);
      if (v116.f64[1] < v97)
        goto LABEL_135;
      v120 = vsubq_f64(*v79, v116);
      if (v120.f64[1] < v97)
        goto LABEL_135;
      v121 = 0.0;
      v122 = 0.0;
      if (v116.f64[1] >= v97)
      {
        v123 = *(float *)(a1 + 60);
        if (v123 == 0.0)
        {
          v124 = *(float *)(a1 + 56);
          if (v124 == 0.0)
          {
            v122 = vmulq_f64(v116, v116).f64[0] / (v116.f64[1] + *(float *)(a1 + 52));
          }
          else
          {
            v130 = v124;
            v204 = v116.f64[0] < (float)-v124;
            v131 = v116.f64[0] + v124;
            if (!v204)
              v131 = 0.0;
            if (v116.f64[0] > v130)
              v131 = v116.f64[0] - v130;
            v122 = v131 * v131 / (v116.f64[1] + *(float *)(a1 + 52));
          }
        }
        else
        {
          if (v116.f64[1] <= 0.0)
          {
            v125 = *(float *)(a1 + 56);
            v129 = v116.f64[1] + *(float *)(a1 + 52);
            v89.i64[0] = 0;
          }
          else
          {
            v125 = *(float *)(a1 + 56);
            v126 = v125;
            v127 = v116.f64[0] + v125;
            if (v116.f64[0] >= (float)-v125)
              v127 = 0.0;
            v107 = v116.f64[0] <= v126;
            v128 = v116.f64[0] - v126;
            if (v107)
              v128 = v127;
            v129 = v116.f64[1] + *(float *)(a1 + 52);
            *(double *)v89.i64 = -v128 / v129;
            *(double *)v91.i64 = v123;
            if (fabs(*(double *)v89.i64) > *(double *)v91.i64)
              v89 = vbslq_s8(v306, v91, v89);
          }
          v122 = -(v129 * (*(double *)v89.i64 * *(double *)v89.i64) + (v116.f64[0] + v116.f64[0]) * *(double *)v89.i64);
          if (v125 != 0.0)
            v122 = v122 + v125 * fabs(*(double *)v89.i64);
        }
      }
      if (v120.f64[1] >= v97)
      {
        v132 = *(float *)(a1 + 60);
        if (v132 == 0.0)
        {
          v133 = *(float *)(a1 + 56);
          if (v133 == 0.0)
          {
            v121 = vmulq_f64(v120, v120).f64[0] / (v120.f64[1] + *(float *)(a1 + 52));
          }
          else
          {
            v139 = v133;
            v204 = v120.f64[0] < (float)-v133;
            v140 = v120.f64[0] + v133;
            if (!v204)
              v140 = 0.0;
            if (v120.f64[0] > v139)
              v140 = v120.f64[0] - v139;
            v121 = v140 * v140 / (v120.f64[1] + *(float *)(a1 + 52));
          }
        }
        else
        {
          if (v120.f64[1] <= 0.0)
          {
            v134 = *(float *)(a1 + 56);
            v138 = v120.f64[1] + *(float *)(a1 + 52);
            v87.i64[0] = 0;
          }
          else
          {
            v134 = *(float *)(a1 + 56);
            v135 = v134;
            v136 = v120.f64[0] + v134;
            if (v120.f64[0] >= (float)-v134)
              v136 = 0.0;
            v107 = v120.f64[0] <= v135;
            v137 = v120.f64[0] - v135;
            if (v107)
              v137 = v136;
            v138 = v120.f64[1] + *(float *)(a1 + 52);
            *(double *)v87.i64 = -v137 / v138;
            *(double *)v90.i64 = v132;
            if (fabs(*(double *)v87.i64) > *(double *)v90.i64)
            {
              v91.i64[1] = v306.i64[1];
              v87 = vbslq_s8(v306, v90, v87);
            }
          }
          v121 = -(v138 * (*(double *)v87.i64 * *(double *)v87.i64) + (v120.f64[0] + v120.f64[0]) * *(double *)v87.i64);
          if (v134 != 0.0)
            v121 = v121 + v134 * fabs(*(double *)v87.i64);
        }
      }
      v141 = v122 + v121 - v98;
      if (fabsf(v141) == INFINITY)
        goto LABEL_135;
      v142 = *v118;
      v143 = *v78;
      if ((*v80 & 0x7FFFFFFF) > v113)
        break;
      if (v143 < v141)
        goto LABEL_134;
LABEL_135:
      ++v118;
      ++v117;
      if (!--v119)
      {
        v144 = (v95 - 1);
        if ((_DWORD)v95 != 1)
        {
          v145 = v95 - 2;
          v146 = 0uLL;
          while (1)
          {
            v146 = vaddq_f64(v146, v114[v144]);
            if (v146.f64[1] < v97)
              goto LABEL_184;
            v147 = vsubq_f64(*v79, v146);
            if (v147.f64[1] < v97)
              goto LABEL_184;
            v148 = 0.0;
            v149 = 0.0;
            if (v146.f64[1] >= v97)
            {
              v150 = *(float *)(a1 + 60);
              if (v150 == 0.0)
              {
                v151 = *(float *)(a1 + 56);
                if (v151 == 0.0)
                {
                  v149 = vmulq_f64(v146, v146).f64[0] / (v146.f64[1] + *(float *)(a1 + 52));
                }
                else
                {
                  v157 = v151;
                  v204 = v146.f64[0] < (float)-v151;
                  v158 = v146.f64[0] + v151;
                  if (!v204)
                    v158 = 0.0;
                  if (v146.f64[0] > v157)
                    v158 = v146.f64[0] - v157;
                  v149 = v158 * v158 / (v146.f64[1] + *(float *)(a1 + 52));
                }
              }
              else
              {
                if (v146.f64[1] <= 0.0)
                {
                  v152 = *(float *)(a1 + 56);
                  v156 = v146.f64[1] + *(float *)(a1 + 52);
                  v89.i64[0] = 0;
                }
                else
                {
                  v152 = *(float *)(a1 + 56);
                  v153 = v152;
                  v154 = v146.f64[0] + v152;
                  if (v146.f64[0] >= (float)-v152)
                    v154 = 0.0;
                  v107 = v146.f64[0] <= v153;
                  v155 = v146.f64[0] - v153;
                  if (v107)
                    v155 = v154;
                  v156 = v146.f64[1] + *(float *)(a1 + 52);
                  *(double *)v89.i64 = -v155 / v156;
                  *(double *)v91.i64 = v150;
                  if (fabs(*(double *)v89.i64) > *(double *)v91.i64)
                    v89 = vbslq_s8(v306, v91, v89);
                }
                v149 = -(v156 * (*(double *)v89.i64 * *(double *)v89.i64)
                       + (v146.f64[0] + v146.f64[0]) * *(double *)v89.i64);
                if (v152 != 0.0)
                  v149 = v149 + v152 * fabs(*(double *)v89.i64);
              }
            }
            if (v147.f64[1] >= v97)
            {
              v159 = *(float *)(a1 + 60);
              if (v159 == 0.0)
              {
                v160 = *(float *)(a1 + 56);
                if (v160 == 0.0)
                {
                  v148 = vmulq_f64(v147, v147).f64[0] / (v147.f64[1] + *(float *)(a1 + 52));
                }
                else
                {
                  v166 = v160;
                  v204 = v147.f64[0] < (float)-v160;
                  v167 = v147.f64[0] + v160;
                  if (!v204)
                    v167 = 0.0;
                  if (v147.f64[0] > v166)
                    v167 = v147.f64[0] - v166;
                  v148 = v167 * v167 / (v147.f64[1] + *(float *)(a1 + 52));
                }
              }
              else
              {
                if (v147.f64[1] <= 0.0)
                {
                  v161 = *(float *)(a1 + 56);
                  v165 = v147.f64[1] + *(float *)(a1 + 52);
                  v87.i64[0] = 0;
                }
                else
                {
                  v161 = *(float *)(a1 + 56);
                  v162 = v161;
                  v163 = v147.f64[0] + v161;
                  if (v147.f64[0] >= (float)-v161)
                    v163 = 0.0;
                  v107 = v147.f64[0] <= v162;
                  v164 = v147.f64[0] - v162;
                  if (v107)
                    v164 = v163;
                  v165 = v147.f64[1] + *(float *)(a1 + 52);
                  *(double *)v87.i64 = -v164 / v165;
                  *(double *)v90.i64 = v159;
                  if (fabs(*(double *)v87.i64) > *(double *)v90.i64)
                  {
                    v91.i64[1] = v306.i64[1];
                    v87 = vbslq_s8(v306, v90, v87);
                  }
                }
                v148 = -(v165 * (*(double *)v87.i64 * *(double *)v87.i64)
                       + (v147.f64[0] + v147.f64[0]) * *(double *)v87.i64);
                if (v161 != 0.0)
                  v148 = v148 + v161 * fabs(*(double *)v87.i64);
              }
            }
            v168 = v149 + v148 - v98;
            if (fabsf(v168) == INFINITY)
              goto LABEL_184;
            v169 = *(_DWORD *)(v112 + 4 * v145);
            v170 = *v78;
            if ((*v80 & 0x7FFFFFFF) > v113)
              break;
            if (v170 < v168)
              goto LABEL_183;
LABEL_184:
            --v145;
            if (!(_DWORD)--v144)
              goto LABEL_185;
          }
          if (v170 > v168)
            goto LABEL_184;
LABEL_183:
          *v78 = v168;
          *v80 = v113 | 0x80000000;
          *v81 = v169;
          *v82 = 0;
          *v83 = v147;
          *v84 = v146;
          v115[v65] = v147;
          goto LABEL_184;
        }
LABEL_185:
        if (++v77 >= (unint64_t)((*(_QWORD *)(a1 + 440) - v76) >> 2))
          goto LABEL_186;
        goto LABEL_67;
      }
    }
    if (v143 > v141)
      goto LABEL_135;
LABEL_134:
    *v78 = v141;
    *v80 = v113;
    *v81 = v142;
    *v82 = 0;
    *v83 = v116;
    *v84 = v120;
    v115[v65] = v116;
    goto LABEL_135;
  }
  v284 = *(int **)(a1 + 152);
  v283 = *(int **)(a1 + 160);
LABEL_310:
  while (v284 != v283)
  {
    v288 = *v284++;
    v289 = *((_QWORD *)a4 + 20) + 20 * (int)v288;
    *(float *)(v289 + 16) = *(float *)(*((_QWORD *)a4 + 26) + 16 * v288 + 8) * *(float *)(a1 + 20);
    *(_QWORD *)(v289 + 4) = -1;
  }
}

void sub_220EC888C()
{
  uint64_t v0;

  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)(v0 - 184));
  JUMPOUT(0x220EC8980);
}

void sub_220EC889C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x220EC8980);
}

void sub_220EC8900()
{
  JUMPOUT(0x220EC8978);
}

void sub_220EC8928()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 184);
  if (v1)
  {
    *(_QWORD *)(v0 - 176) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x220EC8980);
}

void sub_220EC8958()
{
  JUMPOUT(0x220EC8960);
}

void xgboost::tree::CQHistMaker::ResetPosAndPropose(uint64_t a1, uint64_t *a2, uint64_t (***a3)(_QWORD), int **a4, uint64_t a5)
{
  unint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  xgboost::tree::TrainParam *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t (***v45)(_QWORD);
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int *v67;
  int *v68;
  int *v69;
  int v70;
  int v71;
  int *v72;
  int v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  _DWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  int v99;
  float v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  float v106;
  _DWORD *v107;
  _DWORD *v108;
  std::string *Entry;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  xgboost::tree::TrainParam *v122;
  int *v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  float *v142;
  float v143;
  uint64_t v144;
  float v145;
  unsigned int v146;
  unsigned int v147;
  int *v148;
  int *v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float *v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v170;
  unsigned int v171;
  int *v172;
  int *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  std::string *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  int v192;
  void *v193;
  uint64_t v194;
  _QWORD *v195;
  void *ptr;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _DWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _DWORD *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  _DWORD *v214;
  int v215;
  uint64_t v216;
  void **v217;
  _QWORD *v218;
  unsigned int *v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  unint64_t v224;
  float *v225;
  unint64_t j;
  float v227;
  float *v228;
  float *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  float *v235;
  int v236;
  float v237;
  float v238;
  float *v239;
  std::string *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  int v244;
  void *v245;
  uint64_t v246;
  _QWORD *v247;
  void *v248;
  float v249;
  float v250;
  unint64_t v251;
  float *v252;
  float *v253;
  float *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  float *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  float *v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  _DWORD *v278;
  int v279;
  float *v280;
  int v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  int v286;
  unint64_t v287;
  char *v288;
  _DWORD *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  int v308;
  std::string *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  int v313;
  void *v314;
  uint64_t v315;
  _QWORD *v316;
  void *v317;
  unsigned int v318;
  _QWORD *v319;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  std::vector<unsigned int> *v328;
  std::vector<unsigned int> *v329;
  uint64_t v331;
  uint64_t v332;
  void **v333;
  _QWORD *v334;
  uint64_t v336;
  std::__shared_weak_count *v337;
  uint64_t (**v338)(_QWORD, uint64_t, uint64_t);
  std::__shared_weak_count *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  std::exception_ptr v345[2];
  void *__p[2];
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  float v350[32];
  std::exception_ptr v351;
  std::mutex v352;
  uint64_t v353;

  v353 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t *)(**a3)(a3);
  v334 = (_QWORD *)(a1 + 488);
  std::vector<int>::resize((std::vector<int> *)(a1 + 488), *(unsigned int *)(a5 + 24));
  v8 = *(void **)(a1 + 488);
  v9 = *(_QWORD *)(a1 + 496) - (_QWORD)v8;
  if (v9 >= 1)
    memset(v8, 255, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  v328 = (std::vector<unsigned int> *)(a1 + 512);
  v10 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 520) = v10;
  v11 = *a4;
  v12 = a4[1];
  v322 = a5;
  if (*a4 == v12)
  {
    v25 = v10;
  }
  else
  {
    do
    {
      v13 = *v11;
      if (xgboost::tree::BaseMaker::FMetaHelper::Type((xgboost::tree::BaseMaker::FMetaHelper *)(a1 + 464), *v11) == 2)
      {
        v14 = *(char **)(a1 + 520);
        v15 = *(char **)(a1 + 512);
        v16 = (v14 - v15) >> 2;
        *(_DWORD *)(*(_QWORD *)(a1 + 488) + 4 * v13) = v16;
        v17 = *(_QWORD *)(a1 + 528);
        if ((unint64_t)v14 >= v17)
        {
          v19 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v20 = v17 - (_QWORD)v15;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 528, v21);
            v14 = *(char **)(a1 + 520);
            v15 = *(char **)(a1 + 512);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v16];
          *(_DWORD *)v23 = v13;
          v18 = v23 + 4;
          while (v14 != v15)
          {
            v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(_QWORD *)(a1 + 512) = v23;
          *(_QWORD *)(a1 + 520) = v18;
          *(_QWORD *)(a1 + 528) = &v22[4 * v21];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v14 = v13;
          v18 = v14 + 4;
        }
        *(_QWORD *)(a1 + 520) = v18;
      }
      else
      {
        *(_DWORD *)(*v334 + 4 * v13) = -2;
      }
      ++v11;
    }
    while (v11 != v12);
    v25 = *(_QWORD *)(a1 + 520);
    v10 = *(_QWORD *)(a1 + 512);
  }
  v321 = (v25 - v10) >> 2;
  std::vector<xgboost::common::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 736), ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2) * v321);
  v26 = *(unint64_t **)(a1 + 736);
  v27 = *(unint64_t **)(a1 + 744);
  if (v26 == v27)
  {
    v30 = *(_QWORD *)(a1 + 736);
  }
  else
  {
    v28 = v26 + 5;
    do
    {
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::LimitSizeLevel(*v7, (uint64_t *)v28 - 1, v28, *(float *)(a1 + 84));
      std::vector<xgboost::common::WQSummary<float,float>::Queue::QEntry,std::allocator<xgboost::common::WQSummary<float,float>::Queue::QEntry>>::resize((uint64_t)(v28 - 5), 1uLL);
      *(v28 - 2) = 0;
      v28[5] = v28[4];
      v28[2] = v28[1];
      v29 = v28 + 12;
      v28 += 17;
    }
    while (v29 != v27);
    v30 = *(_QWORD *)(a1 + 744);
    v26 = *(unint64_t **)(a1 + 736);
  }
  v31 = (_QWORD *)(a1 + 656);
  std::vector<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 656), 0xF0F0F0F0F0F0F0F1 * ((v30 - (uint64_t)v26) >> 3));
  v318 = xgboost::tree::TrainParam::MaxSketchSize(v32, *(float *)(a1 + 84), *(float *)(a1 + 88));
  v33 = *(_QWORD *)(a1 + 744);
  v324 = a1;
  v34 = *(_QWORD *)(a1 + 736);
  if (v33 != v34)
  {
    v35 = 0;
    v36 = 0;
    do
    {
      v37 = *v31;
      v38 = *v31 + v35;
      v39 = (uint64_t *)(v38 + 16);
      if (v318 > (unint64_t)((uint64_t)(*(_QWORD *)(v38 + 24) - *(_QWORD *)(v38 + 16)) >> 4))
      {
        std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize((uint64_t)v39, v318);
        if (*(_QWORD *)(v38 + 24) == *v39)
          v40 = 0;
        else
          v40 = *v39;
        *(_QWORD *)(v37 + v35) = v40;
        v33 = *(_QWORD *)(v324 + 744);
        v34 = *(_QWORD *)(v324 + 736);
      }
      ++v36;
      v35 += 40;
    }
    while (v36 < 0xF0F0F0F0F0F0F0F1 * ((v33 - v34) >> 3));
  }
  v41 = v324;
  v42 = *(_QWORD **)(v324 + 568);
  v43 = *(_QWORD **)(v324 + 560);
  v44 = 0xAAAAAAAAAAAAAAABLL * (v42 - v43);
  if (v42 == v43)
  {
    v50 = *(_QWORD *)(v324 + 576);
    v45 = a3;
    if (0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v42) >> 3) >= 1 - v44)
    {
      *v42 = 0;
      v42[1] = 0;
      v42[2] = 0;
      *(_QWORD *)(v324 + 568) = v42 + 3;
    }
    else
    {
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v43) >> 3);
      v52 = 2 * v51;
      if (2 * v51 <= 1)
        v52 = 1;
      if (v51 >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      if (v53 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v54 = 3 * v53;
      v55 = (char *)operator new(24 * v53);
      v56 = &v55[24 * v44];
      *((_QWORD *)v56 + 1) = 0;
      *((_QWORD *)v56 + 2) = 0;
      *(_QWORD *)v56 = 0;
      v57 = &v55[8 * v54];
      v41 = v324;
      *(_QWORD *)(v324 + 560) = v56;
      *(_QWORD *)(v324 + 568) = v56 + 24;
      *(_QWORD *)(v324 + 576) = v57;
      if (v42)
        operator delete(v42);
    }
  }
  else
  {
    v45 = a3;
    if (v44 >= 2)
    {
      v46 = v43 + 3;
      if (v42 != v43 + 3)
      {
        v47 = *(_QWORD **)(v324 + 568);
        do
        {
          v49 = (void *)*(v47 - 3);
          v47 -= 3;
          v48 = v49;
          if (v49)
          {
            *(v42 - 2) = v48;
            operator delete(v48);
          }
          v42 = v47;
        }
        while (v47 != v46);
      }
      v41 = v324;
      *(_QWORD *)(v324 + 568) = v46;
    }
  }
  v58 = *(_QWORD *)(**v45)(v45);
  v351.__ptr_ = 0;
  v352.__m_.__sig = 850045863;
  memset(v352.__m_.__opaque, 0, sizeof(v352.__m_.__opaque));
  if (v58)
  {
    v59 = 0;
    v60 = *(_QWORD *)(v41 + 200);
    v61 = *(_QWORD *)(a5 + 160);
    do
    {
      v62 = *(_DWORD *)(v60 + 4 * v59);
      v63 = v62 ^ (v62 >> 31);
      v64 = *(_DWORD *)(v61 + 20 * v63 + 4);
      if (v64 == -1)
      {
        if (*(_DWORD *)(v61 + 20 * (int)v63 + 8) == -1)
          *(_DWORD *)(v60 + 4 * v59) = ~(_DWORD)v63;
      }
      else
      {
        v65 = v62 >> 31;
        if ((*(_DWORD *)(v61 + 20 * (int)v63 + 12) & 0x80000000) != 0)
          v66 = v64 ^ v65;
        else
          v66 = *(_DWORD *)(v61 + 20 * (int)v63 + 8) ^ v65;
        *(_DWORD *)(v60 + 4 * v59) = v66;
      }
      ++v59;
    }
    while (v58 != v59);
  }
  dmlc::OMPException::Rethrow(&v351);
  std::mutex::~mutex(&v352);
  std::exception_ptr::~exception_ptr(&v351);
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v328, *(_QWORD *)(v41 + 520), *(char **)(v41 + 536), *(char **)(v41 + 544), (uint64_t)(*(_QWORD *)(v41 + 544) - *(_QWORD *)(v41 + 536)) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v67 = *(int **)(v41 + 512);
  v68 = *(int **)(v41 + 520);
  if (v67 == v68)
  {
    v68 = *(int **)(v41 + 512);
  }
  else
  {
    v69 = v67 + 1;
    while (v69 != v68)
    {
      v70 = *(v69 - 1);
      v71 = *v69++;
      if (v70 == v71)
      {
        v72 = v69 - 2;
        while (v69 != v68)
        {
          v73 = v70;
          v70 = *v69;
          if (v73 != *v69)
          {
            v72[1] = v70;
            ++v72;
          }
          ++v69;
        }
        v68 = v72 + 1;
        break;
      }
    }
  }
  std::vector<unsigned int>::resize(v328, v68 - v67);
  ((void (*)(uint64_t *__return_ptr, uint64_t (***)(_QWORD)))(*v45)[11])(&v340, v45);
  v338 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))v340;
  v339 = v341;
  if (v341)
  {
    p_shared_owners = (unint64_t *)&v341->__shared_owners_;
    do
      v75 = __ldxr(p_shared_owners);
    while (__stxr(v75 + 1, p_shared_owners));
  }
  xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&v336, 0);
  v319 = v31;
  while ((xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v338) & 1) != 0)
  {
    v76 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v338);
    v77 = v76;
    v78 = *v76;
    i = *v76[1];
    v80 = **v76;
    v81 = (*v76)[1] - v80;
    if (v81)
      v82 = v81 == 8;
    else
      v82 = 1;
    if (v82)
    {
      v323 = **v76;
    }
    else
    {
      v83 = 0;
      v331 = i + 4;
      v84 = **v76;
      do
      {
        v85 = *(_QWORD *)(v80 + 8 * v83);
        v86 = *(_QWORD *)(v80 + 8 * v83 + 8);
        v87 = v86 - v85;
        if (!i && v86 != v85)
          goto LABEL_168;
        v88 = *(_DWORD **)(v324 + 536);
        v89 = *(_DWORD **)(v324 + 544);
        if (v89 != v88)
        {
          v90 = v89 - v88;
          do
          {
            v91 = v90 >> 1;
            v92 = &v88[v90 >> 1];
            v94 = *v92;
            v93 = v92 + 1;
            v90 += ~(v90 >> 1);
            if (v83 > v94)
              v88 = v93;
            else
              v90 = v91;
          }
          while (v90);
        }
        if (v88 != v89 && v83 == *v88)
        {
          v95 = i;
          v345[0].__ptr_ = 0;
          v345[1].__ptr_ = (void *)850045863;
          *(_OWORD *)__p = 0u;
          v347 = 0u;
          v348 = 0u;
          v349 = 0;
          if (v86 != v85)
          {
            v97 = (float *)(v331 + 8 * v85);
            do
            {
              v98 = *((unsigned int *)v97 - 1);
              v99 = *(_DWORD *)(*(_QWORD *)(v324 + 200) + 4 * v98);
              v100 = *v97;
              v101 = v99 ^ (v99 >> 31);
              v102 = *(_QWORD *)(a5 + 160);
              if (*(_DWORD *)(v102 + 20 * v101 + 4) != -1)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v344);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_basemaker-inl.h");
                v110 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v344);
                v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Check failed: tree[nid].IsLeaf()", 32);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v344);
                v102 = *(_QWORD *)(a5 + 160);
              }
              v103 = *(_DWORD *)(v102 + 20 * v101);
              if (v103 != -1)
              {
                v104 = v103 & 0x7FFFFFFF;
                if (v83 == (*(_DWORD *)(v102 + 20 * v104 + 12) & 0x7FFFFFFF))
                {
                  v105 = v102 + 20 * v104;
                  v106 = *(float *)(v105 + 16);
                  v107 = (_DWORD *)(v105 + 4);
                  v108 = (_DWORD *)(v105 + 8);
                  if (v100 < v106)
                    v108 = v107;
                  *(_DWORD *)(*(_QWORD *)(v324 + 200) + 4 * v98) = *v108 ^ (*(int *)(*(_QWORD *)(v324 + 200) + 4 * v98) >> 31);
                }
              }
              v97 += 2;
              --v87;
            }
            while (v87);
          }
          dmlc::OMPException::Rethrow(v345);
          std::mutex::~mutex((std::mutex *)&v345[1]);
          std::exception_ptr::~exception_ptr(v345);
          v78 = *v77;
          v84 = **v77;
          i = v95;
        }
        v96 = v78[1];
        if (v96 == v84)
          break;
        ++v83;
      }
      while (((v96 - v84) >> 3) - 1 > v83);
      v323 = v84;
      i = *v77[1];
    }
    v112 = *(_QWORD *)(v324 + 512);
    v113 = *(_QWORD *)(v324 + 520);
    v345[0].__ptr_ = 0;
    v345[1].__ptr_ = (void *)850045863;
    *(_OWORD *)__p = 0u;
    v347 = 0u;
    v348 = 0u;
    v349 = 0;
    v114 = v113 - v112;
    if (v114)
    {
      v115 = 0;
      v325 = i;
      v326 = v114 >> 2;
      do
      {
        v332 = v115;
        v116 = (int)v328->__begin_[v115];
        v117 = *(unsigned int *)(*v334 + 4 * v116);
        if ((v117 & 0x80000000) == 0)
        {
          v118 = (uint64_t *)(v323 + 8 * v116);
          v119 = *v118;
          v120 = v118[1];
          if (!i && v120 != v119)
            goto LABEL_168;
          if (v120 != v119)
          {
            v121 = *(uint64_t **)(v324 + 560);
            std::vector<xgboost::common::SortedQuantile>::resize((uint64_t)v121, *(int *)(v322 + 12));
            v123 = *(int **)(v324 + 152);
            v124 = *(int **)(v324 + 160);
            if (v123 != v124)
            {
              v125 = *(_QWORD *)(v324 + 176);
              v126 = *v121;
              v127 = *(int **)(v324 + 152);
              v128 = *(_QWORD *)(v324 + 736);
              do
              {
                v129 = *v127++;
                v130 = *(unsigned int *)(v125 + 4 * v129);
                v131 = (_QWORD *)(v126 + 48 * (int)v129);
                *v131 = 0;
                v131[5] = v128 + 136 * (v117 + v321 * v130);
              }
              while (v127 != v124);
            }
            v132 = v120 - v119;
            v133 = (unsigned int *)(v325 + 8 * v119);
            v134 = *(_QWORD *)(v324 + 200);
            v135 = *a2;
            v136 = v133;
            v137 = v120 - v119;
            do
            {
              v139 = *v136;
              v136 += 2;
              v138 = v139;
              v140 = *(_DWORD *)(v134 + 4 * v139);
              if ((v140 & 0x80000000) == 0)
                *(double *)(*v121 + 48 * v140) = *(double *)(*v121 + 48 * v140) + *(float *)(v135 + 8 * v138 + 4);
              --v137;
            }
            while (v137);
            v141 = v325 + 8 * v119;
            v143 = *(float *)(v141 + 4);
            v142 = (float *)(v141 + 4);
            if (v143 == *(float *)&v133[2 * v132 - 1])
            {
              for (i = v325; v123 != v124; ++v123)
              {
                v144 = *v121 + 48 * *v123;
                v145 = *(double *)v144;
                xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::Push(*(uint64_t **)(v144 + 40), *v142, v145);
              }
            }
            else
            {
              v146 = xgboost::tree::TrainParam::MaxSketchSize(v122, *(float *)(v324 + 84), *(float *)(v324 + 88));
              v147 = v146;
              v149 = *(int **)(v324 + 152);
              v148 = *(int **)(v324 + 160);
              if (v149 != v148)
              {
                v150 = v146 + 1;
                do
                {
                  v151 = *v121 + 48 * *v149;
                  v154 = *(_QWORD **)(v151 + 40);
                  v152 = (_QWORD *)(v151 + 40);
                  v153 = v154;
                  *(v152 - 1) = 0xBFF0000000000000;
                  *(v152 - 4) = 0;
                  *(v152 - 3) = 0;
                  v155 = (uint64_t)(v154 + 14);
                  if (v150 > (uint64_t)(v154[15] - v154[14]) >> 4)
                  {
                    std::vector<xgboost::common::WQSummary<float,float>::Entry,std::allocator<xgboost::common::WQSummary<float,float>::Entry>>::resize(v155, v147 + 1);
                    if (v153[15] == v153[14])
                      v156 = 0;
                    else
                      v156 = v153[14];
                    v153[12] = v156;
                    v153 = (_QWORD *)*v152;
                  }
                  v153[13] = 0;
                  ++v149;
                }
                while (v149 != v148);
              }
              if (!*(_BYTE *)(v324 + 92))
              {
                i = v325;
                while (v132)
                {
                  v170 = *((unsigned int *)v142 - 1);
                  v171 = *(_DWORD *)(*(_QWORD *)(v324 + 200) + 4 * v170);
                  if ((v171 & 0x80000000) == 0)
                    xgboost::common::SortedQuantile::Push((xgboost::common::SortedQuantile *)(*v121 + 48 * v171), *v142, *(float *)(*a2 + 8 * v170 + 4), v147);
                  v142 += 2;
                  if (!--v132)
                    goto LABEL_164;
                }
LABEL_168:
                std::terminate();
              }
              v157 = v132 & 0xFFFFFFE0;
              if ((v132 & 0xFFFFFFE0) != 0)
              {
                v158 = 0;
                do
                {
                  v159 = 0;
                  v160 = *a2;
                  do
                  {
                    v161 = (v158 + v159);
                    if (v132 <= v161)
                      goto LABEL_168;
                    v162 = v133[2 * v161];
                    *((_DWORD *)&v351.__ptr_ + v159) = *(_DWORD *)(*(_QWORD *)(v324 + 200) + 4 * v162);
                    v350[v159++] = *(float *)(v160 + 8 * v162 + 4);
                  }
                  while (v159 != 32);
                  v163 = 0;
                  v164 = v142;
                  do
                  {
                    v165 = *((_DWORD *)&v351.__ptr_ + v163);
                    if ((v165 & 0x80000000) == 0)
                    {
                      if (v132 <= v158 + v163)
                        goto LABEL_168;
                      xgboost::common::SortedQuantile::Push((xgboost::common::SortedQuantile *)(*v121 + 48 * v165), *v164, v350[v163], v147);
                    }
                    ++v163;
                    v164 += 2;
                  }
                  while (v163 != 32);
                  v158 += 32;
                  v142 += 64;
                  v157 = v132 & 0xFFFFFFE0;
                }
                while (v158 < v157);
              }
              if (v132 > v157)
              {
                v166 = (v132 & 0xFFFFFFE0) + 1;
                do
                {
                  v167 = v133[2 * v157];
                  v168 = *(_DWORD *)(*(_QWORD *)(v324 + 200) + 4 * v167);
                  if ((v168 & 0x80000000) == 0)
                    xgboost::common::SortedQuantile::Push((xgboost::common::SortedQuantile *)(*v121 + 48 * v168), *(float *)&v133[2 * v157 + 1], *(float *)(*a2 + 8 * v167 + 4), v147);
                  v157 = v166;
                }
                while (v132 > v166++);
              }
              i = v325;
LABEL_164:
              v172 = *(int **)(v324 + 152);
              v173 = *(int **)(v324 + 160);
              while (v172 != v173)
                xgboost::common::SortedQuantile::Finalize((xgboost::common::SortedQuantile *)(*v121 + 48 * *v172++), v147);
            }
          }
        }
        v115 = v332 + 1;
      }
      while (v332 + 1 != v326);
    }
    dmlc::OMPException::Rethrow(v345);
    std::mutex::~mutex((std::mutex *)&v345[1]);
    std::exception_ptr::~exception_ptr(v345);
    xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v338);
    a5 = v322;
    v31 = v319;
  }
  v174 = v337;
  if (v337)
  {
    v175 = (unint64_t *)&v337->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v339;
  if (v339)
  {
    v178 = (unint64_t *)&v339->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v341;
  if (v341)
  {
    v181 = (unint64_t *)&v341->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = *(_QWORD *)(v324 + 736);
  if (*(_QWORD *)(v324 + 744) == v183)
  {
    v187 = 0;
  }
  else
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    do
    {
      *(_QWORD *)&v347 = 0;
      *(_OWORD *)&v345[0].__ptr_ = 0u;
      *(_OWORD *)__p = 0u;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::GetSummary((uint64_t *)(v183 + v184), (uint64_t *)v345);
      xgboost::common::WXQSummary<float,float>::SetPrune((_QWORD *)(*v31 + v185), (uint64_t *)v345, v318);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v186;
      v183 = *(_QWORD *)(v324 + 736);
      v187 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v324 + 744) - v183) >> 3);
      v185 += 40;
      v184 += 136;
    }
    while (v186 < v187);
  }
  v340 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v324 + 664) - *(_QWORD *)(v324 + 656)) >> 3);
  v338 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))v187;
  if (v340 != v187)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v345);
    if (v345[0].__ptr_)
    {
      v188 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
      dmlc::LogMessageFatal::Entry::Init(v188, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
      v189 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
      v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Check failed: ", 14);
      v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"summary_array_.size() == sketchs_.size()", 40);
      v192 = *((char *)v345[0].__ptr_ + 23);
      v193 = v192 >= 0 ? v345[0].__ptr_ : *(void **)v345[0].__ptr_;
      v194 = v192 >= 0 ? *((unsigned __int8 *)v345[0].__ptr_ + 23) : *((_QWORD *)v345[0].__ptr_ + 1);
      v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)v193, v194);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
      ptr = v345[0].__ptr_;
      v345[0].__ptr_ = 0;
      if (ptr)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v345, (uint64_t)ptr);
    }
  }
  v197 = *(char **)(v324 + 656);
  v198 = *(_QWORD *)(v324 + 664) - (_QWORD)v197;
  if (v198)
  {
    v199 = v198 / 40;
    v200 = (16 * v318) | 8;
    std::string::resize((std::string *)(v324 + 712), v198 / 40 * v200, 0);
    v345[0].__ptr_ = v197;
    v345[1].__ptr_ = (void *)v200;
    __p[0] = (void *)v199;
    __p[1] = 0;
    *(_QWORD *)&v347 = 0;
    *((_QWORD *)&v347 + 1) = v324 + 712;
    if (*(char *)(v324 + 735) < 0)
    {
      if (*(_QWORD *)(v324 + 720))
        v201 = *(void **)(v324 + 712);
      else
        v201 = 0;
    }
    else if (*(_BYTE *)(v324 + 735))
    {
      v201 = (void *)(v324 + 712);
    }
    else
    {
      v201 = 0;
    }
    rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(v324 + 680), v201, (const char *)v200, v199, (void (*)(void *))rabit::SerializeReduceClosure<xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer>::Invoke, v345);
    v202 = 0;
    do
    {
      if (*(char *)(v324 + 735) < 0)
      {
        if (*(_QWORD *)(v324 + 720))
          v203 = *(_QWORD *)(v324 + 712);
        else
          v203 = 0;
      }
      else if (*(_BYTE *)(v324 + 735))
      {
        v203 = v324 + 712;
      }
      else
      {
        v203 = 0;
      }
      v340 = (uint64_t)&unk_24E6B8500;
      v341 = (std::__shared_weak_count *)(v203 + v202);
      v342 = (16 * v318) | 8;
      v343 = 0;
      xgboost::common::QuantileSketchTemplate<float,float,xgboost::common::WXQSummary<float,float>>::SummaryContainer::Load<rabit::utils::MemoryFixSizeBuffer>((uint64_t *)v197, (uint64_t (***)(_QWORD, uint64_t, uint64_t))&v340);
      v197 += 40;
      v202 += v200;
      --v199;
    }
    while (v199);
  }
  v204 = *(_QWORD *)(v324 + 344);
  *(_QWORD *)(v324 + 360) = *(_QWORD *)(v324 + 352);
  v205 = *(_DWORD **)(v324 + 328);
  *(_QWORD *)(v324 + 336) = v205;
  if ((unint64_t)v205 >= v204)
  {
    v207 = v204 - (_QWORD)v205;
    v208 = v207 >> 1;
    if ((unint64_t)(v207 >> 1) <= 1)
      v208 = 1;
    if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL)
      v209 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v209 = v208;
    v210 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v324 + 344, v209);
    v211 = *(char **)(v324 + 328);
    v212 = *(char **)(v324 + 336);
    v214 = &v210[v213];
    *v210 = 0;
    v206 = (char *)(v210 + 1);
    while (v212 != v211)
    {
      v215 = *((_DWORD *)v212 - 1);
      v212 -= 4;
      *--v210 = v215;
    }
    *(_QWORD *)(v324 + 328) = v210;
    *(_QWORD *)(v324 + 336) = v206;
    *(_QWORD *)(v324 + 344) = v214;
    if (v211)
      operator delete(v211);
  }
  else
  {
    *v205 = 0;
    v206 = (char *)(v205 + 1);
  }
  v333 = (void **)(v324 + 328);
  *(_QWORD *)(v324 + 336) = v206;
  v216 = *(_QWORD *)(v324 + 160) - *(_QWORD *)(v324 + 152);
  if (v216)
  {
    v327 = 0;
    v329 = (std::vector<unsigned int> *)(v324 + 344);
    v217 = (void **)(v324 + 352);
    v218 = (_QWORD *)(v324 + 368);
    while (1)
    {
      v219 = (unsigned int *)*a4;
      v220 = (unsigned int *)a4[1];
      if (*a4 != (int *)v220)
        break;
LABEL_330:
      v288 = *(char **)(v324 + 360);
      v287 = *(_QWORD *)(v324 + 368);
      if ((unint64_t)v288 >= v287)
      {
        v290 = (char *)*v217;
        v291 = (v288 - (_BYTE *)*v217) >> 2;
        v292 = v291 + 1;
        if ((unint64_t)(v291 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v293 = v287 - (_QWORD)v290;
        if (v293 >> 1 > v292)
          v292 = v293 >> 1;
        if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFFCLL)
          v294 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v294 = v292;
        if (v294)
        {
          v295 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v324 + 368, v294);
          v290 = *(char **)(v324 + 352);
          v288 = *(char **)(v324 + 360);
        }
        else
        {
          v295 = 0;
        }
        v296 = &v295[4 * v291];
        *(_DWORD *)v296 = 0;
        v289 = v296 + 4;
        while (v288 != v290)
        {
          v297 = *((_DWORD *)v288 - 1);
          v288 -= 4;
          *((_DWORD *)v296 - 1) = v297;
          v296 -= 4;
        }
        *(_QWORD *)(v324 + 352) = v296;
        *(_QWORD *)(v324 + 360) = v289;
        *(_QWORD *)(v324 + 368) = &v295[4 * v294];
        if (v290)
          operator delete(v290);
      }
      else
      {
        *(_DWORD *)v288 = 0;
        v289 = v288 + 4;
      }
      *(_QWORD *)(v324 + 360) = v289;
      v298 = ((unint64_t)v289 - *(_QWORD *)(v324 + 352)) >> 2;
      v300 = *(char **)(v324 + 336);
      v299 = *(_QWORD *)(v324 + 344);
      if ((unint64_t)v300 >= v299)
      {
        v301 = (char *)*v333;
        v302 = (v300 - (_BYTE *)*v333) >> 2;
        v303 = v302 + 1;
        if ((unint64_t)(v302 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v304 = v299 - (_QWORD)v301;
        if (v304 >> 1 > v303)
          v303 = v304 >> 1;
        if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL)
          v305 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v305 = v303;
        if (v305)
        {
          v306 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v329, v305);
          v301 = *(char **)(v324 + 328);
          v300 = *(char **)(v324 + 336);
        }
        else
        {
          v306 = 0;
        }
        v307 = &v306[4 * v302];
        *(_DWORD *)v307 = v298;
        v206 = v307 + 4;
        while (v300 != v301)
        {
          v308 = *((_DWORD *)v300 - 1);
          v300 -= 4;
          *((_DWORD *)v307 - 1) = v308;
          v307 -= 4;
        }
        *(_QWORD *)(v324 + 328) = v307;
        *(_QWORD *)(v324 + 336) = v206;
        *(_QWORD *)(v324 + 344) = &v306[4 * v305];
        if (v301)
          operator delete(v301);
      }
      else
      {
        *(_DWORD *)v300 = v298;
        v206 = v300 + 4;
      }
      *(_QWORD *)(v324 + 336) = v206;
      v216 = *(_QWORD *)(v324 + 160) - *(_QWORD *)(v324 + 152);
      if (++v327 >= (unint64_t)(v216 >> 2))
        goto LABEL_363;
    }
    while (1)
    {
      v221 = *v219;
      v222 = *(unsigned int *)(*v334 + 4 * v221);
      if ((v222 & 0x80000000) != 0)
      {
        LODWORD(v340) = *(_DWORD *)(*v334 + 4 * v221);
        LODWORD(v338) = -2;
        if ((_DWORD)v222 != -2)
        {
          dmlc::LogCheckFormat<int,int>((uint64_t *)v345);
          if (v345[0].__ptr_)
          {
            v240 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            dmlc::LogMessageFatal::Entry::Init(v240, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
            v241 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
            v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)"Check failed: ", 14);
            v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)"offset == -2", 12);
            v244 = *((char *)v345[0].__ptr_ + 23);
            v245 = v244 >= 0 ? v345[0].__ptr_ : *(void **)v345[0].__ptr_;
            v246 = v244 >= 0 ? *((unsigned __int8 *)v345[0].__ptr_ + 23) : *((_QWORD *)v345[0].__ptr_ + 1);
            v247 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)v245, v246);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)": ", 2);
            dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
            v248 = v345[0].__ptr_;
            v345[0].__ptr_ = 0;
            if (v248)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v345, (uint64_t)v248);
          }
        }
        v249 = *(float *)(*(_QWORD *)(v324 + 464) + 4 * ((2 * (_DWORD)v221) | 1u));
        v250 = (float)(v249 + fabsf(v249)) + 0.000001;
        v252 = *(float **)(v324 + 360);
        v251 = *(_QWORD *)(v324 + 368);
        if ((unint64_t)v252 >= v251)
        {
          v260 = (float *)*v217;
          v261 = ((char *)v252 - (_BYTE *)*v217) >> 2;
          v262 = v261 + 1;
          if ((unint64_t)(v261 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v263 = v251 - (_QWORD)v260;
          if (v263 >> 1 > v262)
            v262 = v263 >> 1;
          if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL)
            v264 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v264 = v262;
          if (v264)
          {
            v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v324 + 368, v264);
            v260 = *(float **)(v324 + 352);
            v252 = *(float **)(v324 + 360);
          }
          else
          {
            v265 = 0;
          }
          v280 = (float *)&v265[4 * v261];
          *v280 = v250;
          v253 = v280 + 1;
          while (v252 != v260)
          {
            v281 = *((_DWORD *)v252-- - 1);
            *((_DWORD *)v280-- - 1) = v281;
          }
          *(_QWORD *)(v324 + 352) = v280;
          *(_QWORD *)(v324 + 360) = v253;
          *(_QWORD *)(v324 + 368) = &v265[4 * v264];
          if (v260)
            operator delete(v260);
        }
        else
        {
          *v252 = v250;
          v253 = v252 + 1;
        }
        *(_QWORD *)(v324 + 360) = v253;
        v268 = ((unint64_t)v253 - *(_QWORD *)(v324 + 352)) >> 2;
        v270 = *(char **)(v324 + 336);
        v282 = *(_QWORD *)(v324 + 344);
        if ((unint64_t)v270 >= v282)
        {
          v271 = (char *)*v333;
          v283 = (v270 - (_BYTE *)*v333) >> 2;
          v284 = v283 + 1;
          if ((unint64_t)(v283 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v285 = v282 - (_QWORD)v271;
          if (v285 >> 1 > v284)
            v284 = v285 >> 1;
          if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL)
            v275 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v275 = v284;
          if (v275)
          {
            v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v329, v275);
            v271 = *(char **)(v324 + 328);
            v270 = *(char **)(v324 + 336);
          }
          else
          {
            v276 = 0;
          }
          v277 = &v276[4 * v283];
          *(_DWORD *)v277 = v268;
          v278 = v277 + 4;
          while (v270 != v271)
          {
            v286 = *((_DWORD *)v270 - 1);
            v270 -= 4;
            *((_DWORD *)v277 - 1) = v286;
            v277 -= 4;
          }
          goto LABEL_327;
        }
      }
      else
      {
        v223 = (_QWORD *)(*(_QWORD *)(v324 + 656) + 40 * (v327 * v321 + v222));
        v224 = v223[1];
        v225 = *(float **)(v324 + 360);
        if (v224 >= 2)
        {
          for (j = 1; j < v224; ++j)
          {
            v227 = *(float *)(*v223 + 16 * j + 12) + -0.000001;
            if (j == 1 || v227 > *(v225 - 1))
            {
              if ((unint64_t)v225 >= *v218)
              {
                v229 = (float *)*v217;
                v230 = ((char *)v225 - (_BYTE *)*v217) >> 2;
                v231 = v230 + 1;
                if ((unint64_t)(v230 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v232 = *v218 - (_QWORD)v229;
                if (v232 >> 1 > v231)
                  v231 = v232 >> 1;
                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL)
                  v233 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v233 = v231;
                if (v233)
                {
                  v234 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v324 + 368, v233);
                  v229 = *(float **)(v324 + 352);
                  v225 = *(float **)(v324 + 360);
                }
                else
                {
                  v234 = 0;
                }
                v235 = (float *)&v234[4 * v230];
                *v235 = v227;
                v228 = v235 + 1;
                while (v225 != v229)
                {
                  v236 = *((_DWORD *)v225-- - 1);
                  *((_DWORD *)v235-- - 1) = v236;
                }
                *(_QWORD *)(v324 + 352) = v235;
                *(_QWORD *)(v324 + 360) = v228;
                *(_QWORD *)(v324 + 368) = &v234[4 * v233];
                if (v229)
                  operator delete(v229);
              }
              else
              {
                *v225 = v227;
                v228 = v225 + 1;
              }
              *(_QWORD *)(v324 + 360) = v228;
              v224 = v223[1];
              v225 = v228;
            }
          }
        }
        if (v224)
        {
          v237 = *(float *)(*v223 + 16 * v224 - 4);
          v238 = (float)(v237 + fabsf(v237)) + 0.000001;
          if ((unint64_t)v225 >= *v218)
          {
            v254 = (float *)*v217;
            v255 = ((char *)v225 - (_BYTE *)*v217) >> 2;
            v256 = v255 + 1;
            if ((unint64_t)(v255 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v257 = *v218 - (_QWORD)v254;
            if (v257 >> 1 > v256)
              v256 = v257 >> 1;
            if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL)
              v258 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v258 = v256;
            if (v258)
            {
              v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v324 + 368, v258);
              v254 = *(float **)(v324 + 352);
              v225 = *(float **)(v324 + 360);
            }
            else
            {
              v259 = 0;
            }
            v266 = (float *)&v259[4 * v255];
            *v266 = v238;
            v239 = v266 + 1;
            while (v225 != v254)
            {
              v267 = *((_DWORD *)v225-- - 1);
              *((_DWORD *)v266-- - 1) = v267;
            }
            *(_QWORD *)(v324 + 352) = v266;
            *(_QWORD *)(v324 + 360) = v239;
            *(_QWORD *)(v324 + 368) = &v259[4 * v258];
            if (v254)
              operator delete(v254);
          }
          else
          {
            *v225 = v238;
            v239 = v225 + 1;
          }
          *(_QWORD *)(v324 + 360) = v239;
          v225 = v239;
        }
        v268 = ((unint64_t)v225 - *(_QWORD *)(v324 + 352)) >> 2;
        v270 = *(char **)(v324 + 336);
        v269 = *(_QWORD *)(v324 + 344);
        if ((unint64_t)v270 >= v269)
        {
          v271 = (char *)*v333;
          v272 = (v270 - (_BYTE *)*v333) >> 2;
          v273 = v272 + 1;
          if ((unint64_t)(v272 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v274 = v269 - (_QWORD)v271;
          if (v274 >> 1 > v273)
            v273 = v274 >> 1;
          if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
            v275 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v275 = v273;
          if (v275)
          {
            v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v329, v275);
            v271 = *(char **)(v324 + 328);
            v270 = *(char **)(v324 + 336);
          }
          else
          {
            v276 = 0;
          }
          v277 = &v276[4 * v272];
          *(_DWORD *)v277 = v268;
          v278 = v277 + 4;
          while (v270 != v271)
          {
            v279 = *((_DWORD *)v270 - 1);
            v270 -= 4;
            *((_DWORD *)v277 - 1) = v279;
            v277 -= 4;
          }
LABEL_327:
          *(_QWORD *)(v324 + 328) = v277;
          *(_QWORD *)(v324 + 336) = v278;
          *(_QWORD *)(v324 + 344) = &v276[4 * v275];
          if (v271)
            operator delete(v271);
          goto LABEL_329;
        }
      }
      *(_DWORD *)v270 = v268;
      v278 = v270 + 4;
LABEL_329:
      *(_QWORD *)(v324 + 336) = v278;
      if (++v219 == v220)
        goto LABEL_330;
    }
  }
LABEL_363:
  v340 = (v206 - (_BYTE *)*v333) >> 2;
  v338 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))((v216 >> 2) + (v216 >> 2) * (a4[1] - *a4) + 1);
  if ((uint64_t (**)(_QWORD, uint64_t, uint64_t))v340 != v338)
  {
    dmlc::LogCheckFormat<unsigned long,unsigned long>((uint64_t *)v345);
    if (v345[0].__ptr_)
    {
      v309 = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
      dmlc::LogMessageFatal::Entry::Init(v309, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/updater_histmaker.cc");
      v310 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v340);
      v311 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v310, (uint64_t)"Check failed: ", 14);
      v312 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, (uint64_t)"this->wspace_.rptr.size() == (fset.size() + 1) * this->qexpand_.size() + 1", 74);
      v313 = *((char *)v345[0].__ptr_ + 23);
      v314 = v313 >= 0 ? v345[0].__ptr_ : *(void **)v345[0].__ptr_;
      v315 = v313 >= 0 ? *((unsigned __int8 *)v345[0].__ptr_ + 23) : *((_QWORD *)v345[0].__ptr_ + 1);
      v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)v314, v315);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)": ", 2);
      dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v340);
      v317 = v345[0].__ptr_;
      v345[0].__ptr_ = 0;
      if (v317)
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v345, (uint64_t)v317);
    }
  }
}

void sub_220ECA248()
{
  std::mutex *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::exception_ptr v4;

  __cxa_end_catch();
  std::mutex::~mutex(v0);
  std::exception_ptr::~exception_ptr(&v4);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v1);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v2);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v3);
  JUMPOUT(0x220ECA36CLL);
}

void sub_220ECA254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::exception_ptr a62)
{
  std::mutex *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::exception_ptr v67;

  std::mutex::~mutex(v63);
  std::exception_ptr::~exception_ptr(&v67);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
  std::shared_ptr<xgboost::BatchIteratorImpl<xgboost::SparsePage>>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
  _Unwind_Resume(a1);
}

void sub_220ECA334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&a31);
  JUMPOUT(0x220ECA340);
}

void xgboost::tree::CQHistMaker::InitWorkSet(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::string *Entry;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *size;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *Engine;
  float v52;
  unint64_t begin;
  unint64_t v54;
  unint64_t v55;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v58;
  std::vector<unsigned int>::pointer v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  rabit::engine *v69;
  void *v70;
  char *v71;
  std::string::size_type v72;
  void *v73;
  rabit::engine *v74;
  std::string::size_type v75;
  int v76;
  std::string::size_type v77;
  void *v78;
  std::string *v79;
  std::string::size_type v80;
  std::vector<unsigned int> *i;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  std::string::size_type __n;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  std::string v90;

  v5 = a1;
  if (*(_QWORD *)(a1 + 456) != a2)
  {
    v6 = (uint64_t *)(a1 + 464);
    std::vector<float>::resize(a1 + 464, (2 * *(_DWORD *)(a3 + 24)));
    v7 = *(void **)(v5 + 464);
    v8 = *(_QWORD *)(v5 + 472) - (_QWORD)v7;
    if (v8 >= 1)
      memset_pattern16(v7, &unk_220F63CA0, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a2 + 88))(&v90);
    v88 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
    if (v90.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    xgboost::BatchIterator<xgboost::SortedCSCPage>::BatchIterator(&__n, 0);
    for (i = a4; ; a4 = i)
    {
      a1 = xgboost::BatchIterator<xgboost::SortedCSCPage>::operator!=((uint64_t *)&v88);
      if ((a1 & 1) == 0)
        break;
      v11 = (uint64_t **)xgboost::BatchIterator<xgboost::SortedCSCPage>::operator*((uint64_t *)&v88);
      v12 = v11;
      v13 = *v11;
      v14 = **v11;
      v15 = (*v11)[1] - v14;
      if (v15)
        v16 = v15 == 8;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = 0;
        v18 = *v11[1];
        v19 = 1;
        v20 = 1;
        v21 = **v11;
        do
        {
          v22 = (uint64_t *)(v14 + 8 * v17);
          v24 = *v22;
          v23 = v22[1];
          if (!v18 && v23 != v24)
            std::terminate();
          if (v23 != v24)
          {
            v25 = v19 - 1;
            v84 = v19 - 1;
            v83 = (uint64_t)(*(_QWORD *)(v5 + 472) - *(_QWORD *)(v5 + 464)) >> 2;
            if (v83 <= v25)
            {
              dmlc::LogCheckFormat<unsigned int,unsigned long>(&v85);
              if (v85)
              {
                Entry = (std::string *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
                dmlc::LogMessageFatal::Entry::Init(Entry, "/Library/Caches/com.apple.xbs/Sources/CoreML/xgboost/src/tree/./updater_basemaker-inl.h");
                v27 = (_QWORD *)dmlc::LogMessageFatal::GetEntry((dmlc::LogMessageFatal *)&v83);
                v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: ", 14);
                v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"fid * 2 < fminmax_.size()", 25);
                v30 = *(char *)(v85 + 23);
                v31 = v30 >= 0 ? v85 : *(_QWORD *)v85;
                v32 = v30 >= 0 ? *(unsigned __int8 *)(v85 + 23) : *(_QWORD *)(v85 + 8);
                v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": ", 2);
                dmlc::LogMessageFatal::~LogMessageFatal((dmlc::LogMessageFatal *)&v83);
                v34 = v85;
                v85 = 0;
                if (v34)
                  std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v85, v34);
              }
            }
            v35 = -*(float *)(v18 + 8 * v24 + 4);
            v36 = *v6;
            if (*(float *)(*v6 + 4 * v25) > v35)
              v35 = *(float *)(*v6 + 4 * v25);
            *(float *)(v36 + 4 * v25) = v35;
            v37 = *(float *)(v18 + 8 * v24 + 8 * (v23 + ~v24) + 4);
            if (v37 < *(float *)(v36 + 4 * v19))
              v37 = *(float *)(v36 + 4 * v19);
            *(float *)(v36 + 4 * v19) = v37;
            v13 = *v12;
            v21 = **v12;
          }
          v38 = v13[1];
          if (v38 == v21)
            break;
          v17 = v20++;
          v19 += 2;
        }
        while (((v38 - v21) >> 3) - 1 > v17);
      }
      xgboost::BatchIterator<xgboost::SortedCSCPage>::operator++((uint64_t *)&v88);
    }
    v39 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    size = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
    if (v90.__r_.__value_.__l.__size_)
    {
      v46 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    *(_QWORD *)(v5 + 456) = a2;
  }
  v48 = *(_QWORD *)(v5 + 472) - *(_QWORD *)(v5 + 464);
  if (v48)
    v49 = *(_QWORD *)(v5 + 464);
  else
    v49 = 0;
  v50 = v48 >> 2;
  Engine = rabit::engine::GetEngine((rabit::engine *)a1);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, float *(*)(float *, float *, int), _QWORD, _QWORD))(*(_QWORD *)Engine + 8))(Engine, v49, 4, v50, rabit::op::Reducer<rabit::op::Max,float>, 0, 0);
  v52 = *(float *)(v5 + 80);
  begin = (unint64_t)a4->__begin_;
  a4->__end_ = a4->__begin_;
  if (*(_QWORD *)(v5 + 472) == *(_QWORD *)(v5 + 464))
  {
    v67 = begin;
  }
  else
  {
    v54 = 0;
    do
    {
      v55 = v54 >> 1;
      if (xgboost::tree::BaseMaker::FMetaHelper::Type((xgboost::tree::BaseMaker::FMetaHelper *)(v5 + 464), v54 >> 1))
      {
        end = a4->__end_;
        value = a4->__end_cap_.__value_;
        if (end >= value)
        {
          v59 = a4->__begin_;
          v60 = end - a4->__begin_;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v62 = (char *)value - (char *)v59;
          if (v62 >> 1 > v61)
            v61 = v62 >> 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a4->__end_cap_, v63);
            v59 = a4->__begin_;
            end = a4->__end_;
          }
          else
          {
            v64 = 0;
          }
          v65 = (unsigned int *)&v64[4 * v60];
          *v65 = v55;
          v58 = v65 + 1;
          while (end != v59)
          {
            v66 = *--end;
            *--v65 = v66;
          }
          a4->__begin_ = v65;
          a4->__end_ = v58;
          a4->__end_cap_.__value_ = (unsigned int *)&v64[4 * v63];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *end = v55;
          v58 = end + 1;
        }
        a4->__end_ = v58;
      }
      v54 += 2;
    }
    while (v54 < (uint64_t)(*(_QWORD *)(v5 + 472) - *(_QWORD *)(v5 + 464)) >> 2);
    begin = (unint64_t)a4->__begin_;
    v67 = (uint64_t)a4->__end_;
  }
  v68 = dmlc::ThreadLocalStore<xgboost::common::RandomThreadLocalEntry>::Get();
  std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(begin, v67, v68);
  std::vector<unsigned int>::resize(a4, (float)(v52 * (float)(unint64_t)((uint64_t)(v67 - begin) >> 2)));
  memset(&v90, 0, sizeof(v90));
  *(_QWORD *)&v88 = &unk_24E6B8398;
  *((_QWORD *)&v88 + 1) = &v90;
  v89 = 0;
  v70 = rabit::engine::GetEngine(v69);
  v71 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v70 + 64))(v70);
  if (!(_DWORD)v71)
  {
    __n = a4->__end_ - a4->__begin_;
    v71 = rabit::utils::MemoryBufferStream::Write((char *)&v88, &__n, 8uLL);
    if (__n)
      v71 = (char *)(*(uint64_t (**)(__int128 *, std::vector<unsigned int>::pointer, int64_t))(v88 + 8))(&v88, a4->__begin_, (char *)a4->__end_ - (char *)a4->__begin_);
  }
  v72 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = v90.__r_.__value_.__l.__size_;
  __n = v72;
  v73 = rabit::engine::GetEngine((rabit::engine *)v71);
  v74 = (rabit::engine *)(*(uint64_t (**)(void *, std::string::size_type *, uint64_t, _QWORD))(*(_QWORD *)v73 + 16))(v73, &__n, 8, 0);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v75 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    v75 = v90.__r_.__value_.__l.__size_;
  if (v75 != __n)
  {
    std::string::resize(&v90, __n, 0);
    v75 = __n;
  }
  if (v75)
  {
    v76 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    v77 = v90.__r_.__value_.__r.__words[0];
    v78 = rabit::engine::GetEngine(v74);
    if (v76 >= 0)
      v79 = &v90;
    else
      v79 = (std::string *)v77;
    (*(void (**)(void *, std::string *, std::string::size_type, _QWORD))(*(_QWORD *)v78 + 16))(v78, v79, v75, 0);
  }
  __n = 0;
  if ((*(uint64_t (**)(__int128 *, std::string::size_type *, uint64_t))v88)(&v88, &__n, 8) == 8)
  {
    v80 = __n;
    std::vector<unsigned int>::resize(a4, __n);
    if (__n)
      (*(void (**)(__int128 *, std::vector<unsigned int>::pointer, std::string::size_type))v88)(&v88, a4->__begin_, 4 * v80);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
}

void xgboost::tree::CQHistMaker::ResetPositionAfterSplit(xgboost::tree::CQHistMaker *this, xgboost::DMatrix *a2, const xgboost::RegTree *a3)
{
  xgboost::tree::BaseMaker::GetSplitSet(*((int **)this + 19), *((int **)this + 20), (uint64_t)a3, (std::vector<unsigned int> *)((char *)this + 536));
}

_QWORD *xgboost::tree::CQHistMaker::CreateHist(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD), uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  void *v20;
  _OWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t (***v35)(_QWORD);
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v9 = (**a3)(a3);
  std::vector<int>::resize((std::vector<int> *)(a1 + 488), *(unsigned int *)(a5 + 24));
  v10 = *(_QWORD *)(a1 + 488);
  v11 = *(_QWORD *)(a1 + 496) - v10;
  if (v11 >= 1)
    memset(*(void **)(a1 + 488), 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  v12 = *a4;
  v13 = a4[1];
  v14 = v13 - *a4;
  if (v13 != *a4)
  {
    v15 = 0;
    v16 = v14 >> 2;
    if (v16 <= 1)
      v16 = 1;
    do
    {
      *(_DWORD *)(v10 + 4 * *(unsigned int *)(v12 + 4 * v15)) = v15;
      ++v15;
    }
    while (v16 != v15);
  }
  v17 = *(_OWORD **)(a1 + 376);
  v18 = *(_OWORD **)(a1 + 384);
  if (v18 == v17)
  {
    if (*(_OWORD **)(a1 + 392) == v18)
    {
      v21 = operator new(0x28uLL);
      *v21 = 0u;
      v21[1] = 0u;
      *((_QWORD *)v21 + 4) = 0;
      *(_QWORD *)(a1 + 376) = v21;
      *(_QWORD *)(a1 + 384) = (char *)v21 + 40;
      *(_QWORD *)(a1 + 392) = (char *)v21 + 40;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *((_QWORD *)v18 + 4) = 0;
      *v18 = 0u;
      v18[1] = 0u;
      *(_QWORD *)(a1 + 384) = (char *)v18 + 40;
    }
  }
  else if (0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)v17) >> 3) >= 2)
  {
    v19 = (_OWORD *)((char *)v17 + 40);
    while (v18 != v19)
    {
      v20 = (void *)*((_QWORD *)v18 - 3);
      if (v20)
      {
        *((_QWORD *)v18 - 2) = v20;
        operator delete(v20);
      }
      v18 = (_OWORD *)((char *)v18 - 40);
    }
    *(_QWORD *)(a1 + 384) = v19;
  }
  v22 = *(_QWORD **)(a1 + 376);
  v23 = (_BYTE *)v22[2];
  v24 = (_BYTE *)v22[3];
  if (v23 != v24)
  {
    bzero(v23, (v24 - v23) & 0xFFFFFFFFFFFFFFF0);
    v22 = *(_QWORD **)(a1 + 376);
  }
  if (*(_QWORD *)(a1 + 336) == *(_QWORD *)(a1 + 328))
    v25 = 0;
  else
    v25 = *(_QWORD *)(a1 + 328);
  *v22 = v25;
  v26 = *(_QWORD *)(a1 + 352);
  v27 = *(_QWORD *)(a1 + 360) - v26;
  if (!v27)
    v26 = 0;
  v22[1] = v26;
  v36 = 0uLL;
  std::vector<xgboost::tree::GradStats>::resize((uint64_t)(v22 + 2), v27 >> 2, &v36);
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 16);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 24);
  v30 = v29 - v28;
  if (v29 == v28)
    v31 = 0;
  else
    v31 = *(void **)(*(_QWORD *)(a1 + 376) + 16);
  v32 = operator new(0x38uLL);
  *v32 = &off_24E6BB330;
  v32[1] = a1;
  v32[2] = &v35;
  v32[3] = a4;
  v32[4] = a2;
  v32[5] = v9;
  v32[6] = a5;
  v38 = v32;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 400), v31, (const char *)0x10, v30 >> 4, (void (*)(void *))rabit::InvokeLambda, v37);
  result = v38;
  if (v38 == v37)
  {
    v34 = 4;
    result = v37;
  }
  else
  {
    if (!v38)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
}

void sub_220ECAD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void xgboost::tree::BaseMaker::~BaseMaker(void **this)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *this = off_24E6BB2D0;
  v2 = this + 28;
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  v7 = this + 34;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = this + 31;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = v2;
  std::vector<std::unordered_set<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = this[25];
  if (v3)
  {
    this[26] = v3;
    operator delete(v3);
  }
  v4 = this[22];
  if (v4)
  {
    this[23] = v4;
    operator delete(v4);
  }
  v5 = this[19];
  if (v5)
  {
    this[20] = v5;
    operator delete(v5);
  }
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v6 = this[12];
  if (v6)
  {
    this[13] = v6;
    operator delete(v6);
  }
}

