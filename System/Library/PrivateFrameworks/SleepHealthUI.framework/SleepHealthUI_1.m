id SleepOnboardingViewRepresentation.makeUIViewController(context:)()
{
  id *v0;

  return *v0;
}

id SleepOnboardingViewRepresentation.makeCoordinator()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  char *v4;
  char *v5;
  id v6;
  objc_super v8;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = (objc_class *)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  v4 = (char *)objc_allocWithZone(v3);
  v5 = &v4[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent];
  *(_QWORD *)v5 = v2;
  *((_QWORD *)v5 + 1) = v1;
  v8.receiver = v4;
  v8.super_class = v3;
  v6 = v2;
  swift_retain();
  return objc_msgSendSuper2(&v8, sel_init);
}

id SleepOnboardingViewRepresentation.Coordinator.__allocating_init(_:)(_OWORD *a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v3[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_1A9C2206C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *a1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = v4;
  a2[1] = v5;
  v6 = v4;
  return swift_retain();
}

void sub_1A9C220C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v5 = *(void **)v4;
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = v2;
  v6 = v3;
  swift_retain();
  swift_release();

}

uint64_t sub_1A9C22140@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = v1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *a1 = v4;
  a1[1] = v5;
  v6 = v4;
  return swift_retain();
}

void sub_1A9C22198(_OWORD *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent);
  swift_beginAccess();
  v4 = *v3;
  *(_OWORD *)v3 = *a1;
  swift_release();

}

uint64_t (*sub_1A9C221F8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id SleepOnboardingViewRepresentation.Coordinator.init(_:)(_OWORD *a1)
{
  char *v1;
  objc_super v3;

  *(_OWORD *)&v1[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent] = *a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v3, sel_init);
}

id SleepOnboardingViewRepresentation.Coordinator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepOnboardingViewRepresentation.Coordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepOnboardingViewRepresentation.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1A9C22364@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  char *v6;
  char *v7;
  id v8;
  id result;
  objc_super v10;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = (objc_class *)type metadata accessor for SleepOnboardingViewRepresentation.Coordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtCV13SleepHealthUI33SleepOnboardingViewRepresentation11Coordinator_parent];
  *(_QWORD *)v7 = v4;
  *((_QWORD *)v7 + 1) = v3;
  v10.receiver = v6;
  v10.super_class = v5;
  v8 = v4;
  swift_retain();
  result = objc_msgSendSuper2(&v10, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_1A9C223D8()
{
  return sub_1A9CE7668();
}

uint64_t sub_1A9C22410()
{
  sub_1A9C2276C();
  return sub_1A9CE76A4();
}

uint64_t sub_1A9C22460()
{
  sub_1A9C2276C();
  return sub_1A9CE7674();
}

void sub_1A9C224B0()
{
  sub_1A9C2276C();
  sub_1A9CE7698();
  __break(1u);
}

unint64_t sub_1A9C224D4()
{
  unint64_t result;

  result = qword_1EEB46270;
  if (!qword_1EEB46270)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB46270);
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingViewRepresentation.Coordinator()
{
  return objc_opt_self();
}

unint64_t sub_1A9C22534()
{
  unint64_t result;

  result = qword_1EEB46E70;
  if (!qword_1EEB46E70)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingViewRepresentation, &type metadata for SleepOnboardingViewRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB46E70);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SleepOnboardingViewRepresentation(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SleepOnboardingViewRepresentation(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for SleepOnboardingViewRepresentation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for SleepOnboardingViewRepresentation(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepOnboardingViewRepresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepOnboardingViewRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepOnboardingViewRepresentation()
{
  return &type metadata for SleepOnboardingViewRepresentation;
}

uint64_t method lookup function for SleepOnboardingViewRepresentation.Coordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.parent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SleepOnboardingViewRepresentation.Coordinator.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_1A9C2276C()
{
  unint64_t result;

  result = qword_1EEB46EA0;
  if (!qword_1EEB46EA0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingViewRepresentation, &type metadata for SleepOnboardingViewRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB46EA0);
  }
  return result;
}

id WatchAppInstalledProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t sub_1A9C227D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9C22850(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = v2;
  return sub_1A9CE6E70();
}

uint64_t sub_1A9C228BC()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A9C22934()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return sub_1A9CE6E70();
}

void (*sub_1A9C2299C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A9CE6E58();
  return sub_1A9BAFE14;
}

uint64_t sub_1A9C22A14()
{
  swift_beginAccess();
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C22A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9C22D00(0, &qword_1EEB43F70, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9C22BAC()
{
  swift_beginAccess();
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C22C18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_1A9C22D00(0, &qword_1EEB43F70, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v6, a1, v3);
  swift_beginAccess();
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void sub_1A9C22D00(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEAFA0]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void (*sub_1A9C22D48(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1A9C22D00(0, &qword_1EEB43F70, MEMORY[0x1E0C96180]);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  v3[16] = v9;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BB02B4;
}

char *WatchAppInstalledProvider.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  objc_class *v22;
  id v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  char *v28;
  id v29;
  id v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  objc_super v38;
  char v39;

  sub_1A9C231A4();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE8778();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v36 = (char *)&v35 - v13;
  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v35 - v18;
  v20 = &v0[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled];
  v39 = 0;
  v21 = v0;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v19, v15);
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = 0;

  v22 = (objc_class *)type metadata accessor for WatchAppInstalledProvider();
  v38.receiver = v21;
  v38.super_class = v22;
  v23 = objc_msgSendSuper2(&v38, sel_init);
  v24 = (void *)objc_opt_self();
  v25 = (char *)v23;
  v26 = objc_msgSend(v24, sel_defaultCenter);
  v27 = (id)HKSPActivePairedDeviceApplicationsInstalledDistributedNotification();
  if (!v27)
  {
    sub_1A9CE82E0();
    v27 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  v28 = v36;
  sub_1A9CE8784();

  v29 = objc_msgSend(v24, sel_defaultCenter);
  v30 = (id)HKSPActivePairedDeviceApplicationsUninstalledDistributedNotification();
  if (!v30)
  {
    sub_1A9CE82E0();
    v30 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  sub_1A9CE8784();

  sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v31 = v37;
  sub_1A9CE6EA0();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92B9C(&qword_1EEB46EC0, (uint64_t (*)(uint64_t))sub_1A9C231A4, MEMORY[0x1E0C95C80]);
  v32 = sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v31, v2);
  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = v32;
  swift_release();
  sub_1A9C23718();

  v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v11, v6);
  v33(v28, v6);
  return v25;
}

void sub_1A9C231A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46EB0)
  {
    sub_1A9CE8778();
    sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
    v0 = sub_1A9CE6D44();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46EB0);
  }
}

uint64_t type metadata accessor for WatchAppInstalledProvider()
{
  uint64_t result;

  result = qword_1EEB46EF0;
  if (!qword_1EEB46EF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9C23258()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C2327C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
    v6 = v4;
    v7 = sub_1A9CE6978();
    v8 = sub_1A9CE867C();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v13 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_getObjectType();
      sub_1A9C23E1C();
      v11 = sub_1A9CE82F8();
      sub_1A9B91D6C(v11, v12, &v13);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v7, v8, "[%s] Responding to watch application change", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v10, -1, -1);
      MEMORY[0x1AF420344](v9, -1, -1);
    }
    else
    {

    }
    sub_1A9C23718();

  }
}

void sub_1A9C2345C(uint64_t a1)
{
  uint64_t v1;

  sub_1A9C2327C(a1, v1);
}

id WatchAppInstalledProvider.__allocating_init(isWatchAppInstalled:)(char a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return WatchAppInstalledProvider.init(isWatchAppInstalled:)(a1);
}

id WatchAppInstalledProvider.init(isWatchAppInstalled:)(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  objc_class *v11;
  objc_super v13;
  char v14;
  char v15;

  sub_1A9C22D00(0, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v13 - v7;
  v9 = &v1[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider__isWatchAppInstalled];
  v15 = 0;
  v10 = v1;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v8, v4);
  *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver] = 0;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v14 = a1;
  sub_1A9CE6E34();
  swift_endAccess();

  v11 = (objc_class *)type metadata accessor for WatchAppInstalledProvider();
  v13.receiver = v10;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, sel_init);
}

id WatchAppInstalledProvider.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  if (*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI25WatchAppInstalledProvider_watchAppStateObserver])
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WatchAppInstalledProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1A9C23718()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v0)
  {
    v1 = v0;
    v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v4[4] = sub_1A9C23DFC;
    v4[5] = v2;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = sub_1A9BE4D94;
    v4[3] = &block_descriptor_15;
    v3 = _Block_copy(v4);
    swift_release();
    objc_msgSend(v1, sel_hksp_activePairedDeviceHasSleepAppInstalledWithCompletion_, v3);
    _Block_release(v3);

  }
  else
  {
    __break(1u);
  }
}

void sub_1A9C237FC(char a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1AF4203E0](v5);
  if (v6)
  {
    v7 = (void *)v6;
    if (a2)
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v8 = sub_1A9CE6990();
      __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
      v9 = v7;
      v10 = a2;
      v11 = v9;
      v12 = a2;
      v13 = sub_1A9CE6978();
      v14 = sub_1A9CE8664();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v32 = v16;
        *(_DWORD *)v15 = 136315394;
        swift_getObjectType();
        sub_1A9C23E1C();
        v17 = sub_1A9CE82F8();
        sub_1A9B91D6C(v17, v18, &v32);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();

        *(_WORD *)(v15 + 12) = 2080;
        v19 = a2;
        sub_1A9BB15F4();
        v20 = sub_1A9CE82F8();
        sub_1A9B91D6C(v20, v21, &v32);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A9B87000, v13, v14, "[%s] Error fetching watch sleep app: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v16, -1, -1);
        MEMORY[0x1AF420344](v15, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v22 = sub_1A9CE6990();
      __swift_project_value_buffer(v22, (uint64_t)qword_1ED2630B8);
      v23 = v7;
      v24 = sub_1A9CE6978();
      v25 = sub_1A9CE867C();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v27 = swift_slowAlloc();
        v32 = v27;
        *(_DWORD *)v26 = 136315394;
        swift_getObjectType();
        sub_1A9C23E1C();
        v28 = sub_1A9CE82F8();
        sub_1A9B91D6C(v28, v29, &v32);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();

        *(_WORD *)(v26 + 12) = 2080;
        if ((a1 & 1) != 0)
          v30 = 1702195828;
        else
          v30 = 0x65736C6166;
        if ((a1 & 1) != 0)
          v31 = 0xE400000000000000;
        else
          v31 = 0xE500000000000000;
        sub_1A9B91D6C(v30, v31, &v32);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v24, v25, "[%s] Sleep app is installed: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v27, -1, -1);
        MEMORY[0x1AF420344](v26, -1, -1);
      }
      else
      {

      }
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v32) = a1 & 1;
      sub_1A9CE6E70();
    }
  }
}

uint64_t sub_1A9C23C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for WatchAppInstalledProvider();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t sub_1A9C23CB4()
{
  return type metadata accessor for WatchAppInstalledProvider();
}

void sub_1A9C23CBC()
{
  unint64_t v0;

  sub_1A9C22D00(319, (unint64_t *)&qword_1EEB456F0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for WatchAppInstalledProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.isWatchAppInstalled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.$isWatchAppInstalled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of WatchAppInstalledProvider.__allocating_init(isWatchAppInstalled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_1A9C23DFC(char a1, void *a2)
{
  uint64_t v2;

  sub_1A9C237FC(a1, a2, v2);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

unint64_t sub_1A9C23E1C()
{
  unint64_t result;

  result = qword_1EEB46F00;
  if (!qword_1EEB46F00)
  {
    type metadata accessor for WatchAppInstalledProvider();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB46F00);
  }
  return result;
}

uint64_t destroy for EditScheduleButton(id *a1)
{

  return swift_release();
}

uint64_t _s13SleepHealthUI18EditScheduleButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EditScheduleButton(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EditScheduleButton(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EditScheduleButton()
{
  return &type metadata for EditScheduleButton;
}

uint64_t sub_1A9C23F80()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C23F90@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  char v19;
  uint64_t v20;

  v17[1] = a4;
  sub_1A9BAAB64(0, &qword_1EEB45EB8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDFA38]);
  v17[0] = v7;
  v18 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v17 - v9;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_BYTE *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  swift_retain();
  v12 = a1;
  sub_1A9CE7E00();
  v19 = a2;
  v20 = a3;
  sub_1A9C2434C();
  sub_1A9CE7DE8();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = a3;
  sub_1A9BAAB64(0, &qword_1EEB46F08, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E0CDC510], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  sub_1A9C01674();
  sub_1A9C243E0();
  v14 = v12;
  swift_retain();
  v15 = v17[0];
  sub_1A9CE7BB4();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v15);
}

uint64_t sub_1A9C24198@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9BA8EA4();
  result = sub_1A9CE79C8();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_1A9C24298@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = (void *)*MEMORY[0x1E0DA8328];
  sub_1A9C2434C();
  v5 = a1;
  v6 = v4;
  sub_1A9CE7DE8();
  result = sub_1A9CE7734();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 33) = result;
  return result;
}

uint64_t sub_1A9C2432C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C23F90(*(void **)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9C24340()
{
  uint64_t v0;

  return sub_1A9C244AC(*(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1A9C2434C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB446A0)
  {
    v0 = sub_1A9CE7DF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB446A0);
  }
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C243D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C24298(*(void **)(v1 + 16), a1);
}

unint64_t sub_1A9C243E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46F10;
  if (!qword_1EEB46F10)
  {
    sub_1A9BAAB64(255, &qword_1EEB46F08, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E0CDC510], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9C24468();
    v3[1] = MEMORY[0x1E0CDC500];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46F10);
  }
  return result;
}

unint64_t sub_1A9C24468()
{
  unint64_t result;

  result = qword_1EEB46F18;
  if (!qword_1EEB46F18)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for QuickScheduleManagementViewRepresentation, &type metadata for QuickScheduleManagementViewRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB46F18);
  }
  return result;
}

uint64_t sub_1A9C244AC(char a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10[2];

  if (qword_1EEB42CC8 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEB572B0);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10[0] = v8;
    *(_DWORD *)v7 = 136446210;
    sub_1A9B91D6C(0xD000000000000012, 0x80000001A9CF1520, v10);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] Opening schedule editor", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  LOBYTE(v10[0]) = a1 & 1;
  v10[1] = a2;
  sub_1A9C2434C();
  return sub_1A9CE7DDC();
}

uint64_t sub_1A9C24650()
{
  sub_1A9BAAB64(255, &qword_1EEB45EB8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDFA38]);
  sub_1A9BAAB64(255, &qword_1EEB46F08, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E0CDC510], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  sub_1A9C01674();
  sub_1A9C243E0();
  return swift_getOpaqueTypeConformance2();
}

uint64_t SleepScheduleClock.roundedBedtimeComponents.getter()
{
  return sub_1A9C24710((uint64_t (*)(uint64_t, double))sub_1A9C6BD5C);
}

uint64_t SleepScheduleClock.roundedWakeUpComponents.getter()
{
  return sub_1A9C24710((uint64_t (*)(uint64_t, double))sub_1A9C6BF60);
}

uint64_t sub_1A9C24710(uint64_t (*a1)(uint64_t, double))
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_beginAccess();
  return a1(v3, *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
}

void SleepScheduleClock.set(bedtimeComponents:wakeUpComponents:timeInBedGoal:alarmEnabled:isForSingleDayOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v13;
  double v14;
  double v15;

  v7 = v6;
  v13 = a4 & 1;
  v14 = *(double *)(v7 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152);
  v15 = *(double *)(v7 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160);
  swift_beginAccess();
  sub_1A9C6C394(a1, a2, a3, v13, a5, a6, v14, v15);
  swift_endAccess();
  sub_1A9C24914();
}

uint64_t SleepScheduleClock.timeInBedGoalMet.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v3;
  double v4;
  __int128 v5;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  swift_beginAccess();
  v5 = *(_OWORD *)(v1 + 27);
  if ((BYTE13(v5) & 1) != 0)
    return 2;
  v3 = *(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144);
  if ((HIBYTE(v5) & 1) != 0)
    sub_1A9C29A5C();
  else
    sub_1A9BD535C();
  return *(double *)((char *)&v5 + 5) <= v3 * round(v4 / v3);
}

void sub_1A9C24914()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  char *v6;
  double v7;
  double *v8;
  double v9;
  __double2 v10;
  double v11;
  CGFloat v12;
  char *v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  CGFloat v18;
  __int16 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  double v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[6];
  __int128 v61;
  _BYTE v62[27];
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  v3 = sub_1A9C26914();
  objc_msgSend(v2, sel_setPath_, v3);

  v4 = sub_1A9C26914();
  objc_msgSend(v2, sel_setShadowPath_, v4);

  v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  v6 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  v7 = sub_1A9BE25FC(*(_QWORD *)v6, *((_QWORD *)v6 + 1));
  v8 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  v9 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - (*(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88] * 0.5);
  v10 = __sincos_stret(v7);
  v11 = v10.__sinval * v9;
  objc_msgSend(v1, sel_bounds);
  v12 = CGRectGetMidX(v63) + v10.__cosval * v9;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v5, sel_setCenter_, v12, v11 + CGRectGetMidY(v64));
  v13 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
  v14 = sub_1A9BE25FC(*((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3));
  v15 = v8[9] * 0.5 - (v8[10] + v8[11] * 0.5);
  v16 = __sincos_stret(v14);
  v17 = v16.__sinval * v15;
  objc_msgSend(v1, sel_bounds);
  v18 = CGRectGetMidX(v65) + v16.__cosval * v15;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v13, sel_setCenter_, v18, v17 + CGRectGetMidY(v66));
  v19 = *(_WORD *)&v13[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol];
  *(_WORD *)&v13[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol] = v6[41] | 0x1000;
  LOWORD(v60[0]) = v19;
  sub_1A9C7DAA0((unsigned __int16 *)v60);
  *(_OWORD *)&v62[11] = *(_OWORD *)(v6 + 27);
  v20 = *((_OWORD *)v6 + 1);
  v61 = *(_OWORD *)v6;
  *(_OWORD *)v62 = v20;
  if ((v62[24] & 1) != 0)
    goto LABEL_7;
  v21 = v8[18];
  v22 = *(double *)&v62[16];
  if ((v62[26] & 1) != 0)
    sub_1A9C29A5C();
  else
    sub_1A9BD535C();
  if (v22 <= v21 * round(v23 / v21))
LABEL_7:
    sub_1A9C7EBB8(&v48);
  else
    sub_1A9C7EF80(&v48);
  v24 = v51;
  v26 = v49;
  v25 = v50;
  v27 = v48;
  v28 = *((_QWORD *)v8 + 14);
  v60[0] = v48;
  v60[1] = v49;
  v60[2] = v50;
  v60[3] = v51;
  v60[4] = v52;
  v60[5] = v28;
  v29 = v52;
  v30 = v27;
  v31 = v26;
  v32 = v25;
  v33 = v24;
  v34 = v29;
  v35 = v30;
  v36 = v31;
  v37 = v32;
  v38 = v33;
  sub_1A9C7DD9C((uint64_t)v60);
  sub_1A9C7DD9C((uint64_t)v60);
  sub_1A9C26648();
  v39 = (void *)objc_opt_self();
  objc_msgSend(v39, sel_begin);
  objc_msgSend(v39, sel_setDisableActions_, 1);
  v40 = *(_QWORD *)v6;
  v41 = *((_QWORD *)v6 + 1);
  v42 = sub_1A9BE25FC(*(_QWORD *)v6, v41);
  v43 = *((_QWORD *)v6 + 4);
  v44 = v6[40];
  v45 = v6[41];
  v46 = v6[42];
  v53 = v40;
  v54 = v41;
  v55 = *((_OWORD *)v6 + 1);
  v56 = v43;
  v57 = v44;
  v58 = v45;
  v59 = v46;
  sub_1A9BD535C();
  sub_1A9C29848(v42, v47);
  objc_msgSend(v39, sel_commit);

}

void sub_1A9C24CB4()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  double v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30[6];
  id v31[6];

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer];
  v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  objc_msgSend(v2, sel_setMinimumPressDuration_, *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 136]);
  objc_msgSend(v2, sel_addTarget_action_, v1, sel_gestureReconizerDidChange_);
  objc_msgSend(v2, sel_setDelegate_, v1);
  objc_msgSend(v2, sel_setCancelsTouchesInView_, 0);
  objc_msgSend(v1, sel_addGestureRecognizer_, v2);
  v4 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  objc_msgSend(v4, sel_setFillColor_, 0);
  objc_msgSend(v4, sel_setLineWidth_, *((double *)v3 + 10) + *((double *)v3 + 10) + *((double *)v3 + 11));
  v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  objc_msgSend(v5, sel_setShadowOffset_, *((double *)v3 + 6), *((double *)v3 + 7));
  objc_msgSend(v5, sel_setShadowRadius_, *((double *)v3 + 10));
  LODWORD(v6) = *((_DWORD *)v3 + 16);
  objc_msgSend(v5, sel_setShadowOpacity_, v6);
  v7 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  *(int8x16_t *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration] = vextq_s8(*(int8x16_t *)(v3 + 120), *(int8x16_t *)(v3 + 120), 8uLL);
  objc_msgSend(v7, sel_setNeedsLayout);
  v8 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  objc_msgSend(v8, sel_frame);
  objc_msgSend(v8, sel_setFrame_);
  v9 = *(char **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_);
  v10 = (void *)*((_QWORD *)v3 + 14);
  v11 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  v12 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  v13 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  v14 = *(void **)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  v31[0] = *(id *)&v8[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v31[1] = v11;
  v31[2] = v12;
  v31[3] = v13;
  v31[4] = v14;
  v31[5] = v10;
  v15 = v14;
  v16 = v31[0];
  v17 = v11;
  v18 = v12;
  v19 = v13;
  sub_1A9C7DD9C((uint64_t)v31);
  v20 = (void *)*((_QWORD *)v3 + 14);
  v21 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  v22 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  v23 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  v24 = *(void **)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  v30[0] = *(id *)&v9[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v30[1] = v21;
  v30[2] = v22;
  v30[3] = v23;
  v30[4] = v24;
  v30[5] = v20;
  v25 = v24;
  v26 = v30[0];
  v27 = v21;
  v28 = v22;
  v29 = v23;
  sub_1A9C7DD9C((uint64_t)v30);
  sub_1A9C26648();
}

uint64_t (*sub_1A9C24F30())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_1A9C24F74(__int128 *a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  id v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  double v29;
  double v30;
  id v31;
  id v32;
  id v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  unint64_t v50;
  _UNKNOWN **v51;
  objc_super v52;
  _QWORD v53[6];
  _QWORD v54[6];
  _OWORD v55[13];

  v47 = a1[1];
  v48 = *a1;
  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_BYTE *)a1 + 40);
  v6 = *((_BYTE *)a1 + 41);
  v7 = *((_BYTE *)a1 + 42);
  v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC39C8]);
  v10 = v2;
  *(_QWORD *)&v2[v8] = objc_msgSend(v9, sel_init);
  v11 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track;
  *(_QWORD *)&v10[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v12 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring;
  *(_QWORD *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v13 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand;
  sub_1A9C7EBB8(v53);
  LOWORD(v55[0]) = 0;
  v14 = (objc_class *)type metadata accessor for SleepScheduleClockHand();
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v10[v13] = sub_1A9C7DF24((__int16 *)v55, (uint64_t)v53);
  v16 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand;
  sub_1A9C7EBB8(v54);
  LOWORD(v55[0]) = 4097;
  v17 = objc_allocWithZone(v14);
  *(_QWORD *)&v10[v16] = sub_1A9C7DF24((__int16 *)v55, (uint64_t)v54);
  v18 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_QWORD *)v18 + 4) = 0;
  v19 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_QWORD *)v19 + 4) = 0;
  v20 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = &v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  *(_OWORD *)v21 = v48;
  *((_OWORD *)v21 + 1) = v47;
  *((_QWORD *)v21 + 4) = v4;
  v21[40] = v5;
  v21[41] = v6;
  v21[42] = v7;
  memcpy(&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration], (const void *)a2, 0x188uLL);
  v22 = *(_OWORD *)(a2 + 344);
  v55[8] = *(_OWORD *)(a2 + 328);
  v55[9] = v22;
  v23 = *(_OWORD *)(a2 + 376);
  v55[10] = *(_OWORD *)(a2 + 360);
  v55[11] = v23;
  v24 = *(_OWORD *)(a2 + 280);
  v55[4] = *(_OWORD *)(a2 + 264);
  v55[5] = v24;
  v25 = *(_OWORD *)(a2 + 312);
  v55[6] = *(_OWORD *)(a2 + 296);
  v55[7] = v25;
  v26 = *(_OWORD *)(a2 + 216);
  v55[0] = *(_OWORD *)(a2 + 200);
  v55[1] = v26;
  v27 = *(_OWORD *)(a2 + 248);
  v55[2] = *(_OWORD *)(a2 + 232);
  v55[3] = v27;
  v28 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleClockDial());
  sub_1A9BD7A70(a2);
  sub_1A9BD7C48((uint64_t)v55);
  *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial] = sub_1A9C3E490(v55);
  v30 = *(double *)(a2 + 120);
  v29 = *(double *)(a2 + 128);
  v31 = objc_allocWithZone((Class)type metadata accessor for RingGrabber());
  *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber] = sub_1A9C29218(v29, v30);

  v52.receiver = v10;
  v52.super_class = (Class)type metadata accessor for SleepScheduleClock();
  v32 = objc_msgSendSuper2(&v52, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v33 = sub_1A9C88848();
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C60]), sel_initWithConfiguration_view_, v33, v32);

  v35 = sub_1A9C2A718();
  v50 = v35;
  v51 = &off_1E55D8160;
  v49[0] = v34;
  v36 = (uint64_t)v32 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
  swift_beginAccess();
  sub_1A9C2A754((uint64_t)v49, v36);
  swift_endAccess();
  v37 = sub_1A9C88868();
  v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C60]), sel_initWithConfiguration_view_, v37, v32);

  v50 = v35;
  v51 = &off_1E55D8160;
  v49[0] = v38;
  v39 = (uint64_t)v32 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
  swift_beginAccess();
  sub_1A9C2A754((uint64_t)v49, v39);
  swift_endAccess();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1A9CEB530;
  v41 = sub_1A9CE6AB0();
  v42 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v40 + 32) = v41;
  *(_QWORD *)(v40 + 40) = v42;
  v43 = sub_1A9CE69C0();
  v44 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v40 + 48) = v43;
  *(_QWORD *)(v40 + 56) = v44;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v45 = v32;
  sub_1A9CE87C0();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_1A9C25418();
  sub_1A9C24CB4();
  sub_1A9BD7B58(a2);

  return v45;
}

void sub_1A9C253C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9C24CB4();

  }
}

void sub_1A9C25418()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_addSublayer_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track]);

  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial]);
  v2 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v2, sel_addSublayer_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring]);

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
  objc_msgSend(v4, sel_addSublayer_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber]);
  v3 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v3, sel_addSublayer_, v4);

  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand]);
  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand]);

}

id sub_1A9C2557C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v16;
  objc_super v17;
  CGRect v18;
  CGRect v19;

  v1 = v0;
  swift_getObjectType();
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for SleepScheduleClock();
  objc_msgSendSuper2(&v17, sel_layoutSubviews);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial];
  v10 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]
      + *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88];
  objc_msgSend(v1, sel_bounds);
  v18.origin.x = sub_1A9C28E08(v11, v12, v13, v14);
  v19 = CGRectInset(v18, v10, v10);
  return objc_msgSend(v9, sel_setFrame_, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);
}

void sub_1A9C257A4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  objc_super v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v2 = v1;
  swift_getObjectType();
  v52.receiver = v2;
  v52.super_class = (Class)type metadata accessor for SleepScheduleClock();
  objc_msgSendSuper2(&v52, sel_layoutSublayersOfLayer_, a1);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED2630B8);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE8658();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_QWORD *)&v44 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1A9CE8D48();
    sub_1A9B91D6C(v9, v10, (uint64_t *)&v44);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] Layout sublayers", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  v11 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v11, sel_setFrame_);
  objc_msgSend(v2, sel_bounds);
  x = v53.origin.x;
  y = v53.origin.y;
  width = v53.size.width;
  height = v53.size.height;
  MidX = CGRectGetMidX(v53);
  v54.origin.x = x;
  v54.origin.y = y;
  v54.size.width = width;
  v54.size.height = height;
  MidY = CGRectGetMidY(v54);
  v18 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  v20 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72];
  v19 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80];
  v21 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88];
  if (qword_1EEB42CB8 != -1)
    swift_once();
  v22 = *(double *)&qword_1EEB572A0;
  if (qword_1EEB42CC0 != -1)
    swift_once();
  v23 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, MidX, MidY, v20 * 0.5 - (v19 + v21 * 0.5), v22, *(double *)&qword_1EEB572A8);
  v24 = objc_msgSend(v23, sel_CGPath);

  objc_msgSend(v11, sel_setPath_, v24);
  v25 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v25, sel_setFrame_);
  v26 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  objc_msgSend(v26, sel_transform);
  v42 = v45;
  v43 = v44;
  v40 = v47;
  v41 = v46;
  v38 = v49;
  v39 = v48;
  v37 = v50;
  v27 = v51;
  v28 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
  v44 = *MEMORY[0x1E0CD2610];
  v45 = v28;
  v29 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
  v46 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
  v47 = v29;
  v30 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
  v48 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
  v49 = v30;
  v31 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
  v50 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
  v51 = v31;
  objc_msgSend(v26, sel_setTransform_, &v44);
  objc_msgSend(v26, sel_setFrame_, 0.0, 0.0, v18[9] - (v18[10] + v18[10]) - (v18[11] - v18[16]), v18[9] - (v18[10] + v18[10]) - (v18[11] - v18[16]));
  v44 = v43;
  v45 = v42;
  v46 = v41;
  v47 = v40;
  v48 = v39;
  v49 = v38;
  v50 = v37;
  v51 = v27;
  objc_msgSend(v26, sel_setTransform_, &v44);
  objc_msgSend(v2, sel_bounds);
  v32 = v55.origin.x;
  v33 = v55.origin.y;
  v34 = v55.size.width;
  v35 = v55.size.height;
  v36 = CGRectGetMidX(v55);
  v56.origin.x = v32;
  v56.origin.y = v33;
  v56.size.width = v34;
  v56.size.height = v35;
  objc_msgSend(v26, sel_setPosition_, v36, CGRectGetMidY(v56));
  sub_1A9C24914();
}

uint64_t sub_1A9C25D3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  result = swift_beginAccess();
  v3 = v1[2];
  v4 = v3 - *v1;
  if (__OFSUB__(v3, *v1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = v1[3];
  v6 = v1[1];
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v7 < 0)
  {
    v8 = -60;
    if (v7 > -60)
      v8 = v5 - v6;
    v9 = v6 + v8;
    if (v9 == v5)
      v10 = v1[3];
    else
      v10 = v5 + 1;
    v11 = v9 == v5;
    v12 = v3 ^ 0x8000000000000000;
    v13 = (v9 - v10) / 0x3CuLL;
    if (!v11)
      ++v13;
    v14 = v12 - *v1;
    while (v14 > v13)
    {
      --v4;
      v15 = v7 < -60;
      v7 += 60;
      if (!v15)
        return result;
    }
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

id SleepScheduleClock.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClock.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleClock.__deallocating_deinit(uint64_t a1)
{
  return sub_1A9BC0290(a1, type metadata accessor for SleepScheduleClock);
}

uint64_t SleepScheduleClock.crossesDayBoundary.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return sub_1A9C6C164(*(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144)) & 1;
}

void SleepScheduleClock.accessibilitySetModel(_:wakeUpComponents:timeInBedGoal:alarmEnabled:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v7;
  id v8;

  v7 = (void *)sub_1A9CE6018();
  v8 = (id)sub_1A9CE6018();
  objc_msgSend(v4, sel_accessibilitySetModel_wakeUpComponents_timeInBedGoal_alarmEnabled_isForSingleDayOverride_, v7, v8, a4 & 1, 0, a1);

}

void SleepScheduleClock.accessibilitySetModel(_:wakeUpComponents:timeInBedGoal:alarmEnabled:isForSingleDayOverride:)(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  char *v5;
  char *v6;
  double v12;
  double v13;

  v6 = v5;
  v12 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
  v13 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
  swift_beginAccess();
  sub_1A9C6C394(a1, a2, *(uint64_t *)&a5, 0, a3, a4, v12, v13);
  swift_endAccess();
  sub_1A9C24914();
  objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x40000);
  sub_1A9C24914();
}

uint64_t SleepScheduleClock.accessibilityRoundedBedtimeComponents()()
{
  return sub_1A9C24710((uint64_t (*)(uint64_t, double))sub_1A9C6BD5C);
}

uint64_t SleepScheduleClock.accessibilityRoundedWakeUpComponents()()
{
  return sub_1A9C24710((uint64_t (*)(uint64_t, double))sub_1A9C6BF60);
}

id sub_1A9C26554(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, double))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  void *v17;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v5 = sub_1A9CE60C0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  v11 = swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 32);
  v13 = *(_BYTE *)(v10 + 40);
  v14 = *(_BYTE *)(v10 + 41);
  v15 = *(_BYTE *)(v10 + 42);
  v16 = *(_OWORD *)(v10 + 16);
  v19[0] = *(_OWORD *)v10;
  v19[1] = v16;
  v20 = v12;
  v21 = v13;
  v22 = v14;
  v23 = v15;
  a3(v11, *(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  v17 = (void *)sub_1A9CE6018();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v17;
}

void sub_1A9C26648()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  char *v8;
  double v9;
  double v10;
  int v11;
  id *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v25;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track];
  v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  v4 = *(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 16];
  v5 = objc_msgSend(v1, sel_traitCollection);
  v6 = objc_msgSend(v4, sel_resolvedColorWithTraitCollection_, v5);
  v7 = objc_msgSend(v6, sel_CGColor);

  objc_msgSend(v2, sel_setStrokeColor_, v7);
  v8 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  v25 = *(_OWORD *)(v8 + 27);
  if ((BYTE13(v25) & 1) != 0)
    goto LABEL_7;
  v9 = *((double *)v3 + 18);
  if ((HIBYTE(v25) & 1) != 0)
    sub_1A9C29A5C();
  else
    sub_1A9BD535C();
  if (*(double *)((char *)&v25 + 5) <= v9 * round(v10 / v9))
  {
LABEL_7:
    v11 = 1;
    v12 = (id *)v3;
  }
  else
  {
    v11 = 0;
    v12 = (id *)(v3 + 8);
  }
  v13 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring];
  v14 = *v12;
  v15 = objc_msgSend(v1, sel_traitCollection);
  v16 = objc_msgSend(v14, sel_resolvedColorWithTraitCollection_, v15);
  v17 = objc_msgSend(v16, sel_CGColor);

  objc_msgSend(v13, sel_setFillColor_, v17);
  v18 = objc_msgSend(*((id *)v3 + 5), sel_CGColor);
  objc_msgSend(v13, sel_setShadowColor_, v18);

  v19 = 32;
  if (v11)
    v19 = 24;
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
  v21 = *(id *)&v3[v19];
  v22 = objc_msgSend(v1, sel_traitCollection);
  v23 = objc_msgSend(v21, sel_resolvedColorWithTraitCollection_, v22);
  v24 = objc_msgSend(v23, sel_CGColor);

  objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture), sel_setStrokeColor_, v24);
}

id sub_1A9C26914()
{
  char *v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  double *v7;
  double v8;
  uint64_t *v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __double2 v35;
  double v36;
  CGFloat v37;
  id v38;
  double v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  objc_msgSend(v0, sel_bounds);
  x = v41.origin.x;
  y = v41.origin.y;
  width = v41.size.width;
  height = v41.size.height;
  MidX = CGRectGetMidX(v41);
  v42.origin.x = x;
  v42.origin.y = y;
  v42.size.width = width;
  v42.size.height = height;
  MidY = CGRectGetMidY(v42);
  v7 = (double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration];
  v8 = *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80];
  v9 = (uint64_t *)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  v10 = sub_1A9BE25FC(*v9, v9[1]);
  v11 = sub_1A9BE25FC(v9[2], v9[3]);
  v12 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, MidX, MidY, v8, v10, v11);
  v40 = sub_1A9BE25FC(v9[2], v9[3]);
  v14 = v7[9];
  v13 = v7[10];
  v15 = v7[11];
  objc_msgSend(v0, sel_bounds);
  v16 = CGRectGetMidX(v43);
  objc_msgSend(v0, sel_bounds);
  v17 = CGRectGetMidY(v44);
  v18 = v7[11];
  if (qword_1EEB42CB8 != -1)
    swift_once();
  v19 = *(double *)&qword_1EEB572A0;
  if (qword_1EEB42CC0 != -1)
    swift_once();
  v20 = v14 * 0.5 - (v13 + v15 * 0.5);
  v21 = __sincos_stret(v40);
  v22 = v21.__sinval * v20 + v17;
  v23 = v16 + v21.__cosval * v20;
  v24 = *(double *)&qword_1EEB572A8;
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 1, v23, v22, v18 * 0.5, v19, *(double *)&qword_1EEB572A8);
  objc_msgSend(v0, sel_bounds);
  v25 = v45.origin.x;
  v26 = v45.origin.y;
  v27 = v45.size.width;
  v28 = v45.size.height;
  v29 = CGRectGetMidX(v45);
  v46.origin.x = v25;
  v46.origin.y = v26;
  v46.size.width = v27;
  v46.size.height = v28;
  v30 = CGRectGetMidY(v46);
  v31 = v7[9] * 0.5 - v7[10] - v7[11];
  v32 = sub_1A9BE25FC(v9[2], v9[3]);
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 0, v29, v30, v31, v32, sub_1A9BE25FC(*v9, v9[1]));
  v33 = sub_1A9BE25FC(*v9, v9[1]);
  v34 = v7[9] * 0.5 - (v7[10] + v7[11] * 0.5);
  v35 = __sincos_stret(v33);
  v36 = v35.__sinval * v34;
  objc_msgSend(v0, sel_bounds);
  v37 = CGRectGetMidX(v47) + v35.__cosval * v34;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v12, sel_addArcWithCenter_radius_startAngle_endAngle_clockwise_, 1, v37, v36 + CGRectGetMidY(v48), v7[11] * 0.5, *(double *)&qword_1EEB572A0, v24);
  objc_msgSend(v12, sel_closePath);
  v38 = objc_msgSend(v12, sel_CGPath);

  return v38;
}

void sub_1A9C26C64(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *oslog;
  uint64_t v36;

  v2 = v1;
  swift_getObjectType();
  switch((unint64_t)objc_msgSend(a1, sel_state))
  {
    case 0uLL:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v4 = sub_1A9CE6990();
      __swift_project_value_buffer(v4, (uint64_t)qword_1ED2630B8);
      oslog = sub_1A9CE6978();
      v5 = sub_1A9CE8658();
      if (!os_log_type_enabled(oslog, v5))
        goto LABEL_31;
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v36 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = sub_1A9CE8D48();
      sub_1A9B91D6C(v8, v9, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v10 = "[%{public}s] Gesture is possible";
      goto LABEL_30;
    case 1uLL:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v14 = sub_1A9CE6990();
      __swift_project_value_buffer(v14, (uint64_t)qword_1ED2630B8);
      v15 = sub_1A9CE6978();
      v16 = sub_1A9CE8658();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v36 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = sub_1A9CE8D48();
        sub_1A9B91D6C(v19, v20, &v36);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] Gesture began", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v18, -1, -1);
        MEMORY[0x1AF420344](v17, -1, -1);
      }

      objc_msgSend(v2, sel_gestureRecognizerDidStart_, a1);
      return;
    case 2uLL:
      objc_msgSend(v1, sel_gestureRecognizerDidMove_, a1);
      return;
    case 3uLL:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v21 = sub_1A9CE6990();
      __swift_project_value_buffer(v21, (uint64_t)qword_1ED2630B8);
      v22 = sub_1A9CE6978();
      v23 = sub_1A9CE8658();
      if (!os_log_type_enabled(v22, v23))
        goto LABEL_25;
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v36 = v25;
      *(_DWORD *)v24 = 136446210;
      v26 = sub_1A9CE8D48();
      sub_1A9B91D6C(v26, v27, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v28 = "[%{public}s] Gesture ended";
      goto LABEL_24;
    case 4uLL:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v29 = sub_1A9CE6990();
      __swift_project_value_buffer(v29, (uint64_t)qword_1ED2630B8);
      v22 = sub_1A9CE6978();
      v23 = sub_1A9CE8658();
      if (!os_log_type_enabled(v22, v23))
        goto LABEL_25;
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v36 = v25;
      *(_DWORD *)v24 = 136446210;
      v30 = sub_1A9CE8D48();
      sub_1A9B91D6C(v30, v31, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v28 = "[%{public}s] Gesture cancelled";
LABEL_24:
      _os_log_impl(&dword_1A9B87000, v22, v23, v28, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v25, -1, -1);
      MEMORY[0x1AF420344](v24, -1, -1);
LABEL_25:

      objc_msgSend(v2, sel_gestureRecognizerDidEnd_, a1);
      return;
    case 5uLL:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v32 = sub_1A9CE6990();
      __swift_project_value_buffer(v32, (uint64_t)qword_1ED2630B8);
      oslog = sub_1A9CE6978();
      v5 = sub_1A9CE8658();
      if (!os_log_type_enabled(oslog, v5))
        goto LABEL_31;
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v36 = v7;
      *(_DWORD *)v6 = 136446210;
      v33 = sub_1A9CE8D48();
      sub_1A9B91D6C(v33, v34, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v10 = "[%{public}s] Gesture failed";
      goto LABEL_30;
    default:
      if (qword_1ED262DB8 != -1)
        swift_once();
      v11 = sub_1A9CE6990();
      __swift_project_value_buffer(v11, (uint64_t)qword_1ED2630B8);
      oslog = sub_1A9CE6978();
      v5 = sub_1A9CE8664();
      if (os_log_type_enabled(oslog, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        v7 = swift_slowAlloc();
        v36 = v7;
        *(_DWORD *)v6 = 136446210;
        v12 = sub_1A9CE8D48();
        sub_1A9B91D6C(v12, v13, &v36);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        v10 = "[%{public}s] Unknown gesture state";
LABEL_30:
        _os_log_impl(&dword_1A9B87000, oslog, v5, v10, v6, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v7, -1, -1);
        MEMORY[0x1AF420344](v6, -1, -1);

      }
      else
      {
LABEL_31:

      }
      return;
  }
}

Swift::Bool __swiftcall SleepScheduleClock.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer _, UIGestureRecognizer shouldRecognizeSimultaneouslyWith)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  swift_beginAccess();
  return *(_QWORD *)(v3 + 40) == 0;
}

Swift::Bool __swiftcall SleepScheduleClock.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer _, UITouch shouldReceive)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Bool result;
  CGPoint v8;
  CGPoint v9;
  CGRect v10;
  CGRect v11;

  -[objc_class locationInView:](shouldReceive.super.isa, sel_locationInView_, v2);
  v4 = v3;
  v6 = v5;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand), sel_frame);
  v8.x = v4;
  v8.y = v6;
  result = CGRectContainsPoint(v10, v8)
        || (objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand), sel_frame),
            v9.x = v4,
            v9.y = v6,
            CGRectContainsPoint(v11, v9))
        || sub_1A9C27560(v4, v6);
  return result;
}

BOOL sub_1A9C27560(double a1, double a2)
{
  char *v2;
  char *v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat MidY;
  double v12;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  _OWORD v32[2];
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  CGRect v38;
  CGRect v39;

  v3 = v2;
  swift_getObjectType();
  v6 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 88] * 0.5;
  v7 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72] * 0.5
     - (v6
      + *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 80]);
  v8 = v7 - v6;
  v9 = v6 + v7;
  if (v7 - v6 > v6 + v7)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_9;
  }
  objc_msgSend(v2, sel_bounds);
  v10 = a1 - CGRectGetMidX(v38);
  objc_msgSend(v2, sel_bounds);
  MidY = CGRectGetMidY(v39);
  v12 = sqrt(v10 * v10 + (a2 - MidY) * (a2 - MidY));
  if (v8 > v12 || v12 > v9)
    return 0;
  a2 = sub_1A9C27FC4(a1, a2);
  if (qword_1ED262DB8 != -1)
    goto LABEL_14;
LABEL_9:
  v15 = sub_1A9CE6990();
  __swift_project_value_buffer(v15, (uint64_t)qword_1ED2630B8);
  v16 = sub_1A9CE6978();
  v17 = sub_1A9CE8658();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_QWORD *)&v32[0] = v19;
    *(_DWORD *)v18 = 136446466;
    v20 = sub_1A9CE8D48();
    v37 = sub_1A9B91D6C(v20, v21, (uint64_t *)v32);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    sub_1A9C17528(0, (unint64_t *)&qword_1EEB452D8, (unint64_t *)&qword_1EEB47060, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1A9CEB520;
    *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v22 + 64) = sub_1A9C2A6D4();
    *(double *)(v22 + 32) = a2 / 3.14159265;
    v23 = sub_1A9CE82EC();
    v37 = sub_1A9B91D6C(v23, v24, (uint64_t *)v32);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v16, v17, "[%{public}s] Checking angle: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v19, -1, -1);
    MEMORY[0x1AF420344](v18, -1, -1);
  }

  v25 = &v3[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  v26 = *((_QWORD *)v25 + 4);
  v27 = v25[40];
  v28 = v25[41];
  v29 = v25[42];
  v30 = *((_OWORD *)v25 + 1);
  v32[0] = *(_OWORD *)v25;
  v32[1] = v30;
  v33 = v26;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  return sub_1A9C6CCF0(a2);
}

uint64_t sub_1A9C27984(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  void *v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  _BOOL4 v24;
  uint64_t *v25;
  CFTimeInterval v26;
  id v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  uint64_t v54;
  CGPoint v55;
  CGPoint v56;
  CGRect v57;
  CGRect v58;

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1A9CE8B8C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_locationInView_, v2);
  v10 = v9;
  v12 = v11;
  v13 = sub_1A9C27FC4(v9, v11);
  v14 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand];
  objc_msgSend(v14, sel_frame);
  v55.x = v10;
  v55.y = v12;
  if (CGRectContainsPoint(v57, v55))
  {
    v15 = (uint64_t *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    v16 = sub_1A9BE25FC(*v15, v15[1]);
    v17 = 1;
    objc_msgSend(v14, sel_setHighlighted_, 1);
    v18 = *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
    v19 = sub_1A9BE25FC(*v15, v15[1]);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DED500], v4);
    v20 = sub_1A9C291C8();
    v21 = sub_1A9C28FB8((uint64_t)v8, v20, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v22 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset;
    *(long double *)(v18 + v22) = fmod(v21- v19+ *(double *)(v18+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset), *(long double *)(v18+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle));
    *(_BYTE *)(v18 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted) = 1;
  }
  else
  {
    v23 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand];
    objc_msgSend(v23, sel_frame);
    v56.x = v10;
    v56.y = v12;
    v24 = CGRectContainsPoint(v58, v56);
    v25 = (uint64_t *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    if (v24)
    {
      swift_beginAccess();
      v16 = sub_1A9BE25FC(v25[2], v25[3]);
      objc_msgSend(v23, sel_setHighlighted_, 1);
      v17 = 2;
    }
    else
    {
      swift_beginAccess();
      v16 = sub_1A9BE25FC(*v25, v25[1]);
      v17 = 0;
    }
  }
  v26 = CACurrentMediaTime();
  v27 = objc_msgSend((id)objc_opt_self(), sel_functionWithName_, *MEMORY[0x1E0CD3048]);
  v28 = &v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  swift_beginAccess();
  v29 = (void *)*((_QWORD *)v28 + 5);
  *(_QWORD *)v28 = v17;
  *((double *)v28 + 1) = v13;
  *((CFTimeInterval *)v28 + 2) = v26;
  *((double *)v28 + 3) = v16;
  *((_QWORD *)v28 + 4) = 0;
  *((_QWORD *)v28 + 5) = v27;

  v30 = sub_1A9C6C888(v13);
  v32 = v31;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v33 = sub_1A9CE6990();
  __swift_project_value_buffer(v33, (uint64_t)qword_1ED2630B8);
  v34 = sub_1A9CE6978();
  v35 = sub_1A9CE8658();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v53[0] = v37;
    *(_DWORD *)v36 = 136446978;
    v38 = sub_1A9CE8D48();
    v50[0] = sub_1A9B91D6C(v38, v39, v53);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    sub_1A9C17528(0, (unint64_t *)&qword_1EEB452D8, (unint64_t *)&qword_1EEB47060, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1A9CEB520;
    *(_QWORD *)(v40 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v40 + 64) = sub_1A9C2A6D4();
    *(double *)(v40 + 32) = v13 / 3.14159265;
    v41 = sub_1A9CE82EC();
    v50[0] = sub_1A9B91D6C(v41, v42, v53);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 22) = 2048;
    v50[0] = v30;
    sub_1A9CE888C();
    *(_WORD *)(v36 + 32) = 2048;
    v50[0] = v32;
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v34, v35, "[%{public}s] Did start dragging at %s, or %ld:%ld", (uint8_t *)v36, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v37, -1, -1);
    MEMORY[0x1AF420344](v36, -1, -1);
  }

  objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x10000);
  v43 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  swift_beginAccess();
  sub_1A9C2A614(v43, (uint64_t)v53);
  if (v54)
  {
    sub_1A9B923D4((uint64_t)v53, (uint64_t)v50);
    sub_1A9C2A678((uint64_t)v53);
    v44 = v51;
    v45 = v52;
    __swift_project_boxed_opaque_existential_1Tm(v50, v51);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  }
  else
  {
    sub_1A9C2A678((uint64_t)v53);
  }
  v46 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  swift_beginAccess();
  sub_1A9C2A614(v46, (uint64_t)v53);
  if (!v54)
    return sub_1A9C2A678((uint64_t)v53);
  sub_1A9B923D4((uint64_t)v53, (uint64_t)v50);
  sub_1A9C2A678((uint64_t)v53);
  v47 = v51;
  v48 = v52;
  __swift_project_boxed_opaque_existential_1Tm(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v48);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
}

double sub_1A9C27FC4(double a1, double a2)
{
  void *v2;
  long double v5;
  CGFloat MidY;
  double v7;
  double v8;
  double i;
  CGRect v11;
  CGRect v12;

  objc_msgSend(v2, sel_bounds);
  v5 = a1 - CGRectGetMidX(v11);
  objc_msgSend(v2, sel_bounds);
  MidY = CGRectGetMidY(v12);
  v7 = atan2(a2 - MidY, v5);
  if (qword_1EEB42CB8 != -1)
    swift_once();
  v8 = *(double *)&qword_1EEB572A0;
  if (qword_1EEB42CC0 != -1)
    swift_once();
  for (i = *(double *)&qword_1EEB572A8 - v8; v7 < v8; v7 = i + v7)
    ;
  while (*(double *)&qword_1EEB572A8 <= v7)
    v7 = v7 - i;
  return v7;
}

void sub_1A9C28104(void *a1)
{
  char *v1;
  char *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t (*v13)();
  __n128 v14;
  uint64_t v15;
  double v16;
  double v17;
  CGFloat MidY;
  char *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  __int128 v61;
  _BYTE v62[27];
  CGRect v63;
  CGRect v64;

  v2 = v1;
  objc_msgSend(a1, sel_locationInView_, v1);
  v4 = v3;
  v6 = v5;
  v7 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
  swift_beginAccess();
  v49 = *(_OWORD *)v7;
  v8 = *((_QWORD *)v7 + 3);
  v50 = *((_QWORD *)v7 + 2);
  v9 = *((_QWORD *)v7 + 4);
  v10 = v7[40];
  v11 = v7[41];
  v12 = v7[42];
  v13 = sub_1A9C24F30();
  if (*(_QWORD *)(v15 + 40))
  {
    v16 = sub_1A9C27FC4(v4, v6);
    objc_msgSend(v1, sel_bounds);
    v17 = v4 - CGRectGetMidX(v63);
    objc_msgSend(v1, sel_bounds);
    MidY = CGRectGetMidY(v64);
    v14.n128_f64[0] = sub_1A9C144E0(v16, sqrt(v17 * v17 + (v6 - MidY) * (v6 - MidY))/ (*(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72]* 0.5));
  }
  ((void (*)(__int128 *, _QWORD, __n128))v13)(&v61, 0, v14);
  v19 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  swift_beginAccess();
  v20 = (void *)*((_QWORD *)v19 + 5);
  if (v20)
  {
    v21 = *((double *)v19 + 3);
    if (!*v19)
    {
      v25 = *((_OWORD *)v7 + 1);
      v61 = *(_OWORD *)v7;
      *(_OWORD *)v62 = v25;
      *(_OWORD *)&v62[11] = *(_OWORD *)(v7 + 27);
      v26 = sub_1A9C6CE04();
      v48 = v8;
      v27 = v9;
      v28 = v10;
      v29 = v11;
      v30 = v12;
      v32 = v31;
      v46 = v20;
      *(_QWORD *)v7 = sub_1A9C6C888(v21);
      *((_QWORD *)v7 + 1) = v33;
      sub_1A9C6D500(v26, v32);
      sub_1A9C24914();
      objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
      v54 = v49;
      v55 = v50;
      v56 = v48;
      v57 = v27;
      v58 = v28;
      v59 = v29;
      v60 = v30;
      if ((sub_1A9C28678((uint64_t)&v54, (void (*)(uint64_t, double))sub_1A9C6BD5C) & 1) != 0
        || (v54 = v49,
            v55 = v50,
            v56 = v48,
            v57 = v27,
            v58 = v28,
            v59 = v29,
            v60 = v30,
            (sub_1A9C28678((uint64_t)&v54, (void (*)(uint64_t, double))sub_1A9C6BF60) & 1) != 0))
      {
        v34 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
      }
      else
      {
        v54 = v49;
        v55 = v50;
        v56 = v48;
        v57 = v27;
        v58 = v28;
        v59 = v29;
        v60 = v30;
        if ((sub_1A9C28898((uint64_t)&v54) & 1) == 0)
        {
          v54 = v49;
          v55 = v50;
          v56 = v48;
          v57 = v27;
          v58 = v28;
          v59 = v29;
          v60 = v30;
          if ((sub_1A9C28A68((uint64_t)&v54) & 1) == 0)
          {
            v45 = v46;
            goto LABEL_21;
          }
        }
        v34 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
      }
      v35 = (uint64_t)&v2[v34];
      swift_beginAccess();
      sub_1A9C2A614(v35, (uint64_t)&v54);
      if (v56)
      {
        sub_1A9B923D4((uint64_t)&v54, (uint64_t)v51);
        sub_1A9C2A678((uint64_t)&v54);
        v36 = v52;
        v37 = v53;
        __swift_project_boxed_opaque_existential_1Tm(v51, v52);
        (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
        return;
      }

      v44 = &v54;
LABEL_23:
      sub_1A9C2A678((uint64_t)v44);
      return;
    }
    if (*v19 == 1)
    {
      v22 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
      v23 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
      v47 = v20;
      sub_1A9C6CA40(v21, v22, v23);
      sub_1A9C24914();
      objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
      v61 = v49;
      *(_QWORD *)v62 = v50;
      *(_QWORD *)&v62[8] = v8;
      *(_QWORD *)&v62[16] = v9;
      v62[24] = v10;
      v62[25] = v11;
      v62[26] = v12;
      if ((sub_1A9C28678((uint64_t)&v61, (void (*)(uint64_t, double))sub_1A9C6BD5C) & 1) == 0)
      {
        v61 = v49;
        *(_QWORD *)v62 = v50;
        *(_QWORD *)&v62[8] = v8;
        *(_QWORD *)&v62[16] = v9;
        v62[24] = v10;
        v62[25] = v11;
        v62[26] = v12;
        if ((sub_1A9C28898((uint64_t)&v61) & 1) != 0)
        {
LABEL_8:
          v24 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator;
LABEL_16:
          v41 = (uint64_t)&v2[v24];
          swift_beginAccess();
          sub_1A9C2A614(v41, (uint64_t)&v61);
          if (*(_QWORD *)&v62[8])
          {
            sub_1A9B923D4((uint64_t)&v61, (uint64_t)&v54);
            sub_1A9C2A678((uint64_t)&v61);
            v42 = v56;
            v43 = v57;
            __swift_project_boxed_opaque_existential_1Tm(&v54, v56);
            (*(void (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);

            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v54);
            return;
          }

          v44 = &v61;
          goto LABEL_23;
        }
        goto LABEL_20;
      }
    }
    else
    {
      v38 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152];
      v39 = *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160];
      v47 = v20;
      *((_QWORD *)v7 + 2) = sub_1A9C6C888(v21);
      *((_QWORD *)v7 + 3) = v40;
      sub_1A9C6D304(v38, v39);
      sub_1A9C24914();
      objc_msgSend(v2, sel_sendActionsForControlEvents_, 0x20000);
      v61 = v49;
      *(_QWORD *)v62 = v50;
      *(_QWORD *)&v62[8] = v8;
      *(_QWORD *)&v62[16] = v9;
      v62[24] = v10;
      v62[25] = v11;
      v62[26] = v12;
      if ((sub_1A9C28678((uint64_t)&v61, (void (*)(uint64_t, double))sub_1A9C6BF60) & 1) == 0)
      {
        v61 = v49;
        *(_QWORD *)v62 = v50;
        *(_QWORD *)&v62[8] = v8;
        *(_QWORD *)&v62[16] = v9;
        v62[24] = v10;
        v62[25] = v11;
        v62[26] = v12;
        if ((sub_1A9C28A68((uint64_t)&v61) & 1) != 0)
          goto LABEL_8;
LABEL_20:
        v45 = v47;
LABEL_21:

        return;
      }
    }
    v24 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator;
    goto LABEL_16;
  }
}

uint64_t sub_1A9C28678(uint64_t a1, void (*a2)(uint64_t, double))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  double v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[25];

  v4 = v2;
  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  v15 = (char *)&v44 - v14;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_BYTE *)(a1 + 40);
  v18 = *(_BYTE *)(a1 + 41);
  v19 = *(_BYTE *)(a1 + 42);
  v20 = *(_OWORD *)(a1 + 16);
  v46[0] = *(_OWORD *)a1;
  v46[1] = v20;
  *(_QWORD *)&v46[2] = v16;
  BYTE8(v46[2]) = v17;
  BYTE9(v46[2]) = v18;
  BYTE10(v46[2]) = v19;
  v21 = (double *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration);
  a2(v13, *(double *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  v22 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  v23 = swift_beginAccess();
  v24 = *(_QWORD *)(v22 + 32);
  v25 = *(_BYTE *)(v22 + 40);
  v26 = *(_BYTE *)(v22 + 41);
  v27 = *(_BYTE *)(v22 + 42);
  v28 = *(_OWORD *)(v22 + 16);
  v46[0] = *(_OWORD *)v22;
  v46[1] = v28;
  *(_QWORD *)&v46[2] = v24;
  BYTE8(v46[2]) = v25;
  BYTE9(v46[2]) = v26;
  BYTE10(v46[2]) = v27;
  a2(v23, v21[18]);
  v29 = sub_1A9CE6048();
  if ((v30 & 1) != 0
    || (v31 = v29, v32 = sub_1A9CE6084(), (v33 & 1) != 0)
    || (v34 = v32, v35 = sub_1A9CE6048(), (v36 & 1) != 0)
    || (v45 = v35, v37 = sub_1A9CE6084(), (v38 & 1) != 0))
  {
    v41 = 0;
  }
  else
  {
    v44 = v37;
    memcpy(v46, v21, 0x188uLL);
    v39 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
    swift_beginAccess();
    if (*(_QWORD *)(v39 + 40))
      v40 = *(double *)(v39 + 32);
    else
      v40 = 0.0;
    sub_1A9BD7A70((uint64_t)v46);
    v41 = sub_1A9C87F9C(v31, v34, v45, v44, v40);
    sub_1A9BD7B58((uint64_t)v46);
  }
  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v11, v6);
  v42(v15, v6);
  return v41 & 1;
}

uint64_t sub_1A9C28898(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  v3 = *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144) / 60.0;
  v4 = v3 * round((double)*(uint64_t *)(result + 8) / v3);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_19;
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(double *)(v2 + 176);
  v6 = *(_QWORD *)(v2 + 192);
  v7 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  result = swift_beginAccess();
  v8 = v3 * round((double)*(uint64_t *)(v7 + 8) / v3);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v9 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  result = swift_beginAccess();
  if (*(_QWORD *)(v9 + 40))
  {
    v10 = *(double *)(v9 + 32);
    if (v6)
      goto LABEL_9;
    goto LABEL_18;
  }
  v10 = 0.0;
  if (!v6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_9:
  v11 = (uint64_t)v8 % 60;
  if (v11 == (uint64_t)v4 % 60)
    return 0;
  v12 = v11 % v6;
  return fabs(v10) < v5 && v12 == 0;
}

uint64_t sub_1A9C28A68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  v3 = *(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144) / 60.0;
  v4 = v3 * round((double)*(uint64_t *)(result + 24) / v3);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_19;
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(double *)(v2 + 176);
  v6 = *(_QWORD *)(v2 + 192);
  v7 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model;
  result = swift_beginAccess();
  v8 = v3 * round((double)*(uint64_t *)(v7 + 24) / v3);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v9 = v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState;
  result = swift_beginAccess();
  if (*(_QWORD *)(v9 + 40))
  {
    v10 = *(double *)(v9 + 32);
    if (v6)
      goto LABEL_9;
    goto LABEL_18;
  }
  v10 = 0.0;
  if (!v6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_9:
  v11 = (uint64_t)v8 % 60;
  if (v11 == (uint64_t)v4 % 60)
    return 0;
  v12 = v11 % v6;
  return fabs(v10) < v5 && v12 == 0;
}

double sub_1A9C28E08(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v7;
  double Width;
  double MaxX;
  double v10;
  double v11;
  double v12;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v7 = a1;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  v14.origin.x = v7;
  v14.origin.y = a2;
  v14.size.width = a3;
  v14.size.height = a4;
  if (CGRectGetHeight(v14) >= Width)
  {
    v20.origin.x = v7;
    v20.origin.y = a2;
    v20.size.width = a3;
    v20.size.height = a4;
    v12 = CGRectGetWidth(v20);
    v21.origin.x = v7;
    v21.origin.y = a2;
    v21.size.width = a3;
    v21.size.height = a4;
    if (v12 < CGRectGetHeight(v21))
    {
      v22.origin.x = v7;
      v22.origin.y = a2;
      v22.size.width = a3;
      v22.size.height = a4;
      CGRectGetMaxY(v22);
      v23.origin.x = v7;
      v23.origin.y = a2;
      v23.size.width = a3;
      v23.size.height = a4;
      CGRectGetMinY(v23);
      v24.origin.x = v7;
      v24.origin.y = a2;
      v24.size.width = a3;
      v24.size.height = a4;
      CGRectGetWidth(v24);
      v25.origin.x = v7;
      v25.origin.y = a2;
      v25.size.width = a3;
      v25.size.height = a4;
      CGRectGetWidth(v25);
      v26.origin.x = v7;
      v26.origin.y = a2;
      v26.size.width = a3;
      v26.size.height = a4;
      CGRectGetWidth(v26);
    }
  }
  else
  {
    v15.origin.x = v7;
    v15.origin.y = a2;
    v15.size.width = a3;
    v15.size.height = a4;
    MaxX = CGRectGetMaxX(v15);
    v16.origin.x = v7;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    v10 = MaxX - CGRectGetMinX(v16);
    v17.origin.x = v7;
    v17.origin.y = a2;
    v17.size.width = a3;
    v17.size.height = a4;
    v11 = (v10 - CGRectGetHeight(v17)) * 0.5;
    v18.origin.x = v7;
    v18.origin.y = a2;
    v18.size.width = a3;
    v18.size.height = a4;
    CGRectGetHeight(v18);
    v19.origin.x = v7;
    v19.origin.y = a2;
    v19.size.width = a3;
    v19.size.height = a4;
    CGRectGetHeight(v19);
    return v11;
  }
  return v7;
}

double sub_1A9C28FB8(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t v16;
  double v17;

  v6 = sub_1A9CE8B8C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3 / a2;
  v17 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v12 == *MEMORY[0x1E0DED4F0])
  {
    v13 = round(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4E8])
  {
    v13 = rint(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED500])
  {
    v13 = ceil(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED508])
  {
    v13 = floor(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4D8])
  {
    v13 = trunc(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4E0])
  {
    v13 = ceil(v11);
    v14 = floor(v11);
    if (v11 < 0.0)
      v13 = v14;
  }
  else
  {
    sub_1A9CE84A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v13 = v17;
  }
  return v13 * a2;
}

uint64_t sub_1A9C2913C()
{
  uint64_t v0;
  _BYTE *v1;
  double v2;
  uint64_t result;

  v1 = (_BYTE *)(v0
               + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances
                + 8) != 1)
    return *(_QWORD *)v1;
  v2 = 86400.0
     / *(double *)(v0 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
      if (v2 < 9.22337204e18)
      {
        result = (uint64_t)v2;
        *(_QWORD *)v1 = (uint64_t)v2;
        v1[8] = 0;
        return result;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

double sub_1A9C291C8()
{
  uint64_t v0;
  _BYTE *v1;
  double result;

  v1 = (_BYTE *)(v0
               + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle);
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle
                 + 8) & 1) == 0)
    return *(double *)v1;
  result = 6.28318531 / (double)sub_1A9C2913C();
  *(double *)v1 = result;
  v1[8] = 0;
  return result;
}

char *sub_1A9C29218(double a1, double a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  char *v9;
  double *v10;
  char *v11;
  void *v12;
  char *v13;
  double v14;
  char *v15;
  CATransform3D v17;
  objc_super v18;

  v5 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  v6 = objc_allocWithZone(MEMORY[0x1E0CD2840]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  v8 = &v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (double *)&v7[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  *v10 = a1;
  v10[1] = a2;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for RingGrabber();
  v11 = (char *)objc_msgSendSuper2(&v18, sel_init);
  v12 = *(void **)&v11[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture];
  v13 = v11;
  objc_msgSend(v13, sel_addSublayer_, v12);
  objc_msgSend(v12, sel_setLineCap_, *MEMORY[0x1E0CD3010]);
  objc_msgSend(v12, sel_setFillColor_, 0);
  v14 = sub_1A9C291C8();
  v15 = v13;
  CATransform3DMakeRotation(&v17, v14, 0.0, 0.0, 1.0);
  objc_msgSend(v15, sel_setInstanceTransform_, &v17);

  return v15;
}

id sub_1A9C293C8(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v3 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  v4 = objc_allocWithZone(MEMORY[0x1E0CD2840]);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, sel_init);
  v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  v6 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v5[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;

  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  v9 = sub_1A9CE8B98();
  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for RingGrabber();
  v10 = objc_msgSendSuper2(&v12, sel_initWithLayer_, v9);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v10;
}

void sub_1A9C29560()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  double *v10;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  id v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v1 = v0;
  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Layout sublayers", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture];
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v9, sel_setFrame_);
  v10 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration];
  objc_msgSend(v9, sel_setLineWidth_, *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_configuration + 8]);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3508]), sel_init);
  v12 = v10[1] * 0.5;
  objc_msgSend(v1, sel_bounds);
  v13 = CGRectGetMaxX(v17) - v12;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v11, sel_moveToPoint_, v13, CGRectGetMidY(v18));
  objc_msgSend(v1, sel_bounds);
  v14 = v12 + CGRectGetMaxX(v19) - *v10;
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v11, sel_addLineToPoint_, v14, CGRectGetMidY(v20));
  v15 = objc_msgSend(v11, sel_CGPath);
  objc_msgSend(v9, sel_setPath_, v15);

}

id sub_1A9C29848(double a1, double a2)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  id result;
  double v12;
  CATransform3D v13;

  v5 = sub_1A9CE8B8C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DED500], v5);
    v10 = sub_1A9C291C8();
    a1 = sub_1A9C28FB8((uint64_t)v9, v10, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  CATransform3DMakeRotation(&v13, a1- *(double *)&v2[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset], 0.0, 0.0, 1.0);
  objc_msgSend(v2, sel_setTransform_, &v13);
  result = (id)sub_1A9C2913C();
  v12 = floor(a2 / 60.0 / 60.0 / 24.0 * (double)(uint64_t)result);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v12 < 9.22337204e18)
    return objc_msgSend(v2, sel_setInstanceCount_, (uint64_t)v12);
LABEL_9:
  __break(1u);
  return result;
}

id sub_1A9C29A0C()
{
  return sub_1A9BC0290(0, type metadata accessor for RingGrabber);
}

id sub_1A9C29A2C()
{
  id *v0;

  return objc_msgSend(*v0, sel_userInteractionStarted);
}

id sub_1A9C29A3C()
{
  id *v0;

  return objc_msgSend(*v0, sel_selectionChanged);
}

id sub_1A9C29A4C()
{
  id *v0;

  return objc_msgSend(*v0, sel_userInteractionEnded);
}

void sub_1A9C29A5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  void *v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v32 = (char *)&v27 - v5;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v2);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - v8;
  v31 = sub_1A9CE60C0();
  v10 = *(_QWORD *)(v31 - 8);
  v12 = MEMORY[0x1E0C80A78](v31, v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v27 - v16;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8530]), sel_init);
  objc_msgSend(v18, sel_setWeekdays_, *MEMORY[0x1E0DA8478]);
  v19 = v1[2];
  v20 = v1[3];
  v29 = v14;
  v30 = v10;
  if (v20 == 60 && __OFADD__(v19, 1))
  {
    __break(1u);
  }
  else
  {
    v21 = sub_1A9CE6444();
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v28(v9, 1, 1, v21);
    v22 = sub_1A9CE6498();
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v27(v32, 1, 1, v22);
    sub_1A9CE60A8();
    v23 = (void *)sub_1A9CE6018();
    v24 = *(void (**)(char *, uint64_t))(v30 + 8);
    v24(v17, v31);
    objc_msgSend(v18, sel_setWakeUpComponents_, v23);

    if (v1[1] != 60 || !__OFADD__(*v1, 1))
    {
      v28(v9, 1, 1, v21);
      v27(v32, 1, 1, v22);
      v25 = v29;
      sub_1A9CE60A8();
      v26 = (void *)sub_1A9CE6018();
      v24(v25, v31);
      objc_msgSend(v18, sel_setBedtimeComponents_, v26);

      objc_msgSend(v18, sel_actualSleepInterval);
      return;
    }
  }
  __break(1u);
}

uint64_t type metadata accessor for SleepScheduleClock()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepScheduleClock()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for RingGrabber()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for RingGrabber.Configuration()
{
  return &type metadata for RingGrabber.Configuration;
}

void sub_1A9C29E94()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  _QWORD v14[6];
  _QWORD v15[6];

  v1 = v0;
  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_gestureRecognizer;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC39C8]), sel_init);
  v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_track;
  *(_QWORD *)&v1[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v4 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_ring;
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand;
  sub_1A9C7EBB8(v14);
  LOWORD(v15[0]) = 0;
  v6 = (objc_class *)type metadata accessor for SleepScheduleClockHand();
  v7 = objc_allocWithZone(v6);
  *(_QWORD *)&v1[v5] = sub_1A9C7DF24((__int16 *)v15, (uint64_t)v14);
  v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand;
  sub_1A9C7EBB8(v15);
  v13 = 4097;
  v9 = objc_allocWithZone(v6);
  *(_QWORD *)&v1[v8] = sub_1A9C7DF24(&v13, (uint64_t)v15);
  v10 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  v11 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
  *((_QWORD *)v11 + 4) = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v12 = &v1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;

  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C2A008()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t result;
  void *v22;
  int v23;
  double v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  swift_getObjectType();
  v41 = sub_1A9CE8B8C();
  v1 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
  v6 = v0;
  v7 = sub_1A9CE6978();
  v8 = sub_1A9CE8658();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v48[0] = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = sub_1A9CE8D48();
    *(_QWORD *)&v42 = sub_1A9B91D6C(v11, v12, v48);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    v13 = &v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    v14 = *((_QWORD *)v13 + 4);
    v15 = v13[40];
    v16 = v13[41];
    v17 = v13[42];
    v42 = *(_OWORD *)v13;
    v43 = *((_OWORD *)v13 + 1);
    v44 = v14;
    v45 = v15;
    v46 = v16;
    v47 = v17;
    v18 = sub_1A9C6CF10();
    *(_QWORD *)&v42 = sub_1A9B91D6C(v18, v19, v48);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] Done editing model: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v10, -1, -1);
    MEMORY[0x1AF420344](v9, -1, -1);

  }
  else
  {

  }
  v20 = &v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dragState];
  result = swift_beginAccess();
  v22 = (void *)*((_QWORD *)v20 + 5);
  if (v22)
  {
    v23 = *v20;
    v24 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144];
    v25 = (uint64_t *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model];
    swift_beginAccess();
    sub_1A9C6CC54(v24);
    swift_endAccess();
    v26 = v22;
    sub_1A9C24914();
    if (v23)
    {
      if (v23 == 1)
      {
        objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_bedtimeHand], sel_setHighlighted_, 0);
        v27 = *(_QWORD *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_grabber];
        v28 = sub_1A9BE25FC(*v25, v25[1]);
        v29 = v41;
        (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DED500], v41);
        v30 = sub_1A9C291C8();
        v31 = sub_1A9C28FB8((uint64_t)v4, v30, v28);
        (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v29);
        v32 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset;
        *(long double *)(v27 + v32) = fmod(v31- v28+ *(double *)(v27+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset), *(long double *)(v27+ OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle));
        *(_BYTE *)(v27 + OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted) = 0;
      }
      else
      {
        objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_wakeUpHand], sel_setHighlighted_, 0);
      }
    }
    objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x20000);
    objc_msgSend(v6, sel_sendActionsForControlEvents_, 0x40000);
    v33 = (void *)*((_QWORD *)v20 + 5);
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_OWORD *)v20 + 2) = 0u;

    v34 = (uint64_t)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_majorFeedbackGenerator];
    swift_beginAccess();
    sub_1A9C2A614(v34, (uint64_t)&v42);
    if (*((_QWORD *)&v43 + 1))
    {
      sub_1A9B923D4((uint64_t)&v42, (uint64_t)v48);
      sub_1A9C2A678((uint64_t)&v42);
      v35 = v49;
      v36 = v50;
      __swift_project_boxed_opaque_existential_1Tm(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    }
    else
    {
      sub_1A9C2A678((uint64_t)&v42);
    }
    v37 = (uint64_t)&v6[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_minorFeedbackGenerator];
    swift_beginAccess();
    sub_1A9C2A614(v37, (uint64_t)&v42);
    if (*((_QWORD *)&v43 + 1))
    {
      sub_1A9B923D4((uint64_t)&v42, (uint64_t)v48);
      sub_1A9C2A678((uint64_t)&v42);
      v38 = v49;
      v39 = v50;
      __swift_project_boxed_opaque_existential_1Tm(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);

      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    }
    else
    {

      return sub_1A9C2A678((uint64_t)&v42);
    }
  }
  return result;
}

void sub_1A9C2A538()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  char *v3;

  v1 = OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_texture;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_isHalted] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_activeAngleOffset] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber_tickInterval] = 0x4082C00000000000;
  v2 = &v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___totalInstances];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtC13SleepHealthUIP33_3908BEF921CD76B2D67B4136649A566B11RingGrabber____lazy_storage___transformAngle];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;

  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C2A614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C17528(0, &qword_1EEB47048, (unint64_t *)&unk_1EEB47050, (uint64_t)&protocol descriptor for FeedbackGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C2A678(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C17528(0, &qword_1EEB47048, (unint64_t *)&unk_1EEB47050, (uint64_t)&protocol descriptor for FeedbackGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A9C2A6D4()
{
  unint64_t result;

  result = qword_1EEB47068;
  if (!qword_1EEB47068)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEF098], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEB47068);
  }
  return result;
}

unint64_t sub_1A9C2A718()
{
  unint64_t result;

  result = qword_1EEB47070;
  if (!qword_1EEB47070)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47070);
  }
  return result;
}

uint64_t sub_1A9C2A754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C17528(0, &qword_1EEB47048, (unint64_t *)&unk_1EEB47050, (uint64_t)&protocol descriptor for FeedbackGenerator, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C2A7B8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C2A7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9C253C8(a1, a2, v2);
}

id HKHealthStore.isSleepCoachingSupported.getter()
{
  void *v0;
  id result;
  void *v2;
  unsigned int v3;
  id v4;
  id v5;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_hksp_supportsSleep);

    result = 0;
    if (v3)
    {
      v4 = objc_msgSend(v0, sel_profileIdentifier);
      v5 = objc_msgSend(v4, sel_type);

      if (v5 != (id)3)
        return (id)1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL HKHealthStore.isSleepDataEntrySupported.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_profileIdentifier);
  v2 = objc_msgSend(v1, sel_type);

  return v2 != (id)3;
}

uint64_t dispatch thunk of ProvenanceInfoProviding.provenanceInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  return a1;
}

void destroy for SleepOnboardingContext(id *a1)
{

}

uint64_t assignWithCopy for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NextScheduleRowView(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NextScheduleRowView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NextScheduleRowView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NextScheduleRowView()
{
  return &type metadata for NextScheduleRowView;
}

uint64_t sub_1A9C2AA74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C2AA84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = sub_1A9CE73F8();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_1A9C2B3D0();
  return sub_1A9C2AAE4(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1A9C2AAE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  uint64_t result;
  _QWORD v40[2];

  sub_1A9C2B514();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2B4B8();
  v9 = v8;
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)v40 - v15;
  *(_QWORD *)v7 = sub_1A9CE7398();
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  sub_1A9C2B6A8();
  sub_1A9C2ADBC((uint64_t)&v7[*(int *)(v17 + 44)]);
  v18 = sub_1A9CE7740();
  sub_1A9CE6F24();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_1A9BA6F90((uint64_t)v7, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C2B514);
  v27 = &v13[*(int *)(v9 + 36)];
  *v27 = v18;
  *((_QWORD *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  sub_1A9B97190((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C2B514);
  sub_1A9C2B724((uint64_t)v13, (uint64_t)v16);
  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v28 = sub_1A9CE7200();
  if (a1)
  {
    v30 = (void *)v28;
    v31 = v29;
    swift_getKeyPath();
    swift_getKeyPath();
    v32 = a1;
    sub_1A9CE6E64();

    swift_release();
    swift_release();
    v33 = (void *)v40[1];
    v34 = sub_1A9CE6D8C();
    sub_1A9BA6F90((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C2B4B8);
    sub_1A9BA6F90((uint64_t)v13, a2, (uint64_t (*)(_QWORD))sub_1A9C2B4B8);
    sub_1A9C2B44C();
    v36 = (_QWORD *)(a2 + *(int *)(v35 + 48));
    *v36 = v30;
    v36[1] = v31;
    v36[2] = v34;
    v36[3] = v33;
    v37 = v30;
    swift_retain();
    v38 = v33;
    sub_1A9B97190((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1A9C2B4B8);

    swift_release();
    return sub_1A9B97190((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C2B4B8);
  }
  else
  {
    type metadata accessor for SleepActivityConfigurationModel();
    sub_1A9B92B9C(&qword_1EEB45F18, (uint64_t (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel, (uint64_t)&protocol conformance descriptor for SleepActivityConfigurationModel);
    result = sub_1A9CE71F4();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9C2ADBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_1A9BBA4B0();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v36 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v6);
  v35 = (uint64_t *)((char *)&v35 - v7);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v8 = (id)qword_1ED264F90;
  v9 = sub_1A9CE6168();
  v11 = v10;

  swift_bridgeObjectRelease();
  v37 = v9;
  v38 = v11;
  sub_1A9BA8EA4();
  v12 = sub_1A9CE79C8();
  v14 = v13;
  v16 = v15;
  if (qword_1EEB42EE8 != -1)
    swift_once();
  v17 = sub_1A9CE7998();
  v19 = v18;
  v21 = v20 & 1;
  sub_1A9BAA670(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  MEMORY[0x1AF41E85C](v22);
  v23 = sub_1A9CE7968();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_release();
  v30 = v27 & 1;
  sub_1A9BAA670(v17, v19, v21);
  swift_bridgeObjectRelease();
  v31 = v35;
  static Image.standardNavigationChevron.getter(v35);
  v32 = v36;
  sub_1A9BA6F90((uint64_t)v31, v36, (uint64_t (*)(_QWORD))sub_1A9BBA4B0);
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v29;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  sub_1A9C2B5AC();
  sub_1A9BA6F90(v32, a1 + *(int *)(v33 + 64), (uint64_t (*)(_QWORD))sub_1A9BBA4B0);
  sub_1A9BAA680(v23, v25, v30);
  swift_bridgeObjectRetain();
  sub_1A9B97190((uint64_t)v31, (uint64_t (*)(_QWORD))sub_1A9BBA4B0);
  sub_1A9B97190(v32, (uint64_t (*)(_QWORD))sub_1A9BBA4B0);
  sub_1A9BAA670(v23, v25, v30);
  return swift_bridgeObjectRelease();
}

void sub_1A9C2B0A8(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v5 = *a1;
  sub_1A9CE7DC4();
  type metadata accessor for SleepActivityConfigurationModel();
  sub_1A9B92B9C(&qword_1EEB45F18, (uint64_t (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel, (uint64_t)&protocol conformance descriptor for SleepActivityConfigurationModel);
  v6 = a2;
  v7 = sub_1A9CE70F8();
  v9 = v8;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v10 = sub_1A9CE70F8();
  v12 = v11;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  type metadata accessor for SleepSettingsModel();
  sub_1A9B92B9C(&qword_1EEB46650, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
  v13 = sub_1A9CE70F8();
  v15 = v14;

  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v13;
  *(_QWORD *)(a3 + 40) = v15;
  *(_BYTE *)(a3 + 48) = v16;
  *(_QWORD *)(a3 + 56) = v17;
  *(_BYTE *)(a3 + 64) = v5;
}

id sub_1A9C2B290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id result;
  __int128 v13;
  __int128 v14;
  id v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v3 = *(void **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  v16 = v4;
  if (v3)
  {
    v15 = v3;
    sub_1A9C2B0A8(&v16, v15, (uint64_t)v17);
    v13 = v17[1];
    v14 = v17[0];
    v6 = v18;
    v7 = v19;
    v8 = v20;
    v9 = v21;
    v10 = v22;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v3;
    *(_QWORD *)(v11 + 24) = v2;
    *(_BYTE *)(v11 + 32) = v4;
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = sub_1A9C2B3C4;
    *(_QWORD *)(a1 + 80) = v11;
    return v15;
  }
  else
  {
    type metadata accessor for SleepActivityConfigurationModel();
    sub_1A9B92B9C(&qword_1EEB45F18, (uint64_t (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel, (uint64_t)&protocol conformance descriptor for SleepActivityConfigurationModel);
    result = (id)sub_1A9CE71F4();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9C2B3A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A9C2B3C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C2AA84(*(void **)(v1 + 16), a1);
}

void sub_1A9C2B3D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47078)
  {
    sub_1A9B92F34(255, &qword_1EEB47080, (uint64_t (*)(uint64_t))sub_1A9C2B44C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47078);
  }
}

void sub_1A9C2B44C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB47088)
  {
    sub_1A9C2B4B8();
    sub_1A9C2B618();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB47088);
  }
}

void sub_1A9C2B4B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47090)
  {
    sub_1A9C2B514();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47090);
  }
}

void sub_1A9C2B514()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47098)
  {
    sub_1A9B92F34(255, &qword_1EEB470A0, (uint64_t (*)(uint64_t))sub_1A9C2B5AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB470B0, &qword_1EEB470A0, (uint64_t (*)(uint64_t))sub_1A9C2B5AC);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47098);
  }
}

void sub_1A9C2B5AC()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB470A8)
  {
    sub_1A9BBA4B0();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB470A8);
  }
}

void sub_1A9C2B618()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB470B8)
  {
    sub_1A9B92F34(255, &qword_1EEB470C0, (uint64_t (*)(uint64_t))sub_1A9C2B68C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB470B8);
  }
}

void sub_1A9C2B68C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB470C8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C2B6A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB470D0)
  {
    sub_1A9B92F34(255, &qword_1EEB470A0, (uint64_t (*)(uint64_t))sub_1A9C2B5AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB470D0);
  }
}

uint64_t sub_1A9C2B724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C2B4B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C2B770@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;

  v43 = a1;
  v39 = sub_1A9CE7380();
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2D234();
  v6 = v5;
  v36 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2D7B8(0);
  v11 = v10;
  v37 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2D860(0);
  v42 = v15;
  v41 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v40 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1[3];
  v52 = v1[2];
  v53 = v18;
  v54 = *((_BYTE *)v1 + 64);
  v19 = v1[1];
  v50 = *v1;
  v51 = v19;
  v44 = &v50;
  sub_1A9B92F34(0, &qword_1EEB47110, (uint64_t (*)(uint64_t))sub_1A9C2D2E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
  sub_1A9BCC5EC(&qword_1EEB471A0, &qword_1EEB47110, (uint64_t (*)(uint64_t))sub_1A9C2D2E8);
  sub_1A9CE78FC();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v20 = (id)qword_1ED264F90;
  v21 = sub_1A9CE6168();
  v23 = v22;

  swift_bridgeObjectRelease();
  v46 = v21;
  v47 = v23;
  v24 = sub_1A9B92B9C(&qword_1EEB471B0, (uint64_t (*)(uint64_t))sub_1A9C2D234, MEMORY[0x1E0CDD950]);
  v25 = sub_1A9BA8EA4();
  v26 = MEMORY[0x1E0DEA968];
  sub_1A9CE7B0C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
  v27 = v38;
  v28 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v4, *MEMORY[0x1E0CDAB90], v39);
  v46 = v6;
  v47 = v26;
  v48 = v24;
  v49 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v30 = v40;
  sub_1A9CE7B84();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v11);
  v45 = v53;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DE8();
  v31 = swift_allocObject();
  v32 = v53;
  *(_OWORD *)(v31 + 48) = v52;
  *(_OWORD *)(v31 + 64) = v32;
  *(_BYTE *)(v31 + 80) = v54;
  v33 = v51;
  *(_OWORD *)(v31 + 16) = v50;
  *(_OWORD *)(v31 + 32) = v33;
  sub_1A9C2D940(&v50);
  sub_1A9BAAB64(0, &qword_1EEB46F08, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E0CDC510], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v46 = v11;
  v47 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1A9C243E0();
  v34 = v42;
  sub_1A9CE7BB4();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v30, v34);
}

uint64_t sub_1A9C2BC18@<X0>(__int128 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t);
  void (*v73)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;

  v81 = a2;
  sub_1A9B92F34(0, &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v82 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v7);
  v89 = (uint64_t)&v75 - v8;
  sub_1A9C2D3D8(0, &qword_1EEB47150, sub_1A9C2D550);
  v80 = v9;
  v90 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v75 - v14;
  sub_1A9C2D4F0();
  v78 = v16;
  v86 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v87 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v75 - v21;
  sub_1A9C2D3D8(0, &qword_1EEB47120, sub_1A9C2D43C);
  v77 = v23;
  v84 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v85 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v75 - v28;
  v30 = a1[3];
  v97 = a1[2];
  v98 = v30;
  v99 = *((_BYTE *)a1 + 64);
  v31 = a1[1];
  v95 = *a1;
  v96 = v31;
  *(_QWORD *)&v95 = sub_1A9C2C400();
  *((_QWORD *)&v95 + 1) = v32;
  LOBYTE(v96) = v33 & 1;
  *((_QWORD *)&v96 + 1) = v34;
  v92 = a1;
  sub_1A9C2D43C(0);
  sub_1A9BC2784(&qword_1EEB471C0, (uint64_t (*)(uint64_t))sub_1A9C2D43C, sub_1A9C2D990, sub_1A9C2D628);
  v83 = v29;
  sub_1A9CE7F8C();
  v91 = a1;
  sub_1A9C2DA1C();
  v35 = v22;
  sub_1A9CE7F80();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v36 = (id)qword_1ED264F90;
  v37 = sub_1A9CE6168();
  v39 = v38;

  swift_bridgeObjectRelease();
  *(_QWORD *)&v95 = v37;
  *((_QWORD *)&v95 + 1) = v39;
  sub_1A9BA8EA4();
  *(_QWORD *)&v95 = sub_1A9CE79C8();
  *((_QWORD *)&v95 + 1) = v40;
  LOBYTE(v96) = v41 & 1;
  *((_QWORD *)&v96 + 1) = v42;
  MEMORY[0x1E0C80A78](v95, v40);
  sub_1A9C2D550(0);
  sub_1A9C2B618();
  v44 = v43;
  v45 = sub_1A9BC2784(&qword_1EEB47160, (uint64_t (*)(uint64_t))sub_1A9C2B618, (uint64_t (*)(void))sub_1A9C2D5E4, sub_1A9C2D628);
  v93 = v44;
  v94 = v45;
  swift_getOpaqueTypeConformance2();
  v88 = v15;
  sub_1A9CE7F74();
  if (*((_BYTE *)a1 + 64) == 4)
  {
    v46 = (id)qword_1ED264F90;
    v47 = sub_1A9CE6168();
    v49 = v48;

    swift_bridgeObjectRelease();
    *(_QWORD *)&v95 = v47;
    *((_QWORD *)&v95 + 1) = v49;
    *(_QWORD *)&v95 = sub_1A9CE79C8();
    *((_QWORD *)&v95 + 1) = v50;
    LOBYTE(v96) = v51 & 1;
    *((_QWORD *)&v96 + 1) = v52;
    MEMORY[0x1E0C80A78](v95, v50);
    sub_1A9B92F34(0, &qword_1EEB47188, (uint64_t (*)(uint64_t))sub_1A9C2D6C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB471E8, &qword_1EEB47188, (uint64_t (*)(uint64_t))sub_1A9C2D6C0);
    v53 = v89;
    sub_1A9CE7F74();
    sub_1A9C2D644();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
  }
  else
  {
    sub_1A9C2D644();
    v53 = v89;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v89, 1, 1, v55);
  }
  v56 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  v57 = v85;
  v58 = v77;
  v56(v85, v83, v77);
  v59 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v76 = v35;
  v60 = v78;
  v59(v87, v35, v78);
  v61 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  v62 = v79;
  v63 = v80;
  v61(v79, v88, v80);
  v64 = v53;
  v65 = v82;
  sub_1A9BC3120(v64, v82, &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v66 = v81;
  v56(v81, v57, v58);
  sub_1A9C2D2E8();
  v68 = v67;
  v69 = v87;
  v59(&v66[*(int *)(v67 + 48)], v87, v60);
  v61(&v66[*(int *)(v68 + 64)], v62, v63);
  v70 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9BC3120(v65, (uint64_t)&v66[*(int *)(v68 + 80)], &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1A9BC3170(v89, &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, v70);
  v71 = *(void (**)(char *, uint64_t))(v90 + 8);
  v71(v88, v63);
  v72 = *(void (**)(char *, uint64_t))(v86 + 8);
  v72(v76, v60);
  v73 = *(void (**)(char *, uint64_t))(v84 + 8);
  v73(v83, v58);
  sub_1A9BC3170(v65, &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v71(v62, v63);
  v72(v69, v60);
  return ((uint64_t (*)(char *, uint64_t))v73)(v85, v58);
}

uint64_t sub_1A9C2C400()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 24);
  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v2)
    objc_msgSend(v2, sel_windDownTime);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v3 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A9BA8EA4();
  return sub_1A9CE79C8();
}

uint64_t sub_1A9C2C588@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  type metadata accessor for SleepSettingsModel();
  sub_1A9B92B9C(&qword_1EEB46650, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
  v4 = sub_1A9CE7200();
  v13 = v5;
  v14 = v4;
  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v6 = sub_1A9CE7200();
  v8 = v7;
  v16 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v9 = *((id *)&v16 + 1);
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9C1BF3C((uint64_t)&v16);
  v10 = sub_1A9CE6D8C();
  swift_getKeyPath();
  swift_getKeyPath();
  v11 = v9;
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9C1BF3C((uint64_t)&v16);
  result = sub_1A9CE6D8C();
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v6;
  a2[3] = v8;
  a2[4] = v10;
  a2[5] = v15;
  a2[6] = result;
  a2[7] = v15;
  return result;
}

__n128 sub_1A9C2C734@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[5];
  __int128 v7;

  v7 = *(_OWORD *)(a1 + 16);
  v3 = (void *)*((_QWORD *)&v7 + 1);
  sub_1A9C2DAB8((uint64_t)&v7);
  sub_1A9C1AEC0(v3, (uint64_t)v6);
  sub_1A9C1BF3C((uint64_t)&v7);
  v4 = v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v6[4];
  result = (__n128)v6[1];
  *(_OWORD *)a2 = v6[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1A9C2C798(__int128 *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  __int128 v8;

  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v2 = (void *)sub_1A9CE7200();
  v8 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = *((id *)&v8 + 1);
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9C1BF3C((uint64_t)&v8);
  sub_1A9CE6D8C();
  v4 = swift_allocObject();
  v5 = a1[3];
  *(_OWORD *)(v4 + 48) = a1[2];
  *(_OWORD *)(v4 + 64) = v5;
  *(_BYTE *)(v4 + 80) = *((_BYTE *)a1 + 64);
  v6 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v6;
  sub_1A9C2D940(a1);
  sub_1A9C2B618();
  sub_1A9BC2784(&qword_1EEB47160, (uint64_t (*)(uint64_t))sub_1A9C2B618, (uint64_t (*)(void))sub_1A9C2D5E4, sub_1A9C2D628);
  sub_1A9CE7AB8();
  swift_release();

  swift_release();
}

uint64_t sub_1A9C2C93C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  __int128 v8;

  if (qword_1EEB42CC8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB572B0);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_QWORD *)&v8 = v6;
    *(_DWORD *)v5 = 136446210;
    sub_1A9B91D6C(0xD000000000000037, 0x80000001A9CFBF70, (uint64_t *)&v8);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Opening schedule editor", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v8 = *(_OWORD *)(a1 + 48);
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

void sub_1A9C2CAF0(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  id v11;
  id v12;
  _BYTE v13[72];
  _QWORD v14[9];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;

  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v4 = (void *)sub_1A9CE7200();
  v6 = v5;
  v15 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v7 = *((id *)&v15 + 1);
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9C1BF3C((uint64_t)&v15);
  v8 = (void *)v14[0];
  v9 = sub_1A9CE6D8C();
  v16 = 2;
  v17 = 0u;
  v18 = 0u;
  v19 = 256;
  sub_1A9BFEA64((__int128 *)&v16);
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678];
  sub_1A9BC3120((uint64_t)v14, (uint64_t)v13, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v9;
  a2[3] = v8;
  sub_1A9BC3120((uint64_t)v13, (uint64_t)(a2 + 4), &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, v10);
  v11 = v4;
  swift_retain();
  v12 = v8;
  sub_1A9BC3170((uint64_t)v14, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, v10);
  sub_1A9BC3170((uint64_t)v13, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, v10);

  swift_release();
}

uint64_t sub_1A9C2CCB0@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v13 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = *((id *)&v13 + 1);
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v4 = *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  v5 = *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v10[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);

  sub_1A9C1BF3C((uint64_t)&v13);
  v7 = (void *)*MEMORY[0x1E0DA8328];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  v8 = v7;
  sub_1A9CE7DE8();
  result = sub_1A9CE7734();
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 33) = result;
  return result;
}

uint64_t destroy for ScheduleListView(id *a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for ScheduleListView(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleListView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(void **)(a2 + 40);
  v11 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ScheduleListView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleListView()
{
  return &type metadata for ScheduleListView;
}

uint64_t sub_1A9C2D080()
{
  return sub_1A9B92B9C(&qword_1EEB470D8, (uint64_t (*)(uint64_t))sub_1A9C2D0AC, (uint64_t)&unk_1A9CF5AD0);
}

uint64_t sub_1A9C2D0AC()
{
  uint64_t result;

  result = qword_1EEB470E0;
  if (!qword_1EEB470E0)
  {
    sub_1A9C2D148();
    sub_1A9B92B9C(&qword_1EEB470F8, (uint64_t (*)(uint64_t))sub_1A9C2D148, MEMORY[0x1E0CDFCC0]);
    sub_1A9C2D1E0();
    type metadata accessor for NavigationLinkWithoutChevron();
  }
  return result;
}

void sub_1A9C2D148()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB470E8)
  {
    sub_1A9B92F34(255, &qword_1EEB47080, (uint64_t (*)(uint64_t))sub_1A9C2B44C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB470F0, &qword_1EEB47080, (uint64_t (*)(uint64_t))sub_1A9C2B44C);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB470E8);
  }
}

unint64_t sub_1A9C2D1E0()
{
  unint64_t result;

  result = qword_1EEB47100;
  if (!qword_1EEB47100)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF17B4, &type metadata for ScheduleListView);
    atomic_store(result, (unint64_t *)&qword_1EEB47100);
  }
  return result;
}

uint64_t sub_1A9C2D224()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C2D234()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47108)
  {
    sub_1A9B92F34(255, &qword_1EEB47110, (uint64_t (*)(uint64_t))sub_1A9C2D2E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB471A0, &qword_1EEB47110, (uint64_t (*)(uint64_t))sub_1A9C2D2E8);
    v0 = sub_1A9CE7908();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47108);
  }
}

void sub_1A9C2D2E8()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EEB47118)
  {
    sub_1A9C2D3D8(255, &qword_1EEB47120, sub_1A9C2D43C);
    sub_1A9C2D4F0();
    sub_1A9C2D3D8(255, &qword_1EEB47150, sub_1A9C2D550);
    sub_1A9B92F34(255, &qword_1EEB47178, (uint64_t (*)(uint64_t))sub_1A9C2D644, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EEB47118);
  }
}

void sub_1A9C2D3D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE7F98();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9C2D43C(uint64_t a1)
{
  sub_1A9C20DDC(a1, &qword_1EEB47128, (void (*)(uint64_t))sub_1A9C2D460, &qword_1EEB470C0, (uint64_t (*)(uint64_t))sub_1A9C2B68C);
}

void sub_1A9C2D460()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47130)
  {
    sub_1A9B92F34(255, &qword_1EEB47138, (uint64_t (*)(uint64_t))sub_1A9C2D4D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47130);
  }
}

void sub_1A9C2D4D4(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB47140, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C2D4F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47148)
  {
    v0 = sub_1A9CE7F98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47148);
  }
}

void sub_1A9C2D550(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EEB47158)
  {
    sub_1A9C2B618();
    v5[0] = v2;
    v5[1] = sub_1A9BC2784(&qword_1EEB47160, (uint64_t (*)(uint64_t))sub_1A9C2B618, (uint64_t (*)(void))sub_1A9C2D5E4, sub_1A9C2D628);
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDE248], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB47158);
  }
}

unint64_t sub_1A9C2D5E4()
{
  unint64_t result;

  result = qword_1EEB47168;
  if (!qword_1EEB47168)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2A2C, &type metadata for NextScheduleOccurrenceView);
    atomic_store(result, (unint64_t *)&qword_1EEB47168);
  }
  return result;
}

uint64_t sub_1A9C2D628()
{
  return sub_1A9C2134C(&qword_1EEB47170, &qword_1EEB470C0, (uint64_t (*)(uint64_t))sub_1A9C2B68C);
}

void sub_1A9C2D644()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47180)
  {
    sub_1A9B92F34(255, &qword_1EEB47188, (uint64_t (*)(uint64_t))sub_1A9C2D6C0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE7F98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47180);
  }
}

void sub_1A9C2D6C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB47190)
  {
    sub_1A9C2D744();
    sub_1A9B92F34(255, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB47190);
  }
}

void sub_1A9C2D744()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47198)
  {
    sub_1A9B92F34(255, &qword_1EEB470C0, (uint64_t (*)(uint64_t))sub_1A9C2B68C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47198);
  }
}

void sub_1A9C2D7B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EEB471A8)
  {
    sub_1A9C2D234();
    v3 = v2;
    v4 = sub_1A9B92B9C(&qword_1EEB471B0, (uint64_t (*)(uint64_t))sub_1A9C2D234, MEMORY[0x1E0CDD950]);
    v5 = sub_1A9BA8EA4();
    v8[0] = v3;
    v8[1] = MEMORY[0x1E0DEA968];
    v8[2] = v4;
    v8[3] = v5;
    v6 = MEMORY[0x1AF420248](a1, v8, MEMORY[0x1E0CDE598], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EEB471A8);
  }
}

void sub_1A9C2D860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EEB471B8)
  {
    sub_1A9C2D7B8(255);
    v3 = v2;
    sub_1A9C2D234();
    v6[2] = sub_1A9B92B9C(&qword_1EEB471B0, (uint64_t (*)(uint64_t))sub_1A9C2D234, MEMORY[0x1E0CDD950]);
    v6[3] = sub_1A9BA8EA4();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0CDED98], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEB471B8);
  }
}

uint64_t sub_1A9C2D92C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C2BC18(*(__int128 **)(v1 + 16), a1);
}

uint64_t sub_1A9C2D938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C2CCB0((__int128 *)(v1 + 16), a1);
}

_QWORD *sub_1A9C2D940(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v2 = (void *)a1[1];
  v3 = (void *)a1[3];
  v4 = (void *)a1[5];
  swift_retain();
  v5 = v2;
  v6 = v3;
  v7 = v4;
  return a1;
}

uint64_t sub_1A9C2D988@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C2C588(*(__int128 **)(v1 + 16), a1);
}

uint64_t sub_1A9C2D990()
{
  return sub_1A9BC2784(&qword_1EEB471C8, (uint64_t (*)(uint64_t))sub_1A9C2D460, (uint64_t (*)(void))sub_1A9C2D9B4, sub_1A9C2D9F8);
}

unint64_t sub_1A9C2D9B4()
{
  unint64_t result;

  result = qword_1EEB471D0;
  if (!qword_1EEB471D0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF32B0, &type metadata for ScheduledSleepFocusToggleView);
    atomic_store(result, (unint64_t *)&qword_1EEB471D0);
  }
  return result;
}

uint64_t sub_1A9C2D9F8()
{
  return sub_1A9C2134C(&qword_1EEB471D8, &qword_1EEB47138, (uint64_t (*)(uint64_t))sub_1A9C2D4D4);
}

double sub_1A9C2DA14@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1A9C2C734(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1A9C2DA1C()
{
  unint64_t result;

  result = qword_1EEB471E0;
  if (!qword_1EEB471E0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0E6C, &type metadata for WindDownPickerRowView);
    atomic_store(result, (unint64_t *)&qword_1EEB471E0);
  }
  return result;
}

void sub_1A9C2DA60()
{
  uint64_t v0;

  sub_1A9C2C798(*(__int128 **)(v0 + 16));
}

void sub_1A9C2DA68(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1A9C2CAF0(*(__int128 **)(v1 + 16), a1);
}

uint64_t objectdestroy_11Tm()
{
  id *v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C2DAB0()
{
  uint64_t v0;

  return sub_1A9C2C93C(v0 + 16);
}

uint64_t sub_1A9C2DAB8(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t sub_1A9C2DAE0()
{
  sub_1A9C2D860(255);
  sub_1A9BAAB64(255, &qword_1EEB46F08, (uint64_t)&type metadata for QuickScheduleManagementViewRepresentation, MEMORY[0x1E0CDC510], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  sub_1A9C2D7B8(255);
  sub_1A9C2D234();
  sub_1A9B92B9C(&qword_1EEB471B0, (uint64_t (*)(uint64_t))sub_1A9C2D234, MEMORY[0x1E0CDD950]);
  sub_1A9BA8EA4();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  sub_1A9C243E0();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C2DBE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9C2DC64()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1A9CE6E70();
}

uint64_t sub_1A9C2DCDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C2DD48()
{
  swift_beginAccess();
  sub_1A9B94CA0(0, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C2DDC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9B94CA0(0, &qword_1EEB47398, (uint64_t)&type metadata for SectionsViewModel, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9B94CA0(0, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9C2DEFC()
{
  swift_beginAccess();
  sub_1A9B94CA0(0, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C2DF70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9C2DFEC(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1A9CE6E70();
}

uint64_t sub_1A9C2E060()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C2E0CC()
{
  swift_beginAccess();
  sub_1A9C2F478(0, &qword_1EEB47208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C2E13C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9C2F478(0, &qword_1EEB47390, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9C2F478(0, &qword_1EEB47208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9C2E264()
{
  swift_beginAccess();
  sub_1A9C2F478(0, &qword_1EEB47208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

id SleepActivityConfigurationDataSource.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id result;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  char *v19;
  id v20;
  uint64_t v21;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  v3 = objc_allocWithZone(MEMORY[0x1E0DA8598]);
  v4 = (void *)sub_1A9CE82B0();
  v5 = objc_msgSend(v3, sel_initWithIdentifier_healthStore_, v4, v2);

  type metadata accessor for SleepScheduleProvider();
  v6 = v5;
  v7 = SleepScheduleProvider.__allocating_init(sleepStore:)(v6);
  v8 = v6;
  v9 = HKSPSleepStore.settings.getter();
  v10 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  v11 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v8, v9);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB5098], v8);
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v14 = result;
    v15 = (id)HKSPCurrentDateProvider();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WatchAppInstalledProvider()), sel_init);
    v18 = objc_msgSend((id)objc_opt_self(), sel_hksp_internalUserDefaults);
    v19 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepActivityConfigurationModel());
    v20 = sub_1A9C2EE44(v7, v11, v12, v17, v14, (uint64_t)sub_1A9BE4A30, v16, v18, v19);

    swift_release();
    v21 = (*(uint64_t (**)(id))(v1 + 232))(v20);

    return (id)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9C2E51C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t SleepActivityConfigurationDataSource.__allocating_init(sleepModel:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SleepActivityConfigurationDataSource.init(sleepModel:)(a1);
  return v2;
}

uint64_t SleepActivityConfigurationDataSource.init(sleepModel:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  v2 = v1;
  sub_1A9BB5404();
  MEMORY[0x1E0C80A78](v4, v5);
  v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94CA0(0, &qword_1EEB45508, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E0C96180]);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v39 - v9;
  sub_1A9C2F13C();
  v41 = *(_QWORD *)(v11 - 8);
  v42 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2F214();
  v44 = *(_QWORD *)(v15 - 8);
  v45 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C2F478(0, &qword_1EEB47208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)&v39 - v23;
  v25 = v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  v47 = 0;
  sub_1A9B94CA0(0, &qword_1EEB47210, (uint64_t)&type metadata for SleepTreatmentRowViewProvider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1A9CE6E34();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v25, v24, v20);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource_subscriptions) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource_sleepModel) = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v26 = a1;
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  LOBYTE(v46) = (_BYTE)v47;
  sub_1A9BC3D6C((uint64_t)v26);
  v27 = v48;
  swift_beginAccess();
  v46 = v27;
  sub_1A9CE6E34();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v28 = v47;
  v29 = 0;
  if (objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported)&& v28 > 1)
  {
    v30 = v26;
    v29 = v26;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  v47 = v29;
  swift_retain();
  sub_1A9CE6E70();
  swift_beginAccess();
  sub_1A9B94CA0(0, &qword_1EEB453F8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  swift_endAccess();
  sub_1A9C2F1B4();
  v31 = v40;
  sub_1A9CE6EB8();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v31);
  sub_1A9C04C74();
  v47 = (id)sub_1A9CE870C();
  v32 = sub_1A9CE8700();
  v33 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v43, 1, 1, v32);
  sub_1A9B92B9C(&qword_1EEB47230, (uint64_t (*)(uint64_t))sub_1A9C2F13C, MEMORY[0x1E0C95988]);
  sub_1A9B92B9C((unint64_t *)&qword_1ED2625B0, (uint64_t (*)(uint64_t))sub_1A9C04C74, MEMORY[0x1E0DEF7F8]);
  v34 = v42;
  sub_1A9CE6EAC();
  sub_1A9BB5AF4(v33);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v34);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v2;
  *(_QWORD *)(v35 + 24) = v26;
  sub_1A9B92B9C(&qword_1EEB47248, (uint64_t (*)(uint64_t))sub_1A9C2F214, MEMORY[0x1E0C95CB8]);
  v36 = v26;
  swift_retain();
  v37 = v45;
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v37);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();

  return v2;
}

uint64_t sub_1A9C2EAE8(uint64_t a1, uint64_t a2, char *a3)
{
  BOOL v4;
  char *v5;
  unsigned __int8 v7;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9BC3D6C((uint64_t)a3);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1A9CE6E70();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if (objc_msgSend(*(id *)&a3[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported))v4 = v7 > 1u;
  else
    v4 = 0;
  if (v4)
    v5 = a3;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1A9CE6E70();
}

uint64_t SleepActivityConfigurationDataSource.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__viewModel;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1A9B94CA0(0, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  v4 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  sub_1A9C2F478(0, &qword_1EEB47208, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SleepActivityConfigurationDataSource.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__viewModel;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1A9B94CA0(0, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  v4 = v0 + OBJC_IVAR____TtC13SleepHealthUI36SleepActivityConfigurationDataSource__sleepTreatmentRowViewProvider;
  sub_1A9C2F478(0, &qword_1EEB47208, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C2EE08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SleepActivityConfigurationDataSource();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

id sub_1A9C2EE44(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, char *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  id v24;
  char *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  objc_class *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  objc_super v42;
  id v43;
  char v44;

  v40 = a5;
  v41 = a8;
  v38 = a1;
  v39 = a6;
  sub_1A9B94CA0(0, &qword_1EEB453F8, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v38 - v17;
  v19 = &a9[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__layout];
  v44 = 0;
  v20 = a9;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v18, v14);
  v21 = (uint64_t *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_configUIVisitedKey];
  *v21 = sub_1A9CE82E0();
  v21[1] = v22;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  v23 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  v24 = sub_1A9C10C24((uint64_t)a2, v23);
  swift_beginAccess();
  v43 = v24;
  sub_1A9CE6E34();
  swift_endAccess();
  v25 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  v26 = v38;
  swift_retain();
  v27 = sub_1A9BE45E8((uint64_t)v26, v39, a7, v25);
  swift_beginAccess();
  v43 = v27;
  sub_1A9CE6E34();
  swift_endAccess();
  *(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_featureAvailability] = a3;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider] = a4;
  v28 = v40;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior] = v40;
  v29 = a3;
  v30 = a4;
  v31 = v28;

  v32 = (objc_class *)type metadata accessor for SleepActivityConfigurationModel();
  v42.receiver = v20;
  v42.super_class = v32;
  v33 = objc_msgSendSuper2(&v42, sel_init);
  swift_bridgeObjectRetain();
  v34 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v41, sel_setBool_forKey_, 1, v34);

  sub_1A9BDEC64();
  sub_1A9BDE910();
  sub_1A9C04C74();
  v35 = v33;
  v36 = (void *)sub_1A9CE870C();
  objc_msgSend(v29, sel_registerObserver_queue_, v35, v36);

  return v35;
}

void sub_1A9C2F13C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47218)
  {
    sub_1A9B94CA0(255, &qword_1EEB45508, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E0C96180]);
    sub_1A9C2F1B4();
    v0 = sub_1A9CE6D20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47218);
  }
}

unint64_t sub_1A9C2F1B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB47220;
  if (!qword_1EEB47220)
  {
    sub_1A9B94CA0(255, &qword_1EEB45508, (uint64_t)&type metadata for SleepActivityConfigurationSectionLayout, MEMORY[0x1E0C96180]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C96190], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB47220);
  }
  return result;
}

void sub_1A9C2F214()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47228)
  {
    sub_1A9C2F13C();
    sub_1A9C04C74();
    sub_1A9B92B9C(&qword_1EEB47230, (uint64_t (*)(uint64_t))sub_1A9C2F13C, MEMORY[0x1E0C95988]);
    sub_1A9B92B9C((unint64_t *)&qword_1ED2625B0, (uint64_t (*)(uint64_t))sub_1A9C04C74, MEMORY[0x1E0DEF7F8]);
    v0 = sub_1A9CE6D50();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47228);
  }
}

uint64_t sub_1A9C2F2E4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A9C2F310(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C2EAE8(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_1A9C2F328()
{
  return type metadata accessor for SleepActivityConfigurationDataSource();
}

uint64_t type metadata accessor for SleepActivityConfigurationDataSource()
{
  uint64_t result;

  result = qword_1EEB47278;
  if (!qword_1EEB47278)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9C2F36C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A9B94CA0(319, &qword_1EEB471F8, (uint64_t)&type metadata for SectionsViewModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1A9C2F478(319, &qword_1EEB47208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SleepActivityConfigurationDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.viewModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.$viewModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.sleepTreatmentRowViewProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.$sleepTreatmentRowViewProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SleepActivityConfigurationDataSource.__allocating_init(sleepModel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

void sub_1A9C2F478(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9B94CA0(255, &qword_1EEB47210, (uint64_t)&type metadata for SleepTreatmentRowViewProvider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

char *sub_1A9C2F4E8(char *result)
{
  char *v1;
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  double v13;
  char v14;

  v2 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
  {
    v3 = (char)result;
    swift_retain();
    sub_1A9CE6DD4();
    result = (char *)swift_release();
    if ((v14 & 1) == 0)
    {
      result = (char *)Double.hoursAndMinutes.getter(v13);
      if ((v5 & 1) == 0)
      {
        v6 = &v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
        if ((v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24] & 1) == 0)
          return sub_1A9C30160(result, v4, v3 & 1);
        v7 = 60 * (_QWORD)result;
        if ((unsigned __int128)((uint64_t)result * (__int128)60) >> 64 == (60 * (uint64_t)result) >> 63)
        {
          v8 = __OFADD__(v7, v4);
          v9 = v7 + v4;
          if (!v8)
          {
            v10 = *((_QWORD *)v6 + 2);
            if (v10)
            {
              if (v9 != 0x8000000000000000 || v10 != -1)
              {
                v11 = v9 / v10;
                result = (char *)objc_msgSend(v2, sel_pickerView_numberOfRowsInComponent_, v2, 0);
                if ((uint64_t)result >= v11)
                {
                  objc_msgSend(v2, sel_selectRow_inComponent_animated_, v11, (v6[24] & 1) == 0, 0);
                  return sub_1A9C30308((char *)v11, (v6[24] & 1) == 0, v3 & 1, v12);
                }
                return result;
              }
LABEL_17:
              __break(1u);
              return result;
            }
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  return result;
}

char *sub_1A9C2F628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher);
  if (v3)
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92D08();
    sub_1A9C30118();
    swift_retain();
    v3 = sub_1A9CE6EC4();
    swift_release();
    swift_release();
  }
  *(_QWORD *)(v1 + v2) = v3;
  swift_release();
  return sub_1A9C2F91C(0);
}

void sub_1A9C2F71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  double v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_1A9CE80A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(double *)a1;
  v10 = *(_BYTE *)(a1 + 8);
  sub_1A9C04C74();
  *v8 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEF740], v4);
  LOBYTE(a1) = sub_1A9CE80AC();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v8, v4);
  if ((a1 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_beginAccess();
  v11 = MEMORY[0x1AF4203E0](a2 + 16);
  if (!v11)
    return;
  v12 = (void *)v11;
  v13 = v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  if ((*(_BYTE *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = floor(*(double *)v13 / 60.0 / 60.0);
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v15 <= -9.22337204e18)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= 9.22337204e18)
    {
LABEL_25:
      __break(1u);
      return;
    }
    v14 = (uint64_t)v15;
  }
  v16 = *(_QWORD *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
  v17 = __OFADD__(v14, v16);
  v18 = v14 + v16;
  if (v17)
    goto LABEL_19;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v11 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex);
  v21 = v19 * v20;
  if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v22 = 60 * v18;
  if ((unsigned __int128)(v18 * (__int128)60) >> 64 != (60 * v18) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = __OFADD__(v22, v21);
  v23 = v22 + v21;
  if (v17)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v10 & 1) != 0 || v9 != (double)v23 * 60.0)
    sub_1A9C2F91C(0);

}

char *sub_1A9C2F91C(char *result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;

  v2 = (char)result;
  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = floor(*(double *)v3 / 60.0 / 60.0);
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v5 >= 9.22337204e18)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    v4 = (uint64_t)v5;
  }
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
  v7 = __OFADD__(v4, v6);
  v8 = v4 + v6;
  if (v7)
  {
    __break(1u);
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex);
  v11 = v9 * v10;
  if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = 60 * v8;
  if ((unsigned __int128)(v8 * (__int128)60) >> 64 != (60 * v8) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v13 = v12 + v11;
  if (__OFADD__(v12, v11))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher))
  {
    swift_retain();
    sub_1A9CE6DD4();
    result = (char *)swift_release();
    if ((v15 & 1) == 0 && v14 != (double)v13 * 60.0)
      return sub_1A9C2F4E8((char *)(v2 & 1));
  }
  return result;
}

id sub_1A9C2FA80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  char *v5;
  void *v6;
  id v7;
  objc_super v9;

  v1 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
    v5 = (char *)objc_allocWithZone(v4);
    *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
    v9.receiver = v5;
    v9.super_class = v4;
    v3 = objc_msgSendSuper2(&v9, sel_init);
    objc_msgSend(v3, sel_setUnitsStyle_, 2);
    objc_msgSend(v3, sel_setAllowedUnits_, 32);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1A9C2FB40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
    v5 = (char *)objc_allocWithZone(v4);
    *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
    v10.receiver = v5;
    v10.super_class = v4;
    v6 = objc_msgSendSuper2(&v10, sel_init);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_1A9C2FBD8(uint64_t a1, char a2, double a3, double a4)
{
  char *v4;
  double *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter] = 0;
  v5 = (double *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  *v5 = a3;
  v5[1] = a4;
  *((_QWORD *)v5 + 2) = a1;
  *((_BYTE *)v5 + 24) = a2 & 1;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  v6 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setDataSource_, v6);
  objc_msgSend(v6, sel_setDelegate_, v6);

  return v6;
}

id sub_1A9C2FCB8(void *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  objc_super v13;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalSubscriber] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___hourFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView____lazy_storage___minuteFormatter] = 0;
  v3 = sub_1A9CDF60C();
  v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = v6;
  *((_QWORD *)v4 + 2) = v3;
  v4[24] = v7 & 1;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  v8 = objc_msgSendSuper2(&v13, sel_initWithCoder_, a1);
  v9 = v8;
  if (v8)
  {
    v10 = v8;
    objc_msgSend(v10, sel_setDataSource_, v10);
    v11 = v10;
    objc_msgSend(v11, sel_setDelegate_, v11);

  }
  return v9;
}

id sub_1A9C2FE08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimeIntervalPickerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimeIntervalPickerView()
{
  return objc_opt_self();
}

id sub_1A9C2FEF4(uint64_t a1)
{
  uint64_t v1;
  id result;
  void *v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  result = sub_1A9C2FA80();
  v4 = result;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = floor(*(double *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration) / 60.0 / 60.0);
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v6 <= -9.22337204e18)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if (v6 >= 9.22337204e18)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v5 = (uint64_t)v6;
  }
  v7 = __OFADD__(v5, a1);
  v8 = v5 + a1;
  if (v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  v9 = objc_msgSend(result, sel_stringFromTimeInterval_, (double)v8 * 60.0 * 60.0);

  if (!v9)
    return 0;
  v10 = sub_1A9CE82E0();

  return (id)v10;
}

uint64_t sub_1A9C300EC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C30110(uint64_t a1)
{
  uint64_t v1;

  sub_1A9C2F71C(a1, v1);
}

unint64_t sub_1A9C30118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB474C0;
  if (!qword_1EEB474C0)
  {
    sub_1A9B92D08();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB474C0);
  }
  return result;
}

char *sub_1A9C30160(char *result, uint64_t a2, char a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v16;

  v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  v7 = v3[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24];
  if ((v7 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = floor(*(double *)v6 / 60.0 / 60.0);
    if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v9 <= -9.22337204e18)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= 9.22337204e18)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    v8 = (uint64_t)v9;
  }
  v10 = &result[-v8];
  if (__OFSUB__(result, v8))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = (char *)objc_msgSend(v3, sel_pickerView_numberOfRowsInComponent_, v3, v7 << 63 >> 63);
  if ((uint64_t)result >= (uint64_t)v10 && (uint64_t)result >= 1)
  {
    objc_msgSend(v3, sel_selectRow_inComponent_animated_, v10, (uint64_t)((unint64_t)v6[24] << 63) >> 63, 0);
    result = sub_1A9C30308(v10, (uint64_t)((unint64_t)v6[24] << 63) >> 63, a3 & 1, v12);
  }
  v13 = *((_QWORD *)v6 + 2);
  if (!v13)
    goto LABEL_23;
  if (a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_27;
  v14 = a2 / v13;
  result = (char *)objc_msgSend(v3, sel_pickerView_numberOfRowsInComponent_, v3, ~v6[24] & 1);
  if ((uint64_t)result >= v14 && (uint64_t)result >= 1)
  {
    objc_msgSend(v3, sel_selectRow_inComponent_animated_, v14, (v6[24] & 1) == 0, 0);
    return sub_1A9C30308((char *)v14, (v6[24] & 1) == 0, a3 & 1, v16);
  }
  return result;
}

char *sub_1A9C30308(char *result, uint64_t a2, char a3, __n128 a4)
{
  char *v4;
  char *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v7 = result;
  v8 = (double *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  v9 = v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24];
  if (v9 << 63 >> 63 == a2)
  {
    *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex] = result;
    if ((v9 & 1) == 0)
      result = (char *)objc_msgSend(v4, sel_reloadComponent_, 1);
  }
  else if (!(v9 & 1) == a2)
  {
    *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = result;
  }
  v10 = *((unsigned __int8 *)v8 + 24);
  v11 = v10 & 1;
  if (v10 << 63 >> 63 != a2)
    goto LABEL_40;
  a4.n128_f64[0] = *v8;
  if ((v10 & 1) != 0)
  {
    v12 = v8[1];
    if (v7)
    {
      v13 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
      if (!v13)
        goto LABEL_26;
LABEL_40:
      if ((a3 & 1) == 0
        || !*(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
      {
        return result;
      }
      if ((v11 & 1) != 0)
      {
        v29 = 0;
      }
      else
      {
        v30 = floor(*v8 / 60.0 / 60.0);
        if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        if (v30 <= -9.22337204e18)
        {
LABEL_81:
          __break(1u);
          goto LABEL_82;
        }
        if (v30 >= 9.22337204e18)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v29 = (uint64_t)v30;
      }
      v31 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
      v19 = __OFADD__(v29, v31);
      v32 = v29 + v31;
      if (!v19)
      {
        v33 = *((_QWORD *)v8 + 2);
        v34 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex];
        if ((unsigned __int128)(v33 * (__int128)v34) >> 64 == (v33 * v34) >> 63)
        {
          if ((unsigned __int128)(v32 * (__int128)60) >> 64 == (60 * v32) >> 63)
          {
            if (!__OFADD__(60 * v32, v33 * v34))
            {
LABEL_52:
              swift_retain();
              sub_1A9CE6DC8();
              return (char *)swift_release();
            }
            goto LABEL_69;
          }
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
LABEL_25:
    v13 = 0;
    goto LABEL_26;
  }
  v14 = floor(a4.n128_f64[0] / 60.0 / 60.0);
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v15 = (uint64_t)v14;
  v16 = &v7[(uint64_t)v14];
  if (__OFADD__(v7, (uint64_t)v14))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v12 = v8[1];
  v17 = floor(v12 / 60.0 / 60.0);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v13 = (uint64_t)v17;
  if (v16 != (char *)(uint64_t)v17)
  {
    v18 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
    v19 = __OFADD__(v15, v18);
    v20 = v15 + v18;
    if (v19)
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v20 != v13)
      goto LABEL_40;
  }
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v17 >= 9.22337204e18)
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  v21 = *((_QWORD *)v8 + 2);
  v22 = OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex;
  v23 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex];
  v24 = v21 * v23;
  if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
  {
    __break(1u);
    goto LABEL_64;
  }
  v25 = 60 * v13;
  if ((unsigned __int128)(v13 * (__int128)60) >> 64 != (60 * v13) >> 63)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (__OFADD__(v25, v24))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((double)(v25 + v24) * 60.0 <= v12)
    goto LABEL_40;
  v26 = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedMinuteIndex] = 0;
  if ((v11 & 1) == 0)
  {
    a4.n128_f64[0] = floor(a4.n128_f64[0] / 60.0 / 60.0);
    if ((~a4.n128_u64[0] & 0x7FF0000000000000) == 0)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (a4.n128_f64[0] <= -9.22337204e18)
    {
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (a4.n128_f64[0] >= 9.22337204e18)
    {
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    v26 = (uint64_t)a4.n128_f64[0];
  }
  v27 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex];
  result = (char *)(v26 + v27);
  if (__OFADD__(v26, v27))
    goto LABEL_79;
  result = (char *)sub_1A9C30160(result, 0, 0, a4);
  if ((a3 & 1) != 0 && *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher])
  {
    if (((_BYTE)v8[3] & 1) != 0)
    {
      v28 = 0;
    }
    else
    {
      v35 = floor(*v8 / 60.0 / 60.0);
      if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v35 <= -9.22337204e18)
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      if (v35 >= 9.22337204e18)
      {
LABEL_93:
        __break(1u);
        return result;
      }
      v28 = (uint64_t)v35;
    }
    v19 = __OFADD__(v7, v28);
    v36 = (uint64_t)&v7[v28];
    if (!v19)
    {
      v37 = *((_QWORD *)v8 + 2);
      v38 = *(_QWORD *)&v4[v22];
      if ((unsigned __int128)(v37 * (__int128)v38) >> 64 == (v37 * v38) >> 63)
      {
        if ((unsigned __int128)(v36 * (__int128)60) >> 64 == (60 * v36) >> 63)
        {
          if (!__OFADD__(60 * v36, v37 * v38))
            goto LABEL_52;
          goto LABEL_90;
        }
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  return result;
}

uint64_t sub_1A9C30808(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  int64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;

  v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24);
  v4 = v3 & 1;
  if (v3 << 63 >> 63 != result)
  {
    if (!(v3 & 1) != result)
      return 0;
    v8 = *(double *)v2;
    v7 = *(double *)(v2 + 8);
    v9 = *(_QWORD *)(v2 + 16);
    result = sub_1A9CDF530(*(double *)v2, v7, v9, v4);
    v10 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v9)
      {
        result = 0;
        v11 = 0;
        v12 = v8 / 60.0 / 60.0;
        v13 = v7 / 60.0 / 60.0;
        v14 = floor(v12);
        v15 = vcvtmd_s64_f64(v13);
        v16 = floor(v13);
        v17 = 60 * v15;
        v18 = vcvtmd_s64_f64(v12);
LABEL_22:
        v23 = v11;
        while (1)
        {
          v24 = v10 >= v23;
          if (v9 > 0)
            v24 = v23 >= v10;
          if (v24)
            return result;
          v11 = v23 + v9;
          if (__OFADD__(v23, v9))
          {
            v11 = (v9 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
            if ((v4 & 1) != 0)
            {
              v11 = (v9 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
              v21 = __OFADD__(result++, 1);
              if (!v21)
                goto LABEL_22;
              goto LABEL_52;
            }
          }
          else if ((v4 & 1) != 0)
          {
            goto LABEL_21;
          }
          if ((*(_QWORD *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000)
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          if (v14 <= -9.22337204e18)
            goto LABEL_44;
          if (v14 >= 9.22337204e18)
            goto LABEL_45;
          v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_selectedHourIndex);
          v21 = __OFADD__(v18, v25);
          v26 = v18 + v25;
          if (v21)
            goto LABEL_46;
          if ((*(_QWORD *)&v16 & 0x7FF0000000000000) == 0x7FF0000000000000)
            goto LABEL_47;
          if (v16 <= -9.22337204e18)
            goto LABEL_48;
          if (v16 >= 9.22337204e18)
            goto LABEL_49;
          if (v26 != v15)
            goto LABEL_21;
          if ((unsigned __int128)(v15 * (__int128)60) >> 64 != (60 * v15) >> 63)
            goto LABEL_50;
          v21 = __OFADD__(v17, v23);
          v27 = v17 + v23;
          if (v21)
            goto LABEL_51;
          v28 = (double)v27 * 60.0;
          v23 = v11;
          if (v28 <= v7)
            goto LABEL_21;
        }
      }
      goto LABEL_55;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if ((v3 & 1) != 0)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v19 = floor(*(double *)(v2 + 8) / 60.0 / 60.0);
    if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v19 <= -9.22337204e18)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v19 >= 9.22337204e18)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v20 = floor(*(double *)v2 / 60.0 / 60.0);
    if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v20 <= -9.22337204e18)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v20 >= 9.22337204e18)
    {
LABEL_61:
      __break(1u);
      return result;
    }
    v5 = (uint64_t)v19;
    v6 = (uint64_t)v20;
  }
  v21 = __OFSUB__(v5, v6);
  v22 = v5 - v6;
  if (v21)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  result = v22 + 1;
  if (!__OFADD__(v22, 1))
    return result;
  __break(1u);
  return 0;
}

id sub_1A9C30AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  void *v9;
  id v10;

  v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 24);
  if (v5 << 63 >> 63 == a2)
    return sub_1A9C2FEF4(a1);
  if (!(v5 & 1) != a2)
    return 0;
  result = sub_1A9C2FB40();
  v8 = *(_QWORD *)(v4 + 16);
  if ((unsigned __int128)(a1 * (__int128)v8) >> 64 == (a1 * v8) >> 63)
  {
    v9 = result;
    v10 = objc_msgSend(result, sel_stringFromTimeInterval_, (double)(a1 * v8) * 60.0);

    if (!v10)
      return 0;
    v6 = sub_1A9CE82E0();

    return (id)v6;
  }
  __break(1u);
  return result;
}

void sub_1A9C30BBC(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A9C30C08(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1A9C30C7C + 4 * byte_1A9CF1995[a2]))(v2 + 5);
}

uint64_t sub_1A9C30C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == v1 + 5 && v2 == 0x80000001A9CF7F90)
    v3 = 1;
  else
    v3 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1A9C30D20(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEE0065636E656972;
  v3 = 0x657078456E69616DLL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x696472616F626E6FLL;
    else
      v5 = 0x63536567616E616DLL;
    if (v4 == 1)
      v6 = 0xEA0000000000676ELL;
    else
      v6 = 0xEE00656C75646568;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x657078456E69616DLL;
  v6 = 0xEE0065636E656972;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x696472616F626E6FLL;
    else
      v3 = 0x63536567616E616DLL;
    if (v7 == 1)
      v2 = 0xEA0000000000676ELL;
    else
      v2 = 0xEE00656C75646568;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1A9C30E68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C30EC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A9C30F88 + 4 * byte_1A9CF19A2[a2]))(0x736E6F6974704FLL);
}

uint64_t sub_1A9C30F88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x736E6F6974704FLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A9C31084(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C310CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A9C31148 + 4 * byte_1A9CF19AF[a2]))(0x7065656C536D6572);
}

uint64_t sub_1A9C31148(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7065656C536D6572 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL SleepStagesModel.hasSleepStageData.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = sub_1A9C318EC(2u, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3 = sub_1A9C318EC(3u, v1);
  swift_bridgeObjectRelease();
  v4 = v2 + v3;
  swift_bridgeObjectRetain();
  v5 = sub_1A9C318EC(1u, v1);
  swift_bridgeObjectRelease();
  return v4 + v5 > 0.0;
}

void sub_1A9C312B0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C312F0()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

void sub_1A9C314AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C314FC()
{
  char v1;

  v1 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_1A9C315FC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(char *, _QWORD);
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[32];
  uint64_t v47;

  v33 = a5;
  v34 = a8;
  v41 = a1;
  v42 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)&v32 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v19 - 8);
  v36 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v32 - v21;
  v23 = sub_1A9CE852C();
  if (!v23)
    return sub_1A9CE840C();
  v39 = AssociatedTypeWitness;
  v24 = v23;
  v47 = sub_1A9CE8A48();
  v37 = sub_1A9CE8A54();
  sub_1A9CE8A0C();
  v40 = v8;
  result = sub_1A9CE8520();
  if ((v24 & 0x8000000000000000) == 0)
  {
    v26 = v24;
    v38 = v18;
    while (v26)
    {
      v44 = v26;
      v27 = (void (*)(char *, _QWORD))sub_1A9CE858C();
      v28 = *(void (**)(char *))(v11 + 16);
      v29 = v11;
      v30 = v39;
      v28(v15);
      v27(v46, 0);
      v31 = v45;
      v41(v15, v43);
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v43, v33);
      }
      v45 = 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
      sub_1A9CE8A3C();
      result = sub_1A9CE8568();
      v26 = v44 - 1;
      v11 = v29;
      if (v44 == 1)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
        return v47;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_1A9C318EC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v37 = type metadata accessor for SleepStageSegment(0);
  v4 = *(_QWORD *)(v37 - 8);
  v6 = MEMORY[0x1E0C80A78](v37, v5);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v38 = (char *)v34 - v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v34 - v13;
  v15 = MEMORY[0x1E0DEE9D8];
  v39 = MEMORY[0x1E0DEE9D8];
  v16 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v4 + 80);
    v34[1] = a2;
    v34[2] = v4;
    v35 = (v17 + 32) & ~v17;
    v36 = a1;
    sub_1A9BA6F90(a2 + v35, (uint64_t)v14, type metadata accessor for SleepStageSegment);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v15 + 16);
  if (v18)
  {
    v39 = v15;
    sub_1A9BE04AC(0, v18, 0);
    v19 = v15 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v20 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_1A9BA6F90(v19, (uint64_t)v8, type metadata accessor for SleepStageSegment);
      sub_1A9CE5F4C();
      v22 = v21;
      sub_1A9B97190((uint64_t)v8, type metadata accessor for SleepStageSegment);
      v15 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A9BE04AC(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v39;
      }
      v24 = *(_QWORD *)(v15 + 16);
      v23 = *(_QWORD *)(v15 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1A9BE04AC(v23 > 1, v24 + 1, 1);
        v15 = v39;
      }
      *(_QWORD *)(v15 + 16) = v24 + 1;
      *(_QWORD *)(v15 + 8 * v24 + 32) = v22;
      v19 += v20;
      --v18;
    }
    while (v18);
  }
  swift_release();
  v25 = *(_QWORD *)(v15 + 16);
  if (!v25)
  {
    v27 = 0.0;
    goto LABEL_19;
  }
  if (v25 == 1)
  {
    v26 = 0;
    v27 = 0.0;
LABEL_17:
    v30 = v25 - v26;
    v31 = (double *)(v15 + 8 * v26 + 32);
    do
    {
      v32 = *v31++;
      v27 = v27 + v32;
      --v30;
    }
    while (v30);
    goto LABEL_19;
  }
  v26 = v25 & 0x7FFFFFFFFFFFFFFELL;
  v28 = (double *)(v15 + 40);
  v27 = 0.0;
  v29 = v25 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v27 = v27 + *(v28 - 1) + *v28;
    v28 += 2;
    v29 -= 2;
  }
  while (v29);
  if (v25 != v26)
    goto LABEL_17;
LABEL_19:
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t SleepStage.id.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A9C31DE4 + 4 * byte_1A9CF19CC[a1]))(0x656B617761, 0xE500000000000000);
}

uint64_t sub_1A9C31DE4()
{
  return 0x7065656C536D6572;
}

uint64_t sub_1A9C31DFC()
{
  return 0x65656C5365726F63;
}

uint64_t sub_1A9C31E24()
{
  return 0x6669636570736E75;
}

uint64_t SleepStage.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A9C31E74 + 4 * byte_1A9CF19D1[a1]))(0x656B617761, 0xE500000000000000);
}

uint64_t sub_1A9C31E74()
{
  return 0x7065656C536D6572;
}

uint64_t sub_1A9C31E8C()
{
  return 0x65656C5365726F63;
}

uint64_t sub_1A9C31EB4()
{
  return 0x6669636570736E75;
}

void sub_1A9C31ED4()
{
  qword_1ED262EE0 = (uint64_t)&unk_1E55D1F90;
}

uint64_t static SleepStage.visibleSleepStages.getter()
{
  if (qword_1ED262EE8 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void *static SleepStage.allCases.getter()
{
  return &unk_1E55D2750;
}

uint64_t sub_1A9C31F34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_1A9C31F60()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A9C31F8C + 4 * byte_1A9CF19D6[*v0]))();
}

void sub_1A9C31F8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7065656C536D6572;
  a1[1] = 0xE800000000000000;
}

void sub_1A9C31FA8(_QWORD *a1@<X8>)
{
  *a1 = 0x65656C5365726F63;
  a1[1] = 0xE900000000000070;
}

void sub_1A9C31FD4(_QWORD *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

void sub_1A9C31FF8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E55D2778;
}

uint64_t sub_1A9C32008()
{
  sub_1A9C386DC();
  return sub_1A9CE83B8();
}

uint64_t sub_1A9C32064()
{
  sub_1A9C386DC();
  return sub_1A9CE83AC();
}

void sub_1A9C320B0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A9C320FC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A9C32174 + 4 * byte_1A9CF19E0[a1]))(0x7065656C536D6572);
}

uint64_t sub_1A9C32174(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7065656C536D6572 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1A9C32248()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A9CE8C4C();
  __asm { BR              X9 }
}

uint64_t sub_1A9C32290()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

void sub_1A9C32318()
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C32350()
{
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

void sub_1A9C323C4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A9CE8C4C();
  __asm { BR              X9 }
}

uint64_t sub_1A9C32408()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C32490()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A9C324BC + 4 * byte_1A9CF19F4[*v0]))();
}

void sub_1A9C324BC(_QWORD *a1@<X8>)
{
  *a1 = 0x7065656C536D6572;
  a1[1] = 0xE800000000000000;
}

void sub_1A9C324D8(_QWORD *a1@<X8>)
{
  *a1 = 0x65656C5365726F63;
  a1[1] = 0xE900000000000070;
}

void sub_1A9C32504(_QWORD *a1@<X8>)
{
  *a1 = 0x6669636570736E75;
  a1[1] = 0xEB00000000646569;
}

id sub_1A9C32528(char a1)
{
  return objc_msgSend((id)objc_opt_self(), *off_1E55D8728[a1]);
}

uint64_t SleepStageSegment.sleepStage.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SleepStageSegment.duration.getter()
{
  type metadata accessor for SleepStageSegment(0);
  return sub_1A9CE5F4C();
}

uint64_t SleepStageSegment.id.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_1A9CE62E8();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepStageSegment(0);
  sub_1A9CE5F34();
  sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, v1, MEMORY[0x1E0CB08F0]);
  v6 = sub_1A9CE8B74();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  return v6;
}

uint64_t SleepStageSegment.init(sleepStage:interval:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = &a3[*(int *)(type metadata accessor for SleepStageSegment(0) + 20)];
  v5 = sub_1A9CE5F64();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

void static SleepStageSegment.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A9C32714@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A9C3278C + 4 * byte_1A9CF19FE[a1]))(0x7065656C536D6572);
}

uint64_t sub_1A9C3278C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7065656C536D6572 && v1 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease_n();
LABEL_5:
    type metadata accessor for SleepStageSegment(0);
    return sub_1A9CE5EF8();
  }
  v2 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    goto LABEL_5;
  return 0;
}

void SleepStageSegment.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C328D4()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  type metadata accessor for SleepStageSegment(0);
  sub_1A9CE5F64();
  sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  return sub_1A9CE8250();
}

uint64_t sub_1A9C3299C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61767265746E69;
  else
    return 0x6174537065656C73;
}

uint64_t sub_1A9C329DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A9C382C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A9C32A00()
{
  return 0;
}

void sub_1A9C32A0C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1A9C32A18()
{
  sub_1A9C366E4();
  return sub_1A9CE8D30();
}

uint64_t sub_1A9C32A40()
{
  sub_1A9C366E4();
  return sub_1A9CE8D3C();
}

uint64_t SleepStageSegment.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1A9C38680(0, &qword_1ED262950, (uint64_t (*)(void))sub_1A9C366E4, (uint64_t)&type metadata for SleepStageSegment.CodingKeys, MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C366E4();
  sub_1A9CE8C94();
  v15 = *v3;
  v14 = 0;
  sub_1A9C36728();
  sub_1A9CE8B68();
  if (!v2)
  {
    type metadata accessor for SleepStageSegment(0);
    v13 = 1;
    sub_1A9CE5F64();
    sub_1A9B92B9C(&qword_1ED2627B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5E8]);
    sub_1A9CE8B68();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void SleepStageSegment.hashValue.getter()
{
  sub_1A9CE8C4C();
  __asm { BR              X10 }
}

uint64_t sub_1A9C32C38()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  type metadata accessor for SleepStageSegment(0);
  sub_1A9CE5F64();
  sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_1A9CE8250();
  return sub_1A9CE8C7C();
}

uint64_t SleepStageSegment.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v20 = a2;
  v22 = sub_1A9CE5F64();
  v19 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v3);
  v21 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C38680(0, &qword_1ED263308, (uint64_t (*)(void))sub_1A9C366E4, (uint64_t)&type metadata for SleepStageSegment.CodingKeys, MEMORY[0x1E0DED048]);
  v23 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - v8;
  v10 = type metadata accessor for SleepStageSegment(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C366E4();
  v14 = v24;
  sub_1A9CE8C88();
  if (!v14)
  {
    v24 = v10;
    v15 = v6;
    v16 = v21;
    v17 = v22;
    v26 = 0;
    sub_1A9C3676C();
    sub_1A9CE8B44();
    *v13 = v27;
    v25 = 1;
    sub_1A9B92B9C(&qword_1ED262DD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE600]);
    sub_1A9CE8B44();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v23);
    (*(void (**)(_BYTE *, char *, uint64_t))(v19 + 32))(&v13[*(int *)(v24 + 20)], v16, v17);
    sub_1A9BA0D6C((uint64_t)v13, v20, type metadata accessor for SleepStageSegment);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_1A9C32F68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepStageSegment.init(from:)(a1, a2);
}

uint64_t sub_1A9C32F7C(_QWORD *a1)
{
  return SleepStageSegment.encode(to:)(a1);
}

uint64_t sub_1A9C32F90(char *a1)
{
  char v1;

  sub_1A9C31084(*a1);
  if ((v1 & 1) != 0)
    return sub_1A9CE5EF8();
  else
    return 0;
}

void sub_1A9C32FF0()
{
  __asm { BR              X10 }
}

uint64_t sub_1A9C33034()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  sub_1A9CE5F64();
  sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  return sub_1A9CE8250();
}

void sub_1A9C330F4()
{
  sub_1A9CE8C4C();
  __asm { BR              X10 }
}

uint64_t sub_1A9C33140()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  sub_1A9CE5F64();
  sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_1A9CE8250();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C3320C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = sub_1A9CE62E8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE5F34();
  sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, v3, MEMORY[0x1E0CB08F0]);
  v8 = sub_1A9CE8B74();
  v10 = v9;
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  *a1 = v8;
  a1[1] = v10;
  return result;
}

uint64_t sub_1A9C332DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a2;
  sub_1A9C367C4();
  v23 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v22 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C38680(0, &qword_1ED262B40, (uint64_t (*)(void))sub_1A9C3863C, (uint64_t)&type metadata for SleepMetricsWrapper.CodingKeys, MEMORY[0x1E0DED048]);
  v24 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for SleepMetricsWrapper(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C3863C();
  v16 = v25;
  sub_1A9CE8C88();
  if (!v16)
  {
    v17 = (uint64_t)v15;
    sub_1A9B92B9C(&qword_1ED262B20, (uint64_t (*)(uint64_t))sub_1A9C367C4, MEMORY[0x1E0CB4370]);
    v19 = v22;
    v18 = v23;
    sub_1A9CE8B44();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v17, v19, v18);
    sub_1A9BA0D6C(v17, v21, type metadata accessor for SleepMetricsWrapper);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

unint64_t sub_1A9C334D4()
{
  return 0xD000000000000013;
}

uint64_t sub_1A9C334F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A9C383C0(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_1A9C33518(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A9C33524()
{
  sub_1A9C3863C();
  return sub_1A9CE8D30();
}

uint64_t sub_1A9C3354C()
{
  sub_1A9C3863C();
  return sub_1A9CE8D3C();
}

uint64_t sub_1A9C33574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A9C332DC(a1, a2);
}

uint64_t sub_1A9C33588(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1A9C38680(0, qword_1ED262B58, (uint64_t (*)(void))sub_1A9C3863C, (uint64_t)&type metadata for SleepMetricsWrapper.CodingKeys, MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C3863C();
  sub_1A9CE8C94();
  sub_1A9C367C4();
  sub_1A9B92B9C(&qword_1ED262B48, (uint64_t (*)(uint64_t))sub_1A9C367C4, MEMORY[0x1E0CB4358]);
  sub_1A9CE8B68();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1A9C336B8()
{
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2633D0);
  sub_1A9C36928(&qword_1ED262B38, MEMORY[0x1E0DEFD00]);
  return sub_1A9CE80D0();
}

uint64_t sub_1A9C33720()
{
  sub_1A9CE8C4C();
  sub_1A9C367C4();
  sub_1A9C368B8();
  sub_1A9CE8250();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C33774()
{
  sub_1A9C367C4();
  sub_1A9C368B8();
  return sub_1A9CE8250();
}

uint64_t sub_1A9C337B4()
{
  sub_1A9CE8C4C();
  sub_1A9C367C4();
  sub_1A9C368B8();
  sub_1A9CE8250();
  return sub_1A9CE8C7C();
}

uint64_t SleepStagesModel.sleepStageSegments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SleepStagesModel.sleepMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v9 - v3;
  v5 = type metadata accessor for SleepStagesModel(0);
  sub_1A9C38720(v0 + *(int *)(v5 + 20), (uint64_t)v4, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  v6 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1A9B93BDC((uint64_t)v4, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
    return 0;
  }
  else
  {
    sub_1A9C367C4();
    v7 = sub_1A9CE80C4();
    sub_1A9B97190((uint64_t)v4, type metadata accessor for SleepMetricsWrapper);
  }
  return v7;
}

uint64_t SleepStagesModel.sleepInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepStagesModel(0);
  return sub_1A9C38720(v1 + *(int *)(v3 + 24), a1, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
}

double SleepStagesModel.totalDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SleepStagesModel(0) + 28));
}

void SleepStagesModel.init(sleepStageSegments:sleepMetrics:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  int *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;

  v3 = a2;
  *a3 = a1;
  if (a2)
  {
    v6 = (int *)type metadata accessor for SleepStagesModel(0);
    v7 = (char *)a3 + v6[5];
    sub_1A9B94A18(0, (unint64_t *)&qword_1ED2633D0);
    swift_bridgeObjectRetain();
    v3 = v3;
    sub_1A9CE80E8();
    v8 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    v6 = (int *)type metadata accessor for SleepStagesModel(0);
    v9 = (char *)a3 + v6[5];
    v10 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    swift_bridgeObjectRetain();
  }
  type metadata accessor for SleepStagesModel(0);
  sub_1A9BA05C4(a1, (unint64_t)a3 + v6[6]);
  v11 = sub_1A9BA0B14(a1);
  swift_bridgeObjectRelease();

  *(double *)((char *)a3 + v6[7]) = v11;
}

uint64_t Collection<>.mergedIntervals()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t result;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t, uint64_t);
  void (*v58)(char *, unint64_t, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;

  v65 = a3;
  v7 = sub_1A9CE62E8();
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v62 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v11);
  v61 = (char *)&v53 - v12;
  sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v53 - v15;
  v17 = sub_1A9CE5F64();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v60 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v59 = (char *)&v53 - v24;
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v63 = (char *)&v53 - v27;
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v53 - v29;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = sub_1A9CE8880();
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v53 - v34;
  v36 = sub_1A9CE852C();
  if (v36 < 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a4, 1, 1, v17);
  v55 = a4;
  v64 = (_QWORD *)AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v36, v37);
  *(&v53 - 4) = a1;
  *(&v53 - 3) = a2;
  *(&v53 - 2) = v65;
  v39 = sub_1A9C315FC((void (*)(char *, char *))sub_1A9C36828, (uint64_t)(&v53 - 6), a1, v17, MEMORY[0x1E0DEDCE8], a2, MEMORY[0x1E0DEDD18], v38);
  v40 = v64;
  sub_1A9CE8574();
  v41 = *(v40 - 1);
  result = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v41 + 48))(v35, 1, v40);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD *))(v65 + 8))(v40);
    (*(void (**)(char *, _QWORD *))(v41 + 8))(v35, v40);
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    v54 = v30;
    v58 = v43;
    v43(v63, (unint64_t)v30, v17);
    v44 = *(_QWORD *)(v39 + 16);
    v53 = v39;
    if (v44)
    {
      v45 = v39 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v56 = *(_QWORD *)(v18 + 72);
      swift_bridgeObjectRetain();
      v47 = v59;
      v46 = v60;
      v48 = v63;
      while (1)
      {
        v58(v16, v45, v17);
        v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
        v49(v16, 0, 1, v17);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
          break;
        v57 = v49;
        v64 = *(_QWORD **)(v18 + 32);
        ((void (*)(char *, char *, uint64_t))v64)(v47, v16, v17);
        v65 = v44;
        sub_1A9CE5F34();
        sub_1A9CE5F10();
        sub_1A9CE5F1C();
        v50 = *(void (**)(char *, uint64_t))(v18 + 8);
        v50(v47, v17);
        v50(v48, v17);
        v51 = v65;
        ((void (*)(char *, char *, uint64_t))v64)(v48, v46, v17);
        v45 += v56;
        v44 = v51 - 1;
        if (!v44)
          goto LABEL_10;
      }
    }
    else
    {
      v57 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
      swift_bridgeObjectRetain();
LABEL_10:
      v49 = v57;
      v57(v16, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
    v52 = v55;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v55, v63, v17);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v54, v17);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49)(v52, 0, 1, v17);
  }
  return result;
}

double Collection<>.totalDuration()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  _QWORD v18[6];

  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v8 = sub_1A9C315FC((void (*)(char *, char *))sub_1A9C36898, (uint64_t)v18, a1, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEDCE8], a2, MEMORY[0x1E0DEDD18], a8);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v11 = 0.0;
    goto LABEL_10;
  }
  if (v9 == 1)
  {
    v10 = 0;
    v11 = 0.0;
LABEL_8:
    v14 = v9 - v10;
    v15 = (double *)(v8 + 8 * v10 + 32);
    do
    {
      v16 = *v15++;
      v11 = v11 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
  v12 = (double *)(v8 + 40);
  v11 = 0.0;
  v13 = v9 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v11 = v11 + *(v12 - 1) + *v12;
    v12 += 2;
    v13 -= 2;
  }
  while (v13);
  if (v9 != v10)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t SleepStagesModel.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  uint64_t v29;

  v2 = v1;
  v4 = sub_1A9CE5F64();
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v28 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED263400, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2633F0, v18, v7);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v28 - v21;
  v23 = *v2;
  swift_bridgeObjectRetain();
  sub_1A9BFF434(a1, v23);
  swift_bridgeObjectRelease();
  v24 = type metadata accessor for SleepStagesModel(0);
  sub_1A9C38720((uint64_t)v2 + *(int *)(v24 + 20), (uint64_t)v22, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 1, v13) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    sub_1A9BA0D6C((uint64_t)v22, (uint64_t)v17, type metadata accessor for SleepMetricsWrapper);
    sub_1A9CE8C64();
    sub_1A9C367C4();
    sub_1A9C368B8();
    sub_1A9CE8250();
    sub_1A9B97190((uint64_t)v17, type metadata accessor for SleepMetricsWrapper);
  }
  sub_1A9C38720((uint64_t)v2 + *(int *)(v24 + 24), (uint64_t)v12, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v25 = v29;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v4) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    v26 = v28;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v12, v4);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v4);
  }
  return sub_1A9CE8C70();
}

uint64_t sub_1A9C34314()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A9C34348 + 4 * byte_1A9CF1A17[*v0]))(0xD000000000000012, 0x80000001A9CFC2B0);
}

uint64_t sub_1A9C34348(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1A9C34360()
{
  return 0x746E497065656C73;
}

uint64_t sub_1A9C34384()
{
  return 0x7275446C61746F74;
}

uint64_t sub_1A9C343A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A9C38444(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A9C343CC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1A9C343D8()
{
  sub_1A9C36978();
  return sub_1A9CE8D30();
}

uint64_t sub_1A9C34400()
{
  sub_1A9C36978();
  return sub_1A9CE8D3C();
}

uint64_t SleepStagesModel.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];
  uint64_t v13;

  v3 = v1;
  sub_1A9C38680(0, &qword_1ED262948, (uint64_t (*)(void))sub_1A9C36978, (uint64_t)&type metadata for SleepStagesModel.CodingKeys, MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C36978();
  sub_1A9CE8C94();
  v13 = *v3;
  v12[15] = 0;
  sub_1A9B92F34(0, &qword_1ED263498, type metadata accessor for SleepStageSegment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C369BC(&qword_1ED2628E8, qword_1ED2627C0, (uint64_t)&protocol conformance descriptor for SleepStageSegment, MEMORY[0x1E0DEAF10]);
  sub_1A9CE8B68();
  if (!v2)
  {
    type metadata accessor for SleepStagesModel(0);
    v12[14] = 1;
    type metadata accessor for SleepMetricsWrapper(0);
    sub_1A9B92B9C((unint64_t *)&unk_1ED262A50, type metadata accessor for SleepMetricsWrapper, (uint64_t)&unk_1A9CF2034);
    sub_1A9CE8B50();
    v12[13] = 2;
    sub_1A9CE5F64();
    sub_1A9B92B9C(&qword_1ED2627B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5E8]);
    sub_1A9CE8B50();
    v12[12] = 3;
    sub_1A9CE8B5C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t SleepStagesModel.hashValue.getter()
{
  _BYTE v1[72];

  sub_1A9CE8C4C();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1A9CE8C7C();
}

uint64_t SleepStagesModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;

  v27 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v28 = (char *)&v27 - v6;
  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v3);
  MEMORY[0x1E0C80A78](v7, v8);
  v29 = (char *)&v27 - v9;
  sub_1A9C38680(0, &qword_1ED263300, (uint64_t (*)(void))sub_1A9C36978, (uint64_t)&type metadata for SleepStagesModel.CodingKeys, MEMORY[0x1E0DED048]);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - v12;
  v14 = (int *)type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_1A9C36978();
  v30 = v13;
  v18 = (uint64_t)v32;
  sub_1A9CE8C88();
  if (v18)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v19 = (uint64_t)v29;
  v32 = a1;
  v20 = v17;
  sub_1A9B92F34(0, &qword_1ED263498, type metadata accessor for SleepStageSegment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v36 = 0;
  sub_1A9C369BC(&qword_1ED2632A0, &qword_1ED262EC0, (uint64_t)&protocol conformance descriptor for SleepStageSegment, MEMORY[0x1E0DEAF40]);
  v21 = v31;
  v22 = v30;
  sub_1A9CE8B44();
  *v20 = v37;
  type metadata accessor for SleepMetricsWrapper(0);
  v35 = 1;
  sub_1A9B92B9C(&qword_1ED262A38, type metadata accessor for SleepMetricsWrapper, (uint64_t)&unk_1A9CF200C);
  sub_1A9CE8B2C();
  sub_1A9C36A54(v19, (uint64_t)v20 + v14[5], &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  sub_1A9CE5F64();
  v34 = 2;
  sub_1A9B92B9C(&qword_1ED262DD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE600]);
  v23 = (uint64_t)v28;
  sub_1A9CE8B2C();
  sub_1A9C36A54(v23, (uint64_t)v20 + v14[6], &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v33 = 3;
  sub_1A9CE8B38();
  v25 = v24;
  MEMORY[8](v22, v21);
  *(_QWORD *)((char *)v20 + v14[7]) = v25;
  sub_1A9BA6F90((uint64_t)v20, v27, type metadata accessor for SleepStagesModel);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  return sub_1A9B97190((uint64_t)v20, type metadata accessor for SleepStagesModel);
}

uint64_t sub_1A9C34B30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepStagesModel.init(from:)(a1, a2);
}

uint64_t sub_1A9C34B44(_QWORD *a1)
{
  return SleepStagesModel.encode(to:)(a1);
}

uint64_t sub_1A9C34B5C()
{
  _BYTE v1[72];

  sub_1A9CE8C4C();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C34B9C()
{
  _BYTE v1[72];

  sub_1A9CE8C4C();
  SleepStagesModel.hash(into:)((uint64_t)v1);
  return sub_1A9CE8C7C();
}

void sub_1A9C34BD4(char a1)
{
  __asm { BR              X10 }
}

void sub_1A9C34C00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  id v15;
  void *v16;

  v15 = objc_msgSend(v14, sel_averageAwakeDuration);
  v16 = v15;
  if (v15)
  {
    objc_msgSend(v15, sel__value);

  }
}

void HKSleepDaySummary.sleepStagesModel.getter(unint64_t *a1@<X8>)
{
  void *v1;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  int *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double v14;

  v3 = sub_1A9C34EA0();
  v4 = (void *)objc_opt_self();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A9CEF8A0;
  *(_QWORD *)(v5 + 32) = v1;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED262B50);
  v6 = v1;
  v7 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v4, sel_sleepMetricsForDaySummaries_, v7);

  *a1 = v3;
  v9 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = (char *)a1 + v9[5];
  if (v8)
  {
    sub_1A9B94A18(0, (unint64_t *)&qword_1ED2633D0);
    swift_bridgeObjectRetain();
    v11 = v8;
    sub_1A9CE80E8();
    v12 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 0, 1, v12);
  }
  else
  {
    v13 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
    swift_bridgeObjectRetain();
  }
  sub_1A9BA05C4(v3, (unint64_t)a1 + v9[6]);
  v14 = sub_1A9BA0B14(v3);
  swift_bridgeObjectRelease();

  *(double *)((char *)a1 + v9[7]) = v14;
}

unint64_t sub_1A9C34EA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *i;
  unint64_t v34;
  unint64_t v35;
  id v36;
  void *v37;
  BOOL v38;
  unint64_t v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;

  v1 = sub_1A9CE62E8();
  v67 = *(_QWORD *)(v1 - 8);
  v68 = v1;
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v72 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v5);
  v71 = (char *)&v57 - v6;
  v7 = type metadata accessor for SleepStageSegment(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v80 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v70 = (char *)&v57 - v14;
  MEMORY[0x1E0C80A78](v13, v15);
  v73 = (uint64_t)&v57 - v16;
  v76 = sub_1A9CE5F64();
  v81 = *(_QWORD *)(v76 - 8);
  v18 = MEMORY[0x1E0C80A78](v76, v17);
  v65 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v20);
  v83 = (char *)&v57 - v21;
  sub_1A9B92F34(0, &qword_1ED263338, type metadata accessor for SleepStageSegment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v27);
  v29 = (char *)&v57 - v28;
  v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v75((char *)&v57 - v28, 1, 1, v7);
  v30 = objc_msgSend(v0, sel_periods);
  sub_1A9B94A18(0, &qword_1ED263340);
  v31 = sub_1A9CE83DC();

  v59 = v31;
  if (v31 >> 62)
    goto LABEL_38;
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = v70; v32; i = v70)
  {
    v34 = 0;
    v61 = v59 & 0xC000000000000001;
    v58 = v59 & 0xFFFFFFFFFFFFFF8;
    v35 = MEMORY[0x1E0DEE9D8];
    v57 = v59 + 32;
    v74 = v26;
    v60 = v32;
    v69 = v8;
    v66 = v29;
    v64 = v7;
    while (1)
    {
      if (v61)
      {
        v36 = (id)MEMORY[0x1AF41F600](v34, v59);
      }
      else
      {
        if (v34 >= *(_QWORD *)(v58 + 16))
          goto LABEL_37;
        v36 = *(id *)(v57 + 8 * v34);
      }
      v37 = v36;
      v38 = __OFADD__(v34, 1);
      v39 = v34 + 1;
      if (v38)
        break;
      v40 = objc_msgSend(v36, sel_segments);
      sub_1A9B94A18(0, &qword_1ED263348);
      v41 = sub_1A9CE83DC();

      v42 = v41;
      v78 = v41;
      v63 = v39;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        v42 = v78;
        v43 = sub_1A9CE8AC0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v62 = v37;
      if (v43)
      {
        v44 = v43;
        if (v43 < 1)
          goto LABEL_36;
        v45 = 0;
        v79 = v42 & 0xC000000000000001;
        v77 = v43;
        do
        {
          if (v79)
            v46 = (id)MEMORY[0x1AF41F600](v45, v42);
          else
            v46 = *(id *)(v42 + 8 * v45 + 32);
          v47 = v46;
          v48 = objc_msgSend(v46, sel_category, v57);
          v82 = v35;
          v35 = 0;
          switch((unint64_t)v48)
          {
            case 0uLL:

              v35 = v82;
              break;
            case 1uLL:
              LOBYTE(v35) = 4;
              goto LABEL_26;
            case 2uLL:
              goto LABEL_26;
            case 3uLL:
              LOBYTE(v35) = 2;
              goto LABEL_26;
            case 4uLL:
              LOBYTE(v35) = 3;
              goto LABEL_26;
            case 5uLL:
              LOBYTE(v35) = 1;
LABEL_26:
              v49 = objc_msgSend(v47, sel_dateInterval);
              sub_1A9CE5F04();

              sub_1A9C38720((uint64_t)v29, (uint64_t)v26, &qword_1ED263338, type metadata accessor for SleepStageSegment);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v26, 1, v7) != 1)
              {
                v51 = (uint64_t)v26;
                v52 = v73;
                sub_1A9BA0D6C(v51, v73, type metadata accessor for SleepStageSegment);
                __asm { BR              X9 }
              }
              sub_1A9B93BDC((uint64_t)v26, &qword_1ED263338, type metadata accessor for SleepStageSegment);
              v50 = v76;
              (*(void (**)(_BYTE *, char *, uint64_t))(v81 + 16))(&i[*(int *)(v7 + 20)], v83, v76);
              *i = v35;
              sub_1A9BA6F90((uint64_t)i, v80, type metadata accessor for SleepStageSegment);
              v35 = v82;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                v35 = sub_1A9CAE200(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
              v55 = *(_QWORD *)(v35 + 16);
              v54 = *(_QWORD *)(v35 + 24);
              if (v55 >= v54 >> 1)
                v35 = sub_1A9CAE200(v54 > 1, v55 + 1, 1, v35);
              *(_QWORD *)(v35 + 16) = v55 + 1;
              sub_1A9BA0D6C(v80, v35+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v55, type metadata accessor for SleepStageSegment);

              (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v50);
              sub_1A9B93BDC((uint64_t)v29, &qword_1ED263338, type metadata accessor for SleepStageSegment);
              sub_1A9BA0D6C((uint64_t)i, (uint64_t)v29, type metadata accessor for SleepStageSegment);
              v75(v29, 0, 1, v7);
              v26 = v74;
              v44 = v77;
              v42 = v78;
              break;
            default:

              break;
          }
          ++v45;
        }
        while (v44 != v45);
      }

      swift_bridgeObjectRelease();
      v34 = v63;
      if (v63 == v60)
        goto LABEL_40;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    v32 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  v35 = MEMORY[0x1E0DEE9D8];
LABEL_40:
  swift_bridgeObjectRelease();
  sub_1A9B93BDC((uint64_t)v29, &qword_1ED263338, type metadata accessor for SleepStageSegment);
  return v35;
}

uint64_t _s13SleepHealthUI0A12StageSegmentV8interval10Foundation12DateIntervalVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepStageSegment(0) + 20);
  v4 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

unint64_t HKSleepDaySummary.sleepPeriodRange.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  id v31;
  void *v32;
  id v33;
  void (*v34)(char *, uint64_t);
  id v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t result;
  id v39;
  void *v40;
  id v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, unint64_t, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  v53 = a1;
  v52 = sub_1A9CE5F64();
  v3 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (unint64_t)&v46 - v13;
  v15 = sub_1A9CE62E8();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v50 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v49 = (char *)&v46 - v22;
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v48 = (char *)&v46 - v25;
  MEMORY[0x1E0C80A78](v24, v26);
  v51 = (char *)&v46 - v27;
  v28 = objc_msgSend(v2, sel_periods);
  sub_1A9B94A18(0, &qword_1ED263340);
  v29 = sub_1A9CE83DC();

  if (!(v29 >> 62))
  {
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v30)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    v11 = (char *)v14;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v30 = (unsigned int (*)(char *, uint64_t, uint64_t))sub_1A9CE8AC0();
  swift_bridgeObjectRelease();
  if (!v30)
    goto LABEL_18;
LABEL_3:
  if ((v29 & 0xC000000000000001) != 0)
  {
    v31 = (id)MEMORY[0x1AF41F600](0, v29);
  }
  else
  {
    if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    v31 = *(id *)(v29 + 32);
  }
  v32 = v31;
  swift_bridgeObjectRelease();
  v33 = objc_msgSend(v32, sel_dateInterval);

  sub_1A9CE5F04();
  sub_1A9CE5F34();
  v34 = *(void (**)(char *, uint64_t))(v3 + 8);
  v34(v6, v52);
  v3 = *(_QWORD *)(v16 + 56);
  ((void (*)(unint64_t, _QWORD, uint64_t, uint64_t))v3)(v14, 0, 1, v15);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v30((char *)v14, 1, v15) != 1)
  {
    v46 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 32);
    v47 = v34;
    v46(v51, v14, v15);
    v35 = objc_msgSend(v2, sel_periods);
    v14 = sub_1A9CE83DC();

    if (!(v14 >> 62))
    {
      v36 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      v37 = v47;
      if (v36)
        goto LABEL_10;
      goto LABEL_22;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    v36 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    v37 = v47;
    if (v36)
    {
LABEL_10:
      result = v36 - 1;
      if (__OFSUB__(v36, 1))
      {
        __break(1u);
      }
      else if ((v14 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v39 = *(id *)(v14 + 8 * result + 32);
          goto LABEL_15;
        }
        __break(1u);
        return result;
      }
      v39 = (id)MEMORY[0x1AF41F600](result, v14);
LABEL_15:
      v40 = v39;
      swift_bridgeObjectRelease();
      v41 = objc_msgSend(v40, sel_dateInterval);

      sub_1A9CE5F04();
      sub_1A9CE5F10();
      v37(v6, v52);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v3)(v11, 0, 1, v15);
      if (v30(v11, 1, v15) != 1)
      {
        v42 = v48;
        v46(v48, (unint64_t)v11, v15);
        v43 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
        v44 = v51;
        v43(v49, v51, v15);
        v43(v50, v42, v15);
        sub_1A9CE5F1C();
        v45 = *(void (**)(char *, uint64_t))(v16 + 8);
        v45(v42, v15);
        return ((uint64_t (*)(char *, uint64_t))v45)(v44, v15);
      }
      goto LABEL_23;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v3)(v11, 1, 1, v15);
LABEL_23:
    (*(void (**)(char *, uint64_t))(v16 + 8))(v51, v15);
    goto LABEL_24;
  }
  v11 = (char *)v14;
LABEL_24:
  sub_1A9B93BDC((uint64_t)v11, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  return sub_1A9CE5F58();
}

uint64_t sub_1A9C35DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1A9C35E38@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v4 = sub_1A9CE5F64();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(uint64_t, uint64_t))(a1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9(AssociatedTypeWitness, a1);
  sub_1A9CE5F4C();
  v12 = v11;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v12;
  return result;
}

BOOL _s13SleepHealthUI0A11StagesModelV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  uint64_t (*v76)(uint64_t);
  char v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;

  v92 = a2;
  v3 = sub_1A9CE5F64();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
  v87 = v3;
  v85 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v91 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C38778(0, (unint64_t *)&unk_1ED2625D0, &qword_1ED263400, v4);
  v90 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v86 = (uint64_t)&v79 - v9;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED263400, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v84 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v79 - v17;
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v79 - v20;
  v22 = type metadata accessor for SleepMetricsWrapper(0);
  v88 = *(_QWORD *)(v22 - 8);
  v89 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C38778(0, &qword_1ED262A78, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v79 - v29;
  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v10);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v33, v36);
  v39 = (char *)&v79 - v38;
  MEMORY[0x1E0C80A78](v37, v40);
  v42 = (char *)&v79 - v41;
  v43 = v92;
  if ((sub_1A9BFBEAC(*a1, *v92) & 1) == 0)
    return 0;
  v81 = v35;
  v82 = v21;
  v79 = v25;
  v83 = v18;
  v44 = type metadata accessor for SleepStagesModel(0);
  v45 = *(int *)(v44 + 20);
  v80 = a1;
  sub_1A9C38720((uint64_t)a1 + v45, (uint64_t)v42, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  sub_1A9C38720((uint64_t)v43 + *(int *)(v44 + 20), (uint64_t)v39, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  v46 = (uint64_t)&v30[*(int *)(v27 + 48)];
  sub_1A9C38720((uint64_t)v42, (uint64_t)v30, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  sub_1A9C38720((uint64_t)v39, v46, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  v47 = v89;
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v49 = (uint64_t)v39;
  if (v48((uint64_t)v30, 1, v89) != 1)
  {
    v54 = (uint64_t)v81;
    sub_1A9C38720((uint64_t)v30, (uint64_t)v81, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
    v55 = v48(v46, 1, v47);
    v51 = v90;
    v52 = v91;
    v53 = (uint64_t)v83;
    if (v55 != 1)
    {
      v89 = v44;
      v60 = (uint64_t)v79;
      sub_1A9BA0D6C(v46, (uint64_t)v79, type metadata accessor for SleepMetricsWrapper);
      sub_1A9B94A18(0, (unint64_t *)&qword_1ED2633D0);
      sub_1A9C36928(&qword_1ED262B38, MEMORY[0x1E0DEFD00]);
      v61 = sub_1A9CE80D0();
      sub_1A9B97190(v60, type metadata accessor for SleepMetricsWrapper);
      sub_1A9B93BDC(v49, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
      sub_1A9B93BDC((uint64_t)v42, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
      sub_1A9B97190(v54, type metadata accessor for SleepMetricsWrapper);
      v44 = v89;
      sub_1A9B93BDC((uint64_t)v30, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
      if ((v61 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
    sub_1A9B93BDC(v49, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
    sub_1A9B93BDC((uint64_t)v42, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
    sub_1A9B97190(v54, type metadata accessor for SleepMetricsWrapper);
LABEL_7:
    v56 = &qword_1ED262A78;
    v57 = &qword_1ED2633F0;
    v58 = type metadata accessor for SleepMetricsWrapper;
    v59 = (uint64_t)v30;
LABEL_15:
    sub_1A9C387E4(v59, v56, v57, v58);
    return 0;
  }
  sub_1A9B93BDC((uint64_t)v39, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  sub_1A9B93BDC((uint64_t)v42, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
  v50 = v48(v46, 1, v47);
  v51 = v90;
  v52 = v91;
  v53 = (uint64_t)v83;
  if (v50 != 1)
    goto LABEL_7;
  sub_1A9B93BDC((uint64_t)v30, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper);
LABEL_9:
  v62 = v80;
  v63 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
  v64 = (uint64_t)v82;
  sub_1A9C38720((uint64_t)v80 + *(int *)(v44 + 24), (uint64_t)v82, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v89 = v44;
  v65 = v92;
  sub_1A9C38720((uint64_t)v92 + *(int *)(v44 + 24), v53, &qword_1ED263400, v63);
  v66 = *(int *)(v51 + 48);
  v67 = v86;
  v68 = v86 + v66;
  sub_1A9C38720(v64, v86, &qword_1ED263400, v63);
  sub_1A9C38720(v53, v68, &qword_1ED263400, v63);
  v69 = v85;
  v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  v71 = v87;
  if (v70(v67, 1, v87) == 1)
  {
    v72 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    sub_1A9B93BDC(v53, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    sub_1A9B93BDC(v64, &qword_1ED263400, v72);
    if (v70(v68, 1, v71) == 1)
    {
      sub_1A9B93BDC(v67, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      return *(double *)((char *)v62 + *(int *)(v89 + 28)) == *(double *)((char *)v65 + *(int *)(v89 + 28));
    }
    goto LABEL_14;
  }
  v73 = v84;
  sub_1A9C38720(v67, v84, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  if (v70(v68, 1, v71) == 1)
  {
    v74 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    sub_1A9B93BDC((uint64_t)v83, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    sub_1A9B93BDC((uint64_t)v82, &qword_1ED263400, v74);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v73, v71);
LABEL_14:
    v56 = (unint64_t *)&unk_1ED2625D0;
    v57 = &qword_1ED263400;
    v58 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    v59 = v67;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v52, v68, v71);
  v76 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
  sub_1A9B92B9C(&qword_1ED262DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F8]);
  v77 = sub_1A9CE82A4();
  v78 = *(void (**)(char *, uint64_t))(v69 + 8);
  v78(v52, v71);
  sub_1A9B93BDC((uint64_t)v83, &qword_1ED263400, v76);
  sub_1A9B93BDC((uint64_t)v82, &qword_1ED263400, v76);
  v78((char *)v73, v71);
  sub_1A9B93BDC(v67, &qword_1ED263400, v76);
  if ((v77 & 1) != 0)
    return *(double *)((char *)v62 + *(int *)(v89 + 28)) == *(double *)((char *)v65 + *(int *)(v89 + 28));
  return 0;
}

uint64_t _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_1A9CE8B20();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t type metadata accessor for SleepStageSegment(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1ED263408);
}

unint64_t sub_1A9C366E4()
{
  unint64_t result;

  result = qword_1ED262E98;
  if (!qword_1ED262E98)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF20AC, &type metadata for SleepStageSegment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED262E98);
  }
  return result;
}

unint64_t sub_1A9C36728()
{
  unint64_t result;

  result = qword_1ED262880;
  if (!qword_1ED262880)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStage, &type metadata for SleepStage);
    atomic_store(result, (unint64_t *)&qword_1ED262880);
  }
  return result;
}

unint64_t sub_1A9C3676C()
{
  unint64_t result;

  result = qword_1ED262EF8;
  if (!qword_1ED262EF8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStage, &type metadata for SleepStage);
    atomic_store(result, (unint64_t *)&qword_1ED262EF8);
  }
  return result;
}

uint64_t type metadata accessor for SleepMetricsWrapper(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, (uint64_t *)&unk_1ED2633C0);
}

void sub_1A9C367C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2633F8)
  {
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2633D0);
    v0 = sub_1A9CE80DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2633F8);
  }
}

uint64_t sub_1A9C36828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v2(AssociatedTypeWitness, v1);
}

uint64_t sub_1A9C36898@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C35E38(*(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_1A9C368B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED262B18;
  if (!qword_1ED262B18)
  {
    sub_1A9C367C4();
    v2 = v1;
    v3 = sub_1A9C36928(&qword_1ED262B30, MEMORY[0x1E0DEFCF8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CB4360], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED262B18);
  }
  return result;
}

uint64_t sub_1A9C36928(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A9B94A18(255, (unint64_t *)&qword_1ED2633D0);
    result = MEMORY[0x1AF420284](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9C36978()
{
  unint64_t result;

  result = qword_1ED262DF8;
  if (!qword_1ED262DF8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF205C, &type metadata for SleepStagesModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED262DF8);
  }
  return result;
}

uint64_t sub_1A9C369BC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1A9B92F34(255, &qword_1ED263498, type metadata accessor for SleepStageSegment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v10 = v9;
    v11 = sub_1A9B92B9C(a2, type metadata accessor for SleepStageSegment, a3);
    result = MEMORY[0x1AF420284](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9C36A54(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1A9B92F34(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t sub_1A9C36AB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB474C8;
  if (!qword_1EEB474C8)
  {
    sub_1A9B94CA0(255, &qword_1EEB43B58, (uint64_t)&type metadata for SleepStage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB474C8);
  }
  return result;
}

unint64_t sub_1A9C36B14()
{
  unint64_t result;

  result = qword_1EEB474D0;
  if (!qword_1EEB474D0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStage, &type metadata for SleepStage);
    atomic_store(result, (unint64_t *)&qword_1EEB474D0);
  }
  return result;
}

uint64_t sub_1A9C36B58()
{
  return sub_1A9B92B9C(&qword_1ED262A70, type metadata accessor for SleepStageSegment, (uint64_t)&protocol conformance descriptor for SleepStageSegment);
}

uint64_t sub_1A9C36B84()
{
  return sub_1A9B92B9C(&qword_1ED2625E8, type metadata accessor for SleepStagesModel, (uint64_t)&protocol conformance descriptor for SleepStagesModel);
}

uint64_t storeEnumTagSinglePayload for SleepStage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A9C36BFC + 4 * byte_1A9CF1A20[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A9C36C30 + 4 * byte_1A9CF1A1B[v4]))();
}

uint64_t sub_1A9C36C30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C36C38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C36C40);
  return result;
}

uint64_t sub_1A9C36C4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C36C54);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A9C36C58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C36C60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepStage()
{
  return &type metadata for SleepStage;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStageSegment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1A9CE5F64();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SleepStageSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for SleepStageSegment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1A9CE5F64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for SleepStageSegment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1A9CE5F64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for SleepStageSegment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1A9CE5F64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for SleepStageSegment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1A9CE5F64();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStageSegment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C36EB8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 251)
  {
    v4 = *a1;
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = sub_1A9CE5F64();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStageSegment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_1A9C36F38(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 251)
  {
    *result = a2 + 4;
  }
  else
  {
    v7 = sub_1A9CE5F64();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A9C36FA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE5F64();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStagesModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SleepMetricsWrapper(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      sub_1A9C367C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, v10, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_1A9CE5F64();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return v7;
}

uint64_t destroy for SleepStagesModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_1A9C367C4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_1A9CE5F64();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for SleepStagesModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SleepMetricsWrapper(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1A9CE5F64();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithCopy for SleepStagesModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SleepMetricsWrapper(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v14);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, v8, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      sub_1A9B97190((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v7, v8, v17);
  }
LABEL_9:
  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1A9CE5F64();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_14;
  }
  if (v25)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_15:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *initializeWithTake for SleepStagesModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SleepMetricsWrapper(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_1A9CE5F64();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for SleepStagesModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SleepMetricsWrapper(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v14);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v7, v8, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      sub_1A9B97190((uint64_t)v7, type metadata accessor for SleepMetricsWrapper);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9C367C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v7, v8, v17);
  }
LABEL_9:
  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1A9CE5F64();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_14;
  }
  if (v25)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_15:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C37A94(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStagesModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A9C37B70(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t dispatch thunk of DateIntervalProviding.dateInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t getEnumTagSinglePayload for LockScreenContentState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepStagesModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A9C37D20 + 4 * byte_1A9CF1A2A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A9C37D54 + 4 * byte_1A9CF1A25[v4]))();
}

uint64_t sub_1A9C37D54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C37D5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C37D64);
  return result;
}

uint64_t sub_1A9C37D70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C37D78);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A9C37D7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C37D84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesModel.CodingKeys()
{
  return &type metadata for SleepStagesModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepStageSegment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9C37DEC + 4 * byte_1A9CF1A34[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9C37E20 + 4 * byte_1A9CF1A2F[v4]))();
}

uint64_t sub_1A9C37E20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C37E28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C37E30);
  return result;
}

uint64_t sub_1A9C37E3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C37E44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9C37E48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C37E50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepStageSegment.CodingKeys()
{
  return &type metadata for SleepStageSegment.CodingKeys;
}

uint64_t sub_1A9C37E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1A9C37EA8(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C367C4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1A9C37EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1A9C37F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1A9C37F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1A9C37FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1A9C37FEC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C37FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1A9C38034()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C38040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C367C4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1A9C38080()
{
  unint64_t v0;

  sub_1A9C367C4();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1A9C380E8()
{
  return sub_1A9B92B9C(&qword_1EEB47500, type metadata accessor for SleepMetricsWrapper, (uint64_t)&unk_1A9CF1E74);
}

unint64_t sub_1A9C38118()
{
  unint64_t result;

  result = qword_1EEB47508;
  if (!qword_1EEB47508)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1F2C, &type metadata for SleepStageSegment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEB47508);
  }
  return result;
}

unint64_t sub_1A9C38160()
{
  unint64_t result;

  result = qword_1EEB47510;
  if (!qword_1EEB47510)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1FE4, &type metadata for SleepStagesModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEB47510);
  }
  return result;
}

unint64_t sub_1A9C381A8()
{
  unint64_t result;

  result = qword_1ED262E08[0];
  if (!qword_1ED262E08[0])
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1F54, &type metadata for SleepStagesModel.CodingKeys);
    atomic_store(result, qword_1ED262E08);
  }
  return result;
}

unint64_t sub_1A9C381F0()
{
  unint64_t result;

  result = qword_1ED262E00;
  if (!qword_1ED262E00)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1F7C, &type metadata for SleepStagesModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED262E00);
  }
  return result;
}

unint64_t sub_1A9C38238()
{
  unint64_t result;

  result = qword_1ED262EA8;
  if (!qword_1ED262EA8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1E9C, &type metadata for SleepStageSegment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED262EA8);
  }
  return result;
}

unint64_t sub_1A9C38280()
{
  unint64_t result;

  result = qword_1ED262EA0;
  if (!qword_1ED262EA0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1EC4, &type metadata for SleepStageSegment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED262EA0);
  }
  return result;
}

uint64_t sub_1A9C382C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6174537065656C73 && a2 == 0xEA00000000006567;
  if (v2 || (sub_1A9CE8BB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A9C383C0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001A9CFC390)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1A9C38444(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001A9CFC2B0 || (sub_1A9CE8BB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A9CFC2D0 || (sub_1A9CE8BB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E497065656C73 && a2 == 0xED00006C61767265 || (sub_1A9CE8BB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7275446C61746F74 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1A9C3863C()
{
  unint64_t result;

  result = qword_1ED2633D8;
  if (!qword_1ED2633D8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF21B4, &type metadata for SleepMetricsWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED2633D8);
  }
  return result;
}

void sub_1A9C38680(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1A9C386DC()
{
  unint64_t result;

  result = qword_1ED262EF0;
  if (!qword_1ED262EF0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStage, &type metadata for SleepStage);
    atomic_store(result, (unint64_t *)&qword_1ED262EF0);
  }
  return result;
}

uint64_t sub_1A9C38720(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1A9B92F34(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1A9C38778(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9B92F34(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1A9C387E4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_1A9C38778(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SleepMetricsWrapper.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A9C38860 + 4 * byte_1A9CF1A39[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A9C38880 + 4 * byte_1A9CF1A3E[v4]))();
}

_BYTE *sub_1A9C38860(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A9C38880(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A9C38888(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A9C38890(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A9C38898(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A9C388A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepMetricsWrapper.CodingKeys()
{
  return &type metadata for SleepMetricsWrapper.CodingKeys;
}

unint64_t sub_1A9C388C0()
{
  unint64_t result;

  result = qword_1EEB47518;
  if (!qword_1EEB47518)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF218C, &type metadata for SleepMetricsWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEB47518);
  }
  return result;
}

unint64_t sub_1A9C38908()
{
  unint64_t result;

  result = qword_1ED2633E8;
  if (!qword_1ED2633E8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF20FC, &type metadata for SleepMetricsWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED2633E8);
  }
  return result;
}

unint64_t sub_1A9C38950()
{
  unint64_t result;

  result = qword_1ED2633E0;
  if (!qword_1ED2633E0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2124, &type metadata for SleepMetricsWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED2633E0);
  }
  return result;
}

uint64_t sub_1A9C3899C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1A9C389B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_1A9CE74DC();
  MEMORY[0x1E0C80A78](v4, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_1A9CE74E8();
}

uint64_t sub_1A9C38A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = sub_1A9CE74DC();
  MEMORY[0x1E0C80A78](v5, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_1A9CE74E8();
}

uint64_t View.animateTransitionIfSupported<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];

  v60 = a2;
  LODWORD(v61) = a1;
  v65 = a7;
  v57 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v59 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v53 - v14;
  v56 = sub_1A9CE71E8();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA9D0C(255);
  v19 = sub_1A9CE7164();
  v58 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v53 - v21;
  v23 = sub_1A9B92B9C(&qword_1ED262AD8, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, MEMORY[0x1E0CDCF80]);
  v66 = a5;
  v75[0] = a5;
  v75[1] = v23;
  v24 = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v19, v75);
  v71 = v19;
  v72 = a4;
  v67 = a4;
  v73 = v24;
  v74 = a6;
  v69 = a6;
  v25 = MEMORY[0x1AF420248](0, &v71, MEMORY[0x1E0D2BAC8], 0);
  v54 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)&v53 - v31;
  v33 = sub_1A9CE74F4();
  v63 = *(_QWORD *)(v33 - 8);
  v64 = v33;
  MEMORY[0x1E0C80A78](v33, v34);
  v68 = (char *)&v53 - v35;
  if ((v61 & 1) != 0)
  {
    sub_1A9CE71DC();
    v61 = v32;
    v36 = v22;
    sub_1A9C3AD2C();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v56);
    sub_1A9CE7FF8();
    v37 = v24;
    v38 = v67;
    v39 = v69;
    sub_1A9CE79E0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v19);
    v71 = v19;
    v72 = v38;
    v73 = v37;
    v74 = v39;
    v24 = v37;
    swift_getOpaqueTypeConformance2();
    v40 = v54;
    v41 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v42 = v61;
    v41(v61, v29, v25);
    v43 = *(void (**)(char *, uint64_t))(v40 + 8);
    v43(v29, v25);
    v41(v29, v42, v25);
    v44 = v66;
    sub_1A9C389B4((uint64_t)v29, v25);
    v43(v29, v25);
    v43(v42, v25);
  }
  else
  {
    v45 = v57;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    v46(v15, v62, a3);
    v47 = (uint64_t)v59;
    v46(v59, (uint64_t)v15, a3);
    v71 = v19;
    v72 = v67;
    v73 = v24;
    v74 = v69;
    swift_getOpaqueTypeConformance2();
    v44 = v66;
    sub_1A9C38A78(v47, v25, a3);
    v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v48(v47, a3);
    v48((uint64_t)v15, a3);
  }
  v71 = v19;
  v72 = v67;
  v73 = v24;
  v74 = v69;
  v70[0] = swift_getOpaqueTypeConformance2();
  v70[1] = v44;
  v49 = v64;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v64, v70);
  v50 = v63;
  v51 = v68;
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v65, v68, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v49);
}

uint64_t View.applyBaselinePaddingOffset(for:in:canOverflow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[3];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];

  v39 = a6;
  v40 = a5;
  v36 = a3;
  v35[1] = a2;
  v35[2] = a1;
  v7 = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)v35 - v12;
  v14 = sub_1A9CE7164();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)v35 - v21;
  v23 = sub_1A9CE74F4();
  v38 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v35 - v25;
  if ((v36 & 1) != 0)
  {
    sub_1A9CE774C();
    sub_1A9CE7788();
    v27 = v40;
    sub_1A9CE7BF0();
    v41[0] = v27;
    v41[1] = MEMORY[0x1E0CD9758];
    MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v14, v41);
    v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v28(v22, v19, v14);
    v29 = *(void (**)(char *, uint64_t))(v15 + 8);
    v29(v19, v14);
    v28(v19, v22, v14);
    sub_1A9C389B4((uint64_t)v19, v14);
    v29(v19, v14);
    v29(v22, v14);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v30(v13, v37, a4);
    v30(v10, (uint64_t)v13, a4);
    v44[0] = v40;
    v44[1] = MEMORY[0x1E0CD9758];
    MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v14, v44);
    sub_1A9C38A78((uint64_t)v10, v14, a4);
    v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v10, a4);
    v31(v13, a4);
  }
  v32 = v40;
  v43[0] = v40;
  v43[1] = MEMORY[0x1E0CD9758];
  v42[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v14, v43);
  v42[1] = v32;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v23, v42);
  v33 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v39, v26, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v26, v23);
}

uint64_t View.hidden(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  void (*v28)(_BYTE *, uint64_t);
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v30;
  void (*v31)(_BYTE *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[12];
  int v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];

  v40 = a4;
  v41 = a3;
  v37 = a1;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = &v36[-v10];
  v12 = sub_1A9CE7164();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = &v36[-v19];
  v21 = sub_1A9CE74F4();
  v39 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = &v36[-v23];
  if ((v37 & 1) != 0)
  {
    v25 = v41;
    sub_1A9CE7BC0();
    v26 = sub_1A9C3AD8C();
    v42[0] = v25;
    v42[1] = v26;
    MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v12, v42);
    v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
    v27(v20, v17, v12);
    v28 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
    v28(v17, v12);
    v27(v17, v20, v12);
    sub_1A9C389B4((uint64_t)v17, v12);
    v28(v17, v12);
    v28(v20, v12);
  }
  else
  {
    v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
    v29(v11, v38, a2);
    v29(v8, v11, a2);
    v30 = sub_1A9C3AD8C();
    v45[0] = v41;
    v45[1] = v30;
    MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v12, v45);
    sub_1A9C38A78((uint64_t)v8, v12, a2);
    v31 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v31(v8, a2);
    v31(v11, a2);
  }
  v32 = sub_1A9C3AD8C();
  v33 = v41;
  v44[0] = v41;
  v44[1] = v32;
  v43[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v12, v44);
  v43[1] = v33;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v21, v43);
  v34 = v39;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v39 + 16))(v40, v24, v21);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v34 + 8))(v24, v21);
}

uint64_t View.horizontallyCenter()(uint64_t a1, uint64_t a2)
{
  return sub_1A9C395AC(a1, a2, MEMORY[0x1E0CDACC8], (uint64_t)sub_1A9C3C99C, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))MEMORY[0x1E0CDFAE0]);
}

uint64_t View.verticallyCenter()(uint64_t a1, uint64_t a2)
{
  return sub_1A9C395AC(a1, a2, MEMORY[0x1E0CDB420], (uint64_t)sub_1A9C3ADD0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))MEMORY[0x1E0CDFC88]);
}

uint64_t sub_1A9C395AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[2] = a1;
  v11[3] = a2;
  v7 = a3();
  swift_getTupleTypeMetadata3();
  v8 = sub_1A9CE8010();
  v9 = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v8);
  return a5(v7, 0, 0, a4, v11, v8, v9);
}

uint64_t View.eraseToAnyView()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  return sub_1A9CE7ED8();
}

uint64_t View.gradientForeground(colors:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  sub_1A9C3ADEC();
  v4 = sub_1A9CE7164();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v12 - v7;
  v9 = swift_bridgeObjectRetain();
  MEMORY[0x1AF41EBEC](v9);
  sub_1A9CE8040();
  sub_1A9CE804C();
  sub_1A9CE70D4();
  v13 = v16[0];
  v14 = v16[1];
  v15 = v17;
  sub_1A9CE7734();
  sub_1A9CE7BD8();
  sub_1A9C3AE48((uint64_t)v16);
  v10 = sub_1A9B92B9C(&qword_1EEB47528, (uint64_t (*)(uint64_t))sub_1A9C3ADEC, MEMORY[0x1E0CDBEC8]);
  v12[0] = a3;
  v12[1] = v10;
  MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v4, v12);
  sub_1A9CE7B90();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t View.removed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v7 = a1;
  v25 = a4;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v24 - v13;
  v15 = sub_1A9CE74F4();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v24 - v19;
  if ((v7 & 1) != 0)
  {
    sub_1A9C389B4(v18, MEMORY[0x1E0CE0428]);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v21(v14, v4, a2);
    v21(v11, (uint64_t)v14, a2);
    sub_1A9C38A78((uint64_t)v11, MEMORY[0x1E0CE0428], a2);
    v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, a2);
    v22(v14, a2);
  }
  v26[0] = MEMORY[0x1E0CE0400];
  v26[1] = a3;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v15, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v25, v20, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t View.addBorder<A>(_:width:cornerRadius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[8];

  v34 = a1;
  v30 = a4;
  v31 = a2;
  v32 = a3;
  v36 = a5;
  v9 = sub_1A9CE71AC();
  v10 = sub_1A9B92B9C(qword_1EEB47530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA060]);
  v37[2] = v9;
  v37[3] = a2;
  v37[4] = MEMORY[0x1E0CE0428];
  v37[5] = v10;
  v37[6] = a4;
  v37[7] = MEMORY[0x1E0CE0400];
  v11 = sub_1A9CE7524();
  v35 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v30 - v13;
  sub_1A9BC2B90();
  v15 = sub_1A9CE7164();
  v33 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v30 - v18;
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (double *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = (char *)v22 + *(int *)(v9 + 20);
  v24 = *MEMORY[0x1E0CDB0C0];
  v25 = sub_1A9CE73B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  *v22 = a6;
  v22[1] = a6;
  v26 = MEMORY[0x1E0CDA088];
  sub_1A9B92B9C(&qword_1EEB44698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
  v27 = v32;
  sub_1A9CE7C14();
  sub_1A9C39CC4(v34, 1, v9, v31, v10, v30, (uint64_t)v14);
  sub_1A9CE7FEC();
  v28 = sub_1A9B92B9C(&qword_1EEB446C8, (uint64_t (*)(uint64_t))sub_1A9BC2B90, MEMORY[0x1E0CD89F0]);
  v37[0] = v27;
  v37[1] = v28;
  MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v15, v37);
  MEMORY[0x1AF420284](MEMORY[0x1E0CDBDF8], v11);
  sub_1A9CE7BE4();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v15);
  return sub_1A9B97190((uint64_t)v22, (uint64_t (*)(_QWORD))v26);
}

uint64_t sub_1A9C39CC4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE v15[40];

  sub_1A9CE6F84();
  sub_1A9C3C090(a1, (uint64_t)v15, a2, a3, a4, a5, a6, a7);
  return sub_1A9C3C754((uint64_t)v15);
}

uint64_t View.pushToLeadingEdge()(uint64_t a1, uint64_t a2)
{
  return sub_1A9C39F50(a1, a2, MEMORY[0x1E0CDACC8], (uint64_t)sub_1A9C3AE70, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))MEMORY[0x1E0CDFAE0]);
}

uint64_t View.pushToTrailingEdge()()
{
  uint64_t v0;

  sub_1A9CE7398();
  swift_getTupleTypeMetadata2();
  v0 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v0);
  return sub_1A9CE7E30();
}

uint64_t sub_1A9C39E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *);
  void (*v13)(char *, uint64_t);
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;
  char v18;
  uint64_t v19[2];

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v15 - v10;
  v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  v17 = 0;
  v18 = 0;
  v19[0] = (uint64_t)&v17;
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  v19[1] = (uint64_t)v8;
  v16[0] = MEMORY[0x1E0CDFC10];
  v16[1] = a2;
  v15[0] = MEMORY[0x1E0CDFBE8];
  v15[1] = a3;
  sub_1A9C81F34(v19, 2uLL, (uint64_t)v16);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t View.pushToTop()(uint64_t a1, uint64_t a2)
{
  return sub_1A9C39F50(a1, a2, MEMORY[0x1E0CDB420], (uint64_t)sub_1A9C3C9A0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))MEMORY[0x1E0CDFC88]);
}

uint64_t sub_1A9C39F50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[2] = a1;
  v11[3] = a2;
  v7 = a3();
  swift_getTupleTypeMetadata2();
  v8 = sub_1A9CE8010();
  v9 = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v8);
  return a5(v7, 0, 0, a4, v11, v8, v9);
}

uint64_t sub_1A9C3A000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *);
  void (*v13)(char *, uint64_t);
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;
  char v18;
  uint64_t v19[2];

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v15 - v10;
  v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  v17 = 0;
  v18 = 0;
  v19[0] = (uint64_t)v8;
  v19[1] = (uint64_t)&v17;
  v16[0] = a2;
  v16[1] = MEMORY[0x1E0CDFC10];
  v15[0] = a3;
  v15[1] = MEMORY[0x1E0CDFBE8];
  sub_1A9C81F34(v19, 2uLL, (uint64_t)v16);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t sub_1A9C3A10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *);
  void (*v13)(char *, uint64_t);
  _QWORD v15[4];
  _QWORD v16[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21[3];

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v15 - v10;
  v12 = *(void (**)(char *))(v5 + 16);
  v12((char *)v15 - v10);
  v19 = 0;
  v20 = 0;
  v21[0] = (uint64_t)&v19;
  ((void (*)(char *, char *, uint64_t))v12)(v8, v11, a2);
  v17 = 0;
  v18 = 0;
  v21[1] = (uint64_t)v8;
  v21[2] = (uint64_t)&v17;
  v16[0] = MEMORY[0x1E0CDFC10];
  v16[1] = a2;
  v16[2] = MEMORY[0x1E0CDFC10];
  v15[1] = MEMORY[0x1E0CDFBE8];
  v15[2] = a3;
  v15[3] = MEMORY[0x1E0CDFBE8];
  sub_1A9C81F34(v21, 3uLL, (uint64_t)v16);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, a2);
}

uint64_t View.scrollable(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[6];
  uint64_t v18;

  v17[1] = a3;
  v6 = sub_1A9CE750C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE6F30();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v17 - v14;
  v17[4] = a1;
  v17[5] = a2;
  v18 = v3;
  sub_1A9CE6F3C();
  sub_1A9CE7500();
  LOBYTE(a1) = sub_1A9CE771C();
  sub_1A9CE7710();
  sub_1A9CE7710();
  if (sub_1A9CE7710() != a1)
    sub_1A9CE7710();
  MEMORY[0x1AF420284](MEMORY[0x1E0CD8558], v11);
  sub_1A9CE7B60();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1A9C3A3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *);
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *))(v5 + 16);
  v8(v7);
  ((void (*)(uint64_t, char *, uint64_t))v8)(a3, v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t LeadingContentGroup.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t LeadingContentGroup.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  v5 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v5);
  v6 = sub_1A9CE7E3C();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v18 - v13;
  View.pushToLeadingEdge()(v4, *(_QWORD *)(a1 + 24));
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFB10], v6);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v15(v14, v11, v6);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v11, v6);
  v15(a2, v14, v6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v6);
}

uint64_t VerticallyCenteredContentGroup.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata3();
  v5 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v5);
  v6 = sub_1A9CE7EB4();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v18 - v13;
  View.verticallyCenter()(v4, *(_QWORD *)(a1 + 24));
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v6);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v15(v14, v11, v6);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v11, v6);
  v15(a2, v14, v6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v6);
}

uint64_t sub_1A9C3A6DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_1A9BA8EA4();
  swift_bridgeObjectRetain();
  result = sub_1A9CE79C8();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1A9C3A744(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, v7);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  v10 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v8 + 8);
  sub_1A9C0344C(a3);
  v10(a2, sub_1A9C3BEA0, v9, v7, v8);
  return swift_release();
}

uint64_t (*sub_1A9C3A7E0(uint64_t (*result)(void)))(void)
{
  if (result)
    return (uint64_t (*)(void))result();
  return result;
}

uint64_t sub_1A9C3A804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_1A9C3C074(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE798C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  KeyPath = swift_getKeyPath();
  sub_1A9C3C620();
  v11 = (uint64_t *)(a2 + *(int *)(v10 + 36));
  sub_1A9C3C6F4(0);
  sub_1A9C3C710((uint64_t)v7, (uint64_t)v11 + *(int *)(v12 + 28));
  *v11 = KeyPath;
  sub_1A9C3C69C(0, &qword_1EEB47680, (void (*)(void))sub_1A9C017E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, a1, v13);
  return sub_1A9B97190((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C3C074);
}

uint64_t sub_1A9C3A918(void (*a1)(uint64_t))
{
  uint64_t result;
  char v3;

  sub_1A9C2434C();
  result = sub_1A9CE7DD0();
  if ((v3 & 1) == 0)
  {
    a1(result);
    return sub_1A9CE7DDC();
  }
  return result;
}

uint64_t sub_1A9C3A9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();

  v6 = *v2;
  v5 = v2[1];
  v7 = *((_BYTE *)v2 + 16);
  v8 = v2[3];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v5;
  *(_BYTE *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v8;
  sub_1A9C3C69C(0, &qword_1EEB47648, (void (*)(void))sub_1A9C3B8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
  sub_1A9C3BF04();
  v12 = (uint64_t (**)())(a2 + *(int *)(v11 + 36));
  *v12 = sub_1A9C3BEF4;
  v12[1] = (uint64_t (*)())v9;
  v12[2] = 0;
  v12[3] = 0;
  swift_retain();
  return swift_retain();
}

uint64_t View.onFirstAppear(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v15 = 0;
  swift_retain();
  sub_1A9CE7DC4();
  v8 = v11;
  v9 = v12;
  v11 = a1;
  v12 = a2;
  v13 = v8;
  v14 = v9;
  MEMORY[0x1AF41E82C](&v11, a3, &type metadata for OnFirstAppear, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C3AB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a1;
  v23 = a2;
  v2 = sub_1A9CE7380();
  v18 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C3BF78(0);
  v7 = *(_QWORD *)(v6 - 8);
  v21 = v6;
  v22 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C3C69C(0, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
  v12 = v11;
  v13 = sub_1A9C3C034(&qword_1EEB47668, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
  sub_1A9CE7B00();
  v15 = v18;
  v14 = v19;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v5, *MEMORY[0x1E0CDAB90], v19);
  v24 = v12;
  v25 = v13;
  swift_getOpaqueTypeConformance2();
  v16 = v21;
  sub_1A9CE7B84();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v16);
}

uint64_t View.appNavigationTitleBarStyle(title:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v7[0] = a1;
  v7[1] = a2;
  v8 = a3;
  v9 = a4;
  return MEMORY[0x1AF41E82C](v7, a5, &type metadata for NavigationTitleBarStyle, a6);
}

uint64_t static CGFloat.textDescenderOffset(for:in:)()
{
  return sub_1A9CE7788();
}

uint64_t static CGFloat.textLineHeight(for:in:)()
{
  return sub_1A9CE777C();
}

uint64_t sub_1A9C3AD2C()
{
  swift_getKeyPath();
  sub_1A9CE7AAC();
  return swift_release();
}

unint64_t sub_1A9C3AD8C()
{
  unint64_t result;

  result = qword_1ED262AB8;
  if (!qword_1ED262AB8)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9D78], MEMORY[0x1E0CD9D88]);
    atomic_store(result, (unint64_t *)&qword_1ED262AB8);
  }
  return result;
}

uint64_t sub_1A9C3ADD0()
{
  uint64_t *v0;

  return sub_1A9C3A10C(v0[4], v0[2], v0[3]);
}

void sub_1A9C3ADEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47520)
  {
    v0 = sub_1A9CE7530();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47520);
  }
}

uint64_t sub_1A9C3AE48(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C3AE70()
{
  uint64_t *v0;

  return sub_1A9C3A000(v0[4], v0[2], v0[3]);
}

uint64_t sub_1A9C3AE8C()
{
  uint64_t *v0;

  return sub_1A9C39E24(v0[4], v0[2], v0[3]);
}

uint64_t sub_1A9C3AE98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C3A3AC(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9C3AEA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3AED8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3AF0C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A9C3AF1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1A9C3AF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1A9C3AF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1A9C3AF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1A9C3AFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t type metadata accessor for LeadingContentGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LeadingContentGroup);
}

uint64_t sub_1A9C3B000()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9C3B06C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1A9C3B0DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A9C3B18C + 4 * byte_1A9CF2210[(v7 - 1)]))();
}

void sub_1A9C3B1DC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for VerticallyCenteredContentGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VerticallyCenteredContentGroup);
}

uint64_t sub_1A9C3B398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_1A9C3ADEC();
  v2 = sub_1A9CE7164();
  v3 = sub_1A9CE6FA8();
  v4 = sub_1A9CE7164();
  v8[0] = v1;
  v8[1] = sub_1A9B92B9C(&qword_1EEB47528, (uint64_t (*)(uint64_t))sub_1A9C3ADEC, MEMORY[0x1E0CDBEC8]);
  v5 = MEMORY[0x1E0CD9C20];
  v7[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v8);
  v7[1] = MEMORY[0x1AF420284](MEMORY[0x1E0CD8A38], v3);
  return MEMORY[0x1AF420284](v5, v4, v7);
}

uint64_t sub_1A9C3B474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1A9CE7164();
  v3 = sub_1A9CE74F4();
  v6[0] = v1;
  v6[1] = sub_1A9C3AD8C();
  v5[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v6);
  v5[1] = v1;
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v3, v5);
}

uint64_t sub_1A9C3B500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1A9CE74F4();
  v4[0] = MEMORY[0x1E0CE0400];
  v4[1] = v1;
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v4);
}

uint64_t sub_1A9C3B554(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[8];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  sub_1A9BC2B90();
  v4 = sub_1A9CE7164();
  v5 = sub_1A9CE71AC();
  v6 = sub_1A9B92B9C(qword_1EEB47530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA060]);
  v13[2] = v5;
  v13[3] = v1;
  v13[4] = MEMORY[0x1E0CE0428];
  v13[5] = v6;
  v13[6] = v3;
  v13[7] = MEMORY[0x1E0CE0400];
  v7 = sub_1A9CE7524();
  MEMORY[0x1AF420284](MEMORY[0x1E0CDBDF8], v7);
  v8 = sub_1A9CE71D0();
  v9 = sub_1A9CE7164();
  v13[0] = v2;
  v13[1] = sub_1A9B92B9C(&qword_1EEB446C8, (uint64_t (*)(uint64_t))sub_1A9BC2B90, MEMORY[0x1E0CD89F0]);
  v10 = MEMORY[0x1E0CD9C20];
  v12[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v4, v13);
  v12[1] = MEMORY[0x1AF420284](MEMORY[0x1E0CDA280], v8);
  return MEMORY[0x1AF420284](v10, v9, v12);
}

void sub_1A9C3B698(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(a1, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
}

void sub_1A9C3B6AC()
{
  uint64_t v0;

  swift_getTupleTypeMetadata2();
  v0 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v0);
  sub_1A9CE7E3C();
  JUMPOUT(0x1AF420284);
}

void sub_1A9C3B71C(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(a1, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFCA0]);
}

void get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0Vyx_AA6SpacerVtGGAaBHPyHCTm(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  swift_getTupleTypeMetadata2();
  v3 = sub_1A9CE8010();
  v4 = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v3);
  a2(255, v3, v4);
  JUMPOUT(0x1AF420284);
}

void sub_1A9C3B7AC(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(a1, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
}

void sub_1A9C3B7C0(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(a1, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFCA0]);
}

void get_witness_table_7SwiftUI4ViewRzlAA6HStackVyAA05TupleC0VyAA6SpacerV_xAHtGGAaBHPyHCTm(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  swift_getTupleTypeMetadata3();
  v3 = sub_1A9CE8010();
  v4 = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v3);
  a2(255, v3, v4);
  JUMPOUT(0x1AF420284);
}

uint64_t sub_1A9C3B854()
{
  uint64_t v1;

  v1 = sub_1A9CE6F30();
  MEMORY[0x1AF420284](MEMORY[0x1E0CD8558], v1);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3B8AC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for OnFirstAppear, (uint64_t (*)(void))sub_1A9C3B8C0);
}

unint64_t sub_1A9C3B8C0()
{
  unint64_t result;

  result = qword_1EEB47638;
  if (!qword_1EEB47638)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2418, &type metadata for OnFirstAppear);
    atomic_store(result, (unint64_t *)&qword_1EEB47638);
  }
  return result;
}

uint64_t sub_1A9C3B904(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for NavigationTitleBarStyle, (uint64_t (*)(void))sub_1A9C3B974);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyx011SleepHealthB013OnFirstAppear06_666E1K25E38EA261127FEC9835619BA55LLVGAaBHPxAaBHD1__AhA0C8ModifierHPyHCHCTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_1A9CE7164();
  v7[0] = v4;
  v7[1] = a3();
  return MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v5, v7);
}

unint64_t sub_1A9C3B974()
{
  unint64_t result;

  result = qword_1EEB47640;
  if (!qword_1EEB47640)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF23C8, &type metadata for NavigationTitleBarStyle);
    atomic_store(result, (unint64_t *)&qword_1EEB47640);
  }
  return result;
}

uint64_t sub_1A9C3B9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1A9CE7164();
  v3 = sub_1A9CE74F4();
  v6[0] = v1;
  v6[1] = MEMORY[0x1E0CD9758];
  v5[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v6);
  v5[1] = v1;
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v3, v5);
}

uint64_t sub_1A9C3BA48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  sub_1A9BA9D0C(255);
  v4 = sub_1A9CE7164();
  v13[0] = v2;
  v13[1] = sub_1A9B92B9C(&qword_1ED262AD8, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, MEMORY[0x1E0CDCF80]);
  v5 = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v4, v13);
  v9 = v4;
  v10 = v1;
  v11 = v5;
  v12 = v3;
  MEMORY[0x1AF420248](255, &v9, MEMORY[0x1E0D2BAC8], 0);
  v6 = sub_1A9CE74F4();
  v9 = v4;
  v10 = v1;
  v11 = v5;
  v12 = v3;
  v8[0] = swift_getOpaqueTypeConformance2();
  v8[1] = v2;
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v6, v8);
}

ValueMetadata *type metadata accessor for ClearTextCaseFromEnvironment()
{
  return &type metadata for ClearTextCaseFromEnvironment;
}

uint64_t destroy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  return sub_1A9C3BC7C(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t initializeWithCopy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationTitleBarStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationTitleBarStyle()
{
  return &type metadata for NavigationTitleBarStyle;
}

uint64_t destroy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  return sub_1A9C3BC7C(a1, a2, (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A9C3BC7C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  a3(*(_QWORD *)(a1 + 8));
  return ((uint64_t (*)(_QWORD))a3)(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnFirstAppear(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnFirstAppear(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnFirstAppear(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnFirstAppear()
{
  return &type metadata for OnFirstAppear;
}

uint64_t sub_1A9C3BE44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3BE54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3BE64()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C3BE74()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C3BEA0()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1A9C3BEC8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C3BEF4()
{
  uint64_t v0;

  return sub_1A9C3A918(*(void (**)(uint64_t))(v0 + 16));
}

void sub_1A9C3BF04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47650)
  {
    sub_1A9C3C69C(255, &qword_1EEB47648, (void (*)(void))sub_1A9C3B8C0);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47650);
  }
}

void sub_1A9C3BF78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EEB47658)
  {
    sub_1A9C3C69C(255, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
    v5[0] = v2;
    v5[1] = sub_1A9C3C034(&qword_1EEB47668, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDE578], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB47658);
  }
}

uint64_t sub_1A9C3C034(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1A9C3C69C(255, a2, a3);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDBF10], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A9C3C074(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB47670, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDDC18], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9C3C090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;

  v26 = a7;
  v27 = a3;
  v15 = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v8, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, a5);
  swift_bridgeObjectRetain();
  return sub_1A9C3C1BC((uint64_t)v21, (uint64_t)v18, a2, v27, v24, a4, a5, MEMORY[0x1E0CE0428], a8, a6, v26, MEMORY[0x1E0CE0400]);
}

uint64_t sub_1A9C3C1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v54 = a5;
  v51 = a4;
  v47 = a3;
  v48 = a2;
  v58 = a1;
  v43 = a9;
  v55 = a12;
  v52 = *(_QWORD *)(a8 - 8);
  v49 = a8;
  MEMORY[0x1E0C80A78](a1, a8);
  v50 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1A9CE74D0();
  v17 = MEMORY[0x1E0C80A78](v56, v16);
  v53 = (char *)&v38 - v18;
  v45 = *(_QWORD *)(a7 - 8);
  v38 = a7;
  MEMORY[0x1E0C80A78](v17, v19);
  v44 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v22);
  v41 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v23 = sub_1A9CE7080();
  MEMORY[0x1E0C80A78](v23, v24);
  v25 = MEMORY[0x1AF420284](MEMORY[0x1E0CD9140], v23);
  v59 = v23;
  v60 = a7;
  v61 = v25;
  v62 = a11;
  v46 = sub_1A9CE6F54();
  MEMORY[0x1E0C80A78](v46, v26);
  v40 = (char *)&v38 - v27;
  v42 = *(_QWORD *)(a6 - 8);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v39 = a6;
  v28(a9, v58, a6);
  sub_1A9CE711C();
  sub_1A9CE7074();
  v29 = v45;
  v30 = v48;
  v31 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v38);
  sub_1A9CE6F48();
  v32 = v52;
  v33 = v49;
  v34 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v54, v49);
  sub_1A9CE7FEC();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  v35 = v39;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v58, v39);
  v36 = v55;
  sub_1A9CE74C4();
  v59 = v35;
  v60 = v31;
  v61 = v33;
  v62 = v57;
  v63 = a11;
  v64 = v36;
  sub_1A9CE7524();
  return sub_1A9CE7128();
}

uint64_t sub_1A9C3C588()
{
  return sub_1A9CE7314();
}

uint64_t sub_1A9C3C5A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_1A9C3C074(0);
  MEMORY[0x1E0C80A78](v2, v3);
  sub_1A9C3C710(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1A9CE7320();
}

void sub_1A9C3C620()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47678)
  {
    sub_1A9C3C69C(255, &qword_1EEB47680, (void (*)(void))sub_1A9C017E0);
    sub_1A9C3C6F4(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47678);
  }
}

void sub_1A9C3C69C(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_1A9CE7548();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9C3C6F4(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB47688, (uint64_t (*)(uint64_t))sub_1A9C3C074, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

uint64_t sub_1A9C3C710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C3C074(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C3C754(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1AF4201F4](a1, v6, a5);
}

unint64_t sub_1A9C3C7B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB47690;
  if (!qword_1EEB47690)
  {
    sub_1A9C3BF04();
    v2 = v1;
    v3[0] = sub_1A9C3C034(&qword_1EEB47698, &qword_1EEB47648, (void (*)(void))sub_1A9C3B8C0);
    v3[1] = MEMORY[0x1E0CDC8B0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47690);
  }
  return result;
}

uint64_t sub_1A9C3C83C()
{
  sub_1A9C3BF78(255);
  sub_1A9C3C69C(255, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
  sub_1A9C3C034(&qword_1EEB47668, &qword_1EEB47660, (void (*)(void))sub_1A9C3B974);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1A9C3C8F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB476A0;
  if (!qword_1EEB476A0)
  {
    sub_1A9C3C620();
    v2 = v1;
    v3[0] = sub_1A9C3C034(&qword_1EEB476A8, &qword_1EEB47680, (void (*)(void))sub_1A9C017E0);
    v3[1] = sub_1A9B92B9C(&qword_1EEB476B0, (uint64_t (*)(uint64_t))sub_1A9C3C6F4, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB476A0);
  }
  return result;
}

uint64_t TwoWeekResults.morningIndexRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TwoWeekResults.summaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TwoWeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TwoWeekResults() + 24);
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TwoWeekResults()
{
  uint64_t result;

  result = qword_1EEB47710;
  if (!qword_1EEB47710)
    return swift_getSingletonMetadata();
  return result;
}

id TwoWeekResults.averageDurationFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for TwoWeekResults() + 28));
}

id TwoWeekResults.axisFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for TwoWeekResults() + 32));
}

uint64_t TwoWeekResults.week1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TwoWeekResults();
  return sub_1A9BA6F90(v1 + *(int *)(v3 + 36), a1, type metadata accessor for WeekResults);
}

uint64_t TwoWeekResults.week2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TwoWeekResults();
  return sub_1A9BA6F90(v1 + *(int *)(v3 + 40), a1, type metadata accessor for WeekResults);
}

BOOL TwoWeekResults.hasData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  double v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v30;

  v1 = type metadata accessor for TwoWeekResults();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + *(int *)(v5 + 36));
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    sub_1A9BA6F90(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
    goto LABEL_12;
  }
  if (v7 == 1)
  {
    v8 = 0;
    v9 = 0.0;
LABEL_8:
    v14 = v7 - v8;
    v15 = (double *)(v6 + 32 * v8 + 40);
    do
    {
      v16 = *v15;
      v15 += 4;
      v9 = v9 + v16;
      --v14;
    }
    while (v14);
    goto LABEL_10;
  }
  v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
  v10 = (double *)(v6 + 72);
  v9 = 0.0;
  v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v12 = *(v10 - 4);
    v13 = *v10;
    v10 += 8;
    v9 = v9 + v12 + v13;
    v11 -= 2;
  }
  while (v11);
  if (v7 != v8)
    goto LABEL_8;
LABEL_10:
  sub_1A9BA6F90(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  if (v9 <= 0.0)
  {
LABEL_12:
    v18 = *(_QWORD *)&v4[*(int *)(v1 + 40)];
    v19 = *(_QWORD *)(v18 + 16);
    if (!v19)
    {
      v17 = 0;
      goto LABEL_22;
    }
    if (v19 == 1)
    {
      v20 = 0;
      v21 = 0.0;
    }
    else
    {
      v20 = v19 & 0x7FFFFFFFFFFFFFFELL;
      v22 = (double *)(v18 + 72);
      v21 = 0.0;
      v23 = v19 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v24 = *(v22 - 4);
        v25 = *v22;
        v22 += 8;
        v21 = v21 + v24 + v25;
        v23 -= 2;
      }
      while (v23);
      if (v19 == v20)
        goto LABEL_21;
    }
    v26 = v19 - v20;
    v27 = (double *)(v18 + 32 * v20 + 40);
    do
    {
      v28 = *v27;
      v27 += 4;
      v21 = v21 + v28;
      --v26;
    }
    while (v26);
LABEL_21:
    v17 = v21 > 0.0;
    goto LABEL_22;
  }
  v17 = 1;
LABEL_22:
  sub_1A9B97190((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  return v17;
}

uint64_t TwoWeekResults.hasComparisonData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v11;

  v1 = type metadata accessor for WeekResults(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TwoWeekResults();
  v6 = v0 + *(int *)(v5 + 36);
  v7 = v0 + *(int *)(v5 + 40);
  v8 = *(_BYTE *)(v6 + 16);
  sub_1A9BA6F90(v7, (uint64_t)v4, type metadata accessor for WeekResults);
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v4[16] ^ 1;
  sub_1A9B97190((uint64_t)v4, type metadata accessor for WeekResults);
  return v9 & 1;
}

uint64_t TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t isUniquelyReferenced_nonNull_native@<X3>, char *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  _QWORD *v41;
  char **v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  char *v60;
  char v61;
  char v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  id v75;
  _QWORD *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t result;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;

  v100 = a6;
  v98 = a5;
  v12 = type metadata accessor for WeekResults(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v92 = (uint64_t *)((char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (int *)type metadata accessor for WeekResultsBuilder();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (unint64_t)&v84 - v21;
  *a7 = a1;
  a7[1] = a2;
  v94 = a3;
  a7[2] = a3;
  v23 = (int *)type metadata accessor for TwoWeekResults();
  v24 = (char *)a7 + v23[6];
  v25 = sub_1A9CE6444();
  v90 = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(v90 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v24, isUniquelyReferenced_nonNull_native, v25);
  v27 = v98;
  *(_QWORD *)((char *)a7 + v23[7]) = v98;
  v91 = v23;
  v28 = v23[8];
  v93 = a7;
  v29 = v100;
  *(_QWORD *)((char *)a7 + v28) = v100;
  v30 = v27;
  ((void (*)(unint64_t, uint64_t, uint64_t))v26)(v22 + v15[5], isUniquelyReferenced_nonNull_native, v25);
  v31 = v15[9];
  v32 = sub_1A9BAE914(MEMORY[0x1E0DEE9D8]);
  v99 = v31;
  *(_QWORD *)(v22 + v31) = v32;
  *(_QWORD *)v22 = a1;
  *(_QWORD *)(v22 + 8) = 7;
  v33 = v15[6];
  *(_QWORD *)(v22 + v33) = 0x40CC200000000000;
  *(_QWORD *)(v22 + v15[7]) = v30;
  *(_QWORD *)(v22 + v15[8]) = v29;
  v34 = __OFADD__(a1, 7);
  v35 = a1 + 7;
  if (v34)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    v73 = (id)v26;
    v74 = v29;
    v29 = v73;
    v75 = v74;
    swift_bridgeObjectRetain_n();
    v76 = v29;
    v77 = v75;
    v38 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v38)
      goto LABEL_4;
LABEL_43:
    swift_bridgeObjectRelease();
    sub_1A9CB2A2C();
    *(_QWORD *)(v19 + v85) = v78;
    sub_1A9CB2A2C();
    *(_QWORD *)(v22 + v88) = v79;
    v80 = v91;
    v81 = v93;
    sub_1A9CB209C((_QWORD *)((char *)v93 + v91[9]));
    v82 = v92;
    sub_1A9CB209C(v92);

    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(isUniquelyReferenced_nonNull_native, v89);
    sub_1A9B97190(v19, (uint64_t (*)(_QWORD))type metadata accessor for WeekResultsBuilder);
    sub_1A9B97190(v22, (uint64_t (*)(_QWORD))type metadata accessor for WeekResultsBuilder);
    return sub_1A9BAEA40((uint64_t)v82, (uint64_t)v81 + v80[10]);
  }
  v88 = v33;
  v89 = v25;
  ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v19 + v15[5], isUniquelyReferenced_nonNull_native, v25);
  v36 = (char *)v15[9];
  v26 = v30;
  v29 = v29;
  v37 = sub_1A9BAE914(MEMORY[0x1E0DEE9D8]);
  v98 = v36;
  *(_QWORD *)&v36[v19] = v37;
  *(_QWORD *)v19 = v35;
  *(_QWORD *)(v19 + 8) = 7;
  v85 = v15[6];
  v86 = v29;
  *(_QWORD *)(v19 + v85) = 0x40CC200000000000;
  *(_QWORD *)(v19 + v15[7]) = v26;
  *(_QWORD *)(v19 + v15[8]) = v29;
  v25 = v94;
  v87 = (id)v26;
  if (v94 >> 62)
    goto LABEL_42;
  v38 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
  v39 = (id)v26;
  v29 = v29;
  v40 = v39;
  v41 = v29;
  swift_bridgeObjectRetain();
  if (!v38)
    goto LABEL_43;
LABEL_4:
  v96 = v22;
  v97 = v25 & 0xC000000000000001;
  v26 = 4;
  v42 = &off_1E55E8000;
  v95 = v38;
  while (1)
  {
    if (v97)
      v43 = (id)MEMORY[0x1AF41F600](v26 - 4, v25);
    else
      v43 = *(id *)(v25 + 8 * v26);
    v44 = v43;
    if (__OFADD__(v26 - 4, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v100 = (_QWORD *)(v26 - 3);
    objc_msgSend(v43, v42[432]);
    if ((sub_1A9CE86A0() & 1) != 0)
    {
      v25 = v19;
      v19 = isUniquelyReferenced_nonNull_native;
      v45 = objc_msgSend(v44, v42[432]);
      v46 = v44;
      v47 = v99;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v101 = *(_QWORD **)(v22 + v47);
      v29 = v101;
      *(_QWORD *)(v22 + v47) = 0x8000000000000000;
      v49 = sub_1A9BAD7DC((uint64_t)v45);
      v50 = v29[2];
      v51 = (v48 & 1) == 0;
      v52 = v50 + v51;
      if (__OFADD__(v50, v51))
        goto LABEL_37;
      v22 = v48;
      if (v29[3] >= v52)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1A9BAE6A4();
      }
      else
      {
        sub_1A9BAE18C(v52, isUniquelyReferenced_nonNull_native);
        v53 = sub_1A9BAD7DC((uint64_t)v45);
        if ((v22 & 1) != (v54 & 1))
          goto LABEL_44;
        v49 = v53;
      }
      v29 = v101;
      isUniquelyReferenced_nonNull_native = 8 * v49;
      if ((v22 & 1) != 0)
      {
        v55 = v101[7];

        *(_QWORD *)(v55 + isUniquelyReferenced_nonNull_native) = v46;
      }
      else
      {
        v101[(v49 >> 6) + 8] |= 1 << v49;
        *(_QWORD *)(v29[6] + 8 * v49) = v45;
        *(_QWORD *)(v29[7] + 8 * v49) = v46;
        v56 = v29[2];
        v34 = __OFADD__(v56, 1);
        v57 = v56 + 1;
        if (v34)
          goto LABEL_39;
        v29[2] = v57;
      }
      v22 = v96;
      *(_QWORD *)(v96 + v99) = v29;
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = v19;
      v19 = v25;
      v25 = v94;
      v38 = v95;
      v42 = &off_1E55E8000;
    }
    v29 = *(_QWORD **)(v19 + 8);
    objc_msgSend(v44, v42[432]);
    if ((sub_1A9CE86A0() & 1) != 0)
      break;

LABEL_6:
    ++v26;
    if (v100 == (_QWORD *)v38)
      goto LABEL_43;
  }
  v58 = objc_msgSend(v44, v42[432]);
  v59 = v44;
  v60 = v98;
  v61 = swift_isUniquelyReferenced_nonNull_native();
  v101 = *(_QWORD **)&v60[v19];
  v29 = v101;
  *(_QWORD *)&v60[v19] = 0x8000000000000000;
  v22 = sub_1A9BAD7DC((uint64_t)v58);
  v63 = v29[2];
  v64 = (v62 & 1) == 0;
  v65 = v63 + v64;
  if (__OFADD__(v63, v64))
    goto LABEL_38;
  v66 = v62;
  if (v29[3] >= v65)
  {
    if ((v61 & 1) != 0)
    {
      v29 = v101;
      if ((v62 & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      sub_1A9BAE6A4();
      v29 = v101;
      if ((v66 & 1) != 0)
        goto LABEL_31;
    }
LABEL_33:
    v29[(v22 >> 6) + 8] |= 1 << v22;
    v70 = 8 * v22;
    *(_QWORD *)(v29[6] + v70) = v58;
    *(_QWORD *)(v29[7] + v70) = v59;
    v71 = v29[2];
    v34 = __OFADD__(v71, 1);
    v72 = v71 + 1;
    if (v34)
      goto LABEL_40;
    v29[2] = v72;
    goto LABEL_35;
  }
  sub_1A9BAE18C(v65, v61);
  v67 = sub_1A9BAD7DC((uint64_t)v58);
  if ((v66 & 1) == (v68 & 1))
  {
    v22 = v67;
    v29 = v101;
    if ((v66 & 1) == 0)
      goto LABEL_33;
LABEL_31:
    v69 = v29[7];

    *(_QWORD *)(v69 + 8 * v22) = v59;
LABEL_35:
    *(_QWORD *)&v98[v19] = v29;

    swift_bridgeObjectRelease();
    v38 = v95;
    v22 = v96;
    v42 = &off_1E55E8000;
    goto LABEL_6;
  }
LABEL_44:
  result = sub_1A9CE8BE0();
  __break(1u);
  return result;
}

uint64_t static TwoWeekResults.emptyResults.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v16;

  v2 = sub_1A9CE6378();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *MEMORY[0x1E0CB4B90];
  v12 = *(_QWORD *)(MEMORY[0x1E0CB4B90] + 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0CB0EF8], v2);
  sub_1A9CE6384();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v13, sel_setAllowedUnits_, 96);
  objc_msgSend(v13, sel_setUnitsStyle_, 1);
  v14 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
  return TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v11, v12, MEMORY[0x1E0DEE9D8], (uint64_t)v10, (char *)v13, v14, a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TwoWeekResults(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  char *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v58 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v58 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v65 = v10;
    v66 = v11;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = a3[8];
    v14 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + v12) = (uint64_t)v14;
    v62 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v62;
    v15 = a3[9];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v19 = *(uint64_t *)((char *)a2 + v15);
    v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
    v16[16] = v17[16];
    v20 = (int *)type metadata accessor for WeekResults(0);
    v21 = v20[6];
    v60 = &v17[v21];
    v61 = &v16[v21];
    v22 = sub_1A9CE5F64();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v63 = v22;
    v64 = v23;
    v24 = v14;
    v25 = v62;
    swift_bridgeObjectRetain();
    v23(v61, v60, v22);
    *(_QWORD *)&v16[v20[7]] = *(_QWORD *)&v17[v20[7]];
    v26 = v20[8];
    v27 = &v16[v26];
    v28 = &v17[v26];
    v27[8] = v28[8];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_QWORD *)&v16[v20[9]] = *(_QWORD *)&v17[v20[9]];
    v66(&v16[v20[10]], &v17[v20[10]], v65);
    v29 = v20[11];
    v30 = *(void **)&v17[v29];
    *(_QWORD *)&v16[v29] = v30;
    v31 = v20[12];
    v32 = *(void **)&v17[v31];
    *(_QWORD *)&v16[v31] = v32;
    v33 = v20[13];
    v34 = *(void **)&v17[v33];
    *(_QWORD *)&v16[v33] = v34;
    v35 = a3[10];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v39 = *(uint64_t *)((char *)a2 + v35);
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = v39;
    *((_QWORD *)v36 + 1) = v38;
    v36[16] = v37[16];
    v40 = v20[6];
    v41 = &v36[v40];
    v42 = &v37[v40];
    v43 = v30;
    v44 = v32;
    v45 = v34;
    swift_bridgeObjectRetain();
    v64(v41, v42, v63);
    *(_QWORD *)&v36[v20[7]] = *(_QWORD *)&v37[v20[7]];
    v46 = v20[8];
    v47 = &v36[v46];
    v48 = &v37[v46];
    v47[8] = v48[8];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *(_QWORD *)&v36[v20[9]] = *(_QWORD *)&v37[v20[9]];
    v66(&v36[v20[10]], &v37[v20[10]], v65);
    v49 = v20[11];
    v50 = *(void **)&v37[v49];
    *(_QWORD *)&v36[v49] = v50;
    v51 = v20[12];
    v52 = *(void **)&v37[v51];
    *(_QWORD *)&v36[v51] = v52;
    v53 = v20[13];
    v54 = *(void **)&v37[v53];
    *(_QWORD *)&v36[v53] = v54;
    v55 = v50;
    v56 = v52;
    v57 = v54;
  }
  return v4;
}

void destroy for TwoWeekResults(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1A9CE6444();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);

  v7 = a1 + a2[9];
  swift_bridgeObjectRelease();
  v8 = (int *)type metadata accessor for WeekResults(0);
  v9 = v7 + v8[6];
  v10 = sub_1A9CE5F64();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v6(v7 + v8[10], v5);

  v12 = a1 + a2[10];
  swift_bridgeObjectRelease();
  v11(v12 + v8[6], v10);
  v6(v12 + v8[10], v5);

}

uint64_t initializeWithCopy for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v63 = v9;
  v64 = v10;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = a3[8];
  v13 = *(void **)(a2 + v11);
  v62 = a1;
  *(_QWORD *)(a1 + v11) = v13;
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v19 = *(_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v18;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v20 = (int *)type metadata accessor for WeekResults(0);
  v21 = v20[6];
  v59 = v17 + v21;
  v60 = v16 + v21;
  v22 = sub_1A9CE5F64();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v61 = v23;
  v24 = v13;
  v25 = v14;
  swift_bridgeObjectRetain();
  v23(v60, v59, v22);
  *(_QWORD *)(v16 + v20[7]) = *(_QWORD *)(v17 + v20[7]);
  v26 = v20[8];
  v27 = v16 + v26;
  v28 = v17 + v26;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v16 + v20[9]) = *(_QWORD *)(v17 + v20[9]);
  v64(v16 + v20[10], v17 + v20[10], v63);
  v29 = v20[11];
  v30 = *(void **)(v17 + v29);
  *(_QWORD *)(v16 + v29) = v30;
  v31 = v20[12];
  v32 = *(void **)(v17 + v31);
  *(_QWORD *)(v16 + v31) = v32;
  v33 = v20[13];
  v34 = *(void **)(v17 + v33);
  *(_QWORD *)(v16 + v33) = v34;
  v35 = a3[10];
  v36 = v62 + v35;
  v37 = a2 + v35;
  v39 = *(_QWORD *)(a2 + v35);
  v38 = *(_QWORD *)(v37 + 8);
  *(_QWORD *)v36 = v39;
  *(_QWORD *)(v36 + 8) = v38;
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
  v40 = v20[6];
  v41 = v36 + v40;
  v42 = v37 + v40;
  v43 = v30;
  v44 = v32;
  v45 = v34;
  swift_bridgeObjectRetain();
  v61(v41, v42, v22);
  *(_QWORD *)(v36 + v20[7]) = *(_QWORD *)(v37 + v20[7]);
  v46 = v20[8];
  v47 = v36 + v46;
  v48 = v37 + v46;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v36 + v20[9]) = *(_QWORD *)(v37 + v20[9]);
  v64(v36 + v20[10], v37 + v20[10], v63);
  v49 = v20[11];
  v50 = *(void **)(v37 + v49);
  *(_QWORD *)(v36 + v49) = v50;
  v51 = v20[12];
  v52 = *(void **)(v37 + v51);
  *(_QWORD *)(v36 + v51) = v52;
  v53 = v20[13];
  v54 = *(void **)(v37 + v53);
  *(_QWORD *)(v36 + v53) = v54;
  v55 = v50;
  v56 = v52;
  v57 = v54;
  return v62;
}

_QWORD *assignWithCopy for TwoWeekResults(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v64 = sub_1A9CE6444();
  v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24);
  v65(v7, v8, v64);
  v9 = a3[7];
  v10 = *(void **)((char *)a2 + v9);
  v11 = *(void **)((char *)a1 + v9);
  *(_QWORD *)((char *)a1 + v9) = v10;
  v12 = v10;

  v13 = a3[8];
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  v16 = v14;

  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *((_QWORD *)v19 + 1);
  v18[16] = v19[16];
  *((_QWORD *)v18 + 1) = v20;
  v21 = (int *)type metadata accessor for WeekResults(0);
  v22 = v21[6];
  v23 = &v18[v22];
  v24 = &v19[v22];
  v25 = sub_1A9CE5F64();
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24);
  v26(v23, v24, v25);
  *(_QWORD *)&v18[v21[7]] = *(_QWORD *)&v19[v21[7]];
  v27 = v21[8];
  v28 = &v18[v27];
  v29 = &v19[v27];
  v30 = v29[8];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v30;
  *(_QWORD *)&v18[v21[9]] = *(_QWORD *)&v19[v21[9]];
  v65(&v18[v21[10]], &v19[v21[10]], v64);
  v31 = v21[11];
  v32 = *(void **)&v19[v31];
  v33 = *(void **)&v18[v31];
  *(_QWORD *)&v18[v31] = v32;
  v34 = v32;

  v35 = v21[12];
  v36 = *(void **)&v19[v35];
  v37 = *(void **)&v18[v35];
  *(_QWORD *)&v18[v35] = v36;
  v38 = v36;

  v39 = v21[13];
  v40 = *(void **)&v19[v39];
  v41 = *(void **)&v18[v39];
  *(_QWORD *)&v18[v39] = v40;
  v42 = v40;

  v43 = a3[10];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)a2 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = *((_QWORD *)v45 + 1);
  v44[16] = v45[16];
  *((_QWORD *)v44 + 1) = v46;
  v26(&v44[v21[6]], &v45[v21[6]], v25);
  *(_QWORD *)&v44[v21[7]] = *(_QWORD *)&v45[v21[7]];
  v47 = v21[8];
  v48 = &v44[v47];
  v49 = &v45[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  *(_QWORD *)&v44[v21[9]] = *(_QWORD *)&v45[v21[9]];
  v65(&v44[v21[10]], &v45[v21[10]], v64);
  v51 = v21[11];
  v52 = *(void **)&v45[v51];
  v53 = *(void **)&v44[v51];
  *(_QWORD *)&v44[v51] = v52;
  v54 = v52;

  v55 = v21[12];
  v56 = *(void **)&v45[v55];
  v57 = *(void **)&v44[v55];
  *(_QWORD *)&v44[v55] = v56;
  v58 = v56;

  v59 = v21[13];
  v60 = *(void **)&v45[v59];
  v61 = *(void **)&v44[v59];
  *(_QWORD *)&v44[v59] = v60;
  v62 = v60;

  return a1;
}

uint64_t initializeWithTake for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v33 = v9;
  v32(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a2 + v11 + 8);
  *(_QWORD *)v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(v12 + 8) = v14;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(a2 + v11 + 16);
  v15 = (int *)type metadata accessor for WeekResults(0);
  v16 = v15[6];
  v17 = v12 + v16;
  v18 = v13 + v16;
  v19 = sub_1A9CE5F64();
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  *(_QWORD *)(v12 + v15[7]) = *(_QWORD *)(v13 + v15[7]);
  v21 = v15[8];
  v22 = v12 + v21;
  v23 = v13 + v21;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v12 + v15[9]) = *(_QWORD *)(v13 + v15[9]);
  v32(v12 + v15[10], v13 + v15[10], v33);
  *(_QWORD *)(v12 + v15[11]) = *(_QWORD *)(v13 + v15[11]);
  *(_QWORD *)(v12 + v15[12]) = *(_QWORD *)(v13 + v15[12]);
  *(_QWORD *)(v12 + v15[13]) = *(_QWORD *)(v13 + v15[13]);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)(v25 + 8) = v27;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  v20(a1 + v24 + v15[6], v26 + v15[6], v19);
  *(_QWORD *)(v25 + v15[7]) = *(_QWORD *)(v26 + v15[7]);
  v28 = v15[8];
  v29 = v25 + v28;
  v30 = v26 + v28;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v25 + v15[9]) = *(_QWORD *)(v26 + v15[9]);
  v32(v25 + v15[10], v26 + v15[10], v33);
  *(_QWORD *)(v25 + v15[11]) = *(_QWORD *)(v26 + v15[11]);
  *(_QWORD *)(v25 + v15[12]) = *(_QWORD *)(v26 + v15[12]);
  *(_QWORD *)(v25 + v15[13]) = *(_QWORD *)(v26 + v15[13]);
  return a1;
}

uint64_t assignWithTake for TwoWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v46 = v9;
  v45(v7, v8, v9);
  v10 = a3[7];
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  v12 = a3[8];
  v13 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);

  v14 = a3[9];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (int *)type metadata accessor for WeekResults(0);
  v18 = v17[6];
  v19 = v15 + v18;
  v20 = v16 + v18;
  v21 = sub_1A9CE5F64();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40);
  v22(v19, v20, v21);
  *(_QWORD *)(v15 + v17[7]) = *(_QWORD *)(v16 + v17[7]);
  v23 = v17[8];
  v24 = v15 + v23;
  v25 = v16 + v23;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v15 + v17[9]) = *(_QWORD *)(v16 + v17[9]);
  v45(v15 + v17[10], v16 + v17[10], v46);
  v26 = v17[11];
  v27 = *(void **)(v15 + v26);
  *(_QWORD *)(v15 + v26) = *(_QWORD *)(v16 + v26);

  v28 = v17[12];
  v29 = *(void **)(v15 + v28);
  *(_QWORD *)(v15 + v28) = *(_QWORD *)(v16 + v28);

  v30 = v17[13];
  v31 = *(void **)(v15 + v30);
  *(_QWORD *)(v15 + v30) = *(_QWORD *)(v16 + v30);

  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)(a1 + v32) = *(_QWORD *)v34;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  v22(v33 + v17[6], v34 + v17[6], v21);
  *(_QWORD *)(v33 + v17[7]) = *(_QWORD *)(v34 + v17[7]);
  v35 = v17[8];
  v36 = v33 + v35;
  v37 = v34 + v35;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_QWORD *)(v33 + v17[9]) = *(_QWORD *)(v34 + v17[9]);
  v45(v33 + v17[10], v34 + v17[10], v46);
  v38 = v17[11];
  v39 = *(void **)(v33 + v38);
  *(_QWORD *)(v33 + v38) = *(_QWORD *)(v34 + v38);

  v40 = v17[12];
  v41 = *(void **)(v33 + v40);
  *(_QWORD *)(v33 + v40) = *(_QWORD *)(v34 + v40);

  v42 = v17[13];
  v43 = *(void **)(v33 + v42);
  *(_QWORD *)(v33 + v42) = *(_QWORD *)(v34 + v42);

  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekResults()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C3E27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A9CE6444();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for WeekResults(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TwoWeekResults()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C3E328(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_1A9CE6444();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for WeekResults(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A9C3E3C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for WeekResults(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfoProvider.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

id sub_1A9C3E490(_OWORD *a1)
{
  char *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v4 = a1[9];
  *((_OWORD *)v3 + 8) = a1[8];
  *((_OWORD *)v3 + 9) = v4;
  v5 = a1[11];
  *((_OWORD *)v3 + 10) = a1[10];
  *((_OWORD *)v3 + 11) = v5;
  v6 = a1[5];
  *((_OWORD *)v3 + 4) = a1[4];
  *((_OWORD *)v3 + 5) = v6;
  v7 = a1[7];
  *((_OWORD *)v3 + 6) = a1[6];
  *((_OWORD *)v3 + 7) = v7;
  v8 = a1[1];
  *(_OWORD *)v3 = *a1;
  *((_OWORD *)v3 + 1) = v8;
  v9 = a1[3];
  *((_OWORD *)v3 + 2) = a1[2];
  *((_OWORD *)v3 + 3) = v9;
  sub_1A9BD7C48((uint64_t)a1);
  v21.receiver = v1;
  v21.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  v10 = objc_msgSendSuper2(&v21, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = (void *)objc_opt_self();
  v12 = v10;
  v13 = objc_msgSend(v11, sel_clearColor);
  objc_msgSend(v12, sel_setBackgroundColor_, v13);

  objc_msgSend(v12, sel_setContentMode_, 3);
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A9CEB530;
  v15 = sub_1A9CE6AB0();
  v16 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  v17 = sub_1A9CE69C0();
  v18 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v14 + 48) = v17;
  *(_QWORD *)(v14 + 56) = v18;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v19 = v12;
  sub_1A9CE87C0();
  sub_1A9BD7CE4((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v19;
}

void sub_1A9C3E67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_setNeedsDisplay);

  }
}

void sub_1A9C3E72C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  objc_super v12;

  swift_getObjectType();
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  objc_msgSendSuper2(&v12, sel_layoutSubviews);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  __swift_project_value_buffer(v1, (uint64_t)qword_1ED2630B8);
  v2 = v0;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v11);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    objc_msgSend(v2, sel_bounds);
    type metadata accessor for CGRect(0);
    v9 = sub_1A9CE82F8();
    sub_1A9B91D6C(v9, v10, &v11);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Layout subviews in %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);

  }
  else
  {

  }
}

uint64_t type metadata accessor for SleepScheduleClockDial()
{
  return objc_opt_self();
}

void sub_1A9C3E99C(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  CGContext *v17;
  CGContext *v18;
  id v19;
  id v20;
  id v21;
  CGColor *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MidX;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat MidY;
  uint64_t v38;
  objc_super v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v5 = v4;
  swift_getObjectType();
  v39.receiver = v4;
  v39.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  objc_msgSendSuper2(&v39, sel_drawRect_, a1, a2, a3, a4);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v10 = sub_1A9CE6990();
  __swift_project_value_buffer(v10, (uint64_t)qword_1ED2630B8);
  v11 = sub_1A9CE6978();
  v12 = sub_1A9CE8658();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v38 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_1A9CE8D48();
    sub_1A9B91D6C(v15, v16, &v38);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] Redrawing", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v14, -1, -1);
    MEMORY[0x1AF420344](v13, -1, -1);
  }

  v17 = UIGraphicsGetCurrentContext();
  if (v17)
  {
    v18 = v17;
    UIGraphicsPushContext(v17);
    UIGraphicsPushContext(v18);
    v19 = *(id *)&v5[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v20 = objc_msgSend(v5, sel_traitCollection);
    v21 = objc_msgSend(v19, sel_resolvedColorWithTraitCollection_, v20);
    v22 = (CGColor *)objc_msgSend(v21, sel_CGColor);

    CGContextSetFillColorWithColor(v18, v22);
    objc_msgSend(v5, sel_bounds);
    v27 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithOvalInRect_, v23, v24, v25, v26);
    objc_msgSend(v27, sel_fill);

    UIGraphicsPopContext();
    objc_msgSend(v5, sel_bounds);
    x = v40.origin.x;
    y = v40.origin.y;
    width = v40.size.width;
    height = v40.size.height;
    MidX = CGRectGetMidX(v40);
    v41.origin.x = x;
    v41.origin.y = y;
    v41.size.width = width;
    v41.size.height = height;
    objc_msgSend(v5, sel_bounds, CGRectGetMidY(v41));
    v33 = v42.origin.x;
    v34 = v42.origin.y;
    v35 = v42.size.width;
    v36 = v42.size.height;
    CGRectGetMidX(v42);
    v43.origin.x = v33;
    v43.origin.y = v34;
    v43.size.width = v35;
    v43.size.height = v36;
    MidY = CGRectGetMidY(v43);
    CGContextTranslateCTM(v18, MidX, MidY);
    sub_1A9C3ED10(v18);
    sub_1A9C3F000(v18);
    UIGraphicsPopContext();

  }
}

void sub_1A9C3ED10(CGContext *a1)
{
  char *v1;
  char *v3;
  double v4;
  double v5;
  double v6;
  id v7;
  id v8;
  id v9;
  CGColor *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double i;
  id v19;
  char *v20;
  uint64_t v21;
  CGAffineTransform v22;

  UIGraphicsPushContext(a1);
  v3 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v4 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  v5 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  v6 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 56];
  CGContextSetLineWidth(a1, *(CGFloat *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32]);
  CGContextSetLineCap(a1, *((CGLineCap *)v3 + 6));
  v20 = v3;
  v7 = *((id *)v3 + 1);
  v8 = objc_msgSend(v1, sel_traitCollection);
  v9 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v8);
  v10 = (CGColor *)objc_msgSend(v9, sel_CGColor);

  CGContextSetStrokeColorWithColor(a1, v10);
  v21 = 0;
  while (1)
  {
    v11 = *((_QWORD *)v20 + 5);
    if (!v11)
      break;
    if (v11 >= 1)
    {
      v12 = 0;
      do
      {
        v13 = v12 + v11;
        if (__OFADD__(v12, v11))
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        v14 = v5;
        if (v12)
          v14 = v6;
        if (qword_1EEB42CC0 != -1)
          swift_once();
        v15 = *(double *)&qword_1EEB572A8;
        if (qword_1EEB42CB0 != -1)
          swift_once();
        v16 = *(double *)&qword_1EEB57298;
        if (qword_1EEB42CB8 != -1)
          swift_once();
        v17 = ((double)v12 / 60.0 + (double)v21) / 24.0 * v15 + v16;
        for (i = *(double *)&qword_1EEB572A8 - *(double *)&qword_1EEB572A0;
              v17 < *(double *)&qword_1EEB572A0;
        while (*(double *)&qword_1EEB572A8 <= v17)
          v17 = v17 - i;
        v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3508]), sel_init);
        objc_msgSend(v19, sel_moveToPoint_, v4, 0.0);
        objc_msgSend(v19, sel_addLineToPoint_, v4 - v14, 0.0);
        CGAffineTransformMakeRotation(&v22, v17);
        objc_msgSend(v19, sel_applyTransform_, &v22);
        objc_msgSend(v19, sel_stroke);

        v12 = v13;
      }
      while (v13 < 60);
    }
    if (++v21 == 24)
    {
      UIGraphicsPopContext();
      return;
    }
  }
  __break(1u);
}

void sub_1A9C3F000(CGContext *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  double v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  void *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  CGFloat v73;
  int64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  CGFloat v118;
  uint64_t v119;
  void *v120;
  id v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  CGFloat v133;
  int v134;
  CGFloat v135;
  CGFloat v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  id v141;
  id v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  id v149;
  uint64_t v150;
  void *v151;
  id v152;
  void *v153;
  void *v154;
  id v155;
  id v156;
  unint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double i;
  CGPoint v166;
  double x;
  double y;
  CGPoint v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  CGFloat v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  CGContext *v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  CGAffineTransform v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _OWORD v220[2];
  __int128 v221;
  uint64_t v222;
  CGFloat v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _OWORD v228[5];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _OWORD v236[7];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  CGAffineTransform v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  CGPoint v252;

  v2 = v1;
  v4 = sub_1A9CE5EE0();
  v177 = *(_QWORD *)(v4 - 8);
  v178 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v176 = (char *)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v195 = (char *)&v175 - v10;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v7);
  MEMORY[0x1E0C80A78](v11, v12);
  v194 = (char *)&v175 - v13;
  v14 = sub_1A9CE60C0();
  v192 = *(_QWORD *)(v14 - 8);
  v193 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v191 = (char *)&v175 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A9CE6444();
  v189 = *(_QWORD *)(v17 - 8);
  v190 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v188 = (char *)&v175 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v7);
  MEMORY[0x1E0C80A78](v20, v21);
  v187 = (char *)&v175 - v22;
  v23 = sub_1A9CE62E8();
  v204 = *(_QWORD *)(v23 - 8);
  v205 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v203 = (char *)&v175 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1A9CE6360();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v175 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = a1;
  UIGraphicsPushContext(a1);
  sub_1A9CE6348();
  v208 = sub_1A9CE6354();
  v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v31(v30, v26);
  v32 = (void *)objc_opt_self();
  v33 = (void *)sub_1A9CE82B0();
  sub_1A9CE6348();
  v34 = (void *)sub_1A9CE6330();
  v31(v30, v26);
  v35 = objc_msgSend(v32, sel_dateFormatFromTemplate_options_locale_, v33, 0, v34);

  if (v35)
  {
    v36 = sub_1A9CE82E0();
    v38 = v37;

  }
  else
  {
    v38 = -1.15172193e164;
    v36 = 22616;
  }
  *(_QWORD *)&v236[0] = 0;
  *((_QWORD *)&v236[0] + 1) = 0xE000000000000000;
  v39 = HIBYTE(*(_QWORD *)&v38) & 0xFLL;
  if ((*(_QWORD *)&v38 & 0x2000000000000000) == 0)
    v39 = v36 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)&v242.a = v36;
  v242.b = v38;
  v242.c = 0.0;
  *(_QWORD *)&v242.d = v39;
  v40 = sub_1A9CE8370();
  if (v41)
  {
    v42 = v40;
    v43 = v41;
    do
    {
      if ((sub_1A9CE825C() & 1) == 0)
        MEMORY[0x1AF41EF64](v42, v43);
      swift_bridgeObjectRelease();
      v42 = sub_1A9CE8370();
      v43 = v44;
    }
    while (v44);
  }
  swift_bridgeObjectRelease();
  v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v46 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v181 = v45;
  objc_msgSend(v45, sel_setDateFormat_, v46);

  v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  v48 = 12;
  if ((v208 & 1) != 0)
    v48 = 24;
  v210 = v48;
  if (qword_1ED2626A8 != -1)
    goto LABEL_77;
  while (1)
  {
    v49 = (id)qword_1ED264F90;
    v179 = sub_1A9CE6168();
    v185 = v50;

    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB477F8, (uint64_t (*)(uint64_t))sub_1A9C40D48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v202 = v51;
    v52 = swift_allocObject();
    v53 = (void **)MEMORY[0x1E0DC1138];
    v201 = xmmword_1A9CEB530;
    *(_OWORD *)(v52 + 16) = xmmword_1A9CEB530;
    v54 = *v53;
    *(_QWORD *)(v52 + 32) = v54;
    v55 = &v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v56 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
    v232 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
    v233 = v56;
    v57 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
    v234 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
    v235 = v57;
    v58 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
    v228[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
    v229 = v58;
    v59 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
    v230 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
    v231 = v59;
    v60 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
    v228[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v228[1] = v60;
    v61 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
    v228[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
    v228[3] = v61;
    v200 = v54;
    sub_1A9BD7C48((uint64_t)v228);
    v62 = objc_msgSend(v2, sel_traitCollection);
    v63 = (void *)objc_opt_self();
    v64 = *MEMORY[0x1E0DC48F8];
    v183 = *MEMORY[0x1E0DC1400];
    v184 = v63;
    v182 = v64;
    v65 = objc_msgSend(v63, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, (_QWORD)v229);
    if (!v65)
      break;
    v66 = v65;

    sub_1A9BD7CE4((uint64_t)v228);
    v67 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    *(_QWORD *)(v52 + 40) = v66;
    v68 = (void *)*MEMORY[0x1E0DC1140];
    v199 = v67;
    *(_QWORD *)(v52 + 64) = v67;
    *(_QWORD *)(v52 + 72) = v68;
    v69 = (void *)*((_QWORD *)v55 + 15);
    v198 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB47810);
    *(_QWORD *)(v52 + 104) = v198;
    *(_QWORD *)(v52 + 80) = v69;
    v197 = v68;
    v70 = v69;
    v209 = sub_1A9BACA44(v52);
    v71 = *((_QWORD *)v55 + 8);
    if (!v71)
    {
      __break(1u);
LABEL_79:
      __break(1u);
      break;
    }
    if (v71 < 1)
    {
LABEL_74:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      UIGraphicsPopContext();
      return;
    }
    v72 = 0;
    v73 = *((double *)v55 + 16);
    v180 = MEMORY[0x1E0DEE9B8] + 8;
    v196 = v2;
    v206 = v47;
    v211 = v71;
    while (1)
    {
      v74 = __OFADD__(v72, v71) ? ((v72 + v71) >> 63) ^ 0x8000000000000000 : v72 + v71;
      v75 = *((_QWORD *)v55 + 9);
      if (!v75)
        break;
      if (v72 == 0x8000000000000000 && v75 == -1)
        goto LABEL_76;
      if (v72 % v75)
      {
        v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v72 % v210);
        v77 = objc_msgSend(v47, sel_stringFromNumber_, v76);

        if (!v77)
          goto LABEL_21;
        v212 = v74;
        sub_1A9CE82E0();

        v78 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
        swift_bridgeObjectRetain();
        v79 = (void *)sub_1A9CE82B0();
        swift_bridgeObjectRelease();
        type metadata accessor for Key(0);
        sub_1A9C40DB0();
        v80 = (void *)sub_1A9CE8208();
        swift_bridgeObjectRelease();
        v81 = objc_msgSend(v78, sel_initWithString_attributes_, v79, v80);

        goto LABEL_52;
      }
      if ((v208 & 1) != 0)
      {
        v82 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v72 % 24);
        v83 = objc_msgSend(v47, sel_stringFromNumber_, v82);

        if (!v83)
          goto LABEL_21;
        v212 = v74;
        sub_1A9CE82E0();

        v84 = *((_OWORD *)v55 + 9);
        v219 = *((_OWORD *)v55 + 8);
        v220[0] = v84;
        v85 = *((_OWORD *)v55 + 11);
        v220[1] = *((_OWORD *)v55 + 10);
        v221 = v85;
        v86 = *((_OWORD *)v55 + 5);
        v215 = *((_OWORD *)v55 + 4);
        v216 = v86;
        v87 = *((_OWORD *)v55 + 7);
        v217 = *((_OWORD *)v55 + 6);
        v218 = v87;
        v88 = *((_OWORD *)v55 + 1);
        *(_OWORD *)&v213.a = *(_OWORD *)v55;
        *(_OWORD *)&v213.c = v88;
        v89 = *((_OWORD *)v55 + 3);
        *(_OWORD *)&v213.tx = *((_OWORD *)v55 + 2);
        v214 = v89;
        sub_1A9BD7C48((uint64_t)&v213);
        v90 = objc_msgSend(v2, sel_traitCollection);
        v91 = swift_allocObject();
        *(_OWORD *)(v91 + 16) = v201;
        v92 = v200;
        *(_QWORD *)(v91 + 32) = v200;
        v93 = *((_QWORD *)&v216 + 1);
        v94 = v92;
        v95 = objc_msgSend(v184, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v93, v183, 1024, v182, v90);
        if (!v95)
          goto LABEL_79;
        *(_QWORD *)(v91 + 40) = v95;
        v96 = v197;
        *(_QWORD *)(v91 + 64) = v199;
        *(_QWORD *)(v91 + 72) = v96;
        v97 = (void *)v218;
        *(_QWORD *)(v91 + 104) = v198;
        *(_QWORD *)(v91 + 80) = v97;
        v98 = v96;
        v99 = v97;
        sub_1A9BACA44(v91);

        sub_1A9BD7CE4((uint64_t)&v213);
        v100 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
        v101 = (void *)sub_1A9CE82B0();
        swift_bridgeObjectRelease();
        type metadata accessor for Key(0);
        sub_1A9C40DB0();
        v102 = (void *)sub_1A9CE8208();
        swift_bridgeObjectRelease();
        v81 = objc_msgSend(v100, sel_initWithString_attributes_, v101, v102);

        v2 = v196;
        goto LABEL_51;
      }
      v212 = v74;
      v103 = v188;
      sub_1A9CE6420();
      v105 = v189;
      v104 = v190;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v194, 1, 1, v190);
      v106 = sub_1A9CE6498();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v195, 1, 1, v106);
      v107 = v191;
      sub_1A9CE60A8();
      v108 = v187;
      sub_1A9CE63E4();
      v109 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t))(v192 + 8))(v107, v193);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
      v110 = v204;
      v111 = v108;
      v112 = v205;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v111, 1, v205) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v203, v109, v112);
        if (v72 != 12)
          goto LABEL_42;
        *(_QWORD *)&v213.a = v179;
        v213.b = v185;
        v113 = v176;
        sub_1A9CE5EBC();
        sub_1A9BA8EA4();
        v114 = sub_1A9CE88C8();
        v116 = v115;
        (*(void (**)(char *, uint64_t))(v177 + 8))(v113, v178);
        swift_bridgeObjectRelease();
        v117 = HIBYTE(v116) & 0xF;
        if ((v116 & 0x2000000000000000) == 0)
          v117 = v114 & 0xFFFFFFFFFFFFLL;
        if (v117)
        {
          v118 = v185;
          swift_bridgeObjectRetain();
          v119 = v179;
        }
        else
        {
LABEL_42:
          v120 = (void *)sub_1A9CE6258();
          v121 = objc_msgSend(v181, sel_stringFromDate_, v120);

          v119 = sub_1A9CE82E0();
          v118 = v122;

        }
        v226 = 0;
        v227 = 0xE000000000000000;
        v123 = HIBYTE(*(_QWORD *)&v118) & 0xFLL;
        if ((*(_QWORD *)&v118 & 0x2000000000000000) == 0)
          v123 = v119 & 0xFFFFFFFFFFFFLL;
        v186 = v119;
        v222 = v119;
        v223 = v118;
        v224 = 0;
        v225 = v123;
        swift_bridgeObjectRetain();
        v124 = sub_1A9CE8370();
        if (v125)
        {
          v126 = v124;
          v127 = v125;
          do
          {
            if ((sub_1A9CE8268() & 1) == 0)
              MEMORY[0x1AF41EF64](v126, v127);
            swift_bridgeObjectRelease();
            v126 = sub_1A9CE8370();
            v127 = v128;
          }
          while (v128);
        }
        swift_bridgeObjectRelease();
        v129 = sub_1A9CE8328();
        swift_bridgeObjectRelease();
        v131 = *((_QWORD *)v55 + 12);
        v130 = *((_QWORD *)v55 + 13);
        v132 = v130 < v129;
        v133 = *((double *)v55 + 2);
        v134 = *((_DWORD *)v55 + 6);
        v135 = *((double *)v55 + 4);
        v136 = *((double *)v55 + 5);
        v137 = *((_QWORD *)v55 + 18);
        v138 = *((_QWORD *)v55 + 21);
        *(_OWORD *)&v213.a = *(_OWORD *)v55;
        v213.c = v133;
        LODWORD(v213.d) = v134;
        v213.tx = v135;
        v213.ty = v136;
        v139 = *((_OWORD *)v55 + 4);
        v214 = *((_OWORD *)v55 + 3);
        v215 = v139;
        v216 = *((_OWORD *)v55 + 5);
        *(_QWORD *)&v217 = v131;
        *((_QWORD *)&v217 + 1) = v130;
        v140 = *((_OWORD *)v55 + 8);
        v218 = *((_OWORD *)v55 + 7);
        v219 = v140;
        *(_QWORD *)&v220[0] = v137;
        *(_OWORD *)((char *)v220 + 8) = *(_OWORD *)(v55 + 152);
        *((_QWORD *)&v220[1] + 1) = v138;
        v221 = *((_OWORD *)v55 + 11);
        v247 = v218;
        v246 = v217;
        v244 = v215;
        v245 = v216;
        v242 = v213;
        v243 = v214;
        v251 = v221;
        v250 = v220[1];
        v249 = v220[0];
        v248 = v140;
        sub_1A9BD7C48((uint64_t)&v213);
        v2 = v196;
        v141 = objc_msgSend(v196, sel_traitCollection);
        v142 = sub_1A9C40298(v132, (uint64_t)v141);

        sub_1A9BD7CE4((uint64_t)&v213);
        v143 = *((_OWORD *)v55 + 9);
        v238 = *((_OWORD *)v55 + 8);
        v239 = v143;
        v144 = *((_OWORD *)v55 + 11);
        v240 = *((_OWORD *)v55 + 10);
        v241 = v144;
        v145 = *((_OWORD *)v55 + 5);
        v236[4] = *((_OWORD *)v55 + 4);
        v236[5] = v145;
        v146 = *((_OWORD *)v55 + 7);
        v236[6] = *((_OWORD *)v55 + 6);
        v237 = v146;
        v147 = *((_OWORD *)v55 + 1);
        v236[0] = *(_OWORD *)v55;
        v236[1] = v147;
        v148 = *((_OWORD *)v55 + 3);
        v236[2] = *((_OWORD *)v55 + 2);
        v236[3] = v148;
        sub_1A9BD7C48((uint64_t)v236);
        v149 = objc_msgSend(v2, sel_traitCollection);
        v150 = swift_allocObject();
        *(_OWORD *)(v150 + 16) = v201;
        v151 = v200;
        *(_QWORD *)(v150 + 32) = v200;
        v152 = v151;
        *(_QWORD *)(v150 + 40) = sub_1A9C40754(v132, (uint64_t)v149);
        v153 = v197;
        *(_QWORD *)(v150 + 64) = v199;
        *(_QWORD *)(v150 + 72) = v153;
        v154 = (void *)v237;
        *(_QWORD *)(v150 + 104) = v198;
        *(_QWORD *)(v150 + 80) = v154;
        v155 = v153;
        v156 = v154;
        v157 = sub_1A9BACA44(v150);

        sub_1A9BD7CE4((uint64_t)v236);
        sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
        v81 = (id)MEMORY[0x1AF41F36C](v186, *(_QWORD *)&v118, v142, v157);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v204 + 8))(v203, v205);
LABEL_51:
        v47 = v206;
LABEL_52:
        objc_msgSend(v81, sel_size);
        v159 = v158;
        v161 = v160;
        if (qword_1EEB42CC0 != -1)
          swift_once();
        v162 = *(double *)&qword_1EEB572A8;
        v71 = v211;
        if (qword_1EEB42CB0 != -1)
          swift_once();
        v163 = *(double *)&qword_1EEB57298;
        if (qword_1EEB42CB8 != -1)
          swift_once();
        v164 = (double)v72 / 24.0 * v162 + v163;
        for (i = *(double *)&qword_1EEB572A8 - *(double *)&qword_1EEB572A0;
              v164 < *(double *)&qword_1EEB572A0;
        while (*(double *)&qword_1EEB572A8 <= v164)
          v164 = v164 - i;
        CGAffineTransformMakeRotation(&v213, v164);
        v252.y = 0.0;
        v252.x = v73;
        v166 = CGPointApplyAffineTransform(v252, &v213);
        CGAffineTransformMakeTranslation(&v213, v159 * -0.5, v161 * -0.5);
        v169 = CGPointApplyAffineTransform(v166, &v213);
        y = v169.y;
        x = v169.x;
        v170 = *((double *)v55 + 16) + (*((double *)v55 + 2) - *((double *)v55 + 16)) * 0.5;
        if (v169.x < -v170)
          x = -v170;
        v171 = v159 + x;
        if (v171 >= v170)
          v171 = *((double *)v55 + 16) + (*((double *)v55 + 2) - *((double *)v55 + 16)) * 0.5;
        v172 = v171 - v159;
        if (v169.y < -v170)
          y = -v170;
        v173 = v161 + y;
        if (v173 >= v170)
          v173 = *((double *)v55 + 16) + (*((double *)v55 + 2) - *((double *)v55 + 16)) * 0.5;
        v174 = v173 - v161;
        objc_msgSend(v81, sel_drawAtPoint_, v172, v173 - v161);
        if (v72 == 12)
        {
          sub_1A9C405A4(v207, v174);
        }
        else if (!v72)
        {
          sub_1A9C403F8(v207, v161 + v174);
        }

        goto LABEL_20;
      }
      sub_1A9BD5744(v109);
      v47 = v206;
      v71 = v211;
LABEL_20:
      v74 = v212;
LABEL_21:
      v72 = v74;
      if (v74 >= 24)
        goto LABEL_74;
    }
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_once();
  }
  __break(1u);
}

id SleepScheduleClockDial.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockDial.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleClockDial.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleClockDial();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1A9C40298(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id result;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB477F8, (uint64_t (*)(uint64_t))sub_1A9C40D48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB530;
  v6 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v7 = 88;
  if ((a1 & 1) != 0)
    v7 = 96;
  v8 = *(_QWORD *)(v2 + v7);
  v9 = (void *)objc_opt_self();
  v10 = *MEMORY[0x1E0DC1400];
  v11 = *MEMORY[0x1E0DC48F8];
  v12 = v6;
  result = objc_msgSend(v9, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v8, v10, 1024, v11, a2);
  if (result)
  {
    v14 = result;
    v15 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    *(_QWORD *)(inited + 40) = v14;
    v16 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 64) = v15;
    *(_QWORD *)(inited + 72) = v16;
    v17 = *(void **)(v2 + 112);
    *(_QWORD *)(inited + 104) = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB47810);
    *(_QWORD *)(inited + 80) = v17;
    v18 = v16;
    v19 = v17;
    return (id)sub_1A9BACA44(inited);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A9C403F8(CGContext *a1, double a2)
{
  char *v2;
  double *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  _OWORD v18[10];
  id v19[2];
  __int128 v20;

  UIGraphicsPushContext(a1);
  v4 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v5 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
  v18[8] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
  v18[9] = v5;
  v6 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
  *(_OWORD *)v19 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
  v20 = v6;
  v7 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
  v18[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
  v18[5] = v7;
  v8 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
  v18[6] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
  v18[7] = v8;
  v9 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  v18[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v18[1] = v9;
  v10 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  v18[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
  v18[3] = v10;
  sub_1A9BD7C48((uint64_t)v18);
  v11 = objc_msgSend(v2, sel_traitCollection);
  v12 = objc_msgSend(v19[0], sel_resolvedColorWithTraitCollection_, v11);
  swift_bridgeObjectRetain();
  v13 = v11;
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_compatibleWithTraitCollection_, v14, v13);

  if (v15)
  {
    v16 = objc_msgSend(v15, sel_imageWithTintColor_renderingMode_, v12, 2);

    sub_1A9BD7CE4((uint64_t)v18);
    if (v16)
    {
      objc_msgSend(v16, sel_size);
      objc_msgSend(v16, sel_drawAtPoint_, v17 * -0.5, v4[17] + a2);

    }
  }
  else
  {

    sub_1A9BD7CE4((uint64_t)v18);
  }
  UIGraphicsPopContext();
}

void sub_1A9C405A4(CGContext *a1, double a2)
{
  char *v2;
  double *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  double v18;
  _OWORD v19[11];
  id v20[2];

  UIGraphicsPushContext(a1);
  v4 = (double *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v5 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
  v19[8] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
  v19[9] = v5;
  v6 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
  v19[10] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
  *(_OWORD *)v20 = v6;
  v7 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
  v19[4] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
  v19[5] = v7;
  v8 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
  v19[6] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
  v19[7] = v8;
  v9 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
  v19[0] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
  v19[1] = v9;
  v10 = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
  v19[2] = *(_OWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
  v19[3] = v10;
  sub_1A9BD7C48((uint64_t)v19);
  v11 = objc_msgSend(v2, sel_traitCollection);
  v12 = objc_msgSend(v20[1], sel_resolvedColorWithTraitCollection_, v11);
  swift_bridgeObjectRetain();
  v13 = v11;
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_compatibleWithTraitCollection_, v14, v13);

  if (v15)
  {
    v16 = objc_msgSend(v15, sel_imageWithTintColor_renderingMode_, v12, 2);

    sub_1A9BD7CE4((uint64_t)v19);
    if (v16)
    {
      objc_msgSend(v16, sel_size);
      objc_msgSend(v16, sel_drawAtPoint_, v17 * -0.5, a2 - v18 - v4[17]);

    }
  }
  else
  {

    sub_1A9BD7CE4((uint64_t)v19);
  }
  UIGraphicsPopContext();
}

id sub_1A9C40754(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id result;
  void *v8;
  id v9;
  Class isa;
  Class v11;
  id v12;

  v4 = 88;
  if ((a1 & 1) != 0)
    v4 = 96;
  v5 = *(_QWORD *)(v2 + v4);
  v6 = (void *)objc_opt_self();
  result = objc_msgSend(v6, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, v5, *MEMORY[0x1E0DC1400], 1024, *MEMORY[0x1E0DC48F8], a2);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, sel_fontDescriptor);
    isa = UIFontDescriptor.addingLowercaseSmallCapsAttributes()().super.isa;
    v11 = UIFontDescriptor.addingUppercaseSmallCapsAttributes()().super.isa;

    v12 = objc_msgSend(v6, sel_fontWithDescriptor_size_, v11, 0.0);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t method lookup function for SleepScheduleClockDial()
{
  return swift_lookUpClassMethod();
}

void destroy for SleepScheduleClockDial.Configuration(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  __int128 v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v25;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v7 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v9 = *(void **)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v8;
  v10 = *(void **)(a2 + 112);
  v11 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  v14 = *(void **)(a2 + 160);
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v13;
  v25 = *(void **)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v25;
  v15 = v3;
  v16 = v4;
  v17 = v6;
  v18 = v7;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  swift_bridgeObjectRetain();
  v22 = v14;
  swift_bridgeObjectRetain();
  v23 = v25;
  return a1;
}

uint64_t assignWithCopy for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v10 = *(void **)(a2 + 80);
  v11 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 88);
  v14 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  v15 = v13;

  v16 = *(void **)(a2 + 96);
  v17 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  v18 = v16;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v19 = *(void **)(a2 + 112);
  v20 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  v21 = v19;

  v22 = *(void **)(a2 + 120);
  v23 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v22;
  v24 = v22;

  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = *(void **)(a2 + 160);
  v26 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v25;
  v27 = v25;

  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = *(void **)(a2 + 184);
  v29 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v28;
  v30 = v28;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for SleepScheduleClockDial.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;

  v6 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  v7 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);

  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);

  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);

  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockDial.Configuration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleClockDial.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockDial.Configuration()
{
  return &type metadata for SleepScheduleClockDial.Configuration;
}

uint64_t sub_1A9C40D1C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C40D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9C3E67C(a1, a2, v2);
}

void sub_1A9C40D48()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB47800)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB47800);
  }
}

unint64_t sub_1A9C40DB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB434C0;
  if (!qword_1EEB434C0)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1AF420284](&unk_1A9CEC218, v1);
    atomic_store(result, (unint64_t *)&qword_1EEB434C0);
  }
  return result;
}

id sub_1A9C40DF8@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id result;
  id v26;
  uint64_t aBlock;
  uint64_t v28;
  id (*v29)(uint64_t, void *);
  void *v30;
  id (*v31)(void *);
  uint64_t v32;

  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_systemBackgroundColor);
  v4 = objc_msgSend(v2, sel_secondarySystemBackgroundColor);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v31 = sub_1A9BC0924;
  v32 = v5;
  v7 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v28 = 1107296256;
  v29 = sub_1A9C21C90;
  v30 = &block_descriptor_16;
  v8 = _Block_copy(&aBlock);
  v9 = v3;
  v10 = v4;
  v26 = objc_msgSend(v6, sel_initWithDynamicProvider_, v8);
  _Block_release(v8);

  swift_release();
  v11 = objc_msgSend(v2, sel_systemGray4Color);
  v12 = objc_msgSend(v2, sel_systemGray2Color);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v31 = sub_1A9C41180;
  v32 = v13;
  aBlock = v7;
  v28 = 1107296256;
  v29 = sub_1A9C21C90;
  v30 = &block_descriptor_10_0;
  v15 = _Block_copy(&aBlock);
  v16 = v11;
  v17 = v12;
  v18 = objc_msgSend(v14, sel_initWithDynamicProvider_, v15);
  _Block_release(v15);

  swift_release();
  v19 = (void *)*MEMORY[0x1E0DC4AB8];
  v20 = (id)*MEMORY[0x1E0DC4B10];
  v21 = v19;
  v22 = objc_msgSend(v2, sel_labelColor);
  v23 = objc_msgSend(v2, sel_systemGrayColor);
  v24 = objc_msgSend(v2, sel_hk_sleepKeyColor);
  result = objc_msgSend(v2, sel_systemYellowColor);
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = 0x4059C00000000000;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0x4000000000000000;
  *(_QWORD *)(a1 + 40) = 15;
  *(_OWORD *)(a1 + 48) = xmmword_1A9CF2550;
  *(_OWORD *)(a1 + 64) = xmmword_1A9CF2560;
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 120) = v23;
  *(_OWORD *)(a1 + 128) = xmmword_1A9CF2570;
  *(_QWORD *)(a1 + 144) = 0x73656C6B72617073;
  *(_QWORD *)(a1 + 152) = 0xE800000000000000;
  *(_QWORD *)(a1 + 160) = v24;
  strcpy((char *)(a1 + 168), "sun.max.fill");
  *(_BYTE *)(a1 + 181) = 0;
  *(_WORD *)(a1 + 182) = -5120;
  *(_QWORD *)(a1 + 184) = result;
  return result;
}

uint64_t sub_1A9C41130()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

double TimeInBedComputable.timeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(void))(a2 + 24))();
  return (double)v3 * 60.0 + (double)v2 * 60.0 * 60.0;
}

_QWORD *TimeInBedComputable.timeInBed.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD *__return_ptr);
  uint64_t v5;
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v4 = *(void (**)(_QWORD *__return_ptr))(a2 + 16);
  v4(v24);
  v5 = v24[0];
  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8);
  result = v6(&v22, a1, a2);
  v8 = v22;
  v9 = v5 - v22;
  if (__OFSUB__(v5, v22))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v4)(v24, a1, a2);
  v10 = v24[1];
  result = v6(&v22, a1, a2);
  v11 = v10 - v23;
  if (__OFSUB__(v10, v23))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v11 < 0)
  {
    v12 = -60;
    if (v11 > -60)
      v12 = v10 - v23;
    v13 = v23 + v12;
    if (v23 + v12 == v10)
      v14 = v10;
    else
      v14 = v10 + 1;
    v15 = v13 == v10;
    v16 = (v13 - v14) / 0x3CuLL;
    if (!v15)
      ++v16;
    while ((v5 ^ 0x8000000000000000) - v8 > v16)
    {
      --v9;
      v18 = __OFADD__(v11, 60);
      v17 = v11 + 60 < 0;
      v11 += 60;
      if (v17 == v18)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_13:
  if ((v9 & 0x8000000000000000) != 0)
  {
    v19 = -24;
    if ((uint64_t)v9 > -24)
      v19 = v9;
    if (v9 >= 0xFFFFFFFFFFFFFFE8)
      v20 = v9;
    else
      v20 = v9 + 1;
    v21 = (v19 - v20) / 0x18;
    if (v9 < 0xFFFFFFFFFFFFFFE8)
      ++v21;
    v9 += 24 * v21 + 24;
  }
  else if (v9 >= 0x18)
  {
    return (_QWORD *)((v9 - 24) % 0x18);
  }
  return (_QWORD *)v9;
}

void TimeInBedComputable.actualTimeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  id v28;
  char *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  sub_1A9BB7054(0, &qword_1EEB44250, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v5, v6);
  v40 = (char *)&v31 - v7;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - v10;
  v39 = sub_1A9CE60C0();
  v12 = *(_QWORD *)(v39 - 8);
  v14 = MEMORY[0x1E0C80A78](v39, v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v31 - v18;
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8530]), sel_init);
  v21 = *MEMORY[0x1E0DA8478];
  v37 = v20;
  objc_msgSend(v20, sel_setWeekdays_, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v41, a1, a2);
  v34 = v16;
  v35 = v12;
  v38 = v2;
  v36 = a1;
  if (v42 == 60 && __OFADD__(v41, 1))
  {
    __break(1u);
  }
  else
  {
    v22 = sub_1A9CE6444();
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    v33(v11, 1, 1, v22);
    v23 = sub_1A9CE6498();
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v32(v40, 1, 1, v23);
    sub_1A9CE60A8();
    v24 = (void *)sub_1A9CE6018();
    v25 = *(void (**)(char *, uint64_t))(v35 + 8);
    v26 = v19;
    v27 = v39;
    v25(v26, v39);
    v28 = v37;
    objc_msgSend(v37, sel_setWakeUpComponents_, v24);

    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v41, v36, a2);
    if (v42 != 60 || !__OFADD__(v41, 1))
    {
      v33(v11, 1, 1, v22);
      v32(v40, 1, 1, v23);
      v29 = v34;
      sub_1A9CE60A8();
      v30 = (void *)sub_1A9CE6018();
      v25(v29, v27);
      objc_msgSend(v28, sel_setBedtimeComponents_, v30);

      objc_msgSend(v28, sel_actualSleepInterval);
      return;
    }
  }
  __break(1u);
}

uint64_t dispatch thunk of TimeInBedComputable.bedtime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeInBedComputable.wakeUp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeInBedComputable.timeInBed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeInBedComputable.actualTimeIntervalInBed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unint64_t sub_1A9C4176C()
{
  return sub_1A9C6CE04();
}

void sub_1A9C417A4()
{
  sub_1A9C29A5C();
}

uint64_t destroy for HorizontalGridLines(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1A9BAAED8(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t initializeWithCopy for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A9BAADF4(v6, v7);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = v7;
  return a1;
}

uint64_t assignWithCopy for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(v2 + 80);
  LOBYTE(v2) = *(_BYTE *)(v2 + 88);
  sub_1A9BAADF4(v5, v2);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = v2;
  sub_1A9BAAED8(v6, v7);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for HorizontalGridLines(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v5 = *(_BYTE *)(a2 + 88);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v5;
  sub_1A9BAAED8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalGridLines(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalGridLines(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalGridLines()
{
  return &type metadata for HorizontalGridLines;
}

uint64_t sub_1A9C41AA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C41AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_1A9CE7008();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  sub_1A9C41F3C();
  result = MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 8);
  v17 = v16 - *(_QWORD *)a2;
  if (__OFSUB__(v16, *(_QWORD *)a2))
  {
    __break(1u);
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v17 == 0x8000000000000000 && v18 == -1)
    goto LABEL_14;
  v20 = v17 / v18;
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v29 = 0;
      v30 = v22;
      v27 = v13;
      v28 = result;
      swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
      v23 = (*(unsigned __int8 *)(v7 + 80) + 105) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v24 = (_OWORD *)swift_allocObject();
      v25 = *(_OWORD *)(a2 + 48);
      v24[3] = *(_OWORD *)(a2 + 32);
      v24[4] = v25;
      v24[5] = *(_OWORD *)(a2 + 64);
      *(_OWORD *)((char *)v24 + 89) = *(_OWORD *)(a2 + 73);
      v26 = *(_OWORD *)(a2 + 16);
      v24[1] = *(_OWORD *)a2;
      v24[2] = v26;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v24 + v23, (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      sub_1A9C41EF0(a2);
      sub_1A9BAAB64(0, &qword_1ED262A20, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
      sub_1A9C41FEC();
      sub_1A9BA3FD0();
      sub_1A9C42138();
      sub_1A9CE7F50();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(a3, v15, v28);
    }
    goto LABEL_13;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1A9C41CD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *a1;
  result = (*(uint64_t (**)(uint64_t))(a2 + 64))(*a1);
  if ((result & 1) == 0)
  {
    v22 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 0;
    v10 = 0;
    v13 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  sub_1A9BAADF4(v11, v12);
  v13 = sub_1A9C82AFC(v11, v12);
  sub_1A9BAAED8(v11, v12);
  sub_1A9CE6FFC();
  v15 = v14;
  result = sub_1A9CE6FFC();
  v17 = *(_QWORD *)(a2 + 8);
  v18 = v17 - *(_QWORD *)a2;
  if (__OFSUB__(v17, *(_QWORD *)a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(a2 + 16);
  if (!v19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v18 != 0x8000000000000000 || v19 != -1)
  {
    v20 = v15 * 0.5;
    v21 = v16 * 0.5 - v16 / (double)(v18 / v19) * (double)v5;
    v22 = v23;
LABEL_8:
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v8;
    *(_QWORD *)(a3 + 32) = v10;
    *(double *)(a3 + 40) = v13;
    *(double *)(a3 + 48) = v20;
    *(double *)(a3 + 56) = v21;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A9C41E24@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  _OWORD v10[2];

  v3 = v1[3];
  v9[2] = v1[2];
  v9[3] = v3;
  v10[0] = v1[4];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v1 + 73);
  v4 = v1[1];
  v9[0] = *v1;
  v9[1] = v4;
  v5 = (_OWORD *)swift_allocObject();
  v6 = v1[3];
  v5[3] = v1[2];
  v5[4] = v6;
  v5[5] = v1[4];
  *(_OWORD *)((char *)v5 + 89) = *(_OWORD *)((char *)v1 + 73);
  v7 = v1[1];
  v5[1] = *v1;
  v5[2] = v7;
  *a1 = sub_1A9C41EE8;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v5;
  return sub_1A9C41EF0((uint64_t)v9);
}

uint64_t sub_1A9C41EB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_1A9BAAED8(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  return swift_deallocObject();
}

uint64_t sub_1A9C41EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A9C41AB4(a1, v2 + 16, a2);
}

uint64_t sub_1A9C41EF0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A9BAADF4(v2, v3);
  return a1;
}

void sub_1A9C41F3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47818)
  {
    sub_1A9BAAB64(255, &qword_1ED262A20, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1A9C41FEC();
    sub_1A9BA3FD0();
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47818);
  }
}

void sub_1A9C41FEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47820)
  {
    sub_1A9BAAB64(255, &qword_1EEB47828, (uint64_t)&type metadata for HorizontalLine, MEMORY[0x1E0CD9DB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47820);
  }
}

uint64_t sub_1A9C42060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A9CE7008();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 105) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1A9BAAED8(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A9C420E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1A9CE7008();
  return sub_1A9C41CD0(a1, v2 + 16, a2);
}

uint64_t sub_1A9C42138()
{
  return sub_1A9BA409C(&qword_1EEB47830, (uint64_t (*)(uint64_t))sub_1A9C41FEC, (uint64_t (*)(void))sub_1A9C4215C, MEMORY[0x1E0CE0798]);
}

unint64_t sub_1A9C4215C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB47838;
  if (!qword_1EEB47838)
  {
    sub_1A9BAAB64(255, &qword_1EEB47828, (uint64_t)&type metadata for HorizontalLine, MEMORY[0x1E0CD9DB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9C421E4();
    v3[1] = sub_1A9BA41BC();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47838);
  }
  return result;
}

unint64_t sub_1A9C421E4()
{
  unint64_t result;

  result = qword_1EEB47840;
  if (!qword_1EEB47840)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2728, &type metadata for HorizontalLine);
    atomic_store(result, (unint64_t *)&qword_1EEB47840);
  }
  return result;
}

double sub_1A9C42228@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double *v5;
  double *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double MaxY;
  __int128 v18;
  double result;
  __int128 v20;
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  char v30;
  _BYTE v31[40];
  CGRect v32;
  CGRect v33;
  CGRect v34;

  v6 = v5;
  v12 = sub_1A9CE8B8C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE7938();
  v32.origin.x = a2;
  v32.origin.y = a3;
  v32.size.width = a4;
  v32.size.height = a5;
  MaxY = CGRectGetMaxY(v32);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0DED508], v12);
  CGFloat.rounded(_:toScale:)((uint64_t)v16, v6[5], MaxY);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v33.origin.x = a2;
  v33.origin.y = a3;
  v33.size.width = a4;
  v33.size.height = a5;
  CGRectGetMinX(v33);
  sub_1A9CE7920();
  v34.origin.x = a2;
  v34.origin.y = a3;
  v34.size.width = a4;
  v34.size.height = a5;
  CGRectGetMaxX(v34);
  sub_1A9CE792C();
  v29[0] = v21[0];
  v29[1] = v21[1];
  v30 = v22;
  v18 = *((_OWORD *)v6 + 1);
  v26 = *(_OWORD *)v6;
  v27 = v18;
  v28 = *((_QWORD *)v6 + 4);
  sub_1A9C428A8((uint64_t)v29, (uint64_t)v31);
  sub_1A9C428FC((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C428E4);
  sub_1A9CE7914();
  sub_1A9C428FC((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C42934);
  sub_1A9C428FC((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C42934);
  result = *(double *)&v23;
  v20 = v24;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 32) = v25;
  return result;
}

double sub_1A9C42408@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1A9C42228((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_1A9C42448()
{
  sub_1A9C42864();
  return sub_1A9CE7DB8();
}

uint64_t sub_1A9C42498()
{
  sub_1A9C42864();
  return sub_1A9CE7D88();
}

uint64_t sub_1A9C424E8()
{
  sub_1A9C42864();
  return sub_1A9CE7DA0();
}

uint64_t initializeWithCopy for HorizontalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HorizontalLine(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for HorizontalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for HorizontalLine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HorizontalLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HorizontalLine()
{
  return &type metadata for HorizontalLine;
}

uint64_t sub_1A9C426C8()
{
  return sub_1A9B92B9C(&qword_1EEB47848, (uint64_t (*)(uint64_t))sub_1A9C426F4, MEMORY[0x1E0CD9318]);
}

void sub_1A9C426F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47850)
  {
    sub_1A9C41F3C();
    sub_1A9BA409C(&qword_1EEB47858, (uint64_t (*)(uint64_t))sub_1A9C41F3C, sub_1A9C42138, MEMORY[0x1E0CDFEE8]);
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47850);
  }
}

unint64_t sub_1A9C42778()
{
  unint64_t result;

  result = qword_1EEB47860;
  if (!qword_1EEB47860)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2688, &type metadata for HorizontalLine);
    atomic_store(result, (unint64_t *)&qword_1EEB47860);
  }
  return result;
}

uint64_t sub_1A9C427C0()
{
  return sub_1A9B92B9C(&qword_1EEB47868, (uint64_t (*)(uint64_t))sub_1A9C427EC, MEMORY[0x1E0CD8668]);
}

void sub_1A9C427EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47870)
  {
    sub_1A9C42864();
    v0 = sub_1A9CE6F54();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47870);
  }
}

unint64_t sub_1A9C42864()
{
  unint64_t result;

  result = qword_1EEB47878;
  if (!qword_1EEB47878)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF26D8, &type metadata for HorizontalLine);
    atomic_store(result, (unint64_t *)&qword_1EEB47878);
  }
  return result;
}

uint64_t sub_1A9C428A8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CDDA08] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1A9C428E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_retain();
  return result;
}

uint64_t sub_1A9C428FC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_1A9C42934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_release();
  return result;
}

Swift::String __swiftcall LocalizedString(_:table:comment:)(Swift::String _, SleepHealthUI::LocalizedStringTable table, Swift::String comment)
{
  uint64_t v3;
  void *v4;
  Swift::String result;

  v3 = sub_1A9CE6168();
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

id static LocalizedStringTable.featureTable(feature:bundle:)@<X0>(void *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD v6[2];

  strcpy((char *)v6, "Localizable-");
  BYTE5(v6[1]) = 0;
  HIWORD(v6[1]) = -5120;
  sub_1A9CE8340();
  v3 = v6[1];
  *a2 = v6[0];
  a2[1] = v3;
  a2[2] = a1;
  return a1;
}

id static LocalizedStringTable.defaultTable(bundle:)@<X0>(id a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0x617A696C61636F4CLL;
  a2[1] = 0xEB00000000656C62;
  a2[2] = a1;
  return a1;
}

_QWORD *assignWithCopy for LocalizedStringTable(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringTable()
{
  return &type metadata for LocalizedStringTable;
}

uint64_t sub_1A9C42A80()
{
  uint64_t result;
  uint64_t v1;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for ObservableNotification();
    sub_1A9BE4B60(&qword_1EEB479D8, v1, (uint64_t (*)(uint64_t))type metadata accessor for ObservableNotification, (uint64_t)&protocol conformance descriptor for ObservableNotification);
    sub_1A9CE6D98();
    swift_release();
    sub_1A9CE6E10();
    return swift_release();
  }
  return result;
}

uint64_t ObservableNotification.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  swift_release();
  return v0;
}

uint64_t ObservableNotification.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C42BB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ObservableNotification();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t static ObservableNotification.contentSizeObserver.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v0 = sub_1A9CE8778();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)*MEMORY[0x1E0DC48E8];
  type metadata accessor for ObservableNotification();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  v8 = (void *)objc_opt_self();
  v9 = v6;
  v10 = objc_msgSend(v8, sel_defaultCenter);
  sub_1A9CE8784();

  swift_allocObject();
  swift_weakInit();
  sub_1A9BE4B60(&qword_1ED2632E0, 255, v1, MEMORY[0x1E0CB1F20]);
  v11 = sub_1A9CE6EC4();

  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  *(_QWORD *)(v7 + 16) = v11;
  swift_release();
  return v7;
}

uint64_t type metadata accessor for ObservableNotification()
{
  return objc_opt_self();
}

uint64_t sub_1A9C42D78()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C42D9C()
{
  return sub_1A9C42A80();
}

uint64_t sub_1A9C42DA4(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  if (a2)
  {
    v7 = (void *)result;
    type metadata accessor for ObservableDarwinNotification();
    sub_1A9BE4B60(&qword_1EEB479E0, v8, (uint64_t (*)(uint64_t))type metadata accessor for ObservableDarwinNotification, (uint64_t)&protocol conformance descriptor for ObservableDarwinNotification);
    swift_retain();
    v9 = v7;
    v10 = a3;
    v11 = a5;
    sub_1A9CE6D98();
    sub_1A9CE6E10();

    swift_release();
    return swift_release();
  }
  return result;
}

const void *ObservableDarwinNotification.deinit()
{
  const void *v0;
  __CFNotificationCenter *v1;

  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  return v0;
}

uint64_t ObservableDarwinNotification.__deallocating_deinit()
{
  const void *v0;
  __CFNotificationCenter *v1;

  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  return swift_deallocClassInstance();
}

uint64_t sub_1A9C42EDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ObservableDarwinNotification();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t method lookup function for ObservableNotification()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for ObservableDarwinNotification()
{
  return objc_opt_self();
}

uint64_t method lookup function for ObservableDarwinNotification()
{
  return swift_lookUpClassMethod();
}

id static UIAlertController.overlappingOverrideOccurrenceAlert(dismissHandler:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t aBlock;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v4 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v5 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, v5, 0, 0, 0xE000000000000000);

  v7 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_1A9C0344C(a1);
  v9 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v23 = sub_1A9C437F8;
  v24 = v8;
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = sub_1A9C432C8;
  v22 = &block_descriptor_17;
  v10 = _Block_copy(&aBlock);
  swift_release();
  v11 = (void *)objc_opt_self();
  v12 = objc_msgSend(v11, sel_actionWithTitle_style_handler_, v9, 0, v10, 0xE000000000000000);
  _Block_release(v10);

  objc_msgSend(v6, sel_addAction_, v12);
  v13 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  sub_1A9C0344C(a1);
  v15 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v23 = sub_1A9C4381C;
  v24 = v14;
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = sub_1A9C432C8;
  v22 = &block_descriptor_6_2;
  v16 = _Block_copy(&aBlock);
  swift_release();
  v17 = objc_msgSend(v11, sel_actionWithTitle_style_handler_, v15, 1, v16, 0xE000000000000000);
  _Block_release(v16);

  objc_msgSend(v6, sel_addAction_, v17);
  return v6;
}

void sub_1A9C432C8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

id static UIAlertController.internalOnlyAlert(for:dismissHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t aBlock;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  void *v25;
  uint64_t (*v26)(uint64_t);
  _QWORD *v27;

  if (a1)
  {
    swift_getErrorValue();
    aBlock = sub_1A9CE8C04();
    v23 = v6;
    sub_1A9CE82F8();
  }
  v7 = (void *)sub_1A9CE82B0();
  v8 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, v7, v8, 1);

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v11 = a1;
  sub_1A9C0344C(a2);
  v12 = (void *)sub_1A9CE82B0();
  v26 = sub_1A9C43858;
  v27 = v10;
  v13 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v23 = 1107296256;
  v24 = sub_1A9C432C8;
  v25 = &block_descriptor_12_1;
  v14 = _Block_copy(&aBlock);
  swift_release();
  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_actionWithTitle_style_handler_, v12, 0, v14);
  _Block_release(v14);

  objc_msgSend(v9, sel_addAction_, v16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  sub_1A9C0344C(a2);
  v18 = (void *)sub_1A9CE82B0();
  v26 = sub_1A9C4381C;
  v27 = (_QWORD *)v17;
  aBlock = v13;
  v23 = 1107296256;
  v24 = sub_1A9C432C8;
  v25 = &block_descriptor_18_0;
  v19 = _Block_copy(&aBlock);
  swift_release();
  v20 = objc_msgSend(v15, sel_actionWithTitle_style_handler_, v18, 1, v19);
  _Block_release(v19);

  objc_msgSend(v9, sel_addAction_, v20);
  return v9;
}

uint64_t sub_1A9C435E4(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v20[2];

  v5 = sub_1A9CE6234();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_1A9CE82B0();
  if (a2)
  {
    v20[1] = a2;
    v11 = a2;
    sub_1A9BB15F4();
    sub_1A9CE82F8();
  }
  v12 = (void *)objc_opt_self();
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_hk_tapToHealthRadarURLWithTitle_description_classification_reproducibility_keywords_autoDiagnostics_attachments_, v10, v13, 2, 0, 0, 2, 0);

  sub_1A9CE621C();
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (v15)
  {
    v16 = v15;
    v17 = (void *)sub_1A9CE6210();
    sub_1A9BAC8D4(MEMORY[0x1E0DEE9D8]);
    v18 = (void *)sub_1A9CE8208();
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_openSensitiveURL_withOptions_, v17, v18);

  }
  if (a3)
    a3(1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1A9C437F8(uint64_t a1)
{
  return sub_1A9C43894(a1, 1);
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_1A9C4381C(uint64_t a1)
{
  return sub_1A9C43894(a1, 0);
}

uint64_t sub_1A9C43824()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C43858(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C435E4(a1, *(void **)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C43894(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (**)(_QWORD))(v2 + 16);
  if (v3)
    return v3(a2 & 1);
  return result;
}

uint64_t sub_1A9C438D8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;

  sub_1A9C43BC4();
  v3 = v2;
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v28 - v9;
  v11 = sub_1A9CE62E8();
  v12 = *(_QWORD **)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v28 - v18;
  sub_1A9CE5F34();
  sub_1A9CE5F10();
  sub_1A9C43C28();
  result = sub_1A9CE8298();
  if ((result & 1) != 0)
  {
    v21 = &v10[*(int *)(v3 + 48)];
    v22 = (void (*)(char *, char *, uint64_t))v12[4];
    v22(v10, v19, v11);
    v22(v21, v16, v11);
    v23 = &v7[*(int *)(v3 + 48)];
    v24 = (void (*)(char *, char *, uint64_t))v12[2];
    v24(v7, v10, v11);
    v24(v23, v21, v11);
    v22(a1, v7, v11);
    v25 = (void (*)(char *, uint64_t))v12[1];
    v25(v23, v11);
    v26 = &v7[*(int *)(v3 + 48)];
    v22(v7, v10, v11);
    v22(v26, v21, v11);
    sub_1A9BAABAC();
    v22(&a1[*(int *)(v27 + 36)], v26, v11);
    return ((uint64_t (*)(char *, uint64_t))v25)(v7, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DateInterval.merging(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_1A9CE62E8();
  v2 = MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  sub_1A9CE5F34();
  sub_1A9CE5F10();
  return sub_1A9CE5F1C();
}

uint64_t DateInterval.hkspDescription.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_1A9CE5EEC();
  v1 = objc_msgSend(v0, sel_hkspDescription);

  v2 = sub_1A9CE82E0();
  return v2;
}

void sub_1A9C43BC4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED262DE0)
  {
    sub_1A9CE62E8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED262DE0);
  }
}

unint64_t sub_1A9C43C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED262DE8;
  if (!qword_1ED262DE8)
  {
    v1 = sub_1A9CE62E8();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CB08B0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED262DE8);
  }
  return result;
}

uint64_t Binding<A>.init<A>(mappedTo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1A9C43E5C(a1, a2);
  sub_1A9CE8880();
  v4 = sub_1A9CE7F14();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return v3;
}

uint64_t sub_1A9C43CE8@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = sub_1A9CE8880();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - v7;
  v9 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14](v9);
  LOBYTE(a1) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v8, 1, a1) != 1;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = a1;
  return result;
}

uint64_t sub_1A9C43DA0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v7 = sub_1A9CE8880();
  result = MEMORY[0x1E0C80A78](v7, v8);
  if ((*a1 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))((char *)&v11 - v10, 1, 1, a5);
    sub_1A9CE7F14();
    return sub_1A9CE7EF0();
  }
  return result;
}

uint64_t Binding.mappedToBool<A>()(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C43E5C(v1, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
}

uint64_t sub_1A9C43E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  _QWORD v15[2];

  sub_1A9CE8880();
  v4 = sub_1A9CE7F14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v15 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9((char *)v15 - v7, a1, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = a2;
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v12(&v11[v10], v8, v4);
  v9(v8, a1, v4);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  v12(&v13[v10], v8, v4);
  sub_1A9CE7F08();
  return v15[1];
}

uint64_t sub_1A9C43FB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1A9CE8880();
  sub_1A9CE7F14();
  return sub_1A9C43CE8(v3, a1);
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1A9CE8880();
  v2 = sub_1A9CE7F14();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v4 = v0 + ((v3 + 40) & ~v3) + *(int *)(v2 + 32);
  v5 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  return swift_deallocObject();
}

uint64_t sub_1A9C440DC(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[4];
  sub_1A9CE8880();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A9CE7F14() - 8) + 80);
  return sub_1A9C43DA0(a1, v1[2], v1[3], (uint64_t)v1 + ((v4 + 40) & ~v4), v3);
}

id PresentationStyle.preferredLinkColor.getter(id result)
{
  if (!result || result == (id)2)
  {
    result = (id)HKHealthTintColor();
    if (result)
      return result;
    __break(1u);
  }
  if (result != (id)1)
  {
LABEL_9:
    result = (id)sub_1A9CE8BBC();
    __break(1u);
    return result;
  }
  result = (id)BPSBridgeTintColor();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

unint64_t PresentationStyle.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_1A9C441C8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

id PresentationStyle.preferredButtonTintColor.getter(uint64_t a1)
{
  id result;

  result = 0;
  if (a1 && a1 != 2)
  {
    if (a1 == 1)
    {
      return (id)BPSPillSelectedColor();
    }
    else
    {
      result = (id)sub_1A9CE8BBC();
      __break(1u);
    }
  }
  return result;
}

uint64_t PresentationStyle.preferredColorScheme.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if ((unint64_t)(a1 - 1) < 2)
  {
    v3 = *MEMORY[0x1E0CD86D0];
LABEL_5:
    v4 = sub_1A9CE6F6C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a2, v3, v4);
  }
  if (!a1)
  {
    v3 = *MEMORY[0x1E0CD86E0];
    goto LABEL_5;
  }
  result = sub_1A9CE8BBC();
  __break(1u);
  return result;
}

unint64_t sub_1A9C442DC()
{
  unint64_t result;

  result = qword_1EEB479E8;
  if (!qword_1EEB479E8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for PresentationStyle, &type metadata for PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_1EEB479E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationStyle()
{
  return &type metadata for PresentationStyle;
}

void sub_1A9C44330()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;

  if (qword_1EEB42E60 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEB49410);
  swift_retain_n();
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = swift_slowAlloc();
    v4 = swift_slowAlloc();
    v11 = v4;
    *(_DWORD *)v3 = 136446466;
    v8 = sub_1A9CE8D48();
    v10 = v5;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v9 = sub_1A9B91D6C(v8, v10, &v11);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2082;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9CE6E64();
    swift_release();
    swift_release();
    if (v9)
      v6 = 1702195828;
    else
      v6 = 0x65736C6166;
    if (v9)
      v7 = 0xE400000000000000;
    else
      v7 = 0xE500000000000000;
    sub_1A9B91D6C(v6, v7, &v11);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] updated visible: %{public}s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1A9C445C8()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

_QWORD *sub_1A9C44638(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD aBlock[6];

  sub_1A9C45274();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = 0;
  v11 = (char *)v2 + OBJC_IVAR____TtC13SleepHealthUI25ContentAppearenceProvider__visible;
  LOBYTE(aBlock[0]) = 0;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v10, v6);
  v2[2] = a1;
  v2[3] = a2;
  v12 = objc_msgSend((id)objc_opt_self(), sel_configurationForDefaultMainDisplayMonitor);
  objc_msgSend(v12, sel_setNeedsUserInteractivePriority_, 1);
  v13 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1A9C455D0;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C44A94;
  aBlock[3] = &block_descriptor_18;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v12, sel_setTransitionHandler_, v14);
  _Block_release(v14);
  v15 = objc_msgSend((id)objc_opt_self(), sel_monitorWithConfiguration_, v12);
  v16 = (void *)v2[4];
  v2[4] = v15;

  v17 = (void *)v2[4];
  if (v17)
    v18 = objc_msgSend(v17, sel_currentLayout);
  else
    v18 = 0;
  sub_1A9C44C68(v18);

  return v2;
}

uint64_t sub_1A9C4481C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v6 = sub_1A9CE8070();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A9CE8094();
  v11 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v15 = (void *)sub_1A9CE870C();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a2;
  aBlock[4] = sub_1A9C4561C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_8;
  v17 = _Block_copy(aBlock);
  v18 = a2;
  swift_retain();
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, v7, MEMORY[0x1E0DEF510]);
  sub_1A9BE9F98(0);
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45830, (uint64_t (*)(uint64_t))sub_1A9BE9F98, MEMORY[0x1E0DEAF38]);
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v20);
}

uint64_t sub_1A9C44A38(uint64_t a1, void *a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1A9C44C68(a2);
    return swift_release();
  }
  return result;
}

void sub_1A9C44A94(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

uint64_t sub_1A9C44B1C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    objc_msgSend(v1, sel_invalidate);
    v2 = *(void **)(v0 + 32);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(v0 + 32) = 0;

  swift_bridgeObjectRelease();
  v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI25ContentAppearenceProvider__visible;
  sub_1A9C45274();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C44BA4()
{
  return type metadata accessor for ContentAppearenceProvider();
}

uint64_t type metadata accessor for ContentAppearenceProvider()
{
  uint64_t result;

  result = qword_1EEB47A20;
  if (!qword_1EEB47A20)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9C44BE8()
{
  unint64_t v0;

  sub_1A9C45274();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1A9C44C68(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  if (qword_1EEB42E60 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49410);
  v3 = a1;
  swift_retain_n();
  v4 = v3;
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE8658();
  v29 = a1;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v35 = v8;
    *(_DWORD *)v7 = 136446466;
    v31 = sub_1A9CE8D48();
    v33 = v9;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9B91D6C(v31, v33, &v35);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    if (a1)
    {
      sub_1A9B94A18(0, &qword_1EEB47B10);
      v10 = v4;
      v11 = sub_1A9CE82F8();
      v13 = v12;
    }
    else
    {
      v13 = 0xE300000000000000;
      v11 = 7104878;
    }
    v30 = sub_1A9B91D6C(v11, v13, &v35);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] updated layout: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);

    if (!a1)
      goto LABEL_10;
LABEL_7:
    v14 = sub_1A9C452C8();
    v15 = v14 & (objc_msgSend(v4, sel_displayBacklightLevel) == (id)100);
    goto LABEL_11;
  }

  swift_release_n();
  if (a1)
    goto LABEL_7;
LABEL_10:
  v15 = 0;
LABEL_11:
  v16 = v4;
  swift_retain_n();
  v17 = v16;
  v18 = sub_1A9CE6978();
  v19 = sub_1A9CE867C();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v35 = v28;
    *(_DWORD *)v20 = 136446722;
    v32 = sub_1A9CE8D48();
    v34 = v21;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9B91D6C(v32, v34, &v35);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    if (v29)
    {
      sub_1A9C452C8();
      v22 = sub_1A9CE82F8();
      v24 = v23;
    }
    else
    {
      v24 = 0xE300000000000000;
      v22 = 7104878;
    }
    sub_1A9B91D6C(v22, v24, &v35);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    if (v29)
    {
      objc_msgSend(v17, sel_displayBacklightLevel);
      v25 = sub_1A9CE82F8();
      v27 = v26;
    }
    else
    {
      v27 = 0xE300000000000000;
      v25 = 7104878;
    }
    v30 = sub_1A9B91D6C(v25, v27, &v35);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] updated layout, contains SleepLockScreen: %{public}s, display on: %{public}s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v28, -1, -1);
    MEMORY[0x1AF420344](v20, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if (v15 != v30)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1A9CE6E70();
    sub_1A9C44330();
  }
}

void sub_1A9C45274()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB456F0)
  {
    v0 = sub_1A9CE6E7C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB456F0);
  }
}

uint64_t sub_1A9C452C8()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, sel_elements);
  sub_1A9B94A18(0, &qword_1EEB47B18);
  v2 = sub_1A9CE83DC();

  if (v2 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_1A9CE8AC0())
  {
    v4 = 4;
    while (1)
    {
      v6 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AF41F600](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v9 = objc_msgSend(v6, sel_bundleIdentifier);
      if (v9)
      {
        v10 = v9;
        v11 = sub_1A9CE82E0();
        v13 = v12;

        if (v11 == 0xD000000000000019 && v13 == 0x80000001A9CFC610)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v14 = 1;
          goto LABEL_18;
        }
        v5 = sub_1A9CE8BB0();
        swift_bridgeObjectRelease();
        if ((v5 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          v14 = 1;
          goto LABEL_18;
        }
      }

      ++v4;
      if (v8 == v3)
        goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  v14 = 0;
  v7 = 0;
LABEL_18:

  return v14;
}

uint64_t sub_1A9C454B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

void sub_1A9C45530()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1A9CE6E70();
  sub_1A9C44330();
}

uint64_t sub_1A9C455AC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C455D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1A9C4481C(a1, a2, a3, v3);
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t sub_1A9C455F0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A9C4561C()
{
  uint64_t v0;

  return sub_1A9C44A38(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for NextScheduleOccurrenceView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for NextScheduleOccurrenceView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NextScheduleOccurrenceView(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NextScheduleOccurrenceView()
{
  return &type metadata for NextScheduleOccurrenceView;
}

uint64_t sub_1A9C456F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C45704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t result;
  uint64_t v30;
  id v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[12];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  sub_1A9C45FC4();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v8 = MEMORY[0x1E0C80A78](v4, v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  if (a1)
  {
    v33 = (char *)&v30 - v12;
    v13 = qword_1EEB42EE8;
    v32 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
    v31 = v32;
    if (v13 != -1)
      swift_once();
    v37 = a2;
    v14 = qword_1EEB49828;
    v15 = qword_1EEB42D00;
    swift_retain();
    if (v15 != -1)
      swift_once();
    v34 = v10;
    v35 = v6;
    v36 = v5;
    v16 = qword_1EEB45950;
    swift_retain();
    v17 = sub_1A9CE78C0();
    if (qword_1EEB42D08 != -1)
      swift_once();
    v18 = qword_1EEB45958;
    v19 = qword_1EEB49828;
    v20 = qword_1EEB45950;
    v21 = qword_1EEB42EF0;
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    v22 = v18;
    if (v21 != -1)
    {
      swift_once();
      v22 = qword_1EEB45958;
    }
    *(_QWORD *)&v40 = v14;
    BYTE8(v40) = 2;
    *(_QWORD *)&v41 = v16;
    WORD4(v41) = 0;
    *(_QWORD *)&v42 = v17;
    BYTE8(v42) = 1;
    *(_QWORD *)&v43 = v18;
    WORD4(v43) = 1;
    *(_QWORD *)&v44 = v19;
    BYTE8(v44) = 2;
    *(_QWORD *)&v45 = v20;
    WORD4(v45) = 0;
    *(_QWORD *)&v46 = v19;
    BYTE8(v46) = 2;
    *(_QWORD *)&v47 = v18;
    WORD4(v47) = 0;
    *(_QWORD *)&v48 = v19;
    BYTE8(v48) = 2;
    *(_QWORD *)&v49 = v18;
    WORD4(v49) = 0;
    *(_QWORD *)&v50 = qword_1EEB49830;
    BYTE8(v50) = 2;
    *(_QWORD *)&v51 = v22;
    WORD4(v51) = 0;
    v52 = 4;
    v38[10] = v50;
    v38[11] = v51;
    v39 = 4;
    v38[6] = v46;
    v38[7] = v47;
    v38[8] = v48;
    v38[9] = v49;
    v38[2] = v42;
    v38[3] = v43;
    v38[4] = v44;
    v38[5] = v45;
    v38[0] = v40;
    v38[1] = v41;
    swift_retain();
    swift_retain();
    _s13SleepHealthUI27ScheduleOccurrenceViewModelV013makeRepeatingeF6Models05sleepD09viewStyleSayACGSo09HKSPSleepD0CSg_AC0fM0VtFZ_0(v32, (uint64_t)v38);
    v24 = v23;

    sub_1A9C460D0((uint64_t)&v40);
    *(_QWORD *)&v38[0] = v24;
    sub_1A9B92F34(0, &qword_1EEB47B40, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for ScheduleOccurrenceView(0);
    sub_1A9C46070();
    sub_1A9B92B9C(&qword_1EEB47B30, type metadata accessor for ScheduleOccurrenceView, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceView);
    sub_1A9B92B9C(&qword_1EEB47B50, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceViewModel);
    v25 = v34;
    sub_1A9CE7F5C();
    v26 = v36;
    v27 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v28 = v33;
    v27(v33, v25, v36);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v37, v28, v26);
  }
  else
  {
    type metadata accessor for SleepScheduleModel();
    sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
    result = sub_1A9CE71F4();
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9C45AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A9C461A8(a1, a2);
}

uint64_t sub_1A9C45AE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1A9C45704(*v1, a1);
}

void sub_1A9C45AF0(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  v4 = sub_1A9CE62E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
    v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
    __swift_project_boxed_opaque_existential_1Tm(&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v9);
    v11 = *(void (**)(void))&a1[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
    v12 = a1;
    v11();
    v25 = SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)((uint64_t)v8, v9, v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

    v24 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
    v13 = sub_1A9CE7854();
    if (qword_1EEB42D00 != -1)
      swift_once();
    v14 = qword_1EEB45950;
    swift_retain();
    v15 = sub_1A9CE78C0();
    if (qword_1EEB42D08 != -1)
      swift_once();
    v26 = a2;
    v16 = qword_1EEB45958;
    v17 = qword_1EEB42EE8;
    swift_retain();
    if (v17 != -1)
      swift_once();
    v18 = qword_1EEB49828;
    v19 = qword_1EEB42CF8;
    swift_retain();
    v20 = v18;
    if (v19 != -1)
    {
      swift_once();
      v20 = qword_1EEB49828;
    }
    v21 = qword_1EEB45948;
    v22 = qword_1EEB42EF0;
    swift_retain_n();
    swift_retain_n();
    if (v22 != -1)
      swift_once();
    *(_QWORD *)&v27 = v13;
    BYTE8(v27) = 2;
    v28 = v14;
    v29 = 256;
    v30 = v15;
    v31 = 1;
    v32 = v16;
    v33 = 1;
    v34 = v18;
    v35 = 2;
    v36 = v21;
    v37 = 0;
    v38 = v20;
    v39 = 2;
    v40 = v21;
    v41 = 0;
    v42 = v20;
    v43 = 2;
    v44 = v21;
    v45 = 0;
    v46 = qword_1EEB49830;
    v47 = 0;
    v48 = qword_1EEB45950;
    v49 = 0;
    v50 = 7;
    swift_retain();
    swift_retain();
    ScheduleOccurrenceViewModel.init(resolvedOccurrence:relativeWeekdayFormatter:viewStyle:)(v25, (uint64_t)v24, &v27, v26);
  }
  else
  {
    type metadata accessor for SleepScheduleModel();
    sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
    sub_1A9CE71F4();
    __break(1u);
  }
}

void sub_1A9C45E5C(uint64_t a1@<X8>)
{
  char **v1;

  sub_1A9C45AF0(*v1, a1);
}

uint64_t _s13SleepHealthUI26NextScheduleOccurrenceViewVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s13SleepHealthUI26NextScheduleOccurrenceViewVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceListView()
{
  return &type metadata for ScheduleOccurrenceListView;
}

unint64_t sub_1A9C45F24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB47B20;
  if (!qword_1EEB47B20)
  {
    sub_1A9B92F34(255, &qword_1EEB47B28, type metadata accessor for ScheduleOccurrenceView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB47B30, type metadata accessor for ScheduleOccurrenceView, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceView);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDF690], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47B20);
  }
  return result;
}

uint64_t sub_1A9C45FB4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C45FC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47B38)
  {
    sub_1A9B92F34(255, &qword_1EEB47B40, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for ScheduleOccurrenceView(255);
    sub_1A9C46070();
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47B38);
  }
}

unint64_t sub_1A9C46070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB47B48;
  if (!qword_1EEB47B48)
  {
    sub_1A9B92F34(255, &qword_1EEB47B40, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB47B48);
  }
  return result;
}

uint64_t sub_1A9C460D0(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1A9C461A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A9C461F0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEB47B58;
  if (!qword_1EEB47B58)
  {
    sub_1A9B92F34(255, &qword_1EEB47B60, (uint64_t (*)(uint64_t))sub_1A9C45FC4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
    v2 = v1;
    v3 = sub_1A9C46268();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDF690], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47B58);
  }
  return result;
}

unint64_t sub_1A9C46268()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB47B68;
  if (!qword_1EEB47B68)
  {
    sub_1A9C45FC4();
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB47B30, type metadata accessor for ScheduleOccurrenceView, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceView);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDFEE8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47B68);
  }
  return result;
}

void sub_1A9C462F0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  objc_msgSend(v1, sel_setBackgroundView_, v2);

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  objc_msgSend(v1, sel_setSelectedBackgroundView_, v3);

  v4 = objc_msgSend(v1, sel_contentView);
  v5 = sub_1A9BC9C0C();
  objc_msgSend(v4, sel_addSubview_, v5);

  v6 = sub_1A9BC9C0C();
  v7 = objc_msgSend(v1, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v7, 0, *MEMORY[0x1E0DC3298], *(double *)(MEMORY[0x1E0DC3298] + 8), *(double *)(MEMORY[0x1E0DC3298] + 16), *(double *)(MEMORY[0x1E0DC3298] + 24));
  swift_bridgeObjectRelease();

  sub_1A9BCA2E0();
}

void sub_1A9C46400()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  objc_msgSend(v1, sel_setBackgroundView_, v2);

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  objc_msgSend(v1, sel_setSelectedBackgroundView_, v3);

  v4 = objc_msgSend(v1, sel_contentView);
  v5 = sub_1A9C46874();
  objc_msgSend(v4, sel_addSubview_, v5);

  v6 = sub_1A9C46874();
  v7 = objc_msgSend(v1, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v7, 0, *MEMORY[0x1E0DC3298], *(double *)(MEMORY[0x1E0DC3298] + 8), *(double *)(MEMORY[0x1E0DC3298] + 16), *(double *)(MEMORY[0x1E0DC3298] + 24));
  swift_bridgeObjectRelease();

  v8 = objc_msgSend(v1, sel_backgroundColor);
  if (!v8)
    v8 = objc_msgSend((id)objc_opt_self(), sel_systemGroupedBackgroundColor);
  v10 = v8;
  objc_msgSend(v1, sel_setBackgroundColor_);
  v9 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v9, sel_setBackgroundColor_, v10);

}

uint64_t sub_1A9C465A0()
{
  return sub_1A9C465B4(&OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item, (uint64_t (*)(void))sub_1A9BC9C0C);
}

uint64_t sub_1A9C465B4(_QWORD *a1, uint64_t (*a2)(void))
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v4 = v2;
  v5 = (uint64_t)v2 + *a1;
  swift_beginAccess();
  sub_1A9BCA29C(v5, (uint64_t)v26);
  if (!v27)
  {
    sub_1A9BEDB34((uint64_t)v26, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    return sub_1A9BEDB34((uint64_t)&v23, &qword_1EEB47BB8, &qword_1EEB47BC0);
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  sub_1A9B94928(0, &qword_1EEB47BC0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    return sub_1A9BEDB34((uint64_t)&v23, &qword_1EEB47BB8, &qword_1EEB47BC0);
  }
  if (!*((_QWORD *)&v24 + 1))
    return sub_1A9BEDB34((uint64_t)&v23, &qword_1EEB47BB8, &qword_1EEB47BC0);
  v6 = sub_1A9B949B8(&v23, (uint64_t)v26);
  v7 = (char *)((uint64_t (*)(uint64_t))a2)(v6);
  v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher];
  swift_retain();

  v9 = v27;
  v10 = v28;
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  if (v8)
  {
    swift_release();
    v12 = swift_release();
    if (v11 == v8)
      goto LABEL_13;
  }
  else
  {
    v12 = swift_release();
  }
  v14 = (char *)((uint64_t (*)(uint64_t))a2)(v12);
  v15 = v27;
  v16 = v28;
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  *(_QWORD *)&v14[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_timeIntervalPublisher] = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  swift_retain();
  swift_release();
  sub_1A9C2F628();

  swift_release();
LABEL_13:
  __swift_project_boxed_opaque_existential_1Tm(v26, v27);
  v17 = sub_1A9CE68DC();
  if (v18)
  {
    v19 = v17;
    v20 = v18;
    v21 = (void *)a2();
    *(_QWORD *)&v23 = v19;
    *((_QWORD *)&v23 + 1) = v20;
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v22 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setAccessibilityIdentifier_, v22);

  }
  objc_msgSend(v4, sel_layoutIfNeeded);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
}

id sub_1A9C46874()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v1 = OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell____lazy_storage___timePicker);
  }
  else
  {
    v4 = v0;
    v5 = sub_1A9CDF60C();
    v7 = v6;
    v9 = v8;
    v10 = v5;
    v12 = v11 & 1;
    v13 = objc_allocWithZone((Class)type metadata accessor for TimeIntervalPickerView());
    v14 = sub_1A9C2FBD8(v10, v12, v7, v9);
    v15 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v14;
    v3 = v14;

    v2 = 0;
  }
  v16 = v2;
  return v3;
}

uint64_t sub_1A9C46AD0()
{
  sub_1A9CE8340();
  swift_getObjectType();
  sub_1A9C46F60();
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  sub_1A9CE8A60();
  return 0;
}

void sub_1A9C46BC4(SEL *a1)
{
  void *v1;
  id v3;
  id v4;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TimePickerTableViewCell();
  objc_msgSendSuper2(&v5, *a1);
  v3 = objc_msgSend(v1, sel_backgroundColor);
  if (!v3)
    v3 = objc_msgSend((id)objc_opt_self(), sel_systemGroupedBackgroundColor);
  objc_msgSend(v1, sel_setBackgroundColor_, v3);
  v4 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v4, sel_setBackgroundColor_, v3);

}

id sub_1A9C46CCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimePickerTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimePickerTableViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1A9C46D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item;
  swift_beginAccess();
  return sub_1A9BCA29C(v3, a1);
}

uint64_t sub_1A9C46DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA1C8(a1, v3);
  swift_endAccess();
  sub_1A9C465B4(&OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item, (uint64_t (*)(void))sub_1A9C46874);
  return sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
}

uint64_t (*sub_1A9C46E50(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9C46E98;
}

uint64_t sub_1A9C46E98(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9C465B4(&OBJC_IVAR____TtC13SleepHealthUI23TimePickerTableViewCell_item, (uint64_t (*)(void))sub_1A9C46874);
  return result;
}

uint64_t sub_1A9C46ED8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A9C46F24(&qword_1EEB47BA8, (uint64_t)&unk_1A9CF2B08);
  result = sub_1A9C46F24(&qword_1EEB47BB0, (uint64_t)&unk_1A9CF2B30);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A9C46F24(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TimePickerTableViewCell();
    result = MEMORY[0x1AF420284](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9C46F60()
{
  unint64_t result;

  result = qword_1EEB47BC8;
  if (!qword_1EEB47BC8)
  {
    type metadata accessor for TimePickerTableViewCell();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47BC8);
  }
  return result;
}

uint64_t AttributedString.applyingLetterSmallCaps(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = sub_1A9CE6150();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v38 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v34 - v11;
  sub_1A9BB7054(0, &qword_1ED262D80, (void (*)(uint64_t))sub_1A9C472B8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v34 - v15;
  sub_1A9C472B8();
  v44 = v17;
  v42 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v37 = (uint64_t)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v6;
  v40 = a2;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v43 = v2;
  v21 = v5;
  result = v20(a2, v2, v5);
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v24 = sub_1A9CE6360();
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    swift_bridgeObjectRetain();
    v34[1] = a1;
    v35 = v24;
    v25 = (uint64_t *)(a1 + 40);
    v36 = v16;
    do
    {
      v26 = *v25;
      v45 = *(v25 - 1);
      v46 = v26;
      v41(v12, 1, 1, v24);
      sub_1A9B92B9C(&qword_1EEB47BD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
      sub_1A9BA8EA4();
      swift_bridgeObjectRetain();
      sub_1A9CE61EC();
      sub_1A9C0F26C((uint64_t)v12, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v44) == 1)
      {
        swift_bridgeObjectRelease();
        sub_1A9C0F26C((uint64_t)v16, &qword_1ED262D80, (void (*)(uint64_t))sub_1A9C472B8);
      }
      else
      {
        v27 = v37;
        sub_1A9C47330((uint64_t)v16, v37);
        v28 = v12;
        v29 = v21;
        v30 = v38;
        sub_1A9CE8358();
        swift_bridgeObjectRelease();
        sub_1A9B92B9C(&qword_1ED262D88, (uint64_t (*)(uint64_t))sub_1A9C472B8, MEMORY[0x1E0DEB8A8]);
        sub_1A9CE60F0();
        v31 = v30;
        v32 = v29;
        v12 = v28;
        v16 = v36;
        v21 = v32;
        (*(void (**)(char *))(v39 + 8))(v31);
        v33 = v27;
        v24 = v35;
        sub_1A9C47374(v33);
      }
      v25 += 2;
      --v23;
    }
    while (v23);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1A9C472B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262D78)
  {
    sub_1A9CE612C();
    sub_1A9B92B9C(&qword_1ED262D58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
    v0 = sub_1A9CE85A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262D78);
  }
}

uint64_t sub_1A9C47330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C472B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C47374(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C472B8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AttributedString.setNumericAttributes(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  void (*v32)(_QWORD *, _QWORD);
  _QWORD v34[3];
  _QWORD v35[5];

  v34[1] = a1;
  sub_1A9C472B8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED262D80, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v34 - v10;
  v34[0] = sub_1A9CE5EE0();
  v12 = *(_QWORD *)(v34[0] - 8);
  v14 = MEMORY[0x1E0C80A78](v34[0], v13);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)v34 - v18;
  v20 = sub_1A9CE60D8();
  MEMORY[0x1E0C80A78](v20, v21);
  sub_1A9CE60CC();
  sub_1A9B92B9C(&qword_1ED262D50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF28]);
  v35[0] = sub_1A9CE8388();
  v35[1] = v22;
  sub_1A9CE5EC8();
  sub_1A9CE5ED4();
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24 = v34[0];
  v23(v19, v34[0]);
  sub_1A9BA8EA4();
  v25 = sub_1A9CE88B0();
  v23(v16, v24);
  swift_bridgeObjectRelease();
  v26 = sub_1A9C47AD8(v25);
  swift_bridgeObjectRelease();
  v27 = sub_1A9C476C8(v26, v34[2]);
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v27 + 16);
  v34[0] = v27;
  if (v28)
  {
    v29 = v27 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v30 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1A9C47B6C(v29, (uint64_t)v11);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v31(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      sub_1A9C47330((uint64_t)v11, (uint64_t)v6);
      sub_1A9B92B9C(&qword_1ED262D88, (uint64_t (*)(uint64_t))sub_1A9C472B8, MEMORY[0x1E0DEB8A8]);
      v32 = (void (*)(_QWORD *, _QWORD))sub_1A9CE615C();
      sub_1A9CE6174();
      v32(v35, 0);
      sub_1A9C47374((uint64_t)v6);
      v29 += v30;
      if (!--v28)
        goto LABEL_7;
    }
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v31(v11, 1, 1, v2);
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1A9C476C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  int isUniquelyReferenced_nonNull_native;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v56 = a2;
  sub_1A9BB7054(0, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v3, v4);
  v53 = (char *)&v50 - v5;
  v6 = sub_1A9CE6150();
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 56);
  v51 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v52 = (unint64_t)(v11 + 63) >> 6;
  v59 = a1;
  swift_bridgeObjectRetain();
  v14 = 0;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = v54;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v14 << 6);
    }
    else
    {
      v19 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_47;
      if (v19 >= v52)
      {
LABEL_42:
        swift_release();
        return v15;
      }
      v20 = *(_QWORD *)(v51 + 8 * v19);
      ++v14;
      if (!v20)
      {
        v14 = v19 + 1;
        if (v19 + 1 >= v52)
          goto LABEL_42;
        v20 = *(_QWORD *)(v51 + 8 * v14);
        if (!v20)
        {
          v14 = v19 + 2;
          if (v19 + 2 >= v52)
            goto LABEL_42;
          v20 = *(_QWORD *)(v51 + 8 * v14);
          if (!v20)
          {
            v14 = v19 + 3;
            if (v19 + 3 >= v52)
              goto LABEL_42;
            v20 = *(_QWORD *)(v51 + 8 * v14);
            if (!v20)
            {
              v21 = v19 + 4;
              if (v21 >= v52)
                goto LABEL_42;
              v20 = *(_QWORD *)(v51 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v14 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_48;
                  if (v14 >= v52)
                    goto LABEL_42;
                  v20 = *(_QWORD *)(v51 + 8 * v14);
                  ++v21;
                  if (v20)
                    goto LABEL_23;
                }
              }
              v14 = v21;
            }
          }
        }
      }
LABEL_23:
      v13 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v14 << 6);
    }
    v22 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    v25 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v9, v56, v55);
    v57 = v23;
    v58 = v24;
    v26 = sub_1A9CE6360();
    v27 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v53, 1, 1, v26);
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    v28 = sub_1A9CE6138();
    sub_1A9C0F26C(v27, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v25);
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v28 + 16);
    v30 = *(_QWORD *)(v15 + 16);
    v31 = v30 + v29;
    if (__OFADD__(v30, v29))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v31 <= *(_QWORD *)(v15 + 24) >> 1)
    {
      if (!*(_QWORD *)(v28 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v30 <= v31)
        v33 = v30 + v29;
      else
        v33 = v30;
      v15 = sub_1A9CAE430(isUniquelyReferenced_nonNull_native, v33, 1, v15);
      if (!*(_QWORD *)(v28 + 16))
      {
LABEL_4:
        if (v29)
          goto LABEL_44;
        goto LABEL_5;
      }
    }
    v34 = *(_QWORD *)(v15 + 16);
    v35 = (*(_QWORD *)(v15 + 24) >> 1) - v34;
    sub_1A9C472B8();
    if (v35 < v29)
      goto LABEL_45;
    v37 = *(_QWORD *)(v36 - 8);
    v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v39 = *(_QWORD *)(v37 + 72);
    v40 = v15 + v38 + v39 * v34;
    v41 = v28 + v38;
    v42 = v39 * v29;
    v43 = v40 + v42;
    v44 = v41 + v42;
    if (v41 < v43 && v40 < v44)
      goto LABEL_49;
    swift_arrayInitWithCopy();
    if (v29)
    {
      v46 = *(_QWORD *)(v15 + 16);
      v47 = __OFADD__(v46, v29);
      v48 = v46 + v29;
      if (v47)
        goto LABEL_46;
      *(_QWORD *)(v15 + 16) = v48;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9C47AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1A9CE84E4();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1A9CB4F18(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1A9C47B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C472B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C47BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for HKCategoryValueSleepAnalysis(0);
  sub_1A9B92B9C(&qword_1EEB47BD8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_1A9CECBE4);
  result = sub_1A9CE84E4();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1A9CB50C4(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t static ScheduleOccurrenceComponentsAccessibilityTableViewCell.bedtimeReuseIdentifier.getter()
{
  return 0xD00000000000003ELL;
}

unint64_t static ScheduleOccurrenceComponentsAccessibilityTableViewCell.wakeUpReuseIdentifier.getter()
{
  return 0xD00000000000003DLL;
}

BOOL static ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C47CFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF4203E0](v1);
}

uint64_t sub_1A9C47D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1A9C47DB0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF4203E0](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1A9B8AD50;
}

void ScheduleOccurrenceComponentsAccessibilityTableViewCell.component.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
}

uint64_t sub_1A9C47E38(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BD9150(a1, (uint64_t)v7);
  v8 = *a2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  sub_1A9C47F88((uint64_t)v7, v8);
  return swift_endAccess();
}

uint64_t sub_1A9C47EE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  return sub_1A9BD9150(v3, a1);
}

uint64_t sub_1A9C47F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  sub_1A9C47F88(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1A9C47F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1A9C47FCC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A9C48010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, _QWORD, uint64_t);
  id v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v3 = sub_1A9CE62E8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE6444();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED262DF0, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v30 - v16;
  v18 = *(void **)(v1
                 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker);
  v19 = objc_msgSend(v18, sel_calendar);
  if (v19)
  {
    v20 = v19;
    v30[1] = a1;
    v31 = v4;
    v32 = v3;
    sub_1A9CE63D8();

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v12, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8);
    if ((_DWORD)result != 1)
    {
      sub_1A9B92F34(0, &qword_1EEB47BF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v22 = sub_1A9CE642C();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(_QWORD *)(v23 + 72);
      v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1A9CEB530;
      v27 = v26 + v25;
      v28 = *(void (**)(unint64_t, _QWORD, uint64_t))(v23 + 104);
      v28(v27, *MEMORY[0x1E0CB1140], v22);
      v28(v27 + v24, *MEMORY[0x1E0CB1178], v22);
      sub_1A9C4B104(v26);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v29 = objc_msgSend(v18, sel_date);
      sub_1A9CE62C4();

      sub_1A9CE63B4();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  }
  __break(1u);
  return result;
}

id sub_1A9C482E4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView);
  }
  else
  {
    v4 = sub_1A9C4B384();
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v4);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1A9C48370()
{
  id v0;
  id result;
  double v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36F0]), sel_init);
  objc_msgSend(v0, sel_setDatePickerMode_, 0);
  result = objc_msgSend(v0, sel_setPreferredDatePickerStyle_, 2);
  if (qword_1EEB42C70 != -1)
    result = (id)swift_once();
  v2 = *(double *)&qword_1EEB45000 / 60.0;
  if ((~COERCE__INT64(*(double *)&qword_1EEB45000 / 60.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18)
  {
    objc_msgSend(v0, sel_setMinuteInterval_, (uint64_t)v2);
    return v0;
  }
LABEL_9:
  __break(1u);
  return result;
}

id ScheduleOccurrenceComponentsAccessibilityTableViewCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a3)
  {
    v6 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithStyle_reuseIdentifier_, a1, v6);

  return v7;
}

_QWORD *ScheduleOccurrenceComponentsAccessibilityTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9C4B734(a2, a3);
}

void sub_1A9C48518()
{
  char *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v1, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel]);

  v2 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v2, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker]);

}

id sub_1A9C485A8()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  _QWORD v11[6];

  v1 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v11[4] = sub_1A9C219C0;
  v11[5] = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1A9C21C90;
  v11[3] = &block_descriptor_19;
  v2 = _Block_copy(v11);
  v3 = objc_msgSend(v1, sel_initWithDynamicProvider_, v2);
  _Block_release(v2);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  LODWORD(v5) = 1148829696;
  objc_msgSend(v4, sel_setContentHuggingPriority_forAxis_, 1, v5);
  LODWORD(v6) = 1148846080;
  objc_msgSend(v4, sel_setContentCompressionResistancePriority_forAxis_, 1, v6);
  v7 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  LODWORD(v8) = 1144750080;
  objc_msgSend(v7, sel_setContentHuggingPriority_forAxis_, 1, v8);
  LODWORD(v9) = 1148846080;
  objc_msgSend(v7, sel_setContentCompressionResistancePriority_forAxis_, 1, v9);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v7, sel_setContentHorizontalAlignment_, 4);
  sub_1A9C4A474();
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v0, sel_datePickerDidChange, 4096);
  return objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v0, sel_datePickerDidEndEditing, 0x40000);
}

void sub_1A9C48774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t (*v18)(uint64_t);
  char v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[4];

  v1 = v0;
  swift_getObjectType();
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v61 - v4;
  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v61 - v13;
  v15 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF4203E0](v15))
  {
    v16 = *(_QWORD *)(v15 + 8);
    ObjectType = swift_getObjectType();
    v18 = *(uint64_t (**)(uint64_t))(v16 + 8);
    v66 = ObjectType;
    if ((v18(v1) & 1) != 0)
    {
      v63 = v16;
      v64 = v7;
      v19 = *(_BYTE *)(v1
                     + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
      v65 = v6;
      if ((v19 & 1) != 0)
      {
        sub_1A9C48010((uint64_t)v11);
        v20 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
        swift_beginAccess();
        v21 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
        v22 = v20 + v21[10];
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 24))(v22, v11, v6);
        v23 = *(_QWORD *)(v20 + v21[7]);
        v62 = v22;
        if (v23)
        {
          v24 = sub_1A9C5A0D4();
          v25 = sub_1A9C5A2A4();
          if ((v25 & 1) != 0)
            v26 = v24 & 1 | 2;
          else
            v26 = v24 & 1;
          *(_QWORD *)(v20 + v21[15]) = v26;
          v27 = v26 & 1;
          v28 = (v26 & 1) == 0;
          if ((v26 & 1) != 0 || (v25 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          *(_QWORD *)(v20 + v21[15]) = 0;
        }
        v27 = 0;
        v28 = 0;
LABEL_26:
        *(_BYTE *)(v20 + v21[13]) = v27;
        *(_BYTE *)(v20 + v21[14]) = v28;
        v61 = v20 + v21[5];
        sub_1A9CE63E4();
        v45 = sub_1A9C5C990((uint64_t)v5, v20);
        v47 = v46;
        sub_1A9BD5744((uint64_t)v5);
        v48 = (uint64_t *)(v20 + v21[18]);
        swift_bridgeObjectRelease();
        *v48 = v45;
        v48[1] = v47;
        sub_1A9CE63E4();
        v49 = sub_1A9C5C990((uint64_t)v5, v20);
        v51 = v50;
        sub_1A9BD5744((uint64_t)v5);
        v52 = (uint64_t *)(v20 + v21[19]);
        swift_bridgeObjectRelease();
        *v52 = v49;
        v52[1] = v51;
        sub_1A9C5B3A8();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v65);
LABEL_30:
        swift_endAccess();
        (*(void (**)(uint64_t, uint64_t))(v63 + 16))(v1, v66);
        swift_unknownObjectRelease();
        return;
      }
      sub_1A9C48010((uint64_t)v14);
      v36 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
      swift_beginAccess();
      v37 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
      v38 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 24);
      v39 = v36 + v37[9];
      v38(v39, v14, v6);
      if (*(_QWORD *)(v36 + v37[7]))
      {
        v62 = v39;
        v40 = sub_1A9C5A0D4();
        v41 = sub_1A9C5A2A4();
        if ((v41 & 1) != 0)
          v42 = v40 & 1 | 2;
        else
          v42 = v40 & 1;
        *(_QWORD *)(v36 + v37[15]) = v42;
        v43 = v42 & 1;
        v44 = (v42 & 1) == 0;
        if ((v42 & 1) != 0 || (v41 & 1) != 0)
          goto LABEL_29;
      }
      else
      {
        *(_QWORD *)(v36 + v37[15]) = 0;
      }
      v43 = 0;
      v44 = 0;
LABEL_29:
      *(_BYTE *)(v36 + v37[13]) = v43;
      *(_BYTE *)(v36 + v37[14]) = v44;
      v62 = v36 + v37[5];
      sub_1A9CE63E4();
      v53 = sub_1A9C5C990((uint64_t)v5, v36);
      v55 = v54;
      sub_1A9BD5744((uint64_t)v5);
      v56 = (uint64_t *)(v36 + v37[18]);
      swift_bridgeObjectRelease();
      *v56 = v53;
      v56[1] = v55;
      sub_1A9CE63E4();
      v57 = sub_1A9C5C990((uint64_t)v5, v36);
      v59 = v58;
      sub_1A9BD5744((uint64_t)v5);
      v60 = (uint64_t *)(v36 + v37[19]);
      swift_bridgeObjectRelease();
      *v60 = v57;
      v60[1] = v59;
      sub_1A9C5B3A8();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v65);
      goto LABEL_30;
    }
    swift_unknownObjectRelease();
  }
  if (qword_1ED262DB8 != -1)
    swift_once();
  v29 = sub_1A9CE6990();
  __swift_project_value_buffer(v29, (uint64_t)qword_1ED2630B8);
  v30 = sub_1A9CE6978();
  v31 = sub_1A9CE8658();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v67[0] = v33;
    *(_DWORD *)v32 = 136446210;
    v34 = sub_1A9CE8D48();
    v67[3] = sub_1A9B91D6C(v34, v35, v67);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v30, v31, "[%{public}s] time components invalid", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v33, -1, -1);
    MEMORY[0x1AF420344](v32, -1, -1);
  }

}

uint64_t sub_1A9C48D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0;
  swift_getObjectType();
  v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v2);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v1, ObjectType, v4) & 1) == 0)
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v6 = sub_1A9CE6990();
      __swift_project_value_buffer(v6, (uint64_t)qword_1ED2630B8);
      v7 = sub_1A9CE6978();
      v8 = sub_1A9CE8658();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        v10 = swift_slowAlloc();
        v13 = v10;
        *(_DWORD *)v9 = 136446210;
        v11 = sub_1A9CE8D48();
        sub_1A9B91D6C(v11, v12, &v13);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] time components were invalid, resetting date picker", v9, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v10, -1, -1);
        MEMORY[0x1AF420344](v9, -1, -1);
      }

      sub_1A9C4AA08();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1A9C48FA8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;

  v1 = v0;
  v33 = (void *)objc_opt_self();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CF2B90;
  v3 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  v4 = objc_msgSend(v3, sel_topAnchor);
  v5 = objc_msgSend(v1, sel_contentView);
  v6 = objc_msgSend(v5, sel_layoutMarginsGuide);

  v7 = objc_msgSend(v6, (SEL)&selRef_view + 4);
  v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v2 + 32) = v8;
  v9 = objc_msgSend(v3, sel_leadingAnchor);
  v10 = objc_msgSend(v1, (SEL)&selRef_featureStatus);
  v11 = objc_msgSend(v10, (SEL)&selRef_setLayoutMargins_ + 5);

  v12 = objc_msgSend(v11, sel_leadingAnchor);
  v13 = objc_msgSend(v9, (SEL)&selRef_centerXAnchor + 6, v12);

  *(_QWORD *)(v2 + 40) = v13;
  v14 = objc_msgSend(v1, (SEL)&selRef_featureStatus);
  v15 = objc_msgSend(v14, (SEL)&selRef_setLayoutMargins_ + 5);

  v16 = objc_msgSend(v15, sel_trailingAnchor);
  v17 = objc_msgSend(v3, sel_trailingAnchor);
  v18 = objc_msgSend(v16, (SEL)&selRef_centerXAnchor + 6, v17);

  *(_QWORD *)(v2 + 48) = v18;
  v19 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  v20 = objc_msgSend(v19, sel_topAnchor);
  v21 = objc_msgSend(v3, sel_bottomAnchor);
  v22 = objc_msgSend(v20, (SEL)&selRef_centerXAnchor + 6, v21);

  *(_QWORD *)(v2 + 56) = v22;
  v23 = objc_msgSend(v19, sel_leadingAnchor);
  v24 = objc_msgSend(v1, sel_contentView);
  v25 = objc_msgSend(v24, sel_layoutMarginsGuide);

  v26 = objc_msgSend(v25, sel_leadingAnchor);
  v27 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v26);

  *(_QWORD *)(v2 + 64) = v27;
  v28 = objc_msgSend(v1, sel_contentView);
  v29 = objc_msgSend(v28, sel_layoutMarginsGuide);

  v30 = objc_msgSend(v29, sel_trailingAnchor);
  v31 = objc_msgSend(v19, sel_trailingAnchor);
  v32 = objc_msgSend(v30, sel_constraintGreaterThanOrEqualToAnchor_, v31);

  *(_QWORD *)(v2 + 72) = v32;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v34 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_activateConstraints_, v34);

}

void sub_1A9C49400()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CEF8A0;
  v4 = objc_msgSend(v1, sel_contentView);
  v5 = objc_msgSend(v4, sel_layoutMarginsGuide);

  v6 = objc_msgSend(v5, sel_bottomAnchor);
  v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker], sel_bottomAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v3 + 32) = v8;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v9 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v9);

}

uint64_t sub_1A9C495AC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  id v24;
  id v25;
  unsigned __int8 v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void (*v41)(unsigned __int8 *, char *, uint64_t);
  id v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned __int8 v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  id v57;
  char *v58;
  char v59;
  char v60;
  uint64_t v61;
  unsigned __int8 v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int *v74;
  char *v75;
  _QWORD *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  id v82;
  void *v83;

  v2 = v1;
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v74 - v6;
  v8 = sub_1A9CE60C0();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v81 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v79 = (char *)&v74 - v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v74 - v17;
  v19 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (unsigned __int8 *)v2
      + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  v75 = v22;
  sub_1A9BD9150((uint64_t)v23, (uint64_t)v22);
  v78 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v24 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v24, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v25 = v82;
  v26 = objc_msgSend(v82, sel_isEnabled);

  *v23 = v26;
  v80 = a1;
  sub_1A9CE6DD4();
  v27 = v83;
  swift_beginAccess();
  v28 = v19[7];
  v29 = *(void **)&v23[v28];
  *(_QWORD *)&v23[v28] = v27;
  v30 = v27;

  v76 = v2;
  if (!v27)
  {
    v37 = v19[15];
    v74 = v19 + 15;
    *(_QWORD *)&v23[v37] = 0;
LABEL_9:
    v36 = 0;
    v35 = 0;
    goto LABEL_10;
  }
  v31 = sub_1A9C5A0D4();
  v32 = sub_1A9C5A2A4();
  v33 = v19[15];
  v74 = v19 + 15;
  if ((v32 & 1) != 0)
    v34 = v31 & 1 | 2;
  else
    v34 = v31 & 1;
  *(_QWORD *)&v23[v33] = v34;
  v35 = (v34 & 1) == 0;
  v36 = v34 & 1;
  if ((v34 & 1) == 0 && (v32 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  v23[v19[13]] = v36;
  v23[v19[14]] = v35;

  swift_endAccess();
  v38 = v80;
  v39 = v78;
  v40 = objc_msgSend(*(id *)(v80 + v78), sel_wakeUpComponents);
  sub_1A9CE6024();

  swift_beginAccess();
  v41 = *(void (**)(unsigned __int8 *, char *, uint64_t))(v9 + 24);
  v41(&v23[v19[11]], v18, v8);
  sub_1A9C5B3A8();
  v77 = *(void (**)(char *, uint64_t))(v9 + 8);
  v77(v18, v8);
  swift_endAccess();
  v42 = objc_msgSend(*(id *)(v38 + v39), sel_bedtimeComponents);
  v43 = v79;
  sub_1A9CE6024();

  swift_beginAccess();
  v41(&v23[v19[9]], v43, v8);
  if (!*(_QWORD *)&v23[v19[7]])
  {
    *(_QWORD *)&v23[*v74] = 0;
LABEL_18:
    v47 = 0;
    v48 = 0;
    goto LABEL_19;
  }
  v44 = sub_1A9C5A0D4();
  v45 = sub_1A9C5A2A4();
  if ((v45 & 1) != 0)
    v46 = v44 & 1 | 2;
  else
    v46 = v44 & 1;
  *(_QWORD *)&v23[v19[15]] = v46;
  v47 = v46 & 1;
  v48 = (v46 & 1) == 0;
  if ((v46 & 1) == 0 && (v45 & 1) == 0)
    goto LABEL_18;
LABEL_19:
  v23[v19[13]] = v47;
  v23[v19[14]] = v48;
  sub_1A9CE63E4();
  v49 = sub_1A9C5C990((uint64_t)v7, (uint64_t)v23);
  v51 = v50;
  sub_1A9BD5744((uint64_t)v7);
  v52 = (uint64_t *)&v23[v19[18]];
  swift_bridgeObjectRelease();
  *v52 = v49;
  v52[1] = v51;
  sub_1A9CE63E4();
  v53 = sub_1A9C5C990((uint64_t)v7, (uint64_t)v23);
  v55 = v54;
  sub_1A9BD5744((uint64_t)v7);
  v56 = (uint64_t *)&v23[v19[19]];
  swift_bridgeObjectRelease();
  *v56 = v53;
  v56[1] = v55;
  sub_1A9C5B3A8();
  v77(v79, v8);
  swift_endAccess();
  v57 = objc_msgSend(*(id *)(v80 + v78), sel_wakeUpComponents);
  v58 = v81;
  sub_1A9CE6024();

  swift_beginAccess();
  v41(&v23[v19[10]], v58, v8);
  if (!*(_QWORD *)&v23[v19[7]])
  {
    *(_QWORD *)&v23[*v74] = 0;
LABEL_27:
    v62 = 0;
    v63 = 0;
    goto LABEL_28;
  }
  v59 = sub_1A9C5A0D4();
  v60 = sub_1A9C5A2A4();
  if ((v60 & 1) != 0)
    v61 = v59 & 1 | 2;
  else
    v61 = v59 & 1;
  *(_QWORD *)&v23[v19[15]] = v61;
  v62 = v61 & 1;
  v63 = (v61 & 1) == 0;
  if ((v61 & 1) == 0 && (v60 & 1) == 0)
    goto LABEL_27;
LABEL_28:
  v23[v19[13]] = v62;
  v23[v19[14]] = v63;
  sub_1A9CE63E4();
  v64 = sub_1A9C5C990((uint64_t)v7, (uint64_t)v23);
  v66 = v65;
  sub_1A9BD5744((uint64_t)v7);
  v67 = (uint64_t *)&v23[v19[18]];
  swift_bridgeObjectRelease();
  *v67 = v64;
  v67[1] = v66;
  sub_1A9CE63E4();
  v68 = sub_1A9C5C990((uint64_t)v7, (uint64_t)v23);
  v70 = v69;
  sub_1A9BD5744((uint64_t)v7);
  v71 = (uint64_t *)&v23[v19[19]];
  swift_bridgeObjectRelease();
  *v71 = v68;
  v71[1] = v70;
  sub_1A9C5B3A8();
  v77(v81, v8);
  swift_endAccess();
  v72 = (uint64_t)v75;
  (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v76) + 0x110))(v75);
  return sub_1A9BD9114(v72);
}

uint64_t sub_1A9C49C58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t, char *, uint64_t);
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v70 - v5;
  v7 = sub_1A9CE60C0();
  v8 = *(void (**)(char *, uint64_t))(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v78 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v70 - v13;
  v15 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v1;
  v19 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  sub_1A9BD9150(v19, (uint64_t)v18);
  v20 = (__int128 *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  v21 = *((_QWORD *)v20 + 4);
  v22 = *((_BYTE *)v20 + 40);
  v23 = *((_BYTE *)v20 + 41);
  v24 = *((_BYTE *)v20 + 42);
  v25 = v20[1];
  v79 = *v20;
  v80 = v25;
  v81 = v21;
  v82 = v22;
  v83 = v23;
  v84 = v24;
  v72 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1A9C6BD5C(*(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  swift_beginAccess();
  v26 = v19 + v15[9];
  v74 = v8;
  v27 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v8 + 3);
  v71 = v14;
  v76 = v7;
  v27(v26, v14, v7);
  v28 = *(_QWORD *)(v19 + v15[7]);
  v75 = v18;
  v73 = v27;
  if (!v28)
  {
    v36 = v15[15];
    v70 = v15 + 15;
    *(_QWORD *)(v19 + v36) = 0;
    v35 = v71;
    goto LABEL_9;
  }
  v29 = sub_1A9C5A0D4();
  v30 = sub_1A9C5A2A4();
  if ((v30 & 1) != 0)
    v31 = v29 & 1 | 2;
  else
    v31 = v29 & 1;
  v32 = v15[15];
  v70 = v15 + 15;
  *(_QWORD *)(v19 + v32) = v31;
  v33 = v31 & 1;
  v34 = (v31 & 1) == 0;
  if ((v31 & 1) != 0)
  {
    v35 = v71;
    goto LABEL_10;
  }
  v35 = v71;
  if ((v30 & 1) == 0)
  {
LABEL_9:
    v33 = 0;
    v34 = 0;
  }
LABEL_10:
  *(_BYTE *)(v19 + v15[13]) = v33;
  *(_BYTE *)(v19 + v15[14]) = v34;
  sub_1A9CE63E4();
  v37 = sub_1A9C5C990((uint64_t)v6, v19);
  v39 = v38;
  sub_1A9BD5744((uint64_t)v6);
  v40 = (uint64_t *)(v19 + v15[18]);
  swift_bridgeObjectRelease();
  *v40 = v37;
  v40[1] = v39;
  sub_1A9CE63E4();
  v41 = sub_1A9C5C990((uint64_t)v6, v19);
  v43 = v42;
  sub_1A9BD5744((uint64_t)v6);
  v44 = (uint64_t *)(v19 + v15[19]);
  swift_bridgeObjectRelease();
  *v44 = v41;
  v44[1] = v43;
  sub_1A9C5B3A8();
  v45 = (void (*)(char *, uint64_t))*((_QWORD *)v74 + 1);
  v46 = v35;
  v47 = v76;
  v45(v46, v76);
  swift_endAccess();
  v48 = *((_QWORD *)v20 + 4);
  v49 = *((_BYTE *)v20 + 40);
  v50 = *((_BYTE *)v20 + 41);
  v51 = *((_BYTE *)v20 + 42);
  v52 = v20[1];
  v79 = *v20;
  v80 = v52;
  v81 = v48;
  v82 = v49;
  v83 = v50;
  v84 = v51;
  v53 = v78;
  sub_1A9C6BF60(*(double *)(v72 + 144));
  swift_beginAccess();
  v73(v19 + v15[10], v53, v47);
  v54 = *(_QWORD *)(v19 + v15[7]);
  v74 = v45;
  if (!v54)
  {
    *(_QWORD *)(v19 + *v70) = 0;
LABEL_18:
    v58 = 0;
    v59 = 0;
    goto LABEL_19;
  }
  v55 = sub_1A9C5A0D4();
  v56 = sub_1A9C5A2A4();
  if ((v56 & 1) != 0)
    v57 = v55 & 1 | 2;
  else
    v57 = v55 & 1;
  *(_QWORD *)(v19 + v15[15]) = v57;
  v58 = v57 & 1;
  v59 = (v57 & 1) == 0;
  if ((v57 & 1) == 0 && (v56 & 1) == 0)
    goto LABEL_18;
LABEL_19:
  *(_BYTE *)(v19 + v15[13]) = v58;
  *(_BYTE *)(v19 + v15[14]) = v59;
  sub_1A9CE63E4();
  v60 = sub_1A9C5C990((uint64_t)v6, v19);
  v62 = v61;
  sub_1A9BD5744((uint64_t)v6);
  v63 = (uint64_t *)(v19 + v15[18]);
  swift_bridgeObjectRelease();
  *v63 = v60;
  v63[1] = v62;
  sub_1A9CE63E4();
  v64 = sub_1A9C5C990((uint64_t)v6, v19);
  v66 = v65;
  sub_1A9BD5744((uint64_t)v6);
  v67 = (uint64_t *)(v19 + v15[19]);
  swift_bridgeObjectRelease();
  *v67 = v64;
  v67[1] = v66;
  sub_1A9C5B3A8();
  v74(v78, v47);
  swift_endAccess();
  v68 = (uint64_t)v75;
  (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v77) + 0x110))(v75);
  return sub_1A9BD9114(v68);
}

id sub_1A9C4A1BC(unsigned __int8 *a1)
{
  char *v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  char v30;
  id result;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  v3 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v35 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - v13;
  v16 = &a1[*(int *)(v15 + 72)];
  v17 = *(_QWORD *)v16;
  v18 = *((_QWORD *)v16 + 1);
  v19 = &v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  swift_beginAccess();
  v20 = (unsigned __int8 *)&v19[v3[18]];
  v21 = *((_QWORD *)v20 + 1);
  if (v18)
  {
    if (!v21)
    {
      sub_1A9BD9150((uint64_t)a1, (uint64_t)v14);
      goto LABEL_21;
    }
    if (v17 == *(_QWORD *)v20 && v18 == v21)
    {
      sub_1A9BD9150((uint64_t)a1, (uint64_t)v14);
    }
    else
    {
      v23 = sub_1A9CE8BB0();
      sub_1A9BD9150((uint64_t)a1, (uint64_t)v14);
      if ((v23 & 1) == 0)
        goto LABEL_21;
    }
  }
  else
  {
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v14);
    if (v21)
      goto LABEL_21;
  }
  v24 = v3[19];
  v25 = &v14[v24];
  v26 = *(_QWORD *)&v14[v24 + 8];
  v27 = (unsigned __int8 *)&v19[v24];
  v28 = *((_QWORD *)v27 + 1);
  if (!v26)
  {
    swift_bridgeObjectRetain();
    sub_1A9BD9114((uint64_t)v14);
    if (v28)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  if (!v28)
  {
LABEL_21:
    sub_1A9BD9114((uint64_t)v14);
LABEL_22:
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v10);
    goto LABEL_23;
  }
  if (*(_QWORD *)v25 == *(_QWORD *)v27 && v26 == v28)
  {
    sub_1A9BD9114((uint64_t)v14);
LABEL_31:
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v10);
    goto LABEL_32;
  }
  v30 = sub_1A9CE8BB0();
  sub_1A9BD9114((uint64_t)v14);
  sub_1A9BD9150((uint64_t)a1, (uint64_t)v10);
  if ((v30 & 1) == 0)
  {
LABEL_23:
    sub_1A9BD9114((uint64_t)v10);
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v6);
LABEL_24:
    sub_1A9BD9114((uint64_t)v6);
    goto LABEL_25;
  }
LABEL_32:
  v32 = v10[v3[13]];
  sub_1A9BD9114((uint64_t)v10);
  v33 = v19[v3[13]];
  sub_1A9BD9150((uint64_t)a1, (uint64_t)v6);
  if (v32 != v33)
    goto LABEL_24;
  v34 = v6[v3[14]];
  result = (id)sub_1A9BD9114((uint64_t)v6);
  if (v34 != v19[v3[14]])
  {
LABEL_25:
    sub_1A9C4AA08();
    if (*a1 == *v19)
    {
LABEL_27:
      objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
      return objc_msgSend(v1, sel_setNeedsLayout);
    }
LABEL_26:
    sub_1A9C4A474();
    goto LABEL_27;
  }
  if (*a1 != *v19)
    goto LABEL_26;
  return result;
}

void sub_1A9C4A474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (unsigned __int8 *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB47F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2F3A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v25 - v7;
  v9 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component) & 1) != 0)
  {
    v10 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
    swift_beginAccess();
    sub_1A9BD9150(v10, (uint64_t)v4);
    v11 = *v4;
    if (qword_1ED2626A8 != -1)
      swift_once();
    v12 = (id)qword_1ED264F90;
    v13 = sub_1A9CE6168();
    v15 = v14;
    swift_bridgeObjectRelease();

    v27 = v9;
    if (v11)
    {
      v26 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
    }
    else
    {
      if (qword_1EEB42BB0 != -1)
        swift_once();
      v26 = (id)qword_1EEB44258;
    }
    sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
    v24 = sub_1A9CE8754();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
    v28 = v13;
    v29 = v15;
    sub_1A9BA8EA4();
    sub_1A9CE88BC();
    objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
    v23 = (void *)sub_1A9CE8748();
    swift_bridgeObjectRelease();
    sub_1A9BD9114((uint64_t)v4);
    v9 = v27;
  }
  else
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v16 = (id)qword_1ED264F90;
    v17 = sub_1A9CE6168();
    v19 = v18;

    sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
    v20 = (void *)objc_opt_self();
    v21 = objc_msgSend(v20, sel_hk_sleepKeyColor);
    v22 = sub_1A9CE8754();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
    v30 = v17;
    v31 = v19;
    sub_1A9BA8EA4();
    sub_1A9CE88BC();
    objc_msgSend(v20, sel_secondaryLabelColor);
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
    v23 = (void *)sub_1A9CE8748();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v9, sel_setAttributedText_, v23);

}

uint64_t sub_1A9C4AA08()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for SleepScheduleComponentsViewModel();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v38 - v16;
  v18 = sub_1A9CE62E8();
  v39 = *(_QWORD *)(v18 - 8);
  v40 = v18;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)&v38 - v24;
  v26 = (uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  if ((v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component] & 1) != 0)
  {
    swift_beginAccess();
    v27 = 0;
    if (*(_BYTE *)(v26 + *(int *)(v10 + 56)) == 1)
      v27 = sub_1A9C482E4();
    objc_msgSend(v1, sel_setAccessoryView_, v27);

    sub_1A9BD9150(v26, (uint64_t)v14);
    sub_1A9CE63E4();
    sub_1A9BD9114((uint64_t)v14);
    v29 = v39;
    v28 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v6, 1, v40) == 1)
    {
      return sub_1A9BD5744((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v22, v6, v28);
      v34 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
      v35 = (void *)sub_1A9CE6258();
      objc_msgSend(v34, sel_setDate_, v35);

      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v22, v28);
    }
  }
  else
  {
    swift_beginAccess();
    v31 = 0;
    if (*(_BYTE *)(v26 + *(int *)(v10 + 52)) == 1)
      v31 = sub_1A9C482E4();
    objc_msgSend(v1, sel_setAccessoryView_, v31);

    sub_1A9BD9150(v26, (uint64_t)v17);
    sub_1A9CE63E4();
    sub_1A9BD9114((uint64_t)v17);
    v33 = v39;
    v32 = v40;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v9, 1, v40) == 1)
    {
      return sub_1A9BD5744((uint64_t)v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v25, v9, v32);
      v36 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
      v37 = (void *)sub_1A9CE6258();
      objc_msgSend(v36, sel_setDate_, v37);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v25, v32);
    }
  }
}

void sub_1A9C4AD54()
{
  char *v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = v0;
  if (v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component])
    v2 = 0x7055656B6157;
  else
    v2 = 0x656D6974646542;
  if (v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component])
    v3 = 0xE600000000000000;
  else
    v3 = 0xE700000000000000;
  v4 = MEMORY[0x1E0DEA968];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0xD000000000000015;
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(inited + 40) = 0x80000001A9CFC7A0;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v6 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = 0x7065656C53;
  *(_QWORD *)(v6 + 56) = 0xE500000000000000;
  strcpy((char *)(v6 + 64), "ScheduleEditor");
  *(_BYTE *)(v6 + 79) = -18;
  v8 = swift_bridgeObjectRetain();
  sub_1A9BB35E8(v8);
  sub_1A9B94CA0(0, &qword_1ED2632C0, v4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  v9 = (void *)sub_1A9CE82B0();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v9);

  v10 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel];
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11);

  v12 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker];
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAccessibilityIdentifier_, v13);

}

id ScheduleOccurrenceComponentsAccessibilityTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C4B0E4(uint64_t a1)
{
  return sub_1A9C495AC(a1);
}

uint64_t sub_1A9C4B104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v2 = sub_1A9CE642C();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v35 = (char *)&v30 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    sub_1A9C4C164(0, &qword_1EEB47C40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], &qword_1EEB47C48, MEMORY[0x1E0CB11D0]);
    v11 = sub_1A9CE89A0();
    v12 = 0;
    v34 = v11 + 56;
    v13 = *(unsigned __int8 *)(v3 + 80);
    v31 = v10;
    v32 = a1 + ((v13 + 32) & ~v13);
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v33 = v12;
      v15(v35, v32 + v14 * v12, v2);
      sub_1A9B92B9C(&qword_1EEB47C48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
      v16 = sub_1A9CE8244();
      v17 = ~(-1 << *(_BYTE *)(v11 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v34 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v15(v7, *(_QWORD *)(v11 + 48) + v18 * v14, v2);
          sub_1A9B92B9C(&qword_1EEB47C50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
          v22 = sub_1A9CE82A4();
          v23 = v3;
          v24 = *(void (**)(char *, uint64_t))(v3 + 8);
          v24(v7, v2);
          if ((v22 & 1) != 0)
          {
            v24(v35, v2);
            v3 = v23;
            v10 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v34 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v23;
        }
        while ((v20 & (1 << v18)) != 0);
        v10 = v31;
      }
      v25 = v35;
      *(_QWORD *)(v34 + 8 * v19) = v21 | v20;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v11 + 48) + v18 * v14, v25, v2);
      v27 = *(_QWORD *)(v11 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v11 + 16) = v29;
LABEL_4:
      v12 = v33 + 1;
      if (v33 + 1 == v10)
        return v11;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

id sub_1A9C4B384()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  v0 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4B58]);
  v1 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v0);

  v2 = (void *)sub_1A9CE82B0();
  v3 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v2, v1);

  if (!v3)
    return 0;
  v4 = objc_msgSend((id)objc_opt_self(), sel_systemOrangeColor);
  v5 = objc_msgSend(v3, sel_imageWithTintColor_renderingMode_, v4, 1);

  return v5;
}

uint64_t sub_1A9C4B4B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v2 = sub_1A9CE8CE8();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v35 = (char *)&v30 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    sub_1A9C4C164(0, &qword_1ED262748, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], &qword_1ED262758, MEMORY[0x1E0CB2800]);
    v11 = sub_1A9CE89A0();
    v12 = 0;
    v34 = v11 + 56;
    v13 = *(unsigned __int8 *)(v3 + 80);
    v31 = v10;
    v32 = a1 + ((v13 + 32) & ~v13);
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v33 = v12;
      v15(v35, v32 + v14 * v12, v2);
      sub_1A9B92B9C(&qword_1ED262758, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2800]);
      v16 = sub_1A9CE8244();
      v17 = ~(-1 << *(_BYTE *)(v11 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v34 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v15(v7, *(_QWORD *)(v11 + 48) + v18 * v14, v2);
          sub_1A9B92B9C(&qword_1ED262760, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2808]);
          v22 = sub_1A9CE82A4();
          v23 = v3;
          v24 = *(void (**)(char *, uint64_t))(v3 + 8);
          v24(v7, v2);
          if ((v22 & 1) != 0)
          {
            v24(v35, v2);
            v3 = v23;
            v10 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v34 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v23;
        }
        while ((v20 & (1 << v18)) != 0);
        v10 = v31;
      }
      v25 = v35;
      *(_QWORD *)(v34 + 8 * v19) = v21 | v20;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v11 + 48) + v18 * v14, v25, v2);
      v27 = *(_QWORD *)(v11 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v11 + 16) = v29;
LABEL_4:
      v12 = v33 + 1;
      if (v33 + 1 == v10)
        return v11;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

_QWORD *sub_1A9C4B734(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  char v21;
  void *v22;
  objc_class *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (*v26)(void);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v31;

  v5 = sub_1A9CE6378();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v14 = &v2[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CB0EF8], v5);
  v15 = v2;
  sub_1A9CE6384();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v13, v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView] = 0;
  v16 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel;
  v17 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  objc_msgSend(v18, sel_setTextColor_, v17);

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
  objc_msgSend(v18, sel_setFont_, v19);

  objc_msgSend(v18, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v18, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v18, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v15[v16] = v18;
  v20 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker;
  *(_QWORD *)&v15[v20] = sub_1A9C48370();
  if (a2)
  {
    if (a1 == 0xD00000000000003DLL && a2 == 0x80000001A9CF7D60)
      v21 = 1;
    else
      v21 = sub_1A9CE8BB0() & 1;
    v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component] = v21;

    v22 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component] = 0;

    v22 = 0;
  }
  v23 = (objc_class *)type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  v31.receiver = v15;
  v31.super_class = v23;
  v24 = objc_msgSendSuper2(&v31, sel_initWithStyle_reuseIdentifier_, 0, v22);

  v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v26 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0xD0);
  v27 = v24;
  v28 = v26();
  (*(void (**)(uint64_t))((*v25 & *v27) + 0xD8))(v28);
  sub_1A9C4AD54();
  v29 = (*(uint64_t (**)(void))((*v25 & *v27) + 0xF0))();
  (*(void (**)(uint64_t))((*v25 & *v27) + 0xF8))(v29);

  return v27;
}

uint64_t type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell()
{
  uint64_t result;

  result = qword_1EEB47C30;
  if (!qword_1EEB47C30)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1A9C4BAFC()
{
  unint64_t result;

  result = qword_1EEB47BF8;
  if (!qword_1EEB47BF8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component, &type metadata for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component);
    atomic_store(result, (unint64_t *)&qword_1EEB47BF8);
  }
  return result;
}

uint64_t sub_1A9C4BB40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1A9C4BB98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1A9C4BBF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  return sub_1A9BD9150(v3, a2);
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCellDelegate.scheduleOccurrenceComponentsAccessibilityTableViewCellCanUpdateValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCellDelegate.scheduleOccurrenceComponentsAccessibilityTableViewCellDidUpdateValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1A9C4BC60()
{
  return type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
}

uint64_t sub_1A9C4BC68()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceComponentsAccessibilityTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.model.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.timeComponents.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.apply(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsAccessibilityTableViewCell.clockDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9C4BE54 + 4 * byte_1A9CF2BA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9C4BE88 + 4 * byte_1A9CF2BA0[v4]))();
}

uint64_t sub_1A9C4BE88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C4BE90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C4BE98);
  return result;
}

uint64_t sub_1A9C4BEA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C4BEACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9C4BEB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C4BEB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component()
{
  return &type metadata for ScheduleOccurrenceComponentsAccessibilityTableViewCell.Component;
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

void sub_1A9C4BEEC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_1A9CE6378();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v11 = &v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model];
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0CB0EF8], v2);
  sub_1A9CE6384();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v10, v11);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell____lazy_storage___alertImageView] = 0;
  v12 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel;
  v13 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  objc_msgSend(v14, sel_setTextColor_, v13);

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v15 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
  objc_msgSend(v14, sel_setFont_, v15);

  objc_msgSend(v14, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v14, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v14, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v1[v12] = v14;
  v16 = OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker;
  *(_QWORD *)&v1[v16] = sub_1A9C48370();

  sub_1A9CE8A84();
  __break(1u);
}

void sub_1A9C4C164(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_1A9B92B9C(a4, a3, a5);
    v9 = sub_1A9CE89AC();
    if (!v10)
      atomic_store(v9, a2);
  }
}

double sub_1A9C4C1E4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];
  uint64_t v6;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1A9C4C9E8(v3, (uint64_t)v5, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
  if (!v6)
  {
    sub_1A9BEDB34((uint64_t)v5, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
    goto LABEL_5;
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB47C60);
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1A9C4C2D8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = v1;
  sub_1A9C4C9E8(a1, (uint64_t)v9, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
  if (v10)
  {
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB47C60);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v12 + 1))
      {
        sub_1A9B949B8(&v11, (uint64_t)&v14);
        sub_1A9B923D4((uint64_t)&v14, (uint64_t)&v11);
        v4 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
        swift_beginAccess();
        sub_1A9C4CA38((uint64_t)&v11, v4);
        swift_endAccess();
        objc_msgSend(v2, sel_setNeedsUpdateConfiguration);
        sub_1A9BEDB34((uint64_t)&v11, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v14);
        goto LABEL_15;
      }
    }
    else
    {
      v13 = 0;
      v11 = 0u;
      v12 = 0u;
    }
  }
  else
  {
    sub_1A9BEDB34((uint64_t)v9, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
  }
  sub_1A9BEDB34((uint64_t)&v11, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
  v5 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1A9C4C9E8(v5, (uint64_t)&v11, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
  if (!*((_QWORD *)&v12 + 1))
  {
    sub_1A9BEDB34((uint64_t)&v11, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
    v14 = 0u;
    v15 = 0u;
    v16 = 0;
    goto LABEL_13;
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB47C60);
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    goto LABEL_13;
  }
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_13:
    sub_1A9BEDB34((uint64_t)&v14, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    swift_beginAccess();
    sub_1A9C4CA38((uint64_t)&v14, v5);
    swift_endAccess();
    objc_msgSend(v2, sel_setNeedsUpdateConfiguration);
    v6 = &qword_1EEB47C58;
    v7 = &qword_1EEB47C60;
    goto LABEL_14;
  }
  v6 = (unint64_t *)&qword_1EEB44998;
  v7 = &qword_1EEB449A0;
LABEL_14:
  sub_1A9BEDB34((uint64_t)&v14, v6, (unint64_t *)v7);
LABEL_15:
  sub_1A9C4C9E8(a1, (uint64_t)v9, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
  if (v10)
  {
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
    sub_1A9B94928(0, &qword_1EEB47C70);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v12 + 1))
      {
        sub_1A9B949B8(&v11, (uint64_t)&v14);
        __swift_project_boxed_opaque_existential_1Tm(&v14, *((uint64_t *)&v15 + 1));
        objc_msgSend(v2, sel_setSelectionStyle_, sub_1A9CE68F4());
        sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v14);
      }
    }
    else
    {
      v13 = 0;
      v11 = 0u;
      v12 = 0u;
    }
  }
  else
  {
    sub_1A9BEDB34((uint64_t)v9, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
  }
  sub_1A9BEDB34((uint64_t)&v11, &qword_1EEB47C68, &qword_1EEB47C70);
  objc_msgSend(v2, sel_setSelectionStyle_, 3);
  return sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
}

void (*sub_1A9C4C77C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[13] = v1;
  v4 = v1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1A9C4C9E8(v4, (uint64_t)(v3 + 5), &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
  if (v3[8])
  {
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB47C60);
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v3[4] = 0;
      *(_OWORD *)v3 = 0u;
      *((_OWORD *)v3 + 1) = 0u;
    }
  }
  else
  {
    sub_1A9BEDB34((uint64_t)(v3 + 5), &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    v3[4] = 0;
  }
  return sub_1A9C4C8A0;
}

void sub_1A9C4C8A0(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    sub_1A9C4C9E8(*a1, (uint64_t)v2 + 40, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    sub_1A9C4C2D8((uint64_t)v2 + 40);
    sub_1A9BEDB34((uint64_t)v2, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
  }
  else
  {
    sub_1A9C4C2D8(*a1);
  }
  free(v2);
}

void (*sub_1A9C4C940(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1A9C4C77C(v2);
  return sub_1A9BA04A0;
}

uint64_t sub_1A9C4C984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CF2D84, a3);
  return sub_1A9CE67E0();
}

uint64_t sub_1A9C4C9E8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;

  sub_1A9BEDB70(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1A9C4CA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BEDB70(0, &qword_1EEB47C58, (unint64_t *)&qword_1EEB47C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

id sub_1A9C4CBE0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlusMinusButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PlusMinusButton()
{
  return objc_opt_self();
}

id sub_1A9C4CC30()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0CEC7A0]);
  v1 = (void *)sub_1A9CE82B0();
  v2 = objc_msgSend(v0, sel_initWithBundleIdentifier_, v1);

  return v2;
}

id static UNUserNotificationCenter.healthNotificationCenter.getter()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0CEC7A0]);
  v1 = (void *)sub_1A9CE82B0();
  v2 = objc_msgSend(v0, sel_initWithBundleIdentifier_, v1);

  return v2;
}

uint64_t static MultiPickerModel.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;

  v4 = a4;
  v6 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v6(a3, a4);
  v6(a3, v4);
  swift_getAssociatedTypeWitness();
  v7 = sub_1A9CE8430();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1AF420284](MEMORY[0x1E0DEAF30], v7, &AssociatedConformanceWitness);
  LOBYTE(v4) = sub_1A9CE843C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1A9C4CE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(void))(a2 + 32))();
  swift_getAssociatedTypeWitness();
  v3 = sub_1A9CE8430();
  v4 = MEMORY[0x1AF41F054](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A9C4CE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1A9CE8430();
  sub_1A9CE8454();
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x1AF41F054](v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1A9C4CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  swift_getAssociatedTypeWitness();
  v4 = sub_1A9CE8430();
  sub_1A9CE8454();
  swift_bridgeObjectRelease();
  MEMORY[0x1AF420284](MEMORY[0x1E0DEAF50], v4);
  swift_getAssociatedConformanceWitness();
  sub_1A9CE8580();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1A9C4D04C()
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  sub_1A9CE8430();
  sub_1A9CE7F14();
  sub_1A9CE7EFC();
  return v1;
}

uint64_t MultiPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1A9CE7F14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - v7;
  v10 = type metadata accessor for MultiPickerLink(0, v3, *(_QWORD *)(a1 + 24), v9);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v27 - v17;
  sub_1A9CE7EFC();
  v19 = sub_1A9C4D04C();
  v21 = v20;
  v23 = v22;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v15, v8, v4);
  v24 = (uint64_t *)&v15[*(int *)(v10 + 36)];
  *v24 = v19;
  v24[1] = v21;
  v24[2] = v23;
  MEMORY[0x1AF420284](&unk_1A9CF2F78, v10);
  sub_1A9C3C998((uint64_t)v15, v10, (uint64_t)v18);
  v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v15, v10);
  sub_1A9C3899C((uint64_t)v18, v10, v28);
  return ((uint64_t (*)(char *, uint64_t))v25)(v18, v10);
}

uint64_t type metadata accessor for MultiPickerLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiPickerLink);
}

uint64_t sub_1A9C4D254()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C4D288()
{
  uint64_t v0;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  sub_1A9CE8430();
  v0 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14](&v2, v0);
  return v2;
}

uint64_t sub_1A9C4D304()
{
  swift_getAssociatedTypeWitness();
  sub_1A9CE8430();
  sub_1A9CE7F14();
  return sub_1A9CE7EF0();
}

uint64_t dispatch thunk of MultiPickerModel.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MultiPickerModel.title(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of MultiPickerModel.validate(selection:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata accessor for MultiPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiPicker);
}

uint64_t sub_1A9C4D3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for MultiPickerLink(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_1A9C4D444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for MultiPickerLink.Coordinator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return sub_1A9C4E8F4(v4, v5, v6, v7);
}

uint64_t sub_1A9C4D478(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_1A9CE8070();
  v29 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE8094();
  v27 = *(_QWORD *)(v12 - 8);
  v28 = v12;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](v14, v19);
  if (!sub_1A9C4D728(a2, a3))
    return sub_1A9C4D8D8(a1, a3);
  sub_1A9C04C74();
  v26 = sub_1A9CE870C();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a3);
  v20 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v21 + 32) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v21 + v20, (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  aBlock[4] = sub_1A9C4E9F0;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_20;
  v22 = _Block_copy(aBlock);
  v23 = a1;
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1A9BE9F98(0);
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45830, (uint64_t (*)(uint64_t))sub_1A9BE9F98, MEMORY[0x1E0DEAF38]);
  sub_1A9CE8904();
  v24 = (void *)v26;
  MEMORY[0x1AF41F348](0, v16, v11, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
}

BOOL sub_1A9C4D728(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v4, v7);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v23 - v14;
  MEMORY[0x1AF420284](&unk_1A9CF2EE8);
  sub_1A9CE7638();
  sub_1A9CE762C();
  v16 = v24;
  v17 = (char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x60);
  v19 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x58), v18);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v6, v17, v19);

  v20 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14]();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a2);
  MEMORY[0x1AF41EB14](v20);
  LOBYTE(v17) = sub_1A9CE82A4();
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  v21(v15, v8);
  return (v17 & 1) == 0;
}

uint64_t sub_1A9C4D8D8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v31 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v30 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = sub_1A9CE8880();
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v36 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (uint64_t *)((char *)&v30 - v17);
  v34 = v2;
  v41 = sub_1A9C4D288();
  v19 = sub_1A9CE8430();
  MEMORY[0x1AF420284](MEMORY[0x1E0DEAF38], v19);
  sub_1A9CE8394();
  swift_bridgeObjectRelease();
  v39 = v40;
  sub_1A9CE8AB4();
  sub_1A9CE8A90();
  v20 = AssociatedTypeWitness;
  v21 = v30;
  v35 = sub_1A9CE8AA8();
  while (1)
  {
    v22 = v36;
    sub_1A9CE8A9C();
    (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(v18, v22, v38);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v18, 1, TupleTypeMetadata2) == 1)break;
    v23 = *v18;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v10, (char *)v18 + *(int *)(TupleTypeMetadata2 + 48), v20);
    v24 = sub_1A9CE7F14();
    MEMORY[0x1AF41EB14](v24);
    v25 = sub_1A9C4CF30((uint64_t)v10, v23, v3, v32);
    v26 = v21;
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v3);
    if ((v28 & 1) == 0)
      objc_msgSend(v31, sel_selectRow_inComponent_animated_, v25, v23, 0);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v20);
    v21 = v26;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9C4DBB0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v4;
  char *v5;
  uint64_t v6;

  v4 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v5 = (char *)v2 + v4[12];
  v6 = type metadata accessor for MultiPickerLink(0, v4[10], v4[11], a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v5, v6);
}

uint64_t sub_1A9C4DC08(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3;
  v5 = a1;
  v7 = sub_1A9C4EB54((uint64_t)v5, v6);

  return v7;
}

uint64_t sub_1A9C4DC50(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = a1;
  v9 = sub_1A9C4EC78(a4, v8);

  return v9;
}

id sub_1A9C4DCA0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v8 = a3;
  v9 = a1;
  sub_1A9C4EE88(a4, a5);
  v11 = v10;

  if (v11)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

void sub_1A9C4DD24(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;

  v8 = a3;
  v9 = a1;
  sub_1A9C4F1A4(a4, a5);

}

void sub_1A9C4DD84()
{
  sub_1A9C4F744();
}

id sub_1A9C4DDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for MultiPickerLink.Coordinator(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t sub_1A9C4DDEC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60);
  v5 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), a4);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t type metadata accessor for MultiPickerLink.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiPickerLink.Coordinator);
}

void sub_1A9C4DE48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MultiPickerLink(255, *a1, a1[1], a4);
  JUMPOUT(0x1AF420284);
}

uint64_t sub_1A9C4DE70()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE7F14();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9C4DEE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    v18 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v18[1] = v19[1];
    v18[2] = v19[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1A9C4E018(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A9C4E0A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1A9C4E19C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_retain();
  swift_release();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1A9C4E2A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = (unint64_t)a1 + v9;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = v10 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v14 = v13;
  *(_QWORD *)(v14 + 16) = v12;
  return a1;
}

_QWORD *sub_1A9C4E350(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  v11[1] = v12[1];
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C4E434(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v12 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v12 + v7 + 8) & ~v7);
    }
    else
    {
      v13 = *v12;
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A9C4E4C0 + 4 * byte_1A9CF2DD0[v10]))();
  }
}

void sub_1A9C4E548(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1A9C4E650()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C4E6C0);
}

void sub_1A9C4E658(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A9C4E660);
  JUMPOUT(0x1A9C4E6C0);
}

void sub_1A9C4E678()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C4E6C0);
}

void sub_1A9C4E680()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C4E6C0);
}

void sub_1A9C4E688(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1A9C4E6BCLL);
      JUMPOUT(0x1A9C4E6B8);
    }
    JUMPOUT(0x1A9C4E694);
  }
  JUMPOUT(0x1A9C4E6C0);
}

void sub_1A9C4E6D8()
{
  JUMPOUT(0x1AF420284);
}

id sub_1A9C4E6E8(uint64_t a1, uint64_t a2)
{
  return sub_1A9C4EA6C(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

id sub_1A9C4E6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  id result;

  result = sub_1A9C4D444(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_1A9C4E71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CF2EE8, a3);
  return sub_1A9CE74AC();
}

uint64_t sub_1A9C4E778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CF2EE8, a3);
  return sub_1A9CE7458();
}

void sub_1A9C4E7D4(uint64_t a1)
{
  MEMORY[0x1AF420284](&unk_1A9CF2EE8, a1);
  sub_1A9CE74A0();
  __break(1u);
}

uint64_t sub_1A9C4E804(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

id sub_1A9C4E854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;

  v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58);
  v7 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60);
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50);
  v9 = type metadata accessor for MultiPickerLink(0, v8, v6, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, a1, v9);
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for MultiPickerLink.Coordinator(0, v8, v6, v10);
  return objc_msgSendSuper2(&v12, sel_init);
}

id sub_1A9C4E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = objc_allocWithZone((Class)type metadata accessor for MultiPickerLink.Coordinator(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return sub_1A9C4E854(a1, v7, v8, v9);
}

uint64_t sub_1A9C4E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MultiPickerLink(0, v5, *(_QWORD *)(v4 + 24), a4) - 8)
                          + 80);
  v7 = (v6 + 40) & ~v6;

  swift_release();
  swift_release();
  v8 = sub_1A9CE7F14();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v7 + *(int *)(v8 + 32), v5);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A9C4E9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;

  v5 = type metadata accessor for MultiPickerLink(0, v4[2], v4[3], a4);
  v6 = (void *)v4[4];
  objc_msgSend(v6, sel_reloadAllComponents);
  return sub_1A9C4D8D8(v6, v5);
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

id sub_1A9C4EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3AE0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v7 = type metadata accessor for MultiPickerLink(255, a2, a3, v6);
  MEMORY[0x1AF420284](&unk_1A9CF2EE8, v7);
  sub_1A9CE7638();
  sub_1A9CE762C();
  objc_msgSend(v5, sel_setDataSource_, v9);

  sub_1A9CE762C();
  objc_msgSend(v5, sel_setDelegate_, v9);

  return v5;
}

uint64_t sub_1A9C4EB54(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2);
  v4 = v3[10];
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v18 - v6;
  v8 = v3[11];
  v10 = type metadata accessor for MultiPickerLink(0, v4, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v18 - v13;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)&v18 - v13, &v2[v3[12]], v10);
  v15 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14](v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v16 = sub_1A9C4CE00(v4, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_1A9C4EC78(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v26)(char *, uint64_t);
  uint64_t v27;

  v3 = v2;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2);
  v6 = v5[10];
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v26 - v8;
  v10 = v5[11];
  v12 = type metadata accessor for MultiPickerLink(0, v6, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v26 - v15;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)&v26 - v15, &v3[v5[12]], v12);
  v27 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14]();
  v17 = *(void (**)(char *, uint64_t))(v13 + 8);
  v17(v16, v12);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v6, v10);
  v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  v26(v9, v6);
  swift_getAssociatedTypeWitness();
  v19 = sub_1A9CE8430();
  v20 = MEMORY[0x1AF41F054](v18, v19);
  swift_bridgeObjectRelease();
  v22 = 0;
  if (v20 > a1)
  {
    v23 = &v3[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x60)];
    v24 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x58), v21);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v16, v23, v24);
    MEMORY[0x1AF41EB14](v27);
    v17(v16, v12);
    v22 = sub_1A9C4CE7C(a1, v6, v10);
    v26(v9, v6);
  }
  return v22;
}

uint64_t sub_1A9C4EE88(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a1;
  v36 = a2;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[10];
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v30 - v6;
  v8 = v3[11];
  v10 = type metadata accessor for MultiPickerLink(0, v4, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v30 - v13;
  v15 = v3[12];
  v34 = v2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, (char *)v2 + v15, v10);
  v32 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14]();
  v31 = *(void (**)(char *, uint64_t))(v11 + 8);
  v31(v14, v10);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 32);
  v16 = v30(v4, v8);
  v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v7, v4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = sub_1A9CE8430();
  v19 = MEMORY[0x1AF41F054](v16, v18);
  swift_bridgeObjectRelease();
  v21 = 0;
  if (v19 > v36)
  {
    v22 = v36;
    v23 = (char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x60);
    v24 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x58), v20);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v14, v23, v24);
    MEMORY[0x1AF41EB14](v32);
    v31(v14, v10);
    v30(v4, v8);
    v33(v7, v4);
    sub_1A9CE8454();
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1AF41F054](v37, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    v21 = 0;
    if (v25 > v35)
    {
      v27 = (char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x60);
      v28 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x58), v26);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v14, v27, v28);
      MEMORY[0x1AF41EB14](v32);
      v31(v14, v10);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v35, v22, v4, v8);
      v33(v7, v4);
    }
  }
  return v21;
}

uint64_t sub_1A9C4F1A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char isClassOrObjCExistentialType;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;

  v3 = v2;
  v83 = a1;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v6 = v5[10];
  v7 = v5[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v79 = (char *)&v76 - v11;
  v12 = *(_QWORD *)(v6 - 8);
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v78 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v76 - v17;
  v20 = type metadata accessor for MultiPickerLink(0, v6, v7, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v81 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v77 = (char *)&v76 - v27;
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v31 = (char *)&v76 - v30;
  v32 = v5[12];
  v88 = v3;
  v33 = (char *)v3 + v32;
  v34 = v29;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v76 - v30, v33, v29);
  v87 = sub_1A9CE7F14();
  MEMORY[0x1AF41EB14]();
  v89 = *(void (**)(char *, uint64_t))(v21 + 8);
  v89(v31, v34);
  v35 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  v84 = v7;
  v82 = v35;
  v36 = ((uint64_t (*)(uint64_t, uint64_t))v35)(v6, v7);
  v37 = *(void (**)(char *, uint64_t))(v12 + 8);
  v37(v18, v6);
  v85 = AssociatedTypeWitness;
  v38 = sub_1A9CE8430();
  v39 = MEMORY[0x1AF41F054](v36, v38);
  result = swift_bridgeObjectRelease();
  v86 = a2;
  if (v39 > a2)
  {
    v42 = (char *)v88 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x60);
    v43 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x58), v41);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v31, v42, v43);
    MEMORY[0x1AF41EB14](v87);
    v89(v31, v34);
    v82(v6, v84);
    v37(v18, v6);
    sub_1A9CE8454();
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x1AF41F054](v90, v85);
    result = swift_bridgeObjectRelease();
    if (v44 > v83)
    {
      v46 = v88;
      v47 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v48 = (char *)v88 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x60);
      v49 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x58), v45);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v31, v48, v49);
      v76 = v34;
      v50 = sub_1A9C4D288();
      v51 = v34;
      v52 = v89;
      v89(v31, v51);
      v90 = v50;
      v53 = (char *)v46 + *(_QWORD *)((*v47 & *v46) + 0x60);
      v55 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*v47 & *v46) + 0x50), *(_QWORD *)((*v47 & *v46) + 0x58), v54);
      v56 = v77;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v77, v53, v55);
      v57 = v78;
      MEMORY[0x1AF41EB14](v87);
      v52(v56, v76);
      v58 = v84;
      v82(v6, v84);
      v37(v57, v6);
      v59 = v86;
      sub_1A9CE8454();
      swift_bridgeObjectRelease();
      v82 = (void (*)(uint64_t, uint64_t))v37;
      v60 = v79;
      v61 = v85;
      sub_1A9CE8454();
      swift_bridgeObjectRelease();
      sub_1A9CE8400();
      v62 = v90;
      sub_1A9C4E804(v59, v90);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v64 = v62 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v64 = v62;
      (*(void (**)(unint64_t, char *, uint64_t))(v80 + 40))(v64+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v59, v60, v61);
      v65 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v66 = (char *)v88 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x60);
      v67 = v88;
      v69 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v88) + 0x58), v68);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v31, v66, v69);
      v70 = (char *)v67 + *(_QWORD *)((*v65 & *v67) + 0x60);
      v72 = type metadata accessor for MultiPickerLink(0, *(_QWORD *)((*v65 & *v67) + 0x50), *(_QWORD *)((*v65 & *v67) + 0x58), v71);
      v73 = v81;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v81, v70, v72);
      MEMORY[0x1AF41EB14](v87);
      v74 = v76;
      v75 = (uint64_t (*)(char *, uint64_t))v89;
      v89(v73, v76);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v90, v6, v58);
      swift_bridgeObjectRelease();
      v82((uint64_t)v18, v6);
      sub_1A9C4D304();
      return v75(v31, v74);
    }
  }
  return result;
}

void sub_1A9C4F744()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

BOOL static HKSPSleepScheduleOccurrence.DateDescription.DayContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.DayContext.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.DayContext.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

void HKSPSleepScheduleOccurrence.DateDescription.dayContext.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *HKSPSleepScheduleOccurrence.DateDescription.dayContext.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.dayContext.modify())()
{
  return nullsub_1;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.dayPeriod.modify())()
{
  return nullsub_1;
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKSPSleepScheduleOccurrence.DateDescription.isSingleDayOverride.modify())()
{
  return nullsub_1;
}

_BYTE *HKSPSleepScheduleOccurrence.DateDescription.init(dayContext:dayPeriod:isSingleDayOverride:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

unint64_t sub_1A9C4F870()
{
  unint64_t result;

  result = qword_1EEB47E38[0];
  if (!qword_1EEB47E38[0])
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for HKSPSleepScheduleOccurrence.DateDescription.DayContext, &type metadata for HKSPSleepScheduleOccurrence.DateDescription.DayContext);
    atomic_store(result, qword_1EEB47E38);
  }
  return result;
}

uint64_t _s15DateDescriptionVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s15DateDescriptionVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKSPSleepScheduleOccurrence.DateDescription()
{
  return &type metadata for HKSPSleepScheduleOccurrence.DateDescription;
}

uint64_t _s15DateDescriptionV10DayContextOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9C4F9A8 + 4 * byte_1A9CF2FCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9C4F9DC + 4 * byte_1A9CF2FC8[v4]))();
}

uint64_t sub_1A9C4F9DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C4F9E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C4F9ECLL);
  return result;
}

uint64_t sub_1A9C4F9F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C4FA00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9C4FA04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C4FA0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKSPSleepScheduleOccurrence.DateDescription.DayContext()
{
  return &type metadata for HKSPSleepScheduleOccurrence.DateDescription.DayContext;
}

void Date.formattedText.getter()
{
  id v0;
  void *v1;
  void *v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (v0)
  {
    v1 = v0;
    v2 = (void *)sub_1A9CE6258();
    v3 = objc_msgSend(v1, sel_formatDateAsTimeStyle_, v2);

    if (v3)
    {
      sub_1A9CE82E0();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void ForEachWithIndexAsID.init(_:content:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ForEachWithIndexAsID();
}

uint64_t sub_1A9C4FB2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void type metadata accessor for ForEachWithIndexAsID()
{
  JUMPOUT(0x1AF4201F4);
}

uint64_t ForEachWithIndexAsID.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  _QWORD v31[2];
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v41 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v39 = *(_QWORD *)(a1 - 8);
  v40 = v5;
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v37 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v6 + 16);
  v34 = *(_QWORD *)(v6 + 32);
  v9 = sub_1A9CE8AB4();
  MEMORY[0x1E0C80A78](v9, v10);
  swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x1E0DEB418];
  swift_getTupleTypeMetadata2();
  v12 = sub_1A9CE8430();
  v36 = v12;
  v13 = *(_QWORD *)(a1 + 24);
  v35 = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF48], v12);
  v47 = v12;
  v48 = v11;
  v49 = v13;
  v50 = v35;
  v51 = MEMORY[0x1E0DEB428];
  v14 = sub_1A9CE7F68();
  v38 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v32 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18);
  v33 = (uint64_t)v31 - v19;
  sub_1A9CE8394();
  MEMORY[0x1AF420284](MEMORY[0x1E0DECC68], v9);
  v47 = sub_1A9CE8448();
  v42 = v8;
  v43 = v13;
  v20 = *(_QWORD *)(a1 + 40);
  v21 = v34;
  v44 = v34;
  v45 = v20;
  v31[1] = swift_getKeyPath();
  v22 = v39;
  v23 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v3, a1);
  v24 = (*(unsigned __int8 *)(v22 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = v8;
  *((_QWORD *)v25 + 3) = v13;
  *((_QWORD *)v25 + 4) = v21;
  *((_QWORD *)v25 + 5) = v20;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v25[v24], v23, a1);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v8;
  v26[3] = v13;
  v26[4] = v21;
  v26[5] = v20;
  v26[6] = sub_1A9C50050;
  v26[7] = v25;
  v27 = (uint64_t)v32;
  sub_1A9CE7F50();
  v46 = v20;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFEE8], v14, &v46);
  v28 = v33;
  sub_1A9C3C998(v27, v14, v33);
  v29 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v29(v27, v14);
  sub_1A9C3899C(v28, v14, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v29)(v28, v14);
}

void sub_1A9C4FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ForEachWithIndexAsID();
}

uint64_t sub_1A9C4FF34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 52)))(v3);
  sub_1A9C3C998(v5, v1, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v1);
  sub_1A9C3899C(v6, v1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v1);
}

void sub_1A9C4FFAC()
{
  type metadata accessor for ForEachWithIndexAsID();
}

uint64_t sub_1A9C4FFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + ((v2 + 48) & ~v2));
  swift_release();
  return swift_deallocObject();
}

void sub_1A9C50050()
{
  type metadata accessor for ForEachWithIndexAsID();
}

void sub_1A9C50094()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A9C4FEA8(v1, v0);
}

uint64_t sub_1A9C500E0(char *a1, uint64_t (*a2)(uint64_t, char *))
{
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v4 = *(_QWORD *)a1;
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1A9C5017C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C501A0(char *a1)
{
  uint64_t v1;

  return sub_1A9C500E0(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 48));
}

uint64_t sub_1A9C501B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C501E8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A9C501F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9C50268(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1A9C50318(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_1A9C50358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1A9C503B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A9C50424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A9C50480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1A9C504E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A9C50560 + 4 * byte_1A9CF3080[v10]))();
  }
}

void sub_1A9C505E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1A9C506D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C50750);
}

void sub_1A9C506E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A9C506E8);
  JUMPOUT(0x1A9C50750);
}

void sub_1A9C50728()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C50750);
}

void sub_1A9C50730()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C50750);
}

uint64_t sub_1A9C50738(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1A9C50750);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1A9C5074CLL);
    JUMPOUT(0x1A9C50744);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_1A9C50768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x1E0DEB418];
  swift_getTupleTypeMetadata2();
  v7 = sub_1A9CE8430();
  v8 = v3;
  v9 = v1;
  v10 = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF48], v7);
  v11 = MEMORY[0x1E0DEB428];
  v4 = sub_1A9CE7F68();
  v6 = v2;
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDFEE8], v4, &v6);
}

id sub_1A9C50838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v17[6];
  objc_super v18;

  v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  v7 = &v3[OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell____lazy_storage___occurrenceView];
  v8 = type metadata accessor for ScheduleOccurrenceView(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  if (a3)
  {
    v9 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v18.receiver = v3;
  v18.super_class = (Class)type metadata accessor for ScheduleOccurrenceTableViewCell();
  v10 = objc_msgSendSuper2(&v18, sel_initWithStyle_reuseIdentifier_, a1, v9);

  v11 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v17[4] = sub_1A9C219C0;
  v17[5] = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1107296256;
  v17[2] = sub_1A9C21C90;
  v17[3] = &block_descriptor_21;
  v12 = _Block_copy(v17);
  v13 = v10;
  v14 = objc_msgSend(v11, sel_initWithDynamicProvider_, v12);
  _Block_release(v12);
  swift_release();
  objc_msgSend(v13, sel_setBackgroundColor_, v14);

  objc_msgSend(v13, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 1);
  *(_QWORD *)(swift_allocObject() + 16) = v13;
  v15 = v13;
  sub_1A9CE86B8();

  return v15;
}

uint64_t sub_1A9C50A04()
{
  uint64_t v0;
  uint64_t v2[5];

  sub_1A9C50E58();
  v2[3] = v0;
  v2[4] = sub_1A9B92B9C((unint64_t *)&unk_1EEB47F20, (uint64_t (*)(uint64_t))sub_1A9C50E58, MEMORY[0x1E0CDC120]);
  __swift_allocate_boxed_opaque_existential_1(v2);
  sub_1A9BB7054(0, &qword_1EEB47F08, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
  sub_1A9C50EE4();
  sub_1A9CE756C();
  return MEMORY[0x1AF41F2DC](v2);
}

uint64_t sub_1A9C50AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = a1 + OBJC_IVAR____TtC13SleepHealthUI31ScheduleOccurrenceTableViewCell_viewModelProviding;
  swift_beginAccess();
  sub_1A9C50F6C(v3, (uint64_t)&v9);
  if (v10)
  {
    sub_1A9B949B8(&v9, (uint64_t)v11);
    v4 = v12;
    v5 = v13;
    __swift_project_boxed_opaque_existential_1Tm(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    v6 = type metadata accessor for ScheduleOccurrenceView(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  }
  else
  {
    sub_1A9C0F26C((uint64_t)&v9, &qword_1EEB47C58, (void (*)(uint64_t))sub_1A9C50FC0);
    v8 = type metadata accessor for ScheduleOccurrenceView(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }
}

id sub_1A9C50CB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C50D40()
{
  return type metadata accessor for ScheduleOccurrenceTableViewCell();
}

uint64_t type metadata accessor for ScheduleOccurrenceTableViewCell()
{
  uint64_t result;

  result = qword_1EEB47EF8;
  if (!qword_1EEB47EF8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9C50D84()
{
  unint64_t v0;

  sub_1A9BB7054(319, &qword_1EEB47F08, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_1A9C50E24()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A9C50E48()
{
  return sub_1A9C50A04();
}

uint64_t sub_1A9C50E50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C50AB0(*(_QWORD *)(v1 + 16), a1);
}

void sub_1A9C50E58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47F10)
  {
    sub_1A9BB7054(255, &qword_1EEB47F08, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    sub_1A9C50EE4();
    v0 = sub_1A9CE7578();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47F10);
  }
}

unint64_t sub_1A9C50EE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB47F18;
  if (!qword_1EEB47F18)
  {
    sub_1A9BB7054(255, &qword_1EEB47F08, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceView);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB47B30, type metadata accessor for ScheduleOccurrenceView, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceView);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0798], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB47F18);
  }
  return result;
}

uint64_t sub_1A9C50F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BB7054(0, &qword_1EEB47C58, (void (*)(uint64_t))sub_1A9C50FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A9C50FC0()
{
  unint64_t result;

  result = qword_1EEB47C60;
  if (!qword_1EEB47C60)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47C60);
  }
  return result;
}

uint64_t UICollectionView.ElementKind.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v13;

  v4 = a1;
  if (sub_1A9CE82E0() == a1 && v6 == a2)
  {
    v9 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v8 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    v9 = 0;
    goto LABEL_9;
  }
  if (sub_1A9CE82E0() == v4 && v11 == a2)
  {
    v9 = 1;
    goto LABEL_8;
  }
  v13 = sub_1A9CE8BB0();
  result = swift_bridgeObjectRelease();
  v9 = a2;
  if ((v13 & 1) == 0)
    goto LABEL_10;
  v9 = 1;
LABEL_9:
  result = swift_bridgeObjectRelease();
  v4 = 0;
LABEL_10:
  *a3 = v4;
  a3[1] = v9;
  return result;
}

uint64_t UICollectionView.ElementKind.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v13;

  v4 = a1;
  if (sub_1A9CE82E0() == a1 && v6 == a2)
  {
    v9 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v8 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    v9 = 0;
    goto LABEL_9;
  }
  if (sub_1A9CE82E0() == v4 && v11 == a2)
  {
    v9 = 1;
    goto LABEL_8;
  }
  v13 = sub_1A9CE8BB0();
  result = swift_bridgeObjectRelease();
  v9 = a2;
  if ((v13 & 1) == 0)
    goto LABEL_10;
  v9 = 1;
LABEL_9:
  result = swift_bridgeObjectRelease();
  v4 = 0;
LABEL_10:
  *a3 = v4;
  a3[1] = v9;
  return result;
}

uint64_t UICollectionView.ElementKind.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  if (v2 > 1)
    v3 = v1;
  else
    v3 = sub_1A9CE82E0();
  sub_1A9C51260(v1, v2);
  return v3;
}

uint64_t sub_1A9C51260(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

double sub_1A9C51274@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  UICollectionView.ElementKind.init(rawValue:)(*a1, a1[1], &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_1A9C512B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  if (v4 > 1)
  {
    v5 = *v1;
    v6 = v1[1];
  }
  else
  {
    v5 = sub_1A9CE82E0();
  }
  *a1 = v5;
  a1[1] = v6;
  return sub_1A9C51260(v3, v4);
}

unint64_t _s11ElementKindOwxx(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s11ElementKindOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *_s11ElementKindOwca(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ElementKindOwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ElementKindOwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t _s11ElementKindOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1A9C5152C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1A9C51544(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for UICollectionView.ElementKind()
{
  return &type metadata for UICollectionView.ElementKind;
}

id sub_1A9C51574(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1EEB47F30);
}

id sub_1A9C51588(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_systemOrangeColor, &qword_1EEB47F38);
}

id sub_1A9C5159C(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_labelColor, &qword_1EEB47F40);
}

id sub_1A9C515B0(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1EEB47F48);
}

id sub_1A9C515C4()
{
  void *v0;
  id result;
  void *v2;
  id v3;
  uint64_t inited;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v0 = (void *)objc_opt_self();
  result = objc_msgSend(v0, sel__preferredFontForTextStyle_design_variant_maximumContentSizeCategory_compatibleWithTraitCollection_, *MEMORY[0x1E0DC4B58], *MEMORY[0x1E0DC1400], 1024, *MEMORY[0x1E0DC4900], 0);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_fontDescriptor);
    sub_1A9B92F34(0, &qword_1EEB47F58, (uint64_t (*)(uint64_t))sub_1A9C550F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A9CEB520;
    v5 = (void *)*MEMORY[0x1E0DC1380];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1380];
    v6 = v5;
    v7 = sub_1A9CC4C3C();
    sub_1A9B92F34(0, &qword_1EEB47F68, (uint64_t (*)(uint64_t))sub_1A9C55160, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    *(_QWORD *)(inited + 64) = v8;
    *(_QWORD *)(inited + 40) = v7;
    sub_1A9BAC500(inited);
    type metadata accessor for AttributeName(0);
    sub_1A9B92B9C((unint64_t *)&unk_1EEB47F80, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEC2A0);
    v9 = (void *)sub_1A9CE8208();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v3, sel_fontDescriptorByAddingAttributes_, v9);

    v11 = objc_msgSend(v0, sel_fontWithDescriptor_size_, v10, 0.0);
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1A9C51798(unsigned __int8 *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  id result;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v44;
  uint64_t v45;

  v2 = v1;
  v4 = sub_1A9CE6360();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &a1[*(int *)(v11 + 72)];
  v15 = *(_QWORD *)v14;
  v16 = *((_QWORD *)v14 + 1);
  v17 = &v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model];
  swift_beginAccess();
  v18 = &v17[v9[18]];
  v19 = *((_QWORD *)v18 + 1);
  if (!v16)
  {
    if (!v19)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (!v19 || (v15 == *(_QWORD *)v18 ? (v20 = v16 == v19) : (v20 = 0), !v20 && (sub_1A9CE8BB0() & 1) == 0))
LABEL_10:
    sub_1A9C51B80();
LABEL_11:
  v21 = v9[19];
  v22 = &a1[v21];
  v23 = *(_QWORD *)&a1[v21 + 8];
  v24 = &v17[v21];
  v25 = *((_QWORD *)v24 + 1);
  if (!v23)
  {
    if (!v25)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!v25 || (*(_QWORD *)v22 == *(_QWORD *)v24 ? (v26 = v23 == v25) : (v26 = 0), !v26 && (sub_1A9CE8BB0() & 1) == 0))
LABEL_20:
    sub_1A9C51CB4();
LABEL_21:
  if (a1[v9[13]] != v17[v9[13]])
    sub_1A9C51B80();
  if (a1[v9[14]] != v17[v9[14]])
    sub_1A9C51CB4();
  if (*a1 != *v17)
  {
    sub_1A9C51DE8();
    v27 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
    if (*v17 == 1)
    {
      if (qword_1EEB42D30 != -1)
        swift_once();
      v28 = &qword_1EEB47F40;
    }
    else
    {
      if (qword_1EEB42D38 != -1)
        swift_once();
      v28 = &qword_1EEB47F48;
    }
    objc_msgSend(v27, sel_setTextColor_, *v28);

    objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
    objc_msgSend(v2, sel_setNeedsLayout);
  }
  v29 = v9[17];
  v30 = &a1[v29];
  v31 = *(_QWORD *)&a1[v29 + 8];
  v32 = &v17[v29];
  v33 = *((_QWORD *)v32 + 1);
  if (!v31)
  {
    if (!v33)
    {
LABEL_47:
      sub_1A9BD9150((uint64_t)a1, (uint64_t)v13);
      goto LABEL_48;
    }
LABEL_41:
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v13);
    goto LABEL_42;
  }
  if (!v33)
    goto LABEL_41;
  if (*(_QWORD *)v30 == *(_QWORD *)v32 && v31 == v33)
    goto LABEL_47;
  v34 = sub_1A9CE8BB0();
  sub_1A9BD9150((uint64_t)a1, (uint64_t)v13);
  if ((v34 & 1) == 0)
    goto LABEL_42;
LABEL_48:
  v38 = v9[16];
  v39 = &v13[v38];
  v40 = *(_QWORD *)&v13[v38 + 8];
  v41 = &v17[v38];
  v42 = *((_QWORD *)v41 + 1);
  if (!v40)
  {
    swift_bridgeObjectRetain();
    sub_1A9BD9114((uint64_t)v13);
    if (!v42)
      goto LABEL_44;
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  if (!v42)
  {
LABEL_42:
    sub_1A9BD9114((uint64_t)v13);
    goto LABEL_43;
  }
  if (*(_QWORD *)v39 == *(_QWORD *)v41 && v40 == v42)
  {
    sub_1A9BD9114((uint64_t)v13);
    goto LABEL_44;
  }
  v44 = sub_1A9CE8BB0();
  sub_1A9BD9114((uint64_t)v13);
  if ((v44 & 1) == 0)
LABEL_43:
    sub_1A9C52314();
LABEL_44:
  sub_1A9CE6348();
  v35 = sub_1A9CE6354();
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v37 = v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime];
  v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime] = v35 & 1;
  if ((v35 & 1) != v37)
  {
    sub_1A9C52D5C();
    objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
    return objc_msgSend(v2, sel_setNeedsLayout);
  }
  return result;
}

void sub_1A9C51B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3 = v2;
  if (*(_BYTE *)(v1 + *(int *)(v2 + 52)) == 1 && *(_QWORD *)(v1 + *(int *)(v2 + 72) + 8))
  {
    swift_bridgeObjectRetain();
    v4 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
    v5 = (void *)sub_1A9C549C4();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setAttributedText_, v5);
  }
  else
  {
    v4 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
    if (*(_QWORD *)(v1 + *(int *)(v3 + 72) + 8))
    {
      swift_bridgeObjectRetain();
      v5 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v4, sel_setText_, v5);
  }

}

void sub_1A9C51CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3 = v2;
  if (*(_BYTE *)(v1 + *(int *)(v2 + 56)) == 1 && *(_QWORD *)(v1 + *(int *)(v2 + 76) + 8))
  {
    swift_bridgeObjectRetain();
    v4 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
    v5 = (void *)sub_1A9C549C4();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setAttributedText_, v5);
  }
  else
  {
    v4 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
    if (*(_QWORD *)(v1 + *(int *)(v3 + 76) + 8))
    {
      swift_bridgeObjectRetain();
      v5 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    objc_msgSend(v4, sel_setText_, v5);
  }

}

void sub_1A9C51DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  unsigned __int8 *v20;
  int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = v0;
  sub_1A9B92F34(0, &qword_1EEB47F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2F3A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v31 - v4;
  v32 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1A9C529C0);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v6 = (id)qword_1ED264F90;
  v7 = sub_1A9CE6168();
  v9 = v8;

  v33 = sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
  v31 = (id)objc_opt_self();
  v10 = objc_msgSend(v31, sel_hk_sleepKeyColor);
  v11 = sub_1A9CE8754();
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v34 = v11;
  v39 = v12;
  ((void (*)(char *, uint64_t, uint64_t))v12)(v5, 1, 1);
  v42 = v7;
  v43 = v9;
  v38 = sub_1A9BA8EA4();
  sub_1A9CE88BC();
  if (qword_1EEB42D20 != -1)
    swift_once();
  v13 = (void *)qword_1EEB47F30;
  v14 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v15 = *MEMORY[0x1E0DC4AB8];
  v16 = *MEMORY[0x1E0DC1448];
  v17 = v13;
  v35 = v15;
  v36 = v16;
  v37 = v14;
  static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v15, 0, 0, 0, 0, 0, 0, v16, 0);
  v18 = (void *)sub_1A9CE8748();
  swift_bridgeObjectRelease();
  v19 = v32;
  objc_msgSend(v32, sel_setAttributedText_, v18);

  v32 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1A9C52A98);
  v20 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model);
  swift_beginAccess();
  v21 = *v20;
  v22 = (id)qword_1ED264F90;
  v23 = sub_1A9CE6168();
  v25 = v24;
  swift_bridgeObjectRelease();

  if (v21)
  {
    v26 = objc_msgSend(v31, sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1EEB42BB0 != -1)
      swift_once();
    v27 = (id)qword_1EEB44258;
  }
  v39(v5, 1, 1, v34);
  v40 = v23;
  v41 = v25;
  sub_1A9CE88BC();
  v28 = (id)qword_1EEB47F30;
  static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v35, 0, 0, 0, 0, 0, 0, v36, 0);
  v29 = (void *)sub_1A9CE8748();
  swift_bridgeObjectRelease();
  v30 = v32;
  objc_msgSend(v32, sel_setAttributedText_, v29);

}

uint64_t sub_1A9C52314()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  _BOOL8 v7;
  id v8;
  id v9;

  v1 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
  swift_beginAccess();
  v3 = type metadata accessor for SleepScheduleComponentsViewModel();
  if (*(_QWORD *)(v2 + *(int *)(v3 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    v4 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v1, sel_setText_, v4);

  v5 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  if (*(_QWORD *)(v2 + *(int *)(v3 + 68) + 8))
  {
    swift_bridgeObjectRetain();
    v6 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v5, sel_setText_, v6);

  if (*(_QWORD *)(v2 + *(int *)(v3 + 64) + 8))
    v7 = 0;
  else
    v7 = *(_QWORD *)(v2 + *(int *)(v3 + 68) + 8) == 0;
  v8 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  objc_msgSend(v8, sel_setHidden_, v7);

  v9 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  objc_msgSend(v9, sel_setHidden_, v7);

  return sub_1A9C542FC();
}

id sub_1A9C524B8()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  double v4;
  double v5;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A9CEF0F0;
  *(_QWORD *)(v0 + 32) = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1A9C529C0);
  *(_QWORD *)(v0 + 40) = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
  *(_QWORD *)(v0 + 48) = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  sub_1A9CE83E8();
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  sub_1A9B94A18(0, &qword_1EEB47F90);
  v2 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithArrangedSubviews_, v2);

  objc_msgSend(v3, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 3);
  objc_msgSend(v3, sel_setDistribution_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentHuggingPriority_forAxis_, 0, v4);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);
  return v3;
}

id sub_1A9C52664(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2(v2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1A9C526C0()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  double v4;
  double v5;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A9CEF0F0;
  *(_QWORD *)(v0 + 32) = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1A9C52A98);
  *(_QWORD *)(v0 + 40) = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  *(_QWORD *)(v0 + 48) = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  sub_1A9CE83E8();
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  sub_1A9B94A18(0, &qword_1EEB47F90);
  v2 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithArrangedSubviews_, v2);

  objc_msgSend(v3, sel_setAxis_, 1);
  objc_msgSend(v3, sel_setAlignment_, 3);
  objc_msgSend(v3, sel_setDistribution_, 0);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentHuggingPriority_forAxis_, 0, v4);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);
  return v3;
}

id sub_1A9C5286C(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1A9C528C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  double v9;
  void *v10;
  id v11;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    if (qword_1EEB42D20 != -1)
      swift_once();
    v5 = (void *)qword_1EEB47F30;
    v6 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
    v7 = v5;
    v8 = objc_msgSend(v6, sel_init);
    objc_msgSend(v8, sel_setTextColor_, v7);
    objc_msgSend(v8, sel_setTextAlignment_, 1);

    LODWORD(v9) = 1148846080;
    objc_msgSend(v8, sel_setContentCompressionResistancePriority_forAxis_, 1, v9);
    v10 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v8;
    v4 = v8;

    v3 = 0;
  }
  v11 = v3;
  return v4;
}

id sub_1A9C529C0()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  double v4;

  if (qword_1EEB42D20 != -1)
    swift_once();
  v0 = (void *)qword_1EEB47F30;
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setNumberOfLines_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

id sub_1A9C52A98()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  double v4;

  if (qword_1EEB42D20 != -1)
    swift_once();
  v0 = (void *)qword_1EEB47F30;
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setNumberOfLines_, 0);
  objc_msgSend(v3, sel_setTextAlignment_, 1);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

id sub_1A9C52B88()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  double v5;

  if (qword_1EEB42D30 != -1)
    swift_once();
  v0 = (void *)qword_1EEB47F40;
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v4 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  LODWORD(v5) = 1148846080;
  objc_msgSend(v4, sel_setContentCompressionResistancePriority_forAxis_, 1, v5);

  return v3;
}

id sub_1A9C52C84()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  double v4;

  if (qword_1EEB42D30 != -1)
    swift_once();
  v0 = (void *)qword_1EEB47F40;
  v1 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_init);
  objc_msgSend(v3, sel_setTextColor_, v2);
  objc_msgSend(v3, sel_setTextAlignment_, 1);

  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v4) = 1148846080;
  objc_msgSend(v3, sel_setContentCompressionResistancePriority_forAxis_, 1, v4);
  return v3;
}

uint64_t sub_1A9C52D5C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  sub_1A9CE6168();
  swift_bridgeObjectRelease();

  v3 = (void *)sub_1A9C549C4();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAttributedText_, v3, 0xE000000000000000);

  return sub_1A9C542FC();
}

char *sub_1A9C52ECC(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  char v17;
  char *v18;
  double v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;
  objc_super v45;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = sub_1A9CE6360();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel] = 0;
  v9 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel;
  v10 = qword_1EEB42D30;
  v11 = v1;
  if (v10 != -1)
    swift_once();
  v12 = (void *)qword_1EEB47F40;
  v13 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v14 = v12;
  v15 = objc_msgSend(v13, sel_init);
  objc_msgSend(v15, sel_setTextColor_, v14);
  objc_msgSend(v15, sel_setTextAlignment_, 1);

  *(_QWORD *)&v1[v9] = v15;
  v16 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  sub_1A9CE6348();
  v17 = sub_1A9CE6354();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v11[v16] = v17 & 1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints] = 0;
  v44 = a1;
  sub_1A9BD9150(a1, (uint64_t)&v11[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model]);

  v45.receiver = v11;
  v45.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v45, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  LODWORD(v19) = 1148846080;
  objc_msgSend(v18, sel_setContentCompressionResistancePriority_forAxis_, 1, v19);
  v20 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1A9C524B8);
  objc_msgSend(v18, sel_addSubview_, v20);

  v21 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1A9C526C0);
  objc_msgSend(v18, sel_addSubview_, v21);

  sub_1A9C534D0();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v22 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
  v23 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1A9C529C0);
  objc_msgSend(v23, sel_setFont_, v22);

  v24 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1A9C52A98);
  objc_msgSend(v24, sel_setFont_, v22);

  v25 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  objc_msgSend(v25, sel_setFont_, v22);

  v26 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  objc_msgSend(v26, sel_setFont_, v22);

  v27 = sub_1A9C515C4();
  v28 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
  objc_msgSend(v28, sel_setFont_, v27);

  v29 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  objc_msgSend(v29, sel_setFont_, v27);

  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel], sel_setFont_, v27);
  sub_1A9C51DE8();
  sub_1A9C542FC();

  sub_1A9C52D5C();
  sub_1A9C52314();
  sub_1A9C51B80();
  sub_1A9C51CB4();
  v30 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  v31 = &v18[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model];
  swift_beginAccess();
  v32 = &qword_1EEB47F40;
  if ((*v31 & 1) == 0)
  {
    if (qword_1EEB42D38 != -1)
      swift_once();
    v32 = &qword_1EEB47F48;
  }
  objc_msgSend(v30, sel_setTextColor_, *v32);

  sub_1A9C538C8();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1A9CF31C0;
  v34 = sub_1A9CE6AB0();
  v35 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v35;
  v36 = sub_1A9CE699C();
  v37 = MEMORY[0x1E0DC1F50];
  *(_QWORD *)(v33 + 48) = v36;
  *(_QWORD *)(v33 + 56) = v37;
  v38 = sub_1A9CE69C0();
  v39 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v33 + 64) = v38;
  *(_QWORD *)(v33 + 72) = v39;
  v40 = sub_1A9CE69A8();
  v41 = MEMORY[0x1E0DC1F90];
  *(_QWORD *)(v33 + 80) = v40;
  *(_QWORD *)(v33 + 88) = v41;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v42 = v18;
  sub_1A9CE87C0();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_1A9BD9114(v44);
  return v42;
}

void sub_1A9C534D0()
{
  void *v0;
  void *v1;
  unint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1A9C526C0);
  v4 = objc_msgSend(v3, sel_topAnchor);

  v5 = objc_msgSend(v1, sel_topAnchor);
  v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  v7 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1A9C526C0);
  v8 = objc_msgSend(v7, sel_bottomAnchor);

  v9 = objc_msgSend(v1, sel_bottomAnchor);
  v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  v11 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
  v12 = objc_msgSend(v11, sel_centerYAnchor);

  v13 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  v14 = objc_msgSend(v13, sel_centerYAnchor);

  v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v22, 3))
    {
LABEL_3:
      sub_1A9CBF89C();
      sub_1A9CE83E8();
      v2 = (unint64_t)v6;
      MEMORY[0x1AF41EFF4]();
      if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if (!__OFADD__(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10), 3))
  {
    goto LABEL_3;
  }
  __break(1u);
LABEL_12:
  sub_1A9CE83F4();
LABEL_4:
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v16 = v10;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v17 = v15;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();

  v18 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints, (uint64_t (*)(uint64_t))sub_1A9C53DBC);
  sub_1A9BB3430(v18);
  v19 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints, (uint64_t (*)(uint64_t))sub_1A9C53F6C);
  sub_1A9BB3430(v19);
  v20 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints, sub_1A9C54174);
  sub_1A9BB3430(v20);
  v21 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v23 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_activateConstraints_, v23);

}

void sub_1A9C538C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = MEMORY[0x1E0DEA968];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v1 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = 0x7065656C53;
  *(_QWORD *)(v1 + 56) = 0xE500000000000000;
  strcpy((char *)(v1 + 64), "ScheduleEditor");
  *(_BYTE *)(v1 + 79) = -18;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2118);
  sub_1A9B94CA0(0, &qword_1ED2632C0, v0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v3 = sub_1A9CE8280();
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v7 = v3;
  v6 = v5;
  v23 = v5;
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v9 = v3;
  v8 = v23;
  v10 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1A9C529C0);
  v22 = v3;
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAccessibilityIdentifier_, v11, v22, v6);

  v12 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setAccessibilityIdentifier_, v13, v7, v6);

  v14 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
  v24 = v6;
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v15 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v15, v7, v24);

  v16 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1A9C52A98);
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v17 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17, v9, v8);

  v18 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  v19 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setAccessibilityIdentifier_, v19, v9, v8);

  v20 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  v25 = v8;
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v21 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21, v9, v25);

}

void sub_1A9C53D40(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    sub_1A9C54B48(a2);

  }
}

uint64_t sub_1A9C53DBC(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  double v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEDE30;
  v3 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1A9C524B8);
  v4 = objc_msgSend(v3, sel_trailingAnchor);

  v5 = objc_msgSend(a1, sel_centerXAnchor);
  v6 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  if (*((_BYTE *)a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime))
    v7 = 12.0;
  else
    v7 = 3.0;
  v8 = objc_msgSend(v4, sel_constraintEqualToAnchor_constant_, v5, -v7);

  *(_QWORD *)(v2 + 32) = v8;
  v9 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1A9C526C0);
  v10 = objc_msgSend(v9, sel_leadingAnchor);

  v11 = objc_msgSend(a1, sel_centerXAnchor);
  if (*((_BYTE *)a1 + v6))
    v12 = 12.0;
  else
    v12 = 3.0;
  v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v11, v12);

  *(_QWORD *)(v2 + 40) = v13;
  sub_1A9CE83E8();
  return v2;
}

uint64_t sub_1A9C53F6C(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  double v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEDE30;
  v3 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView, (uint64_t (*)(uint64_t))sub_1A9C524B8);
  v4 = objc_msgSend(v3, sel_leadingAnchor);

  v5 = objc_msgSend(a1, sel_leadingAnchor);
  v6 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  if (*((_BYTE *)a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime))
    v7 = 12.0;
  else
    v7 = 3.0;
  v8 = objc_msgSend(v4, sel_constraintGreaterThanOrEqualToAnchor_constant_, v5, v7);

  *(_QWORD *)(v2 + 32) = v8;
  v9 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView, (uint64_t (*)(uint64_t))sub_1A9C526C0);
  v10 = objc_msgSend(v9, sel_trailingAnchor);

  v11 = objc_msgSend(a1, sel_trailingAnchor);
  if (*((_BYTE *)a1 + v6))
    v12 = 12.0;
  else
    v12 = 3.0;
  v13 = objc_msgSend(v10, sel_constraintLessThanOrEqualToAnchor_constant_, v11, -v12);

  *(_QWORD *)(v2 + 40) = v13;
  sub_1A9CE83E8();
  return v2;
}

uint64_t sub_1A9C54114(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *(_QWORD *)(v2 + *a1);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v5 = a2(v2);
    *(_QWORD *)(v2 + v3) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1A9C54174(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  double v10;
  id v11;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEDE30;
  v3 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
  v4 = objc_msgSend(v3, sel_widthAnchor);

  v5 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  objc_msgSend(v5, sel_sizeToFit);
  objc_msgSend(v5, sel_bounds);
  v7 = objc_msgSend(v4, sel_constraintEqualToConstant_, v6);

  *(_QWORD *)(v2 + 32) = v7;
  v8 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
  v9 = objc_msgSend(v8, sel_widthAnchor);

  objc_msgSend(v5, sel_sizeToFit);
  objc_msgSend(v5, sel_bounds);
  v11 = objc_msgSend(v9, sel_constraintEqualToConstant_, v10);

  *(_QWORD *)(v2 + 40) = v11;
  sub_1A9CE83E8();
  return v2;
}

uint64_t sub_1A9C542FC()
{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  id v9;
  void *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t j;
  id v16;
  void *v17;
  double v18;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel);
  objc_msgSend(v1, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  v3 = v2;
  v4 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints, sub_1A9C54174);
  v5 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1A9CE8AC0();
    v6 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_10;
  }
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x1AF41F600](i, v5);
    else
      v9 = *(id *)(v5 + 8 * i + 32);
    v10 = v9;
    objc_msgSend(v9, sel_setConstant_, v3);

  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime))
    v11 = 12.0;
  else
    v11 = 3.0;
  v12 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints, (uint64_t (*)(uint64_t))sub_1A9C53F6C);
  v13 = sub_1A9C54114(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints, (uint64_t (*)(uint64_t))sub_1A9C53DBC);
  sub_1A9BB3430(v13);
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_15;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = sub_1A9CE8AC0();
  v14 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_15:
  if (v14 >= 1)
  {
    for (j = 0; j != v14; ++j)
    {
      if ((v12 & 0xC000000000000001) != 0)
        v16 = (id)MEMORY[0x1AF41F600](j, v12);
      else
        v16 = *(id *)(v12 + 8 * j + 32);
      v17 = v16;
      if (objc_msgSend(v16, sel_firstAttribute) == (id)5)
        v18 = v11;
      else
        v18 = -v11;
      objc_msgSend(v17, sel_setConstant_, v18);

    }
    return swift_bridgeObjectRelease_n();
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SleepScheduleComponentsHeader.tintColorDidChange()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_tintColorDidChange);
  sub_1A9C51DE8();
}

id SleepScheduleComponentsHeader.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleComponentsHeader.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleComponentsHeader.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C54814()
{
  return type metadata accessor for SleepScheduleComponentsHeader();
}

uint64_t type metadata accessor for SleepScheduleComponentsHeader()
{
  uint64_t result;

  result = qword_1ED2636B0;
  if (!qword_1ED2636B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9C54858()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SleepScheduleComponentsHeader()
{
  return swift_lookUpClassMethod();
}

void (*sub_1A9C54904(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1A9C54958(v6, a2, a3);
  return sub_1A9BA04A0;
}

void (*sub_1A9C54958(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1AF41F600](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for SleepOnboardingContext;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C549C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;

  sub_1A9B92F34(0, &qword_1EEB47F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2F3A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v10 - v2;
  sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
  if (qword_1EEB42D28 != -1)
    swift_once();
  v4 = (void *)qword_1EEB47F38;
  v5 = sub_1A9CE8754();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = qword_1EEB42D30;
  v7 = v4;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v8 = (id)qword_1EEB47F40;
  sub_1A9C515C4();
  return sub_1A9CE8748();
}

void sub_1A9C54B48(void *a1)
{
  char *v1;
  char *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;
  id v14;
  char v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  unsigned int v25;
  id v26;
  id v27;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_traitCollection);
  v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

  if (!a1)
  {

    goto LABEL_12;
  }
  v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      goto LABEL_12;
  }
  v13 = objc_msgSend(v2, sel_traitCollection);
  v14 = objc_msgSend(v13, sel_legibilityWeight);

  if (v14 != objc_msgSend(a1, sel_legibilityWeight))
  {
LABEL_12:
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    v16 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 0, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
    v17 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel, (uint64_t (*)(void))sub_1A9C529C0);
    objc_msgSend(v17, sel_setFont_, v16);

    v18 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel, (uint64_t (*)(void))sub_1A9C52A98);
    objc_msgSend(v18, sel_setFont_, v16);

    v19 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel);
    objc_msgSend(v19, sel_setFont_, v16);

    v20 = sub_1A9C528C4(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel);
    objc_msgSend(v20, sel_setFont_, v16);

    v21 = sub_1A9C515C4();
    v22 = sub_1A9C52664(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel, (uint64_t (*)(uint64_t))sub_1A9C52B88);
    objc_msgSend(v22, sel_setFont_, v21);

    v23 = sub_1A9C5286C(&OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel, (uint64_t (*)(void))sub_1A9C52C84);
    objc_msgSend(v23, sel_setFont_, v21);

    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel], sel_setFont_, v21);
    sub_1A9C51DE8();
    sub_1A9C542FC();

    v15 = 1;
    goto LABEL_13;
  }
  v15 = 0;
LABEL_13:
  v24 = objc_msgSend(v2, sel_traitCollection);
  v25 = objc_msgSend(v24, sel_hasDifferentColorAppearanceComparedToTraitCollection_, a1);

  if ((v15 & 1) == 0 && v25)
    sub_1A9C51DE8();
  v26 = objc_msgSend(v2, sel_traitCollection);
  v27 = objc_msgSend(v26, sel_layoutDirection);

  if (!a1 || v27 != objc_msgSend(a1, sel_layoutDirection))
  {
    sub_1A9C51B80();
    sub_1A9C51CB4();
  }
}

void sub_1A9C54ED8()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = sub_1A9CE6360();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeStackView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpStackView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeTimeLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpTimeLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___bedtimeDayLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___wakeUpDayLabel] = 0;
  v7 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_sizingTimeLabel;
  if (qword_1EEB42D30 != -1)
    swift_once();
  v8 = (void *)qword_1EEB47F40;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v10 = v8;
  v11 = objc_msgSend(v9, sel_init);
  objc_msgSend(v11, sel_setTextColor_, v10);
  objc_msgSend(v11, sel_setTextAlignment_, 1);

  *(_QWORD *)&v1[v7] = v11;
  v12 = OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_isIn24HourTime;
  sub_1A9CE6348();
  LOBYTE(v11) = sub_1A9CE6354();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v1[v12] = v11 & 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewCenterConstraints] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___stackViewEdgeConstraints] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader____lazy_storage___timeLabelConstraints] = 0;

  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C550CC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C550F0(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A9C53D40(a1, a2, v2);
}

void sub_1A9C550F8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB47F60)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB47F60);
  }
}

void sub_1A9C55160()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47F70)
  {
    type metadata accessor for FeatureKey(255);
    sub_1A9B92B9C(&qword_1EEB434F8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEC2E4);
    v0 = sub_1A9CE8220();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47F70);
  }
}

uint64_t dispatch thunk of ScheduleActionHandling.presentAddOccurrenceViewController()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScheduleActionHandling.presentEditOccurrenceViewController(scheduleOccurrence:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void sub_1A9C551F0()
{
  qword_1EEB47F98 = 0x4046800000000000;
}

double static ScheduleOccurrenceSectionTableViewHeaderView.estimatedHeight.getter()
{
  if (qword_1EEB42D40 != -1)
    swift_once();
  return *(double *)&qword_1EEB47F98;
}

unint64_t static ScheduleOccurrenceSectionTableViewHeaderView.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002CLL;
}

void sub_1A9C55268(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_1A9CA87A0();
  v3 = objc_msgSend(v2, sel_text);

  if (v3)
  {
    v4 = sub_1A9CE82E0();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
}

void sub_1A9C552E8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  v2 = sub_1A9CA87A0();
  if (v1)
  {
    v3 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v2, sel_setText_, v3);

}

uint64_t sub_1A9C55374()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = sub_1A9CA87A0();
  v1 = objc_msgSend(v0, sel_text);

  if (!v1)
    return 0;
  v2 = sub_1A9CE82E0();

  return v2;
}

void sub_1A9C553F0(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_1A9CA87A0();
  if (a2)
  {
    v4 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v3, sel_setText_, v4);

}

void (*sub_1A9C55474(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView);
  v3 = sub_1A9CA87A0();
  v4 = objc_msgSend(v3, sel_text);

  if (v4)
  {
    v5 = sub_1A9CE82E0();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1A9C55500;
}

void sub_1A9C55500(uint64_t a1, char a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A9CA87A0();
    v6 = v3;
    if (v2)
    {
      v4 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
      v3 = v6;
    }
    else
    {
      v4 = 0;
    }
    objc_msgSend(v3, sel_setText_, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_1A9CA87A0();
    v6 = v5;
    if (v2)
    {
      v4 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
      v5 = v6;
    }
    else
    {
      v4 = 0;
    }
    objc_msgSend(v5, sel_setText_, v4);
  }

}

id ScheduleOccurrenceSectionTableViewHeaderView.__allocating_init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithReuseIdentifier_, v3);

  return v4;
}

char *ScheduleOccurrenceSectionTableViewHeaderView.init(reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  double v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  objc_super v35;

  v4 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceHeaderView());
  v5 = v2;
  v6 = objc_msgSend(v4, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView] = v6;

  if (a2)
  {
    v7 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v35.receiver = v5;
  v35.super_class = (Class)type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  v8 = objc_msgSendSuper2(&v35, sel_initWithReuseIdentifier_, v7);

  v9 = (char *)v8;
  v10 = objc_msgSend(v9, sel_contentView);
  v11 = OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView;
  objc_msgSend(v10, sel_addSubview_, *(_QWORD *)&v9[OBJC_IVAR____TtC13SleepHealthUI44ScheduleOccurrenceSectionTableViewHeaderView_headerView]);

  v12 = objc_msgSend(*(id *)&v9[v11], sel_topAnchor);
  v13 = objc_msgSend(v9, sel_contentView);
  v14 = objc_msgSend(v13, sel_topAnchor);

  v15 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v14);
  LODWORD(v16) = 1148829696;
  objc_msgSend(v15, sel_setPriority_, v16);
  v17 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1A9CED8F0;
  v19 = objc_msgSend(*(id *)&v9[v11], sel_leadingAnchor);
  v20 = objc_msgSend(v9, sel_contentView);
  v21 = objc_msgSend(v20, sel_leadingAnchor);

  v22 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v21);
  *(_QWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 40) = v15;
  v23 = v15;
  v24 = objc_msgSend(v9, sel_contentView);
  v25 = objc_msgSend(v24, sel_trailingAnchor);

  v26 = objc_msgSend(*(id *)&v9[v11], sel_trailingAnchor);
  v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(_QWORD *)(v18 + 48) = v27;
  v28 = objc_msgSend(v9, sel_contentView);
  v29 = objc_msgSend(v28, sel_bottomAnchor);

  v30 = objc_msgSend(*(id *)&v9[v11], sel_bottomAnchor);
  v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(_QWORD *)(v18 + 56) = v31;
  sub_1A9CE83E8();
  sub_1A9C55AD0();
  v32 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_activateConstraints_, v32);

  v33 = *(id *)&v9[v11];
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v9;
}

id ScheduleOccurrenceSectionTableViewHeaderView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView()
{
  return objc_opt_self();
}

unint64_t sub_1A9C55AD0()
{
  unint64_t result;

  result = qword_1EEB44570;
  if (!qword_1EEB44570)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44570);
  }
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceSectionTableViewHeaderView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ScheduleOccurrenceSectionTableViewHeaderView.title.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

void destroy for ScheduledSleepFocusToggleView(id *a1)
{

}

_QWORD *initializeWithCopy for ScheduledSleepFocusToggleView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = v6;
  a1[3] = v5;
  v7 = v3;
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for ScheduledSleepFocusToggleView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ScheduledSleepFocusToggleView(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 16);
  v6 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v6;

  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduledSleepFocusToggleView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduledSleepFocusToggleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduledSleepFocusToggleView()
{
  return &type metadata for ScheduledSleepFocusToggleView;
}

uint64_t sub_1A9C55D44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C55D54(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v8 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9CE8478();
  v9 = a3;
  v10 = a1;
  v11 = sub_1A9CE846C();
  v12 = (_QWORD *)swift_allocObject();
  v13 = MEMORY[0x1E0DF06E8];
  v12[2] = v11;
  v12[3] = v13;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  v14 = v10;
  v15 = v9;
  v16 = sub_1A9CE846C();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v16;
  v17[3] = v13;
  v17[4] = a1;
  v17[5] = a2;
  v17[6] = a3;
  v17[7] = a4;
  sub_1A9CE7F08();
  sub_1A9BA8EA4();
  return sub_1A9CE7E90();
}

id sub_1A9C55F24@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  id result;

  if (a1)
  {
    result = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
    *a2 = (_BYTE)result;
  }
  else
  {
    type metadata accessor for SleepSettingsModel();
    sub_1A9B92B9C(&qword_1EEB46650, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
    result = (id)sub_1A9CE71F4();
    __break(1u);
  }
  return result;
}

void sub_1A9C55FA4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  void *v5;
  char *v6;

  if (a4)
  {
    v4 = *a1;
    v5 = *(void **)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings];
    v6 = a4;
    objc_msgSend(v5, sel_setScheduledSleepMode_, v4);
    sub_1A9C10408();

  }
  else
  {
    type metadata accessor for SleepSettingsModel();
    sub_1A9B92B9C(&qword_1EEB46650, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
    sub_1A9CE71F4();
    __break(1u);
  }
}

uint64_t sub_1A9C56044()
{
  uint64_t v0;

  return sub_1A9C55D54(*(void **)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_1A9C56054@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C55F24(*(_QWORD *)(v1 + 32), a1);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1A9C5609C(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1A9C55FA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t sub_1A9C560AC()
{
  return sub_1A9B92B9C(&qword_1EEB47FD0, (uint64_t (*)(uint64_t))sub_1A9C560D8, MEMORY[0x1E0CDFC78]);
}

void sub_1A9C560D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47FD8)
  {
    v0 = sub_1A9CE7E9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47FD8);
  }
}

BOOL static MarqueeView.LoopBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  char v7;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 2)
    return v3 == 2;
  v5 = ((v2 & 1) == 0) ^ v3;
  if (v3 != 2 && *(_QWORD *)a1 == *(_QWORD *)a2)
    v7 = v5;
  else
    v7 = 0;
  return v7 & 1;
}

uint64_t MarqueeView.init(loopBehavior:speed:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  sub_1A9B92F34(0, &qword_1EEB47FE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB22E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v22 - v9;
  v25 = *a1;
  v24 = *((unsigned __int8 *)a1 + 8);
  v27 = 0;
  sub_1A9CE7DC4();
  v22 = v29;
  v23 = v28;
  v27 = 0;
  sub_1A9CE7DC4();
  v11 = v28;
  v12 = v29;
  v27 = 0;
  sub_1A9CE7DC4();
  v13 = v28;
  v14 = v29;
  sub_1A9C563A8();
  v15 = (void *)objc_opt_self();
  swift_retain();
  v16 = objc_msgSend(v15, sel_currentRunLoop);
  v17 = sub_1A9CE8874();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  v18 = sub_1A9CE87E4();

  sub_1A9C563E4((uint64_t)v10);
  v28 = v18;
  sub_1A9CE87D8();
  sub_1A9B92B9C(&qword_1EEB47FF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB20A0], MEMORY[0x1E0CB2088]);
  v19 = sub_1A9CE6E04();
  swift_release();
  result = swift_release();
  v21 = v22;
  *(_QWORD *)a4 = v23;
  *(_QWORD *)(a4 + 8) = v21;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = v13;
  *(_QWORD *)(a4 + 40) = v14;
  *(_QWORD *)(a4 + 48) = v19;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = v25;
  *(_BYTE *)(a4 + 72) = v24;
  *(_QWORD *)(a4 + 80) = v26;
  *(_QWORD *)(a4 + 88) = a3;
  return result;
}

unint64_t sub_1A9C563A8()
{
  unint64_t result;

  result = qword_1EEB47FE8;
  if (!qword_1EEB47FE8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47FE8);
  }
  return result;
}

uint64_t sub_1A9C563E4(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, &qword_1EEB47FE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB22E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void MarqueeView.body.getter(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = v1[3];
  v19 = v1[2];
  v20 = v3;
  v4 = v1[5];
  v21 = v1[4];
  v22 = v4;
  v5 = v1[1];
  v17 = *v1;
  v18 = v5;
  v6 = v4;
  v7 = swift_allocObject();
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 24) = v9;
  v10 = v1[3];
  *(_OWORD *)(v7 + 64) = v1[2];
  *(_OWORD *)(v7 + 80) = v10;
  v11 = v1[5];
  *(_OWORD *)(v7 + 96) = v1[4];
  *(_OWORD *)(v7 + 112) = v11;
  v12 = v1[1];
  *(_OWORD *)(v7 + 32) = *v1;
  *(_OWORD *)(v7 + 48) = v12;
  sub_1A9C56A48();
  sub_1A9C56B20();
  nullsub_1(v6);
  sub_1A9C56BA0((uint64_t)&v17);
  swift_retain();
  sub_1A9B92F34(0, &qword_1EEB48130, (uint64_t (*)(uint64_t))sub_1A9C57150, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DD0();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v9;
  v14 = v20;
  *(_OWORD *)(v13 + 64) = v19;
  *(_OWORD *)(v13 + 80) = v14;
  v15 = v22;
  *(_OWORD *)(v13 + 96) = v21;
  *(_OWORD *)(v13 + 112) = v15;
  v16 = v18;
  *(_OWORD *)(v13 + 32) = v17;
  *(_OWORD *)(v13 + 48) = v16;
  sub_1A9C56BA0((uint64_t)&v17);
  type metadata accessor for GetSubviews();
}

uint64_t sub_1A9C56594(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  sub_1A9C57150();
  v5 = v4;
  v6 = MEMORY[0x1AF420284](&unk_1A9CF75C0, a1);
  v7 = sub_1A9B92B9C(qword_1EEB48020, v2, MEMORY[0x1E0C95768]);
  sub_1A9CE7C20();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v13 = v18;
  v14 = v19;
  v20 = v5;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = v7;
  v22 = v6;
  v8 = sub_1A9CE71B8();
  MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v8);
  sub_1A9C3C998((uint64_t)&v10, v8, (uint64_t)&v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v15 = v20;
  v16 = v21;
  v17 = v22;
  v18 = v23;
  v19 = v24;
  sub_1A9C3899C((uint64_t)&v15, v8, v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C56744@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v38 = a3;
  v39 = a4;
  v40 = a5;
  v7 = sub_1A9CE7590();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v36 = v7;
  v37 = v9;
  MEMORY[0x1E0C80A78](v7, v10);
  v35 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE7584();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C56AA4();
  v18 = v17;
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *a2;
  sub_1A9C57700();
  sub_1A9CE7DD0();
  sub_1A9CE759C();
  v41 = *a2;
  sub_1A9CE7DD0();
  v22 = v42;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v16, v12);
  *(_QWORD *)&v21[*(int *)(v18 + 52)] = v22;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v24 = v35;
  v23 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v35, a1, v36);
  v25 = (*(unsigned __int8 *)(v8 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v26 = swift_allocObject();
  v27 = v39;
  *(_QWORD *)(v26 + 16) = v38;
  *(_QWORD *)(v26 + 24) = v27;
  v28 = a2[3];
  *(_OWORD *)(v26 + 64) = a2[2];
  *(_OWORD *)(v26 + 80) = v28;
  v29 = a2[5];
  *(_OWORD *)(v26 + 96) = a2[4];
  *(_OWORD *)(v26 + 112) = v29;
  v30 = a2[1];
  *(_OWORD *)(v26 + 32) = *a2;
  *(_OWORD *)(v26 + 48) = v30;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v26 + v25, v24, v23);
  v31 = v40;
  sub_1A9C5783C((uint64_t)v21, v40);
  sub_1A9C56A48();
  v33 = (uint64_t (**)())(v31 + *(int *)(v32 + 36));
  *v33 = sub_1A9C577F0;
  v33[1] = (uint64_t (*)())v26;
  v33[2] = 0;
  v33[3] = 0;
  sub_1A9C56BA0((uint64_t)a2);
  return sub_1A9C57880((uint64_t)v21);
}

uint64_t sub_1A9C56974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A9C56744(a1, (__int128 *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1A9C56980(uint64_t a1)
{
  sub_1A9C56BA0(a1);
  sub_1A9CE7590();
  sub_1A9B92B9C(&qword_1EEB48138, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDC290], MEMORY[0x1E0CDC2A0]);
  sub_1A9CE8520();
  sub_1A9CE855C();
  sub_1A9CE8550();
  sub_1A9C57700();
  sub_1A9CE7DDC();
  return sub_1A9C578BC(a1);
}

void sub_1A9C56A48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB47FF8)
  {
    sub_1A9C56AA4();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB47FF8);
  }
}

void sub_1A9C56AA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48000)
  {
    sub_1A9CE7584();
    v0 = sub_1A9CE7E48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48000);
  }
}

unint64_t sub_1A9C56B20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48008;
  if (!qword_1EEB48008)
  {
    sub_1A9C56A48();
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB48010, (uint64_t (*)(uint64_t))sub_1A9C56AA4, MEMORY[0x1E0CDFB30]);
    v3[1] = MEMORY[0x1E0CDC8B0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48008);
  }
  return result;
}

uint64_t sub_1A9C56BA0(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C56C10()
{
  sub_1A9CE8004();
  sub_1A9CE70A4();
  return swift_release();
}

uint64_t objectdestroyTm_8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C56CC0()
{
  return sub_1A9C56C10();
}

uint64_t sub_1A9C56CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MarqueeView(0, a2, a3, a4);
  if ((sub_1A9C56E28() & 1) != 0)
    return sub_1A9C56F88();
  else
    return sub_1A9C56D7C();
}

uint64_t sub_1A9C56D7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[4];

  v1 = *(_QWORD *)(v0 + 56);
  v3[0] = *(_QWORD *)(v0 + 48);
  v3[1] = v1;
  sub_1A9B92F34(0, &qword_1EEB48130, (uint64_t (*)(uint64_t))sub_1A9C57150, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DD0();
  sub_1A9CE6CFC();
  swift_release();
  sub_1A9CE87CC();
  swift_release();
  __swift_project_boxed_opaque_existential_1Tm(v3, v3[3]);
  sub_1A9CE6D5C();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

uint64_t sub_1A9C56E28()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(unsigned __int8 *)(v0 + 72);
  sub_1A9C57700();
  sub_1A9CE7DD0();
  if (v4 >= 2)
  {
    if (v2 == 2)
      return 1;
    sub_1A9CE7DD0();
    if (v4 < v1)
      return 1;
    sub_1A9CE7DD0();
    if (v4 == v1)
    {
      sub_1A9CE7DD0();
      result = sub_1A9CE7DD0();
      if (__OFSUB__(v4, 1))
      {
LABEL_13:
        __break(1u);
        return result;
      }
      if (v4 < v4 - 1)
        return 1;
    }
    sub_1A9CE7DD0();
    result = sub_1A9CE7DD0();
    if (!__OFSUB__(v4, 1))
      return 0;
    __break(1u);
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1A9C56F88()
{
  uint64_t result;
  uint64_t v1;

  sub_1A9C57700();
  sub_1A9CE7DD0();
  result = sub_1A9CE7DD0();
  if (__OFSUB__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    if (v1 >= v1 - 1)
    {
      sub_1A9CE7DDC();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1A9CE7DD0();
LABEL_6:
      sub_1A9CE7DDC();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    result = sub_1A9CE7DD0();
    if (!__OFADD__(v1, 1))
      goto LABEL_6;
  }
  __break(1u);
  __break(1u);
  return result;
}

void sub_1A9C57150()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48018)
  {
    sub_1A9CE87D8();
    sub_1A9B92B9C(&qword_1EEB47FF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB20A0], MEMORY[0x1E0CB2088]);
    v0 = sub_1A9CE6D08();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48018);
  }
}

uint64_t sub_1A9C571C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C57200()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C57248(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C572DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1A9C573DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t sub_1A9C57470(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A9C574B8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for MarqueeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarqueeView);
}

uint64_t sub_1A9C5751C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_1A9C57538(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  if (v5 + 1 >= 2)
    return v5;
  else
    return 0;
}

uint64_t sub_1A9C5758C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t sub_1A9C575D4(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_1A9C575F0(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for MarqueeView.LoopBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarqueeView.LoopBehavior);
}

void sub_1A9C57624()
{
  sub_1A9C57150();
  sub_1A9C56A48();
  sub_1A9C56B20();
  type metadata accessor for GetSubviews();
}

uint64_t sub_1A9C57678(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  sub_1A9B92B9C(qword_1EEB48020, v1, MEMORY[0x1E0C95768]);
  MEMORY[0x1AF420284](&unk_1A9CF75C0, a1);
  v2 = sub_1A9CE71B8();
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v2);
}

uint64_t sub_1A9C576E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1A9C56CCC(v4[4], v4[2], v4[3], a4);
}

void sub_1A9C57700()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48128)
  {
    v0 = sub_1A9CE7DF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48128);
  }
}

uint64_t sub_1A9C57754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A9CE7590();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A9C577F0()
{
  uint64_t v0;

  sub_1A9CE7590();
  return sub_1A9C56980(v0 + 32);
}

uint64_t sub_1A9C5783C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C56AA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C57880(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C56AA4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C578BC(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for GoalPickerItem()
{
  return &type metadata for GoalPickerItem;
}

uint64_t sub_1A9C5793C()
{
  type metadata accessor for GoalTimePickerCollectionViewCell();
  sub_1A9C1C454();
  return sub_1A9CE6774();
}

uint64_t sub_1A9C57970()
{
  sub_1A9C57A54();
  return sub_1A9CE82F8();
}

unint64_t sub_1A9C579A0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A9C579CC();
  result = sub_1A9C57A10();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A9C579CC()
{
  unint64_t result;

  result = qword_1EEB48140;
  if (!qword_1EEB48140)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF343C, &type metadata for GoalPickerItem);
    atomic_store(result, (unint64_t *)&qword_1EEB48140);
  }
  return result;
}

unint64_t sub_1A9C57A10()
{
  unint64_t result;

  result = qword_1EEB48148;
  if (!qword_1EEB48148)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF3404, &type metadata for GoalPickerItem);
    atomic_store(result, (unint64_t *)&qword_1EEB48148);
  }
  return result;
}

unint64_t sub_1A9C57A54()
{
  unint64_t result;

  result = qword_1EEB48150;
  if (!qword_1EEB48150)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB48150);
  }
  return result;
}

void sub_1A9C57A8C(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id sub_1A9C57AEC()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  return *v1;
}

unint64_t static ScheduleOccurrenceComponentsEditTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static ScheduleOccurrenceComponentsEditTableViewCell.accessibilityReuseIdentifier.getter()
{
  return 0xD000000000000030;
}

BOOL sub_1A9C57B68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  return *(_QWORD *)(*v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
}

void sub_1A9C57BC4(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void **v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v3 = sub_1A9CE6378();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  if ((((*(_QWORD *)((char *)*v16 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) == 0) ^ a1) & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0CB0EF8], v3);
    sub_1A9CE6384();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v11, v15);
    v17 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
    sub_1A9BD7ED4(22, 0, 7, 0, (uint64_t)v15, a1 & 1);
    v18 = *v16;
    *v16 = v19;

  }
}

void (*sub_1A9C57D60(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_1A9CE6378();
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v3[6] = malloc(*(_QWORD *)(v5 + 64));
  v6 = sub_1A9CE6444();
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v7 = type metadata accessor for SleepScheduleComponentsViewModel();
  v8 = malloc(*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  v9 = OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView;
  v3[8] = v8;
  v3[9] = v9;
  v10 = (_QWORD *)(v1 + v9);
  swift_beginAccess();
  *((_BYTE *)v3 + 80) = *(_QWORD *)(*v10
                                  + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
  return sub_1A9C57E34;
}

void sub_1A9C57E34(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 72);
  v3 = *(_QWORD *)(*a1 + 24);
  v4 = *(unsigned __int8 *)(*a1 + 80);
  if (((v4 ^ (*(_QWORD *)(*(_QWORD *)(v3 + v2)
                         + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) == 0)) & 1) == 0)
  {
    v6 = *(_QWORD *)(v1 + 56);
    v5 = *(_BYTE **)(v1 + 64);
    v8 = *(_QWORD *)(v1 + 40);
    v7 = *(_QWORD *)(v1 + 48);
    v9 = *(_QWORD *)(v1 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, *MEMORY[0x1E0CB0EF8], v9);
    sub_1A9CE6384();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    SleepScheduleComponentsViewModel.init(gregorianCalendar:)(v6, v5);
    v10 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
    sub_1A9BD7ED4(22, 0, 7, 0, (uint64_t)v5, v4);
    v11 = *(void **)(v3 + v2);
    *(_QWORD *)(v3 + v2) = v12;

  }
  v13 = *(void **)(v1 + 56);
  v14 = *(void **)(v1 + 48);
  free(*(void **)(v1 + 64));
  free(v13);
  free(v14);
  free((void *)v1);
}

id ScheduleOccurrenceComponentsEditTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ScheduleOccurrenceComponentsEditTableViewCell.apply(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  char v29;

  v3 = sub_1A9CE60C0();
  v26 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v25 - v9;
  v11 = (void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  v12 = *v11;
  v13 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v14 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  v15 = v12;
  v16 = objc_msgSend(v14, sel_bedtimeComponents);
  sub_1A9CE6024();

  v17 = objc_msgSend(*(id *)(a1 + v13), sel_wakeUpComponents);
  sub_1A9CE6024();

  sub_1A9CE6DD4();
  v18 = (uint64_t)v28;
  v19 = v29;
  sub_1A9CE6DD4();
  v20 = v28;
  v21 = objc_msgSend(*(id *)(a1 + v13), sel_alarmConfiguration);
  objc_msgSend(v21, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9BEAD34();
  swift_dynamicCast();
  v22 = v27;
  LODWORD(v13) = objc_msgSend(v27, sel_isEnabled);

  sub_1A9BD688C((uint64_t)v10, (uint64_t)v7, v18, v19, v20, v13, *(unsigned __int8 *)(a1 + 49));
  v23 = *(void (**)(char *, uint64_t))(v26 + 8);
  v23(v7, v3);
  return ((uint64_t (*)(char *, uint64_t))v23)(v10, v3);
}

uint64_t sub_1A9C58280(uint64_t a1)
{
  return ScheduleOccurrenceComponentsEditTableViewCell.apply(_:)(a1);
}

uint64_t type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell()
{
  return objc_opt_self();
}

id sub_1A9C582C0@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1A9C58314@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(*v3 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0;
  return result;
}

void sub_1A9C5837C(unsigned __int8 *a1)
{
  sub_1A9C57BC4(*a1);
}

uint64_t method lookup function for ScheduleOccurrenceComponentsEditTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.editView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ScheduleOccurrenceComponentsEditTableViewCell.showsComponentsHeader.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

char *sub_1A9C5841C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  char *v19;
  id v20;
  uint64_t v21;
  void *v22;
  objc_class *v23;
  id v24;
  char *v25;
  id v26;
  id *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  _QWORD aBlock[6];
  objc_super v36;

  v5 = sub_1A9CE6378();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&aBlock[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a1 == 0xD000000000000030 && a2 == 0x80000001A9CF7DA0)
      v18 = 0;
    else
      v18 = sub_1A9CE8BB0() ^ 1;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CB0EF8], v5);
  v19 = v2;
  sub_1A9CE6384();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v13, v17);
  v20 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
  sub_1A9BD7ED4(22, 0, 7, 0, (uint64_t)v17, v18 & 1);
  *(_QWORD *)&v19[OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView] = v21;

  if (a2)
  {
    v22 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  v23 = (objc_class *)type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v36.receiver = v19;
  v36.super_class = v23;
  v24 = objc_msgSendSuper2(&v36, sel_initWithStyle_reuseIdentifier_, 0, v22);

  v25 = (char *)v24;
  v26 = objc_msgSend(v25, sel_contentView);
  v27 = (id *)&v25[OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView];
  swift_beginAccess();
  objc_msgSend(v26, sel_addSubview_, *v27);

  v28 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  aBlock[4] = sub_1A9C219C0;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C21C90;
  aBlock[3] = &block_descriptor_22;
  v29 = _Block_copy(aBlock);
  v30 = objc_msgSend(v28, sel_initWithDynamicProvider_, v29);
  _Block_release(v29);
  swift_release();
  objc_msgSend(v25, sel_setBackgroundColor_, v30);

  v31 = *v27;
  v32 = objc_msgSend(v25, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v32, 0, *MEMORY[0x1E0DC3298], *(double *)(MEMORY[0x1E0DC3298] + 8), *(double *)(MEMORY[0x1E0DC3298] + 16), *(double *)(MEMORY[0x1E0DC3298] + 24));

  swift_bridgeObjectRelease();
  return v25;
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

id sub_1A9C5883C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepTimeDurationPickerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepTimeDurationPickerView()
{
  return objc_opt_self();
}

uint64_t sub_1A9C588C8()
{
  return swift_deallocClassInstance();
}

id sub_1A9C588D8()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  _s8SentinelCMa();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1ED264F90 = (uint64_t)result;
  return result;
}

id static NSBundle.sleepHealthUI.getter()
{
  return sub_1A9BECA2C(&qword_1ED2626A8, (id *)&qword_1ED264F90);
}

void sub_1A9C58948()
{
  void *v0;
  id v1;

  sub_1A9CE82E0();
  v0 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  if (v1)
    qword_1EEB48198 = (uint64_t)v1;
  else
    __break(1u);
}

id static NSBundle.sleepFramework.getter()
{
  return sub_1A9BECA2C(&qword_1EEB42D50, (id *)&qword_1EEB48198);
}

uint64_t _s8SentinelCMa()
{
  return objc_opt_self();
}

uint64_t sub_1A9C589FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A9C58A64()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C58AAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A9C58AFC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A9C58B40(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A9C58BA8()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9C58BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1A9C58C50())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SleepOnboardingFlowTableViewController.presentationStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_presentationStyle);
}

uint64_t sub_1A9C58CA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
  if (v1)
    return *(unsigned __int8 *)(v1 + 50);
  else
    return 0;
}

void SleepOnboardingFlowTableViewController.__allocating_init(userInfo:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

void sub_1A9C58D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
    swift_retain();

    if (v6)
    {
      sub_1A9C070F4();
      swift_release();
    }
  }
}

uint64_t sub_1A9C58D8C(char a1)
{
  char *v1;
  char *v2;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  objc_super v22;

  v2 = v1;
  swift_getObjectType();
  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
  objc_msgSendSuper2(&v22, sel_viewWillAppear_, a1 & 1);
  v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo];
  swift_beginAccess();
  v5 = *(void **)(*(_QWORD *)v4 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, sel_source);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {
    swift_release();

    return swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v14 = sub_1A9CE6990();
      __swift_project_value_buffer(v14, (uint64_t)qword_1ED2630B8);
      v15 = sub_1A9CE6978();
      v16 = sub_1A9CE867C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v21 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = sub_1A9CE8D48();
        sub_1A9B91D6C(v19, v20, &v21);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] Observing sleep settings or schedule changes for dismissal", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v18, -1, -1);
        MEMORY[0x1AF420344](v17, -1, -1);
      }

      *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_sleepChangeObserver] = sub_1A9BB432C();
      return swift_release();
    }
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingFlowTableViewController()
{
  return objc_opt_self();
}

id sub_1A9C59080(char a1)
{
  char *v1;
  char *v2;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  objc_class *v20;
  uint64_t v22;
  objc_super v23;

  v2 = v1;
  swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo];
  swift_beginAccess();
  v5 = *(void **)(*(_QWORD *)v4 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, sel_source);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_sleepChangeObserver] = 0;
      swift_release();
      if (qword_1ED262DB8 != -1)
        swift_once();
      v13 = sub_1A9CE6990();
      __swift_project_value_buffer(v13, (uint64_t)qword_1ED2630B8);
      v14 = sub_1A9CE6978();
      v15 = sub_1A9CE867C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v22 = v17;
        *(_DWORD *)v16 = 136446210;
        v18 = sub_1A9CE8D48();
        sub_1A9B91D6C(v18, v19, &v22);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Done observing sleep settings or schedule changes", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v17, -1, -1);
        MEMORY[0x1AF420344](v16, -1, -1);
      }

    }
  }
  v20 = (objc_class *)type metadata accessor for SleepOnboardingFlowTableViewController();
  v23.receiver = v2;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, sel_viewWillDisappear_, a1 & 1);
}

id sub_1A9C59360()
{
  char *v0;
  char *v1;
  id result;
  void *v3;
  id v4;
  uint64_t v5;
  objc_super v6;

  v1 = v0;
  result = objc_msgSend(v0, sel_view);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_window);

    if (v4)
    {
      v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor];
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 49) & 1) == 0)
        {
          swift_retain();
          sub_1A9C070F4();
          swift_release();
        }
      }
    }
    v6.receiver = v1;
    v6.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
    return objc_msgSendSuper2(&v6, sel_viewDidLayoutSubviews);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SleepOnboardingFlowTableViewController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SleepOnboardingFlowTableViewController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A9C594A4()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

id SleepOnboardingFlowTableViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingFlowTableViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C59598()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C595E4()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9C59634(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1A9C59694())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A9C596DC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSourceAdaptor);
  if (v1)
    return *(unsigned __int8 *)(v1 + 50);
  else
    return 0;
}

void __swiftcall SleepOnboardingFlowTableViewController.tableView(_:viewForFooterInSection:)(UIView_optional *__return_ptr retstr, UITableView *_, Swift::Int viewForFooterInSection)
{
  ;
}

double SleepOnboardingFlowTableViewController.tableView(_:heightForHeaderInSection:)(void *a1, uint64_t a2)
{
  return sub_1A9C5978C(a1, a2, MEMORY[0x1E0D2BB48]);
}

double SleepOnboardingFlowTableViewController.tableView(_:heightForFooterInSection:)(void *a1, uint64_t a2)
{
  return sub_1A9C5978C(a1, a2, MEMORY[0x1E0D2BB40]);
}

double sub_1A9C5978C(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37[2];
  uint64_t v38;
  __int128 v39;
  _QWORD v40[4];

  v5 = v3;
  v33 = a1;
  sub_1A9C59DC8();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE85D4();
  v32 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A9CE85F8();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A9CE64E0();
  v34 = *(_QWORD *)(v20 - 8);
  v35 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1AF41D0F8](0, a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *a3, v15);
  sub_1A9CE85EC();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v36 = *(_OWORD *)(v5 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_dataSource);
  v39 = v36;
  sub_1A9BF9A0C(0, &qword_1EEB4A0A0);
  sub_1A9BF9A0C(0, &qword_1EEB481E0);
  swift_unknownObjectRetain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_1A9B949B8(v37, (uint64_t)v40);
    __swift_project_boxed_opaque_existential_1Tm(v40, v40[3]);
    sub_1A9CE68D0();
    swift_bridgeObjectRelease();
    sub_1A9BF9A0C(0, (unint64_t *)&qword_1EEB449A0);
    v24 = swift_dynamicCast();
    v25 = v32;
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v28 = v34;
    v27 = v35;
    if ((v24 & 1) != 0)
    {
      v26(v10, 0, 1, v11);
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v14, v10, v11);
      sub_1A9CE85BC();
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v11);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v27);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
      return v30;
    }
    v26(v10, 1, 1, v11);
    sub_1A9C59E74((uint64_t)v10);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  }
  else
  {
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    swift_bridgeObjectRelease();
    sub_1A9C59EB0((uint64_t)v37, (unint64_t *)&qword_1EEB45C38, &qword_1EEB481E0);
    v28 = v34;
    v27 = v35;
  }
  if (objc_msgSend(v33, sel_style))
    v30 = *MEMORY[0x1E0DC53D8];
  else
    v30 = 0.0;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v27);
  return v30;
}

void SleepOnboardingFlowTableViewController.tableView(_:didSelectRowAt:)(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[4];

  v2 = (void *)sub_1A9CE64B0();
  v3 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, v2);

  if (!v3
    || (v9[0] = v3,
        sub_1A9B94A18(0, &qword_1EEB43520),
        sub_1A9BF9A0C(0, &qword_1EEB481F0),
        (swift_dynamicCast() & 1) == 0))
  {
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
    goto LABEL_6;
  }
  if (!*((_QWORD *)&v7 + 1))
  {
LABEL_6:
    sub_1A9C59EB0((uint64_t)&v6, &qword_1EEB481E8, &qword_1EEB481F0);
    goto LABEL_7;
  }
  sub_1A9B949B8(&v6, (uint64_t)v9);
  __swift_project_boxed_opaque_existential_1Tm(v9, v9[3]);
  sub_1A9B923D4((uint64_t)v9, (uint64_t)&v6);
  sub_1A9B94A18(0, &qword_1EEB47F90);
  swift_dynamicCast();
  sub_1A9CE67D4();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
LABEL_7:
  v4 = (void *)sub_1A9CE64B0();
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, v4, 1);

}

void sub_1A9C59DC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB481C8)
  {
    sub_1A9CE85D4();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB481C8);
  }
}

void sub_1A9C59E1C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9BF9A0C(255, a3);
    v4 = sub_1A9CE8880();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1A9C59E74(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C59DC8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C59EB0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  sub_1A9C59E1C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1A9C59EEC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t sub_1A9C59F44@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t method lookup function for SleepOnboardingFlowTableViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.userInfo.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.isAnimating.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SleepOnboardingFlowTableViewController.__allocating_init(userInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t HKSPSleepScheduleRange.conflict(bedtimeComponents:wakeUpComponents:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_1A9C5A0D4() & 1;
  result = sub_1A9C5A2A4();
  v4 = v2 | 2;
  if ((result & 1) == 0)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t sub_1A9C5A0D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  unsigned __int8 v7;
  uint64_t result;
  id v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;

  v1 = sub_1A9CE60C0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9C5A434();
  v7 = objc_msgSend(v0, sel_earliestBedtimeIsOnPreviousDay);
  if ((v6 & 1) != 0)
  {
    if ((v7 & 1) == 0)
      return 1;
  }
  else if ((v7 & 1) != 0)
  {
    return 0;
  }
  v9 = objc_msgSend(v0, sel_earliestBedtimeComponents);
  sub_1A9CE6024();

  v10 = sub_1A9CE6048();
  v12 = v11 & 1;
  v13 = sub_1A9CE6048();
  v15 = sub_1A9CB44C8(v13, v14 & 1, v10, v12);
  v17 = v16;
  v18 = sub_1A9CE6084();
  v20 = v19 & 1;
  v21 = sub_1A9CE6084();
  v23 = sub_1A9CB44C8(v21, v22 & 1, v18, v20);
  v25 = v24;
  sub_1A9C5A51C();
  if ((v17 & 1) != 0)
  {
    if ((v25 & 1) == 0)
      goto LABEL_11;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 0;
  }
  switch(v15)
  {
    case 1:
LABEL_9:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      return 1;
    case 0:
      if ((v25 & 1) != 0)
        goto LABEL_9;
LABEL_11:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      if ((unint64_t)(v23 + 1) < 3)
        return (6u >> ((v23 + 1) & 7)) & 1;
      break;
    case -1:
      goto LABEL_14;
  }
  result = sub_1A9CE8BA4();
  __break(1u);
  return result;
}

uint64_t sub_1A9C5A2A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;

  v1 = sub_1A9CE60C0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v0, sel_latestWakeUpComponents);
  sub_1A9CE6024();

  v7 = sub_1A9CE6048();
  v9 = v8 & 1;
  v10 = sub_1A9CE6048();
  v12 = sub_1A9CB44C8(v10, v11 & 1, v7, v9);
  v14 = v13;
  v15 = sub_1A9CE6084();
  v17 = v16 & 1;
  v18 = sub_1A9CE6084();
  v20 = sub_1A9CB44C8(v18, v19 & 1, v15, v17);
  v22 = v21;
  sub_1A9C5A51C();
  if ((v14 & 1) != 0)
  {
    if ((v22 & 1) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  switch(v12)
  {
    case 1:
LABEL_5:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      return 1;
    case 0:
      if ((v22 & 1) != 0)
        goto LABEL_5;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      if ((unint64_t)(v20 + 1) < 3)
        return (6u >> ((v20 + 1) & 7)) & 1;
      break;
    case -1:
LABEL_10:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      return 0;
  }
  result = sub_1A9CE8BA4();
  __break(1u);
  return result;
}

uint64_t sub_1A9C5A434()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;

  v0 = sub_1A9CE6048();
  v2 = v1 & 1;
  v3 = sub_1A9CE6048();
  v5 = sub_1A9CB44C8(v3, v4 & 1, v0, v2);
  v7 = v6;
  v8 = sub_1A9CE6084();
  v10 = v9 & 1;
  v11 = sub_1A9CE6084();
  v13 = sub_1A9CB44C8(v11, v12 & 1, v8, v10);
  v15 = v14;
  sub_1A9C5A51C();
  if ((v7 & 1) != 0)
    goto LABEL_6;
  if (v5 == -1 || v5 == 1)
  {
    v13 = v5;
LABEL_7:
    if ((unint64_t)(v13 + 1) < 3)
      return (((_BYTE)v13 + 1) & 7) == 2;
    goto LABEL_10;
  }
  if (!v5)
  {
LABEL_6:
    if ((v15 & 1) != 0)
      return 0;
    goto LABEL_7;
  }
LABEL_10:
  result = sub_1A9CE8BA4();
  __break(1u);
  return result;
}

void sub_1A9C5A51C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48280)
  {
    type metadata accessor for ComparisonResult(255);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48280);
  }
}

uint64_t SleepScheduleComponentsViewModel.includeDayLabelsInHeader.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = a1;
  return sub_1A9C5B3A8();
}

uint64_t type metadata accessor for SleepScheduleComponentsViewModel()
{
  uint64_t result;

  result = qword_1ED2636C0;
  if (!qword_1ED2636C0)
    return swift_getSingletonMetadata();
  return result;
}

void SleepScheduleComponentsViewModel.validScheduleRange.setter(void *a1)
{
  sub_1A9C5CB20(a1);

}

uint64_t SleepScheduleComponentsViewModel.wakeUpComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - v6;
  v8 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v9 = v1 + v8[9];
  v10 = sub_1A9CE60C0();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, a1, v10);
  v12 = *(_QWORD *)(v1 + v8[7]);
  v29 = v10;
  v30 = a1;
  v28 = v11;
  if (!v12)
  {
    *(_QWORD *)(v2 + v8[15]) = 0;
LABEL_9:
    v16 = 0;
    v17 = 0;
    goto LABEL_10;
  }
  v13 = sub_1A9C5A0D4();
  v14 = sub_1A9C5A2A4();
  if ((v14 & 1) != 0)
    v15 = v13 & 1 | 2;
  else
    v15 = v13 & 1;
  *(_QWORD *)(v2 + v8[15]) = v15;
  v16 = v15 & 1;
  v17 = (v15 & 1) == 0;
  if ((v15 & 1) == 0 && (v14 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  *(_BYTE *)(v2 + v8[13]) = v16;
  *(_BYTE *)(v2 + v8[14]) = v17;
  sub_1A9CE63E4();
  v18 = sub_1A9C5C9A4((uint64_t)v7, v2);
  v20 = v19;
  v21 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C0F26C((uint64_t)v7, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v22 = (uint64_t *)(v2 + v8[18]);
  swift_bridgeObjectRelease();
  *v22 = v18;
  v22[1] = v20;
  sub_1A9CE63E4();
  v23 = sub_1A9C5C9A4((uint64_t)v7, v2);
  v25 = v24;
  sub_1A9C0F26C((uint64_t)v7, &qword_1ED2625E0, v21);
  v26 = (uint64_t *)(v2 + v8[19]);
  swift_bridgeObjectRelease();
  *v26 = v23;
  v26[1] = v25;
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - v6;
  v8 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v9 = v1 + v8[10];
  v10 = sub_1A9CE60C0();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, a1, v10);
  v12 = *(_QWORD *)(v1 + v8[7]);
  v29 = v10;
  v30 = a1;
  v28 = v11;
  if (!v12)
  {
    *(_QWORD *)(v2 + v8[15]) = 0;
LABEL_9:
    v16 = 0;
    v17 = 0;
    goto LABEL_10;
  }
  v13 = sub_1A9C5A0D4();
  v14 = sub_1A9C5A2A4();
  if ((v14 & 1) != 0)
    v15 = v13 & 1 | 2;
  else
    v15 = v13 & 1;
  *(_QWORD *)(v2 + v8[15]) = v15;
  v16 = v15 & 1;
  v17 = (v15 & 1) == 0;
  if ((v15 & 1) == 0 && (v14 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  *(_BYTE *)(v2 + v8[13]) = v16;
  *(_BYTE *)(v2 + v8[14]) = v17;
  sub_1A9CE63E4();
  v18 = sub_1A9C5C9A4((uint64_t)v7, v2);
  v20 = v19;
  v21 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C0F26C((uint64_t)v7, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v22 = (uint64_t *)(v2 + v8[18]);
  swift_bridgeObjectRelease();
  *v22 = v18;
  v22[1] = v20;
  sub_1A9CE63E4();
  v23 = sub_1A9C5C9A4((uint64_t)v7, v2);
  v25 = v24;
  sub_1A9C0F26C((uint64_t)v7, &qword_1ED2625E0, v21);
  v26 = (uint64_t *)(v2 + v8[19]);
  swift_bridgeObjectRelease();
  *v26 = v23;
  v26[1] = v25;
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
}

uint64_t SleepScheduleComponentsViewModel.init(gregorianCalendar:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  _QWORD v68[3];
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v78 = a1;
  v70 = sub_1A9CE62E8();
  v79 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v3);
  v72 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED2625E0, v5);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v74 = (uint64_t)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v75 = (char *)v68 - v12;
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v69 = (char *)v68 - v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v76 = (uint64_t)v68 - v17;
  sub_1A9BB7054(0, &qword_1EEB44250, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v68 - v20;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v68 - v24;
  *a2 = 1;
  v26 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v27 = v26[6];
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  objc_msgSend(v28, sel_setDateStyle_, 0);
  objc_msgSend(v28, sel_setTimeStyle_, 1);
  v71 = v27;
  *(_QWORD *)&a2[v27] = v28;
  *(_QWORD *)&a2[v26[7]] = 0;
  a2[v26[8]] = 0;
  v68[1] = &a2[v26[9]];
  v29 = sub_1A9CE6444();
  v77 = *(_QWORD *)(v29 - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56);
  v30(v25, 1, 1, v29);
  v31 = sub_1A9CE6498();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v32(v21, 1, 1, v31);
  sub_1A9CE60A8();
  v33 = &a2[v26[10]];
  v30(v25, 1, 1, v29);
  v32(v21, 1, 1, v31);
  v68[2] = v33;
  sub_1A9CE60A8();
  v30(v25, 1, 1, v29);
  v32(v21, 1, 1, v31);
  sub_1A9CE60A8();
  v34 = v26[12];
  *(_QWORD *)&a2[v34] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
  v35 = v26[13];
  a2[v35] = 0;
  v36 = v26[14];
  a2[v36] = 0;
  v37 = v26[15];
  *(_QWORD *)&a2[v37] = 0;
  v38 = &a2[v26[16]];
  *v38 = 0;
  v38[1] = 0;
  v39 = &a2[v26[17]];
  *v39 = 0;
  v39[1] = 0;
  v40 = (uint64_t *)&a2[v26[18]];
  *v40 = 0;
  v40[1] = 0;
  v41 = (uint64_t *)&a2[v26[19]];
  *v41 = 0;
  v41[1] = 0;
  v42 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v77 + 16);
  v43 = &a2[v26[5]];
  v73 = v29;
  v42(v43, v78, v29);
  *(_QWORD *)&a2[v37] = 0;
  a2[v35] = 0;
  a2[v36] = 0;
  v45 = (uint64_t)v69;
  v44 = v70;
  sub_1A9C5B3A8();
  v46 = v76;
  sub_1A9CE63E4();
  sub_1A9C5CBE8(v46, v45);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  v48 = 0;
  v49 = 0;
  if (v47(v45, 1, v44) != 1)
  {
    v50 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v72, v45, v44);
    v51 = *(id *)&a2[v71];
    v52 = (void *)sub_1A9CE6258();
    v53 = v44;
    v54 = objc_msgSend(v51, sel_stringFromDate_, v52);

    v48 = sub_1A9CE82E0();
    v49 = v55;

    v44 = v53;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v53);
  }
  sub_1A9C0F26C(v76, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  swift_bridgeObjectRelease();
  *v40 = v48;
  v40[1] = v49;
  v56 = (uint64_t)v75;
  sub_1A9CE63E4();
  v57 = v74;
  sub_1A9C5CBE8(v56, v74);
  if (v47(v57, 1, v44) == 1)
  {
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v60 = v79;
    v61 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v72, v57, v44);
    v62 = *(id *)&a2[v71];
    v63 = (void *)sub_1A9CE6258();
    v64 = v44;
    v65 = objc_msgSend(v62, sel_stringFromDate_, v63);

    v58 = sub_1A9CE82E0();
    v59 = v66;

    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v64);
  }
  sub_1A9C0F26C(v56, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  swift_bridgeObjectRelease();
  *v41 = v58;
  v41[1] = v59;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v78, v73);
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeDate.getter()
{
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9CE63E4();
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpDate.getter()
{
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9CE63E4();
}

uint64_t SleepScheduleComponentsViewModel.alarmEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SleepScheduleComponentsViewModel.alarmEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*SleepScheduleComponentsViewModel.alarmEnabled.modify())()
{
  return nullsub_1;
}

uint64_t SleepScheduleComponentsViewModel.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A9C5B284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_1A9CE6444();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 20), v8, v4);
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t SleepScheduleComponentsViewModel.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  v4 = sub_1A9CE6444();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t sub_1A9C5B3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t result;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  _OWORD *v36;
  __int128 *v37;
  char *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;

  v1 = v0;
  *(_QWORD *)&v59 = sub_1A9CE60C0();
  v2 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v53 - v12;
  v14 = sub_1A9CE62E8();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v53 - v21;
  v23 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v24 = v23;
  if (*(_BYTE *)(v1 + v23[8]) != 1)
  {
    v31 = (_QWORD *)(v1 + v23[17]);
    swift_bridgeObjectRelease();
    *v31 = 0;
    v31[1] = 0;
    v32 = (_QWORD *)(v1 + v24[16]);
    result = swift_bridgeObjectRelease();
    *v32 = 0;
    v32[1] = 0;
    return result;
  }
  v54 = v19;
  v55 = v10;
  v56 = v22;
  v57 = v14;
  v25 = v59;
  (*(void (**)(char *, uint64_t, _QWORD))(v2 + 16))(v5, v1 + v23[11], v59);
  v58 = v15;
  sub_1A9CE6048();
  sub_1A9CE6054();
  v26 = v58;
  sub_1A9CE6084();
  sub_1A9CE6090();
  v27 = v57;
  sub_1A9CE63E4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v25);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v29 = v1;
  if (v28(v13, 1, v27) == 1)
  {
    v30 = (uint64_t)v13;
LABEL_7:
    sub_1A9C0F26C(v30, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v36 = (_OWORD *)(v29 + v24[17]);
    swift_bridgeObjectRelease();
    v59 = xmmword_1A9CF35A0;
    *v36 = xmmword_1A9CF35A0;
    v37 = (__int128 *)(v29 + v24[16]);
    result = swift_bridgeObjectRelease();
    *v37 = v59;
    return result;
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v35 = v56;
  v34(v56, v13, v27);
  v30 = (uint64_t)v55;
  sub_1A9C5C450((uint64_t)v55);
  if (v28((char *)v30, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v27);
    goto LABEL_7;
  }
  v38 = v54;
  v34(v54, (char *)v30, v27);
  v39 = *(void **)(v29 + v24[12]);
  v40 = (void *)sub_1A9CE6258();
  v41 = objc_msgSend(v39, sel_stringFromDate_, v40);

  v42 = sub_1A9CE82E0();
  v44 = v43;

  v45 = (uint64_t *)(v29 + v24[17]);
  swift_bridgeObjectRelease();
  *v45 = v42;
  v45[1] = v44;
  v46 = (void *)sub_1A9CE6258();
  v47 = objc_msgSend(v39, sel_stringFromDate_, v46);

  v48 = sub_1A9CE82E0();
  v50 = v49;

  v51 = *(void (**)(char *, uint64_t))(v58 + 8);
  v51(v38, v27);
  v51(v35, v27);
  v52 = (uint64_t *)(v29 + v24[16]);
  result = swift_bridgeObjectRelease();
  *v52 = v48;
  v52[1] = v50;
  return result;
}

uint64_t (*SleepScheduleComponentsViewModel.gregorianCalendar.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9C5DB84;
}

id SleepScheduleComponentsViewModel.timeFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
}

void SleepScheduleComponentsViewModel.timeFormatter.setter(void *a1)
{
  sub_1A9C5CC3C(a1);

}

void (*SleepScheduleComponentsViewModel.timeFormatter.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v3[3] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9C5B84C;
}

void sub_1A9C5B84C(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) == 0)
  {
    v4 = v2[4];
    v5 = v2[2];
    sub_1A9CE63E4();
    v6 = sub_1A9C5C9A4((uint64_t)v3, v5);
    v8 = v7;
    v9 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v10 = (uint64_t *)(v5 + *(int *)(v4 + 72));
    swift_bridgeObjectRelease();
    *v10 = v6;
    v10[1] = v8;
    sub_1A9CE63E4();
    v11 = sub_1A9C5C9A4((uint64_t)v3, v5);
    v13 = v12;
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, v9);
    v14 = (uint64_t *)(v5 + *(int *)(v4 + 76));
    swift_bridgeObjectRelease();
    *v14 = v11;
    v14[1] = v13;
  }
  free(v3);
  free(v2);
}

void *SleepScheduleComponentsViewModel.validScheduleRange.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 28));
  v2 = v1;
  return v1;
}

uint64_t (*SleepScheduleComponentsViewModel.validScheduleRange.modify(uint64_t a1))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = type metadata accessor for SleepScheduleComponentsViewModel();
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v3 + 28);
  return sub_1A9C5B9DC;
}

uint64_t sub_1A9C5B9DC(uint64_t result, char a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if ((a2 & 1) == 0)
  {
    v2 = *(_QWORD *)result;
    v3 = *(int **)(result + 8);
    if (*(_QWORD *)(*(_QWORD *)result + *(int *)(result + 16)))
    {
      v4 = sub_1A9C5A0D4() & 1;
      result = sub_1A9C5A2A4();
      v5 = v4 | 2;
      if ((result & 1) == 0)
        v5 = v4;
      *(_QWORD *)(v2 + v3[15]) = v5;
      v6 = v5 & 1;
      v7 = v6 == 0;
      if ((result & 1) != 0 || v6 != 0)
        goto LABEL_12;
    }
    else
    {
      *(_QWORD *)(v2 + v3[15]) = 0;
    }
    LOBYTE(v6) = 0;
    v7 = 0;
LABEL_12:
    *(_BYTE *)(v2 + v3[13]) = v6;
    *(_BYTE *)(v2 + v3[14]) = v7;
  }
  return result;
}

uint64_t SleepScheduleComponentsViewModel.includeDayLabelsInHeader.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32));
}

uint64_t (*SleepScheduleComponentsViewModel.includeDayLabelsInHeader.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9C5DB84;
}

uint64_t SleepScheduleComponentsViewModel.roundedBedtimeComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 36);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A9C5BB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 36), v8, v4);
  sub_1A9C5BF04();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void (*SleepScheduleComponentsViewModel.roundedBedtimeComponents.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v3[3] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3[4] = v5;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(v5 + 36);
  return sub_1A9C5BC54;
}

void sub_1A9C5BC54(_QWORD **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    v4 = v2[4];
    v5 = v2[2];
    if (*(_QWORD *)(v5 + *(int *)(v4 + 28)))
    {
      v6 = sub_1A9C5A0D4() & 1;
      v7 = sub_1A9C5A2A4();
      v8 = v6 | 2;
      if ((v7 & 1) == 0)
        v8 = v6;
      *(_QWORD *)(v5 + *(int *)(v4 + 60)) = v8;
      v9 = v8 & 1;
      v10 = v9 == 0;
      if ((v7 & 1) != 0 || v9 != 0)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(v5 + *(int *)(v4 + 60)) = 0;
    }
    LOBYTE(v9) = 0;
    v10 = 0;
LABEL_13:
    v3 = (void *)v2[3];
    v12 = (int *)v2[4];
    v13 = v2[2];
    *(_BYTE *)(v13 + v12[13]) = v9;
    *(_BYTE *)(v13 + v12[14]) = v10;
    sub_1A9CE63E4();
    v14 = sub_1A9C5C9A4((uint64_t)v3, v13);
    v16 = v15;
    v17 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v18 = (uint64_t *)(v13 + v12[18]);
    swift_bridgeObjectRelease();
    *v18 = v14;
    v18[1] = v16;
    sub_1A9CE63E4();
    v19 = sub_1A9C5C9A4((uint64_t)v3, v13);
    v21 = v20;
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, v17);
    v22 = (uint64_t *)(v13 + v12[19]);
    swift_bridgeObjectRelease();
    *v22 = v19;
    v22[1] = v21;
    sub_1A9C5B3A8();
    goto LABEL_14;
  }
  v3 = (void *)v2[3];
LABEL_14:
  free(v3);
  free(v2);
}

uint64_t SleepScheduleComponentsViewModel.roundedWakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 40);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A9C5BE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 40), v8, v4);
  sub_1A9C5BF04();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1A9C5BF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;

  v1 = v0;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - v4;
  v6 = type metadata accessor for SleepScheduleComponentsViewModel();
  v7 = (int *)v6;
  if (!*(_QWORD *)(v0 + *(int *)(v6 + 28)))
  {
    *(_QWORD *)(v0 + *(int *)(v6 + 60)) = 0;
LABEL_9:
    v11 = 0;
    v12 = 0;
    goto LABEL_10;
  }
  v8 = sub_1A9C5A0D4();
  v9 = sub_1A9C5A2A4();
  if ((v9 & 1) != 0)
    v10 = v8 & 1 | 2;
  else
    v10 = v8 & 1;
  *(_QWORD *)(v0 + v7[15]) = v10;
  v11 = v10 & 1;
  v12 = (v10 & 1) == 0;
  if ((v10 & 1) == 0 && (v9 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  *(_BYTE *)(v0 + v7[13]) = v11;
  *(_BYTE *)(v0 + v7[14]) = v12;
  sub_1A9CE63E4();
  v13 = sub_1A9C5C9A4((uint64_t)v5, v0);
  v15 = v14;
  v16 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C0F26C((uint64_t)v5, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v17 = (uint64_t *)(v0 + v7[18]);
  swift_bridgeObjectRelease();
  *v17 = v13;
  v17[1] = v15;
  sub_1A9CE63E4();
  v18 = sub_1A9C5C9A4((uint64_t)v5, v0);
  v20 = v19;
  sub_1A9C0F26C((uint64_t)v5, &qword_1ED2625E0, v16);
  v21 = (uint64_t *)(v1 + v7[19]);
  swift_bridgeObjectRelease();
  *v21 = v18;
  v21[1] = v20;
  return sub_1A9C5B3A8();
}

void (*SleepScheduleComponentsViewModel.roundedWakeUpComponents.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v3[3] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3[4] = v5;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(v5 + 40);
  return sub_1A9C5C14C;
}

void sub_1A9C5C14C(_QWORD **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    v4 = v2[4];
    v5 = v2[2];
    if (*(_QWORD *)(v5 + *(int *)(v4 + 28)))
    {
      v6 = sub_1A9C5A0D4() & 1;
      v7 = sub_1A9C5A2A4();
      v8 = v6 | 2;
      if ((v7 & 1) == 0)
        v8 = v6;
      *(_QWORD *)(v5 + *(int *)(v4 + 60)) = v8;
      v9 = v8 & 1;
      v10 = v9 == 0;
      if ((v7 & 1) != 0 || v9 != 0)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(v5 + *(int *)(v4 + 60)) = 0;
    }
    LOBYTE(v9) = 0;
    v10 = 0;
LABEL_13:
    v3 = (void *)v2[3];
    v12 = (int *)v2[4];
    v13 = v2[2];
    *(_BYTE *)(v13 + v12[13]) = v9;
    *(_BYTE *)(v13 + v12[14]) = v10;
    sub_1A9CE63E4();
    v14 = sub_1A9C5C9A4((uint64_t)v3, v13);
    v16 = v15;
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v17 = (uint64_t *)(v13 + v12[18]);
    swift_bridgeObjectRelease();
    *v17 = v14;
    v17[1] = v16;
    sub_1A9CE63E4();
    v18 = sub_1A9C5C9A4((uint64_t)v3, v13);
    v20 = v19;
    sub_1A9C0F26C((uint64_t)v3, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v21 = (uint64_t *)(v13 + v12[19]);
    swift_bridgeObjectRelease();
    *v21 = v18;
    v21[1] = v20;
    sub_1A9C5B3A8();
    goto LABEL_14;
  }
  v3 = (void *)v2[3];
LABEL_14:
  free(v3);
  free(v2);
}

uint64_t SleepScheduleComponentsViewModel.wakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A9C5C34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(a2 + *(int *)(v9 + 44), v8, v4);
  sub_1A9C5B3A8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t (*SleepScheduleComponentsViewModel.wakeUpComponents.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9C5C42C;
}

uint64_t sub_1A9C5C42C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_1A9C5B3A8();
  return result;
}

uint64_t sub_1A9C5C450@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  unint64_t *v26;
  void (*v27)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = a1;
  sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  MEMORY[0x1E0C80A78](v2, v3);
  v37 = (char *)&v32 - v4;
  v5 = sub_1A9CE60C0();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v34 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v32 - v11;
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - v15;
  v17 = sub_1A9CE62E8();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v38 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v22 = v1 + v21[5];
  v23 = v1 + v21[11];
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v33(v12, v23, v5);
  v35 = v1;
  sub_1A9CE6048();
  sub_1A9CE6054();
  sub_1A9CE6084();
  sub_1A9CE6090();
  v36 = v22;
  v24 = v17;
  sub_1A9CE63E4();
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v12, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v24) == 1)
  {
    v26 = &qword_1ED2625E0;
    v27 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
LABEL_5:
    sub_1A9C0F26C((uint64_t)v16, v26, v27);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v39, 1, 1, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v38, v16, v24);
  v16 = v37;
  Calendar.timeComponents(from:to:)(v35 + v21[9], (uint64_t)v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v38, v24);
    v26 = &qword_1EEB44248;
    v27 = (void (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    goto LABEL_5;
  }
  v29 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v34, v16, v5);
  v33(v12, v29, v5);
  v30 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CB47B0(v30, v29, (uint64_t)v12);
  swift_bridgeObjectRelease();
  v31 = v38;
  sub_1A9CE63F0();
  v25(v12, v5);
  v25((char *)v29, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v31, v24);
}

id SleepScheduleComponentsViewModel.dayLabelFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
}

void sub_1A9C5C79C(void **a1, uint64_t a2)
{
  void *v2;
  id *v3;
  id v4;

  v2 = *a1;
  v3 = (id *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
  v4 = v2;
  objc_storeStrong(v3, v2);
  sub_1A9C5B3A8();

}

void SleepScheduleComponentsViewModel.dayLabelFormatter.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  objc_storeStrong((id *)(v1 + *(int *)(v2 + 48)), a1);
  sub_1A9C5B3A8();

}

uint64_t (*SleepScheduleComponentsViewModel.dayLabelFormatter.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  type metadata accessor for SleepScheduleComponentsViewModel();
  return sub_1A9C5DB84;
}

uint64_t SleepScheduleComponentsViewModel.bedtimeShowsAlert.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 52));
}

uint64_t SleepScheduleComponentsViewModel.wakeUpShowsAlert.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 56));
}

uint64_t SleepScheduleComponentsViewModel.bedtimeDay.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.wakeUpDay.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.roundedFormattedBedtimeTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepScheduleComponentsViewModel.roundedFormattedWakeUpTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9C5C990(uint64_t a1, uint64_t a2)
{
  return sub_1A9C5C9A4(a1, a2);
}

uint64_t sub_1A9C5C9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  _QWORD v19[2];

  v4 = sub_1A9CE62E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED2625E0, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v19 - v12;
  sub_1A9C5CBE8(a1, (uint64_t)v19 - v12);
  v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
    v15 = *(id *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
    v16 = (void *)sub_1A9CE6258();
    v17 = objc_msgSend(v15, sel_stringFromDate_, v16);

    v14 = sub_1A9CE82E0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return v14;
}

void sub_1A9C5CB20(void *a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  BOOL v11;

  v3 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v4 = v3[7];
  v5 = *(void **)(v1 + v4);
  *(_QWORD *)(v1 + v4) = a1;
  v6 = a1;

  if (!a1)
  {
    *(_QWORD *)(v1 + v3[15]) = 0;
LABEL_9:
    v10 = 0;
    v11 = 0;
    goto LABEL_10;
  }
  v7 = sub_1A9C5A0D4();
  v8 = sub_1A9C5A2A4();
  if ((v8 & 1) != 0)
    v9 = v7 & 1 | 2;
  else
    v9 = v7 & 1;
  *(_QWORD *)(v1 + v3[15]) = v9;
  v10 = v9 & 1;
  v11 = (v9 & 1) == 0;
  if ((v9 & 1) == 0 && (v8 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  *(_BYTE *)(v1 + v3[13]) = v10;
  *(_BYTE *)(v1 + v3[14]) = v11;
}

uint64_t sub_1A9C5CBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C5CC3C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;

  v2 = v1;
  v4 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v19 - v7;
  v9 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  objc_storeStrong((id *)(v2 + v9[6]), a1);
  sub_1A9CE63E4();
  v10 = sub_1A9C5C9A4((uint64_t)v8, v2);
  v12 = v11;
  sub_1A9C0F26C((uint64_t)v8, &qword_1ED2625E0, v4);
  v13 = (uint64_t *)(v2 + v9[18]);
  swift_bridgeObjectRelease();
  *v13 = v10;
  v13[1] = v12;
  sub_1A9CE63E4();
  v14 = sub_1A9C5C9A4((uint64_t)v8, v2);
  v16 = v15;
  sub_1A9C0F26C((uint64_t)v8, &qword_1ED2625E0, v4);
  v17 = (uint64_t *)(v2 + v9[19]);
  result = swift_bridgeObjectRelease();
  *v17 = v14;
  v17[1] = v16;
  return result;
}

uint64_t sub_1A9C5CD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 20);
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

id sub_1A9C5CDDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 24));
  *a2 = v3;
  return v3;
}

void sub_1A9C5CE10(id *a1)
{
  id v1;

  v1 = *a1;
  sub_1A9C5CC3C(v1);

}

id sub_1A9C5CE48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 28));
  *a2 = v3;
  return v3;
}

void sub_1A9C5CE7C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1A9C5CB20(v1);

}

uint64_t sub_1A9C5CEB8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for SleepScheduleComponentsViewModel();
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 32));
  return result;
}

uint64_t sub_1A9C5CEEC(char *a1, uint64_t a2)
{
  char v2;

  v2 = *a1;
  *(_BYTE *)(a2 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = v2;
  return sub_1A9C5B3A8();
}

uint64_t sub_1A9C5CF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 36);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1A9C5CF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 40);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1A9C5CFC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 44);
  v4 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

id sub_1A9C5D010@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 48));
  *a2 = v3;
  return v3;
}

_QWORD *initializeBufferWithCopyOfBuffer for SleepScheduleComponentsViewModel(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v43 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v43 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = *(void **)((char *)a2 + v11);
    *(_QWORD *)((char *)v4 + v11) = v13;
    v14 = *(void **)((char *)a2 + v12);
    *(_QWORD *)((char *)v4 + v12) = v14;
    v15 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_1A9CE60C0();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v20 = v13;
    v21 = v14;
    v19(v16, v17, v18);
    v19((char *)v4 + a3[10], (char *)a2 + a3[10], v18);
    v19((char *)v4 + a3[11], (char *)a2 + a3[11], v18);
    v22 = a3[12];
    v23 = a3[13];
    v24 = *(void **)((char *)a2 + v22);
    *(_QWORD *)((char *)v4 + v22) = v24;
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    v25 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *(_QWORD *)((char *)v4 + v25) = *(_QWORD *)((char *)a2 + v25);
    v26 = a3[16];
    v27 = a3[17];
    v28 = (_QWORD *)((char *)v4 + v26);
    v29 = (_QWORD *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)((char *)v4 + v27);
    v32 = (_QWORD *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[18];
    v35 = a3[19];
    v36 = (_QWORD *)((char *)v4 + v34);
    v37 = (_QWORD *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (_QWORD *)((char *)v4 + v35);
    v40 = (_QWORD *)((char *)a2 + v35);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SleepScheduleComponentsViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  v6 = a1 + a2[9];
  v7 = sub_1A9CE60C0();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[10], v7);
  v8(a1 + a2[11], v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for SleepScheduleComponentsViewModel(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A9CE6444();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = *(void **)&a2[v10];
  *(_QWORD *)&a1[v10] = v12;
  v13 = *(void **)&a2[v11];
  *(_QWORD *)&a1[v11] = v13;
  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_1A9CE60C0();
  v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v19 = v12;
  v20 = v13;
  v18(v15, v16, v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  v18(&a1[a3[11]], &a2[a3[11]], v17);
  v21 = a3[12];
  v22 = a3[13];
  v23 = *(void **)&a2[v21];
  *(_QWORD *)&a1[v21] = v23;
  a1[v22] = a2[v22];
  v24 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v25 = a3[16];
  v26 = a3[17];
  v27 = &a1[v25];
  v28 = &a2[v25];
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = &a1[v26];
  v31 = &a2[v26];
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = a3[18];
  v34 = a3[19];
  v35 = &a1[v33];
  v36 = &a2[v33];
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = &a1[v34];
  v39 = &a2[v34];
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for SleepScheduleComponentsViewModel(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A9CE6444();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)&a2[v10];
  v12 = *(void **)&a1[v10];
  *(_QWORD *)&a1[v10] = v11;
  v13 = v11;

  v14 = a3[7];
  v15 = *(void **)&a1[v14];
  v16 = *(void **)&a2[v14];
  *(_QWORD *)&a1[v14] = v16;
  v17 = v16;

  a1[a3[8]] = a2[a3[8]];
  v18 = a3[9];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_1A9CE60C0();
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 24);
  v22(v19, v20, v21);
  v22(&a1[a3[10]], &a2[a3[10]], v21);
  v22(&a1[a3[11]], &a2[a3[11]], v21);
  v23 = a3[12];
  v24 = *(void **)&a2[v23];
  v25 = *(void **)&a1[v23];
  *(_QWORD *)&a1[v23] = v24;
  v26 = v24;

  a1[a3[13]] = a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  v27 = a3[16];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[17];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a3[18];
  v34 = &a1[v33];
  v35 = &a2[v33];
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = a3[19];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for SleepScheduleComponentsViewModel(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A9CE6444();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_1A9CE60C0();
  v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v15(&a1[a3[10]], &a2[a3[10]], v14);
  v15(&a1[a3[11]], &a2[a3[11]], v14);
  v16 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  a1[v16] = a2[v16];
  v17 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[17];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  v19 = a3[19];
  *(_OWORD *)&a1[a3[18]] = *(_OWORD *)&a2[a3[18]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  return a1;
}

_BYTE *assignWithTake for SleepScheduleComponentsViewModel(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1A9CE6444();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];

  v12 = a3[7];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_1A9CE60C0();
  v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  v18(&a1[a3[11]], &a2[a3[11]], v17);
  v19 = a3[12];
  v20 = *(void **)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];

  v21 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v21] = a2[v21];
  v22 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  v23 = &a1[v22];
  v24 = (uint64_t *)&a2[v22];
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[17];
  v28 = &a1[v27];
  v29 = (uint64_t *)&a2[v27];
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[18];
  v33 = &a1[v32];
  v34 = (uint64_t *)&a2[v32];
  v36 = *v34;
  v35 = v34[1];
  *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v37 = a3[19];
  v38 = &a1[v37];
  v39 = (uint64_t *)&a2[v37];
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleComponentsViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C5D95C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_1A9CE6444();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1A9CE60C0();
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleComponentsViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C5DA0C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1A9CE6444();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    v10 = sub_1A9CE60C0();
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[9];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1A9C5DAAC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    result = sub_1A9CE60C0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id WeatherPrefetchScheduler.__allocating_init(sleepStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return WeatherPrefetchScheduler.init(sleepStore:)(a1);
}

uint64_t WeatherPrefetchScheduler.onShouldPrefetch.getter()
{
  return swift_retain();
}

uint64_t WeatherPrefetchScheduler.onShouldCancel.getter()
{
  return swift_retain();
}

id WeatherPrefetchScheduler.init(sleepStore:)(void *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  objc_class *v16;
  id v17;
  uint64_t v19;
  objc_super v20;

  swift_getObjectType();
  v3 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldPrefetch;
  sub_1A9C1413C();
  swift_allocObject();
  v4 = v1;
  *(_QWORD *)&v1[v3] = sub_1A9CE6DB0();
  v5 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldCancel;
  swift_allocObject();
  *(_QWORD *)&v4[v5] = sub_1A9CE6DB0();
  v6 = &v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_lastWakeUp];
  v7 = sub_1A9CE62E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer] = 0;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EEB49410);
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v19 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = sub_1A9CE8D48();
    sub_1A9B91D6C(v13, v14, &v19);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] initializing...", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);
  }

  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore] = a1;
  v15 = a1;

  v16 = (objc_class *)type metadata accessor for WeatherPrefetchScheduler();
  v20.receiver = v4;
  v20.super_class = v16;
  v17 = objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend(v15, sel_addObserver_, v17);

  return v17;
}

uint64_t sub_1A9C5DE54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v9 = sub_1A9CE8070();
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1A9CE8094();
  v13 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C04C74();
  v17 = (void *)sub_1A9CE870C();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  aBlock[4] = sub_1A9C60C9C;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_18_1;
  v19 = _Block_copy(aBlock);
  v20 = a1;
  swift_retain();
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1A9B92F34(0, &qword_1EEB47E30, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C04D54();
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v16, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v23);
}

void sub_1A9C5E068(void *a1, void (*a2)(uint64_t))
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (a1)
  {
    v4 = (void *)objc_opt_self();
    v5 = a1;
    v6 = objc_msgSend(v4, sel_sharedBehavior);
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, sel_isAppleWatch);

      if ((v8 & 1) != 0)
        v9 = objc_msgSend(v5, sel_goodMorningAlertNotificationEnabled);
      else
        v9 = objc_msgSend(v5, sel_goodMorningScreenEnabled);
      if ((v9 & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        if (qword_1EEB42E60 != -1)
          swift_once();
        v18 = sub_1A9CE6990();
        __swift_project_value_buffer(v18, (uint64_t)qword_1EEB49410);
        v19 = sub_1A9CE6978();
        v20 = sub_1A9CE867C();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc();
          v22 = swift_slowAlloc();
          v25 = v22;
          *(_DWORD *)v21 = 136446210;
          v23 = sub_1A9CE8D48();
          sub_1A9B91D6C(v23, v24, &v25);
          sub_1A9CE888C();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A9B87000, v19, v20, "[%{public}s] good morning disabled, not prefetching", v21, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF420344](v22, -1, -1);
          MEMORY[0x1AF420344](v21, -1, -1);
        }

        v17 = 0;
      }
      a2(v17);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v10 = sub_1A9CE6990();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EEB49410);
    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE8664();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v25 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_1A9CE8D48();
      sub_1A9B91D6C(v15, v16, &v25);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] failed to fetch model, not prefetching", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);
    }

    a2(0);
  }
}

uint64_t sub_1A9C5E3C8()
{
  char *v0;
  uint64_t ObjectType;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  char *v6;
  _QWORD v8[6];

  ObjectType = swift_getObjectType();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = ObjectType;
  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = sub_1A9C60C5C;
  v4[3] = v2;
  v4[4] = ObjectType;
  v8[4] = sub_1A9C60C64;
  v8[5] = v4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1A9BB6368;
  v8[3] = &block_descriptor_12_2;
  v5 = _Block_copy(v8);
  v6 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_sleepScheduleModelWithCompletion_, v5);
  _Block_release(v5);
  return swift_release();
}

void sub_1A9C5E4D0(char a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v6 = sub_1A9CE62E8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v11 = sub_1A9CE6990();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EEB49410);
    v12 = sub_1A9CE6978();
    v13 = sub_1A9CE867C();
    if (os_log_type_enabled(v12, v13))
    {
      v25 = a3;
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      aBlock[0] = v15;
      *(_DWORD *)v14 = 136446210;
      v24[1] = v14 + 4;
      v16 = sub_1A9CE8D48();
      v26 = sub_1A9B91D6C(v16, v17, aBlock);
      sub_1A9CE888C();
      a3 = v25;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] scheduling next prefetch date", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v15, -1, -1);
      MEMORY[0x1AF420344](v14, -1, -1);
    }

    v18 = *(void **)&a2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
    v19 = *MEMORY[0x1E0DA8390];
    sub_1A9CE62D0();
    v20 = (void *)sub_1A9CE6258();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a2;
    *(_QWORD *)(v21 + 24) = a3;
    aBlock[4] = (uint64_t)sub_1A9C60CCC;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9C5EEC4;
    aBlock[3] = (uint64_t)&block_descriptor_24_0;
    v22 = _Block_copy(aBlock);
    v23 = a2;
    swift_release();
    objc_msgSend(v18, sel_nextEventWithIdentifier_dueAfterDate_completion_, v19, v20, v22);
    _Block_release(v22);

  }
  else
  {
    sub_1A9C5FD60();
    sub_1A9C1413C();
    sub_1A9B92B9C(&qword_1EEB482E8, (uint64_t (*)(uint64_t))sub_1A9C1413C, MEMORY[0x1E0C95F40]);
    sub_1A9CE6E28();
  }
}

uint64_t sub_1A9C5E7B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v28 = a4;
  v6 = sub_1A9CE8070();
  v31 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE8094();
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v28 - v18;
  sub_1A9C04C74();
  v20 = (void *)sub_1A9CE870C();
  sub_1A9C5CBE8(a1, (uint64_t)v19);
  v21 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject();
  sub_1A9C60DA4((uint64_t)v19, v23 + v21);
  *(_QWORD *)(v23 + v22) = a3;
  *(_QWORD *)(v23 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8)) = v28;
  aBlock[4] = sub_1A9C60E00;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_30_0;
  v24 = _Block_copy(aBlock);
  v25 = a3;
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  v26 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1A9B92F34(0, &qword_1EEB47E30, v26, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C04D54();
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v13, v9, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v13, v30);
}

void sub_1A9C5EA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v39 - v6;
  v8 = sub_1A9CE62E8();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v39 - v15;
  sub_1A9C5CBE8(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1A9BD5744((uint64_t)v7);
    if (qword_1EEB42E60 != -1)
      swift_once();
    v17 = sub_1A9CE6990();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EEB49410);
    v18 = sub_1A9CE6978();
    v19 = sub_1A9CE867C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v44 = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = sub_1A9CE8D48();
      v43 = sub_1A9B91D6C(v22, v23, &v44);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] no next wake up date, not prefetching", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v21, -1, -1);
      MEMORY[0x1AF420344](v20, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v7, v8);
    if (qword_1EEB42E60 != -1)
      swift_once();
    v24 = sub_1A9CE6990();
    __swift_project_value_buffer(v24, (uint64_t)qword_1EEB49410);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
    v25 = sub_1A9CE6978();
    v26 = sub_1A9CE867C();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v42 = a2;
      v29 = v28;
      v41 = swift_slowAlloc();
      v44 = v41;
      *(_DWORD *)v29 = 136446466;
      v30 = sub_1A9CE8D48();
      v40 = v27;
      v43 = sub_1A9B91D6C(v30, v31, &v44);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      v39 = v29 + 14;
      v32 = (void *)sub_1A9CE6258();
      v33 = objc_msgSend(v32, sel_hkspDescription);

      v34 = sub_1A9CE82E0();
      v36 = v35;

      v43 = sub_1A9B91D6C(v34, v36, &v44);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v37 = *(void (**)(char *, uint64_t))(v9 + 8);
      v37(v13, v8);
      _os_log_impl(&dword_1A9B87000, v25, (os_log_type_t)v40, "[%{public}s] next wake up is %s", (uint8_t *)v29, 0x16u);
      v38 = v41;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v38, -1, -1);
      MEMORY[0x1AF420344](v29, -1, -1);
    }
    else
    {
      v37 = *(void (**)(char *, uint64_t))(v9 + 8);
      v37(v13, v8);
    }

    sub_1A9C5EFCC((uint64_t)v16);
    v37(v16, v8);
  }
}

uint64_t sub_1A9C5EEC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, void *);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_1A9CE62C4();
    v11 = sub_1A9CE62E8();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    v12 = sub_1A9CE62E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  swift_retain();
  v13 = a3;
  v10(v9, a3);
  swift_release();

  return sub_1A9BD5744((uint64_t)v9);
}

void sub_1A9C5EFCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  char *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  _QWORD v63[2];
  void (*v64)(char *, _QWORD, uint64_t, uint64_t);
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72[3];

  v2 = v1;
  v63[1] = swift_getObjectType();
  v4 = sub_1A9CE62E8();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD **)(v4 - 8);
  v8 = MEMORY[0x1E0C80A78](v4, v7);
  v67 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v69 = (char *)v63 - v12;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v63 - v14;
  sub_1A9C60BA8();
  v17 = v16;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v23, v26);
  v29 = (char *)v63 - v28;
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)v63 - v31;
  v65 = (void (*)(char *, uint64_t, uint64_t))v6[2];
  v66 = a1;
  v65((char *)v63 - v31, a1, v4);
  v64 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v6[7];
  v64(v32, 0, 1, v4);
  v68 = v2;
  v33 = v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_lastWakeUp;
  swift_beginAccess();
  v34 = (uint64_t)&v20[*(int *)(v17 + 48)];
  sub_1A9C5CBE8((uint64_t)v32, (uint64_t)v20);
  sub_1A9C5CBE8(v33, v34);
  v70 = v6;
  v35 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v6[6];
  if (v35((uint64_t)v20, 1, v4) == 1)
  {
    sub_1A9BD5744((uint64_t)v32);
    if (v35(v34, 1, v4) == 1)
    {
      sub_1A9BD5744((uint64_t)v20);
LABEL_8:
      if (qword_1EEB42E60 != -1)
        swift_once();
      v40 = sub_1A9CE6990();
      __swift_project_value_buffer(v40, (uint64_t)qword_1EEB49410);
      v41 = sub_1A9CE6978();
      v42 = sub_1A9CE867C();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        v44 = swift_slowAlloc();
        v72[0] = v44;
        *(_DWORD *)v43 = 136446210;
        v45 = sub_1A9CE8D48();
        v71 = sub_1A9B91D6C(v45, v46, v72);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v41, v42, "[%{public}s] reschedule not needed, next wake up unchanged", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v44, -1, -1);
        MEMORY[0x1AF420344](v43, -1, -1);
      }

      return;
    }
    goto LABEL_6;
  }
  sub_1A9C5CBE8((uint64_t)v20, (uint64_t)v29);
  if (v35(v34, 1, v4) == 1)
  {
    sub_1A9BD5744((uint64_t)v32);
    ((void (*)(char *, uint64_t))v70[1])(v29, v4);
LABEL_6:
    sub_1A9C60C20((uint64_t)v20);
    v36 = (uint64_t)v69;
    goto LABEL_13;
  }
  v37 = v70;
  ((void (*)(char *, uint64_t, uint64_t))v70[4])(v15, v34, v4);
  sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v38 = sub_1A9CE82A4();
  v39 = (void (*)(char *, uint64_t))v37[1];
  v39(v15, v4);
  sub_1A9BD5744((uint64_t)v32);
  v39(v29, v4);
  sub_1A9BD5744((uint64_t)v20);
  v36 = (uint64_t)v69;
  if ((v38 & 1) != 0)
    goto LABEL_8;
LABEL_13:
  v47 = v65;
  v65(v25, v66, v4);
  v64(v25, 0, 1, v4);
  swift_beginAccess();
  sub_1A9C141CC((uint64_t)v25, v33);
  swift_endAccess();
  sub_1A9C601E8(0x20000000000001uLL);
  sub_1A9CE624C();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v48 = sub_1A9CE6990();
  __swift_project_value_buffer(v48, (uint64_t)qword_1EEB49410);
  v49 = v67;
  v47(v67, v36, v4);
  v50 = sub_1A9CE6978();
  v51 = sub_1A9CE867C();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = swift_slowAlloc();
    v69 = (char *)swift_slowAlloc();
    v72[0] = (uint64_t)v69;
    *(_DWORD *)v52 = 136446466;
    v53 = sub_1A9CE8D48();
    v71 = sub_1A9B91D6C(v53, v54, v72);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2080;
    v66 = v52 + 14;
    v55 = (void *)sub_1A9CE6258();
    v56 = v49;
    v57 = objc_msgSend(v55, sel_hkspDescription);

    v58 = sub_1A9CE82E0();
    v60 = v59;

    v71 = sub_1A9B91D6C(v58, v60, v72);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v61 = (void (*)(char *, uint64_t))v70[1];
    v61(v56, v4);
    _os_log_impl(&dword_1A9B87000, v50, v51, "[%{public}s] scheduling prefetch for %s", (uint8_t *)v52, 0x16u);
    v62 = v69;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v62, -1, -1);
    MEMORY[0x1AF420344](v52, -1, -1);
  }
  else
  {
    v61 = (void (*)(char *, uint64_t))v70[1];
    v61(v49, v4);
  }

  sub_1A9C5F748(v36);
  v61((char *)v36, v4);
}

uint64_t sub_1A9C5F6EC(uint64_t result)
{
  if ((result & 1) != 0)
  {
    sub_1A9C1413C();
    sub_1A9B92B9C(&qword_1EEB482E8, (uint64_t (*)(uint64_t))sub_1A9C1413C, MEMORY[0x1E0C95F40]);
    return sub_1A9CE6E28();
  }
  return result;
}

void sub_1A9C5F748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[6];

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = sub_1A9CE62E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C5FD60();
  v10 = objc_allocWithZone(MEMORY[0x1E0DB0F88]);
  v11 = (void *)sub_1A9CE82B0();
  v12 = objc_msgSend(v10, sel_initWithIdentifier_, v11);

  v13 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer;
  v14 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer) = v12;

  v15 = *(void **)(v2 + v13);
  if (v15)
  {
    v16 = v15;
    v17 = v9;
    v18 = (void *)sub_1A9CE6258();
    sub_1A9C04C74();
    v19 = (void *)sub_1A9CE870C();
    v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = ObjectType;
    aBlock[4] = (uint64_t)sub_1A9C60B88;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9C432C8;
    aBlock[3] = (uint64_t)&block_descriptor_23;
    v22 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v16, sel_scheduleForDate_leewayInterval_queue_handler_, v18, v19, v22, 20.0);
    _Block_release(v22);

    v9 = v17;
  }
  if (qword_1EEB42E60 != -1)
    swift_once();
  v23 = sub_1A9CE6990();
  __swift_project_value_buffer(v23, (uint64_t)qword_1EEB49410);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  v24 = sub_1A9CE6978();
  v25 = sub_1A9CE867C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)v26 = 136446466;
    v27 = sub_1A9CE8D48();
    v38 = sub_1A9B91D6C(v27, v28, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    v36[1] = v26 + 14;
    v29 = (void *)sub_1A9CE6258();
    v30 = v5;
    v31 = objc_msgSend(v29, sel_hkspDescription);

    v32 = sub_1A9CE82E0();
    v34 = v33;

    v38 = sub_1A9B91D6C(v32, v34, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
    _os_log_impl(&dword_1A9B87000, v24, v25, "[%{public}s] prefetch scheduled for %s", (uint8_t *)v26, 0x16u);
    v35 = v37;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v35, -1, -1);
    MEMORY[0x1AF420344](v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

}

uint64_t sub_1A9C5FB1C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t result;
  void *v14;
  uint64_t v15[3];

  v3 = a2 + 16;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEB49410);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15[0] = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1A9CE8D48();
    sub_1A9B91D6C(v9, v10, v15);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] prefetch timer fired", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  objc_msgSend(a1, sel_invalidate);
  swift_beginAccess();
  v11 = (char *)MEMORY[0x1AF4203E0](v3);
  if (v11)
  {
    v12 = *(void **)&v11[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer];
    *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer] = 0;

  }
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v3);
  if (result)
  {
    v14 = (void *)result;
    swift_retain();

    sub_1A9C1413C();
    sub_1A9B92B9C(&qword_1EEB482E8, (uint64_t (*)(uint64_t))sub_1A9C1413C, MEMORY[0x1E0C95F40]);
    sub_1A9CE6E28();
    return swift_release();
  }
  return result;
}

void sub_1A9C5FD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;

  v1 = v0;
  swift_getObjectType();
  v2 = OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_timer);
  if (v3)
  {
    v4 = qword_1EEB42E60;
    v5 = v3;
    if (v4 != -1)
      swift_once();
    v6 = sub_1A9CE6990();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EEB49410);
    v7 = sub_1A9CE6978();
    v8 = sub_1A9CE867C();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = sub_1A9CE8D48();
      sub_1A9B91D6C(v11, v12, &v14);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] cancelling existing prefetch timer", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v10, -1, -1);
      MEMORY[0x1AF420344](v9, -1, -1);
    }

    objc_msgSend(v5, sel_invalidate);
    v13 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;

  }
}

id WeatherPrefetchScheduler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  sub_1A9C5FD60();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherPrefetchScheduler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id WeatherPrefetchScheduler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WeatherPrefetchScheduler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t WeatherPrefetchScheduler.sleepStore(_:sleepScheduleStateDidChange:)(uint64_t a1, uint64_t a2)
{
  return sub_1A9C604C4(a2);
}

uint64_t WeatherPrefetchScheduler.sleepStore(_:sleepEventDidOccur:)(uint64_t a1, void *a2)
{
  return sub_1A9C6078C(a2);
}

uint64_t type metadata accessor for WeatherPrefetchScheduler()
{
  uint64_t result;

  result = qword_1EEB482D8;
  if (!qword_1EEB482D8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1A9C601E8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x1AF420350](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x1AF420350](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s13SleepHealthUI24WeatherPrefetchSchedulerC10sleepStore_0G22ScheduleModelDidChangeySo09HKSPSleepH0C_So0miJ0CtF_0()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  uint64_t aBlock[6];

  v1 = v0;
  ObjectType = swift_getObjectType();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v3 = sub_1A9CE6990();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EEB49410);
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE867C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1A9CE8D48();
    sub_1A9B91D6C(v8, v9, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] schedule model changed, rescheduling prefetch", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);
  }

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v1;
  *(_QWORD *)(v10 + 24) = ObjectType;
  v11 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_1A9C60F08;
  v12[3] = v10;
  v12[4] = ObjectType;
  aBlock[4] = (uint64_t)sub_1A9C60F04;
  aBlock[5] = (uint64_t)v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BB6368;
  aBlock[3] = (uint64_t)&block_descriptor_62;
  v13 = _Block_copy(aBlock);
  v14 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_sleepScheduleModelWithCompletion_, v13);
  _Block_release(v13);
  return swift_release();
}

uint64_t sub_1A9C604C4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t aBlock[6];

  v2 = v1;
  result = swift_getObjectType();
  v5 = result;
  if (a1 == 6 || a1 == 1)
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v6 = sub_1A9CE6990();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EEB49410);
    v7 = sub_1A9CE6978();
    v8 = sub_1A9CE867C();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      aBlock[0] = v21;
      *(_DWORD *)v9 = 136446466;
      v10 = sub_1A9CE8D48();
      sub_1A9B91D6C(v10, v11, aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      v12 = (id)NSStringFromHKSPSleepScheduleState();
      v13 = sub_1A9CE82E0();
      v15 = v14;

      sub_1A9B91D6C(v13, v15, aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] schedule state changed to %s, scheduling next prefetch", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v21, -1, -1);
      MEMORY[0x1AF420344](v9, -1, -1);
    }

    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v2;
    *(_QWORD *)(v16 + 24) = v5;
    v17 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = sub_1A9C60F08;
    v18[3] = v16;
    v18[4] = v5;
    aBlock[4] = (uint64_t)sub_1A9C60F04;
    aBlock[5] = (uint64_t)v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9BB6368;
    aBlock[3] = (uint64_t)&block_descriptor_51;
    v19 = _Block_copy(aBlock);
    v20 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_sleepScheduleModelWithCompletion_, v19);
    _Block_release(v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9C6078C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  uint64_t aBlock[6];

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = objc_msgSend(a1, sel_identifier);
  v6 = sub_1A9CE82E0();
  v8 = v7;
  if (v6 == sub_1A9CE82E0() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      return result;
  }
  if (qword_1EEB42E60 != -1)
    swift_once();
  v13 = sub_1A9CE6990();
  __swift_project_value_buffer(v13, (uint64_t)qword_1EEB49410);
  v14 = sub_1A9CE6978();
  v15 = sub_1A9CE867C();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = sub_1A9CE8D48();
    sub_1A9B91D6C(v18, v19, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] wake detection notification posted, prefetching immediately", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v17, -1, -1);
    MEMORY[0x1AF420344](v16, -1, -1);
  }

  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v2;
  v21 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_sleepStore];
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = sub_1A9C60E88;
  v22[3] = v20;
  v22[4] = ObjectType;
  aBlock[4] = (uint64_t)sub_1A9C60F04;
  aBlock[5] = (uint64_t)v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BB6368;
  aBlock[3] = (uint64_t)&block_descriptor_40;
  v23 = _Block_copy(aBlock);
  v24 = v2;
  swift_retain();
  swift_release();
  objc_msgSend(v21, sel_sleepScheduleModelWithCompletion_, v23);
  _Block_release(v23);
  return swift_release();
}

uint64_t sub_1A9C60A78()
{
  return type metadata accessor for WeatherPrefetchScheduler();
}

void sub_1A9C60A80()
{
  unint64_t v0;

  sub_1A9B92F34(319, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for WeatherPrefetchScheduler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WeatherPrefetchScheduler.__allocating_init(sleepStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1A9C60B40()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C60B64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C60B88(void *a1)
{
  uint64_t v1;

  return sub_1A9C5FB1C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

void sub_1A9C60BA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB482F0)
  {
    sub_1A9B92F34(255, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB482F0);
  }
}

uint64_t sub_1A9C60C20(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C60BA8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A9C60C5C(char a1)
{
  uint64_t v1;

  sub_1A9C5E4D0(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A9C60C64(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A9C5DE54(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1A9C60C70()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1A9C60C9C()
{
  uint64_t v0;

  sub_1A9C5E068(*(void **)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1A9C60CA8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A9C60CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A9C5E7B8(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1A9C60CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1A9CE62E8();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);

  return swift_deallocObject();
}

uint64_t sub_1A9C60DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1A9C60E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_1A9C5EA4C(v0 + v3, *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1A9C60E64()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A9C60E88(uint64_t result)
{
  return sub_1A9C5F6EC(result);
}

uint64_t sub_1A9C60E90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for ScheduleComponentView()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v11 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v12;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v13 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v13;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v4 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v4;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for ScheduleComponentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v6 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v8;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleComponentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 200) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentView()
{
  return &type metadata for ScheduleComponentView;
}

uint64_t sub_1A9C61548()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C61558()
{
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C58();
}

uint64_t sub_1A9C616A0()
{
  sub_1A9CE8C4C();
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C61834()
{
  sub_1A9CE8C4C();
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  Text.ViewModel.hash(into:)();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

void *sub_1A9C619C0@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  _OWORD v13[15];
  _BYTE __src[320];
  _BYTE v15[336];
  _QWORD v16[43];
  char v17;
  _BYTE __dst[344];
  _QWORD v19[2];
  char v20;
  _BYTE v21[327];
  _BYTE v22[351];

  v3 = v1[13];
  v13[12] = v1[12];
  v13[13] = v3;
  v13[14] = v1[14];
  v4 = v1[9];
  v13[8] = v1[8];
  v13[9] = v4;
  v5 = v1[11];
  v13[10] = v1[10];
  v13[11] = v5;
  v6 = v1[5];
  v13[4] = v1[4];
  v13[5] = v6;
  v7 = v1[7];
  v13[6] = v1[6];
  v13[7] = v7;
  v8 = v1[1];
  v13[0] = *v1;
  v13[1] = v8;
  v9 = v1[3];
  v13[2] = v1[2];
  v13[3] = v9;
  v10 = sub_1A9CE738C();
  sub_1A9C61B20((uint64_t)v13, (uint64_t)__src);
  v15[328] = 0;
  memcpy(&v15[7], __src, 0x140uLL);
  v11 = sub_1A9CE7398();
  v16[0] = v10;
  v16[1] = 0x4028000000000000;
  LOBYTE(v16[2]) = 0;
  memcpy((char *)&v16[2] + 1, v15, 0x147uLL);
  memcpy(__dst, v16, sizeof(__dst));
  v17 = 0;
  v19[0] = v10;
  v19[1] = 0x4028000000000000;
  v20 = 0;
  memcpy(v21, v15, sizeof(v21));
  sub_1A9C627A8((uint64_t)v16);
  sub_1A9C628A4((uint64_t)__src);
  sub_1A9C629A0((uint64_t)v19);
  sub_1A9C62A9C((uint64_t)__src);
  memcpy(&v22[7], __dst, 0x158uLL);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  result = memcpy((void *)(a1 + 17), v22, 0x15FuLL);
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  return result;
}

uint64_t sub_1A9C61B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD __src[17];
  _OWORD v43[17];
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t (*v59)@<X0>(uint64_t@<X8>);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  unsigned __int8 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v43[0] = *(_OWORD *)(a1 + 216);
  *(_QWORD *)&v43[1] = *(_QWORD *)(a1 + 232);
  sub_1A9C63FB0(0, &qword_1EEB48300, &qword_1EEB48308, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DD0();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v4 = *(_OWORD *)(a1 + 176);
  v80 = *(_OWORD *)(a1 + 160);
  v81 = v4;
  v82 = *(_OWORD *)(a1 + 192);
  v83 = *(_QWORD *)(a1 + 208);
  v5 = *(_OWORD *)(a1 + 112);
  v76 = *(_OWORD *)(a1 + 96);
  v77 = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v78 = *(_OWORD *)(a1 + 128);
  v79 = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v72 = *(_OWORD *)(a1 + 32);
  v73 = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v74 = *(_OWORD *)(a1 + 64);
  v75 = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v70 = *(_OWORD *)a1;
  v71 = v9;
  if ((v83 & 4) != 0)
  {
    *(_QWORD *)&v45 = v65;
    *((_QWORD *)&v45 + 1) = v66;
    *(_QWORD *)&v46 = v67;
    *((_QWORD *)&v46 + 1) = v68;
    v47 = v69;
    LOBYTE(v48) = 1;
    sub_1A9BAAB64(0, &qword_1EEB48310, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9C62B98();
  }
  else
  {
    sub_1A9BAAB64(0, &qword_1EEB48310, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9C62B98();
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    LOBYTE(v48) = 0;
  }
  sub_1A9CE74E8();
  v26 = *((_QWORD *)&v43[0] + 1);
  v27 = *(_QWORD *)&v43[0];
  v10 = v43[1];
  v11 = v43[2];
  v12 = v43[3];
  v38 = v80;
  v39 = v81;
  v40 = v82;
  v41 = v83;
  v34 = v76;
  v35 = v77;
  v36 = v78;
  v37 = v79;
  v30 = v72;
  v31 = v73;
  v32 = v74;
  v33 = v75;
  v28 = v70;
  v29 = v71;
  v13 = (_OWORD *)swift_allocObject();
  v14 = *(_OWORD *)(a1 + 208);
  v13[13] = *(_OWORD *)(a1 + 192);
  v13[14] = v14;
  v13[15] = *(_OWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 144);
  v13[9] = *(_OWORD *)(a1 + 128);
  v13[10] = v15;
  v16 = *(_OWORD *)(a1 + 176);
  v13[11] = *(_OWORD *)(a1 + 160);
  v13[12] = v16;
  v17 = *(_OWORD *)(a1 + 80);
  v13[5] = *(_OWORD *)(a1 + 64);
  v13[6] = v17;
  v18 = *(_OWORD *)(a1 + 112);
  v13[7] = *(_OWORD *)(a1 + 96);
  v13[8] = v18;
  v19 = *(_OWORD *)(a1 + 16);
  v13[1] = *(_OWORD *)a1;
  v13[2] = v19;
  v20 = *(_OWORD *)(a1 + 48);
  v13[3] = *(_OWORD *)(a1 + 32);
  v13[4] = v20;
  sub_1A9C64010((uint64_t)&v70);
  sub_1A9C62D60(a1);
  v21 = sub_1A9CE7FEC();
  v23 = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = sub_1A9C62CF0;
  *(_QWORD *)(v24 + 24) = v13;
  __src[10] = v38;
  __src[11] = v39;
  __src[12] = v40;
  __src[6] = v34;
  __src[7] = v35;
  __src[8] = v36;
  __src[9] = v37;
  __src[2] = v30;
  __src[3] = v31;
  __src[4] = v32;
  __src[5] = v33;
  __src[0] = v28;
  __src[1] = v29;
  *(_QWORD *)&__src[13] = v41;
  *((_QWORD *)&__src[13] + 1) = sub_1A9C9ED18;
  *(_QWORD *)&__src[14] = 0;
  *((_QWORD *)&__src[14] + 1) = v21;
  *(_QWORD *)&__src[15] = v23;
  *((_QWORD *)&__src[15] + 1) = sub_1A9C62E6C;
  v44 = v12;
  *(_QWORD *)&__src[16] = v24;
  memcpy((char *)v43 + 7, __src, 0x108uLL);
  *(_QWORD *)a2 = v27;
  *(_QWORD *)(a2 + 8) = v26;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 48) = v12;
  memcpy((void *)(a2 + 49), v43, 0x10FuLL);
  v55 = v38;
  v56 = v39;
  v57 = v40;
  v51 = v34;
  v52 = v35;
  v53 = v36;
  v54 = v37;
  v47 = v30;
  v48 = v31;
  v49 = v32;
  v50 = v33;
  v45 = v28;
  v46 = v29;
  v58 = v41;
  v59 = sub_1A9C9ED18;
  v60 = 0;
  v61 = v21;
  v62 = v23;
  v63 = sub_1A9C62E6C;
  v64 = v24;
  sub_1A9C62E74((uint64_t)__src);
  return sub_1A9C62F70((uint64_t)&v45);
}

uint64_t sub_1A9C61F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v62 = a2;
  sub_1A9C63DFC(0);
  v64 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C63DD8(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v61 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v65 = (uint64_t)&v55 - v15;
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v66 = (uint64_t)&v55 - v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v55 - v20;
  sub_1A9B92F34(0, &qword_1EEB48410, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v59 = (uint64_t)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v60 = (uint64_t)&v55 - v29;
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v55 - v33;
  v35 = *(_OWORD *)(a1 + 176);
  v81 = *(_OWORD *)(a1 + 160);
  v82 = v35;
  v83 = *(_OWORD *)(a1 + 192);
  v36 = *(_OWORD *)(a1 + 112);
  v77 = *(_OWORD *)(a1 + 96);
  v78 = v36;
  v37 = *(_OWORD *)(a1 + 144);
  v79 = *(_OWORD *)(a1 + 128);
  v80 = v37;
  v38 = *(_OWORD *)(a1 + 48);
  v73 = *(_OWORD *)(a1 + 32);
  v74 = v38;
  v39 = *(_OWORD *)(a1 + 80);
  v75 = *(_OWORD *)(a1 + 64);
  v76 = v39;
  v40 = *(_OWORD *)(a1 + 16);
  v71 = *(_OWORD *)a1;
  v72 = v40;
  v56 = *(_QWORD *)(a1 + 208);
  v57 = v8;
  v58 = v41;
  v63 = (uint64_t)&v55 - v33;
  if ((v56 & 1) != 0)
  {
    v67 = v79;
    v68 = v80;
    v69 = v81;
    v70 = v82;
    sub_1A9C64010(a1);
    static Text.create(_:)(&v67, (uint64_t)v6);
    v85 = v83;
    v67 = v83;
    sub_1A9C64010(a1);
    sub_1A9BBE1E8((uint64_t)&v85);
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9C640F0(a1);
    sub_1A9BA409C(&qword_1EEB48458, (uint64_t (*)(uint64_t))sub_1A9C63DFC, (uint64_t (*)(void))sub_1A9C641CC, MEMORY[0x1E0CE0798]);
    sub_1A9CE7B78();
    swift_bridgeObjectRelease();
    sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C63DFC);
    sub_1A9C640F0(a1);
    sub_1A9C64350((uint64_t)v21, (uint64_t)v34);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v43 = v34;
    v44 = 0;
  }
  else
  {
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v43 = (char *)&v55 - v33;
    v44 = 1;
  }
  v55 = v42;
  v42((uint64_t)v43, v44, 1, v8);
  v67 = v71;
  v68 = v72;
  v69 = v73;
  v70 = v74;
  sub_1A9C64010(a1);
  static Text.create(_:)(&v67, (uint64_t)v6);
  v84 = v83;
  v67 = v83;
  sub_1A9C64010(a1);
  sub_1A9BBE1E8((uint64_t)&v84);
  sub_1A9CE8340();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9C640F0(a1);
  sub_1A9BA409C(&qword_1EEB48458, (uint64_t (*)(uint64_t))sub_1A9C63DFC, (uint64_t (*)(void))sub_1A9C641CC, MEMORY[0x1E0CE0798]);
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C63DFC);
  sub_1A9C640F0(a1);
  sub_1A9C64350((uint64_t)v21, v66);
  v67 = v75;
  v68 = v76;
  v69 = v77;
  v70 = v78;
  sub_1A9C64010(a1);
  static Text.create(_:)(&v67, (uint64_t)v6);
  v67 = v84;
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C63DFC);
  sub_1A9C640F0(a1);
  sub_1A9C64350((uint64_t)v21, v65);
  if ((v56 & 1) != 0)
  {
    v46 = 1;
    v45 = v58;
  }
  else
  {
    v67 = v79;
    v68 = v80;
    v69 = v81;
    v70 = v82;
    sub_1A9C64010(a1);
    static Text.create(_:)(&v67, (uint64_t)v6);
    v67 = v84;
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9CE7B78();
    swift_bridgeObjectRelease();
    sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C63DFC);
    sub_1A9C640F0(a1);
    v45 = v58;
    sub_1A9C64350((uint64_t)v21, v58);
    v46 = 0;
  }
  v55(v45, v46, 1, v57);
  v47 = v60;
  sub_1A9C64394(v63, v60);
  sub_1A9BA6F90(v66, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  v48 = v65;
  v49 = v61;
  sub_1A9BA6F90(v65, v61, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  v50 = v59;
  sub_1A9C64394(v45, v59);
  v51 = v62;
  sub_1A9C64394(v47, v62);
  sub_1A9C63D40();
  v53 = v52;
  sub_1A9BA6F90((uint64_t)v21, v51 + *(int *)(v52 + 48), (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  sub_1A9BA6F90(v49, v51 + *(int *)(v53 + 64), (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  sub_1A9C64394(v50, v51 + *(int *)(v53 + 80));
  sub_1A9C643F0(v45);
  sub_1A9B97190(v48, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  sub_1A9B97190(v66, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  sub_1A9C643F0(v63);
  sub_1A9C643F0(v50);
  sub_1A9B97190(v49, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9C63DD8);
  return sub_1A9C643F0(v47);
}

uint64_t sub_1A9C62610@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[13];
  uint64_t v12;

  v3 = *(_OWORD *)(v1 + 176);
  v11[10] = *(_OWORD *)(v1 + 160);
  v11[11] = v3;
  v11[12] = *(_OWORD *)(v1 + 192);
  v12 = *(_QWORD *)(v1 + 208);
  v4 = *(_OWORD *)(v1 + 112);
  v11[6] = *(_OWORD *)(v1 + 96);
  v11[7] = v4;
  v5 = *(_OWORD *)(v1 + 144);
  v11[8] = *(_OWORD *)(v1 + 128);
  v11[9] = v5;
  v6 = *(_OWORD *)(v1 + 48);
  v11[2] = *(_OWORD *)(v1 + 32);
  v11[3] = v6;
  v7 = *(_OWORD *)(v1 + 80);
  v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v7;
  v8 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v8;
  *(_QWORD *)a1 = sub_1A9CE7404();
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1A9C63CC0();
  return sub_1A9C61F24((uint64_t)v11, a1 + *(int *)(v9 + 44));
}

uint64_t sub_1A9C6269C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = sub_1A9CE71AC();
  v3 = MEMORY[0x1E0CDA088];
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (_OWORD *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (char *)v7 + *(int *)(v5 + 20);
  v9 = *MEMORY[0x1E0CDB0C0];
  v10 = sub_1A9CE73B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  __asm { FMOV            V0.2D, #2.0 }
  *v7 = _Q0;
  v16 = objc_msgSend((id)objc_opt_self(), sel_systemGray4Color);
  v17 = MEMORY[0x1AF41E85C](v16);
  sub_1A9BA6F90((uint64_t)v7, a1, (uint64_t (*)(_QWORD))v3);
  sub_1A9C63C2C();
  *(_QWORD *)(a1 + *(int *)(v18 + 52)) = v17;
  *(_WORD *)(a1 + *(int *)(v18 + 56)) = 256;
  return sub_1A9B97190((uint64_t)v7, (uint64_t (*)(_QWORD))v3);
}

uint64_t sub_1A9C627A8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C628A4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C629A0(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C62A9C(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A9C62B98()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48318;
  if (!qword_1EEB48318)
  {
    sub_1A9BAAB64(255, &qword_1EEB48310, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9C62C20();
    v3[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48318);
  }
  return result;
}

unint64_t sub_1A9C62C20()
{
  unint64_t result;

  result = qword_1EEB48320;
  if (!qword_1EEB48320)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF3834, &type metadata for ScheduleComponentView.VerticalBar);
    atomic_store(result, (unint64_t *)&qword_1EEB48320);
  }
  return result;
}

uint64_t sub_1A9C62C64()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C62CF0()
{
  sub_1A9C63FB0(0, &qword_1EEB48300, &qword_1EEB48308, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

uint64_t sub_1A9C62D60(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A9C62E48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C62E6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C9ED58(a1, *(uint64_t (**)(double, double))(v1 + 16));
}

uint64_t sub_1A9C62E74(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C62F70(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentView.ScheduleComponentStack()
{
  return &type metadata for ScheduleComponentView.ScheduleComponentStack;
}

ValueMetadata *type metadata accessor for ScheduleComponentView.VerticalBar()
{
  return &type metadata for ScheduleComponentView.VerticalBar;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v11 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v12;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_release();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v6 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t _s13SleepHealthUI26ScheduleComponentViewModelVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A9C635F0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 200) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleComponentViewModel()
{
  return &type metadata for ScheduleComponentViewModel;
}

uint64_t sub_1A9C63674()
{
  return sub_1A9B92B9C(&qword_1EEB48328, (uint64_t (*)(uint64_t))sub_1A9C636A0, MEMORY[0x1E0CDFB10]);
}

void sub_1A9C636A0(uint64_t a1)
{
  sub_1A9BC87AC(a1, &qword_1EEB48330, (uint64_t (*)(uint64_t))sub_1A9C636C4, &qword_1EEB483E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
}

void sub_1A9C636C4(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48338, (uint64_t (*)(uint64_t))sub_1A9C636E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C636E0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB48340)
  {
    sub_1A9BC87AC(255, &qword_1EEB48348, (uint64_t (*)(uint64_t))sub_1A9C63764, &qword_1EEB483D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB48340);
  }
}

void sub_1A9C63764(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48350, (uint64_t (*)(uint64_t))sub_1A9C63780, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C63780()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB48358)
  {
    sub_1A9C637EC();
    sub_1A9C63868();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB48358);
  }
}

void sub_1A9C637EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48360)
  {
    sub_1A9BAAB64(255, &qword_1EEB48310, (uint64_t)&type metadata for ScheduleComponentView.VerticalBar, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1A9CE74F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48360);
  }
}

void sub_1A9C63868()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48368)
  {
    sub_1A9BABD9C(255, &qword_1EEB48370, (void (*)(uint64_t))sub_1A9C638E4);
    sub_1A9C63B08();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48368);
  }
}

void sub_1A9C638E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48378)
  {
    sub_1A9C6395C();
    sub_1A9B92B9C(&qword_1EEB483B0, (uint64_t (*)(uint64_t))sub_1A9C6395C, MEMORY[0x1E0CD9318]);
    v0 = sub_1A9CE74D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48378);
  }
}

void sub_1A9C6395C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48380)
  {
    sub_1A9BABD9C(255, &qword_1EEB48388, (void (*)(uint64_t))sub_1A9C639D4);
    sub_1A9C63A70();
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48380);
  }
}

void sub_1A9C639D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48390)
  {
    sub_1A9C63A2C();
    v0 = sub_1A9CE7644();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48390);
  }
}

unint64_t sub_1A9C63A2C()
{
  unint64_t result;

  result = qword_1EEB48398;
  if (!qword_1EEB48398)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF5A38, &type metadata for SizeReader);
    atomic_store(result, (unint64_t *)&qword_1EEB48398);
  }
  return result;
}

unint64_t sub_1A9C63A70()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB483A0;
  if (!qword_1EEB483A0)
  {
    sub_1A9BABD9C(255, &qword_1EEB48388, (void (*)(uint64_t))sub_1A9C639D4);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB483A8, (uint64_t (*)(uint64_t))sub_1A9C639D4, MEMORY[0x1E0CDCAD0]);
    v4[0] = MEMORY[0x1E0CDF5B0];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB483A0);
  }
  return result;
}

void sub_1A9C63B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB483B8)
  {
    sub_1A9C63A2C();
    sub_1A9BA409C((unint64_t *)&qword_1EEB483C0, (uint64_t (*)(uint64_t))sub_1A9C63B8C, sub_1A9C63BA8, MEMORY[0x1E0DEE998]);
    v0 = sub_1A9CE75FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB483B8);
  }
}

void sub_1A9C63B8C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB483C8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9C63BA8()
{
  return sub_1A9B92B9C(&qword_1EEB483D0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA00]);
}

unint64_t sub_1A9C63BC8()
{
  unint64_t result;

  result = qword_1EEB483E8;
  if (!qword_1EEB483E8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF377C, &type metadata for ScheduleComponentViewModel);
    atomic_store(result, (unint64_t *)&qword_1EEB483E8);
  }
  return result;
}

uint64_t sub_1A9C63C0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C63C1C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C63C2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB483F0)
  {
    sub_1A9CE71AC();
    sub_1A9B92B9C(&qword_1EEB44698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1A9CE6F54();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB483F0);
  }
}

void sub_1A9C63CC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB483F8)
  {
    sub_1A9C63D24(255);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB483F8);
  }
}

void sub_1A9C63D24(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48400, (uint64_t (*)(uint64_t))sub_1A9C63D40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C63D40()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EEB48408)
  {
    sub_1A9B92F34(255, &qword_1EEB48410, (uint64_t (*)(uint64_t))sub_1A9C63DD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1A9C63DD8(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EEB48408);
  }
}

void sub_1A9C63DD8(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB48418, (uint64_t (*)(uint64_t))sub_1A9C63DFC, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1A9C63DFC(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48420, (uint64_t (*)(uint64_t))sub_1A9C63E18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C63E18(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB48428, (uint64_t (*)(uint64_t))sub_1A9C63E3C, (uint64_t (*)(uint64_t))sub_1A9C63E98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
}

void sub_1A9C63E3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48430)
  {
    sub_1A9C63E98();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48430);
  }
}

void sub_1A9C63E98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48438)
  {
    sub_1A9C63F1C(255);
    sub_1A9C63FB0(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48438);
  }
}

void sub_1A9C63F1C(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB48440, (uint64_t (*)(uint64_t))sub_1A9C63F40, (uint64_t (*)(uint64_t))sub_1A9BAB80C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1A9C63F40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48448)
  {
    sub_1A9BAAB64(255, &qword_1EEB48450, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v0 = sub_1A9CE7CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48448);
  }
}

void sub_1A9C63FB0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1A9BBA658(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1A9C64010(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C640F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A9C641CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48460;
  if (!qword_1EEB48460)
  {
    sub_1A9C63E18(255);
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB48468, (uint64_t (*)(uint64_t))sub_1A9C63E3C, sub_1A9C64254, (uint64_t (*)(void))sub_1A9C3AD8C);
    v3[1] = sub_1A9C64254();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48460);
  }
  return result;
}

uint64_t sub_1A9C64254()
{
  return sub_1A9BC2784(&qword_1EEB48470, (uint64_t (*)(uint64_t))sub_1A9C63E98, sub_1A9C64278, (uint64_t (*)(void))sub_1A9BC2934);
}

uint64_t sub_1A9C64278()
{
  return sub_1A9BC2784(&qword_1EEB48478, (uint64_t (*)(uint64_t))sub_1A9C63F1C, sub_1A9C6429C, sub_1A9C64334);
}

uint64_t sub_1A9C6429C()
{
  return sub_1A9BA409C(&qword_1EEB48480, (uint64_t (*)(uint64_t))sub_1A9C63F40, (uint64_t (*)(void))sub_1A9C642C0, MEMORY[0x1E0CDF690]);
}

unint64_t sub_1A9C642C0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEB48488;
  if (!qword_1EEB48488)
  {
    sub_1A9BAAB64(255, &qword_1EEB48450, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2[0] = MEMORY[0x1E0CDDD58];
    v2[1] = MEMORY[0x1E0CDDD58];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEB48488);
  }
  return result;
}

uint64_t sub_1A9C64334()
{
  return sub_1A9B92B9C(&qword_1EEB43D50, (uint64_t (*)(uint64_t))sub_1A9BAB80C, MEMORY[0x1E0CDCF80]);
}

uint64_t sub_1A9C64350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C63DD8(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C64394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, &qword_1EEB48410, (uint64_t (*)(uint64_t))sub_1A9C63DD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C643F0(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, &qword_1EEB48410, (uint64_t (*)(uint64_t))sub_1A9C63DD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_1A9C64444(uint64_t a1, uint64_t a2)
{
  char v2;
  unsigned __int16 v3;
  char v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  unsigned __int16 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;

  v2 = *(_BYTE *)(a1 + 40);
  v50 = *(_WORD *)(a1 + 64);
  v48 = *(_QWORD *)(a1 + 80);
  v49 = *(_QWORD *)(a1 + 72);
  v47 = *(_QWORD *)(a1 + 88);
  v46 = *(_QWORD *)(a1 + 96);
  v45 = *(_BYTE *)(a1 + 104);
  v43 = *(_QWORD *)(a1 + 120);
  v44 = *(_QWORD *)(a1 + 112);
  v30 = *(_WORD *)(a1 + 128);
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 136);
  v27 = *(_QWORD *)(a1 + 152);
  v42 = *(_QWORD *)(a1 + 160);
  v41 = *(_BYTE *)(a1 + 168);
  v33 = *(_QWORD *)(a1 + 184);
  v34 = *(_QWORD *)(a1 + 176);
  v24 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 208);
  v3 = *(_WORD *)a2;
  v4 = *(_BYTE *)(a2 + 40);
  v40 = *(_WORD *)(a2 + 64);
  v38 = *(_QWORD *)(a2 + 80);
  v39 = *(_QWORD *)(a2 + 72);
  v36 = *(_QWORD *)(a2 + 96);
  v37 = *(_QWORD *)(a2 + 88);
  v35 = *(_BYTE *)(a2 + 104);
  v56 = *(_WORD *)a1;
  v59 = v2;
  v31 = *(_QWORD *)(a2 + 120);
  v32 = *(_QWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a1 + 24);
  v57 = *(_OWORD *)(a1 + 8);
  v58 = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v26 = *(_WORD *)(a2 + 128);
  v51 = v3;
  v54 = v4;
  v8 = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  v60 = v6;
  v9 = *(_OWORD *)(a2 + 24);
  v52 = *(_OWORD *)(a2 + 8);
  v53 = v9;
  v10 = *(_QWORD *)(a2 + 152);
  v11 = *(_QWORD *)(a2 + 160);
  v12 = *(_BYTE *)(a2 + 168);
  v14 = *(_QWORD *)(a2 + 176);
  v13 = *(_QWORD *)(a2 + 184);
  v15 = *(_QWORD *)(a2 + 192);
  v16 = *(_QWORD *)(a2 + 200);
  v17 = *(_QWORD *)(a2 + 208);
  v55 = *(_OWORD *)(a2 + 48);
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51))
    return 0;
  *(_QWORD *)&v20 = v10;
  *((_QWORD *)&v20 + 1) = v11;
  *(_QWORD *)&v21 = v14;
  *((_QWORD *)&v21 + 1) = v13;
  *(_QWORD *)&v22 = v8;
  *((_QWORD *)&v22 + 1) = v7;
  v56 = v50;
  *(_QWORD *)&v57 = v49;
  *((_QWORD *)&v57 + 1) = v48;
  *(_QWORD *)&v58 = v47;
  *((_QWORD *)&v58 + 1) = v46;
  v59 = v45;
  *(_QWORD *)&v60 = v44;
  *((_QWORD *)&v60 + 1) = v43;
  v51 = v40;
  *(_QWORD *)&v52 = v39;
  *((_QWORD *)&v52 + 1) = v38;
  *(_QWORD *)&v53 = v37;
  *((_QWORD *)&v53 + 1) = v36;
  v54 = v35;
  *(_QWORD *)&v55 = v32;
  *((_QWORD *)&v55 + 1) = v31;
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51))
    return 0;
  v56 = v30;
  *(_QWORD *)&v57 = v29;
  *((_QWORD *)&v57 + 1) = v28;
  *(_QWORD *)&v58 = v27;
  *((_QWORD *)&v58 + 1) = v42;
  v59 = v41;
  *(_QWORD *)&v60 = v34;
  *((_QWORD *)&v60 + 1) = v33;
  v51 = v26;
  v52 = v22;
  v53 = v20;
  v54 = v12;
  v55 = v21;
  if (!_s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(&v56, &v51))
    return 0;
  if (v25 == v15 && v24 == v16)
    return v23 == v17;
  v18 = sub_1A9CE8BB0();
  result = 0;
  if ((v18 & 1) != 0)
    return v23 == v17;
  return result;
}

uint64_t sub_1A9C646F4()
{
  return sub_1A9B92B9C(&qword_1EEB48490, (uint64_t (*)(uint64_t))sub_1A9C63C2C, MEMORY[0x1E0CD8668]);
}

uint64_t sub_1A9C64720()
{
  return sub_1A9B92B9C(&qword_1EEB48498, (uint64_t (*)(uint64_t))sub_1A9C6474C, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9C6474C(uint64_t a1)
{
  sub_1A9BC87AC(a1, &qword_1EEB484A0, (uint64_t (*)(uint64_t))sub_1A9C63D24, &qword_1EEB484A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFCA0]);
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingSmallCapsAttributes()()
{
  Class isa;
  Class v1;

  isa = UIFontDescriptor.addingLowercaseSmallCapsAttributes()().super.isa;
  v1 = UIFontDescriptor.addingUppercaseSmallCapsAttributes()().super.isa;

  return (UIFontDescriptor)v1;
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingLowercaseSmallCapsAttributes()()
{
  return (UIFontDescriptor)sub_1A9C647B0(37);
}

UIFontDescriptor __swiftcall UIFontDescriptor.addingUppercaseSmallCapsAttributes()()
{
  return (UIFontDescriptor)sub_1A9C647B0(38);
}

id sub_1A9C647B0(uint64_t a1)
{
  void *v1;
  uint64_t inited;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;

  sub_1A9C649F0(0, &qword_1EEB47F58, (unint64_t *)&qword_1EEB47F60, type metadata accessor for AttributeName);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB520;
  v4 = (void *)*MEMORY[0x1E0DC1380];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1380];
  sub_1A9C64998(0, &qword_1EEB484B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A9CEB520;
  sub_1A9C649F0(0, &qword_1EEB484B8, &qword_1EEB484C0, type metadata accessor for FeatureKey);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A9CEB530;
  v7 = (void *)*MEMORY[0x1E0DC4A60];
  *(_QWORD *)(v6 + 32) = *MEMORY[0x1E0DC4A60];
  *(_QWORD *)(v6 + 40) = a1;
  v8 = (void *)*MEMORY[0x1E0DC4A50];
  *(_QWORD *)(v6 + 48) = *MEMORY[0x1E0DC4A50];
  *(_QWORD *)(v6 + 56) = 1;
  v9 = v4;
  v10 = v7;
  v11 = v8;
  *(_QWORD *)(v5 + 32) = sub_1A9BAC408(v6);
  sub_1A9C64998(0, &qword_1EEB47F68, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 40) = v5;
  sub_1A9BAC500(inited);
  type metadata accessor for AttributeName(0);
  sub_1A9B92B9C((unint64_t *)&unk_1EEB47F80, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEC2A0);
  v13 = (void *)sub_1A9CE8208();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v1, sel_fontDescriptorByAddingAttributes_, v13);

  return v14;
}

void sub_1A9C64998(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9C55160();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1A9C649F0(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9C64A48(255, a3, a4);
    v5 = sub_1A9CE8B80();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1A9C64A48(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

id RelativeWeekdayFormatter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id sub_1A9C64ACC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RelativeWeekdayFormatter()), sel_init);
  qword_1EEB484C8 = (uint64_t)result;
  return result;
}

id static RelativeWeekdayFormatter.shared.getter()
{
  if (qword_1EEB42D58 != -1)
    swift_once();
  return (id)qword_1EEB484C8;
}

uint64_t sub_1A9C64B38(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  id v38;
  void *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, uint64_t);
  id v45;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  _BOOL8 v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;

  v2 = v1;
  v4 = sub_1A9CE6360();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v56 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1A9CE6444();
  v7 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v8);
  v61 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED262DF0, v10);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v59 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v53 - v16;
  v18 = sub_1A9C650D0();
  v19 = (void *)sub_1A9CE6258();
  v20 = objc_msgSend(v18, sel_stringFromDate_, v19);

  v21 = sub_1A9CE82E0();
  v23 = v22;

  v24 = sub_1A9C65168();
  v25 = (void *)sub_1A9CE6258();
  v26 = objc_msgSend(v24, sel_stringFromDate_, v25);

  v27 = sub_1A9CE82E0();
  v29 = v28;

  v30 = v21;
  if (v21 == v27 && v23 == v29)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v32 = sub_1A9C65238();
    v33 = (void *)sub_1A9CE6258();
    v34 = objc_msgSend(v32, sel_stringFromDate_, v33);

    v35 = sub_1A9CE82E0();
    return v35;
  }
  v31 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
    goto LABEL_5;
  v37 = a1;
  v38 = objc_msgSend(v2, sel_calendar);
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v17, 1, 1, v60);
    goto LABEL_18;
  }
  v39 = v38;
  v55 = v30;
  v40 = v61;
  sub_1A9CE63D8();

  v41 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  a1 = v60;
  v41(v17, v40, v60);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v54(v17, 0, 1, a1);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v42(v17, 1, a1) == 1)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    result = v54(v59, 1, 1, a1);
    goto LABEL_20;
  }
  v43 = sub_1A9CE639C();
  v44 = *(void (**)(char *, uint64_t))(v7 + 8);
  v44(v17, a1);
  if ((v43 & 1) == 0)
    return v55;
  v45 = objc_msgSend(v2, sel_calendar);
  if (!v45)
    goto LABEL_19;
  v46 = v45;
  v47 = v61;
  sub_1A9CE63D8();

  v48 = v59;
  v41(v59, v47, a1);
  v54(v48, 0, 1, a1);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v48, 1, a1);
  if ((_DWORD)result != 1)
  {
    v49 = v56;
    sub_1A9CE6348();
    v50 = Calendar.dayPeriod(for:in:)(v37);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v49, v58);
    v44(v48, a1);
    BSDayPeriod.simplified.getter(v50, &v62);
    v51 = v55;
    if (v62 == 2)
    {
      swift_bridgeObjectRelease();
      if (qword_1ED2626A8 != -1)
        swift_once();
      v52 = (id)qword_1ED264F90;
      v51 = sub_1A9CE6168();

      swift_bridgeObjectRelease();
    }
    return v51;
  }
LABEL_20:
  __break(1u);
  return result;
}

id sub_1A9C650D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter);
  }
  else
  {
    v4 = (void *)sub_1A9C652C4();
    objc_msgSend(v4, sel_setDateStyle_, 1);
    objc_msgSend(v4, sel_setFormattingContext_, 2);
    objc_msgSend(v4, sel_setDoesRelativeDateFormatting_, 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1A9C65168()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v8;

  v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter);
  }
  else
  {
    v4 = sub_1A9C650D0();
    objc_msgSend(v4, sel_copy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9C65848();
    swift_dynamicCast();
    objc_msgSend(v8, sel_setDoesRelativeDateFormatting_, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1A9C65238()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter);
  }
  else
  {
    v4 = (void *)sub_1A9C652C4();
    v5 = (void *)sub_1A9CE82B0();
    objc_msgSend(v4, sel_setLocalizedDateFormatFromTemplate_, v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_1A9C652C4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v1 = v0;
  sub_1A9BB7054(0, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v36 - v4;
  v6 = sub_1A9CE6444();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED262DF0, v11);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v36 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v36 - v22;
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v25 = objc_msgSend(v1, sel_calendar);
  if (v25)
  {
    v26 = v25;
    sub_1A9CE63D8();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v10, v6);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v27(v23, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v23, 1, v6) == 1)
    {
      v28 = 0;
    }
    else
    {
      v28 = (void *)sub_1A9CE63CC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    }
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v27(v23, 1, 1, v6);
    v28 = 0;
  }
  objc_msgSend(v24, sel_setCalendar_, v28);

  v29 = objc_msgSend(v1, sel_calendar);
  if (v29)
  {
    v30 = v29;
    sub_1A9CE63D8();

    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  v27(v16, v31, 1, v6);
  sub_1A9C0F218((uint64_t)v16, (uint64_t)v20);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A9CE6408();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    v33 = sub_1A9CE6360();
    v34 = *(_QWORD *)(v33 - 8);
    v35 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v5, 1, v33) != 1)
    {
      v35 = (void *)sub_1A9CE6330();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v33);
    }
    objc_msgSend(v24, sel_setLocale_, v35);

    return (uint64_t)v24;
  }
  return result;
}

id RelativeWeekdayFormatter.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelativeWeekdayFormatter();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for RelativeWeekdayFormatter()
{
  return objc_opt_self();
}

id RelativeWeekdayFormatter.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id RelativeWeekdayFormatter.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___relativeDateFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___nonRelativeDateFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI24RelativeWeekdayFormatter____lazy_storage___weekdayFormatter] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RelativeWeekdayFormatter();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id RelativeWeekdayFormatter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelativeWeekdayFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for RelativeWeekdayFormatter()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_1A9C65848()
{
  unint64_t result;

  result = qword_1EEB484E8;
  if (!qword_1EEB484E8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB484E8);
  }
  return result;
}

uint64_t SleepDayModel.__allocating_init(segmentModels:sleepMetrics:)(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SleepDayModel.init(segmentModels:sleepMetrics:)(a1, a2);
  return v4;
}

uint64_t SleepDayModel.SegmentModel.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A9CE6318();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

double SleepDayModel.SegmentModel.relativeInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24));
}

uint64_t SleepDayModel.SegmentModel.init(relativeInterval:absoluteInterval:preceedingGapDuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  int *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  sub_1A9CE630C();
  v10 = (int *)type metadata accessor for SleepDayModel.SegmentModel(0);
  v11 = (double *)(a2 + v10[6]);
  *v11 = a3;
  v11[1] = a4;
  v12 = a2 + v10[5];
  v13 = sub_1A9CE5F64();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a1, v13);
  *(double *)(a2 + v10[7]) = a5;
  return result;
}

double SleepDayModel.SegmentModel.preceedingGapDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 28));
}

double SleepDayModel.SegmentModel.start.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24));
}

double SleepDayModel.SegmentModel.end.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 24) + 8);
}

uint64_t SleepDayModel.SegmentModel.startDate.getter()
{
  return sub_1A9C65A3C(MEMORY[0x1E0CAE5A0]);
}

uint64_t SleepDayModel.SegmentModel.endDate.getter()
{
  return sub_1A9C65A3C(MEMORY[0x1E0CAE580]);
}

uint64_t sub_1A9C65A3C(uint64_t (*a1)(void))
{
  type metadata accessor for SleepDayModel.SegmentModel(0);
  return a1();
}

double SleepDayModel.SegmentModel.duration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for SleepDayModel.SegmentModel(0);
  return *(double *)(v0 + *(int *)(v1 + 24) + 8) - *(double *)(v0 + *(int *)(v1 + 24));
}

uint64_t sub_1A9C65AA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A9CE6318();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

BOOL sub_1A9C65ADC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) != 0;
}

uint64_t SleepDayModel.segmentModels.getter()
{
  return swift_bridgeObjectRetain();
}

void *SleepDayModel.sleepMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

uint64_t sub_1A9C65B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_1A9C664E4(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C664F8(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA6F90(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  v14 = *a2;
  sub_1A9BA0D6C((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  v15 = v14 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1A9C6650C((uint64_t)v7, v15);
  return swift_endAccess();
}

uint64_t sub_1A9C65C40@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  sub_1A9C664E4(0);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v17[-v9];
  v11 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1A9BA6F90(v11, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_1A9C664E4);
  sub_1A9C664F8(0);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v12) != 1)
    return sub_1A9BA0D6C((uint64_t)v10, a1, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  sub_1A9B97190((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1A9C664E4);
  v15 = swift_bridgeObjectRetain();
  sub_1A9BA05A8(v15, a1);
  swift_bridgeObjectRelease();
  sub_1A9BA6F90(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v7, 0, 1, v13);
  swift_beginAccess();
  sub_1A9C6650C((uint64_t)v7, v11);
  return swift_endAccess();
}

uint64_t sub_1A9C65DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_1A9C664E4(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA0D6C(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  sub_1A9C664F8(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  v8 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  swift_beginAccess();
  sub_1A9C6650C((uint64_t)v6, v8);
  return swift_endAccess();
}

void (*sub_1A9C65E94(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  sub_1A9C664E4(0);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  sub_1A9C664F8(0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  sub_1A9C65C40((unint64_t)v8);
  return sub_1A9C65F2C;
}

void sub_1A9C65F2C(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v6 = v2[9];
    v8 = v2[6];
    v7 = (void *)v2[7];
    sub_1A9BA6F90(v2[11], v2[10], (uint64_t (*)(_QWORD))sub_1A9C664F8);
    sub_1A9BA0D6C((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C664F8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    v9 = v8 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
    swift_beginAccess();
    sub_1A9C6650C((uint64_t)v7, v9);
    swift_endAccess();
    sub_1A9B97190((uint64_t)v3, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  }
  else
  {
    v10 = v2[8];
    v11 = v2[9];
    v12 = v2[6];
    v7 = (void *)v2[7];
    sub_1A9BA0D6C(v2[11], (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C664F8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    v13 = v12 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
    swift_beginAccess();
    sub_1A9C6650C((uint64_t)v7, v13);
    swift_endAccess();
  }
  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

double sub_1A9C66080()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  double v3;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration + 8) & 1) == 0)
    return *(double *)v1;
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1A9BA0B30(v2);
  swift_bridgeObjectRelease();
  *(double *)v1 = v3;
  v1[8] = 0;
  return v3;
}

void sub_1A9C660EC(double a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(double *)v2 = a1;
  *(_BYTE *)(v2 + 8) = 0;
}

_QWORD *(*sub_1A9C66104(uint64_t a1))(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = sub_1A9C66080();
  return sub_1A9C66138;
}

_QWORD *sub_1A9C66138(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1] + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(_QWORD *)v1 = *result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

_QWORD *SleepDayModel.init(segmentModels:sleepMetrics:)(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v3 = v2;
  sub_1A9BB5404();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE8778();
  v30 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B929B4();
  v15 = v14;
  v31 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (id)HKSPCurrentDateProvider();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v3[2] = sub_1A9BE4A30;
  v3[3] = v20;
  v21 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval;
  sub_1A9C664F8(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = (char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel_significantTimeChangeObserver) = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter) = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithYearFormatter) = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter) = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter) = 0;
  v3[4] = a1;
  v3[5] = a2;
  v24 = (void *)objc_opt_self();
  v29 = a2;
  v25 = objc_msgSend(v24, sel_defaultCenter);
  sub_1A9CE8784();

  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v32 = (id)sub_1A9CE870C();
  v26 = sub_1A9CE8700();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  sub_1A9C66550((unint64_t *)&qword_1ED2625B0, (unint64_t *)&qword_1ED2625C0, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  sub_1A9CE6EAC();
  sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9BB5404);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
  swift_allocObject();
  swift_weakInit();
  sub_1A9B92B9C((unint64_t *)&unk_1ED262560, (uint64_t (*)(uint64_t))sub_1A9B929B4, MEMORY[0x1E0C95CB8]);
  v27 = sub_1A9CE6EC4();

  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v15);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel_significantTimeChangeObserver) = v27;
  swift_release();
  return v3;
}

uint64_t type metadata accessor for SleepDayModel.SegmentModel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1ED262F00);
}

void sub_1A9C664E4(uint64_t a1)
{
  sub_1A9BB7054(a1, &qword_1ED2625C8, sub_1A9C664F8);
}

void sub_1A9C664F8(uint64_t a1)
{
  sub_1A9BB7054(a1, &qword_1ED263400, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
}

uint64_t sub_1A9C6650C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C664E4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C66550(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1A9B94A18(255, a2);
    result = MEMORY[0x1AF420284](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9C66590()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A9C665B4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C665D8()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1A9C66634();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9C6662C()
{
  return sub_1A9C665D8();
}

uint64_t sub_1A9C66634()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (qword_1ED262DB8 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED2630B8);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1A9CE8D48();
    sub_1A9B91D6C(v5, v6, &v8);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] significant time changed", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  ResetLocaleDependentFormatters();
  type metadata accessor for SleepDayModel(0);
  sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
  sub_1A9CE6D98();
  sub_1A9CE6E10();
  return swift_release();
}

id sub_1A9C667F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v22;

  v1 = v0;
  v2 = sub_1A9CE6360();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter;
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter);
  if (v8)
  {
    v9 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___timeFormatter);
  }
  else
  {
    sub_1A9CE6348();
    v10 = HKSPIsRemoveSpacesForTimeFormatEnabled();
    v11 = (void *)objc_opt_self();
    v12 = (void *)sub_1A9CE82B0();
    v13 = (void *)sub_1A9CE6330();
    v14 = objc_msgSend(v11, sel_dateFormatFromTemplate_options_locale_, v12, 0, v13);

    if (v14)
    {
      v15 = sub_1A9CE82E0();
      v17 = v16;

    }
    else
    {
      v17 = 0xE500000000000000;
      v15 = 0x616D6D3A68;
    }
    v18 = sub_1A9CAE664(v15, v17, (uint64_t)v6, v10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v19 = *(void **)(v1 + v7);
    *(_QWORD *)(v1 + v7) = v18;
    v9 = v18;

    v8 = 0;
  }
  v20 = v8;
  return v9;
}

id sub_1A9C6696C()
{
  return sub_1A9C66994(&OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithYearFormatter, (SEL *)&selRef_hk_dayIntervalFormatter);
}

id sub_1A9C66980()
{
  return sub_1A9C66994(&OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter, (SEL *)&selRef_hk_mediumMonthDayDateIntervalFormatter);
}

id sub_1A9C66994(uint64_t *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id result;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
LABEL_5:
    v8 = v4;
    return v5;
  }
  result = objc_msgSend((id)objc_opt_self(), *a2);
  if (result)
  {
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = result;
    v5 = result;

    v4 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1A9C66A10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___durationFormatter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
    objc_msgSend(v4, sel_setAllowedUnits_, 96);
    objc_msgSend(v4, sel_setUnitsStyle_, 5);
    objc_msgSend(v4, sel_setFormattingContext_, 2);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1A9C66ABC()
{
  return sub_1A9C66AE0((void (*)(void))MEMORY[0x1E0CAE5A0]);
}

void sub_1A9C66AC8()
{
  sub_1A9C66CA8((void (*)(void))sub_1A9C66ABC);
}

uint64_t sub_1A9C66AD4()
{
  return sub_1A9C66AE0((void (*)(void))MEMORY[0x1E0CAE580]);
}

uint64_t sub_1A9C66AE0(void (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v21;

  v2 = sub_1A9CE62E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C664F8(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE5F64();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C65C40((unint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1A9B97190((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1A9C664F8);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
    v17 = sub_1A9C667F8();
    a1();
    v18 = (void *)sub_1A9CE6258();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v19 = objc_msgSend(v17, sel_stringFromDate_, v18);

    v16 = sub_1A9CE82E0();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v16;
}

void sub_1A9C66C9C()
{
  sub_1A9C66CA8((void (*)(void))sub_1A9C66AD4);
}

void sub_1A9C66CA8(void (*a1)(void))
{
  id v1;

  a1();
  v1 = sub_1A9C667F8();
  sub_1A9CE8364();
  swift_bridgeObjectRelease();

}

id sub_1A9C66D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id result;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;

  sub_1A9C664F8(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A9CE5F64();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C65C40((unint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    v9 = 2957357;
    sub_1A9B97190((uint64_t)v3, (uint64_t (*)(_QWORD))sub_1A9C664F8);
    return (id)v9;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
  result = objc_msgSend((id)objc_opt_self(), sel_hk_hourMinuteOnlyDateIntervalFormatter);
  if (result)
  {
    v11 = result;
    v12 = (void *)sub_1A9CE5EEC();
    v13 = objc_msgSend(v11, sel_stringFromDateInterval_, v12);

    if (v13)
    {
      v9 = sub_1A9CE82E0();

    }
    else
    {
      v9 = 2957357;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return (id)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C66EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;

  v1 = sub_1A9CE642C();
  v54 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v53 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A9CE62E8();
  v52 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v45 - v10;
  v12 = sub_1A9CE6444();
  v50 = *(_QWORD *)(v12 - 8);
  v51 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C664F8(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A9CE5F64();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C65C40((unint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    v48 = v1;
    v49 = v20;
    v46 = v21;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
    v26 = v0;
    v27 = sub_1A9C66980();
    v28 = (void *)sub_1A9CE5EEC();
    v29 = objc_msgSend(v27, sel_stringFromDateInterval_, v28);

    v47 = v4;
    if (v29)
    {
      v45 = sub_1A9CE82E0();
      v31 = v30;

    }
    else
    {
      v45 = 0;
      v31 = 0;
    }
    sub_1A9CE6420();
    sub_1A9CE5F34();
    v32 = *(void (**)(uint64_t))(v26 + 16);
    v33 = swift_retain();
    v32(v33);
    swift_release();
    v35 = v53;
    v34 = v54;
    v36 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x1E0CB1158], v48);
    v37 = sub_1A9CE6414();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
    v38 = *(void (**)(char *, uint64_t))(v52 + 8);
    v39 = v47;
    v38(v8, v47);
    v38(v11, v39);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
    if (v37)
    {
      swift_bridgeObjectRelease();
      v40 = sub_1A9C6696C();
      v41 = (void *)sub_1A9CE5EEC();
      v42 = objc_msgSend(v40, sel_stringFromDateInterval_, v41);

      v43 = v46;
      if (v42)
      {
        v25 = sub_1A9CE82E0();

LABEL_10:
        (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v49);
        return v25;
      }
    }
    else
    {
      v25 = v45;
      v43 = v46;
      if (v31)
        goto LABEL_10;
    }
    v25 = 2957357;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v49);
    swift_bridgeObjectRelease();
    return v25;
  }
  v25 = 2957357;
  sub_1A9B97190((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1A9C664F8);
  return v25;
}

void sub_1A9C67244()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  double v4;
  double v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = objc_msgSend(v1, sel_averageSleepDuration);
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, sel__value);
      v5 = v4;

      if (v5 > 0.0)
      {
        v6 = sub_1A9C66A10();
        v7 = objc_msgSend(v6, sel_stringFromTimeInterval_, v5);

        if (v7)
        {
          sub_1A9CE82E0();

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_1A9C67308()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  double v4;
  double v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 40);
  if (!v1)
    goto LABEL_6;
  v2 = objc_msgSend(v1, sel_averageSleepDuration);
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  objc_msgSend(v2, sel__value);
  v5 = v4;

  if (v5 <= 0.0)
    goto LABEL_6;
  v6 = sub_1A9C66A10();
  v7 = objc_msgSend(v6, sel_stringFromTimeInterval_, v5);

  if (v7)
  {
    sub_1A9CE82E0();

LABEL_6:
    sub_1A9CE8358();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t SleepDayModel.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  sub_1A9B97190(v0 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepInterval, (uint64_t (*)(_QWORD))sub_1A9C664E4);
  swift_release();

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___dateRangeWithoutYearFormatter));

  return v0;
}

uint64_t SleepDayModel.__deallocating_deinit()
{
  SleepDayModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C67494@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SleepDayModel(0);
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t HKSleepDaySummary.sleepDayModel.getter()
{
  void *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = sub_1A9C675D8();
  v2 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CEF8A0;
  *(_QWORD *)(v3 + 32) = v0;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED262B50);
  v4 = v0;
  v5 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v2, sel_sleepMetricsForDaySummaries_, v5);

  type metadata accessor for SleepDayModel(0);
  v7 = swift_allocObject();
  SleepDayModel.init(segmentModels:sleepMetrics:)(v1, v6);
  return v7;
}

unint64_t sub_1A9C675D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  unint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  unint64_t v48;
  id v49;
  BOOL v50;
  unint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  char *v67;
  char *v68;
  double v69;
  double v70;
  void (*v71)(char *, uint64_t);
  double v72;
  double v73;
  id v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  double v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  id v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  double v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  void (*v117)(uint64_t, char *, uint64_t);
  char *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v139 = type metadata accessor for SleepDayModel.SegmentModel(0);
  v131 = *(_QWORD *)(v139 - 8);
  v2 = MEMORY[0x1E0C80A78](v139, v1);
  v130 = (uint64_t)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v129 = (char *)&v111 - v6;
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v121 = (uint64_t)&v111 - v9;
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v120 = (uint64_t)&v111 - v12;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v111 - v14;
  v126 = sub_1A9CE62E8();
  v125 = *(_QWORD *)(v126 - 8);
  v17 = MEMORY[0x1E0C80A78](v126, v16);
  v135 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v19);
  v134 = (char *)&v111 - v20;
  sub_1A9C664F8(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1A9CE5F64();
  v26 = *(_QWORD **)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v118 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v133 = (char *)&v111 - v32;
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v111 - v34;
  sub_1A9C68130((uint64_t)v24);
  v36 = (unsigned int (*)(char *, uint64_t, uint64_t))v26[6];
  v141 = v25;
  if (v36(v24, 1, v25) == 1)
  {
    sub_1A9B97190((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9C664F8);
    return MEMORY[0x1E0DEE9D8];
  }
  v136 = v15;
  v38 = (void (*)(uint64_t, char *, uint64_t))v26[4];
  v128 = v35;
  v117 = v38;
  v38((uint64_t)v35, v24, v141);
  v39 = sub_1A9C69570();
  v40 = objc_msgSend(v0, sel_periods);
  sub_1A9B94A18(0, &qword_1ED263340);
  v41 = sub_1A9CE83DC();

  v42 = v41;
  v115 = v41;
  if (v41 >> 62)
    goto LABEL_57;
  v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v44 = v128;
  if (v43)
  {
    v45 = 0;
    v114 = v42 & 0xC000000000000001;
    v112 = v42 & 0xFFFFFFFFFFFFFF8;
    v111 = v42 + 32;
    v46 = v39 + 56;
    v37 = MEMORY[0x1E0DEE9D8];
    v47 = &selRef_animateWithDuration_animations_;
    v113 = v43;
    v124 = v26;
    v123 = v39;
    v122 = v39 + 56;
    while (1)
    {
      if (v114)
      {
        v48 = v45;
        v49 = (id)MEMORY[0x1AF41F600](v45, v42);
      }
      else
      {
        if (v45 >= *(_QWORD *)(v112 + 16))
          goto LABEL_56;
        v48 = v45;
        v49 = *(id *)(v111 + 8 * v45);
      }
      v119 = v49;
      v50 = __OFADD__(v48, 1);
      v51 = v48 + 1;
      if (v50)
        goto LABEL_55;
      v116 = v51;
      v52 = objc_msgSend(v119, sel_segments);
      sub_1A9B94A18(0, &qword_1ED263348);
      v53 = sub_1A9CE83DC();

      if (v53 >> 62)
        break;
      v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v54)
        goto LABEL_15;
LABEL_7:

      swift_bridgeObjectRelease();
      v45 = v116;
      v44 = v128;
      v42 = v115;
      if (v116 == v113)
        goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    v54 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!v54)
      goto LABEL_7;
LABEL_15:
    v55 = 0;
    v144 = v53 & 0xC000000000000001;
    v137 = v53 + 32;
    v138 = v53 & 0xFFFFFFFFFFFFFF8;
    v127 = v53;
    v143 = v54;
    while (1)
    {
      if (v144)
      {
        v56 = (id)MEMORY[0x1AF41F600](v55, v53);
      }
      else
      {
        if (v55 >= *(_QWORD *)(v138 + 16))
          goto LABEL_53;
        v56 = *(id *)(v137 + 8 * v55);
      }
      v57 = v56;
      v50 = __OFADD__(v55++, 1);
      if (v50)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        swift_bridgeObjectRetain();
        v110 = sub_1A9CE8AC0();
        swift_bridgeObjectRelease();
        v43 = v110;
        v42 = v115;
        goto LABEL_5;
      }
      v58 = objc_msgSend(v56, v47[279]);
      if (*(_QWORD *)(v39 + 16))
      {
        v59 = v58;
        sub_1A9CE8C4C();
        sub_1A9CE8C58();
        v60 = sub_1A9CE8C7C();
        v61 = -1 << *(_BYTE *)(v39 + 32);
        v62 = v60 & ~v61;
        if (((*(_QWORD *)(v46 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
        {
          v142 = v37;
          v63 = *(_QWORD *)(v39 + 48);
          v54 = v143;
          if (*(id *)(v63 + 8 * v62) != v59)
          {
            v64 = ~v61;
            while (1)
            {
              v62 = (v62 + 1) & v64;
              if (((*(_QWORD *)(v46 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
                break;
              if (*(id *)(v63 + 8 * v62) == v59)
                goto LABEL_29;
            }

            v37 = v142;
            goto LABEL_17;
          }
LABEL_29:
          v65 = objc_msgSend(v57, sel_dateInterval, v111);
          v66 = v133;
          sub_1A9CE5F04();

          v67 = v134;
          sub_1A9CE5F34();
          v39 = v26[1];
          ((void (*)(char *, uint64_t))v39)(v66, v141);
          v68 = v135;
          sub_1A9CE5F34();
          sub_1A9CE6240();
          v70 = v69;
          v71 = *(void (**)(char *, uint64_t))(v125 + 8);
          v26 = (_QWORD *)v126;
          v71(v68, v126);
          v71(v67, (uint64_t)v26);
          sub_1A9CE5F4C();
          v73 = v70 / v72;
          v140 = v57;
          v74 = objc_msgSend(v57, sel_dateInterval);
          sub_1A9CE5F04();

          sub_1A9CE5F10();
          v132 = (void (*)(char *, uint64_t))v39;
          ((void (*)(char *, uint64_t))v39)(v66, v141);
          sub_1A9CE5F34();
          sub_1A9CE6240();
          v76 = v75;
          v71(v68, (uint64_t)v26);
          v71(v67, (uint64_t)v26);
          sub_1A9CE5F4C();
          v37 = v142;
          v77 = *(_QWORD *)(v142 + 16);
          v79 = v76 / v78;
          if (v77)
          {
            v80 = (uint64_t)v136;
            v81 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
            v82 = *(void **)(v131 + 72);
            sub_1A9BA6F90(v142 + v81 + (_QWORD)v82 * (v77 - 1), (uint64_t)v136, type metadata accessor for SleepDayModel.SegmentModel);
            v83 = v80 + *(int *)(v139 + 24);
            v84 = *(double *)(v83 + 8);
            if (v84 == v73)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v37 = sub_1A9C69188(v37);
              v85 = v140;
              v86 = *(_QWORD *)(v37 + 16);
              if (!v86)
                goto LABEL_54;
              v87 = v86 - 1;
              v142 = v81;
              v140 = v82;
              sub_1A9B97190(v37 + v81 + (v86 - 1) * (_QWORD)v82, type metadata accessor for SleepDayModel.SegmentModel);
              *(_QWORD *)(v37 + 16) = v87;
              v88 = *(_QWORD *)v83;
              v89 = (int *)v139;
              v90 = (uint64_t)v136;
              v91 = objc_msgSend(v85, sel_dateInterval);
              v92 = v118;
              sub_1A9CE5F04();

              sub_1A9CE5F34();
              sub_1A9CE5F10();
              v93 = v133;
              v94 = v141;
              sub_1A9CE5F1C();
              v132(v92, v94);
              v95 = *(_QWORD *)(v90 + v89[7]);
              v96 = v120;
              sub_1A9CE630C();
              v97 = v96 + v89[6];
              *(_QWORD *)v97 = v88;
              *(double *)(v97 + 8) = v79;
              v117(v96 + v89[5], v93, v94);
              *(_QWORD *)(v96 + v89[7]) = v95;
              sub_1A9BA6F90(v96, v121, type metadata accessor for SleepDayModel.SegmentModel);
              v99 = *(_QWORD *)(v37 + 16);
              v98 = *(_QWORD *)(v37 + 24);
              if (v99 >= v98 >> 1)
                v37 = sub_1A9CAE444(v98 > 1, v99 + 1, 1, v37);
              v26 = v124;
              v39 = v123;
              v46 = v122;
              v47 = &selRef_animateWithDuration_animations_;
              v53 = v127;
              *(_QWORD *)(v37 + 16) = v99 + 1;
              sub_1A9BA0D6C(v121, v37 + v142 + v99 * (_QWORD)v140, type metadata accessor for SleepDayModel.SegmentModel);

              sub_1A9B97190(v120, type metadata accessor for SleepDayModel.SegmentModel);
              v100 = &v146;
              goto LABEL_46;
            }
            sub_1A9B97190(v80, type metadata accessor for SleepDayModel.SegmentModel);
            v101 = v73 - v84;
            v39 = v123;
            v46 = v122;
            v47 = &selRef_animateWithDuration_animations_;
          }
          else
          {
            v101 = 0.0;
            v39 = v123;
            v46 = v122;
            v47 = &selRef_animateWithDuration_animations_;
          }
          v102 = v140;
          v103 = objc_msgSend(v140, sel_dateInterval);
          v104 = v139;
          v105 = (uint64_t)v129;
          sub_1A9CE5F04();

          sub_1A9CE630C();
          v106 = (double *)(v105 + *(int *)(v104 + 24));
          *v106 = v73;
          v106[1] = v79;
          *(double *)(v105 + *(int *)(v104 + 28)) = v101;
          sub_1A9BA6F90(v105, v130, type metadata accessor for SleepDayModel.SegmentModel);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = sub_1A9CAE444(0, *(_QWORD *)(v37 + 16) + 1, 1, v37);
          v26 = v124;
          v53 = v127;
          v108 = *(_QWORD *)(v37 + 16);
          v107 = *(_QWORD *)(v37 + 24);
          if (v108 >= v107 >> 1)
            v37 = sub_1A9CAE444(v107 > 1, v108 + 1, 1, v37);
          *(_QWORD *)(v37 + 16) = v108 + 1;
          sub_1A9BA0D6C(v130, v37+ ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ *(_QWORD *)(v131 + 72) * v108, type metadata accessor for SleepDayModel.SegmentModel);

          v100 = &v145;
LABEL_46:
          sub_1A9B97190(*(v100 - 32), type metadata accessor for SleepDayModel.SegmentModel);
          v54 = v143;
          goto LABEL_17;
        }

        v54 = v143;
      }
      else
      {

      }
LABEL_17:
      if (v55 == v54)
        goto LABEL_7;
    }
  }
  v37 = MEMORY[0x1E0DEE9D8];
LABEL_50:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v26[1])(v44, v141);
  return v37;
}

uint64_t sub_1A9C68130@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  void (*v46)(uint64_t);
  id v47;
  BOOL v48;
  unint64_t v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  void (*v73)(uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  void (*v92)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void (*v117)(void);
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;

  v3 = sub_1A9CE62E8();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v97 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v96 = (char *)&v94 - v10;
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v95 = (char *)&v94 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v99 = (char *)&v94 - v15;
  v16 = sub_1A9CE5F64();
  v120 = *(_QWORD *)(v16 - 8);
  v121 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v119 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C13ED0(0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v98 = (uint64_t)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v101 = (uint64_t)&v94 - v25;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v118 = (char *)&v94 - v28;
  v30 = MEMORY[0x1E0C80A78](v27, v29);
  v110 = (uint64_t)&v94 - v31;
  v33 = MEMORY[0x1E0C80A78](v30, v32);
  v35 = (char *)&v94 - v34;
  MEMORY[0x1E0C80A78](v33, v36);
  v111 = v4;
  v37 = *(void (**)(void))(v4 + 56);
  v122 = (uint64_t)&v94 - v38;
  v37();
  v112 = v3;
  v113 = v35;
  v117 = v37;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v37)(v35, 1, 1, v3);
  v39 = sub_1A9C69570();
  v40 = objc_msgSend(v1, sel_periods);
  sub_1A9B94A18(0, &qword_1ED263340);
  v41 = sub_1A9CE83DC();

  v100 = a1;
  if (v41 >> 62)
    goto LABEL_36;
  v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v42)
  {
LABEL_3:
    v43 = 0;
    v106 = v41 & 0xC000000000000001;
    v103 = v41 & 0xFFFFFFFFFFFFFF8;
    v102 = v41 + 32;
    v44 = v39 + 56;
    v45 = &selRef_animateWithDuration_animations_;
    v46 = sub_1A9C13ED0;
    v105 = v41;
    v104 = v42;
    v109 = v39 + 56;
    while (1)
    {
      if (v106)
      {
        v47 = (id)MEMORY[0x1AF41F600](v43, v41);
      }
      else
      {
        if (v43 >= *(_QWORD *)(v103 + 16))
          goto LABEL_35;
        v47 = *(id *)(v102 + 8 * v43);
      }
      v108 = v47;
      v48 = __OFADD__(v43, 1);
      v49 = v43 + 1;
      if (v48)
        goto LABEL_34;
      v50 = objc_msgSend(v108, sel_segments);
      sub_1A9B94A18(0, &qword_1ED263348);
      v51 = sub_1A9CE83DC();

      v107 = v49;
      if (v51 >> 62)
        break;
      v41 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v41)
        goto LABEL_12;
LABEL_4:

      swift_bridgeObjectRelease();
      v43 = v107;
      v41 = v105;
      if (v107 == v104)
        goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    v41 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!v41)
      goto LABEL_4;
LABEL_12:
    v52 = 0;
    v123 = v51 & 0xC000000000000001;
    v115 = v51 + 32;
    v116 = v51 & 0xFFFFFFFFFFFFFF8;
    v114 = v51;
    while (1)
    {
      if (v123)
      {
        v53 = (id)MEMORY[0x1AF41F600](v52, v51);
      }
      else
      {
        if (v52 >= *(_QWORD *)(v116 + 16))
          goto LABEL_33;
        v53 = *(id *)(v115 + 8 * v52);
      }
      v54 = v53;
      v48 = __OFADD__(v52++, 1);
      if (v48)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        swift_bridgeObjectRetain();
        v42 = sub_1A9CE8AC0();
        swift_bridgeObjectRelease();
        if (!v42)
          break;
        goto LABEL_3;
      }
      v55 = objc_msgSend(v53, v45[279]);
      if (*(_QWORD *)(v39 + 16))
      {
        v56 = v55;
        v57 = v41;
        sub_1A9CE8C4C();
        sub_1A9CE8C58();
        v58 = sub_1A9CE8C7C();
        v59 = -1 << *(_BYTE *)(v39 + 32);
        v60 = v58 & ~v59;
        if (((*(_QWORD *)(v44 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
        {
          v61 = *(_QWORD *)(v39 + 48);
          if (*(id *)(v61 + 8 * v60) == v56)
          {
LABEL_26:
            v63 = v45;
            v64 = v110;
            sub_1A9BA6F90(v122, v110, (uint64_t (*)(_QWORD))v46);
            v65 = v112;
            v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v64, 1, v112);
            sub_1A9B97190(v64, (uint64_t (*)(_QWORD))v46);
            if (v66 == 1)
            {
              v67 = objc_msgSend(v54, sel_dateInterval);
              v68 = v119;
              sub_1A9CE5F04();

              v69 = (uint64_t)v118;
              sub_1A9CE5F34();
              (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
              v70 = v122;
              sub_1A9B97190(v122, (uint64_t (*)(_QWORD))v46);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v117)(v69, 0, 1, v65);
              sub_1A9BA0D6C(v69, v70, (uint64_t (*)(_QWORD))v46);
            }
            v71 = objc_msgSend(v54, sel_dateInterval);
            v72 = v119;
            sub_1A9CE5F04();

            v73 = v46;
            v74 = v118;
            sub_1A9CE5F10();

            (*(void (**)(char *, uint64_t))(v120 + 8))(v72, v121);
            v75 = (uint64_t)v113;
            sub_1A9B97190((uint64_t)v113, (uint64_t (*)(_QWORD))v73);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v117)(v74, 0, 1, v65);
            v76 = (uint64_t)v74;
            v46 = v73;
            sub_1A9BA0D6C(v76, v75, (uint64_t (*)(_QWORD))v73);
            v45 = v63;
            v51 = v114;
            v44 = v109;
            v41 = v57;
            goto LABEL_14;
          }
          v62 = ~v59;
          while (1)
          {
            v60 = (v60 + 1) & v62;
            if (((*(_QWORD *)(v44 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
              break;
            if (*(id *)(v61 + 8 * v60) == v56)
              goto LABEL_26;
          }
        }
      }

LABEL_14:
      if (v52 == v41)
        goto LABEL_4;
    }
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77 = v122;
  v78 = v101;
  sub_1A9BA6F90(v122, v101, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  v79 = (_QWORD *)v111;
  v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  v81 = v112;
  if (v80(v78, 1, v112) == 1)
  {
    v82 = v78;
    v83 = v100;
    v84 = (uint64_t)v113;
  }
  else
  {
    v85 = (void (*)(char *, uint64_t, uint64_t))v79[4];
    v86 = v99;
    v85(v99, v78, v81);
    v84 = (uint64_t)v113;
    v87 = v98;
    sub_1A9BA6F90((uint64_t)v113, v98, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
    v88 = v80(v87, 1, v81);
    v83 = v100;
    if (v88 != 1)
    {
      v90 = v95;
      v85(v95, v87, v81);
      v91 = (void (*)(char *, char *, uint64_t))v79[2];
      v91(v96, v86, v81);
      v91(v97, v90, v81);
      sub_1A9CE5F1C();
      v92 = (void (*)(char *, uint64_t))v79[1];
      v77 = (uint64_t)v113;
      v82 = v122;
      v92(v90, v81);
      v92(v86, v81);
      v89 = 0;
      goto LABEL_43;
    }
    ((void (*)(char *, uint64_t))v79[1])(v86, v81);
    v82 = v87;
  }
  sub_1A9B97190(v84, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  v89 = 1;
LABEL_43:
  sub_1A9B97190(v77, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  sub_1A9B97190(v82, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v83, v89, 1, v121);
}

uint64_t _s13SleepHealthUI0A8DayModelC07SegmentE0V16absoluteInterval10Foundation04DateH0Vvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepDayModel.SegmentModel(0) + 20);
  v4 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SleepDayModel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, (uint64_t *)&unk_1ED262FC8);
}

uint64_t sub_1A9C68A2C()
{
  return sub_1A9B92B9C(&qword_1EEB484F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

uint64_t sub_1A9C68A58@<X0>(unint64_t a1@<X8>)
{
  return sub_1A9C65C40(a1);
}

void sub_1A9C68A7C(double *a1@<X8>)
{
  *a1 = sub_1A9C66080();
}

_QWORD *sub_1A9C68AA4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a2 + OBJC_IVAR____TtC13SleepHealthUI13SleepDayModel____lazy_storage___sleepDuration;
  *(_QWORD *)v2 = *result;
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

uint64_t sub_1A9C68AC4()
{
  return type metadata accessor for SleepDayModel(0);
}

void sub_1A9C68ACC()
{
  unint64_t v0;

  sub_1A9C664E4(319);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SleepDayModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepDayModel.hasData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SleepDayModel.sleepInterval.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDuration.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SleepDayModel.__allocating_init(segmentModels:sleepMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartTimeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartTimeAttributedString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of SleepDayModel.sleepEndTimeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of SleepDayModel.sleepEndTimeAttributedString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of SleepDayModel.sleepStartAndEndTimeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDateRangeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDurationText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of SleepDayModel.sleepDurationAttributedString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepDayModel.SegmentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A9CE6318();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A9CE5F64();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  }
  return a1;
}

uint64_t destroy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1A9CE6318();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1A9CE6318();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithCopy for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = sub_1A9CE6318();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1A9CE6318();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for SleepDayModel.SegmentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1A9CE6318();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepDayModel.SegmentModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C68FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1A9CE6318();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1A9CE5F64();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepDayModel.SegmentModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C6905C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1A9CE6318();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1A9CE5F64();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1A9C690D8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A9CE6318();
  if (v1 <= 0x3F)
  {
    result = sub_1A9CE5F64();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1A9C69174(unint64_t a1)
{
  return sub_1A9CAE200(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1A9C69188(unint64_t a1)
{
  return sub_1A9CAE444(0, *(_QWORD *)(a1 + 16), 0, a1);
}

int64_t sub_1A9C6919C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1A9C69280(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1A9CE8928() == *(_DWORD *)(a4 + 36))
      {
        sub_1A9CE8934();
        sub_1A9B94A18(0, &qword_1EEB440A8);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_1A9CE8808();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_1A9CE8814();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_1A9CE8814();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1AF41F57C](a1, a2, v7);
  sub_1A9B94A18(0, &qword_1EEB440A8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1A9C694E8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1A9C69570()
{
  NSSet *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, _QWORD);
  uint64_t v24;
  char v25[32];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v0 = HKCategoryValueSleepAnalysisAsleepValues();
  sub_1A9B94A18(0, &qword_1EEB440A8);
  sub_1A9C66550(&qword_1EEB484F8, &qword_1EEB440A8, 0x1E0CB37E8, MEMORY[0x1E0DEFCF8]);
  v1 = sub_1A9CE84D8();

  v2 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = sub_1A9CE8940();
    if (v3)
      goto LABEL_3;
LABEL_6:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v24 = sub_1A9C47BB0(v7);
    swift_bridgeObjectRelease();
    return v24;
  }
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1A9BE05CC(0, v3 & ~(v3 >> 63), 0);
  if (v2)
  {
    result = sub_1A9CE8910();
    v6 = 1;
  }
  else
  {
    result = sub_1A9C694E8(v1);
    v6 = v8 & 1;
  }
  v26 = result;
  v27 = v5;
  v28 = v6;
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        v15 = v26;
        v14 = v27;
        v16 = v28;
        sub_1A9C69280(v26, v27, v28, v1);
        v18 = v17;
        v19 = objc_msgSend(v17, sel_integerValue);

        v20 = v29;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1A9BE05CC(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v29;
        }
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          result = sub_1A9BE05CC(v21 > 1, v22 + 1, 1);
          v20 = v29;
        }
        *(_QWORD *)(v20 + 16) = v22 + 1;
        *(_QWORD *)(v20 + 8 * v22 + 32) = v19;
        if (v2)
          break;
        v9 = sub_1A9C6919C(v15, v14, v16, v1);
        v11 = v10;
        v13 = v12;
        sub_1A9C698E0(v15, v14, v16);
        v26 = v9;
        v27 = v11;
        v28 = v13 & 1;
        if (!--v3)
          goto LABEL_20;
      }
      if ((v16 & 1) == 0)
        goto LABEL_23;
      if (sub_1A9CE891C())
        swift_isUniquelyReferenced_nonNull_native();
      sub_1A9C69848();
      v23 = (void (*)(char *, _QWORD))sub_1A9CE84F0();
      sub_1A9CE8958();
      v23(v25, 0);
      --v3;
    }
    while (v3);
LABEL_20:
    sub_1A9C698E0(v26, v27, v28);
    swift_bridgeObjectRelease();
    v7 = v29;
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void sub_1A9C69848()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48500)
  {
    sub_1A9B94A18(255, &qword_1EEB440A8);
    sub_1A9C66550(&qword_1EEB484F8, &qword_1EEB440A8, 0x1E0CB37E8, MEMORY[0x1E0DEFCF8]);
    v0 = sub_1A9CE84FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48500);
  }
}

uint64_t sub_1A9C698E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

id TonePickerStyleProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TonePickerStyleProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TonePickerStyleProvider();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for TonePickerStyleProvider()
{
  return objc_opt_self();
}

id TonePickerStyleProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TonePickerStyleProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t TonePickerStyleProvider.tonePickerUsesOpaqueBackground.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.tonePickerTableViewSeparatorStyle.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.tonePickerCellTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellHighlightedTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerCellBackgroundColor.getter()
{
  return 0;
}

void __swiftcall TonePickerStyleProvider.newBackgroundView(forSelectedTonePickerCell:)(UIView_optional *__return_ptr retstr, Swift::Bool forSelectedTonePickerCell)
{
  ;
}

void __swiftcall TonePickerStyleProvider.newAccessoryDisclosureIndicatorViewForTonePickerCell()(UIView_optional *__return_ptr retstr)
{
  ;
}

uint64_t TonePickerStyleProvider.wantsCustomTonePickerHeaderView.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.tonePickerHeaderTextShadowColor.getter()
{
  return 0;
}

double TonePickerStyleProvider.tonePickerHeaderTextShadowOffset.getter()
{
  return *MEMORY[0x1E0DC51A8];
}

double TonePickerStyleProvider.tonePickerHeaderTextPaddingInsets.getter()
{
  return *MEMORY[0x1E0DC49E8];
}

uint64_t TonePickerStyleProvider.vibrationPickerUsesOpaqueBackground.getter()
{
  return 1;
}

uint64_t TonePickerStyleProvider.vibrationPickerTableViewSeparatorStyle.getter()
{
  return 1;
}

id TonePickerStyleProvider.vibrationPickerCellTextFont.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4A88]);
}

uint64_t TonePickerStyleProvider.vibrationPickerCellTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerCellHighlightedTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerCellBackgroundColor.getter()
{
  return 0;
}

void __swiftcall TonePickerStyleProvider.newAccessoryDisclosureIndicatorViewForVibrationPickerCell()(UIView_optional *__return_ptr retstr)
{
  ;
}

uint64_t TonePickerStyleProvider.wantsCustomVibrationPickerHeaderView.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextFont.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextColor.getter()
{
  return 0;
}

uint64_t TonePickerStyleProvider.vibrationPickerHeaderTextShadowColor.getter()
{
  return 0;
}

void *static UILabel.makeDynamicLabel(textStyle:textColor:traits:rounded:monospaced:numberOfLines:weight:textAlignment:)(void *a1, void *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  char v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;

  v15 = a8 & 1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v17 = a2;
  v18 = a1;
  v19 = objc_msgSend(v16, sel_init);
  v20 = v19;
  if (a2)
    objc_msgSend(v19, sel_setTextColor_, v17);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v21 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v18, a3, a4 & 1, 0, 0, 0, a5 & 1, a7, v15);
  objc_msgSend(v20, sel_setFont_, v21);

  objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v20, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v20, sel_setLineBreakMode_, 0);
  objc_msgSend(v20, sel_setNumberOfLines_, a6);
  if ((a10 & 1) == 0)
    objc_msgSend(v20, sel_setTextAlignment_, a9);
  return v20;
}

void __swiftcall UILabel.init(textColor:textAlignment:)(UILabel *__return_ptr retstr, UIColor textColor, NSTextAlignment_optional textAlignment)
{
  Swift::Bool is_nil;
  NSTextAlignment value;
  id v6;

  is_nil = textAlignment.is_nil;
  value = textAlignment.value;
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setTextColor_, textColor.super.isa);
  if (!is_nil)
    objc_msgSend(v6, sel_setTextAlignment_, value);

}

void __swiftcall UILabel.init(textStyle:textColor:traits:rounded:monospaced:weight:)(UILabel *__return_ptr retstr, UIFontTextStyle textStyle, UIColor_optional textColor, UIFontDescriptorSymbolicTraits traits, Swift::Bool rounded, Swift::Bool monospaced, UIFontWeight_optional weight)
{
  Swift::Bool is_nil;
  _BOOL8 v8;
  char v10;
  uint64_t v11;
  Class isa;
  id v14;
  void *v15;
  id v16;
  id v17;

  is_nil = weight.is_nil;
  v8 = monospaced;
  v10 = traits;
  v11 = *(_QWORD *)&textColor.is_nil;
  isa = textColor.value.super.isa;
  v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v15 = v14;
  if (isa)
    objc_msgSend(v14, sel_setTextColor_, isa);
  else
    v16 = v14;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v17 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)textStyle, v11, v10 & 1, 0, 0, 0, rounded, v8, is_nil);
  objc_msgSend(v15, sel_setFont_, v17);

}

NSMutableAttributedString_optional __swiftcall UILabel.mutableAttributedString()()
{
  void *v0;
  id v1;
  void *v2;
  objc_class *v3;
  objc_class *v4;
  Swift::Bool v5;
  objc_class *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t inited;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  NSMutableAttributedString_optional result;

  v1 = objc_msgSend(v0, sel_attributedText);
  if (v1)
  {
    v2 = v1;
    v3 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v1);
  }
  else
  {
    v7 = objc_msgSend(v0, sel_text);
    if (!v7)
    {
      v4 = 0;
      goto LABEL_4;
    }
    v8 = v7;
    sub_1A9CE82E0();

    v9 = objc_msgSend(v0, sel_font);
    if (v9)
    {
      v10 = v9;
      sub_1A9C6A138();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1A9CEB520;
      v12 = (void *)*MEMORY[0x1E0DC1138];
      *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
      *(_QWORD *)(inited + 64) = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
      *(_QWORD *)(inited + 40) = v10;
      v13 = v12;
      v14 = v10;
      sub_1A9BACA44(inited);
      v15 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
      v16 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1A9C40DB0();
      v17 = (void *)sub_1A9CE8208();
      swift_bridgeObjectRelease();
      v4 = (objc_class *)objc_msgSend(v15, sel_initWithString_attributes_, v16, v17);

      goto LABEL_4;
    }
    v18 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v2 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v3 = (objc_class *)objc_msgSend(v18, sel_initWithString_, v2);
  }
  v4 = v3;

LABEL_4:
  v6 = v4;
  result.value.super.super.isa = v6;
  result.is_nil = v5;
  return result;
}

void sub_1A9C6A138()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB477F8)
  {
    sub_1A9C40D48();
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB477F8);
  }
}

uint64_t UILabel.ViewModel.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *UILabel.ViewModel.font.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void *UILabel.ViewModel.textColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t UILabel.ViewModel.hidden.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t UILabel.ViewModel.accessibilityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UILabel.ViewModel.init(text:font:textColor:hidden:accessibilityLabel:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

uint64_t UILabel.ViewModel.hash(into:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v1 = (void *)v0[2];
  v2 = (void *)v0[3];
  v3 = v0[6];
  if (v0[1])
  {
    sub_1A9CE8C64();
    swift_bridgeObjectRetain();
    sub_1A9CE831C();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
LABEL_6:
    sub_1A9CE8C64();
    if (v2)
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1A9CE8C64();
  if (!v1)
    goto LABEL_6;
LABEL_3:
  sub_1A9CE8C64();
  v4 = v1;
  sub_1A9CE8820();

  if (v2)
  {
LABEL_4:
    sub_1A9CE8C64();
    v5 = v2;
    sub_1A9CE8820();

    goto LABEL_8;
  }
LABEL_7:
  sub_1A9CE8C64();
LABEL_8:
  sub_1A9CE8C64();
  if (!v3)
    return sub_1A9CE8C64();
  sub_1A9CE8C64();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t UILabel.ViewModel.hashValue.getter()
{
  sub_1A9CE8C4C();
  UILabel.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C6A3FC()
{
  sub_1A9CE8C4C();
  UILabel.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C6A458()
{
  sub_1A9CE8C4C();
  UILabel.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

void UILabel.update(viewModel:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 8))
    v6 = (void *)sub_1A9CE82B0();
  else
    v6 = 0;
  objc_msgSend(v1, sel_setText_, v6);

  objc_msgSend(v1, sel_setFont_, v2);
  objc_msgSend(v1, sel_setTextColor_, v3);
  objc_msgSend(v1, sel_setHidden_, v4);
  if (v5)
    v7 = sub_1A9CE82B0();
  else
    v7 = 0;
  v8 = (id)v7;
  objc_msgSend(v1, sel_setAccessibilityLabel_);

}

BOOL _sSo7UILabelC13SleepHealthUIE9ViewModelV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 result;
  id v17;
  id v18;
  char v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  if (!v3)
  {
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v9 || (v15 = sub_1A9CE8BB0(), result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    if (v4)
    {
      if (!v10)
        return 0;
      v23 = v7;
      sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
      v17 = v10;
      v18 = v4;
      v19 = sub_1A9CE8814();

      if ((v19 & 1) == 0)
        return 0;
    }
    else
    {
      v23 = v7;
      if (v10)
        return 0;
    }
    if (v5)
    {
      if (!v11)
        return 0;
      sub_1A9B94A18(0, (unint64_t *)&qword_1EEB47810);
      v20 = v11;
      v21 = v5;
      v22 = sub_1A9CE8814();

      result = 0;
      if ((v22 & 1) == 0)
        return result;
    }
    else
    {
      result = 0;
      if (v11)
        return result;
    }
    if (((v6 ^ v12) & 1) != 0)
      return result;
    if (v8)
      return v13 && (v23 == v14 && v8 == v13 || (sub_1A9CE8BB0() & 1) != 0);
    return !v13;
  }
  return result;
}

unint64_t sub_1A9C6A744()
{
  unint64_t result;

  result = qword_1EEB48538;
  if (!qword_1EEB48538)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for UILabel.ViewModel, &type metadata for UILabel.ViewModel);
    atomic_store(result, (unint64_t *)&qword_1EEB48538);
  }
  return result;
}

uint64_t _s9ViewModelVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s9ViewModelVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UILabel.ViewModel()
{
  return &type metadata for UILabel.ViewModel;
}

unint64_t static ScheduleOccurrenceAlarmVolumeTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002ALL;
}

double sub_1A9C6AA0C()
{
  uint64_t v0;
  float v1;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider), sel_value);
  return v1;
}

id sub_1A9C6AA94()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v35;
  _QWORD aBlock[6];

  v1 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  aBlock[4] = sub_1A9C219C0;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C21C90;
  aBlock[3] = &block_descriptor_24;
  v2 = _Block_copy(aBlock);
  v3 = objc_msgSend(v1, sel_initWithDynamicProvider_, v2);
  _Block_release(v2);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider];
  v5 = (void *)sub_1A9CE82B0();
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_systemImageNamed_, v5);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_imageWithTintColor_renderingMode_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration+ 8], 1);

  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v4, sel_setMinimumValueImage_, v8);

  v9 = (void *)sub_1A9CE82B0();
  v10 = objc_msgSend(v6, sel_systemImageNamed_, v9);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_imageWithTintColor_renderingMode_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration+ 8], 1);

  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v4, sel_setMaximumValueImage_, v11);

  v12 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v12, sel_addSubview_, v4);

  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v35 = (id)objc_opt_self();
  sub_1A9BB7420();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1A9CED8F0;
  v14 = objc_msgSend(v4, sel_topAnchor);
  v15 = objc_msgSend(v0, sel_contentView);
  v16 = objc_msgSend(v15, sel_topAnchor);

  v17 = *(double *)&v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration + 16];
  v18 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v16, v17);

  *(_QWORD *)(v13 + 32) = v18;
  v19 = objc_msgSend(v4, sel_leadingAnchor);
  v20 = objc_msgSend(v0, sel_contentView);
  v21 = objc_msgSend(v20, sel_layoutMarginsGuide);

  v22 = objc_msgSend(v21, sel_leadingAnchor);
  v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);

  *(_QWORD *)(v13 + 40) = v23;
  v24 = objc_msgSend(v0, sel_contentView);
  v25 = objc_msgSend(v24, sel_layoutMarginsGuide);

  v26 = objc_msgSend(v25, sel_trailingAnchor);
  v27 = objc_msgSend(v4, sel_trailingAnchor);
  v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v13 + 48) = v28;
  v29 = objc_msgSend(v0, sel_contentView);
  v30 = objc_msgSend(v29, sel_bottomAnchor);

  v31 = objc_msgSend(v4, sel_bottomAnchor);
  v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_constant_, v31, v17);

  *(_QWORD *)(v13 + 56) = v32;
  aBlock[0] = v13;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v33 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_activateConstraints_, v33);

  return objc_msgSend(v4, sel_addTarget_action_forControlEvents_, 0, sel_scheduleOccurrenceAlarmVolumeEditingDidEnd_, 4096);
}

id ScheduleOccurrenceAlarmVolumeTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell()
{
  return objc_opt_self();
}

id ScheduleOccurrenceAlarmVolumeTableViewCell.apply(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  int v6;
  int v7;
  id v9;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider);
  v3 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v4 = objc_msgSend(v9, sel_soundVolume);

  if (v4)
  {
    objc_msgSend(v4, sel_floatValue);
    v7 = v6;

  }
  else
  {
    v7 = *MEMORY[0x1E0DA8290];
  }
  LODWORD(v5) = v7;
  return objc_msgSend(v2, sel_setValue_animated_, 0, v5);
}

id sub_1A9C6B194(uint64_t a1)
{
  return ScheduleOccurrenceAlarmVolumeTableViewCell.apply(_:)(a1);
}

uint64_t method lookup function for ScheduleOccurrenceAlarmVolumeTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceAlarmVolumeTableViewCell.alarmVolume.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

_QWORD *initializeBufferWithCopyOfBuffer for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(id *a1)
{

}

uint64_t assignWithCopy for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration()
{
  return &type metadata for ScheduleOccurrenceAlarmVolumeTableViewCell.Configuration;
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

id sub_1A9C6B304(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v4;
  id v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  objc_super v15;
  _QWORD aBlock[6];

  v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration];
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  aBlock[4] = sub_1A9C219C0;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C21C90;
  aBlock[3] = &block_descriptor_6_3;
  v6 = _Block_copy(aBlock);
  v7 = v2;
  v8 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  v9 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  *(_QWORD *)v4 = v8;
  *((_QWORD *)v4 + 1) = v9;
  *((_QWORD *)v4 + 2) = 0x4010000000000000;
  v10 = OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider;
  *(_QWORD *)&v7[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C80]), sel_init);

  if (a2)
  {
    v11 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v15.receiver = v7;
  v15.super_class = (Class)type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  v12 = objc_msgSendSuper2(&v15, sel_initWithStyle_reuseIdentifier_, 0, v11);

  v13 = v12;
  sub_1A9C6AA94();

  return v13;
}

void sub_1A9C6B484()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD aBlock[6];

  v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_configuration];
  v2 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  aBlock[4] = sub_1A9C219C0;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C21C90;
  aBlock[3] = &block_descriptor_3_1;
  v3 = _Block_copy(aBlock);
  v4 = objc_msgSend(v2, sel_initWithDynamicProvider_, v3);
  _Block_release(v3);
  swift_release();
  v5 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  *(_QWORD *)v1 = v4;
  *((_QWORD *)v1 + 1) = v5;
  *((_QWORD *)v1 + 2) = 0x4010000000000000;
  v6 = OBJC_IVAR____TtC13SleepHealthUI42ScheduleOccurrenceAlarmVolumeTableViewCell_slider;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C80]), sel_init);

  sub_1A9CE8A84();
  __break(1u);
}

Swift::Void __swiftcall UIViewController.addAndLinkChild(_:usesAutoLayout:)(UIViewController *_, Swift::Bool usesAutoLayout)
{
  void *v2;
  UIView *v5;
  UIView *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  objc_msgSend(v2, sel_addChildViewController_, _);
  v5 = -[UIViewController view](_, sel_view);
  if (!v5)
    goto LABEL_7;
  v6 = v5;
  v7 = objc_msgSend(v2, sel_view);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, sel_addSubview_, v6);

    if (usesAutoLayout)
    {
LABEL_6:

LABEL_7:
      -[UIViewController didMoveToParentViewController:](_, sel_didMoveToParentViewController_, v2);
      return;
    }
    v9 = objc_msgSend(v2, sel_view);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, sel_bounds);
      v12 = v11;
      v14 = v13;
      v16 = v15;
      v18 = v17;

      -[UIView setFrame:](v6, sel_setFrame_, v12, v14, v16, v18);
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t HKSPSleepScheduleOccurrence.scheduleIssues.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;

  v2 = v1;
  v43 = a1;
  v3 = sub_1A9CE60C0();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v42 - v11;
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v42 - v15;
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v42 - v18;
  v20 = objc_msgSend(v2, sel_bedtimeComponents);
  sub_1A9CE6024();

  v21 = objc_msgSend(v2, sel_wakeUpComponents);
  sub_1A9CE6024();

  v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v22(v12, v19, v3);
  v23 = sub_1A9CE6048();
  if ((v24 & 1) != 0)
    v25 = 0;
  else
    v25 = v23;
  v26 = sub_1A9CE6084();
  v28 = v27;
  v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v12, v3);
  if ((v28 & 1) != 0)
    v26 = 0;
  v22(v8, v16, v3);
  v30 = sub_1A9CE6048();
  if ((v31 & 1) != 0)
    v32 = 0;
  else
    v32 = v30;
  v33 = sub_1A9CE6084();
  v35 = v34;
  v29(v8, v3);
  if ((v35 & 1) != 0)
    v36 = 0;
  else
    v36 = v33;
  sub_1A9BD5258(v25, v26, v32, v36);
  v38 = v37;
  if (qword_1EEB42F18 != -1)
    swift_once();
  v39 = *(double *)&qword_1EEB49FC8;
  if (qword_1EEB42F10 != -1)
    swift_once();
  if (v38 < *(double *)&qword_1EEB49FC0)
    v40 = (8 * (v39 < v38)) | 4;
  else
    v40 = 8 * (v39 < v38);
  *v43 = v40;
  v29(v16, v3);
  return ((uint64_t (*)(char *, uint64_t))v29)(v19, v3);
}

uint64_t HKSPSleepScheduleOccurrence.id.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  objc_msgSend(v0, sel_weekdays);
  v1 = (id)NSStringFromHKSPWeekdays();
  v2 = sub_1A9CE82E0();

  return v2;
}

void sub_1A9C6B9AC(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(*v1, sel_weekdays);
  v3 = (id)NSStringFromHKSPWeekdays();
  v4 = sub_1A9CE82E0();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t WatchOnboardingCapabilitiesProvider.watchOnboardingCapabilities.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(void))(a2 + 8))();
  v7 = result;
  if ((result & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2) & 1) != 0)
      v8 = 16;
    else
      v8 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2) & 1) != 0)
      v8 |= 2uLL;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL | (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2) & 1;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2) & 1) != 0)
      v9 |= 4uLL;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    v10 = v9 | 8;
    if ((result & 1) == 0)
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)a3 = v10;
  *(_BYTE *)(a3 + 8) = (v7 & 1) == 0;
  return result;
}

uint64_t WatchOnboardingCapabilities.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SleepHealthUI::WatchOnboardingCapabilities __swiftcall WatchOnboardingCapabilities.init(rawValue:)(SleepHealthUI::WatchOnboardingCapabilities rawValue)
{
  SleepHealthUI::WatchOnboardingCapabilities *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static WatchOnboardingCapabilities.respiratoryRate.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static WatchOnboardingCapabilities.sleepStages.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static WatchOnboardingCapabilities.wristTemperature.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static WatchOnboardingCapabilities.healthStatus.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static WatchOnboardingCapabilities.sleepTracking.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

unint64_t sub_1A9C6BB34()
{
  unint64_t result;

  result = qword_1EEB48550;
  if (!qword_1EEB48550)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WatchOnboardingCapabilities, &type metadata for WatchOnboardingCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EEB48550);
  }
  return result;
}

unint64_t sub_1A9C6BB7C()
{
  unint64_t result;

  result = qword_1EEB48558;
  if (!qword_1EEB48558)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WatchOnboardingCapabilities, &type metadata for WatchOnboardingCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EEB48558);
  }
  return result;
}

unint64_t sub_1A9C6BBC4()
{
  unint64_t result;

  result = qword_1EEB48560;
  if (!qword_1EEB48560)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WatchOnboardingCapabilities, &type metadata for WatchOnboardingCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EEB48560);
  }
  return result;
}

unint64_t sub_1A9C6BC0C()
{
  unint64_t result;

  result = qword_1EEB48568;
  if (!qword_1EEB48568)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WatchOnboardingCapabilities, &type metadata for WatchOnboardingCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EEB48568);
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchOnboardingCapabilities()
{
  return &type metadata for WatchOnboardingCapabilities;
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.hasWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsSleepTracking.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsSleepStages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsRespiratoryRate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsWristTemperature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of WatchOnboardingCapabilitiesProvider.watchSupportsHealthStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s5ModelVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 43))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s5ModelVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 43) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 43) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = a2 + 1;
  }
  return result;
}

ValueMetadata *_s5ModelVMa()
{
  return &_s5ModelVN;
}

void sub_1A9C6BD5C(double a1)
{
  int64x2_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - v6;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v15 - v10;
  v12 = vmulq_f64(vcvtq_f64_s64(*v1), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1A9C72EAC(v15, round((60.0 * v12.f64[0] + v12.f64[1]) / a1) * a1);
  if (v15[1] == 60 && __OFADD__(v15[0], 1))
  {
    __break(1u);
  }
  else
  {
    v13 = sub_1A9CE6444();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    v14 = sub_1A9CE6498();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_1A9CE60A8();
  }
}

void sub_1A9C6BF60(double a1)
{
  int64x2_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v15 - v6;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v15 - v10;
  v12 = vmulq_f64(vcvtq_f64_s64(v1[1]), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1A9C72EAC(v15, round((60.0 * v12.f64[0] + v12.f64[1]) / a1) * a1);
  if (v15[1] == 60 && __OFADD__(v15[0], 1))
  {
    __break(1u);
  }
  else
  {
    v13 = sub_1A9CE6444();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    v14 = sub_1A9CE6498();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_1A9CE60A8();
  }
}

uint64_t sub_1A9C6C164(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;

  v3 = sub_1A9CE60C0();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v40 - v8;
  v11 = v1[1];
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = *((_BYTE *)v1 + 40);
  v16 = *((_BYTE *)v1 + 41);
  v17 = *((_BYTE *)v1 + 42);
  v44 = *v1;
  v10 = v44;
  v45 = v11;
  v46 = v12;
  v47 = v13;
  v48 = v14;
  v49 = v15;
  v50 = v16;
  v51 = v17;
  sub_1A9C6BD5C(a1);
  v44 = v10;
  v45 = v11;
  v46 = v12;
  v47 = v13;
  v48 = v14;
  v49 = v15;
  v50 = v16;
  v51 = v17;
  v18 = v41;
  sub_1A9C6BF60(a1);
  v19 = sub_1A9CE6048();
  LOBYTE(v11) = v20 & 1;
  v21 = sub_1A9CE6048();
  v23 = sub_1A9CB44C8(v21, v22 & 1, v19, v11);
  v25 = v24;
  v26 = sub_1A9CE6084();
  LOBYTE(v13) = v27 & 1;
  v28 = sub_1A9CE6084();
  v30 = sub_1A9CB44C8(v28, v29 & 1, v26, v13);
  v32 = v31;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB48280, (uint64_t (*)(uint64_t))type metadata accessor for ComparisonResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if ((v25 & 1) != 0)
    goto LABEL_4;
  switch(v23)
  {
    case -1:
      goto LABEL_7;
    case 0:
LABEL_4:
      if ((v32 & 1) == 0)
      {
        v33 = *(void (**)(char *, uint64_t))(v42 + 8);
        v34 = v18;
        v35 = v43;
        v33(v34, v43);
        v33(v9, v35);
        v23 = v30;
LABEL_8:
        if ((unint64_t)(v23 + 1) < 3)
          return (((_BYTE)v23 + 1) & 7) == 2;
        break;
      }
LABEL_7:
      v36 = *(void (**)(char *, uint64_t))(v42 + 8);
      v37 = v18;
      v38 = v43;
      v36(v37, v43);
      v36(v9, v38);
      if ((v25 & 1) != 0)
        return 0;
      goto LABEL_8;
    case 1:
      goto LABEL_7;
  }
  result = sub_1A9CE8BA4();
  __break(1u);
  return result;
}

uint64_t sub_1A9C6C394(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8)
{
  double *v8;
  double *v9;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _BYTE *v33;
  double v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t (*v42)(_BYTE *, uint64_t);
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[4];
  int v53;
  double v54;
  unint64_t v55;
  void (*v56)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v57)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;

  v9 = v8;
  v54 = *(double *)&a3;
  v62 = a2;
  v64 = a1;
  v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v52[-v18];
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v15);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v52[-v22];
  v24 = sub_1A9CE60C0();
  v65 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v63 = &v52[-v29];
  result = MEMORY[0x1E0C80A78](v28, v30);
  v33 = &v52[-v32];
  v34 = *v9;
  v35 = *((_QWORD *)v9 + 1);
  v59 = a5;
  v60 = a6;
  v58 = a4;
  v61 = v36;
  if (v35 == 60 && __OFADD__(*(_QWORD *)&v34, 1))
  {
    __break(1u);
  }
  else
  {
    v37 = sub_1A9CE6444();
    v57 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
    v57(v23, 1, 1, v37);
    v38 = sub_1A9CE6498();
    v56 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
    v56(v19, 1, 1, v38);
    sub_1A9CE60A8();
    v39 = sub_1A9C6D600();
    v40 = v64;
    v55 = v39;
    v41 = sub_1A9CE82A4();
    v42 = *(uint64_t (**)(_BYTE *, uint64_t))(v65 + 8);
    result = v42(v33, v24);
    v53 = v41;
    if ((v41 & 1) == 0)
    {
      v43 = (uint64_t)v63;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16))(v63, v40, v24);
      result = sub_1A9C6D07C(v43);
    }
    if (*((_QWORD *)v9 + 3) != 60 || !__OFADD__(*((_QWORD *)v9 + 2), 1))
    {
      v57(v23, 1, 1, v37);
      v56(v19, 1, 1, v38);
      v44 = v61;
      sub_1A9CE60A8();
      v45 = v62;
      v46 = sub_1A9CE82A4();
      v42(v44, v24);
      if ((v46 & 1) != 0)
      {
        v47 = v53 ^ 1;
      }
      else
      {
        v48 = (uint64_t)v63;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16))(v63, v45, v24);
        sub_1A9C6D1C0(v48);
        v47 = 1;
      }
      v50 = v59;
      v49 = v60;
      v51 = v58;
      if (((_BYTE)v9[5] & 1) != 0)
      {
        if ((v58 & 1) == 0)
          goto LABEL_18;
      }
      else if ((v58 & 1) != 0 || v9[4] != v54)
      {
LABEL_18:
        v9[4] = v54;
        *((_BYTE *)v9 + 40) = v51 & 1;
        if (*((_BYTE *)v9 + 41) == (v50 & 1))
          goto LABEL_20;
        goto LABEL_19;
      }
      if (*((_BYTE *)v9 + 41) == (v59 & 1))
      {
        if (*((_BYTE *)v9 + 42) == (v60 & 1))
          return (sub_1A9C6D304(a7, a8) | v47) & 1;
        goto LABEL_21;
      }
LABEL_19:
      *((_BYTE *)v9 + 41) = v50 & 1;
LABEL_20:
      if (*((_BYTE *)v9 + 42) == (v49 & 1))
      {
LABEL_22:
        v47 = 1;
        return (sub_1A9C6D304(a7, a8) | v47) & 1;
      }
LABEL_21:
      *((_BYTE *)v9 + 42) = v49 & 1;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C6C888(double a1)
{
  double v2;
  double v3;
  double i;
  double v5;
  double j;
  double v7;
  double v8;
  double v9;
  uint64_t result;

  if (qword_1EEB42CB8 != -1)
    result = swift_once();
  v2 = *(double *)&qword_1EEB572A0;
  if (qword_1EEB42CC0 != -1)
    result = swift_once();
  v3 = *(double *)&qword_1EEB572A8;
  for (i = *(double *)&qword_1EEB572A8 - v2; a1 < v2; a1 = i + a1)
    ;
  while (*(double *)&qword_1EEB572A8 <= a1)
    a1 = a1 - i;
  if (qword_1EEB42CB0 != -1)
  {
    result = swift_once();
    v3 = *(double *)&qword_1EEB572A8;
  }
  v5 = a1 - *(double *)&qword_1EEB57298;
  for (j = v3 - *(double *)&qword_1EEB572A0; v5 < *(double *)&qword_1EEB572A0; v5 = j + v5)
    ;
  while (v3 <= v5)
    v5 = v5 - j;
  v7 = v5 / v3 * 24.0;
  v8 = floor(v7);
  if (v8 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = round((v7 - v8) * 60.0);
  if ((*(_QWORD *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v9 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_28;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v9 < 9.22337204e18)
    return (uint64_t)v8;
LABEL_30:
  __break(1u);
  return result;
}

void sub_1A9C6CA40(double a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double j;
  double v12;
  double v13;
  double i;
  uint64_t v15;

  *v3 = sub_1A9C6C888(a1);
  v3[1] = v7;
  sub_1A9BD535C();
  if (v8 >= a2)
  {
    if (v8 <= a3)
      return;
    v12 = a3 / 60.0 / 60.0 / 24.0;
    if (qword_1EEB42CC0 != -1)
      swift_once();
    v13 = *(double *)&qword_1EEB572A8;
    v10 = v12 * *(double *)&qword_1EEB572A8 + a1;
    if (qword_1EEB42CB8 != -1)
    {
      swift_once();
      v13 = *(double *)&qword_1EEB572A8;
    }
    for (i = v13 - *(double *)&qword_1EEB572A0; v10 < *(double *)&qword_1EEB572A0; v10 = i + v10)
      ;
    while (v13 <= v10)
      v10 = v10 - i;
  }
  else
  {
    if (qword_1EEB42CC0 != -1)
      swift_once();
    v9 = *(double *)&qword_1EEB572A8;
    v10 = a2 / 60.0 / 60.0 / 24.0 * *(double *)&qword_1EEB572A8 + a1;
    if (qword_1EEB42CB8 != -1)
    {
      swift_once();
      v9 = *(double *)&qword_1EEB572A8;
    }
    for (j = v9 - *(double *)&qword_1EEB572A0; v10 < *(double *)&qword_1EEB572A0; v10 = j + v10)
      ;
    while (v9 <= v10)
      v10 = v10 - j;
  }
  v3[2] = sub_1A9C6C888(v10);
  v3[3] = v15;
}

double sub_1A9C6CC54(double a1)
{
  int64x2_t *v1;
  float64x2_t v3;
  float64x2_t v4;
  double result;
  float64x2_t v6;
  int64x2_t v7;

  v6 = (float64x2_t)vdupq_n_s64(0x404E000000000000uLL);
  v3 = vmulq_f64(vcvtq_f64_s64(*v1), v6);
  sub_1A9C72EAC(v7.i64, round((60.0 * v3.f64[0] + v3.f64[1]) / a1) * a1);
  *v1 = v7;
  v4 = vmulq_f64(vcvtq_f64_s64(v1[1]), v6);
  sub_1A9C72EAC(v7.i64, round((60.0 * v4.f64[0] + v4.f64[1]) / a1) * a1);
  result = *(double *)v7.i64;
  v1[1] = v7;
  return result;
}

BOOL sub_1A9C6CCF0(double a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = sub_1A9BE25FC(v3, v4);
  v8 = sub_1A9BE25FC(v5, v6);
  v9 = sub_1A9BE25FC(v3, v4);
  if (v7 >= v8)
  {
    if (v9 <= a1)
    {
      if (qword_1EEB42CC0 != -1)
        swift_once();
      if (*(double *)&qword_1EEB572A8 >= a1)
        return 1;
    }
    if (qword_1EEB42CB8 != -1)
      swift_once();
    if (*(double *)&qword_1EEB572A0 > a1)
      return 0;
  }
  else if (v9 > a1)
  {
    return 0;
  }
  return sub_1A9BE25FC(v5, v6) >= a1;
}

unint64_t sub_1A9C6CE04()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = v0[2];
  result = v1 - *v0;
  if (__OFSUB__(v1, *v0))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v3 = v0[1];
  v4 = v0[3];
  v5 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v5 < 0)
  {
    v6 = -60;
    if (v5 > -60)
      v6 = v4 - v3;
    v7 = v3 + v6;
    if (v7 == v4)
      v8 = v0[3];
    else
      v8 = v4 + 1;
    v9 = v7 == v4;
    v10 = v1 ^ 0x8000000000000000;
    v11 = (v7 - v8) / 0x3CuLL;
    if (!v9)
      ++v11;
    while (v10 - *v0 > v11)
    {
      --result;
      v12 = v5 < -60;
      v5 += 60;
      if (!v12)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_13:
  if ((result & 0x8000000000000000) != 0)
  {
    v13 = -24;
    if ((uint64_t)result > -24)
      v13 = result;
    if (result >= 0xFFFFFFFFFFFFFFE8)
      v14 = result;
    else
      v14 = result + 1;
    v15 = (v13 - v14) / 0x18;
    if (result < 0xFFFFFFFFFFFFFFE8)
      ++v15;
    result += 24 * v15 + 24;
  }
  else if (result >= 0x18)
  {
    return (result - 24) % 0x18;
  }
  return result;
}

__n128 sub_1A9C6CEF8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 sub_1A9C6CF04@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t sub_1A9C6CF10()
{
  __int128 *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  _BYTE v13[27];

  v12 = *v0;
  *(_OWORD *)v13 = v0[1];
  *(_OWORD *)&v13[11] = *(__int128 *)((char *)v0 + 27);
  v1 = sub_1A9C6CE04();
  v3 = v2;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CF3DB0;
  sub_1A9C6D044();
  v5 = sub_1A9CE82F8();
  v7 = v6;
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
  v8 = sub_1A9BDD3E4();
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  v9 = MEMORY[0x1E0DEB418];
  v10 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v4 + 96) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v4 + 104) = v10;
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = v12;
  *(_QWORD *)(v4 + 136) = v9;
  *(_QWORD *)(v4 + 144) = v10;
  *(_QWORD *)(v4 + 112) = *((_QWORD *)&v12 + 1);
  *(_QWORD *)(v4 + 176) = v9;
  *(_QWORD *)(v4 + 184) = v10;
  *(_QWORD *)(v4 + 152) = *(_QWORD *)v13;
  *(_QWORD *)(v4 + 216) = v9;
  *(_QWORD *)(v4 + 224) = v10;
  *(_QWORD *)(v4 + 192) = *(_QWORD *)&v13[8];
  *(_QWORD *)(v4 + 256) = v9;
  *(_QWORD *)(v4 + 264) = v10;
  *(_QWORD *)(v4 + 232) = v1;
  *(_QWORD *)(v4 + 296) = v9;
  *(_QWORD *)(v4 + 304) = v10;
  *(_QWORD *)(v4 + 272) = v3;
  return sub_1A9CE82EC();
}

unint64_t sub_1A9C6D044()
{
  unint64_t result;

  result = qword_1EEB48570;
  if (!qword_1EEB48570)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB48570);
  }
  return result;
}

uint64_t sub_1A9C6D07C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v2 = v1;
  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v26 - v11;
  sub_1A9CE6048();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v12, a1, v4);
  if ((v14 & 1) != 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v12, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  sub_1A9CE6084();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v12, v4);
  if ((v17 & 1) != 0)
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  v15(v9, a1, v4);
  v19 = sub_1A9CE6048();
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = v19;
  v22 = sub_1A9CE6084();
  v24 = v23;
  v18(v9, v4);
  if ((v24 & 1) != 0)
    v22 = 0;
  result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  *v2 = v21;
  v2[1] = v22;
  return result;
}

uint64_t sub_1A9C6D1C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v2 = v1;
  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v26 - v11;
  sub_1A9CE6048();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v12, a1, v4);
  if ((v14 & 1) != 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v12, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  }
  sub_1A9CE6084();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v12, v4);
  if ((v17 & 1) != 0)
    return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  v15(v9, a1, v4);
  v19 = sub_1A9CE6048();
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = v19;
  v22 = sub_1A9CE6084();
  v24 = v23;
  v18(v9, v4);
  if ((v24 & 1) != 0)
    v22 = 0;
  result = ((uint64_t (*)(uint64_t, uint64_t))v18)(a1, v4);
  *(_QWORD *)(v2 + 16) = v21;
  *(_QWORD *)(v2 + 24) = v22;
  return result;
}

uint64_t sub_1A9C6D304(double a1, double a2)
{
  uint64_t v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double i;
  double v11;
  double v12;
  double v13;
  double j;
  uint64_t v15;
  uint64_t v17[4];

  *(_OWORD *)v17 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)((char *)&v17[1] + 3) = *(_OWORD *)(v2 + 27);
  sub_1A9BD535C();
  if (v5 < a1)
  {
    v6 = sub_1A9BE25FC(v17[0], v17[1]);
    v7 = a1 / 60.0 / 60.0 / 24.0;
    if (qword_1EEB42CC0 != -1)
      swift_once();
    v8 = *(double *)&qword_1EEB572A8;
    v9 = v6 - v7 * *(double *)&qword_1EEB572A8;
    if (qword_1EEB42CB8 != -1)
    {
      swift_once();
      v8 = *(double *)&qword_1EEB572A8;
    }
    for (i = v8 - *(double *)&qword_1EEB572A0; v9 < *(double *)&qword_1EEB572A0; v9 = i + v9)
      ;
    while (v8 <= v9)
      v9 = v9 - i;
LABEL_22:
    *(_QWORD *)v2 = sub_1A9C6C888(v9);
    *(_QWORD *)(v2 + 8) = v15;
    return 1;
  }
  if (v5 > a2)
  {
    v11 = sub_1A9BE25FC(v17[0], v17[1]);
    v12 = a2 / 60.0 / 60.0 / 24.0;
    if (qword_1EEB42CC0 != -1)
      swift_once();
    v13 = *(double *)&qword_1EEB572A8;
    v9 = v11 - v12 * *(double *)&qword_1EEB572A8;
    if (qword_1EEB42CB8 != -1)
    {
      swift_once();
      v13 = *(double *)&qword_1EEB572A8;
    }
    for (j = v13 - *(double *)&qword_1EEB572A0; v9 < *(double *)&qword_1EEB572A0; v9 = j + v9)
      ;
    while (v13 <= v9)
      v9 = v9 - j;
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_1A9C6D500(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;

  if ((a2 | result) < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v3 = *v2;
  v4 = *v2 + result;
  if (!__OFADD__(*v2, result))
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      v5 = -24;
      if ((uint64_t)v4 > -24)
        v5 = *v2 + result;
      if (v4 >= 0xFFFFFFFFFFFFFFE8)
        v6 = *v2 + result;
      else
        v6 = v4 + 1;
      v7 = __CFADD__(v4, 24);
      v8 = v3 + result;
      v9 = (v5 - v6) / 0x18;
      if (!v7)
        ++v9;
      v4 = v8 + 24 * v9 + 24;
    }
    else if (v4 >= 0x18)
    {
      v4 = (v3 + result - 24) % 0x18uLL;
    }
    v10 = v2[1];
    v11 = v10 + a2;
    if (__OFADD__(v10, a2))
      goto LABEL_27;
    if (v11 < 60)
    {
      v2[2] = v4;
      v2[3] = v11;
      return result;
    }
    v12 = v4 ^ 0x7FFFFFFFFFFFFFFFLL;
    v13 = v10 + a2;
    v14 = 119;
    if (v11 < 119)
      v14 = v11;
    v15 = (v13 - v14 + 59) / 0x3CuLL;
    while (v12 > v15)
    {
      v16 = v11 - 60;
      ++v4;
      v17 = v11 <= 119;
      v11 -= 60;
      if (v17)
      {
        v2[2] = v4;
        v2[3] = v16;
        return result;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_1A9C6D600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48578;
  if (!qword_1EEB48578)
  {
    v1 = sub_1A9CE60C0();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CAEAE0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48578);
  }
  return result;
}

id SleepScheduleProviderWrapper.provider.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_1A9C6D650()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t sub_1A9C6D668()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1A9C6D6A8()
{
  return swift_retain();
}

uint64_t sub_1A9C6D6C0()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C6D710()
{
  return swift_retain();
}

uint64_t sub_1A9C6D728()
{
  return swift_retain();
}

uint64_t sub_1A9C6D740()
{
  return swift_retain();
}

uint64_t SleepScheduleProviderWrapper.__allocating_init(sleepStore:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  type metadata accessor for SleepScheduleProvider();
  *(_QWORD *)(v2 + 16) = SleepScheduleProvider.__allocating_init(sleepStore:)(a1);
  return v2;
}

uint64_t SleepScheduleProviderWrapper.init(sleepStore:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  type metadata accessor for SleepScheduleProvider();
  *(_QWORD *)(v2 + 16) = SleepScheduleProvider.__allocating_init(sleepStore:)(a1);
  return v2;
}

uint64_t SleepScheduleProviderWrapper.__allocating_init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;

  v8 = swift_allocObject();
  v9 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  *(_QWORD *)(v8 + 16) = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
  return v8;
}

uint64_t SleepScheduleProviderWrapper.init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v10;

  v5 = v4;
  v10 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  *(_QWORD *)(v5 + 16) = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
  return v5;
}

uint64_t SleepScheduleProviderWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SleepScheduleProviderWrapper.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_1A9C6D910()
{
  uint64_t v0;

  return objc_retain(*(id *)(*(_QWORD *)(*(_QWORD *)v0 + 16)
                           + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore));
}

uint64_t sub_1A9C6D92C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16)
                 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1A9C6D970()
{
  return swift_retain();
}

uint64_t sub_1A9C6D98C()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C6D9E0()
{
  return swift_retain();
}

uint64_t sub_1A9C6D9FC()
{
  return swift_retain();
}

uint64_t sub_1A9C6DA18()
{
  return swift_retain();
}

uint64_t type metadata accessor for SleepScheduleProviderWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepScheduleProviderWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.sleepStore.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentDateProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentSchedulePublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.nextOccurrencePublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentGoalPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentWindDownDurationPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.currentScheduleEnabledPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.__allocating_init(sleepStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SleepScheduleProviderWrapper.__allocating_init(sleepStore:schedule:currentDateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

id sub_1A9C6DAC4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
  v8[0] = 0;
  v2 = objc_msgSend(v1, sel_sleepScheduleModelWithError_, v8);
  if (v2)
  {
    v3 = v2;
    v4 = v8[0];
  }
  else
  {
    v5 = v8[0];
    v6 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8570]), sel_init);
  }
  return v3;
}

id ScheduleOccurrenceViewControllerRepresentation.init(sleepStore:provenanceSource:isEditingSchedule:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  id v12;
  id result;

  type metadata accessor for SleepScheduleProvider();
  v12 = a1;
  result = SleepScheduleProvider.__allocating_init(sleepStore:)(v12);
  *(_QWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = result;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = a4;
  *(_BYTE *)(a6 + 40) = a5;
  return result;
}

id ScheduleOccurrenceViewControllerRepresentation.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id result;
  void *v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  void *v40;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  _QWORD v52[5];

  v47 = a1;
  v44 = sub_1A9CE62E8();
  v49 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE6444();
  v50 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v13 = (char *)&v43 - v12;
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v43 - v15;
  v17 = *(id *)(v1 + 8);
  v18 = sub_1A9C6E00C();

  v19 = v17;
  v20 = sub_1A9C6DAC4();

  v21 = objc_msgSend((id)objc_opt_self(), sel_hk_gregorianCalendar);
  sub_1A9CE63D8();

  sub_1A9CE62DC();
  v48 = v4;
  v22 = (void *)sub_1A9CE6258();
  v23 = (void *)sub_1A9CE63CC();
  v45 = v20;
  v46 = v18;
  v24 = objc_msgSend(v20, sel_generateOverrideOccurrenceFromTemplateForCurrentDate_gregorianCalendar_schedule_, v22, v23, v18);

  v25 = (void *)objc_opt_self();
  v26 = v19;
  result = objc_msgSend(v25, sel_sharedBehavior);
  if (result)
  {
    v28 = result;
    v29 = objc_msgSend(result, sel_hksp_activePairedDeviceSupportsSleep);

    v30 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v30(v13, v16, v5);
    v52[3] = type metadata accessor for SleepScheduleProvider();
    v52[4] = &protocol witness table for SleepScheduleProvider;
    v52[0] = v26;
    v31 = (char *)v26;
    v32 = v24;
    result = objc_msgSend(v32, sel_isSingleDayOverride);
    if ((_DWORD)result)
    {
      v33 = *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentGoalPublisher];
      v34 = *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentSchedulePublisher];
      v30(v9, v13, v5);
      type metadata accessor for ScheduleOccurrenceEditModel();
      swift_allocObject();
      v35 = v32;
      swift_retain();
      swift_retain();
      v36 = sub_1A9BD5470(v35, 1, 1, 0, v33, v34, v29, (uint64_t)v9);

      swift_release();
      swift_release();
      sub_1A9B923D4((uint64_t)v52, (uint64_t)v51);
      v37 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
      v38 = (char *)sub_1A9B92438(v36, 0, (uint64_t)v51);

      swift_release();
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v13, v5);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);

      sub_1A9C6E85C();
      sub_1A9CE76E0();
      v40 = (void *)v51[0];
      v41 = &v38[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
      swift_beginAccess();
      *((_QWORD *)v41 + 1) = &protocol witness table for ScheduleOccurrenceViewControllerRepresentation.Coordinator;
      swift_unknownObjectWeakAssign();

      v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F7B8]), sel_initWithRootViewController_, v38);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v44);
      v39(v16, v5);
      return v42;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1A9C6E00C()
{
  id v1;

  swift_retain();
  sub_1A9CE6DD4();
  swift_release();
  if (v1
    && (objc_msgSend(v1, sel_mutableCopy),
        v1,
        sub_1A9CE88EC(),
        swift_unknownObjectRelease(),
        sub_1A9C6F564(),
        swift_dynamicCast()))
  {
    return v1;
  }
  else
  {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);
  }
}

id ScheduleOccurrenceViewControllerRepresentation.makeCoordinator()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  objc_class *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  v7 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  v8 = (char *)objc_allocWithZone(v7);
  swift_unknownObjectWeakInit();
  v9 = &v8[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_QWORD *)v9 = v1;
  *((_QWORD *)v9 + 1) = v2;
  *((_QWORD *)v9 + 2) = v4;
  *((_QWORD *)v9 + 3) = v3;
  *((_QWORD *)v9 + 4) = v5;
  v9[40] = v6;
  v14.receiver = v8;
  v14.super_class = v7;
  v10 = v1;
  v11 = v2;
  v12 = v4;
  swift_retain();
  swift_retain();
  return objc_msgSendSuper2(&v14, sel_init);
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  char v5;
  char *v6;
  __int128 v8;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v8 = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_unknownObjectWeakInit();
  v6 = &v3[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *((_OWORD *)v6 + 1) = v8;
  *((_QWORD *)v6 + 4) = v4;
  v6[40] = v5;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1A9C6E22C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;
  id v12;

  v3 = *a1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 24);
  v12 = *(id *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_BYTE *)(v3 + 40);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  swift_retain();
  swift_retain();
  v9 = v4;
  v10 = v5;
  return v12;
}

uint64_t sub_1A9C6E2C0(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v15;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *a2 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v9 = *(void **)(v8 + 8);
  v10 = *(void **)(v8 + 16);
  v15 = *(void **)v8;
  *(_QWORD *)v8 = v2;
  *(_QWORD *)(v8 + 8) = v3;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v6;
  *(_BYTE *)(v8 + 40) = v7;
  swift_retain();
  swift_retain();
  v11 = v2;
  v12 = v3;
  v13 = v5;
  swift_release();

  return swift_release();
}

id sub_1A9C6E390@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;
  id v12;

  v3 = v1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 24);
  v12 = *(id *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_BYTE *)(v3 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  swift_retain();
  swift_retain();
  v9 = v4;
  v10 = v5;
  return v12;
}

uint64_t sub_1A9C6E420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v10;

  v10 = *(_OWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = v1 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v6 = *(void **)v5;
  v7 = *(void **)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v10;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v4;
  swift_release();

  return swift_release();
}

uint64_t (*sub_1A9C6E4C4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.init(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  char v4;
  char *v5;
  __int128 v7;
  objc_super v8;

  v7 = *(_OWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  swift_unknownObjectWeakInit();
  v5 = &v1[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v7;
  *((_QWORD *)v5 + 4) = v3;
  v5[40] = v4;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  return objc_msgSendSuper2(&v8, sel_init);
}

void sub_1A9C6E590(uint64_t a1, uint64_t a2, char a3)
{
  sub_1A9C6E918(a2, a3);
}

void sub_1A9C6E59C(uint64_t a1, uint64_t a2)
{
  sub_1A9C6ED3C(a2);
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ScheduleOccurrenceViewControllerRepresentation.Coordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ScheduleOccurrenceViewControllerRepresentation.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1A9C6E6C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id result;
  objc_super v16;

  v3 = *(void **)v1;
  v4 = *(void **)(v1 + 8);
  v6 = *(void **)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  v9 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator();
  v10 = (char *)objc_allocWithZone(v9);
  swift_unknownObjectWeakInit();
  v11 = &v10[OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent];
  *(_QWORD *)v11 = v3;
  *((_QWORD *)v11 + 1) = v4;
  *((_QWORD *)v11 + 2) = v6;
  *((_QWORD *)v11 + 3) = v5;
  *((_QWORD *)v11 + 4) = v7;
  v11[40] = v8;
  v16.receiver = v10;
  v16.super_class = v9;
  v12 = v3;
  v13 = v4;
  v14 = v6;
  swift_retain();
  swift_retain();
  result = objc_msgSendSuper2(&v16, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_1A9C6E798()
{
  sub_1A9C6E8B4();
  return sub_1A9CE76A4();
}

uint64_t sub_1A9C6E7E8()
{
  sub_1A9C6E8B4();
  return sub_1A9CE7674();
}

void sub_1A9C6E838()
{
  sub_1A9C6E8B4();
  sub_1A9CE7698();
  __break(1u);
}

void sub_1A9C6E85C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48580)
  {
    sub_1A9C6E8B4();
    v0 = sub_1A9CE76EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48580);
  }
}

unint64_t sub_1A9C6E8B4()
{
  unint64_t result;

  result = qword_1EEB48588;
  if (!qword_1EEB48588)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewControllerRepresentation, &type metadata for ScheduleOccurrenceViewControllerRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB48588);
  }
  return result;
}

uint64_t type metadata accessor for ScheduleOccurrenceViewControllerRepresentation.Coordinator()
{
  return objc_opt_self();
}

void sub_1A9C6E918(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t aBlock;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, void *);
  void *v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  swift_getObjectType();
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v6 = sub_1A9CE6990();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EEB572B0);
  v7 = sub_1A9CE6978();
  v8 = sub_1A9CE867C();
  if (os_log_type_enabled(v7, v8))
  {
    v30 = v6;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    aBlock = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = sub_1A9CE8D48();
    v37 = sub_1A9B91D6C(v11, v12, &aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] Did modify", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v10, -1, -1);
    MEMORY[0x1AF420344](v9, -1, -1);
  }

  v13 = v3 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v14 = *(id *)(v13 + 8);
  v15 = sub_1A9C6E00C();

  if ((a2 & 1) != 0)
  {
    v16 = objc_msgSend(v15, sel_overrideOccurrence);
    if (v16)
    {
      v17 = v16;
      if (qword_1ED262DB8 != -1)
        swift_once();
      __swift_project_value_buffer(v6, (uint64_t)qword_1ED2630B8);
      v18 = sub_1A9CE6978();
      v19 = sub_1A9CE867C();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        aBlock = v21;
        v30 = a1;
        *(_DWORD *)v20 = 136446210;
        v22 = sub_1A9CE8D48();
        sub_1A9B91D6C(v22, v23, &aBlock);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] Removing override", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v21, -1, -1);
        MEMORY[0x1AF420344](v20, -1, -1);
      }

      objc_msgSend(v15, sel_removeOccurrence_, v17);
    }
  }
  objc_msgSend(v15, sel_saveOccurrence_, a1, v30);
  v24 = *(void **)v13;
  v35 = j_nullsub_1;
  v36 = 0;
  aBlock = MEMORY[0x1E0C809B0];
  v32 = 1107296256;
  v33 = sub_1A9BE4D94;
  v34 = &block_descriptor_3_2;
  v25 = _Block_copy(&aBlock);
  v26 = v24;
  v27 = v15;
  objc_msgSend(v26, sel_saveCurrentSleepSchedule_completion_, v27, v25);
  _Block_release(v25);

  v28 = *(_QWORD *)(v13 + 32);
  v29 = *(_BYTE *)(v13 + 40);
  aBlock = *(_QWORD *)(v13 + 24);
  v32 = v28;
  LOBYTE(v33) = v29;
  sub_1A9C6F4F8();
  sub_1A9CE7EF0();

}

void sub_1A9C6ED3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t aBlock;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, void *);
  void *v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  swift_getObjectType();
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEB572B0);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    aBlock = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1A9CE8D48();
    v26 = sub_1A9B91D6C(v9, v10, &aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] Did finish by deleting", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  v11 = v2 + OBJC_IVAR____TtCV13SleepHealthUI46ScheduleOccurrenceViewControllerRepresentation11Coordinator_parent;
  swift_beginAccess();
  v12 = *(id *)(v11 + 8);
  v13 = sub_1A9C6E00C();

  objc_msgSend(v13, sel_removeOccurrence_, a1);
  v14 = *(void **)v11;
  v24 = nullsub_1;
  v25 = 0;
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = sub_1A9BE4D94;
  v23 = &block_descriptor_25;
  v15 = _Block_copy(&aBlock);
  v16 = v14;
  v17 = v13;
  objc_msgSend(v16, sel_saveCurrentSleepSchedule_completion_, v17, v15);
  _Block_release(v15);

  v18 = *(_QWORD *)(v11 + 32);
  v19 = *(_BYTE *)(v11 + 40);
  aBlock = *(_QWORD *)(v11 + 24);
  v21 = v18;
  LOBYTE(v22) = v19;
  sub_1A9C6F4F8();
  sub_1A9CE7EF0();

}

uint64_t sub_1A9C6EFC4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[3];

  swift_getObjectType();
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEB572B0);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8[0] = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1A9CE8D48();
    sub_1A9B91D6C(v5, v6, v8);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] Did cancel", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  swift_beginAccess();
  sub_1A9C6F4F8();
  return sub_1A9CE7EF0();
}

unint64_t sub_1A9C6F194()
{
  unint64_t result;

  result = qword_1EEB485A0;
  if (!qword_1EEB485A0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewControllerRepresentation, &type metadata for ScheduleOccurrenceViewControllerRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB485A0);
  }
  return result;
}

uint64_t destroy for ScheduleOccurrenceViewControllerRepresentation(id *a1)
{

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = v3;
  v8 = v4;
  v9 = v6;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ScheduleOccurrenceViewControllerRepresentation(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewControllerRepresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewControllerRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewControllerRepresentation()
{
  return &type metadata for ScheduleOccurrenceViewControllerRepresentation;
}

uint64_t method lookup function for ScheduleOccurrenceViewControllerRepresentation.Coordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.parent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewController(_:didModify:deleteOverride:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewController(_:didFinishByDeleting:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerRepresentation.Coordinator.scheduleOccurrenceViewControllerDidCancel(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

void sub_1A9C6F4F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB446D8)
  {
    v0 = sub_1A9CE7F14();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB446D8);
  }
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

unint64_t sub_1A9C6F564()
{
  unint64_t result;

  result = qword_1EEB45698;
  if (!qword_1EEB45698)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB45698);
  }
  return result;
}

uint64_t InfographicGrid.init(useImplicitHeightForGraphics:metricsTopPadding:graphics:metrics:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;

  sub_1A9CE7DC4();
  if (qword_1EEB42D88 != -1)
    swift_once();
  v14 = qword_1EEB485F8;
  v15 = qword_1EEB42D90;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v16 = qword_1EEB48600;
  *(_BYTE *)a6 = a1 & 1;
  *(double *)(a6 + 8) = a7;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = a4;
  *(_QWORD *)(a6 + 40) = a5;
  *(_BYTE *)(a6 + 48) = v18;
  *(_QWORD *)(a6 + 56) = v19;
  *(_QWORD *)(a6 + 64) = v14;
  *(_QWORD *)(a6 + 72) = v16;
  return swift_retain();
}

uint64_t sub_1A9C6F6BC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

double static CGFloat.metricsTopPadding.getter()
{
  return sub_1A9BD409C(&qword_1EEB42D70, (uint64_t)&qword_1EEB485E0);
}

uint64_t InfographicGrid.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v56 = a2;
  v4 = a1[2];
  sub_1A9CE7164();
  sub_1A9C716BC();
  sub_1A9CE7164();
  sub_1A9CE7164();
  v44 = a1[3];
  sub_1A9CE7164();
  sub_1A9CE7164();
  swift_getTupleTypeMetadata2();
  v5 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v5);
  v6 = sub_1A9CE7EB4();
  v49 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v43 = (char *)&v41 - v8;
  v9 = sub_1A9CE6E1C();
  v47 = MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v6);
  *(_QWORD *)&v63 = v9;
  *((_QWORD *)&v63 + 1) = v6;
  v10 = v9;
  v45 = v9;
  *(_QWORD *)&v64 = MEMORY[0x1E0C96020];
  *((_QWORD *)&v64 + 1) = v47;
  v11 = MEMORY[0x1E0C96020];
  v12 = sub_1A9CE71B8();
  v55 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v46 = (char *)&v41 - v14;
  v51 = MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v12);
  *(_QWORD *)&v63 = v10;
  *((_QWORD *)&v63 + 1) = v12;
  *(_QWORD *)&v64 = v11;
  *((_QWORD *)&v64 + 1) = v51;
  v52 = sub_1A9CE71B8();
  v54 = *(_QWORD *)(v52 - 8);
  v16 = MEMORY[0x1E0C80A78](v52, v15);
  v48 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18);
  v53 = (uint64_t)&v41 - v19;
  v20 = v2[3];
  v65 = v2[2];
  v66 = v20;
  v67 = v2[4];
  v21 = v2[1];
  v63 = *v2;
  v64 = v21;
  sub_1A9CE7404();
  v42 = v4;
  v22 = v44;
  v57 = v4;
  v58 = v44;
  v24 = a1[5];
  v59 = a1[4];
  v23 = v59;
  v60 = v24;
  v61 = &v63;
  sub_1A9CE7EA8();
  type metadata accessor for ObservableDarwinNotification();
  sub_1A9B92B9C(&qword_1EEB479E0, (uint64_t (*)(uint64_t))type metadata accessor for ObservableDarwinNotification, (uint64_t)&protocol conformance descriptor for ObservableDarwinNotification);
  v62 = sub_1A9CE6D98();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v4;
  *(_QWORD *)(v25 + 24) = v22;
  *(_QWORD *)(v25 + 32) = v23;
  *(_QWORD *)(v25 + 40) = v24;
  v26 = v66;
  *(_OWORD *)(v25 + 80) = v65;
  *(_OWORD *)(v25 + 96) = v26;
  *(_OWORD *)(v25 + 112) = v67;
  v27 = v64;
  *(_OWORD *)(v25 + 48) = v63;
  *(_OWORD *)(v25 + 64) = v27;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_1A9C717B8;
  *(_QWORD *)(v28 + 24) = v25;
  sub_1A9C717E4((uint64_t)&v63);
  v29 = v46;
  v30 = v43;
  sub_1A9CE7C20();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v6);
  v62 = sub_1A9CE6D98();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v42;
  *(_QWORD *)(v31 + 24) = v22;
  *(_QWORD *)(v31 + 32) = v23;
  *(_QWORD *)(v31 + 40) = v24;
  v32 = v66;
  *(_OWORD *)(v31 + 80) = v65;
  *(_OWORD *)(v31 + 96) = v32;
  *(_OWORD *)(v31 + 112) = v67;
  v33 = v64;
  *(_OWORD *)(v31 + 48) = v63;
  *(_OWORD *)(v31 + 64) = v33;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = sub_1A9C71890;
  *(_QWORD *)(v34 + 24) = v31;
  sub_1A9C717E4((uint64_t)&v63);
  v35 = (uint64_t)v48;
  v36 = v50;
  sub_1A9CE7C20();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v36);
  v37 = v52;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v52);
  v38 = v53;
  sub_1A9C3C998(v35, v37, v53);
  v39 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v39(v35, v37);
  sub_1A9C3899C(v38, v37, v56);
  return ((uint64_t (*)(uint64_t, uint64_t))v39)(v38, v37);
}

void sub_1A9C6FC3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[17];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a5;
  v45 = a4;
  v44 = a6;
  v42[10] = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C716BC();
  v49 = a3;
  v10 = sub_1A9CE7164();
  v42[12] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v10);
  v42[11] = (char *)v42 - v11;
  v42[13] = v12;
  v43 = sub_1A9CE7164();
  v42[14] = *(_QWORD *)(v43 - 8);
  v14 = MEMORY[0x1E0C80A78](v43, v13);
  v42[16] = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v42[9] = (char *)v42 - v18;
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v42[15] = (char *)v42 - v21;
  v22 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1A9CE7164();
  v42[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v28 = sub_1A9CE7164();
  v42[7] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v42[5] = (char *)v42 - v30;
  v31 = sub_1A9CE7164();
  v46 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v42[8] = (char *)v42 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v33, v35);
  v42[6] = (char *)v42 - v37;
  v39 = MEMORY[0x1E0C80A78](v36, v38);
  v47 = (char *)v42 - v40;
  (*(void (**)(uint64_t))(a1 + 16))(v39);
  if ((*(_BYTE *)a1 & 1) == 0 && qword_1EEB42D68 != -1)
    swift_once();
  v42[4] = v31;
  sub_1A9CE7FEC();
  v41 = v45;
  sub_1A9CE7BA8();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, a2);
  v51 = a2;
  v52 = v49;
  v53 = v41;
  v54 = v50;
  type metadata accessor for InfographicGrid();
}

void sub_1A9C70478()
{
  type metadata accessor for InfographicGrid();
}

uint64_t sub_1A9C704A4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 17) = 1;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

void sub_1A9C704F8()
{
  type metadata accessor for InfographicGrid();
}

uint64_t sub_1A9C70524()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 17) = 0;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

uint64_t sub_1A9C70578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  sub_1A9CE7DC4();
  if (qword_1EEB42D88 != -1)
    swift_once();
  v4 = qword_1EEB485F8;
  v5 = qword_1EEB42D90;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = qword_1EEB48600;
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return swift_retain();
}

uint64_t sub_1A9C70650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v2 = v1;
  v27 = a1;
  sub_1A9C71EB8();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C72158(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = sub_1A9CE7404();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  sub_1A9C72190();
  sub_1A9C70910(v1, (uint64_t)&v6[*(int *)(v12 + 44)]);
  type metadata accessor for ObservableDarwinNotification();
  sub_1A9B92B9C(&qword_1EEB479E0, (uint64_t (*)(uint64_t))type metadata accessor for ObservableDarwinNotification, (uint64_t)&protocol conformance descriptor for ObservableDarwinNotification);
  v13 = sub_1A9CE6D98();
  v29 = *(_QWORD *)v2;
  v28 = *(_OWORD *)(v2 + 8);
  v26 = *(_QWORD *)(v2 + 32);
  v14 = swift_allocObject();
  v15 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v2 + 32);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_1A9C721F8;
  *(_QWORD *)(v16 + 24) = v14;
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C71EB8);
  *(_QWORD *)&v11[*(int *)(v8 + 52)] = v13;
  v17 = (uint64_t (**)())&v11[*(int *)(v8 + 56)];
  *v17 = sub_1A9C72A98;
  v17[1] = (uint64_t (*)())v16;
  sub_1A9C72224((uint64_t)&v29);
  sub_1A9C7224C((uint64_t)&v28);
  swift_retain();
  swift_retain();
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C71EB8);
  v18 = sub_1A9CE6D98();
  v19 = swift_allocObject();
  v20 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(v2 + 32);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_1A9C722B4;
  *(_QWORD *)(v21 + 24) = v19;
  v22 = v27;
  sub_1A9BA6F90((uint64_t)v11, v27, (uint64_t (*)(_QWORD))sub_1A9C72158);
  sub_1A9C72318(0, &qword_1EEB48708, sub_1A9C72158, (void (*)(void))sub_1A9C723A8);
  *(_QWORD *)(v22 + *(int *)(v23 + 52)) = v18;
  v24 = (uint64_t (**)())(v22 + *(int *)(v23 + 56));
  *v24 = sub_1A9C72A98;
  v24[1] = (uint64_t (*)())v21;
  sub_1A9C72224((uint64_t)&v29);
  sub_1A9C7224C((uint64_t)&v28);
  swift_retain();
  swift_retain();
  return sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C72158);
}

uint64_t sub_1A9C70910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char *v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  char v163;
  __int128 v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  char v183;
  char v184;
  char v185;
  __int128 v186;

  sub_1A9C7213C(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v145 - v11;
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v145 - v14;
  sub_1A9C72080(0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v18, v21);
  v24 = (char *)&v145 - v23;
  MEMORY[0x1E0C80A78](v22, v25);
  v159 = (uint64_t)&v145 - v26;
  sub_1A9C72008(0);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  MEMORY[0x1E0C80A78](v31, v32);
  v160 = (uint64_t)&v145 - v35;
  v36 = *(_QWORD **)a1;
  v161 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  if (v161)
  {
    v157 = v34;
    v158 = a1;
    v152 = v8;
    v153 = v24;
    v147 = v12;
    v148 = v33;
    v149 = v15;
    v150 = v20;
    v151 = a2;
    v38 = v36[7];
    v37 = v36[8];
    v162 = v36;
    v156 = v36 + 4;
    __swift_project_boxed_opaque_existential_1Tm(v36 + 4, v38);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 + 8) + 8))(v38);
    v41 = v40;
    v43 = v42 & 1;
    sub_1A9CE77DC();
    v44 = sub_1A9CE7998();
    v46 = v45;
    v48 = v47;
    swift_release();
    sub_1A9BAA670(v39, v41, v43);
    swift_bridgeObjectRelease();
    sub_1A9CE7818();
    v20 = (char *)sub_1A9CE795C();
    v15 = v49;
    LOBYTE(v12) = v50;
    sub_1A9BAA670(v44, v46, v48 & 1);
    swift_bridgeObjectRelease();
    if (qword_1ED262D40 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v51 = v12 & 1;
  v52 = sub_1A9CE7968();
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_1A9BAA670((uint64_t)v20, (uint64_t)v15, v51);
  swift_bridgeObjectRelease();
  v186 = *(_OWORD *)(v158 + 8);
  v164 = *(_OWORD *)(v158 + 8);
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  v158 = v59;
  sub_1A9CE7DD0();
  v60 = 0;
  if (v185 == 1)
  {
    sub_1A9CE7C50();
    v60 = sub_1A9CE7CC8();
    swift_release();
  }
  v61 = sub_1A9CE7FEC();
  *(_QWORD *)&v164 = v52;
  *((_QWORD *)&v164 + 1) = v54;
  LODWORD(v154) = v56 & 1;
  v165 = v56 & 1;
  v166 = v58;
  v167 = v60;
  v168 = v61;
  v169 = v62;
  v155 = v58;
  v63 = v162;
  v64 = v162[7];
  v65 = v162[8];
  __swift_project_boxed_opaque_existential_1Tm(v156, v64);
  v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v64, v65);
  sub_1A9C72024();
  sub_1A9C723C4();
  v67 = v54;
  v68 = v52;
  v69 = v157;
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v68, v67, v154);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1A9BA0D6C(v69, v160, (uint64_t (*)(_QWORD))sub_1A9C72008);
  if ((unint64_t)v161 < 2)
  {
    __break(1u);
  }
  else
  {
    v71 = v63[12];
    v70 = v63[13];
    v155 = v63 + 9;
    __swift_project_boxed_opaque_existential_1Tm(v63 + 9, v71);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v70 + 8) + 8))(v71);
    v67 = v72;
    v66 = v73;
    if (qword_1EEB42EB8 == -1)
      goto LABEL_7;
  }
  swift_once();
LABEL_7:
  v74 = sub_1A9CE7998();
  v156 = v75;
  v157 = v76;
  v78 = v77;
  sub_1A9BAA670(v60, v67, v66 & 1);
  swift_bridgeObjectRelease();
  v164 = v186;
  sub_1A9CE7DD0();
  if (v185 == 1)
  {
    sub_1A9CE7C5C();
    v79 = sub_1A9CE7CC8();
    swift_release();
  }
  else
  {
    v79 = 0;
  }
  v80 = sub_1A9CE7FEC();
  v82 = v81;
  v83 = sub_1A9CE7740();
  if (qword_1EEB42D78 != -1)
    swift_once();
  sub_1A9CE6F24();
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v91 = v90;
  v92 = sub_1A9CE774C();
  if (qword_1EEB42D80 != -1)
    swift_once();
  sub_1A9CE6F24();
  v93 = v78 & 1;
  v185 = v93;
  v184 = 0;
  v183 = 0;
  v94 = v156;
  *(_QWORD *)&v164 = v74;
  *((_QWORD *)&v164 + 1) = v156;
  v165 = v93;
  v146 = v74;
  v166 = (_QWORD *)v157;
  LOWORD(v167) = 256;
  v154 = v79;
  v168 = v79;
  v169 = v80;
  v170 = v82;
  v171 = v83;
  v172 = v85;
  v173 = v87;
  v174 = v89;
  v175 = v91;
  v176 = 0;
  v177 = v92;
  v178 = v95;
  v179 = v96;
  v180 = v97;
  v181 = v98;
  v182 = 0;
  v99 = v162;
  v100 = v162[12];
  v101 = v162[13];
  __swift_project_boxed_opaque_existential_1Tm(v155, v100);
  (*(void (**)(uint64_t, uint64_t))(v101 + 16))(v100, v101);
  sub_1A9C7209C(0);
  sub_1A9BC2874(&qword_1EEB48728, (uint64_t (*)(uint64_t))sub_1A9C7209C, sub_1A9C72444);
  v102 = (uint64_t)v153;
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v146, (uint64_t)v94, v93);
  swift_bridgeObjectRelease();
  swift_release();
  result = sub_1A9BA0D6C(v102, v159, (uint64_t (*)(_QWORD))sub_1A9C72080);
  if ((unint64_t)v161 < 3)
  {
    __break(1u);
  }
  else
  {
    v105 = v99[17];
    v104 = v99[18];
    v161 = v99 + 14;
    __swift_project_boxed_opaque_existential_1Tm(v99 + 14, v105);
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v104 + 8) + 8))(v105);
    v108 = v107;
    v110 = v109 & 1;
    sub_1A9CE78C0();
    v111 = sub_1A9CE7998();
    v113 = v112;
    v115 = v114;
    swift_release();
    v116 = v115 & 1;
    sub_1A9BAA670(v106, v108, v110);
    swift_bridgeObjectRelease();
    sub_1A9CE7818();
    v117 = sub_1A9CE795C();
    v119 = v118;
    v121 = v120 & 1;
    sub_1A9BAA670(v111, v113, v116);
    swift_bridgeObjectRelease();
    sub_1A9CE7CE0();
    v122 = sub_1A9CE7968();
    v124 = v123;
    v126 = v125;
    v128 = v127;
    swift_release();
    sub_1A9BAA670(v117, v119, v121);
    swift_bridgeObjectRelease();
    v164 = v186;
    sub_1A9CE7DD0();
    if (v163 == 1)
    {
      sub_1A9CE7CB0();
      v129 = sub_1A9CE7CC8();
      swift_release();
    }
    else
    {
      v129 = 0;
    }
    v158 = v129;
    v130 = v126 & 1;
    v131 = sub_1A9CE7FEC();
    *(_QWORD *)&v164 = v122;
    *((_QWORD *)&v164 + 1) = v124;
    v165 = v130;
    v166 = v128;
    LOWORD(v167) = 256;
    v168 = v129;
    v169 = v131;
    v170 = v132;
    v133 = v162[17];
    v134 = v162[18];
    __swift_project_boxed_opaque_existential_1Tm(v161, v133);
    (*(void (**)(uint64_t, uint64_t))(v134 + 16))(v133, v134);
    sub_1A9C720C4(0);
    sub_1A9C72460();
    v135 = (uint64_t)v147;
    sub_1A9CE7B78();
    swift_bridgeObjectRelease();
    sub_1A9BAA670(v122, v124, v130);
    swift_bridgeObjectRelease();
    swift_release();
    v136 = (uint64_t)v149;
    sub_1A9BA0D6C(v135, (uint64_t)v149, (uint64_t (*)(_QWORD))sub_1A9C7213C);
    v137 = v160;
    v138 = v148;
    sub_1A9BA6F90(v160, v148, (uint64_t (*)(_QWORD))sub_1A9C72008);
    v139 = v159;
    v140 = (uint64_t)v150;
    sub_1A9BA6F90(v159, (uint64_t)v150, (uint64_t (*)(_QWORD))sub_1A9C72080);
    v141 = (uint64_t)v152;
    sub_1A9BA6F90(v136, (uint64_t)v152, (uint64_t (*)(_QWORD))sub_1A9C7213C);
    v142 = v151;
    sub_1A9BA6F90(v138, v151, (uint64_t (*)(_QWORD))sub_1A9C72008);
    sub_1A9C71F84();
    v144 = v143;
    sub_1A9BA6F90(v140, v142 + *(int *)(v143 + 48), (uint64_t (*)(_QWORD))sub_1A9C72080);
    sub_1A9BA6F90(v141, v142 + *(int *)(v144 + 64), (uint64_t (*)(_QWORD))sub_1A9C7213C);
    sub_1A9B97190(v136, (uint64_t (*)(_QWORD))sub_1A9C7213C);
    sub_1A9B97190(v139, (uint64_t (*)(_QWORD))sub_1A9C72080);
    sub_1A9B97190(v137, (uint64_t (*)(_QWORD))sub_1A9C72008);
    sub_1A9B97190(v141, (uint64_t (*)(_QWORD))sub_1A9C7213C);
    sub_1A9B97190(v140, (uint64_t (*)(_QWORD))sub_1A9C72080);
    return sub_1A9B97190(v138, (uint64_t (*)(_QWORD))sub_1A9C72008);
  }
  return result;
}

uint64_t sub_1A9C7133C@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C70650(a1);
}

uint64_t sub_1A9C71374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1A9CE79BC();
}

uint64_t sub_1A9C713E0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9C71420(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1A9C71448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A9C7147C(uint64_t a1)
{
  return sub_1A9C71420(a1);
}

id sub_1A9C7149C(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D2870, &qword_1EEB485D0);
}

double static CGFloat.graphicsTopPadding.getter()
{
  return sub_1A9BD409C(&qword_1EEB42D60, (uint64_t)&qword_1EEB485D0);
}

id sub_1A9C714D0(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D2450, &qword_1EEB485D8);
}

double static CGFloat.graphicsHeight.getter()
{
  return sub_1A9BD409C(&qword_1EEB42D68, (uint64_t)&qword_1EEB485D8);
}

id sub_1A9C7150C(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D2800, &qword_1EEB485E0);
}

id sub_1A9C71524(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D28D0, &qword_1EEB485E8);
}

double static CGFloat.middleMetricTopPadding.getter()
{
  return sub_1A9BD409C(&qword_1EEB42D78, (uint64_t)&qword_1EEB485E8);
}

id sub_1A9C71558(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D2930, &qword_1EEB485F0);
}

double static CGFloat.middleMetricBottomPadding.getter()
{
  return sub_1A9BD409C(&qword_1EEB42D80, (uint64_t)&qword_1EEB485F0);
}

void sub_1A9C7158C()
{
  const void *v0;
  __CFNotificationCenter *v1;
  __CFString *v2;

  type metadata accessor for ObservableDarwinNotification();
  v0 = (const void *)swift_allocObject();
  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  v2 = (__CFString *)sub_1A9CE82B0();
  CFNotificationCenterAddObserver(v1, v0, (CFNotificationCallback)sub_1A9C42DA4, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  qword_1EEB485F8 = (uint64_t)v0;
}

void sub_1A9C71624()
{
  const void *v0;
  __CFNotificationCenter *v1;
  __CFString *v2;

  type metadata accessor for ObservableDarwinNotification();
  v0 = (const void *)swift_allocObject();
  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  v2 = (__CFString *)sub_1A9CE82B0();
  CFNotificationCenterAddObserver(v1, v0, (CFNotificationCallback)sub_1A9C42DA4, v2, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  qword_1EEB48600 = (uint64_t)v0;
}

void sub_1A9C716BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48608)
  {
    sub_1A9B94CA0(255, &qword_1ED263360, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1A9C71734();
    v0 = sub_1A9CE74D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48608);
  }
}

unint64_t sub_1A9C71734()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEB48610[0];
  if (!qword_1EEB48610[0])
  {
    sub_1A9B94CA0(255, &qword_1ED263360, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0CDF5B0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0798], v1, &v2);
    atomic_store(result, qword_1EEB48610);
  }
  return result;
}

void sub_1A9C717A4(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1A9C6FC3C(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1A9C717B8()
{
  return sub_1A9C7189C((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C70478);
}

uint64_t sub_1A9C717C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1A9C717E4(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t objectdestroyTm_9()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C71890()
{
  return sub_1A9C7189C((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C704F8);
}

uint64_t sub_1A9C7189C(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1A9C718B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C718E4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A9C718EC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C7192C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C719BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A9C71A78(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t sub_1A9C71AFC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A9C71B44(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for InfographicGrid()
{
  JUMPOUT(0x1AF4201F4);
}

uint64_t sub_1A9C71BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A9CE6E1C();
  sub_1A9CE7164();
  sub_1A9C716BC();
  sub_1A9CE7164();
  sub_1A9CE7164();
  sub_1A9CE7164();
  sub_1A9CE7164();
  swift_getTupleTypeMetadata2();
  v0 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v0);
  v1 = sub_1A9CE7EB4();
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v1);
  v2 = sub_1A9CE71B8();
  v3 = MEMORY[0x1E0CDA108];
  MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v2);
  v4 = sub_1A9CE71B8();
  return MEMORY[0x1AF420284](v3, v4);
}

uint64_t destroy for StandardMetrics()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for StandardMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StandardMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StandardMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for StandardMetrics()
{
  return &type metadata for StandardMetrics;
}

uint64_t sub_1A9C71EA8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C71EB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48698)
  {
    sub_1A9C71F30();
    sub_1A9B92B9C(&qword_1EEB486E8, (uint64_t (*)(uint64_t))sub_1A9C71F30, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48698);
  }
}

void sub_1A9C71F30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB486A0)
  {
    sub_1A9C71F84();
    v0 = sub_1A9CE8010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB486A0);
  }
}

void sub_1A9C71F84()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB486A8)
  {
    sub_1A9C72008(255);
    sub_1A9C72080(255);
    sub_1A9C7213C(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB486A8);
  }
}

void sub_1A9C72008(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB486B0, (void (*)(uint64_t))sub_1A9C72024, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
}

void sub_1A9C72024()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB486B8)
  {
    sub_1A9C716BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB486B8);
  }
}

void sub_1A9C72080(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB486C0, sub_1A9C7209C, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
}

void sub_1A9C7209C(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB486C8, sub_1A9C720B0);
}

void sub_1A9C720B0(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB486D0, sub_1A9C720C4);
}

void sub_1A9C720C4(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB486D8, (void (*)(uint64_t))sub_1A9C720E0, (void (*)(uint64_t))sub_1A9C716BC);
}

void sub_1A9C720E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43898)
  {
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43898);
  }
}

void sub_1A9C7213C(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB486E0, sub_1A9C720C4, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
}

void sub_1A9C72158(uint64_t a1)
{
  sub_1A9C72318(a1, &qword_1EEB486F0, (void (*)(uint64_t))sub_1A9C71EB8, (void (*)(void))sub_1A9C72174);
}

uint64_t sub_1A9C72174()
{
  return sub_1A9B92B9C(&qword_1EEB486F8, (uint64_t (*)(uint64_t))sub_1A9C71EB8, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9C72190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48700)
  {
    sub_1A9C71F30();
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48700);
  }
}

uint64_t sub_1A9C721F8()
{
  return sub_1A9C722BC();
}

uint64_t sub_1A9C72200()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C72224(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A9C7224C(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t objectdestroy_13Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C722B4()
{
  return sub_1A9C722BC();
}

uint64_t sub_1A9C722BC()
{
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

void sub_1A9C72318(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9CE6E1C();
    a3(255);
    a4();
    v7 = sub_1A9CE71B8();
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1A9C723A8()
{
  return sub_1A9B92B9C(&qword_1EEB48710, (uint64_t (*)(uint64_t))sub_1A9C72158, MEMORY[0x1E0CDA108]);
}

unint64_t sub_1A9C723C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB48718;
  if (!qword_1EEB48718)
  {
    sub_1A9C72024();
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB48720, (uint64_t (*)(uint64_t))sub_1A9C716BC, MEMORY[0x1E0CDB838]);
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB48718);
  }
  return result;
}

uint64_t sub_1A9C72444()
{
  return sub_1A9BC2874(&qword_1EEB48730, (uint64_t (*)(uint64_t))sub_1A9C720B0, (uint64_t (*)(void))sub_1A9C72460);
}

unint64_t sub_1A9C72460()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48738[0];
  if (!qword_1EEB48738[0])
  {
    sub_1A9C720C4(255);
    v2 = v1;
    v3[0] = sub_1A9BD1E9C();
    v3[1] = sub_1A9B92B9C(&qword_1EEB48720, (uint64_t (*)(uint64_t))sub_1A9C716BC, MEMORY[0x1E0CDB838]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, qword_1EEB48738);
  }
  return result;
}

uint64_t sub_1A9C724E0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9C72554(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1A9C72610(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9C72650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A9C726B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C7272C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C72798(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A9C72814 + 4 * byte_1A9CF3F80[v10]))();
  }
}

void sub_1A9C72898(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1A9C7298C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C72A04);
}

void sub_1A9C72994(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A9C7299CLL);
  JUMPOUT(0x1A9C72A04);
}

void sub_1A9C729E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C72A04);
}

void sub_1A9C729E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C72A04);
}

uint64_t sub_1A9C729F0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1A9C729FCLL);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1A9C72A04);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for InfographicAccessibleTextWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InfographicAccessibleTextWrapper);
}

unint64_t sub_1A9C72A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB487C0;
  if (!qword_1EEB487C0)
  {
    sub_1A9C72318(255, &qword_1EEB48708, sub_1A9C72158, (void (*)(void))sub_1A9C723A8);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDA108], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB487C0);
  }
  return result;
}

uint64_t TimeOfDay.init(dateComponents:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_1A9CE6048();
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = v4;
  v7 = sub_1A9CE6084();
  v9 = v8;
  v10 = sub_1A9CE60C0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  if ((v9 & 1) != 0)
    v12 = 0;
  else
    v12 = v7;
  *a2 = v6;
  a2[1] = v12;
  return result;
}

SleepHealthUI::TimeOfDay __swiftcall TimeOfDay.rounded(toIncrement:)(Swift::Double toIncrement)
{
  uint64_t *v1;
  int64x2_t *v2;
  float64x2_t v3;
  Swift::Int v4;
  Swift::Int v5;
  SleepHealthUI::TimeOfDay result;

  v3 = vmulq_f64(vcvtq_f64_s64(*v2), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1A9C72EAC(v1, round((60.0 * v3.f64[0] + v3.f64[1]) / toIncrement) * toIncrement);
  result.minute = v5;
  result.hour = v4;
  return result;
}

uint64_t TimeOfDay.dateComponents.getter()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - v4;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v1);
  result = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v13 - v9;
  if (v0[1] == 60 && __OFADD__(*v0, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = sub_1A9CE6444();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = sub_1A9CE6498();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
    return sub_1A9CE60A8();
  }
  return result;
}

SleepHealthUI::TimeOfDay __swiftcall TimeOfDay.init(hour:minute:)(Swift::Int hour, Swift::Int minute)
{
  Swift::Int *v2;
  SleepHealthUI::TimeOfDay result;

  *v2 = hour;
  v2[1] = minute;
  result.minute = minute;
  result.hour = hour;
  return result;
}

Swift::Void __swiftcall TimeOfDay.round(toIncrement:)(Swift::Double toIncrement)
{
  int64x2_t *v1;
  float64x2_t v2;
  int64x2_t v3;

  v2 = vmulq_f64(vcvtq_f64_s64(*v1), (float64x2_t)vdupq_n_s64(0x404E000000000000uLL));
  sub_1A9C72EAC(v3.i64, round((60.0 * v2.f64[0] + v2.f64[1]) / toIncrement) * toIncrement);
  *v1 = v3;
}

uint64_t TimeOfDay.hour.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TimeOfDay.hour.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TimeOfDay.hour.modify())()
{
  return nullsub_1;
}

uint64_t TimeOfDay.minute.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TimeOfDay.minute.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*TimeOfDay.minute.modify())()
{
  return nullsub_1;
}

uint64_t TimeOfDay.hourAndMinute.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_1A9C72DA8()
{
  uint64_t v0;

  v0 = *MEMORY[0x1E0DA82A8];
  qword_1EEB487C8 = *MEMORY[0x1E0DA82A0];
  unk_1EEB487D0 = v0;
}

double static TimeOfDay.defaultBedtime.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1A9C72E30(&qword_1EEB42D98, (__n128 *)&qword_1EEB487C8, a1).n128_u64[0];
  return result;
}

void sub_1A9C72DEC()
{
  uint64_t v0;

  v0 = *MEMORY[0x1E0DA8458];
  qword_1EEB487D8 = *MEMORY[0x1E0DA8450];
  unk_1EEB487E0 = v0;
}

double static TimeOfDay.defaultWakeUp.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1A9C72E30(&qword_1EEB42DA0, (__n128 *)&qword_1EEB487D8, a1).n128_u64[0];
  return result;
}

__n128 sub_1A9C72E30@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *a2;
  return result;
}

BOOL static TimeOfDay.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_1A9C72E88(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1A9C72EA0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_1A9C72EAC(uint64_t *a1@<X8>, double a2@<D0>)
{
  double v2;
  double v3;

  v2 = floor(a2 / 60.0 / 60.0);
  if (v2 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((*(_QWORD *)&v2 & 0x7FF0000000000000) == 0x7FF0000000000000)
    goto LABEL_10;
  v3 = floor((a2 - v2 * 60.0 * 60.0) / 60.0);
  if ((*(_QWORD *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000)
    goto LABEL_10;
  if (v3 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 9.22337204e18)
  {
    *a1 = (uint64_t)v2 % 24;
    a1[1] = (uint64_t)v3;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t TimeOfDay.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = v0[1];
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CED850;
  sub_1A9C73074();
  v4 = sub_1A9CE82F8();
  v6 = v5;
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEA968];
  v7 = sub_1A9BDD3E4();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v6;
  v8 = MEMORY[0x1E0DEB418];
  v9 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v3 + 96) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v3 + 104) = v9;
  *(_QWORD *)(v3 + 64) = v7;
  *(_QWORD *)(v3 + 72) = v1;
  *(_QWORD *)(v3 + 136) = v8;
  *(_QWORD *)(v3 + 144) = v9;
  *(_QWORD *)(v3 + 112) = v2;
  return sub_1A9CE82EC();
}

unint64_t sub_1A9C73074()
{
  unint64_t result;

  result = qword_1EEB487E8;
  if (!qword_1EEB487E8)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB487E8);
  }
  return result;
}

uint64_t DateComponents.init(timeOfDay:)()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v12 - v3;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v12 - v7;
  v9 = sub_1A9CE6444();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = sub_1A9CE6498();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  return sub_1A9CE60A8();
}

uint64_t DateComponents.applying(timeOfDay:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  v4 = sub_1A9CE60C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v2, v4);
  sub_1A9CE6054();
  return sub_1A9CE6090();
}

ValueMetadata *type metadata accessor for TimeOfDay()
{
  return &type metadata for TimeOfDay;
}

double sub_1A9C732EC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  double result;
  __int128 v6;
  __int128 v7;
  char v8;

  sub_1A9BAA680(a1, a2, a3 & 1);
  sub_1A9C74924(0, &qword_1ED263198, MEMORY[0x1E0CD9D88], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
  sub_1A9C7496C();
  swift_bridgeObjectRetain();
  sub_1A9CE74E8();
  result = *(double *)&v6;
  *(_OWORD *)a4 = v6;
  *(_OWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 32) = v8;
  return result;
}

uint64_t sub_1A9C733BC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)();
  uint64_t v20;

  sub_1A9C63E98();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABD28(0, &qword_1EEB487F8, (uint64_t (*)(uint64_t))sub_1A9C63E3C, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - v10;
  sub_1A9C63E3C();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)&v20 - v15;
  if ((a1 & 1) != 0)
  {
    sub_1A9BA6F90(v1, (uint64_t)&v20 - v15, (uint64_t (*)(_QWORD))sub_1A9C63E98);
    sub_1A9BA6F90((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C63E3C);
    swift_storeEnumTagMultiPayload();
    sub_1A9BC2784(&qword_1EEB48468, (uint64_t (*)(uint64_t))sub_1A9C63E3C, sub_1A9C64254, (uint64_t (*)(void))sub_1A9C3AD8C);
    sub_1A9C64254();
    sub_1A9CE74E8();
    v17 = (uint64_t)v16;
    v18 = sub_1A9C63E3C;
  }
  else
  {
    sub_1A9BA6F90(v1, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C63E98);
    sub_1A9BA6F90((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C63E98);
    swift_storeEnumTagMultiPayload();
    sub_1A9BC2784(&qword_1EEB48468, (uint64_t (*)(uint64_t))sub_1A9C63E3C, sub_1A9C64254, (uint64_t (*)(void))sub_1A9C3AD8C);
    sub_1A9C64254();
    sub_1A9CE74E8();
    v17 = (uint64_t)v6;
    v18 = sub_1A9C63E98;
  }
  return sub_1A9B97190(v17, (uint64_t (*)(_QWORD))v18);
}

_WORD *Text.ViewModel.init(leadingSymbol:text:font:textColor:hidden:accessibilityLabel:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_WORD *)a9 = *result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

uint64_t static Text.create(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[4];
  unsigned __int8 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68[8];
  uint64_t v69;
  uint64_t v70;

  sub_1A9B92F34(0, &qword_1EEB43D38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  v57 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v46 - v6;
  v8 = sub_1A9CE7D40();
  v60 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v58 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C63F1C(0);
  v56 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C63E98();
  v59 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C63E18(0);
  v61 = v19;
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[1];
  v64 = *a1;
  v65 = v24;
  v25 = a1[3];
  v66 = a1[2];
  v67 = v25;
  sub_1A9C749EC((uint64_t)&v64 + 8, (uint64_t)v68, &qword_1EEB444A8);
  sub_1A9C749EC((uint64_t)v68, (uint64_t)&v69, &qword_1EEB444A8);
  if (v70)
  {
    v52 = sub_1A9C73FA0(v69, v70, v66, v67, *((uint64_t *)&v67 + 1));
    v51 = v26;
    v53 = v27;
    v50 = v28 & 1;
    v29 = sub_1A9C7414C((uint64_t)&v64, v52, v26, v28 & 1, (uint64_t)v62);
    v54 = v20;
    v31 = v62[0];
    v30 = v62[1];
    v48 = v18;
    v32 = (uint64_t *)v7;
    v46 = v62[2];
    v55 = a2;
    v33 = v62[3];
    v47 = v63;
    v34 = v60;
    v35 = v58;
    (*(void (**)(char *, _QWORD, uint64_t, double))(v60 + 104))(v58, *MEMORY[0x1E0CDF7D0], v8, v29);
    KeyPath = swift_getKeyPath();
    v49 = v23;
    v37 = KeyPath;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))((char *)v32 + *(int *)(v57 + 28), v35, v8);
    *v32 = v37;
    sub_1A9BBA69C((uint64_t)v32, (uint64_t)&v14[*(int *)(v56 + 36)]);
    *(_QWORD *)v14 = v31;
    *((_QWORD *)v14 + 1) = v30;
    LOBYTE(v37) = v46;
    *((_QWORD *)v14 + 2) = v46;
    *((_QWORD *)v14 + 3) = v33;
    v14[32] = v47;
    sub_1A9BAA9EC(v31, v30, v37);
    sub_1A9BBA6E0((uint64_t)v32);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v8);
    v38 = v31;
    v20 = v54;
    sub_1A9BAA698(v38, v30, v37);
    v39 = *((_QWORD *)&v65 + 1);
    v40 = swift_getKeyPath();
    v41 = (uint64_t)v48;
    sub_1A9BA6F90((uint64_t)v14, (uint64_t)v48, (uint64_t (*)(_QWORD))sub_1A9C63F1C);
    v42 = (uint64_t *)(v41 + *(int *)(v59 + 36));
    *v42 = v40;
    v42[1] = v39;
    swift_retain();
    a2 = v55;
    sub_1A9B97190((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1A9C63F1C);
    v43 = (uint64_t)v49;
    sub_1A9C733BC(SBYTE8(v66));
    sub_1A9BAA670(v52, v51, v50);
    swift_bridgeObjectRelease();
    sub_1A9B97190(v41, (uint64_t (*)(_QWORD))sub_1A9C63E98);
    sub_1A9C7434C(v43, a2);
    v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, v44, 1, v61);
}

uint64_t Text.init(_:table:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = a5[1];
  if (v5)
  {
    v6 = (void *)a5[2];
    v7 = *a5;
    swift_bridgeObjectRetain();
    v8 = v6;
    sub_1A9C74390(v7, v5, v6);
  }
  return sub_1A9CE79B0();
}

void Text.ViewModel.leadingSymbol.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t Text.ViewModel.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Text.ViewModel.font.getter()
{
  return swift_retain();
}

uint64_t Text.ViewModel.textColor.getter()
{
  return swift_retain();
}

uint64_t Text.ViewModel.hidden.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Text.ViewModel.accessibilityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Text.ViewModel.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[2];
  v3 = v0[3];
  v2 = v0[4];
  v4 = v0[7];
  if ((~*(unsigned __int16 *)v0 & 0xFCFC) != 0)
  {
    sub_1A9CE8C64();
    Symbol.hash(into:)();
    if (v1)
    {
LABEL_3:
      sub_1A9CE8C64();
      swift_bridgeObjectRetain();
      sub_1A9CE831C();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
LABEL_8:
      sub_1A9CE8C64();
      if (v2)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1A9CE8C64();
    if (v1)
      goto LABEL_3;
  }
  sub_1A9CE8C64();
  if (!v3)
    goto LABEL_8;
LABEL_4:
  sub_1A9CE8C64();
  swift_retain();
  sub_1A9CE77F4();
  swift_release();
  if (v2)
  {
LABEL_5:
    sub_1A9CE8C64();
    swift_retain();
    sub_1A9CE7C74();
    swift_release();
    goto LABEL_10;
  }
LABEL_9:
  sub_1A9CE8C64();
LABEL_10:
  sub_1A9CE8C64();
  if (!v4)
    return sub_1A9CE8C64();
  sub_1A9CE8C64();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t Text.ViewModel.hashValue.getter()
{
  sub_1A9CE8C4C();
  Text.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C73D7C()
{
  sub_1A9CE8C4C();
  Text.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C73DE8()
{
  sub_1A9CE8C4C();
  Text.ViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C73E50(__int16 *a1)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  id v7;
  uint64_t v8;

  v1 = *a1;
  Symbol.systemName.getter();
  sub_1A9CE7D28();
  v2 = sub_1A9CE79D4();
  v4 = v3;
  v6 = v5;
  if ((v1 & 0xF000) != 0x1000 || (v1 & 1) != 0)
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1EEB42BB0 != -1)
      swift_once();
    v7 = (id)qword_1EEB44258;
  }
  MEMORY[0x1AF41E85C](v7);
  v8 = sub_1A9CE7968();
  swift_release();
  sub_1A9BAA670(v2, v4, v6 & 1);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1A9C73FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  if (a5)
  {
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    v5 = sub_1A9CE79C8();
    v7 = v6;
    v9 = v8 & 1;
    v10 = sub_1A9CE7968();
    v12 = v11;
    v14 = v13 & 1;
    sub_1A9BAA670(v5, v7, v9);
    swift_bridgeObjectRelease();
    v15 = sub_1A9CE7974();
    sub_1A9BAA670(v10, v12, v14);
  }
  else
  {
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    v16 = sub_1A9CE79C8();
    v18 = v17;
    v20 = v19 & 1;
    v15 = sub_1A9CE7968();
    sub_1A9BAA670(v16, v18, v20);
  }
  swift_bridgeObjectRelease();
  return v15;
}

double sub_1A9C7414C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  double result;
  __int128 v21;
  char v22;
  uint64_t v23;
  _OWORD v24[2];
  char v25;
  _BYTE v26[2];
  unsigned __int16 v27;
  __int16 v28;

  v8 = a4 & 1;
  sub_1A9C749EC(a1, (uint64_t)v26, &qword_1EEB48800);
  sub_1A9C749EC((uint64_t)v26, (uint64_t)&v27, &qword_1EEB48800);
  if ((~v27 & 0xFCFC) != 0)
  {
    sub_1A9C74A38(&v27, &v28);
    sub_1A9C74A38(&v28, v24);
    v9 = sub_1A9C73E50((__int16 *)v24);
    v11 = v10;
    v13 = v12 & 1;
    v14 = sub_1A9CE7980();
    v16 = v15;
    v23 = a5;
    v18 = v17 & 1;
    sub_1A9BAA670(v9, v11, v13);
    swift_bridgeObjectRelease();
    sub_1A9CE7980();
    v19 = v18;
    a5 = v23;
    sub_1A9BAA670(v14, v16, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1A9BAA680(a2, a3, v8);
    swift_bridgeObjectRetain();
  }
  sub_1A9CE74E8();
  result = *(double *)v24;
  v21 = v24[1];
  v22 = v25;
  *(_OWORD *)a5 = v24[0];
  *(_OWORD *)(a5 + 16) = v21;
  *(_BYTE *)(a5 + 32) = v22;
  return result;
}

uint64_t static String.thinSpace.getter()
{
  return 9011426;
}

uint64_t sub_1A9C7434C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C63E18(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1A9C74390(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

  }
}

BOOL _s7SwiftUI4TextV011SleepHealthB0E9ViewModelV2eeoiySbAF_AFtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _BOOL8 result;
  char v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40[3];

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((unsigned __int8 *)a1 + 40);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 1);
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a2 + 3);
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((unsigned __int8 *)a2 + 40);
  v17 = *((_QWORD *)a2 + 6);
  v16 = *((_QWORD *)a2 + 7);
  v40[2] = *a2;
  if ((~v2 & 0xFCFC) != 0)
  {
    v40[0] = v2;
    if ((~v10 & 0xFCFC) == 0)
      return 0;
    v37 = v14;
    v38 = v5;
    v36 = v6;
    v35 = v15;
    v18 = v7;
    v19 = v17;
    v20 = v16;
    v21 = v9;
    v22 = v8;
    v23 = v13;
    v24 = v3;
    v25 = v11;
    v26 = _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(v40);
    v11 = v25;
    v3 = v24;
    v13 = v23;
    v8 = v22;
    v9 = v21;
    v16 = v20;
    v17 = v19;
    v7 = v18;
    v15 = v35;
    v6 = v36;
    v14 = v37;
    v5 = v38;
    if ((v26 & 1) == 0)
      return 0;
  }
  else if ((~v10 & 0xFCFC) != 0)
  {
    return 0;
  }
  if (!v4)
  {
    if (v12)
      return 0;
    goto LABEL_13;
  }
  if (!v12)
    return 0;
  if (v3 == v11 && v4 == v12
    || (v27 = v8, v28 = v13, v29 = sub_1A9CE8BB0(), v13 = v28, v8 = v27, v30 = v29, result = 0, (v30 & 1) != 0))
  {
LABEL_13:
    if (v5)
    {
      if (!v13)
        return 0;
      v39 = v8;
      swift_retain();
      swift_retain();
      v32 = sub_1A9CE77D0();
      swift_release();
      swift_release();
      v8 = v39;
      if ((v32 & 1) == 0)
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    if (v6)
    {
      if (!v14)
        return 0;
      v33 = v8;
      swift_retain();
      swift_retain();
      v34 = sub_1A9CE7C44();
      swift_release();
      swift_release();
      result = 0;
      if ((v34 & 1) == 0)
        return result;
      v8 = v33;
      if (((v7 ^ v15) & 1) != 0)
        return result;
    }
    else
    {
      result = 0;
      if (v14 || ((v7 ^ v15) & 1) != 0)
        return result;
    }
    if (v9)
      return v16 && (v8 == v17 && v9 == v16 || (sub_1A9CE8BB0() & 1) != 0);
    return !v16;
  }
  return result;
}

unint64_t sub_1A9C74604()
{
  unint64_t result;

  result = qword_1EEB487F0;
  if (!qword_1EEB487F0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for Text.ViewModel, &type metadata for Text.ViewModel);
    atomic_store(result, (unint64_t *)&qword_1EEB487F0);
  }
  return result;
}

uint64_t _s9ViewModelVwxx()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _s9ViewModelVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9ViewModelVwca(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s9ViewModelVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9ViewModelVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s9ViewModelVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.ViewModel()
{
  return &type metadata for Text.ViewModel;
}

uint64_t sub_1A9C748F0()
{
  return sub_1A9BA409C(&qword_1EEB48458, (uint64_t (*)(uint64_t))sub_1A9C63DFC, (uint64_t (*)(void))sub_1A9C641CC, MEMORY[0x1E0CE0798]);
}

void sub_1A9C74924(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0CDDD78]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1A9C7496C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1ED2626A0;
  if (!qword_1ED2626A0)
  {
    sub_1A9C74924(255, &qword_1ED263198, MEMORY[0x1E0CD9D88], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3 = sub_1A9C3AD8C();
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED2626A0);
  }
  return result;
}

uint64_t sub_1A9C749EC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  sub_1A9BBA658(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_WORD *sub_1A9C74A38(_WORD *a1, _WORD *a2)
{
  __swift_memcpy2_1(a2, a1);
  return a2;
}

uint64_t sub_1A9C74A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v16 - v7;
  v9 = sub_1A9CE6234();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6228();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = a3;
    sub_1A9C0344C(a2);
    DeepLinkOpener.open(url:completion:)((uint64_t)v13, (uint64_t)sub_1A9C76168, v15);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return result;
}

id sub_1A9C74BD4(int a1, int a2, int a3, int a4, void *aBlock)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v5 = _Block_copy(aBlock);
  v6 = sub_1A9CE82E0();
  v8 = v7;
  v9 = sub_1A9CE82E0();
  v11 = v10;
  if (v5)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v5;
    v5 = sub_1A9C760FC;
  }
  else
  {
    v12 = 0;
  }
  v13 = _sSo17UIAlertControllerC13SleepHealthUIE026notificationsWontFireAlertB014localizedTitle0J7Dismiss10completionABSS_SSySbcSgtFZ_0(v6, v8, v9, v11, (uint64_t)v5, v12);
  sub_1A9BF8FE4((uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1A9C74CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  _QWORD v59[2];
  unsigned __int8 v60;
  ValueMetadata *v61;
  _UNKNOWN **v62;
  __int128 v63;
  char v64;

  v3 = v2;
  v54 = a1;
  v55 = a2;
  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v45 - v6;
  v8 = sub_1A9CE6234();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v57 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C75E40(0);
  v52 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v51 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *v2;
  v64 = *((_BYTE *)v2 + 16);
  sub_1A9C6F4F8();
  sub_1A9CE7EFC();
  v49 = v59[1];
  v50 = v59[0];
  v48 = v60;
  if (qword_1ED2626A8 != -1)
    swift_once();
  v15 = (id)qword_1ED264F90;
  v46 = sub_1A9CE6168();
  v47 = v16;

  swift_bridgeObjectRelease();
  v17 = (id)qword_1ED264F90;
  v43 = 0xE000000000000000;
  v18 = sub_1A9CE6168();
  v56 = v19;

  swift_bridgeObjectRelease();
  sub_1A9CE6228();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v63 = *(__int128 *)((char *)v3 + 24);
    v21 = (*(uint64_t (**)(void))(v9 + 32))();
    v45[1] = v45;
    v61 = &type metadata for DeepLinkOpener;
    v62 = &protocol witness table for DeepLinkOpener;
    v58 = v63;
    MEMORY[0x1E0C80A78](v21, v22);
    v45[0] = v8;
    v45[-10] = v54;
    v45[-9] = v18;
    MEMORY[0x1E0C80A78](v23, v24);
    sub_1A9C75F40();
    v26 = v25;
    sub_1A9B92F34(0, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v28 = v27;
    sub_1A9C74924(0, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
    v30 = v29;
    v31 = sub_1A9C75FF4();
    v46 = v9;
    v32 = v31;
    v33 = sub_1A9BA8EA4();
    v34 = sub_1A9C7603C();
    v35 = sub_1A9C01758();
    v43 = v34;
    v44 = v35;
    v41 = v32;
    v42 = v33;
    v39 = v28;
    v40 = v30;
    v37 = v26;
    v38 = MEMORY[0x1E0DEA968];
    v36 = v51;
    sub_1A9CE7B9C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
    (*(void (**)(char *, _QWORD))(v46 + 8))(v57, v45[0]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v55, v36, v53);
  }
  return result;
}

uint64_t sub_1A9C75148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A9C74CA0(a1, a2);
}

uint64_t View.notificationsWontFireAlert(isPresented:localizedTitle:localizedDismiss:completion:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13[0] = a1;
  v13[1] = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A9C0344C(a8);
  MEMORY[0x1AF41E82C](v13, a10, &type metadata for NotificationsWontFireAlert, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_1A9BF8FE4(a8);
}

uint64_t static String.sleepOnboardingNotificationsWontFireAlertTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepOnboardingNotificationsWontFireAlertDismiss.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepRemindersWontFireAlertTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.sleepResultsWontFireAlertTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static String.notificationsWontFireAlertDismiss.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

id _sSo17UIAlertControllerC13SleepHealthUIE026notificationsWontFireAlertB014localizedTitle0J7Dismiss10completionABSS_SSySbcSgtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  void *v27;
  uint64_t v28;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v8 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, v9, v10, 1, 0xE000000000000000);

  v12 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a5;
  *(_QWORD *)(v13 + 24) = a6;
  sub_1A9C0344C(a5);
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v27 = sub_1A9C76114;
  v28 = v13;
  aBlock = MEMORY[0x1E0C809B0];
  v24 = 1107296256;
  v25 = sub_1A9C432C8;
  v26 = &block_descriptor_26;
  v15 = _Block_copy(&aBlock);
  swift_release();
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel_actionWithTitle_style_handler_, v14, 0, v15, 0xE000000000000000);
  _Block_release(v15);

  objc_msgSend(v11, sel_addAction_, v17);
  objc_msgSend(v11, sel_setPreferredAction_, v17);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  sub_1A9C0344C(a5);
  swift_bridgeObjectRetain();
  v19 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v27 = sub_1A9C76138;
  v28 = v18;
  aBlock = MEMORY[0x1E0C809B0];
  v24 = 1107296256;
  v25 = sub_1A9C432C8;
  v26 = &block_descriptor_10_1;
  v20 = _Block_copy(&aBlock);
  swift_release();
  v21 = objc_msgSend(v16, sel_actionWithTitle_style_handler_, v19, 1, v20);
  _Block_release(v20);

  objc_msgSend(v11, sel_addAction_, v21);
  return v11;
}

uint64_t sub_1A9C75A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1A9CE7164();
  v4[0] = v1;
  v4[1] = sub_1A9C75A9C();
  return MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
}

unint64_t sub_1A9C75A9C()
{
  unint64_t result;

  result = qword_1EEB48808;
  if (!qword_1EEB48808)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF431C, &type metadata for NotificationsWontFireAlert);
    atomic_store(result, (unint64_t *)&qword_1EEB48808);
  }
  return result;
}

uint64_t destroy for NotificationsWontFireAlert(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  return a1;
}

uint64_t assignWithCopy for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v4;
      *(_QWORD *)(a1 + 64) = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NotificationsWontFireAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      v8 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationsWontFireAlert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationsWontFireAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationsWontFireAlert()
{
  return &type metadata for NotificationsWontFireAlert;
}

uint64_t sub_1A9C75E30()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C75E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[8];

  if (!qword_1EEB48810)
  {
    sub_1A9C75F40();
    v3 = v2;
    sub_1A9B92F34(255, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v5 = v4;
    sub_1A9C74924(255, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
    v7 = v6;
    v8 = sub_1A9C75FF4();
    v9 = sub_1A9BA8EA4();
    v10 = sub_1A9C7603C();
    v11 = sub_1A9C01758();
    v14[0] = v3;
    v14[1] = MEMORY[0x1E0DEA968];
    v14[2] = v5;
    v14[3] = v7;
    v14[4] = v8;
    v14[5] = v9;
    v14[6] = v10;
    v14[7] = v11;
    v12 = MEMORY[0x1AF420248](a1, v14, MEMORY[0x1E0CDEF18], 0);
    if (!v13)
      atomic_store(v12, (unint64_t *)&qword_1EEB48810);
  }
}

void sub_1A9C75F40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48818)
  {
    sub_1A9C75A9C();
    v0 = sub_1A9CE7548();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48818);
  }
}

void sub_1A9C75F98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45EA8)
  {
    sub_1A9C015E0(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45EA8);
  }
}

unint64_t sub_1A9C75FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48820;
  if (!qword_1EEB48820)
  {
    sub_1A9C75F40();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDBF10], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48820);
  }
  return result;
}

unint64_t sub_1A9C7603C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45ED8;
  if (!qword_1EEB45ED8)
  {
    sub_1A9B92F34(255, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45ED8);
  }
  return result;
}

uint64_t sub_1A9C7609C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1A9C9A70C(v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], a1, v1[10]);
}

uint64_t sub_1A9C760D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C3A6DC(a1);
}

uint64_t sub_1A9C760D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A9C760FC(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1A9C76114(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C74A78(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t sub_1A9C76138()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(0);
  return result;
}

uint64_t sub_1A9C76168()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1)
    return v1(1);
  return result;
}

uint64_t sub_1A9C76194()
{
  sub_1A9C75F40();
  sub_1A9B92F34(255, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
  sub_1A9C74924(255, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
  sub_1A9C75FF4();
  sub_1A9BA8EA4();
  sub_1A9C7603C();
  sub_1A9C01758();
  return swift_getOpaqueTypeConformance2();
}

Swift::Void __swiftcall UICollectionView.registerWindDownPickerCell()()
{
  type metadata accessor for WindDownTimePickerCollectionViewCell();
  sub_1A9C762B8();
  sub_1A9CE86D0();
}

uint64_t type metadata accessor for WindDownTimePickerCollectionViewCell()
{
  return objc_opt_self();
}

unint64_t sub_1A9C762B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48828;
  if (!qword_1EEB48828)
  {
    v1 = type metadata accessor for WindDownTimePickerCollectionViewCell();
    result = MEMORY[0x1AF420284](&unk_1A9CEE904, v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48828);
  }
  return result;
}

void sub_1A9C762FC(double a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  char *v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  objc_super v16;

  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  v9 = objc_msgSendSuper2(&v16, sel_initWithFrame_, a1, a2, a3, a4);
  v10 = (char *)sub_1A9BC9C0C();

  v11 = floor(*MEMORY[0x1E0DA84C8] * 60.0 / 60.0);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v12 = *MEMORY[0x1E0DA84B0] * 60.0;
  v13 = (uint64_t)v11;
  v14 = (double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  v15 = *(double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *v14 = *MEMORY[0x1E0DA84B8] * 60.0;
  v14[1] = v12;
  *((_QWORD *)v14 + 2) = v13;
  *((_BYTE *)v14 + 24) = 0;
  if (v15 != v12)
  {
    objc_msgSend(v10, sel_reloadAllComponents);
    sub_1A9C2F4E8((char *)1);
  }

}

void sub_1A9C76468(void *a1)
{
  void *v1;
  id v3;
  id v4;
  char *v5;
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  v3 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);
  if (!v3)
  {
LABEL_8:

    return;
  }
  v4 = v3;
  v5 = (char *)sub_1A9BC9C0C();

  v6 = floor(*MEMORY[0x1E0DA84C8] * 60.0 / 60.0);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 < 9.22337204e18)
  {
    v7 = *MEMORY[0x1E0DA84B0] * 60.0;
    v8 = (uint64_t)v6;
    v9 = (double *)&v5[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    v10 = *(double *)&v5[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *v9 = *MEMORY[0x1E0DA84B8] * 60.0;
    v9[1] = v7;
    *((_QWORD *)v9 + 2) = v8;
    *((_BYTE *)v9 + 24) = 0;
    if (v10 != v7)
    {
      objc_msgSend(v5, sel_reloadAllComponents);
      sub_1A9C2F4E8((char *)1);
    }

    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_1A9C765C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_1A9C465A0();
  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  sub_1A9BCA29C(v1, (uint64_t)v9);
  if (!v10)
    return sub_1A9BCA260((uint64_t)v9);
  sub_1A9BB53B0();
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    return result;
  result = (uint64_t)sub_1A9BC9C0C();
  v3 = floor(*MEMORY[0x1E0DA84C8] * 60.0 / 60.0);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v4 = (void *)result;
  v5 = (uint64_t)v3;
  v6 = result + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration;
  v7 = *(double *)(result + OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8);
  *(double *)v6 = *MEMORY[0x1E0DA84B8] * 60.0;
  *(double *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = v5;
  *(_BYTE *)(v6 + 24) = 0;
  if (v7 != v8)
  {
    objc_msgSend((id)result, sel_reloadAllComponents);
    sub_1A9C2F4E8((char *)1);
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1A9C76740()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WindDownTimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1A9C76770@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  v3 = sub_1A9CE6168();
  v5 = v4;

  swift_bridgeObjectRelease();
  result = objc_msgSend((id)objc_opt_self(), sel_quaternarySystemFillColor, 0xE000000000000000);
  if (result)
    result = (id)MEMORY[0x1AF41E85C]();
  *(_QWORD *)a1 = 0x695F68746C616568;
  *(_QWORD *)(a1 + 8) = 0xEB000000006E6F63;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t PromotionViewModel.imageName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromotionViewModel.localizedTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromotionViewModel.backgroundColor.getter()
{
  return swift_retain();
}

void PromotionViewModel.deepLinkDestination.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

uint64_t PromotionViewModel.init(imageName:localizedTitle:backgroundColor:deepLinkDestination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v12;
  uint64_t result;

  v12 = *a6;
  if (a5)
    result = MEMORY[0x1AF41E85C](a5);
  else
    result = 0;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = result;
  *(_BYTE *)(a7 + 40) = v12;
  return result;
}

uint64_t sub_1A9C76974@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1A9C769C4()
{
  qword_1EEB48858 = 0x4040000000000000;
}

void sub_1A9C769D4()
{
  qword_1EEB48860 = 0x4024000000000000;
}

void sub_1A9C769E4()
{
  qword_1EEB48868 = 0x4024000000000000;
}

void sub_1A9C769F4()
{
  qword_1EEB48870 = 0x4028000000000000;
}

double sub_1A9C76A04()
{
  double result;

  result = 16.0;
  xmmword_1EEB48878 = xmmword_1A9CF43A0;
  *(_OWORD *)&qword_1EEB48888 = xmmword_1A9CF43B0;
  return result;
}

uint64_t sub_1A9C76A24@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  _BYTE v24[25];

  sub_1A9C77FB0();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C783A4(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1[1];
  v23 = *v1;
  *(_OWORD *)v24 = v12;
  *(_OWORD *)&v24[9] = *(__int128 *)((char *)v1 + 25);
  v13 = sub_1A9CE738C();
  if (qword_1EEB42DB0 != -1)
    swift_once();
  v14 = qword_1EEB48860;
  *(_QWORD *)v6 = v13;
  *((_QWORD *)v6 + 1) = v14;
  v6[16] = 0;
  sub_1A9C783C0();
  sub_1A9C76BE4(&v23, (uint64_t)&v6[*(int *)(v15 + 44)]);
  v16 = *(_QWORD *)&v24[16];
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C77FB0);
  *(_QWORD *)&v11[*(int *)(v8 + 36)] = v16;
  swift_retain();
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C77FB0);
  if (qword_1EEB42DC8 != -1)
    swift_once();
  v22 = xmmword_1EEB48878;
  v17 = qword_1EEB48888;
  v18 = unk_1EEB48890;
  sub_1A9BA6F90((uint64_t)v11, a1, (uint64_t (*)(_QWORD))sub_1A9C783A4);
  sub_1A9C7843C(0);
  v20 = a1 + *(int *)(v19 + 36);
  *(_OWORD *)v20 = v22;
  *(_QWORD *)(v20 + 16) = v17;
  *(_QWORD *)(v20 + 24) = v18;
  *(_BYTE *)(v20 + 32) = 0;
  return sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C783A4);
}

uint64_t sub_1A9C76BE4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  sub_1A9C780C0();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v28 - v10;
  sub_1A9C78064();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v28 - v18;
  sub_1A9C784D0((uint64_t)a1);
  v20 = qword_1ED2626A8;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    swift_once();
  v21 = (id)qword_1ED264F90;
  v22 = sub_1A9CE7D58();
  sub_1A9C78514((uint64_t)a1);
  if (qword_1EEB42DA8 != -1)
    swift_once();
  v28[0] = v22;
  v28[1] = qword_1EEB48858;
  sub_1A9C7855C();
  sub_1A9CE7ADC();
  swift_release();
  v23 = sub_1A9CE7404();
  if (qword_1EEB42DB8 != -1)
    swift_once();
  v24 = qword_1EEB48868;
  *(_QWORD *)v11 = v23;
  *((_QWORD *)v11 + 1) = v24;
  v11[16] = 0;
  sub_1A9C785A0();
  sub_1A9C76E74(a1, (uint64_t)&v11[*(int *)(v25 + 44)]);
  sub_1A9BA6F90((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9C78064);
  sub_1A9BA6F90((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C780C0);
  sub_1A9BA6F90((uint64_t)v15, a2, (uint64_t (*)(_QWORD))sub_1A9C78064);
  sub_1A9C78048(0);
  sub_1A9BA6F90((uint64_t)v7, a2 + *(int *)(v26 + 48), (uint64_t (*)(_QWORD))sub_1A9C780C0);
  sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C780C0);
  sub_1A9B97190((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1A9C78064);
  sub_1A9B97190((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C780C0);
  return sub_1A9B97190((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9C78064);
}

uint64_t sub_1A9C76E74@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t KeyPath;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  unsigned __int128 v111;
  ValueMetadata *v112;
  _UNKNOWN **v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  _BYTE v117[25];
  char v118;
  char v119;

  v92 = sub_1A9CE7194();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v4);
  v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C782F8(0);
  v95 = v7;
  v94 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C7827C();
  v93 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C78260(0);
  v97 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v101 = (uint64_t)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v96 = (uint64_t)&v88 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v100 = (uint64_t)&v88 - v23;
  v24 = sub_1A9CE7F38();
  v98 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v99 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v102 = (char *)&v88 - v29;
  sub_1A9C7820C(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v88 - v36;
  v38 = *(__int128 *)((char *)a1 + 25);
  v39 = a1[1];
  v116 = *a1;
  *(_OWORD *)v117 = v39;
  *(_OWORD *)&v117[9] = v38;
  v111 = __PAIR128__(*(unint64_t *)&v117[8], v39);
  sub_1A9BA8EA4();
  swift_bridgeObjectRetain();
  v105 = sub_1A9CE79C8();
  v104 = v40;
  LODWORD(v42) = v41;
  v44 = v43;
  KeyPath = swift_getKeyPath();
  v103 = swift_getKeyPath();
  LOBYTE(a1) = sub_1A9CE7770();
  v107 = sub_1A9CE7764();
  sub_1A9CE7764();
  if (sub_1A9CE7764() != a1)
    v107 = sub_1A9CE7764();
  if (qword_1EEB42DC0 != -1)
    swift_once();
  sub_1A9CE6F24();
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  sub_1A9C7862C((uint64_t)&v117[24], (uint64_t)&v118);
  sub_1A9C7862C((uint64_t)&v118, (uint64_t)&v119);
  v53 = v119;
  if (v119 == 3)
  {
    sub_1A9C78228(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v37, 1, 1, v54);
  }
  else
  {
    v88 = v37;
    v55 = v24;
    v89 = v42;
    v90 = v44;
    sub_1A9CE7F2C();
    v112 = &type metadata for DeepLinkOpener;
    v113 = &protocol witness table for DeepLinkOpener;
    v108 = 0;
    sub_1A9CE7DC4();
    v114 = v109;
    v115 = v110;
    LOBYTE(v111) = v53;
    sub_1A9CE7188();
    sub_1A9BFCA90();
    sub_1A9B92B9C(&qword_1EEB48940, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
    v56 = v92;
    sub_1A9CE7AA0();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v6, v56);
    sub_1A9C01CD0((uint64_t)&v111);
    v57 = objc_msgSend((id)objc_opt_self(), sel_systemBlueColor);
    v58 = MEMORY[0x1AF41E85C](v57);
    v59 = swift_getKeyPath();
    v60 = v94;
    v61 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v14, v10, v95);
    v62 = (uint64_t *)&v14[*(int *)(v93 + 36)];
    *v62 = v59;
    v62[1] = v58;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v61);
    LOBYTE(v59) = sub_1A9CE7770();
    v63 = sub_1A9CE7764();
    sub_1A9CE7764();
    if (sub_1A9CE7764() != v59)
      v63 = sub_1A9CE7764();
    sub_1A9CE6F24();
    v65 = v64;
    v67 = v66;
    v69 = v68;
    v71 = v70;
    v72 = v96;
    sub_1A9BA6F90((uint64_t)v14, v96, (uint64_t (*)(_QWORD))sub_1A9C7827C);
    v73 = v72 + *(int *)(v97 + 36);
    *(_BYTE *)v73 = v63;
    *(_QWORD *)(v73 + 8) = v65;
    *(_QWORD *)(v73 + 16) = v67;
    *(_QWORD *)(v73 + 24) = v69;
    *(_QWORD *)(v73 + 32) = v71;
    *(_BYTE *)(v73 + 40) = 0;
    sub_1A9B97190((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1A9C7827C);
    v74 = v72;
    v42 = v100;
    sub_1A9BA0D6C(v74, v100, (uint64_t (*)(_QWORD))sub_1A9C78260);
    v75 = v98;
    v76 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
    v77 = v99;
    v78 = v102;
    v76(v99, v102, v55);
    v79 = v101;
    sub_1A9BA6F90(v42, v101, (uint64_t (*)(_QWORD))sub_1A9C78260);
    v76(v33, v77, v55);
    sub_1A9C78244(0);
    sub_1A9BA6F90(v79, (uint64_t)&v33[*(int *)(v80 + 48)], (uint64_t (*)(_QWORD))sub_1A9C78260);
    sub_1A9B97190(v42, (uint64_t (*)(_QWORD))sub_1A9C78260);
    v81 = *(void (**)(char *, uint64_t))(v75 + 8);
    v81(v78, v55);
    sub_1A9B97190(v79, (uint64_t (*)(_QWORD))sub_1A9C78260);
    v81(v77, v55);
    sub_1A9C78228(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v33, 0, 1, v82);
    v37 = v88;
    sub_1A9BA0D6C((uint64_t)v33, (uint64_t)v88, (uint64_t (*)(_QWORD))sub_1A9C7820C);
    v44 = v90;
    LOBYTE(v42) = v89;
  }
  sub_1A9BA6F90((uint64_t)v37, (uint64_t)v33, (uint64_t (*)(_QWORD))sub_1A9C7820C);
  v83 = v105;
  v84 = v104;
  *(_QWORD *)a2 = v105;
  *(_QWORD *)(a2 + 8) = v84;
  *(_BYTE *)(a2 + 16) = v42 & 1;
  v85 = KeyPath;
  *(_QWORD *)(a2 + 24) = v44;
  *(_QWORD *)(a2 + 32) = v85;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v103;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  *(_BYTE *)(a2 + 72) = v107;
  *(_QWORD *)(a2 + 80) = v46;
  *(_QWORD *)(a2 + 88) = v48;
  *(_QWORD *)(a2 + 96) = v50;
  *(_QWORD *)(a2 + 104) = v52;
  *(_BYTE *)(a2 + 112) = 0;
  sub_1A9C78158(0);
  sub_1A9BA6F90((uint64_t)v33, a2 + *(int *)(v86 + 48), (uint64_t (*)(_QWORD))sub_1A9C7820C);
  sub_1A9BAA680(v83, v84, v42 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1A9B97190((uint64_t)v37, (uint64_t (*)(_QWORD))sub_1A9C7820C);
  sub_1A9B97190((uint64_t)v33, (uint64_t (*)(_QWORD))sub_1A9C7820C);
  sub_1A9BAA670(v83, v84, v42 & 1);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1A9C77668()
{
  qword_1EEB48898 = 0x4018000000000000;
}

uint64_t sub_1A9C77678()
{
  uint64_t result;

  result = sub_1A9CE7C80();
  qword_1EEB488A0 = result;
  return result;
}

void sub_1A9C77694()
{
  qword_1EEB488A8 = 0x4018000000000000;
}

void sub_1A9C776A4()
{
  qword_1EEB488B0 = 0;
}

void sub_1A9C776B0()
{
  qword_1EEB488B8 = 0x4000000000000000;
}

uint64_t sub_1A9C776C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;

  v43 = a1;
  sub_1A9BC2B90();
  v2 = v1;
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE71AC();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1A9CE7D10();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C787F4(0);
  v16 = v15;
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v11 + 104))(v14, *MEMORY[0x1E0CDF6F8], v10, v18);
  v21 = sub_1A9CE7D4C();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v22 = v44;
  v23 = v45;
  v42 = v46;
  v41 = v47;
  v39 = v49;
  v40 = v48;
  if (qword_1EEB42DD0 != -1)
    swift_once();
  v24 = qword_1EEB48898;
  v25 = (char *)v9 + *(int *)(v6 + 20);
  v26 = *MEMORY[0x1E0CDB0C0];
  v27 = sub_1A9CE73B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  *v9 = v24;
  v9[1] = v24;
  v28 = MEMORY[0x1E0CDA088];
  sub_1A9BA6F90((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA088]);
  *(_WORD *)&v5[*(int *)(v2 + 36)] = 256;
  sub_1A9BA6F90((uint64_t)v5, (uint64_t)&v20[*(int *)(v16 + 36)], (uint64_t (*)(_QWORD))sub_1A9BC2B90);
  *(_QWORD *)v20 = v21;
  *((_QWORD *)v20 + 1) = 0;
  *((_WORD *)v20 + 8) = 1;
  *((_QWORD *)v20 + 3) = v22;
  v20[32] = v23;
  *((_QWORD *)v20 + 5) = v42;
  v20[48] = v41;
  v29 = v39;
  *((_QWORD *)v20 + 7) = v40;
  *((_QWORD *)v20 + 8) = v29;
  swift_retain();
  sub_1A9B97190((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1A9BC2B90);
  sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))v28);
  swift_release();
  if (qword_1EEB42DD8 != -1)
    swift_once();
  v30 = sub_1A9CE7CC8();
  if (qword_1EEB42DE0 != -1)
    swift_once();
  v31 = qword_1EEB488A8;
  if (qword_1EEB42DE8 != -1)
    swift_once();
  v32 = qword_1EEB488B0;
  if (qword_1EEB42DF0 != -1)
    swift_once();
  v33 = qword_1EEB488B8;
  v34 = v43;
  sub_1A9BA6F90((uint64_t)v20, v43, (uint64_t (*)(_QWORD))sub_1A9C787F4);
  sub_1A9BCC414(0, &qword_1EEB489C0, sub_1A9C787F4);
  v36 = (uint64_t *)(v34 + *(int *)(v35 + 36));
  *v36 = v30;
  v36[1] = v31;
  v36[2] = v32;
  v36[3] = v33;
  return sub_1A9B97190((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1A9C787F4);
}

uint64_t sub_1A9C77ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C776C0(a1);
}

uint64_t _s13SleepHealthUI18PromotionViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t result;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(unsigned __int8 *)(a2 + 40);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v10 = sub_1A9CE8BB0(), result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (v12 = sub_1A9CE8BB0(), result = 0, (v12 & 1) != 0))
    {
      if (v3)
      {
        if (!v8)
          return 0;
        swift_retain();
        swift_retain();
        v13 = sub_1A9CE7C44();
        swift_release();
        swift_release();
        if ((v13 & 1) == 0)
          return 0;
      }
      else if (v8)
      {
        return 0;
      }
      if (v5 == 3)
        return v9 == 3;
      if (v9 == 3)
        return 0;
      v14 = 0xEE0065636E656972;
      v15 = 0x657078456E69616DLL;
      if (v5)
      {
        if (v5 == 1)
        {
          v16 = 0x696472616F626E6FLL;
          v17 = 0xEA0000000000676ELL;
LABEL_22:
          if (v9)
          {
            if (v9 == 1)
            {
              v15 = 0x696472616F626E6FLL;
              v14 = 0xEA0000000000676ELL;
            }
            else
            {
              v15 = 0x63536567616E616DLL;
              v14 = 0xEE00656C75646568;
            }
          }
          if (v16 == v15 && v17 == v14)
          {
            swift_bridgeObjectRelease_n();
            return 1;
          }
          v19 = sub_1A9CE8BB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (v19 & 1) != 0;
        }
        v16 = 0x63536567616E616DLL;
        v18 = 0x656C75646568;
      }
      else
      {
        v16 = 0x657078456E69616DLL;
        v18 = 0x65636E656972;
      }
      v17 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      goto LABEL_22;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromotionViewModel()
{
  return &type metadata for PromotionViewModel;
}

ValueMetadata *type metadata accessor for PromotionView()
{
  return &type metadata for PromotionView;
}

uint64_t sub_1A9C77D30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s13SleepHealthUI18PromotionViewModelVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A9C77EFC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionablePromotionView()
{
  return &type metadata for ActionablePromotionView;
}

unint64_t sub_1A9C77F5C()
{
  unint64_t result;

  result = qword_1EEB488C0;
  if (!qword_1EEB488C0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF44A8, &type metadata for ActionablePromotionView);
    atomic_store(result, (unint64_t *)&qword_1EEB488C0);
  }
  return result;
}

uint64_t sub_1A9C77FA0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C77FB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB488C8)
  {
    sub_1A9B92F34(255, &qword_1EEB488D0, (uint64_t (*)(uint64_t))sub_1A9C78048, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB48950, &qword_1EEB488D0, (uint64_t (*)(uint64_t))sub_1A9C78048);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB488C8);
  }
}

void sub_1A9C78048(uint64_t a1)
{
  sub_1A9BAAA78(a1, &qword_1EEB488D8, (void (*)(uint64_t))sub_1A9C78064, (void (*)(uint64_t))sub_1A9C780C0);
}

void sub_1A9C78064()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB488E0)
  {
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB488E0);
  }
}

void sub_1A9C780C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB488E8)
  {
    sub_1A9B92F34(255, &qword_1EEB488F0, (uint64_t (*)(uint64_t))sub_1A9C78158, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB48948, &qword_1EEB488F0, (uint64_t (*)(uint64_t))sub_1A9C78158);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB488E8);
  }
}

void sub_1A9C78158(uint64_t a1)
{
  sub_1A9BAAA78(a1, &qword_1EEB488F8, sub_1A9C78174, sub_1A9C7820C);
}

void sub_1A9C78174(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB48900, (void (*)(uint64_t))sub_1A9C78190);
}

void sub_1A9C78190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48908)
  {
    sub_1A9BC8538();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48908);
  }
}

void sub_1A9C7820C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48910, (uint64_t (*)(uint64_t))sub_1A9C78228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C78228(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48918, (uint64_t (*)(uint64_t))sub_1A9C78244, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C78244(uint64_t a1)
{
  sub_1A9BAAA78(a1, &qword_1EEB48920, (void (*)(uint64_t))MEMORY[0x1E0CDFE58], sub_1A9C78260);
}

void sub_1A9C78260(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB48928, (void (*)(uint64_t))sub_1A9C7827C);
}

void sub_1A9C7827C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48930)
  {
    sub_1A9C782F8(255);
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48930);
  }
}

void sub_1A9C782F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EEB48938)
  {
    v2 = sub_1A9CE7194();
    v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78];
    v6[0] = &type metadata for SleepDeepLinkButton;
    v6[1] = v2;
    v6[2] = sub_1A9BFCA90();
    v6[3] = sub_1A9B92B9C(&qword_1EEB48940, v3, MEMORY[0x1E0CD9F68]);
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0CDDFE8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEB48938);
  }
}

void sub_1A9C783A4(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB48958, (void (*)(uint64_t))sub_1A9C77FB0);
}

void sub_1A9C783C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48960)
  {
    sub_1A9B92F34(255, &qword_1EEB488D0, (uint64_t (*)(uint64_t))sub_1A9C78048, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48960);
  }
}

void sub_1A9C7843C(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB48968, sub_1A9C783A4, (void (*)(uint64_t))sub_1A9C78458);
}

void sub_1A9C78458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48970)
  {
    sub_1A9CE7518();
    sub_1A9B92B9C(&qword_1EEB48978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDBD90], MEMORY[0x1E0CDBD88]);
    v0 = sub_1A9CE753C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48970);
  }
}

uint64_t sub_1A9C784D0(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A9C78514(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

unint64_t sub_1A9C7855C()
{
  unint64_t result;

  result = qword_1EEB48980;
  if (!qword_1EEB48980)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF4594, &type metadata for AppIconView);
    atomic_store(result, (unint64_t *)&qword_1EEB48980);
  }
  return result;
}

void sub_1A9C785A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48988)
  {
    sub_1A9B92F34(255, &qword_1EEB488F0, (uint64_t (*)(uint64_t))sub_1A9C78158, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48988);
  }
}

uint64_t sub_1A9C7862C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B94CA0(0, &qword_1EEB48990, (uint64_t)&type metadata for SleepDeepLinkDestination, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for AppIconView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AppIconView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for AppIconView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AppIconView()
{
  return &type metadata for AppIconView;
}

uint64_t sub_1A9C78754()
{
  return sub_1A9BC2784(&qword_1EEB48998, (uint64_t (*)(uint64_t))sub_1A9C7843C, sub_1A9C78788, sub_1A9C787C8);
}

uint64_t sub_1A9C78788()
{
  return sub_1A9BC2784(&qword_1EEB489A0, (uint64_t (*)(uint64_t))sub_1A9C783A4, sub_1A9C787AC, (uint64_t (*)(void))sub_1A9C03A40);
}

uint64_t sub_1A9C787AC()
{
  return sub_1A9B92B9C(&qword_1EEB489A8, (uint64_t (*)(uint64_t))sub_1A9C77FB0, MEMORY[0x1E0CDFB10]);
}

uint64_t sub_1A9C787C8()
{
  return sub_1A9B92B9C(&qword_1EEB489B0, (uint64_t (*)(uint64_t))sub_1A9C78458, MEMORY[0x1E0CDBEF0]);
}

uint64_t sub_1A9C787E4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C787F4(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB489B8, (void (*)(uint64_t))sub_1A9C20B58, (void (*)(uint64_t))sub_1A9BC2B90);
}

unint64_t sub_1A9C78814()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB489C8;
  if (!qword_1EEB489C8)
  {
    sub_1A9BCC414(255, &qword_1EEB489C0, sub_1A9C787F4);
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB489D0, (uint64_t (*)(uint64_t))sub_1A9C787F4, (uint64_t (*)(void))sub_1A9C788B4, sub_1A9BC2D1C);
    v3[1] = MEMORY[0x1E0CD9100];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB489C8);
  }
  return result;
}

unint64_t sub_1A9C788B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46D88;
  if (!qword_1EEB46D88)
  {
    sub_1A9C20B58();
    v2 = v1;
    v3[0] = sub_1A9C20D14();
    v3[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46D88);
  }
  return result;
}

void sub_1A9C78920(uint64_t a1, uint64_t a2)
{
  sub_1A9C7892C(a1, a2, &OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo);
}

void sub_1A9C7892C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v6 = v3 + *a3;
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 112);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v6 + 88), v7);
  v9 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8500]), sel_initWithStep_action_entryPoint_, a1, a2, *(unsigned __int8 *)(*(_QWORD *)v6 + 24));
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA84F8]), sel_initWithOnboardingInfo_provenanceInfo_, v10, *(_QWORD *)(*(_QWORD *)v6 + 16));

  objc_msgSend(v9, sel_trackEvent_, v11);
}

uint64_t SleepOnboardingSetupViewController.__allocating_init(userInfo:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 240))(a1, 0);
}

id SleepOnboardingSetupViewController.__allocating_init(userInfo:presentationStyle:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(a1, a2);
}

id SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v33;
  uint64_t v34;

  swift_getObjectType();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded) = 0;
  v5 = sub_1A9C78E08();
  v7 = v6;
  sub_1A9C78FF0();
  v9 = v8;
  v11 = v10;
  swift_retain();
  v12 = (void *)sub_1A9C79464();
  v13 = SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(v5, v7, v9, v11, a1, a2, v12, 2);
  v14 = objc_msgSend(v13, sel_headerView);
  objc_msgSend(v14, sel_setAllowFullWidthIcon_, 1);

  if (qword_1EEB42E98 != -1)
    swift_once();
  v15 = sub_1A9CE6990();
  __swift_project_value_buffer(v15, (uint64_t)qword_1EEB49488);
  swift_retain_n();
  v16 = sub_1A9CE6978();
  v17 = sub_1A9CE867C();
  if (!os_log_type_enabled(v16, v17))
  {

    swift_release_n();
    if (a2 == 1)
      goto LABEL_15;
    goto LABEL_14;
  }
  v33 = a2;
  v18 = swift_slowAlloc();
  v19 = swift_slowAlloc();
  v34 = v19;
  *(_DWORD *)v18 = 136446466;
  v20 = sub_1A9CE8D48();
  sub_1A9B91D6C(v20, v21, &v34);
  sub_1A9CE888C();
  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 12) = 2080;
  v22 = objc_msgSend(*(id *)(a1 + 16), sel_source);
  v23 = sub_1A9CE82E0();
  v25 = v24;
  if (v23 == sub_1A9CE82E0() && v25 == v26)
  {

    swift_bridgeObjectRelease_n();
    v27 = 0xE500000000000000;
    v28 = v33;
    v29 = 0x7964647562;
  }
  else
  {
    v30 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = 0x7964647562;
    if ((v30 & 1) != 0)
    {
      v27 = 0xE500000000000000;
    }
    else
    {
      v29 = 1852399981;
      v27 = 0xE400000000000000;
    }
    v28 = v33;
  }
  sub_1A9B91D6C(v29, v27, &v34);
  sub_1A9CE888C();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1A9B87000, v16, v17, "[%{public}s] init for %s flow", (uint8_t *)v18, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1AF420344](v19, -1, -1);
  MEMORY[0x1AF420344](v18, -1, -1);

  if (v28 != 1)
  {
LABEL_14:
    v31 = v13;
    objc_msgSend(v31, sel_setModalInPresentation_, 0);

  }
LABEL_15:

  swift_release();
  return v13;
}

uint64_t sub_1A9C78E08()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  id v8;
  uint64_t v9;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v2 = sub_1A9CE82E0();
  v4 = v3;
  if (v2 == sub_1A9CE82E0() && v4 == v5)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_1ED2626A8 == -1)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  if (qword_1ED2626A8 != -1)
LABEL_11:
    swift_once();
LABEL_10:
  v8 = (id)qword_1ED264F90;
  v9 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v9;
}

void sub_1A9C78FF0()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;

  v1 = v0;
  v2 = (void *)v0[2];
  v3 = objc_msgSend(v2, sel_source);
  v4 = sub_1A9CE82E0();
  v6 = v5;
  if (v4 == sub_1A9CE82E0() && v6 == v7)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      v10 = objc_msgSend(v2, sel_source);
      v11 = sub_1A9CE82E0();
      v13 = v12;
      if (v11 == sub_1A9CE82E0() && v13 == v14)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        v16 = sub_1A9CE8BB0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_17;
        v19 = v1[14];
        v20 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v19);
        v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 80);
        swift_retain();
        if ((v21(v19, v20) & 1) == 0)
        {
          swift_release();
          v32 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
          if (v32)
          {
            v33 = v32;
            v34 = objc_msgSend(v32, sel_features);

            if (v34)
            {
              objc_msgSend(v34, sel_timeInBedTracking);

              goto LABEL_17;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          return;
        }
        v22 = v1[14];
        v23 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
        (*(void (**)(uint64_t, uint64_t))(v23 + 96))(v22, v23);
        v24 = v1[14];
        v25 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v24);
        (*(void (**)(uint64_t, uint64_t))(v25 + 112))(v24, v25);
        v26 = v1[14];
        v27 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v26);
        (*(void (**)(uint64_t, uint64_t))(v27 + 120))(v26, v27);
        v28 = v1[14];
        v29 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v28);
        (*(void (**)(uint64_t, uint64_t))(v29 + 128))(v28, v29);
        v30 = v1[14];
        v31 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v30);
        (*(void (**)(uint64_t, uint64_t))(v31 + 136))(v30, v31);
        swift_release();
      }
LABEL_17:
      if (qword_1ED2626A8 != -1)
        swift_once();
      v18 = (id)qword_1ED264F90;
      sub_1A9CE6168();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v17 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
}

uint64_t sub_1A9C79464()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v1 = (void *)v0[2];
  v2 = objc_msgSend(v1, sel_source);
  v3 = sub_1A9CE82E0();
  v5 = v4;
  if (v3 == sub_1A9CE82E0() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    return 0;
  }
  v8 = sub_1A9CE8BB0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    return 0;
  v9 = objc_msgSend(v1, sel_source);
  v10 = sub_1A9CE82E0();
  v12 = v11;
  if (v10 == sub_1A9CE82E0() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v15 = sub_1A9CE8BB0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_17:
    v31 = v0[14];
    v32 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v31);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 80);
    swift_retain();
    if ((v33(v31, v32) & 1) != 0)
    {
      v34 = v0[14];
      v35 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v34);
      (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 96))(v34, v35);
      v36 = v0[14];
      v37 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v36);
      (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 112))(v36, v37);
      v38 = v0[14];
      v39 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v38);
      (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 120))(v38, v39);
      v40 = v0[14];
      v41 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v40);
      (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 128))(v40, v41);
      v42 = v0[14];
      v43 = v0[15];
      __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v42);
      (*(void (**)(uint64_t, uint64_t))(v43 + 136))(v42, v43);
      swift_release();
      sub_1A9C7D3C0();
      return v44;
    }
    swift_release();
    return 0;
  }
  v16 = v0[14];
  v17 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v16);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 80);
  swift_retain();
  if ((v18(v16, v17) & 1) != 0)
  {
    v19 = v0[14];
    v20 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 96))(v19, v20);
    v21 = v0[14];
    v22 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 112))(v21, v22);
    v23 = v0[14];
    v24 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 120))(v23, v24);
    v25 = v0[14];
    v26 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 128))(v25, v26);
    v27 = v0[14];
    v28 = v0[15];
    __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 136))(v27, v28);
    swift_release();
    goto LABEL_17;
  }
  swift_release();
  if (qword_1EEB42E18 != -1)
    swift_once();
  v29 = qword_1EEB48A18;
  v45 = (id)qword_1EEB48A18;
  return v29;
}

void sub_1A9C79838(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  os_log_type_t type;
  NSObject *log;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];

  v3 = v2;
  swift_getObjectType();
  if (a1)
  {
    v6 = *a2;
    v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
    swift_beginAccess();
    v8 = *v7;
    swift_beginAccess();
    if (*(_BYTE *)(v8 + 80) == 3)
    {
      v9 = qword_1EEB42E98;
      v10 = a1;
      if (v9 != -1)
        swift_once();
      v11 = sub_1A9CE6990();
      __swift_project_value_buffer(v11, (uint64_t)qword_1EEB49488);
      v12 = v10;
      v13 = sub_1A9CE6978();
      v14 = sub_1A9CE867C();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc();
        v34 = swift_slowAlloc();
        v36[0] = v34;
        *(_DWORD *)v15 = 136446466;
        log = v13;
        v16 = sub_1A9CE8D48();
        type = v14;
        sub_1A9B91D6C(v16, v17, v36);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        v18 = v12;
        v19 = objc_msgSend(v18, sel_description);
        v20 = sub_1A9CE82E0();
        v22 = v21;

        sub_1A9B91D6C(v20, v22, v36);
        sub_1A9CE888C();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, log, type, "[%{public}s] updating with schedule: %{public}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v34, -1, -1);
        MEMORY[0x1AF420344](v15, -1, -1);

      }
      else
      {

      }
      v23 = *v7;
      swift_retain();
      objc_msgSend(v12, sel_mutableCopy);
      sub_1A9CE88EC();
      swift_unknownObjectRelease();
      sub_1A9C6F564();
      swift_dynamicCast();
      swift_beginAccess();
      v24 = *(void **)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v35;
      swift_release();

      v25 = *v7;
      swift_beginAccess();
      *(_BYTE *)(v25 + 80) = v6;
      if (*(_BYTE *)(v3 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded) == 1)
      {
        sub_1A9C79E84();
      }
      else
      {
        v26 = sub_1A9CE6978();
        v27 = sub_1A9CE867C();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          v29 = swift_slowAlloc();
          v35 = v29;
          *(_DWORD *)v28 = 136446210;
          v30 = sub_1A9CE8D48();
          sub_1A9B91D6C(v30, v31, &v35);
          sub_1A9CE888C();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A9B87000, v26, v27, "[%{public}s] skipping reload since view hasn't loaded yet", v28, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF420344](v29, -1, -1);
          MEMORY[0x1AF420344](v28, -1, -1);

          return;
        }

      }
    }
  }
}

void sub_1A9C79CA0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  uint64_t v10;
  objc_super v11;

  v1 = v0;
  swift_getObjectType();
  if (qword_1EEB42E98 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49488);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] view did load", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = (objc_class *)type metadata accessor for SleepOnboardingSetupViewController();
  v11.receiver = v1;
  v11.super_class = v9;
  objc_msgSendSuper2(&v11, sel_viewDidLoad);
  *((_BYTE *)v1 + OBJC_IVAR____TtC13SleepHealthUI34SleepOnboardingSetupViewController_viewAlreadyLoaded) = 1;
  sub_1A9C79E84();
}

void sub_1A9C79E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11[3];

  v1 = v0;
  swift_getObjectType();
  if (qword_1EEB42E98 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49488);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, v11);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] reloading views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  v10 = *v9;
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 80) == 3)
    sub_1A9C7B92C();
  else
    sub_1A9C7A05C();
}

void sub_1A9C7A05C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35[3];

  v1 = v0;
  swift_getObjectType();
  if (qword_1EEB42E98 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49488);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v35[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, v35);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] setting up standard views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  objc_msgSend(v1, sel_hksp_removeSpinnerView);
  if (qword_1EEB42DF8 != -1)
    swift_once();
  v9 = (void *)sub_1A9CE82B0();
  if (qword_1EEB42E00 != -1)
    swift_once();
  v10 = (void *)sub_1A9CE82B0();
  if (qword_1EEB42E20 != -1)
    swift_once();
  objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v9, v10, qword_1EEB48A20);

  if (qword_1EEB42E08 != -1)
    swift_once();
  v11 = (void *)sub_1A9CE82B0();
  v12 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  swift_retain();
  sub_1A9C7A7E0();
  swift_release();
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (qword_1EEB42E28 != -1)
    swift_once();
  objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v11, v13, qword_1EEB48A28);

  swift_retain();
  sub_1A9C7AA84();
  v15 = v14;
  swift_release();
  if ((v15 & 1) != 0)
  {
    swift_retain();
    sub_1A9C7ADB4();
    swift_release();
    v16 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1A9C7B060();
    swift_release();
    v17 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    if (qword_1EEB42E30 != -1)
      swift_once();
    objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v16, v17, qword_1EEB48A30);

  }
  swift_retain();
  v18 = sub_1A9C7B46C();
  swift_release();
  if ((v18 & 1) != 0)
  {
    if (qword_1EEB42E10 != -1)
      swift_once();
    v19 = (void *)sub_1A9CE82B0();
    v20 = qword_1ED2626A8;
    swift_retain();
    if (v20 != -1)
      swift_once();
    v21 = (id)qword_1ED264F90;
    sub_1A9CE6168();
    swift_release();

    swift_bridgeObjectRelease();
    v22 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    if (qword_1EEB42E38 != -1)
      swift_once();
    objc_msgSend(v1, sel_addBulletedListItemWithTitle_description_image_, v19, v22, qword_1EEB48A38, 0xE000000000000000);

  }
  swift_retain();
  sub_1A9C7B72C();
  swift_release();
  v23 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();

  v24 = *(void **)(*(_QWORD *)v12 + 16);
  swift_retain();
  v25 = objc_msgSend(v24, sel_source);
  v26 = sub_1A9CE82E0();
  v28 = v27;
  if (v26 == sub_1A9CE82E0() && v28 == v29)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v30 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      objc_msgSend(v1, sel_hksp_addCancelButton);
      return;
    }
  }
  v31 = qword_1ED2626A8;
  v32 = v1;
  if (v31 != -1)
    swift_once();
  v33 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v34 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_hksp_addSkipButtonWithTitle_, v34, 0xE000000000000000);

}

uint64_t sub_1A9C7A7E0()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = (_QWORD *)v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v3 = sub_1A9CE82E0();
  v5 = v4;
  if (v3 == sub_1A9CE82E0() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v9 = v1[14];
      v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if ((v11(v9, v10) & 1) != 0)
      {
        v12 = v1[14];
        v13 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
        (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
        v14 = v1[14];
        v15 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
        (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
        v16 = v1[14];
        v17 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
        (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
        v18 = v1[14];
        v19 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
        (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
        v20 = v1[14];
        v21 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
        (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      }
      swift_release();
    }
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v22 = (id)qword_1ED264F90;
  v23 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

void sub_1A9C7AA84()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;

  v1 = (_QWORD *)v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v3 = sub_1A9CE82E0();
  v5 = v4;
  if (v3 == sub_1A9CE82E0() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  v8 = sub_1A9CE8BB0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_9:
    v22 = v1[14];
    v23 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
    swift_retain();
    if ((v24(v22, v23) & 1) != 0)
    {
      v25 = v1[14];
      v26 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
      v27 = v1[14];
      v28 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v27);
      (*(void (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
      v29 = v1[14];
      v30 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
      v31 = v1[14];
      v32 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v31);
      (*(void (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
      v33 = v1[14];
      v34 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
    }
    swift_release();
    return;
  }
  v9 = v1[14];
  v10 = v1[15];
  __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
  swift_retain();
  if ((v11(v9, v10) & 1) != 0)
  {
    v12 = v1[14];
    v13 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
    v14 = v1[14];
    v15 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
    v16 = v1[14];
    v17 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
    v18 = v1[14];
    v19 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
    v20 = v1[14];
    v21 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
    (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
    swift_release();
    goto LABEL_9;
  }
  swift_release();
  v35 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend(v35, sel_features);

    if (v37)
    {
      objc_msgSend(v37, sel_timeInBedTracking);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1A9C7ADB4()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = (_QWORD *)v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v3 = sub_1A9CE82E0();
  v5 = v4;
  if (v3 == sub_1A9CE82E0() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v9 = v1[14];
      v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if ((v11(v9, v10) & 1) != 0)
      {
        v12 = v1[14];
        v13 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
        (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
        v14 = v1[14];
        v15 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
        (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
        v16 = v1[14];
        v17 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
        (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
        v18 = v1[14];
        v19 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
        (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
        v20 = v1[14];
        v21 = v1[15];
        __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
        (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      }
      swift_release();
    }
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v22 = (id)qword_1ED264F90;
  v23 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1A9C7B060()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v36;
  uint64_t v37;

  v1 = (_QWORD *)v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v3 = sub_1A9CE82E0();
  v5 = v4;
  if (v3 == sub_1A9CE82E0() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v9 = v1[14];
      v10 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v9);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
      swift_retain();
      if ((v11(v9, v10) & 1) == 0)
      {
        swift_release();
        if (qword_1ED2626A8 == -1)
          goto LABEL_14;
LABEL_15:
        swift_once();
        goto LABEL_14;
      }
      v12 = v1[14];
      v13 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v12);
      (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13);
      v14 = v1[14];
      v15 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v14);
      (*(void (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15);
      v16 = v1[14];
      v17 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v16);
      (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
      v18 = v1[14];
      v19 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v18);
      (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
      v20 = v1[14];
      v21 = v1[15];
      __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 136))(v20, v21);
      swift_release();
    }
  }
  v22 = v1[14];
  v23 = v1[15];
  __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v22);
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
  swift_retain();
  if ((v24(v22, v23) & 1) != 0)
  {
    v25 = v1[14];
    v26 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v25);
    (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
    v27 = v1[14];
    v28 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v27);
    (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
    v29 = v1[14];
    v30 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v29);
    (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
    v31 = v1[14];
    v32 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v31);
    (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
    v33 = v1[14];
    v34 = v1[15];
    __swift_project_boxed_opaque_existential_1Tm(v1 + 11, v33);
    (*(void (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
    swift_release();
    return sub_1A9C7D4EC();
  }
  swift_release();
  if (qword_1ED2626A8 != -1)
    goto LABEL_15;
LABEL_14:
  v36 = (id)qword_1ED264F90;
  v37 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_1A9C7B46C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + 88), v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 80);
  swift_retain();
  if ((v5(v3, v4) & 1) == 0)
    goto LABEL_9;
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v6);
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 112))(v8, v9);
  v10 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 120))(v10, v11);
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 128))(v12, v13);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v2, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 136))(v14, v15);
  swift_release();
  if ((v6 & 1) != 0)
  {
    v16 = objc_msgSend(*(id *)(v0 + 16), sel_source);
    v17 = sub_1A9CE82E0();
    v19 = v18;
    if (v17 == sub_1A9CE82E0() && v19 == v20)
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
    v21 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      return 0;
    v22 = *(_QWORD *)(v1 + 112);
    v23 = *(_QWORD *)(v1 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v2, v22);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 80);
    swift_retain();
    if ((v24(v22, v23) & 1) != 0)
    {
      v25 = *(_QWORD *)(v1 + 112);
      v26 = *(_QWORD *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v25);
      (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v25, v26);
      v27 = *(_QWORD *)(v1 + 112);
      v28 = *(_QWORD *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v27);
      (*(void (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
      v29 = *(_QWORD *)(v1 + 112);
      v30 = *(_QWORD *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
      v31 = *(_QWORD *)(v1 + 112);
      v32 = *(_QWORD *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v31);
      (*(void (**)(uint64_t, uint64_t))(v32 + 128))(v31, v32);
      v33 = *(_QWORD *)(v1 + 112);
      v34 = *(_QWORD *)(v1 + 120);
      __swift_project_boxed_opaque_existential_1Tm(v2, v33);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 136))(v33, v34);
      swift_release();
      return v35 & 1;
    }
LABEL_9:
    swift_release();
  }
  return 0;
}

uint64_t sub_1A9C7B72C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  id v8;
  uint64_t v9;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_13;
    goto LABEL_14;
  }
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_source);
  v2 = sub_1A9CE82E0();
  v4 = v3;
  if (v2 == sub_1A9CE82E0() && v4 == v5)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_1ED2626A8 == -1)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  if (qword_1ED2626A8 != -1)
LABEL_14:
    swift_once();
LABEL_13:
  v8 = (id)qword_1ED264F90;
  v9 = sub_1A9CE6168();

  return v9;
}

id sub_1A9C7B92C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  id result;
  uint64_t v19[3];

  v1 = v0;
  swift_getObjectType();
  if (qword_1EEB42E98 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49488);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v19[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, v19);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] setting up waiting views", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  objc_msgSend(v1, sel_hksp_addSpinnerView);
  v9 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  v10 = *(void **)(*(_QWORD *)v9 + 16);
  swift_retain();
  v11 = objc_msgSend(v10, sel_source);
  v12 = sub_1A9CE82E0();
  v14 = v13;
  if (v12 == sub_1A9CE82E0() && v14 == v15)
  {
    swift_release();

    return (id)swift_bridgeObjectRelease_n();
  }
  else
  {
    v17 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    result = (id)swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
      return objc_msgSend(v1, sel_hksp_addCancelButton);
  }
  return result;
}

void sub_1A9C7BD58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t ObjectType;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50[3];

  v45[1] = swift_getObjectType();
  v46 = sub_1A9CE690C();
  v2 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v3);
  v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE6924();
  v47 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v45 - v12;
  v14 = sub_1A9CE6900();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v45 - v21;
  sub_1A9C7D8A0(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1A9C7D854((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0D2B950], v46);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, v14);
    sub_1A9CE6918();
    sub_1A9C7D8F4();
    sub_1A9CE672C();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
  }
  v23 = v48;
  v24 = &v48[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  if (*(_BYTE *)(*(_QWORD *)v24 + 24) == 1)
  {
    if (qword_1EEB42E98 != -1)
      swift_once();
    v25 = sub_1A9CE6990();
    __swift_project_value_buffer(v25, (uint64_t)qword_1EEB49488);
    v26 = sub_1A9CE6978();
    v27 = sub_1A9CE867C();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v50[0] = v29;
      *(_DWORD *)v28 = 136446210;
      v30 = sub_1A9CE8D48();
      v49 = sub_1A9B91D6C(v30, v31, v50);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v26, v27, "[%{public}s] we're done!", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v29, -1, -1);
      MEMORY[0x1AF420344](v28, -1, -1);
    }

    v32 = &v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
    swift_beginAccess();
    if (*(_QWORD *)v32)
    {
      v33 = *((_QWORD *)v32 + 1);
      ObjectType = swift_getObjectType();
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
      swift_unknownObjectRetain();
      v36 = swift_retain();
      v35(v36, ObjectType, v33);
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v37 = *(_QWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle];
    v38 = objc_allocWithZone((Class)type metadata accessor for SleepOnboardingScheduleViewController());
    v39 = swift_retain();
    v40 = sub_1A9CC5CB4(v39, v37);
    v41 = &v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
    swift_beginAccess();
    v43 = *(_QWORD *)v41;
    v42 = *((_QWORD *)v41 + 1);
    v44 = &v40[OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate];
    swift_beginAccess();
    *(_QWORD *)v44 = v43;
    *((_QWORD *)v44 + 1) = v42;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    objc_msgSend(v23, sel_showViewController_sender_, v40, 0);

  }
}

void sub_1A9C7C224()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;

  sub_1A9C7892C(1, 2, &OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = (_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  swift_retain();
  if ((v6(v4, v5) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 112);
    v8 = *(_QWORD *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v7);
    LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 96))(v7, v8);
    v9 = *(_QWORD *)(v2 + 112);
    v10 = *(_QWORD *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10);
    v11 = *(_QWORD *)(v2 + 112);
    v12 = *(_QWORD *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 120))(v11, v12);
    v13 = *(_QWORD *)(v2 + 112);
    v14 = *(_QWORD *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 128))(v13, v14);
    v15 = *(_QWORD *)(v2 + 112);
    v16 = *(_QWORD *)(v2 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v3, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 136))(v15, v16);
    swift_release();
    if ((v7 & 1) != 0)
    {
      v17 = *v1;
      swift_beginAccess();
      v18 = *(void **)(v17 + 48);
      swift_retain();
      objc_msgSend(v18, sel_setSleepTracking_, 1);
      objc_msgSend(*(id *)(v17 + 48), sel_setChargingReminders_, 1);
      v19 = *(id *)(v17 + 48);
      objc_msgSend(v19, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v19, sel_sleepModeOptions) | 0x4000);
      swift_release();

    }
  }
  else
  {
    swift_release();
  }
  swift_retain();
  v20 = sub_1A9C7B46C();
  swift_release();
  if ((v20 & 1) != 0)
  {
    v21 = *v1;
    swift_beginAccess();
    *(_BYTE *)(v21 + 128) = 1;
  }
  v22 = *v1;
  if ((*(_BYTE *)(v22 + 24) & 1) == 0)
  {
    swift_beginAccess();
    v23 = *(void **)(v22 + 48);
    swift_retain();
    objc_msgSend(v23, sel_setScheduledSleepMode_, 1);
    v24 = *(id *)(v22 + 48);
    objc_msgSend(v24, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v24, sel_sleepModeOptions) | 0x4000);
    swift_release();

  }
}

uint64_t sub_1A9C7C4D4()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  swift_getObjectType();
  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - v4;
  sub_1A9BB7054(0, &qword_1EEB453C0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v34 - v8;
  v10 = &v0[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  swift_beginAccess();
  if (*(_BYTE *)(v11 + 64) == 1)
  {
    if (qword_1EEB42E98 != -1)
      swift_once();
    v12 = sub_1A9CE6990();
    __swift_project_value_buffer(v12, (uint64_t)qword_1EEB49488);
    v13 = sub_1A9CE6978();
    v14 = sub_1A9CE867C();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v35 = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = sub_1A9CE8D48();
      v34 = sub_1A9B91D6C(v17, v18, &v35);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] requesting TCC authorization", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v16, -1, -1);
      MEMORY[0x1AF420344](v15, -1, -1);
    }

    v19 = *(_QWORD *)v10;
    v20 = (_QWORD *)(*(_QWORD *)v10 + 88);
    v21 = *(_QWORD *)(*(_QWORD *)v10 + 112);
    v22 = *(_QWORD *)(v19 + 120);
    __swift_project_boxed_opaque_existential_1Tm(v20, v21);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v1;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v1;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v1;
    v27 = sub_1A9CE8490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
    sub_1A9CE8478();
    v28 = v1;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v29 = sub_1A9CE846C();
    v30 = (_QWORD *)swift_allocObject();
    v31 = MEMORY[0x1E0DF06E8];
    v30[2] = v29;
    v30[3] = v31;
    v30[4] = v23;
    v30[5] = sub_1A9C7D93C;
    v30[6] = v24;
    v30[7] = sub_1A9C7D944;
    v30[8] = v25;
    v30[9] = sub_1A9C7D964;
    v30[10] = v26;
    sub_1A9CA6974((uint64_t)v9, (uint64_t)&unk_1EEB48A80, (uint64_t)v30);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v33 = sub_1A9CE6900();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v5, 1, 1, v33);
    sub_1A9C7BD58((uint64_t)v5);
    return sub_1A9C7D854((uint64_t)v5);
  }
}

uint64_t sub_1A9C7C8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v6 - v2;
  v4 = sub_1A9CE6900();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_1A9C7BD58((uint64_t)v3);
  return sub_1A9C7D854((uint64_t)v3);
}

void sub_1A9C7C960()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD aBlock[6];

  v1 = (void *)objc_opt_self();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  v3 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v4 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  v5 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v0;
  aBlock[4] = sub_1A9C7D82C;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C7CCA0;
  aBlock[3] = &block_descriptor_6_4;
  v7 = _Block_copy(aBlock);
  v8 = v0;
  swift_release();
  v9 = objc_msgSend(v1, sel_notificationsWontFireAlertControllerWithLocalizedTitle_localizedDismiss_completion_, v3, v5, v7, 0xE000000000000000);
  _Block_release(v7);

  objc_msgSend(v8, sel_presentViewController_animated_completion_, v9, 1, 0);
}

uint64_t sub_1A9C7CBBC(char a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v15;

  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v15 - v9;
  v11 = sub_1A9CE6900();
  v12 = *(_QWORD *)(v11 - 8);
  if ((a1 & 1) != 0)
    v13 = a3;
  else
    v13 = a4;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v10, *v13, v11);
  sub_1A9CE6900();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  sub_1A9C7BD58((uint64_t)v10);
  return sub_1A9C7D854((uint64_t)v10);
}

uint64_t sub_1A9C7CCA0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void SleepOnboardingSetupViewController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SleepOnboardingSetupViewController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepOnboardingSetupViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingSetupViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C7CD64()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();
  v3 = v2;

  result = swift_bridgeObjectRelease();
  qword_1EEB489D8 = v1;
  unk_1EEB489E0 = v3;
  return result;
}

uint64_t sub_1A9C7CE3C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();
  v3 = v2;

  result = swift_bridgeObjectRelease();
  qword_1EEB489E8 = v1;
  unk_1EEB489F0 = v3;
  return result;
}

uint64_t sub_1A9C7CF14()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();
  v3 = v2;

  result = swift_bridgeObjectRelease();
  qword_1EEB489F8 = v1;
  unk_1EEB48A00 = v3;
  return result;
}

uint64_t sub_1A9C7CFEC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();
  v3 = v2;

  result = swift_bridgeObjectRelease();
  qword_1EEB48A08 = v1;
  unk_1EEB48A10 = v3;
  return result;
}

void sub_1A9C7D0C0()
{
  id v0;
  void *v1;
  id v2;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = (void *)sub_1A9CE82B0();
  v2 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_, v1, v0);

  if (v2)
    qword_1EEB48A18 = (uint64_t)v2;
  else
    __break(1u);
}

Class sub_1A9C7D17C()
{
  Class result;

  result = sub_1A9C7D1B8(30.0);
  qword_1EEB48A20 = (uint64_t)result;
  return result;
}

Class sub_1A9C7D1B8(double a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  UIImage v7;
  id v8;
  UIImageConfiguration_optional v10;

  v1 = objc_msgSend((id)objc_opt_self(), sel_systemFontOfSize_weight_, a1, *MEMORY[0x1E0DC1438]);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_configurationWithFont_scale_, v1, 2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  v5 = objc_msgSend(v2, sel_configurationWithHierarchicalColor_, v4);

  v6 = v3;
  v10.value.super.isa = (Class)v3;
  v7.super.isa = Symbol.uiImage(configuration:)(v10).super.isa;

  v8 = -[objc_class imageByApplyingSymbolConfiguration:](v7.super.isa, sel_imageByApplyingSymbolConfiguration_, v5);
  if (v8)
  {

    return (Class)v8;
  }
  return v7.super.isa;
}

Class sub_1A9C7D300()
{
  Class result;

  result = sub_1A9C7D1B8(32.0);
  qword_1EEB48A28 = (uint64_t)result;
  return result;
}

Class sub_1A9C7D340()
{
  Class result;

  result = sub_1A9C7D1B8(32.0);
  qword_1EEB48A30 = (uint64_t)result;
  return result;
}

Class sub_1A9C7D380()
{
  Class result;

  result = sub_1A9C7D1B8(32.0);
  qword_1EEB48A38 = (uint64_t)result;
  return result;
}

void sub_1A9C7D3C0()
{
  id v0;
  void *v1;
  id v2;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_, v1, v0);

  if (!v2)
    __break(1u);
}

uint64_t sub_1A9C7D4EC()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;

  if ((~*v0 & 5) == 0)
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_12;
    goto LABEL_15;
  }
  if ((*v0 & 4) == 4)
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_12;
    goto LABEL_15;
  }
  if ((*v0 & 1) != 1)
  {
    if ((*v0 & 2) == 2)
    {
      if (qword_1ED2626A8 == -1)
        goto LABEL_12;
    }
    else if (qword_1ED2626A8 == -1)
    {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if (qword_1ED2626A8 != -1)
LABEL_15:
    swift_once();
LABEL_12:
  v1 = (id)qword_1ED264F90;
  v2 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t type metadata accessor for SleepOnboardingSetupViewController()
{
  return objc_opt_self();
}

uint64_t sub_1A9C7D790()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9C7D7B4()
{
  sub_1A9C7892C(1, 1, &OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t method lookup function for SleepOnboardingSetupViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingSetupViewController.__allocating_init(userInfo:presentationStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingSetupViewController.update(with:type:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t sub_1A9C7D82C(char a1)
{
  uint64_t v1;

  return sub_1A9C7CBBC(a1, *(_QWORD *)(v1 + 16), MEMORY[0x1E0D2B928], MEMORY[0x1E0D2B940]);
}

uint64_t sub_1A9C7D854(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C7D8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BB7054(0, &qword_1EEB48A70, (void (*)(uint64_t))MEMORY[0x1E0D2B948]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A9C7D8F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48A78;
  if (!qword_1EEB48A78)
  {
    v1 = sub_1A9CE6924();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0D2B920], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48A78);
  }
  return result;
}

uint64_t sub_1A9C7D93C()
{
  return sub_1A9C7C8CC();
}

void sub_1A9C7D944()
{
  sub_1A9C7C960();
}

uint64_t sub_1A9C7D964(char a1)
{
  uint64_t v1;

  return sub_1A9C7CBBC(a1, *(_QWORD *)(v1 + 16), MEMORY[0x1E0D2B930], MEMORY[0x1E0D2B938]);
}

uint64_t sub_1A9C7D98C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C7D9D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = (_QWORD *)v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1A9BDDCC0;
  return sub_1A9CA6CEC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1A9C7DAA0(unsigned __int16 *a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  Class isa;
  Class v5;
  unsigned __int16 v6;
  UIImageConfiguration_optional v7;

  v6 = *a1;
  result = _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(&v6);
  if ((result & 1) == 0)
  {
    v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image);
    v7.value.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_, *(double *)(v1+ OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration+ 40));
    isa = v7.value.super.isa;
    v5 = Symbol.uiImage(configuration:)(v7).super.isa;

    objc_msgSend(v3, sel_setImage_, v5);
    return (uint64_t)objc_msgSend(v3, sel_sizeToFit);
  }
  return result;
}

id sub_1A9C7DB8C(uint64_t a1)
{
  char *v1;
  char *v2;
  double v4;
  char *v5;
  double v6;
  void *v7;
  Class isa;
  Class v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  _QWORD v25[6];
  UIImageConfiguration_optional v26;

  v2 = v1;
  sub_1A9C7E1FC();
  sub_1A9BA0D6C(a1, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1A9C7EF2C);
  v4 = *(double *)&v25[5];
  if (!v25[0])
    v4 = 2.22507386e-308;
  v5 = &v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v6 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 40];
  if (v4 != v6)
  {
    v7 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
    v26.value.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_, v6);
    isa = v26.value.super.isa;
    v9 = Symbol.uiImage(configuration:)(v26).super.isa;

    objc_msgSend(v7, sel_setImage_, v9);
    objc_msgSend(v7, sel_sizeToFit);
  }
  v10 = (void *)objc_opt_self();
  objc_msgSend(v10, sel_begin);
  objc_msgSend(v10, sel_setDisableActions_, 1);
  v11 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
  v12 = *(void **)v5;
  v13 = (void *)*((_QWORD *)v5 + 1);
  v14 = (void *)*((_QWORD *)v5 + 2);
  v15 = (void *)*((_QWORD *)v5 + 3);
  v16 = *((id *)v5 + 4);
  v17 = v12;
  v18 = v13;
  v19 = v14;
  v20 = v15;
  if (objc_msgSend(v2, sel_isHighlighted))
    v21 = v20;
  else
    v21 = v19;
  v22 = v21;

  objc_msgSend(v11, sel_setTintColor_, v22);
  v23 = objc_msgSend(v11, sel_layer);
  objc_msgSend(v23, sel_setCompositingFilter_, *((_QWORD *)v5 + 4));

  return objc_msgSend(v10, sel_commit);
}

void sub_1A9C7DD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD v30[6];

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8);
  v20 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32);
  v22 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 40);
  v8 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v9 = *(void **)(a1 + 16);
  v10 = *(void **)(a1 + 24);
  sub_1A9BA0D6C(a1 + 32, (uint64_t)&v29, (uint64_t (*)(_QWORD))sub_1A9C7EB28);
  v21 = *(void **)(v3 + 8);
  v11 = *(void **)(v3 + 24);
  v19 = *(void **)(v3 + 16);
  v23 = *(void **)(v3 + 32);
  v24 = *(void **)v3;
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v12;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  v28 = v6;
  v26 = v8;
  v25 = v7;
  v13 = v9;
  v14 = v10;
  v15 = v4;
  v16 = v5;
  v17 = v20;
  v18 = v22;
  sub_1A9BBE1C0(&v29);

  v30[0] = v15;
  v30[1] = v16;
  v30[2] = v17;
  v30[3] = v18;
  v30[4] = v6;
  v30[5] = v27;
  sub_1A9C7DB8C((uint64_t)v30);

  sub_1A9BBE210(&v29);
}

char *sub_1A9C7DF24(__int16 *a1, uint64_t a2)
{
  char *v2;
  __int16 v4;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  objc_super v28;
  id v29;
  _OWORD v30[3];

  v4 = *a1;
  v5 = OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background;
  v6 = objc_allocWithZone(MEMORY[0x1E0CD2840]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(_WORD *)&v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_symbol] = v4;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image] = v8;
  v9 = *(void **)a2;
  v10 = *(void **)(a2 + 8);
  v11 = *(void **)(a2 + 16);
  v12 = *(void **)(a2 + 24);
  sub_1A9BA0D6C(a2 + 32, (uint64_t)&v29, (uint64_t (*)(_QWORD))sub_1A9C7EB28);
  v13 = &v7[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v15 = *(_OWORD *)(a2 + 16);
  v14 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v13 = *(_OWORD *)a2;
  *((_OWORD *)v13 + 1) = v15;
  *((_OWORD *)v13 + 2) = v14;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  v19 = v12;
  sub_1A9BBE1C0(&v29);

  v28.receiver = v7;
  v28.super_class = (Class)type metadata accessor for SleepScheduleClockHand();
  v20 = objc_msgSendSuper2(&v28, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1A9BC09A4();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1A9CEB520;
  v22 = sub_1A9CE69C0();
  v23 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v23;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v24 = (char *)v20;
  sub_1A9CE87C0();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  v25 = objc_msgSend(v24, sel_layer);
  objc_msgSend(v25, sel_addSublayer_, *(_QWORD *)&v24[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background]);

  objc_msgSend(v24, sel_addSubview_, *(_QWORD *)&v24[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image]);
  v26 = objc_msgSend(v24, sel_layer);
  objc_msgSend(v26, sel_setAllowsGroupBlending_, 0);

  memset(v30, 0, sizeof(v30));
  sub_1A9C7DB8C((uint64_t)v30);

  sub_1A9BBE210(&v29);
  return v24;
}

void sub_1A9C7E1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9C7E1FC();

  }
}

void sub_1A9C7E1FC()
{
  char *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background];
  v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration];
  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 8];
  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 16];
  v5 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 24];
  v6 = *(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_configuration + 32];
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  if (objc_msgSend(v0, sel_isHighlighted))
    v11 = v8;
  else
    v11 = v7;
  v12 = v11;

  v13 = objc_msgSend(v0, sel_traitCollection);
  v14 = objc_msgSend(v12, sel_resolvedColorWithTraitCollection_, v13);
  v15 = objc_msgSend(v14, sel_CGColor);

  objc_msgSend(v1, sel_setFillColor_, v15);
}

id sub_1A9C7E3CC()
{
  char *v0;
  void *v1;
  CGPathRef v2;
  void *v3;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  objc_super v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for SleepScheduleClockHand();
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_background];
  objc_msgSend(v0, sel_bounds);
  v2 = CGPathCreateWithEllipseInRect(v11, 0);
  objc_msgSend(v1, sel_setPath_, v2);

  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockHand_image];
  objc_msgSend(v0, sel_bounds);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  MidX = CGRectGetMidX(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  return objc_msgSend(v3, sel_setCenter_, MidX, CGRectGetMidY(v13));
}

uint64_t type metadata accessor for SleepScheduleClockHand()
{
  return objc_opt_self();
}

id SleepScheduleClockHand.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockHand.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleClockHand.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleClockHand();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SleepScheduleClockHand()
{
  return swift_lookUpClassMethod();
}

void destroy for SleepScheduleClockHand.Configuration(id *a1)
{

}

_QWORD *initializeWithCopy for SleepScheduleClockHand.Configuration(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v8 = *(void **)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = v8;
  a1[5] = v7;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v8;
  return a1;
}

uint64_t assignWithCopy for SleepScheduleClockHand.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = v17;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SleepScheduleClockHand.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockHand.Configuration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleClockHand.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockHand.Configuration()
{
  return &type metadata for SleepScheduleClockHand.Configuration;
}

BOOL sub_1A9C7E9E8(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1A9C7EA2C((uint64_t)v7, (uint64_t)v8);
}

BOOL sub_1A9C7EA2C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2627A0);
  if ((sub_1A9CE8814() & 1) != 0
    && (sub_1A9CE8814() & 1) != 0
    && (sub_1A9CE8814() & 1) != 0
    && (sub_1A9CE8814() & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    v5 = *(void **)(a2 + 32);
    if (v4)
    {
      if (v5)
      {
        sub_1A9B94A18(0, &qword_1EEB48AB0);
        v6 = v5;
        v7 = v4;
        v8 = sub_1A9CE8814();

        if ((v8 & 1) != 0)
          return *(double *)(a1 + 40) == *(double *)(a2 + 40);
      }
    }
    else if (!v5)
    {
      return *(double *)(a1 + 40) == *(double *)(a2 + 40);
    }
  }
  return 0;
}

void sub_1A9C7EB28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48AB8)
  {
    sub_1A9B94A18(255, &qword_1EEB48AB0);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48AB8);
  }
}

uint64_t sub_1A9C7EB8C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C7EBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9C7E1AC(a1, a2, v2);
}

uint64_t sub_1A9C7EBB8@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t result;
  id v27;
  id v28;
  uint64_t aBlock;
  uint64_t v30;
  id (*v31)(uint64_t, void *);
  void *v32;
  id (*v33)(void *);
  uint64_t v34;

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB47810);
  v28 = static UIColor.ringGoalMetColor.getter();
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_systemGray5Color);
  v4 = objc_msgSend(v2, sel_systemGray6Color);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v33 = sub_1A9BC0924;
  v34 = v5;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_1A9C21C90;
  v32 = &block_descriptor_27;
  v7 = _Block_copy(&aBlock);
  v8 = v3;
  v9 = v4;
  v27 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);

  swift_release();
  v10 = objc_msgSend(v2, sel_systemGray2Color);
  v11 = objc_msgSend(v2, sel_systemGrayColor);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v33 = sub_1A9C41180;
  v34 = v12;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_1A9C21C90;
  v32 = &block_descriptor_10_2;
  v14 = _Block_copy(&aBlock);
  v15 = v10;
  v16 = v11;
  v17 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
  _Block_release(v14);

  swift_release();
  v18 = objc_msgSend(v2, sel_systemGray2Color);
  v19 = objc_msgSend(v2, sel_systemGrayColor);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v18;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v33 = sub_1A9C41180;
  v34 = v20;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_1A9C21C90;
  v32 = &block_descriptor_17;
  v22 = _Block_copy(&aBlock);
  v23 = v18;
  v24 = v19;
  v25 = objc_msgSend(v21, sel_initWithDynamicProvider_, v22);
  _Block_release(v22);

  result = swift_release();
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v17;
  a1[3] = v25;
  a1[4] = 0;
  a1[5] = 0x402C000000000000;
  return result;
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_1A9C7EF00()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9C7EF2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48AC8)
  {
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48AC8);
  }
}

void sub_1A9C7EF80(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t aBlock;
  uint64_t v28;
  id (*v29)(uint64_t, void *);
  void *v30;
  id (*v31)(void *);
  uint64_t v32;

  v2 = (void *)objc_opt_self();
  v26 = objc_msgSend(v2, sel_systemOrangeColor);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v3 = (id)qword_1ED264F90;
  v4 = (void *)sub_1A9CE82B0();
  v5 = objc_msgSend(v2, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v4, v3, 0);

  if (v5)
  {
    v6 = objc_msgSend(v2, sel_systemGray2Color);
    v7 = objc_msgSend(v2, sel_systemGrayColor);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
    v31 = sub_1A9C41180;
    v32 = v8;
    v10 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v28 = 1107296256;
    v29 = sub_1A9C21C90;
    v30 = &block_descriptor_24_1;
    v11 = _Block_copy(&aBlock);
    v12 = v6;
    v13 = v7;
    v25 = objc_msgSend(v9, sel_initWithDynamicProvider_, v11);
    _Block_release(v11);

    swift_release();
    v14 = objc_msgSend(v2, sel_systemGray2Color);
    v15 = objc_msgSend(v2, sel_systemGrayColor);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
    v31 = sub_1A9C41180;
    v32 = v16;
    aBlock = v10;
    v28 = 1107296256;
    v29 = sub_1A9C21C90;
    v30 = &block_descriptor_31_0;
    v18 = _Block_copy(&aBlock);
    v19 = v14;
    v20 = v15;
    v21 = objc_msgSend(v17, sel_initWithDynamicProvider_, v18);
    _Block_release(v18);

    swift_release();
    sub_1A9CE82E0();
    v22 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v23 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, sel_initWithType_, v23);

    *a1 = v26;
    a1[1] = v5;
    a1[2] = v25;
    a1[3] = v21;
    a1[4] = v24;
    a1[5] = 0x402C000000000000;
  }
  else
  {
    __break(1u);
  }
}

uint64_t SleepOnboardingCoordinator.__allocating_init(healthStore:sleepStore:navigationController:onboardingContext:options:)(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = sub_1A9C812A4(a1, a2, a3, a4, a5);

  return v7;
}

uint64_t SleepOnboardingCoordinator.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SleepHealthUI::SleepOnboardingCoordinator::Options __swiftcall SleepOnboardingCoordinator.Options.init(rawValue:)(SleepHealthUI::SleepOnboardingCoordinator::Options rawValue)
{
  SleepHealthUI::SleepOnboardingCoordinator::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SleepOnboardingCoordinator.Options.navigateToSleepRoomOnOnboardingCompletion.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SleepOnboardingCoordinator.Options.navigateToBalanceRoomOnOnboardingCompletion.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t SleepOnboardingCoordinator.__allocating_init(onboardingManager:onboardingContext:navigationController:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  v12 = sub_1A9C813E0(v11, a2, a3, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v12;
}

uint64_t SleepOnboardingCoordinator.init(onboardingManager:onboardingContext:navigationController:options:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  v12 = MEMORY[0x1E0C80A78](v11, v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  v16 = sub_1A9C81028((uint64_t)v14, a2, a3, a4, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v16;
}

id sub_1A9C7F480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  swift_retain_n();
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    LOBYTE(v14) = *(_BYTE *)(v1 + 64);
    v15 = *(_QWORD *)(v1 + 72);
    v9 = *(id *)(v1 + 56);
    v10 = sub_1A9CE82F8();
    v13 = sub_1A9B91D6C(v10, v11, &v16);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Dismissing sleep onboarding with context: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return objc_msgSend(*(id *)(v1 + 88), sel_dismissViewControllerAnimated_completion_, 1, 0, v13, v14, v15, v16);
}

id sub_1A9C7F69C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  char **__ptr32 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED2630B8);
  swift_retain_n();
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  v7 = &off_1A9CEB000;
  if (os_log_type_enabled(v5, v6))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v31 = v9;
    *(_DWORD *)v8 = 136446466;
    v10 = sub_1A9CE8D48();
    sub_1A9B91D6C(v10, v11, &v31);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    LOBYTE(v29) = *(_BYTE *)(a1 + 24);
    v30 = *(_QWORD *)(a1 + 32);
    v12 = *(id *)(a1 + 16);
    v13 = sub_1A9CE82F8();
    v28 = sub_1A9B91D6C(v13, v14, &v31);
    v7 = &off_1A9CEB000;
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] Completing sleep onboarding with context: %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v9, -1, -1);
    MEMORY[0x1AF420344](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v15 = *(_QWORD *)(v2 + 40);
  v16 = *(_QWORD *)(v2 + 48);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v2 + 16), v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 200))(a1, v15, v16);
  v17 = *(_QWORD *)(v2 + 80);
  if ((v17 & 1) != 0)
    sub_1A9C807FC((*(_BYTE *)(a1 + 24) & 1) == 0);
  if ((v17 & 2) != 0)
    sub_1A9C80C54();
  swift_retain_n();
  v18 = sub_1A9CE6978();
  v19 = sub_1A9CE867C();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v31 = v21;
    *(_DWORD *)v20 = *((_QWORD *)v7 + 170);
    v22 = sub_1A9CE8D48();
    sub_1A9B91D6C(v22, v23, &v31);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    LOBYTE(v29) = *(_BYTE *)(a1 + 24);
    v30 = *(_QWORD *)(a1 + 32);
    v24 = *(id *)(a1 + 16);
    v25 = sub_1A9CE82F8();
    v28 = sub_1A9B91D6C(v25, v26, &v31);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] Dismissing sleep onboarding with context: %{public}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v21, -1, -1);
    MEMORY[0x1AF420344](v20, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return objc_msgSend(*(id *)(v2 + 88), sel_dismissViewControllerAnimated_completion_, 1, 0, v28, v29, v30, v31);
}

void sub_1A9C7FAA0(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v4 = v3;
  v8 = v3[5];
  v9 = v3[6];
  __swift_project_boxed_opaque_existential_1Tm(v3 + 2, v8);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v11)
  {
    __break(1u);
    return;
  }
  v12 = v11;
  v13 = objc_msgSend(v11, sel_hksp_supportsSleep);

  if (!v13)
  {

LABEL_10:
    if (qword_1ED262DB8 != -1)
      swift_once();
    v27 = sub_1A9CE6990();
    __swift_project_value_buffer(v27, (uint64_t)qword_1ED2630B8);
    swift_retain_n();
    v17 = sub_1A9CE6978();
    v18 = sub_1A9CE8664();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v43 = v20;
      *(_DWORD *)v19 = 136446466;
      v28 = sub_1A9CE8D48();
      sub_1A9B91D6C(v28, v29, &v43);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2082;
      v30 = (id)v4[7];
      v31 = sub_1A9CE82F8();
      sub_1A9B91D6C(v31, v32, &v43);
      sub_1A9CE888C();
      swift_release_n();
      swift_bridgeObjectRelease();
      v26 = "[%{public}s] Attempted to onboard sleep on unsupported device with context: %{public}s";
LABEL_14:
      _os_log_impl(&dword_1A9B87000, v17, v18, v26, (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v20, -1, -1);
      MEMORY[0x1AF420344](v19, -1, -1);

      if (!a2)
        return;
LABEL_17:
      a2(0);
      return;
    }
LABEL_16:

    swift_release_n();
    if (!a2)
      return;
    goto LABEL_17;
  }
  v14 = objc_msgSend(v10, sel_profileIdentifier);
  v15 = objc_msgSend(v14, sel_type);

  if (v15 == (id)3)
    goto LABEL_10;
  if ((v4[12] & 1) != 0)
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v16 = sub_1A9CE6990();
    __swift_project_value_buffer(v16, (uint64_t)qword_1ED2630B8);
    swift_retain_n();
    v17 = sub_1A9CE6978();
    v18 = sub_1A9CE8664();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v43 = v20;
      *(_DWORD *)v19 = 136446466;
      v21 = sub_1A9CE8D48();
      sub_1A9B91D6C(v21, v22, &v43);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2082;
      v23 = (id)v4[7];
      v24 = sub_1A9CE82F8();
      sub_1A9B91D6C(v24, v25, &v43);
      sub_1A9CE888C();
      swift_release_n();
      swift_bridgeObjectRelease();
      v26 = "[%{public}s] Asked to show sleep onboarding but already setting up with context: %{public}s";
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (qword_1ED262DB8 != -1)
    swift_once();
  v33 = sub_1A9CE6990();
  __swift_project_value_buffer(v33, (uint64_t)qword_1ED2630B8);
  swift_retain_n();
  v34 = sub_1A9CE6978();
  v35 = sub_1A9CE867C();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v43 = v37;
    *(_DWORD *)v36 = 136446466;
    v38 = sub_1A9CE8D48();
    sub_1A9B91D6C(v38, v39, &v43);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    v40 = (id)v4[7];
    v41 = sub_1A9CE82F8();
    sub_1A9B91D6C(v41, v42, &v43);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v34, v35, "[%{public}s] Presenting onboarding with context: %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v37, -1, -1);
    MEMORY[0x1AF420344](v36, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *((_BYTE *)v4 + 96) = 1;
  sub_1A9C800BC(a1, (uint64_t)a2, a3);
}

uint64_t sub_1A9C800BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(uint64_t (*)(void *, uint64_t), _QWORD *, uint64_t, uint64_t);
  id v28;
  id v30;
  char v31;
  uint64_t v32;

  v4 = v3;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
  swift_retain_n();
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = (void *)swift_slowAlloc();
    v30 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1A9CE8D48();
    sub_1A9B91D6C(v13, v14, (uint64_t *)&v30);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    v15 = sub_1A9CE82F8();
    sub_1A9B91D6C(v15, v16, (uint64_t *)&v30);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] Setting up navigation controller for consolidated onboarding (entry: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v17 = *(_QWORD *)(v4 + 40);
  v18 = *(_QWORD *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v4 + 16), v17);
  v19 = *(_BYTE *)(v4 + 64);
  v20 = *(_QWORD *)(v4 + 72);
  v30 = *(id *)(v4 + 56);
  v31 = v19;
  v32 = v20;
  v21 = v30;
  SleepOnboardingAnalyticsTracking<>.trackOnboardingPromotion(context:)((uint64_t *)&v30, v17, v18);

  v22 = *(_QWORD *)(v4 + 40);
  v23 = *(_QWORD *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v4 + 16), v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 208))(v22, v23);
  v24 = *(_QWORD *)(v4 + 40);
  v25 = *(_QWORD *)(v4 + 48);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v4 + 16), v24);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v4;
  v26[3] = a1;
  v26[4] = a2;
  v26[5] = a3;
  v27 = *(void (**)(uint64_t (*)(void *, uint64_t), _QWORD *, uint64_t, uint64_t))(v25 + 184);
  v28 = a1;
  swift_retain();
  sub_1A9C0344C(a2);
  v27(sub_1A9C81690, v26, v24, v25);
  return swift_release();
}

uint64_t sub_1A9C803BC(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v27 = sub_1A9CE8070();
  v31 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A9CE8094();
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v28 = sub_1A9CE870C();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a3;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a4;
  v19[6] = a5;
  v19[7] = a6;
  aBlock[4] = sub_1A9C816E8;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_28;
  v20 = _Block_copy(aBlock);
  v21 = a4;
  swift_retain();
  v22 = a1;
  swift_unknownObjectRetain();
  sub_1A9C0344C(a5);
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A9C04D0C();
  sub_1A9B92F34(0, &qword_1EEB47E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C04D54();
  v23 = v27;
  sub_1A9CE8904();
  v24 = (void *)v28;
  MEMORY[0x1AF41F348](0, v18, v14, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, v30);
}

void sub_1A9C805F0(uint64_t a1, void *a2, uint64_t a3, void *a4, void (*a5)(void *), uint64_t a6)
{
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char v26;
  id v27;
  char v28;
  uint64_t v29;
  _QWORD v30[5];

  v11 = a3 != 0;
  v12 = (_QWORD *)(a1 + 16);
  sub_1A9B923D4(a1 + 16, (uint64_t)v30);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v27 = *(id *)(a1 + 56);
  v28 = v14;
  v29 = v15;
  v26 = 2 * v11;
  v16 = *(_QWORD *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1Tm(v12, v16);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 168);
  v18 = v27;
  v19 = (void *)v17(v16, v13);
  type metadata accessor for SleepOnboardingUserInfo();
  swift_allocObject();
  v20 = a2;
  sub_1A9C05E68(v30, (uint64_t *)&v27, a2, &v26, v19);

  v21 = objc_allocWithZone((Class)type metadata accessor for SleepOnboardingSetupViewController());
  v22 = swift_retain();
  v23 = (char *)SleepOnboardingSetupViewController.init(userInfo:presentationStyle:)(v22, 0);
  v24 = (uint64_t *)&v23[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
  swift_beginAccess();
  *v24 = a1;
  v24[1] = (uint64_t)&protocol witness table for SleepOnboardingCoordinator;
  swift_retain();
  swift_unknownObjectRelease();
  v25 = v23;
  sub_1A9C810B0(a4, v25, a5, a6, a1);
  swift_release();

}

void HKSPSuggestionProvider.sleepScheduleType.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1A9C80790(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    *(_BYTE *)(result + 96) = 0;
    result = swift_release();
  }
  if (a2)
    return a2(a4);
  return result;
}

void sub_1A9C807FC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  id v27;
  id v28;
  void *v29;
  _BYTE *v30;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[4];
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  LODWORD(v3) = a1;
  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v38[-v6];
  v8 = sub_1A9CE6234();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v44 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v38[-v14];
  if (qword_1ED262DB8 != -1)
    swift_once();
  v16 = sub_1A9CE6990();
  v17 = __swift_project_value_buffer(v16, (uint64_t)qword_1ED2630B8);
  v18 = sub_1A9CE6978();
  v19 = sub_1A9CE867C();
  if (os_log_type_enabled(v18, v19))
  {
    v42 = v15;
    v20 = swift_slowAlloc();
    v43 = v9;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v39 = v3;
    v3 = v22;
    v46 = v22;
    v40 = v2;
    v41 = v17;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_1A9CE8D48();
    v45 = sub_1A9B91D6C(v23, v24, &v46);
    sub_1A9CE888C();
    v15 = v42;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] Navigating to sleep room", v21, 0xCu);
    swift_arrayDestroy();
    v25 = v3;
    LOBYTE(v3) = v39;
    MEMORY[0x1AF420344](v25, -1, -1);
    v26 = v21;
    v9 = v43;
    MEMORY[0x1AF420344](v26, -1, -1);
  }

  if ((v3 & 1) != 0)
    v27 = (id)*MEMORY[0x1E0DA83C8];
  else
    v27 = 0;
  v28 = (id)HKSPSleepURLWithProvenanceInfo();
  if (v28)
  {
    v29 = v28;
    v30 = v44;
    sub_1A9CE621C();

    v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32);
    v31(v7, v30, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      v31(v15, v7, v8);
      DeepLinkOpener.open(url:completion:)((uint64_t)v15, 0, 0);

      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v15, v8);
      return;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_1A9B93BDC((uint64_t)v7, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v32 = sub_1A9CE6978();
  v33 = sub_1A9CE8664();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v46 = v35;
    *(_DWORD *)v34 = 136446210;
    v36 = sub_1A9CE8D48();
    v45 = sub_1A9B91D6C(v36, v37, &v46);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v32, v33, "[%{public}s] Failed to create sleep deep link url", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v35, -1, -1);
    MEMORY[0x1AF420344](v34, -1, -1);
  }

}

uint64_t sub_1A9C80C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v0 = sub_1A9CE669C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, qword_1EEB48C08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D28F38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v31 - v6;
  v8 = sub_1A9CE66B4();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE6234();
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v16 = sub_1A9CE6990();
  __swift_project_value_buffer(v16, (uint64_t)qword_1ED2630B8);
  v17 = sub_1A9CE6978();
  v18 = sub_1A9CE867C();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v33 = v0;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v40 = v21;
    v32 = v1;
    *(_DWORD *)v20 = 136446210;
    v22 = sub_1A9CE8D48();
    v39 = sub_1A9B91D6C(v22, v23, &v40);
    v1 = v32;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] Navigating to balance room", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v21, -1, -1);
    v24 = v20;
    v0 = v33;
    MEMORY[0x1AF420344](v24, -1, -1);
  }

  sub_1A9CE66A8();
  v25 = *MEMORY[0x1E0D28F30];
  v26 = sub_1A9CE6690();
  v27 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D28F38];
  v28 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v26);
  v29 = v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v38, *MEMORY[0x1E0D28F40], v0);
  sub_1A9CE6684();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v29, v0);
  sub_1A9B93BDC((uint64_t)v7, qword_1EEB48C08, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
  DeepLinkOpener.open(url:completion:)((uint64_t)v15, 0, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v15, v35);
}

uint64_t SleepOnboardingCoordinator.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return v0;
}

uint64_t SleepOnboardingCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocClassInstance();
}

void HKSPSuggestionProvider<>.sleepScheduleType.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A9C81028(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(a5 + 40) = a6;
  *(_QWORD *)(a5 + 48) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a5 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  v14 = *a2;
  v15 = *((_BYTE *)a2 + 8);
  v16 = a2[2];
  v17 = *a4;
  *(_BYTE *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 56) = v14;
  *(_BYTE *)(a5 + 64) = v15;
  *(_QWORD *)(a5 + 80) = v17;
  *(_QWORD *)(a5 + 88) = a3;
  *(_QWORD *)(a5 + 72) = v16;
  return a5;
}

void sub_1A9C810B0(void *a1, void *a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  _QWORD v19[6];

  if (a1)
  {
    v10 = *(void **)(a5 + 88);
    sub_1A9BB7420();
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1A9CEF8A0;
    *(_QWORD *)(v11 + 32) = a2;
    v19[0] = v11;
    sub_1A9CE83E8();
    sub_1A9B94A18(0, &qword_1EEB43070);
    v12 = a1;
    v13 = a2;
    v14 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setViewControllers_animated_, v14, 0, v19[0]);

    v15 = swift_allocObject();
    swift_weakInit();
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = v15;
    v16[3] = a3;
    v16[4] = a4;
    v16[5] = v13;
    v16[6] = &protocol witness table for SleepOnboardingFlowController;
    v19[4] = sub_1A9C81770;
    v19[5] = v16;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 1107296256;
    v19[2] = sub_1A9C0A74C;
    v19[3] = &block_descriptor_12_3;
    v17 = _Block_copy(v19);
    v18 = v13;
    sub_1A9C0344C((uint64_t)a3);
    swift_release();
    objc_msgSend(v12, sel_presentViewController_animated_completion_, v10, 1, v17);
    _Block_release(v17);

  }
  else
  {
    objc_msgSend(*(id *)(a5 + 88), sel_pushViewController_animated_, a2, 1);
    *(_BYTE *)(a5 + 96) = 0;
    if (a3)
      a3(a2);
  }
}

uint64_t sub_1A9C812A4(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t result;

  v8 = *a4;
  v9 = *((_BYTE *)a4 + 8);
  v10 = a4[2];
  v11 = *a5;
  type metadata accessor for HealthStatusFeatureProvider();
  v12 = (_QWORD *)swift_allocObject();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB50A8], a1);
  v14 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB46270);
  v15 = MEMORY[0x1E0D2C1E8];
  v12[5] = v14;
  v12[6] = v15;
  v12[2] = v13;
  sub_1A9CE66E4();
  v12[7] = sub_1A9CE66D8();
  v16 = type metadata accessor for SleepOnboardingManager();
  v17 = (_QWORD *)swift_allocObject();
  v18 = sub_1A9C0C290(a2, a1, (uint64_t)v12, v17);
  type metadata accessor for SleepOnboardingCoordinator();
  result = swift_allocObject();
  *(_QWORD *)(result + 40) = v16;
  *(_QWORD *)(result + 48) = &protocol witness table for SleepOnboardingManager;
  *(_QWORD *)(result + 16) = v18;
  *(_BYTE *)(result + 96) = 0;
  *(_QWORD *)(result + 56) = v8;
  *(_BYTE *)(result + 64) = v9;
  *(_QWORD *)(result + 80) = v11;
  *(_QWORD *)(result + 88) = a3;
  *(_QWORD *)(result + 72) = v10;
  return result;
}

uint64_t sub_1A9C813E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepOnboardingCoordinator();
  v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a6);
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 16));
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v15, a6);
  v18 = *a2;
  v19 = *((_BYTE *)a2 + 8);
  v20 = a2[2];
  v21 = *a4;
  *(_BYTE *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 56) = v18;
  *(_BYTE *)(v16 + 64) = v19;
  *(_QWORD *)(v16 + 80) = v21;
  *(_QWORD *)(v16 + 88) = a3;
  *(_QWORD *)(v16 + 72) = v20;
  return v16;
}

unint64_t sub_1A9C814D0()
{
  unint64_t result;

  result = qword_1EEB48AD0;
  if (!qword_1EEB48AD0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingCoordinator.Options, &type metadata for SleepOnboardingCoordinator.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB48AD0);
  }
  return result;
}

unint64_t sub_1A9C81518()
{
  unint64_t result;

  result = qword_1EEB48AD8;
  if (!qword_1EEB48AD8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingCoordinator.Options, &type metadata for SleepOnboardingCoordinator.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB48AD8);
  }
  return result;
}

unint64_t sub_1A9C81560()
{
  unint64_t result;

  result = qword_1EEB48AE0;
  if (!qword_1EEB48AE0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingCoordinator.Options, &type metadata for SleepOnboardingCoordinator.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB48AE0);
  }
  return result;
}

unint64_t sub_1A9C815A8()
{
  unint64_t result;

  result = qword_1EEB48AE8;
  if (!qword_1EEB48AE8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingCoordinator.Options, &type metadata for SleepOnboardingCoordinator.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB48AE8);
  }
  return result;
}

uint64_t type metadata accessor for SleepOnboardingCoordinator()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepOnboardingCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.__allocating_init(onboardingManager:onboardingContext:navigationController:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.didDismissOnboarding()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.didCompleteOnboarding(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingCoordinator.showSleepOnboarding(with:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

ValueMetadata *type metadata accessor for SleepOnboardingCoordinator.Options()
{
  return &type metadata for SleepOnboardingCoordinator.Options;
}

uint64_t sub_1A9C81654()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C81690(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A9C803BC(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1A9C8169C()
{
  uint64_t v0;

  swift_release();

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

void sub_1A9C816E8()
{
  uint64_t v0;

  sub_1A9C805F0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(void *))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_1A9C81710()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C81734()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A9C81770()
{
  uint64_t v0;

  return sub_1A9C80790(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1A9C81788()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A9C81790()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9C81810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_BYTE *)(a2 + 8);
    sub_1A9BAADF4(*(_QWORD *)a2, v12);
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = v12;
    v13 = a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_QWORD *)(v13 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v14(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 32) & ~v7, ((a2 & 0xFFFFFFFFFFFFFFF8) + v7 + 32) & ~v7, v5);
  }
  return a1;
}

uint64_t sub_1A9C8190C(uint64_t a1, uint64_t a2)
{
  sub_1A9BAAED8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1A9C81960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1A9BAADF4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  v14 = (v12 + 32 + v9) & ~v12;
  v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v15(v13, v14, v10);
  return a1;
}

uint64_t sub_1A9C81A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1A9BAADF4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1A9BAAED8(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 32 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1A9C81AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 32 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1A9C81B1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;

  v4 = a2;
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1A9BAAED8(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v10 + 16) = v4[2];
  *(_QWORD *)(v10 + 24) = v4[3];
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(unsigned __int8 *)(v11 + 80) + 32 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1A9C81BB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v7 + 32) & ~v7);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A9C81C84 + 4 * byte_1A9CF4898[(v9 - 1)]))();
}

void sub_1A9C81CF8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for DiagramHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiagramHeader);
}

uint64_t sub_1A9C81F00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C81F34(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x1E0C80A78](a1, 1);
    v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v23 = 32;
    v24 = a2;
    do
    {
      if (a2 == 1)
        v25 = 0;
      else
        v25 = *(_DWORD *)(TupleTypeMetadata + v23);
      v27 = *v5++;
      v26 = v27;
      v28 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(&v8[v25], v28);
      v23 += 16;
      --v24;
    }
    while (v24);
    return sub_1A9CE801C();
  }
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v21);
  v8 = (char *)&v30 - v22;
  if (a2)
    goto LABEL_12;
  return sub_1A9CE801C();
}

uint64_t sub_1A9C820E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  sub_1A9BAADF4(v3, v4);
  sub_1A9C82F30(v3, v4, a1);
  return sub_1A9BAAED8(v3, v4);
}

uint64_t sub_1A9C82138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  sub_1A9C82680();
  swift_getTupleTypeMetadata3();
  v6 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v6);
  v7 = sub_1A9CE7EB4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v19[-v14];
  sub_1A9CE7404();
  v16 = *(_QWORD *)(a1 + 24);
  v20 = v5;
  v21 = v16;
  v22 = v2;
  sub_1A9CE7EA8();
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v7);
  sub_1A9C3C998((uint64_t)v11, v7, (uint64_t)v15);
  v17 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v17(v11, v7);
  sub_1A9C3899C((uint64_t)v15, v7, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v15, v7);
}

uint64_t sub_1A9C822B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65[6];
  char v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;

  v46 = a4;
  v49 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v48 = (uint64_t)&v39 - v10;
  sub_1A9C820E8(&v54);
  v45 = a1;
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  if (v54 == 1)
  {
    v54 = v12;
    v55 = v11;
    sub_1A9BA8EA4();
    sub_1A9CE88BC();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v43 = type metadata accessor for DiagramHeader(0, a2, a3, v13);
  sub_1A9CE78C0();
  v14 = sub_1A9CE7998();
  v44 = a3;
  v16 = v15;
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_release();
  sub_1A9CE7C68();
  v19 = sub_1A9CE7968();
  v39 = a2;
  v41 = v19;
  v40 = v20;
  v22 = v21;
  v42 = v23;
  swift_release();
  sub_1A9BAA670(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  v24 = v48;
  sub_1A9C3C998(v45 + *(int *)(v43 + 40), a2, v48);
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v45 = v65[5];
  v25 = v66;
  v26 = v67;
  LODWORD(v43) = v68;
  v27 = v69;
  v28 = v70;
  v29 = v41;
  v30 = v40;
  v61 = v41;
  v62 = v40;
  v63 = v22 & 1;
  v31 = v22 & 1;
  v64 = v42;
  v65[0] = (uint64_t)&v61;
  v32 = (uint64_t)v47;
  v33 = v24;
  v34 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v33, v39);
  v54 = v45;
  LOBYTE(v55) = v25;
  v56 = v26;
  v57 = v43;
  v58 = v27;
  v59 = v28;
  v60 = 0x3FF0000000000000;
  v65[1] = v32;
  v65[2] = (uint64_t)&v54;
  v35 = v32;
  sub_1A9BAA680(v29, v30, v31);
  swift_bridgeObjectRetain();
  v53[0] = MEMORY[0x1E0CDDD78];
  v53[1] = v34;
  sub_1A9C82680();
  v53[2] = v36;
  v50 = MEMORY[0x1E0CDDD58];
  v51 = v44;
  v52 = sub_1A9C827A8();
  sub_1A9C81F34(v65, 3uLL, (uint64_t)v53);
  v37 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v37(v48, v34);
  sub_1A9BAA670(v29, v30, v31);
  swift_bridgeObjectRelease();
  v37(v35, v34);
  sub_1A9BAA670(v61, v62, v63);
  return swift_bridgeObjectRelease();
}

void sub_1A9C82680()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48C90)
  {
    sub_1A9C826E4();
    sub_1A9C82740();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48C90);
  }
}

void sub_1A9C826E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44FD8)
  {
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44FD8);
  }
}

void sub_1A9C82740()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48C98)
  {
    sub_1A9CE7560();
    v0 = sub_1A9CE753C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48C98);
  }
}

uint64_t sub_1A9C8279C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1A9C822B8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1A9C827A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48CA0;
  if (!qword_1EEB48CA0)
  {
    sub_1A9C82680();
    v2 = v1;
    v3[0] = sub_1A9C82810();
    v3[1] = sub_1A9C82878();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48CA0);
  }
  return result;
}

unint64_t sub_1A9C82810()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44FF0;
  if (!qword_1EEB44FF0)
  {
    sub_1A9C826E4();
    v2 = v1;
    v3[0] = sub_1A9BD2248();
    v3[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44FF0);
  }
  return result;
}

unint64_t sub_1A9C82878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48CA8;
  if (!qword_1EEB48CA8)
  {
    sub_1A9C82740();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDBEF0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48CA8);
  }
  return result;
}

uint64_t sub_1A9C828C0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1A9CE735C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v9 = sub_1A9CE8670();
  v10 = sub_1A9CE76F8();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1A9B91D6C(1819242306, 0xE400000000000000, &v16);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v13, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  sub_1A9CE7350();
  swift_getAtKeyPath();
  sub_1A9BAAED8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t sub_1A9C82A78@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C82CF0(&qword_1ED263170, (void (*)(uint64_t))MEMORY[0x1E0CD86F8], 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_1A9C82AA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C82CF0(&qword_1ED262698, (void (*)(uint64_t))MEMORY[0x1E0CDB2E0], 0xD000000000000013, 0x80000001A9CFE3D0, a1);
}

uint64_t sub_1A9C82AD4@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C82CF0(&qword_1ED262A40, (void (*)(uint64_t))MEMORY[0x1E0CDD6B0], 0x747865746E6F43, 0xE700000000000000, a1);
}

double sub_1A9C82AFC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = sub_1A9CE735C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain();
  v9 = sub_1A9CE8670();
  v10 = sub_1A9CE76F8();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1A9B91D6C(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v13, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  sub_1A9CE7350();
  swift_getAtKeyPath();
  sub_1A9BAAED8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t sub_1A9C82CBC@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C82CF0((unint64_t *)&qword_1EEB46AF0, (void (*)(uint64_t))MEMORY[0x1E0CD9958], 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_1A9C82CF0@<X0>(unint64_t *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v9 = v5;
  v11 = sub_1A9CE735C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C83158(0, a1, a2);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - v18;
  sub_1A9C8310C(v9, (uint64_t)&v27 - v18, a1, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = ((uint64_t (*)(_QWORD))a2)(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a5, v19, v20);
  }
  else
  {
    v22 = sub_1A9CE8670();
    v23 = sub_1A9CE76F8();
    if (os_log_type_enabled(v23, v22))
    {
      v28 = a4;
      v24 = swift_slowAlloc();
      v29 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc();
      v32 = v26;
      *(_DWORD *)v25 = 136315138;
      v31 = sub_1A9B91D6C(v30, v28, &v32);
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v26, -1, -1);
      MEMORY[0x1AF420344](v25, -1, -1);
    }

    sub_1A9CE7350();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

void sub_1A9C82F30(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;

  v6 = sub_1A9CE735C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    *a3 = a1 & 1;
  }
  else
  {
    sub_1A9BAADF4(a1, 0);
    v11 = sub_1A9CE8670();
    v12 = sub_1A9CE76F8();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v17[1] = a3;
      v16 = v15;
      v18 = v15;
      *(_DWORD *)v14 = 136315138;
      v17[2] = sub_1A9B91D6C(0x566D617267616944, 0xEE00746E61697261, &v18);
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v16, -1, -1);
      MEMORY[0x1AF420344](v14, -1, -1);
    }

    sub_1A9CE7350();
    swift_getAtKeyPath();
    sub_1A9BAAED8(a1, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1A9C8310C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1A9C83158(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1A9C83158(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE6F78();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9C831A4()
{
  uint64_t v0;

  sub_1A9C82680();
  swift_getTupleTypeMetadata3();
  v0 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v0);
  sub_1A9CE7EB4();
  JUMPOUT(0x1AF420284);
}

uint64_t sub_1A9C83224@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1A9CE8670();
    v23 = (void *)sub_1A9CE76F8();
    sub_1A9CE6954();

  }
  sub_1A9CE71C4();
  v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  v25 = v13[4];
  v26 = v13[1];
  *a9 = *v13;
  a9[1] = v26;
  a9[8] = v31;
  a9[9] = v32;
  a9[10] = v33;
  a9[11] = v34;
  a9[4] = v25;
  a9[5] = v28;
  a9[6] = v29;
  a9[7] = v30;
  return sub_1A9C717E4((uint64_t)v13);
}

id sub_1A9C833CC()
{
  id result;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  result = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (result)
  {
    v1 = result;
    sub_1A9CDE824(MEMORY[0x1E0DEE9D8]);
    sub_1A9CE8868();
    v3 = v2;

    result = (id)swift_bridgeObjectRelease();
    qword_1EEB48CB0 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TwoWeekDiagram.results.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BA6F90(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
}

uint64_t TwoWeekDiagram.init(results:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A9BA0D6C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
}

uint64_t TwoWeekDiagram.body.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *a1 = TwoWeekResults.hasData.getter();
  v3 = sub_1A9C8398C();
  return sub_1A9C834CC(v1, (uint64_t)&a1[*(int *)(v3 + 52)]);
}

uint64_t sub_1A9C834CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;

  v57 = a1;
  v3 = sub_1A9CE6378();
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v53 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v6, v7);
  v56 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TwoWeekResults();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v61 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9B92F34(0, &qword_1EEB48CD8, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v52 - v20;
  v60 = type metadata accessor for TwoWeekChart(0);
  MEMORY[0x1E0C80A78](v60, v22);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v59 = (char *)&v52 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v58 = (uint64_t)&v52 - v30;
  if (qword_1EEB42D50 != -1)
    swift_once();
  v31 = (id)qword_1EEB48198;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9C86B5C(0, (unint64_t *)&qword_1EEB452D8, (unint64_t *)&qword_1EEB47060);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1A9CEB520;
  v33 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v32 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v32 + 64) = v33;
  *(_QWORD *)(v32 + 32) = 14;
  v34 = sub_1A9CE82BC();
  v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = swift_getKeyPath();
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v36;
  sub_1A9BA6F90(v57, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  sub_1A9C83D14((uint64_t)v21, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1, v9) == 1)
  {
    v37 = *MEMORY[0x1E0CB4B90];
    v38 = *(_QWORD *)(MEMORY[0x1E0CB4B90] + 8);
    v40 = v53;
    v39 = v54;
    v41 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x1E0CB0EF8], v55);
    v42 = (uint64_t)v56;
    sub_1A9CE6384();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
    objc_msgSend(v43, sel_setAllowedUnits_, 96);
    objc_msgSend(v43, sel_setUnitsStyle_, 1);
    v44 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
    v45 = v61;
    TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v37, v38, MEMORY[0x1E0DEE9D8], v42, (char *)v43, v44, v61);
    sub_1A9C84820((uint64_t)v17);
  }
  else
  {
    v45 = v61;
    sub_1A9BA0D6C((uint64_t)v17, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  }
  sub_1A9C83A20(0);
  v47 = a2 + *(int *)(v46 + 40);
  sub_1A9C84820((uint64_t)v21);
  sub_1A9BA0D6C((uint64_t)v45, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  v48 = (uint64_t)v59;
  v24[*(int *)(v60 + 20)] = 0;
  sub_1A9BA0D6C((uint64_t)v24, v48, type metadata accessor for TwoWeekChart);
  v49 = v48;
  v50 = v58;
  sub_1A9BA0D6C(v49, v58, type metadata accessor for TwoWeekChart);
  return sub_1A9BA0D6C(v50, v47, type metadata accessor for TwoWeekChart);
}

uint64_t sub_1A9C8398C()
{
  uint64_t result;

  result = qword_1EEB48CB8;
  if (!qword_1EEB48CB8)
  {
    sub_1A9C83A20(255);
    sub_1A9B92B9C(&qword_1EEB48CD0, (uint64_t (*)(uint64_t))sub_1A9C83A20, (uint64_t)&unk_1A9CF4900);
    type metadata accessor for OptionalContentGroup();
  }
  return result;
}

void sub_1A9C83A20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEB48CC0)
  {
    v2 = type metadata accessor for TwoWeekChart(255);
    v3 = sub_1A9B92B9C(&qword_1EEB48CC8, type metadata accessor for TwoWeekChart, (uint64_t)&protocol conformance descriptor for TwoWeekChart);
    v5 = type metadata accessor for DiagramHeader(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB48CC0);
  }
}

uint64_t type metadata accessor for TwoWeekChart(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB48DC8);
}

uint64_t TwoWeekChart.init(results:isLoading:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t result;
  _BYTE v28[12];
  int v29;

  v29 = a2;
  v5 = sub_1A9CE6378();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9B92F34(0, &qword_1EEB48CD8, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v28[-v16];
  v18 = type metadata accessor for TwoWeekResults();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = &v28[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9C83D14(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v23 = *MEMORY[0x1E0CB4B90];
    v24 = *(_QWORD *)(MEMORY[0x1E0CB4B90] + 8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CB0EF8], v5);
    sub_1A9CE6384();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
    objc_msgSend(v25, sel_setAllowedUnits_, 96);
    objc_msgSend(v25, sel_setUnitsStyle_, 1);
    v26 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
    TwoWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v23, v24, MEMORY[0x1E0DEE9D8], (uint64_t)v13, (char *)v25, v26, v22);
    sub_1A9C84820(a1);
    sub_1A9C84820((uint64_t)v17);
  }
  else
  {
    sub_1A9C84820(a1);
    sub_1A9BA0D6C((uint64_t)v17, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  }
  sub_1A9BA0D6C((uint64_t)v22, a3, (uint64_t (*)(_QWORD))type metadata accessor for TwoWeekResults);
  result = type metadata accessor for TwoWeekChart(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v29 & 1;
  return result;
}

uint64_t sub_1A9C83D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, &qword_1EEB48CD8, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C83D70@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *a1 = TwoWeekResults.hasData.getter();
  v3 = sub_1A9C8398C();
  return sub_1A9C834CC(v1, (uint64_t)&a1[*(int *)(v3 + 52)]);
}

double TwoWeekChart.body.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t (*v27)@<X0>(uint64_t@<X8>);
  uint64_t v28;
  uint64_t (*v29)@<X0>(uint64_t@<X8>);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v3 = type metadata accessor for TwoWeekChart(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = TwoWeekResults.hasData.getter();
  sub_1A9BA6F90(v1, (uint64_t)v7, type metadata accessor for TwoWeekChart);
  v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v10 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v7, v10 + v9, type metadata accessor for TwoWeekChart);
  v11 = sub_1A9C843BC();
  if (qword_1EEB42D70 != -1)
    swift_once();
  v12 = qword_1EEB485E0;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  v25[0] = 0;
  sub_1A9CE7DC4();
  v14 = v35[0];
  v15 = *((_QWORD *)&v35[0] + 1);
  if (qword_1EEB42D88 != -1)
    swift_once();
  v16 = qword_1EEB485F8;
  v17 = qword_1EEB42D90;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v25[0] = v8;
  v26 = v12;
  v27 = sub_1A9C84A0C;
  v28 = v10;
  v29 = sub_1A9C84A6C;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v33 = v16;
  v34 = qword_1EEB48600;
  swift_retain();
  sub_1A9CE7FEC();
  sub_1A9C83224(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v35, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v18 = v43;
  a1[8] = v42;
  a1[9] = v18;
  v19 = v45;
  a1[10] = v44;
  a1[11] = v19;
  v20 = v39;
  a1[4] = v38;
  a1[5] = v20;
  v21 = v41;
  a1[6] = v40;
  a1[7] = v21;
  v22 = v35[1];
  *a1 = v35[0];
  a1[1] = v22;
  result = *(double *)&v36;
  v24 = v37;
  a1[2] = v36;
  a1[3] = v24;
  return result;
}

uint64_t sub_1A9C84044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  _BYTE *v37;
  uint64_t v38;

  v38 = a2;
  sub_1A9B95370(0, &qword_1EEB48E80, (uint64_t (*)(uint64_t))sub_1A9C868EC, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v36 - v6;
  v8 = type metadata accessor for WeekDiagram(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v36 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v36 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v36 - v22;
  sub_1A9C868EC();
  v25 = v24;
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (TwoWeekResults.hasData.getter())
  {
    v36[0] = v25;
    v36[1] = v4;
    v37 = v7;
    v29 = sub_1A9CE738C();
    if (qword_1EEB42E40 != -1)
      swift_once();
    v30 = qword_1EEB48CB0;
    *(_QWORD *)v28 = v29;
    *((_QWORD *)v28 + 1) = v30;
    v28[16] = 0;
    sub_1A9C86C38();
    v32 = (uint64_t)&v28[*(int *)(v31 + 44)];
    v33 = type metadata accessor for TwoWeekResults();
    sub_1A9BA6F90(a1 + *(int *)(v33 + 36), (uint64_t)v23, type metadata accessor for WeekResults);
    *(_QWORD *)&v23[*(int *)(v8 + 20)] = 4;
    sub_1A9BA6F90(a1 + *(int *)(v33 + 40), (uint64_t)v19, type metadata accessor for WeekResults);
    *(_QWORD *)&v19[*(int *)(v8 + 20)] = 4;
    sub_1A9BA6F90((uint64_t)v23, (uint64_t)v15, type metadata accessor for WeekDiagram);
    sub_1A9BA6F90((uint64_t)v19, (uint64_t)v11, type metadata accessor for WeekDiagram);
    sub_1A9BA6F90((uint64_t)v15, v32, type metadata accessor for WeekDiagram);
    sub_1A9C86964();
    sub_1A9BA6F90((uint64_t)v11, v32 + *(int *)(v34 + 48), type metadata accessor for WeekDiagram);
    sub_1A9B97190((uint64_t)v19, type metadata accessor for WeekDiagram);
    sub_1A9B97190((uint64_t)v23, type metadata accessor for WeekDiagram);
    sub_1A9B97190((uint64_t)v11, type metadata accessor for WeekDiagram);
    sub_1A9B97190((uint64_t)v15, type metadata accessor for WeekDiagram);
    sub_1A9BA6F90((uint64_t)v28, (uint64_t)v37, (uint64_t (*)(_QWORD))sub_1A9C868EC);
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1EEB48E50, (uint64_t (*)(uint64_t))sub_1A9C868EC, MEMORY[0x1E0CDFB10]);
    sub_1A9BA3D00();
    sub_1A9CE74E8();
    return sub_1A9B97190((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1A9C868EC);
  }
  else
  {
    *v7 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for TwoWeekChart(0) + 20));
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1EEB48E50, (uint64_t (*)(uint64_t))sub_1A9C868EC, MEMORY[0x1E0CDFB10]);
    sub_1A9BA3D00();
    return sub_1A9CE74E8();
  }
}

uint64_t sub_1A9C843BC()
{
  uint64_t v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;

  sub_1A9C86B08();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB520;
  if (qword_1EEB42D50 != -1)
    swift_once();
  v2 = (id)qword_1EEB48198;
  v3 = sub_1A9CE6168();
  v5 = v4;

  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v5;
  v6 = type metadata accessor for TwoWeekResults();
  WeekResults.localizedAverageComparison(against:)(v0 + *(int *)(v6 + 40));
  if (!v8)
    goto LABEL_8;
  v9 = v7;
  v10 = v8;
  inited = (uint64_t)sub_1A9CADD68((_QWORD *)1, 2, 1, (_QWORD *)inited);
  *(_QWORD *)(inited + 16) = 2;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  v11 = (id)qword_1EEB48198;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9C86B5C(0, (unint64_t *)&qword_1EEB452D8, (unint64_t *)&qword_1EEB47060);
  v12 = swift_allocObject();
  v13 = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v12 + 16) = xmmword_1A9CEB520;
  v14 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = v14;
  *(_QWORD *)(v12 + 32) = 7;
  v15 = sub_1A9CE82BC();
  v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(inited + 16);
  v18 = *(_QWORD *)(inited + 24);
  if (v19 >= v18 >> 1)
    goto LABEL_13;
  while (1)
  {
    *(_QWORD *)(inited + 16) = v19 + 1;
    v18 = inited + 16 * v19;
    *(_QWORD *)(v18 + 32) = v15;
    *(_QWORD *)(v18 + 40) = v17;
    if (v19 != 1)
      break;
    __break(1u);
LABEL_13:
    inited = (uint64_t)sub_1A9CADD68((_QWORD *)(v18 > 1), v19 + 1, 1, (_QWORD *)inited);
  }
  if (!v19)
  {
    __break(1u);
LABEL_8:
    inited = (uint64_t)sub_1A9CADD68((_QWORD *)1, 2, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = 2;
    *(_QWORD *)(inited + 48) = 2957357;
    *(_QWORD *)(inited + 56) = 0xE300000000000000;
    v20 = *(_QWORD *)(inited + 24);
    if (v20 <= 5)
      inited = (uint64_t)sub_1A9CADD68((_QWORD *)(v20 > 1), 3, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = 3;
    *(_QWORD *)(inited + 64) = 2957357;
    *(_QWORD *)(inited + 72) = 0xE300000000000000;
  }
  v22 = *(_QWORD *)(inited + 32);
  v21 = *(_QWORD *)(inited + 40);
  v24 = *(_QWORD *)(inited + 48);
  v23 = *(_QWORD *)(inited + 56);
  v25 = *(_QWORD *)(inited + 72);
  v36 = *(_QWORD *)(inited + 64);
  sub_1A9C86B5C(0, &qword_1EEB48E68, (unint64_t *)&qword_1EEB48E70);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1A9CED850;
  sub_1A9C86BB0(0, v27, v28, v29);
  v31 = v30;
  *(_QWORD *)(v26 + 56) = v30;
  *(_QWORD *)(v26 + 64) = &off_1E55DAF98;
  v32 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v26 + 32) = v32;
  v32[2] = v22;
  v32[3] = v21;
  v32[4] = 0xD000000000000033;
  v32[5] = 0x80000001A9CFE450;
  *(_QWORD *)(v26 + 96) = v31;
  *(_QWORD *)(v26 + 104) = &off_1E55DAF98;
  v33 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v26 + 72) = v33;
  v33[2] = v24;
  v33[3] = v23;
  v33[4] = 0xD000000000000030;
  v33[5] = 0x80000001A9CFE490;
  *(_QWORD *)(v26 + 136) = v31;
  *(_QWORD *)(v26 + 144) = &off_1E55DAF98;
  v34 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v26 + 112) = v34;
  v34[2] = v36;
  v34[3] = v25;
  v34[4] = 0xD000000000000034;
  v34[5] = 0x80000001A9CFE4D0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_1A9C84820(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, &qword_1EEB48CD8, (uint64_t (*)(uint64_t))type metadata accessor for TwoWeekResults, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C84874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TwoWeekChart(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  v3 = (int *)type metadata accessor for TwoWeekResults();
  v4 = v2 + v3[6];
  v5 = sub_1A9CE6444();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);

  v7 = v2 + v3[9];
  swift_bridgeObjectRelease();
  v8 = (int *)type metadata accessor for WeekResults(0);
  v9 = v7 + v8[6];
  v10 = sub_1A9CE5F64();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v6(v7 + v8[10], v5);

  v12 = v2 + v3[10];
  swift_bridgeObjectRelease();
  v11(v12 + v8[6], v10);
  v6(v12 + v8[10], v5);

  return swift_deallocObject();
}

uint64_t sub_1A9C84A0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TwoWeekChart(0) - 8) + 80);
  return sub_1A9C84044(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1A9C84A48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A9C84A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C70578(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9C84A74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C84A84()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for TwoWeekDiagram(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  char *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);

  v4 = type metadata accessor for TwoWeekResults();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v58 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v58 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = *(int *)(v4 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v65 = v10;
    v66 = v11;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = v6[7];
    v13 = *(void **)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v13;
    v14 = v6[8];
    v62 = *(void **)((char *)a2 + v14);
    *(_QWORD *)((char *)a1 + v14) = v62;
    v15 = v6[9];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v19 = *(_QWORD *)((char *)a2 + v15);
    v18 = *(_QWORD *)((char *)a2 + v15 + 8);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
    v16[16] = v17[16];
    v20 = (int *)type metadata accessor for WeekResults(0);
    v21 = v20[6];
    v60 = &v17[v21];
    v61 = &v16[v21];
    v22 = sub_1A9CE5F64();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v63 = v22;
    v64 = v23;
    v24 = v13;
    v25 = v62;
    swift_bridgeObjectRetain();
    v23(v61, v60, v22);
    *(_QWORD *)&v16[v20[7]] = *(_QWORD *)&v17[v20[7]];
    v26 = v20[8];
    v27 = &v16[v26];
    v28 = &v17[v26];
    v27[8] = v28[8];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_QWORD *)&v16[v20[9]] = *(_QWORD *)&v17[v20[9]];
    v66(&v16[v20[10]], &v17[v20[10]], v65);
    v29 = v20[11];
    v30 = *(void **)&v17[v29];
    *(_QWORD *)&v16[v29] = v30;
    v31 = v20[12];
    v32 = *(void **)&v17[v31];
    *(_QWORD *)&v16[v31] = v32;
    v33 = v20[13];
    v34 = *(void **)&v17[v33];
    *(_QWORD *)&v16[v33] = v34;
    v35 = v6[10];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v36[16] = *((_BYTE *)a2 + v35 + 16);
    v39 = *(_QWORD *)((char *)a2 + v35);
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = v39;
    *((_QWORD *)v36 + 1) = v38;
    v40 = v20[6];
    v41 = &v36[v40];
    v42 = &v37[v40];
    v43 = v30;
    v44 = v32;
    v45 = v34;
    swift_bridgeObjectRetain();
    v64(v41, v42, v63);
    *(_QWORD *)&v36[v20[7]] = *(_QWORD *)&v37[v20[7]];
    v46 = v20[8];
    v47 = &v36[v46];
    v48 = &v37[v46];
    v47[8] = v48[8];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *(_QWORD *)&v36[v20[9]] = *(_QWORD *)&v37[v20[9]];
    v66(&v36[v20[10]], &v37[v20[10]], v65);
    v49 = v20[11];
    v50 = *(void **)&v37[v49];
    *(_QWORD *)&v36[v49] = v50;
    v51 = v20[12];
    v52 = *(void **)&v37[v51];
    *(_QWORD *)&v36[v51] = v52;
    v53 = v20[13];
    v54 = *(void **)&v37[v53];
    *(_QWORD *)&v36[v53] = v54;
    v55 = v50;
    v56 = v52;
    v57 = v54;
  }
  return a1;
}

uint64_t initializeWithCopy for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (int *)type metadata accessor for TwoWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v63 = sub_1A9CE6444();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
  v61 = v8;
  swift_bridgeObjectRetain();
  v8(v6, v7, v63);
  v9 = v4[7];
  v10 = *(void **)(a2 + v9);
  v11 = a1;
  v62 = a1;
  *(_QWORD *)(a1 + v9) = v10;
  v12 = v4[8];
  v13 = *(void **)(a2 + v12);
  *(_QWORD *)(v11 + v12) = v13;
  v14 = v4[9];
  v15 = v11 + v14;
  v16 = a2 + v14;
  v18 = *(_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  *(_QWORD *)v15 = v18;
  *(_QWORD *)(v15 + 8) = v17;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v19 = (int *)type metadata accessor for WeekResults(0);
  v20 = v19[6];
  v58 = v16 + v20;
  v59 = v15 + v20;
  v21 = sub_1A9CE5F64();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v60 = v22;
  v23 = v10;
  v24 = v13;
  swift_bridgeObjectRetain();
  v22(v59, v58, v21);
  *(_QWORD *)(v15 + v19[7]) = *(_QWORD *)(v16 + v19[7]);
  v25 = v19[8];
  v26 = v15 + v25;
  v27 = v16 + v25;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_QWORD *)(v15 + v19[9]) = *(_QWORD *)(v16 + v19[9]);
  v61(v15 + v19[10], v16 + v19[10], v63);
  v28 = v19[11];
  v29 = *(void **)(v16 + v28);
  *(_QWORD *)(v15 + v28) = v29;
  v30 = v19[12];
  v31 = *(void **)(v16 + v30);
  *(_QWORD *)(v15 + v30) = v31;
  v32 = v19[13];
  v33 = *(void **)(v16 + v32);
  *(_QWORD *)(v15 + v32) = v33;
  v34 = v4[10];
  v35 = v62 + v34;
  v36 = a2 + v34;
  *(_BYTE *)(v35 + 16) = *(_BYTE *)(a2 + v34 + 16);
  v38 = *(_QWORD *)(a2 + v34);
  v37 = *(_QWORD *)(v36 + 8);
  *(_QWORD *)v35 = v38;
  *(_QWORD *)(v35 + 8) = v37;
  v39 = v19[6];
  v40 = v35 + v39;
  v41 = v36 + v39;
  v42 = v29;
  v43 = v31;
  v44 = v33;
  swift_bridgeObjectRetain();
  v60(v40, v41, v21);
  *(_QWORD *)(v35 + v19[7]) = *(_QWORD *)(v36 + v19[7]);
  v45 = v19[8];
  v46 = v35 + v45;
  v47 = v36 + v45;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v35 + v19[9]) = *(_QWORD *)(v36 + v19[9]);
  v61(v35 + v19[10], v36 + v19[10], v63);
  v48 = v19[11];
  v49 = *(void **)(v36 + v48);
  *(_QWORD *)(v35 + v48) = v49;
  v50 = v19[12];
  v51 = *(void **)(v36 + v50);
  *(_QWORD *)(v35 + v50) = v51;
  v52 = v19[13];
  v53 = *(void **)(v36 + v52);
  *(_QWORD *)(v35 + v52) = v53;
  v54 = v49;
  v55 = v51;
  v56 = v53;
  return v62;
}

_QWORD *assignWithCopy for TwoWeekDiagram(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for TwoWeekResults();
  v5 = v4[6];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v63 = sub_1A9CE6444();
  v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24);
  v64(v6, v7, v63);
  v8 = v4[7];
  v9 = *(void **)((char *)a2 + v8);
  v10 = *(void **)((char *)a1 + v8);
  *(_QWORD *)((char *)a1 + v8) = v9;
  v11 = v9;

  v12 = v4[8];
  v13 = *(void **)((char *)a2 + v12);
  v14 = *(void **)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  v15 = v13;

  v16 = v4[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *((_QWORD *)v18 + 1);
  v17[16] = v18[16];
  *((_QWORD *)v17 + 1) = v19;
  v20 = (int *)type metadata accessor for WeekResults(0);
  v21 = v20[6];
  v22 = &v17[v21];
  v23 = &v18[v21];
  v24 = sub_1A9CE5F64();
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v22, v23, v24);
  *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
  v26 = v20[8];
  v27 = &v17[v26];
  v28 = &v18[v26];
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v29;
  *(_QWORD *)&v17[v20[9]] = *(_QWORD *)&v18[v20[9]];
  v64(&v17[v20[10]], &v18[v20[10]], v63);
  v30 = v20[11];
  v31 = *(void **)&v18[v30];
  v32 = *(void **)&v17[v30];
  *(_QWORD *)&v17[v30] = v31;
  v33 = v31;

  v34 = v20[12];
  v35 = *(void **)&v18[v34];
  v36 = *(void **)&v17[v34];
  *(_QWORD *)&v17[v34] = v35;
  v37 = v35;

  v38 = v20[13];
  v39 = *(void **)&v18[v38];
  v40 = *(void **)&v17[v38];
  *(_QWORD *)&v17[v38] = v39;
  v41 = v39;

  v42 = v4[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = *((_QWORD *)v44 + 1);
  v43[16] = v44[16];
  *((_QWORD *)v43 + 1) = v45;
  v25(&v43[v20[6]], &v44[v20[6]], v24);
  *(_QWORD *)&v43[v20[7]] = *(_QWORD *)&v44[v20[7]];
  v46 = v20[8];
  v47 = &v43[v46];
  v48 = &v44[v46];
  v49 = v48[8];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v49;
  *(_QWORD *)&v43[v20[9]] = *(_QWORD *)&v44[v20[9]];
  v64(&v43[v20[10]], &v44[v20[10]], v63);
  v50 = v20[11];
  v51 = *(void **)&v44[v50];
  v52 = *(void **)&v43[v50];
  *(_QWORD *)&v43[v50] = v51;
  v53 = v51;

  v54 = v20[12];
  v55 = *(void **)&v44[v54];
  v56 = *(void **)&v43[v54];
  *(_QWORD *)&v43[v54] = v55;
  v57 = v55;

  v58 = v20[13];
  v59 = *(void **)&v44[v58];
  v60 = *(void **)&v43[v58];
  *(_QWORD *)&v43[v58] = v59;
  v61 = v59;

  return a1;
}

uint64_t initializeWithTake for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (int *)type metadata accessor for TwoWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v31 = v8;
  v30(v6, v7, v8);
  *(_QWORD *)(a1 + v4[7]) = *(_QWORD *)(a2 + v4[7]);
  *(_QWORD *)(a1 + v4[8]) = *(_QWORD *)(a2 + v4[8]);
  v9 = v4[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a2 + v9 + 8);
  *(_QWORD *)v10 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(a2 + v9 + 16);
  v13 = (int *)type metadata accessor for WeekResults(0);
  v14 = v13[6];
  v15 = v10 + v14;
  v16 = v11 + v14;
  v17 = sub_1A9CE5F64();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  *(_QWORD *)(v10 + v13[7]) = *(_QWORD *)(v11 + v13[7]);
  v19 = v13[8];
  v20 = v10 + v19;
  v21 = v11 + v19;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v10 + v13[9]) = *(_QWORD *)(v11 + v13[9]);
  v30(v10 + v13[10], v11 + v13[10], v31);
  *(_QWORD *)(v10 + v13[11]) = *(_QWORD *)(v11 + v13[11]);
  *(_QWORD *)(v10 + v13[12]) = *(_QWORD *)(v11 + v13[12]);
  *(_QWORD *)(v10 + v13[13]) = *(_QWORD *)(v11 + v13[13]);
  v22 = v4[10];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v25;
  v18(a1 + v22 + v13[6], v24 + v13[6], v17);
  *(_QWORD *)(v23 + v13[7]) = *(_QWORD *)(v24 + v13[7]);
  v26 = v13[8];
  v27 = v23 + v26;
  v28 = v24 + v26;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v23 + v13[9]) = *(_QWORD *)(v24 + v13[9]);
  v30(v23 + v13[10], v24 + v13[10], v31);
  *(_QWORD *)(v23 + v13[11]) = *(_QWORD *)(v24 + v13[11]);
  *(_QWORD *)(v23 + v13[12]) = *(_QWORD *)(v24 + v13[12]);
  *(_QWORD *)(v23 + v13[13]) = *(_QWORD *)(v24 + v13[13]);
  return a1;
}

uint64_t assignWithTake for TwoWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for TwoWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40);
  v45 = v8;
  v44(v6, v7, v8);
  v9 = v4[7];
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  v11 = v4[8];
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  v13 = v4[9];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v16 = (int *)type metadata accessor for WeekResults(0);
  v17 = v16[6];
  v18 = v14 + v17;
  v19 = v15 + v17;
  v20 = sub_1A9CE5F64();
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40);
  v21(v18, v19, v20);
  *(_QWORD *)(v14 + v16[7]) = *(_QWORD *)(v15 + v16[7]);
  v22 = v16[8];
  v23 = v14 + v22;
  v24 = v15 + v22;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v14 + v16[9]) = *(_QWORD *)(v15 + v16[9]);
  v44(v14 + v16[10], v15 + v16[10], v45);
  v25 = v16[11];
  v26 = *(void **)(v14 + v25);
  *(_QWORD *)(v14 + v25) = *(_QWORD *)(v15 + v25);

  v27 = v16[12];
  v28 = *(void **)(v14 + v27);
  *(_QWORD *)(v14 + v27) = *(_QWORD *)(v15 + v27);

  v29 = v16[13];
  v30 = *(void **)(v14 + v29);
  *(_QWORD *)(v14 + v29) = *(_QWORD *)(v15 + v29);

  v31 = v4[10];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_QWORD *)(a1 + v31) = *(_QWORD *)v33;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  *(_BYTE *)(v32 + 16) = *(_BYTE *)(v33 + 16);
  v21(v32 + v16[6], v33 + v16[6], v20);
  *(_QWORD *)(v32 + v16[7]) = *(_QWORD *)(v33 + v16[7]);
  v34 = v16[8];
  v35 = v32 + v34;
  v36 = v33 + v34;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_QWORD *)(v32 + v16[9]) = *(_QWORD *)(v33 + v16[9]);
  v44(v32 + v16[10], v33 + v16[10], v45);
  v37 = v16[11];
  v38 = *(void **)(v32 + v37);
  *(_QWORD *)(v32 + v37) = *(_QWORD *)(v33 + v37);

  v39 = v16[12];
  v40 = *(void **)(v32 + v39);
  *(_QWORD *)(v32 + v39) = *(_QWORD *)(v33 + v39);

  v41 = v16[13];
  v42 = *(void **)(v32 + v41);
  *(_QWORD *)(v32 + v41) = *(_QWORD *)(v33 + v41);

  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekDiagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C856EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TwoWeekResults();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TwoWeekDiagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C85734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TwoWeekResults();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TwoWeekDiagram(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB48D38);
}

uint64_t sub_1A9C85788()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TwoWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TwoWeekChart(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  int *v65;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v59 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v59 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = (int *)type metadata accessor for TwoWeekResults();
    v7 = v6[6];
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v67 = v10;
    v68 = v11;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v65 = v6;
    v12 = v6[7];
    v13 = *(void **)((char *)a2 + v12);
    *(_QWORD *)((char *)v4 + v12) = v13;
    v14 = v6[8];
    v15 = *(void **)((char *)a2 + v14);
    *(_QWORD *)((char *)v4 + v14) = v15;
    v16 = v6[9];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v20 = *(_QWORD *)((char *)a2 + v16);
    v19 = *(_QWORD *)((char *)a2 + v16 + 8);
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v19;
    v17[16] = v18[16];
    v21 = (int *)type metadata accessor for WeekResults(0);
    v22 = v21[6];
    v61 = &v18[v22];
    v62 = &v17[v22];
    v23 = sub_1A9CE5F64();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v63 = v23;
    v64 = v24;
    v25 = v13;
    v26 = v15;
    swift_bridgeObjectRetain();
    v24(v62, v61, v23);
    *(_QWORD *)&v17[v21[7]] = *(_QWORD *)&v18[v21[7]];
    v27 = v21[8];
    v28 = &v17[v27];
    v29 = &v18[v27];
    v28[8] = v29[8];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)&v17[v21[9]] = *(_QWORD *)&v18[v21[9]];
    v68(&v17[v21[10]], &v18[v21[10]], v67);
    v30 = v21[11];
    v31 = *(void **)&v18[v30];
    *(_QWORD *)&v17[v30] = v31;
    v32 = v21[12];
    v33 = *(void **)&v18[v32];
    *(_QWORD *)&v17[v32] = v33;
    v34 = v21[13];
    v35 = *(void **)&v18[v34];
    *(_QWORD *)&v17[v34] = v35;
    v36 = v65[10];
    v37 = (char *)v4 + v36;
    v38 = (char *)a2 + v36;
    v37[16] = *((_BYTE *)a2 + v36 + 16);
    v40 = *(_QWORD *)((char *)a2 + v36);
    v39 = *(_QWORD *)((char *)a2 + v36 + 8);
    *(_QWORD *)v37 = v40;
    *((_QWORD *)v37 + 1) = v39;
    v41 = v21[6];
    v42 = &v37[v41];
    v43 = &v38[v41];
    v44 = v31;
    v45 = v33;
    v46 = v35;
    swift_bridgeObjectRetain();
    v64(v42, v43, v63);
    *(_QWORD *)&v37[v21[7]] = *(_QWORD *)&v38[v21[7]];
    v47 = v21[8];
    v48 = &v37[v47];
    v49 = &v38[v47];
    v48[8] = v49[8];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *(_QWORD *)&v37[v21[9]] = *(_QWORD *)&v38[v21[9]];
    v68(&v37[v21[10]], &v38[v21[10]], v67);
    v50 = v21[11];
    v51 = *(void **)&v38[v50];
    *(_QWORD *)&v37[v50] = v51;
    v52 = v21[12];
    v53 = *(void **)&v38[v52];
    *(_QWORD *)&v37[v52] = v53;
    v54 = v21[13];
    v55 = *(void **)&v38[v54];
    *(_QWORD *)&v37[v54] = v55;
    *((_BYTE *)v4 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v56 = v51;
    v57 = v53;
    v58 = v55;
  }
  return v4;
}

void _s13SleepHealthUI14TwoWeekDiagramVwxx_0(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for TwoWeekResults();
  v3 = a1 + v2[6];
  v4 = sub_1A9CE6444();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);

  v6 = a1 + v2[9];
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v6 + v7[6];
  v9 = sub_1A9CE5F64();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v5(v6 + v7[10], v4);

  v11 = a1 + v2[10];
  swift_bridgeObjectRelease();
  v10(v11 + v7[6], v9);
  v5(v11 + v7[10], v4);

}

uint64_t initializeWithCopy for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (int *)type metadata accessor for TwoWeekResults();
  v6 = v5[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v63 = v9;
  v64 = v10;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = v5[7];
  v61 = a2;
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = v5[8];
  v14 = *(void **)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  v15 = v5[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v19 = *(_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v18;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v20 = (int *)type metadata accessor for WeekResults(0);
  v21 = v20[6];
  v58 = (char *)(v17 + v21);
  v59 = v16 + v21;
  v22 = sub_1A9CE5F64();
  v23 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v60 = v23;
  v24 = v12;
  v25 = v14;
  swift_bridgeObjectRetain();
  v23(v59, v58, v22);
  *(_QWORD *)(v16 + v20[7]) = *(_QWORD *)(v17 + v20[7]);
  v26 = v20[8];
  v27 = v16 + v26;
  v28 = v17 + v26;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v16 + v20[9]) = *(_QWORD *)(v17 + v20[9]);
  v64(v16 + v20[10], v17 + v20[10], v63);
  v29 = v20[11];
  v30 = *(void **)(v17 + v29);
  *(_QWORD *)(v16 + v29) = v30;
  v31 = v20[12];
  v32 = *(void **)(v17 + v31);
  *(_QWORD *)(v16 + v31) = v32;
  v33 = v20[13];
  v34 = *(void **)(v17 + v33);
  *(_QWORD *)(v16 + v33) = v34;
  v35 = v5[10];
  v36 = a1 + v35;
  v37 = (_QWORD *)(v61 + v35);
  *(_BYTE *)(v36 + 16) = *(_BYTE *)(v61 + v35 + 16);
  v38 = *(_QWORD *)(v61 + v35 + 8);
  *(_QWORD *)v36 = *v37;
  *(_QWORD *)(v36 + 8) = v38;
  v39 = v20[6];
  v40 = v36 + v39;
  v41 = (char *)v37 + v39;
  v42 = v30;
  v43 = v32;
  v44 = v34;
  swift_bridgeObjectRetain();
  v60(v40, v41, v22);
  *(_QWORD *)(v36 + v20[7]) = *(_QWORD *)((char *)v37 + v20[7]);
  v45 = v20[8];
  v46 = v36 + v45;
  v47 = (char *)v37 + v45;
  *(_BYTE *)(v46 + 8) = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v36 + v20[9]) = *(_QWORD *)((char *)v37 + v20[9]);
  v64(v36 + v20[10], (uint64_t)v37 + v20[10], v63);
  v48 = v20[11];
  v49 = *(void **)((char *)v37 + v48);
  *(_QWORD *)(v36 + v48) = v49;
  v50 = v20[12];
  v51 = *(void **)((char *)v37 + v50);
  *(_QWORD *)(v36 + v50) = v51;
  v52 = v20[13];
  v53 = *(void **)((char *)v37 + v52);
  *(_QWORD *)(v36 + v52) = v53;
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(v61 + *(int *)(a3 + 20));
  v54 = v49;
  v55 = v51;
  v56 = v53;
  return a1;
}

_QWORD *assignWithCopy for TwoWeekChart(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for TwoWeekResults();
  v6 = v5[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v65 = v9;
  v64(v7, v8, v9);
  v10 = v5[7];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = v5[8];
  v15 = *(void **)((char *)a2 + v14);
  v16 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  v17 = v15;

  v18 = v5[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  *((_QWORD *)v19 + 1) = v21;
  v22 = (int *)type metadata accessor for WeekResults(0);
  v23 = v22[6];
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = sub_1A9CE5F64();
  v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24);
  v66(v24, v25, v26);
  *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
  v27 = v22[8];
  v28 = &v19[v27];
  v29 = &v20[v27];
  v30 = v29[8];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v30;
  *(_QWORD *)&v19[v22[9]] = *(_QWORD *)&v20[v22[9]];
  v64(&v19[v22[10]], &v20[v22[10]], v65);
  v31 = v22[11];
  v32 = *(void **)&v20[v31];
  v33 = *(void **)&v19[v31];
  *(_QWORD *)&v19[v31] = v32;
  v34 = v32;

  v35 = v22[12];
  v36 = *(void **)&v20[v35];
  v37 = *(void **)&v19[v35];
  *(_QWORD *)&v19[v35] = v36;
  v38 = v36;

  v39 = v22[13];
  v40 = *(void **)&v20[v39];
  v41 = *(void **)&v19[v39];
  *(_QWORD *)&v19[v39] = v40;
  v42 = v40;

  v43 = v5[10];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)a2 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = *((_QWORD *)v45 + 1);
  v44[16] = v45[16];
  *((_QWORD *)v44 + 1) = v46;
  v66(&v44[v22[6]], &v45[v22[6]], v26);
  *(_QWORD *)&v44[v22[7]] = *(_QWORD *)&v45[v22[7]];
  v47 = v22[8];
  v48 = &v44[v47];
  v49 = &v45[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  *(_QWORD *)&v44[v22[9]] = *(_QWORD *)&v45[v22[9]];
  v64(&v44[v22[10]], &v45[v22[10]], v65);
  v51 = v22[11];
  v52 = *(void **)&v45[v51];
  v53 = *(void **)&v44[v51];
  *(_QWORD *)&v44[v51] = v52;
  v54 = v52;

  v55 = v22[12];
  v56 = *(void **)&v45[v55];
  v57 = *(void **)&v44[v55];
  *(_QWORD *)&v44[v55] = v56;
  v58 = v56;

  v59 = v22[13];
  v60 = *(void **)&v45[v59];
  v61 = *(void **)&v44[v59];
  *(_QWORD *)&v44[v59] = v60;
  v62 = v60;

  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (int *)type metadata accessor for TwoWeekResults();
  v6 = v5[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v32 = v9;
  v31(v7, v8, v9);
  *(_QWORD *)(a1 + v5[7]) = *(_QWORD *)(a2 + v5[7]);
  *(_QWORD *)(a1 + v5[8]) = *(_QWORD *)(a2 + v5[8]);
  v10 = v5[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10 + 8);
  *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(a2 + v10 + 16);
  v14 = (int *)type metadata accessor for WeekResults(0);
  v15 = v14[6];
  v16 = v11 + v15;
  v17 = v12 + v15;
  v18 = sub_1A9CE5F64();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  *(_QWORD *)(v11 + v14[7]) = *(_QWORD *)(v12 + v14[7]);
  v20 = v14[8];
  v21 = v11 + v20;
  v22 = v12 + v20;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_QWORD *)(v11 + v14[9]) = *(_QWORD *)(v12 + v14[9]);
  v31(v11 + v14[10], v12 + v14[10], v32);
  *(_QWORD *)(v11 + v14[11]) = *(_QWORD *)(v12 + v14[11]);
  *(_QWORD *)(v11 + v14[12]) = *(_QWORD *)(v12 + v14[12]);
  *(_QWORD *)(v11 + v14[13]) = *(_QWORD *)(v12 + v14[13]);
  v23 = v5[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(a2 + v23 + 16);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  *(_QWORD *)v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(v24 + 8) = v26;
  v19(a1 + v23 + v14[6], a2 + v23 + v14[6], v18);
  *(_QWORD *)(v24 + v14[7]) = *(_QWORD *)(v25 + v14[7]);
  v27 = v14[8];
  v28 = v24 + v27;
  v29 = v25 + v27;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v24 + v14[9]) = *(_QWORD *)(v25 + v14[9]);
  v31(v24 + v14[10], v25 + v14[10], v32);
  *(_QWORD *)(v24 + v14[11]) = *(_QWORD *)(v25 + v14[11]);
  *(_QWORD *)(v24 + v14[12]) = *(_QWORD *)(v25 + v14[12]);
  *(_QWORD *)(v24 + v14[13]) = *(_QWORD *)(v25 + v14[13]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TwoWeekChart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for TwoWeekResults();
  v6 = v5[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v46 = v9;
  v45(v7, v8, v9);
  v10 = v5[7];
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  v12 = v5[8];
  v13 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);

  v14 = v5[9];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (int *)type metadata accessor for WeekResults(0);
  v18 = v17[6];
  v19 = v15 + v18;
  v20 = v16 + v18;
  v21 = sub_1A9CE5F64();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40);
  v22(v19, v20, v21);
  *(_QWORD *)(v15 + v17[7]) = *(_QWORD *)(v16 + v17[7]);
  v23 = v17[8];
  v24 = v15 + v23;
  v25 = v16 + v23;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v15 + v17[9]) = *(_QWORD *)(v16 + v17[9]);
  v45(v15 + v17[10], v16 + v17[10], v46);
  v26 = v17[11];
  v27 = *(void **)(v15 + v26);
  *(_QWORD *)(v15 + v26) = *(_QWORD *)(v16 + v26);

  v28 = v17[12];
  v29 = *(void **)(v15 + v28);
  *(_QWORD *)(v15 + v28) = *(_QWORD *)(v16 + v28);

  v30 = v17[13];
  v31 = *(void **)(v15 + v30);
  *(_QWORD *)(v15 + v30) = *(_QWORD *)(v16 + v30);

  v32 = v5[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  v22(v33 + v17[6], v34 + v17[6], v21);
  *(_QWORD *)(v33 + v17[7]) = *(_QWORD *)(v34 + v17[7]);
  v35 = v17[8];
  v36 = v33 + v35;
  v37 = v34 + v35;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_QWORD *)(v33 + v17[9]) = *(_QWORD *)(v34 + v17[9]);
  v45(v33 + v17[10], v34 + v17[10], v46);
  v38 = v17[11];
  v39 = *(void **)(v33 + v38);
  *(_QWORD *)(v33 + v38) = *(_QWORD *)(v34 + v38);

  v40 = v17[12];
  v41 = *(void **)(v33 + v40);
  *(_QWORD *)(v33 + v40) = *(_QWORD *)(v34 + v40);

  v42 = v17[13];
  v43 = *(void **)(v33 + v42);
  *(_QWORD *)(v33 + v42) = *(_QWORD *)(v34 + v42);

  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TwoWeekChart()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C865F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for TwoWeekResults();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TwoWeekChart()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C86690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TwoWeekResults();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_1A9C86708()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TwoWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9C86778()
{
  return sub_1A9B92B9C(&qword_1EEB48E00, (uint64_t (*)(uint64_t))sub_1A9C8398C, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
}

unint64_t sub_1A9C867A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48E08;
  if (!qword_1EEB48E08)
  {
    sub_1A9B95370(255, &qword_1EEB48E10, (uint64_t (*)(uint64_t))sub_1A9C86848, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB48E60, (uint64_t (*)(uint64_t))sub_1A9C86848, (uint64_t)&protocol conformance descriptor for InfographicGrid<A, B>);
    v3[1] = MEMORY[0x1E0CDA228];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48E08);
  }
  return result;
}

uint64_t sub_1A9C86848()
{
  uint64_t result;

  result = qword_1EEB48E18;
  if (!qword_1EEB48E18)
  {
    sub_1A9B95370(255, &qword_1EEB48E20, (uint64_t (*)(uint64_t))sub_1A9C868EC, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    sub_1A9C86A24();
    sub_1A9C86AC4();
    type metadata accessor for InfographicGrid();
  }
  return result;
}

void sub_1A9C868EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48E28)
  {
    sub_1A9B92F34(255, &qword_1EEB48E30, (uint64_t (*)(uint64_t))sub_1A9C86964, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9C869C4();
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48E28);
  }
}

void sub_1A9C86964()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB48E38)
  {
    type metadata accessor for WeekDiagram(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB48E38);
  }
}

unint64_t sub_1A9C869C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB48E40;
  if (!qword_1EEB48E40)
  {
    sub_1A9B92F34(255, &qword_1EEB48E30, (uint64_t (*)(uint64_t))sub_1A9C86964, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB48E40);
  }
  return result;
}

unint64_t sub_1A9C86A24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB48E48;
  if (!qword_1EEB48E48)
  {
    sub_1A9B95370(255, &qword_1EEB48E20, (uint64_t (*)(uint64_t))sub_1A9C868EC, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB48E50, (uint64_t (*)(uint64_t))sub_1A9C868EC, MEMORY[0x1E0CDFB10]);
    v3[1] = sub_1A9BA3D00();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB48E48);
  }
  return result;
}

unint64_t sub_1A9C86AC4()
{
  unint64_t result;

  result = qword_1EEB48E58;
  if (!qword_1EEB48E58)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF40B4, &type metadata for StandardMetrics);
    atomic_store(result, (unint64_t *)&qword_1EEB48E58);
  }
  return result;
}

void sub_1A9C86B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263330)
  {
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263330);
  }
}

void sub_1A9C86B5C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9B94928(255, a3);
    v4 = sub_1A9CE8B80();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9C86BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EEB48E78)
  {
    v4 = type metadata accessor for InfographicAccessibleTextWrapper(0, MEMORY[0x1E0DEA968], (uint64_t)&off_1E55DADA0, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEB48E78);
  }
}

uint64_t sub_1A9C86C0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1A9C86C38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48E88)
  {
    sub_1A9B92F34(255, &qword_1EEB48E30, (uint64_t (*)(uint64_t))sub_1A9C86964, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48E88);
  }
}

BOOL static SleepTimeDurationPickerViewModel.Context.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

BOOL static SleepTimeDurationPickerViewModel.Topic.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t SleepTimeDurationPickerViewModel.Topic.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t SleepTimeDurationPickerViewModel.Topic.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t SleepTimeDurationPickerViewModel.Context.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t SleepTimeDurationPickerViewModel.Context.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

unint64_t sub_1A9C86DC4()
{
  unint64_t result;

  result = qword_1EEB48E90;
  if (!qword_1EEB48E90)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepTimeDurationPickerViewModel.Topic, &type metadata for SleepTimeDurationPickerViewModel.Topic);
    atomic_store(result, (unint64_t *)&qword_1EEB48E90);
  }
  return result;
}

unint64_t sub_1A9C86E0C()
{
  unint64_t result;

  result = qword_1EEB48E98;
  if (!qword_1EEB48E98)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepTimeDurationPickerViewModel.Context, &type metadata for SleepTimeDurationPickerViewModel.Context);
    atomic_store(result, (unint64_t *)&qword_1EEB48E98);
  }
  return result;
}

uint64_t initializeWithCopy for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(void **)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = v5;

  return a1;
}

uint64_t assignWithTake for SleepTimeDurationPickerViewModel(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel()
{
  return &type metadata for SleepTimeDurationPickerViewModel;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel.Topic()
{
  return &type metadata for SleepTimeDurationPickerViewModel.Topic;
}

uint64_t _s13SleepHealthUI32SleepTimeDurationPickerViewModelV5TopicOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9C86FE4 + 4 * byte_1A9CF4A65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9C87018 + 4 * byte_1A9CF4A60[v4]))();
}

uint64_t sub_1A9C87018(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C87020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C87028);
  return result;
}

uint64_t sub_1A9C87034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C8703CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9C87040(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C87048(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepTimeDurationPickerViewModel.Context()
{
  return &type metadata for SleepTimeDurationPickerViewModel.Context;
}

double CGFloat.rounded(_:toScale:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t v16;
  double v17;

  v6 = sub_1A9CE8B8C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 * a3;
  v17 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v12 == *MEMORY[0x1E0DED4F0])
  {
    v13 = round(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4E8])
  {
    v13 = rint(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED500])
  {
    v13 = ceil(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED508])
  {
    v13 = floor(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4D8])
  {
    v13 = trunc(v11);
  }
  else if (v12 == *MEMORY[0x1E0DED4E0])
  {
    v13 = ceil(v11);
    v14 = floor(v11);
    if (v11 < 0.0)
      v13 = v14;
  }
  else
  {
    sub_1A9CE84A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v13 = v17;
  }
  return v13 / a2;
}

double CGFloat.rounded(_:toScaleOf:)(uint64_t a1, id a2, double a3)
{
  double v5;

  objc_msgSend(a2, sel_displayScale);
  return CGFloat.rounded(_:toScale:)(a1, v5, a3);
}

double CGFloat.rounded(_:toScaleOf:)(uint64_t a1, void *a2, double a3)
{
  swift_getObjectType();
  return sub_1A9C87274(a1, a2, a3);
}

double sub_1A9C87274(uint64_t a1, id a2, double a3)
{
  id v5;
  double v6;
  double v7;

  v5 = objc_msgSend(a2, sel_traitCollection);
  objc_msgSend(v5, sel_displayScale);
  v7 = CGFloat.rounded(_:toScale:)(a1, v6, a3);

  return v7;
}

uint64_t Date.hkspDescription.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_1A9CE6258();
  v1 = objc_msgSend(v0, sel_hkspDescription);

  v2 = sub_1A9CE82E0();
  return v2;
}

uint64_t Date.dayIndex(inGregorian:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v2 = sub_1A9CE6444();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE62E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE810C();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v1, v7, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v21, v2);
  sub_1A9CE80F4();
  v18 = sub_1A9CE8100();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  return v18;
}

void static Date.noon(onDayIndex:gregorian:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_1A9CE63CC();
  v4 = objc_msgSend(v2, sel_hk_noonWithDayIndex_calendar_, a1, v3);

  sub_1A9CE62C4();
}

uint64_t Date.hourMinuteComponents()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(unint64_t, _QWORD, uint64_t);
  uint64_t v13;

  v0 = sub_1A9CE6444();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6420();
  sub_1A9B92F34(0, &qword_1EEB47BF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = sub_1A9CE642C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
  v10 = v9 + v8;
  v11 = *(void (**)(unint64_t, _QWORD, uint64_t))(v6 + 104);
  v11(v10, *MEMORY[0x1E0CB1140], v5);
  v11(v10 + v7, *MEMORY[0x1E0CB1178], v5);
  sub_1A9C4B104(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1A9CE63B4();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t static Date.iso8601(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v17;

  v2 = sub_1A9CE62E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v17 - v10;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36A8]), sel_init);
  v13 = (void *)sub_1A9CE82B0();
  v14 = objc_msgSend(v12, sel_dateFromString_, v13);

  if (v14)
  {
    sub_1A9CE62C4();

    v15 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v15(v11, v6, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a1, v11, v2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  }
  __break(1u);
  return result;
}

void _s13ConfigurationVwxx(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t _s13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v38 = v4;
  v39 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v5;
  v40 = v5;
  v41 = *(void **)(a2 + 32);
  v42 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v41;
  *(_QWORD *)(a1 + 40) = v42;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  v9 = *(void **)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v9;
  v10 = *(_QWORD *)(a2 + 216);
  v37 = *(void **)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v37;
  *(_QWORD *)(a1 + 216) = v10;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v11 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v11;
  v12 = *(void **)(a2 + 280);
  v13 = *(void **)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v12;
  *(_QWORD *)(a1 + 288) = v13;
  v15 = *(void **)(a2 + 296);
  v14 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v15;
  *(_QWORD *)(a1 + 304) = v14;
  v17 = *(void **)(a2 + 312);
  v16 = *(void **)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v17;
  *(_QWORD *)(a1 + 320) = v16;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  v18 = *(void **)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v18;
  v19 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v19;
  v36 = *(void **)(a2 + 384);
  *(_QWORD *)(a1 + 384) = v36;
  v20 = v3;
  v21 = v38;
  v22 = v39;
  v23 = v40;
  v24 = v41;
  v25 = v42;
  v26 = v9;
  v27 = v37;
  v28 = v12;
  v29 = v13;
  v30 = v15;
  v31 = v17;
  v32 = v16;
  swift_bridgeObjectRetain();
  v33 = v18;
  swift_bridgeObjectRetain();
  v34 = v36;
  return a1;
}

uint64_t _s13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  v16 = *(void **)(a2 + 32);
  v17 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  v18 = v16;

  v19 = *(void **)(a2 + 40);
  v20 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v19;
  v21 = v19;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v22 = *(void **)(a2 + 200);
  v23 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v22;
  v24 = v22;

  v25 = *(void **)(a2 + 208);
  v26 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v25;
  v27 = v25;

  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v28 = *(void **)(a2 + 280);
  v29 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v28;
  v30 = v28;

  v31 = *(void **)(a2 + 288);
  v32 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v31;
  v33 = v31;

  v34 = *(void **)(a2 + 296);
  v35 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v34;
  v36 = v34;

  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v37 = *(void **)(a2 + 312);
  v38 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v37;
  v39 = v37;

  v40 = *(void **)(a2 + 320);
  v41 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v40;
  v42 = v40;

  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(void **)(a2 + 360);
  v44 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v43;
  v45 = v43;

  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = *(void **)(a2 + 384);
  v47 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v46;
  v48 = v46;

  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t _s13ConfigurationVwta(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;

  v2 = a2;
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2[1];

  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2[2];

  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2[3];

  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2[4];

  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2[5];

  *(_OWORD *)(a1 + 48) = *((_OWORD *)v2 + 3);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)v2 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v2 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v2 + 13);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 15);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v2 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v2 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v2 + 21);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v2 + 23);
  v10 = v2[25];
  v2 += 25;
  v11 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v10;

  v12 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v2[1];

  *(_QWORD *)(a1 + 216) = v2[2];
  *(_QWORD *)(a1 + 232) = v2[4];
  v13 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(a1 + 248) = *((_OWORD *)v2 + 3);
  *(_DWORD *)(a1 + 224) = *((_DWORD *)v2 + 6);
  *(_QWORD *)(a1 + 240) = v2[5];
  *(_OWORD *)(a1 + 264) = v13;
  v14 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v2[10];

  v15 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v2[11];

  v16 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v2[12];

  v17 = v2[14];
  v18 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = v2[13];
  *(_QWORD *)(a1 + 312) = v17;

  v19 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v2[15];

  v20 = v2[17];
  *(_QWORD *)(a1 + 328) = v2[16];
  *(_QWORD *)(a1 + 336) = v20;
  v21 = v2[19];
  *(_QWORD *)(a1 + 344) = v2[18];
  *(_QWORD *)(a1 + 352) = v21;
  swift_bridgeObjectRelease();
  v22 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v2[20];

  v23 = v2[22];
  *(_QWORD *)(a1 + 368) = v2[21];
  *(_QWORD *)(a1 + 376) = v23;
  swift_bridgeObjectRelease();
  v24 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v2[23];

  return a1;
}

uint64_t _s13ConfigurationVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 392))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 392) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 392) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13ConfigurationVMa()
{
  return &_s13ConfigurationVN;
}

uint64_t sub_1A9C87F9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v7 = result == a3 && a2 == a4;
  v8 = *(_QWORD *)(v5 + 184);
  if (!v8)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v9 = result;
  if (a3 == 0x8000000000000000 && v8 == -1)
    goto LABEL_45;
  if (!(a3 % v8))
  {
    if (!v7)
      goto LABEL_33;
LABEL_17:
    if (result != 0x8000000000000000)
    {
      if (result % v8)
      {
        if (result == a3)
          return 0;
        goto LABEL_37;
      }
LABEL_35:
      result = 0;
      if (v9 == a3 || !a2)
        return result;
      goto LABEL_37;
    }
    goto LABEL_18;
  }
  if (v7)
    goto LABEL_17;
  if (result == 0x8000000000000000)
  {
LABEL_18:
    result = 0;
LABEL_19:
    if (v8 != -1)
    {
      while (1)
      {
        if (v9 % v8)
        {
          if (v9 == a3)
            return result;
        }
        else if (v9 == a3 || !a2)
        {
          return result;
        }
        if (a3 > v9)
          v9 = a3;
        if (v9 != 0x8000000000000000 || v8 != -1)
          goto LABEL_39;
        __break(1u);
LABEL_33:
        result = a4 == 0;
        if (v9 == 0x8000000000000000)
          goto LABEL_19;
      }
    }
LABEL_46:
    __break(1u);
    return result;
  }
  if (!(result % v8))
    goto LABEL_35;
  if (result == a3)
    return 0;
LABEL_37:
  result = 0;
  if (a3 > v9)
    v9 = a3;
LABEL_39:
  if (!(v9 % v8))
  {
    if (*(double *)(v5 + 168) < fabs(a5))
      return 1;
    else
      return result;
  }
  return result;
}

void *sub_1A9C880DC()
{
  _BYTE __src[392];

  sub_1A9C88534((uint64_t)__src);
  return memcpy(&unk_1EEB57328, __src, 0x188uLL);
}

void *sub_1A9C88118()
{
  _BYTE __src[392];

  sub_1A9C88154(__src);
  return memcpy(&unk_1EEB574B0, __src, 0x188uLL);
}

void *sub_1A9C88154@<X0>(void *a1@<X8>)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  _QWORD __dst[49];
  _QWORD __src[50];

  if (qword_1EEB42E48 != -1)
    swift_once();
  memcpy(__dst, &unk_1EEB57328, sizeof(__dst));
  v2 = (void *)__dst[0];
  v1 = (void *)__dst[1];
  v3 = (void *)__dst[2];
  v4 = (void *)__dst[3];
  v5 = (void *)__dst[4];
  v55 = (void *)__dst[5];
  v7 = __dst[6];
  v6 = __dst[7];
  v8 = __dst[8];
  v41 = *(_OWORD *)&__dst[19];
  v42 = *(_OWORD *)&__dst[17];
  v9 = __dst[15];
  v10 = __dst[21];
  v11 = __dst[22];
  v12 = (void *)__dst[25];
  v39 = __dst[24];
  v40 = __dst[23];
  v29 = (void *)__dst[26];
  v47 = __dst[28];
  v46 = __dst[29];
  v13 = __dst[31];
  v14 = __dst[32];
  v44 = __dst[33];
  v45 = __dst[30];
  v43 = __dst[34];
  v15 = (void *)__dst[39];
  v16 = (void *)__dst[40];
  v50 = __dst[42];
  v17 = __dst[44];
  v48 = __dst[46];
  v49 = __dst[43];
  v31 = __dst[47];
  v32 = (void *)__dst[45];
  v37 = (void *)__dst[37];
  v38 = __dst[38];
  v35 = (void *)__dst[36];
  v26 = (void *)__dst[48];
  v28 = (void *)__dst[35];
  v25 = (void *)*MEMORY[0x1E0DC4AB8];
  sub_1A9BD7A70((uint64_t)__dst);
  v36 = v2;
  v18 = v1;
  v52 = v3;
  v53 = v4;
  v54 = v5;
  v56 = v55;
  v34 = v12;
  v30 = v29;
  v19 = v15;
  v20 = v16;
  swift_bridgeObjectRetain();
  v33 = v32;
  swift_bridgeObjectRetain();
  v27 = v26;
  v21 = v25;

  v22 = v21;
  v23 = (id)*MEMORY[0x1E0DC4A98];

  __src[0] = v36;
  __src[1] = v18;
  __src[2] = v52;
  __src[3] = v53;
  __src[4] = v54;
  __src[5] = v56;
  __src[6] = v7;
  __src[7] = v6;
  LODWORD(__src[8]) = v8;
  *(_OWORD *)&__src[9] = xmmword_1A9CF4B80;
  *(_OWORD *)&__src[11] = xmmword_1A9CF4B90;
  *(_OWORD *)&__src[13] = xmmword_1A9CF4BA0;
  __src[15] = v9;
  __src[16] = 0x4026000000000000;
  *(_OWORD *)&__src[17] = v42;
  *(_OWORD *)&__src[19] = v41;
  __src[21] = v10;
  __src[22] = v11;
  __src[23] = v40;
  __src[24] = v39;
  __src[25] = v34;
  __src[26] = v30;
  __src[27] = 0x4057C00000000000;
  LODWORD(__src[28]) = v47;
  __src[29] = v46;
  __src[30] = v45;
  __src[31] = v13;
  __src[32] = v14;
  __src[33] = v44;
  __src[34] = v43;
  __src[35] = v22;
  __src[36] = v22;
  __src[37] = v23;
  __src[38] = v38;
  __src[39] = v19;
  __src[40] = v20;
  __src[41] = 0x4053000000000000;
  __src[42] = v50;
  __src[43] = v49;
  __src[44] = v17;
  __src[45] = v33;
  __src[46] = v48;
  __src[47] = v31;
  __src[48] = v27;
  sub_1A9BD7A70((uint64_t)__src);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1A9BD7B58((uint64_t)__src);
  return memcpy(a1, __src, 0x188uLL);
}

void sub_1A9C88534(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  sub_1A9BED048();
  v2 = static UIColor.ringGoalMetColor.getter();
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_systemOrangeColor);
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  *(_QWORD *)&v24 = sub_1A9C219A0;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v22 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v22 + 1) = 1107296256;
  *(_QWORD *)&v23 = sub_1A9C21C90;
  *((_QWORD *)&v23 + 1) = &block_descriptor_29;
  v6 = _Block_copy(&v22);
  v7 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  v8 = objc_msgSend(v3, sel_systemGray6Color);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v9 = (id)qword_1ED264F90;
  v10 = (void *)sub_1A9CE82B0();
  v11 = objc_msgSend(v3, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v10, v9, 0);

  if (v11)
  {
    v12 = objc_msgSend(v3, sel_blackColor);
    if (qword_1EEB42C70 != -1)
      swift_once();
    v13 = qword_1EEB45000;
    if (qword_1EEB42C78 != -1)
      swift_once();
    v14 = qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v15 = qword_1EEB45010;
    sub_1A9C40DF8((uint64_t)&v22);
    *(_QWORD *)a1 = v2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 1039516303;
    *(_OWORD *)(a1 + 72) = xmmword_1A9CF4BB0;
    *(_OWORD *)(a1 + 88) = xmmword_1A9CF4BC0;
    *(_OWORD *)(a1 + 104) = xmmword_1A9CF4BD0;
    *(_OWORD *)(a1 + 120) = xmmword_1A9CF4BE0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v14;
    *(_QWORD *)(a1 + 160) = v15;
    *(_OWORD *)(a1 + 168) = xmmword_1A9CF4BF0;
    *(_OWORD *)(a1 + 184) = xmmword_1A9CF4C00;
    v16 = v24;
    *(_OWORD *)(a1 + 248) = v25;
    *(_OWORD *)(a1 + 232) = v16;
    v17 = v22;
    *(_OWORD *)(a1 + 216) = v23;
    *(_OWORD *)(a1 + 200) = v17;
    v18 = v29;
    *(_OWORD *)(a1 + 296) = v28;
    *(_OWORD *)(a1 + 312) = v18;
    v19 = v27;
    *(_OWORD *)(a1 + 264) = v26;
    *(_OWORD *)(a1 + 280) = v19;
    v20 = v33;
    *(_OWORD *)(a1 + 360) = v32;
    *(_OWORD *)(a1 + 376) = v20;
    v21 = v31;
    *(_OWORD *)(a1 + 328) = v30;
    *(_OWORD *)(a1 + 344) = v21;
  }
  else
  {
    __break(1u);
  }
}

id sub_1A9C88848()
{
  return sub_1A9C88888(0x6C6553726F6A616DLL, 26453, (uint64_t)&unk_1E55D2080);
}

id sub_1A9C88868()
{
  return sub_1A9C88888(0x6C6553726F6E696DLL, 29525, (uint64_t)&unk_1E55D20B8);
}

id sub_1A9C88888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultConfiguration);
  type metadata accessor for SleepScheduleClock();
  sub_1A9C88ADC();
  v6 = sub_1A9CE8BC8();
  v7 = (void *)sub_1A9CE82B0();
  v8 = objc_msgSend(v5, sel_tweakedConfigurationForCaller_usage_, v6, v7);

  swift_unknownObjectRelease();
  sub_1A9C88B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CED850;
  v10 = MEMORY[0x1E0DEA968];
  sub_1A9CE897C();
  *(_QWORD *)(inited + 96) = v10;
  *(_QWORD *)(inited + 72) = 0x6D6F74737563;
  *(_QWORD *)(inited + 80) = 0xE600000000000000;
  sub_1A9CE897C();
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 144) = a2;
  sub_1A9CE897C();
  v11 = sub_1A9BAC628(a3);
  sub_1A9C88BD0();
  *(_QWORD *)(inited + 240) = v12;
  *(_QWORD *)(inited + 216) = v11;
  sub_1A9BAC754(inited);
  v13 = (void *)sub_1A9CE8208();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend((id)objc_opt_self(), sel_feedbackWithDictionaryRepresentation_, v13);

  objc_msgSend(v8, sel_setFeedback_, v14);
  return v8;
}

unint64_t sub_1A9C88ADC()
{
  unint64_t result;

  result = qword_1EEB48EA0;
  if (!qword_1EEB48EA0)
  {
    type metadata accessor for SleepScheduleClock();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB48EA0);
  }
  return result;
}

void sub_1A9C88B14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48EA8)
  {
    sub_1A9C88B68();
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48EA8);
  }
}

void sub_1A9C88B68()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB43F18)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB43F18);
  }
}

void sub_1A9C88BD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB48EB0)
  {
    v0 = sub_1A9CE8220();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB48EB0);
  }
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

double CGRect.center.getter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

float64x2_t CGRect.center.setter(float64x2_t a1, float64_t a2)
{
  float64x2_t *v2;
  float64x2_t result;

  __asm { FMOV            V3.2D, #-0.5 }
  a1.f64[1] = a2;
  result = vaddq_f64(a1, vmulq_f64(v2[1], _Q3));
  *v2 = result;
  return result;
}

float64x2_t (*CGRect.center.modify(uint64_t a1))(uint64_t a1)
{
  CGFloat *v1;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat MidX;
  CGFloat MidY;
  CGRect v10;
  CGRect v11;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v10.origin.x = *v1;
  v10.origin.y = v4;
  v10.size.width = v5;
  v10.size.height = v6;
  MidX = CGRectGetMidX(v10);
  v11.origin.x = v3;
  v11.origin.y = v4;
  v11.size.width = v5;
  v11.size.height = v6;
  MidY = CGRectGetMidY(v11);
  *(CGFloat *)a1 = MidX;
  *(CGFloat *)(a1 + 8) = MidY;
  return sub_1A9C88D40;
}

float64x2_t sub_1A9C88D40(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t result;

  v1 = *(float64x2_t **)(a1 + 16);
  __asm { FMOV            V2.2D, #-0.5 }
  result = vaddq_f64(*(float64x2_t *)a1, vmulq_f64(v1[1], _Q2));
  *v1 = result;
  return result;
}

void sub_1A9C88D60(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat MidX;
  CGFloat MidY;
  CGRect v9;
  CGRect v10;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v9.origin.x = *a1;
  v9.origin.y = v4;
  v9.size.width = v5;
  v9.size.height = v6;
  MidX = CGRectGetMidX(v9);
  v10.origin.x = v3;
  v10.origin.y = v4;
  v10.size.width = v5;
  v10.size.height = v6;
  MidY = CGRectGetMidY(v10);
  *a2 = MidX;
  a2[1] = MidY;
}

float64x2_t sub_1A9C88DCC(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t result;

  __asm { FMOV            V2.2D, #-0.5 }
  result = vaddq_f64(*a1, vmulq_f64(a2[1], _Q2));
  *a2 = result;
  return result;
}

BOOL WeekResults.hasData.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (!v2)
    return 0;
  if (v2 == 1)
  {
    v3 = 0;
    v4 = 0.0;
  }
  else
  {
    v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
    v6 = (double *)(v1 + 72);
    v4 = 0.0;
    v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v8 = *(v6 - 4);
      v9 = *v6;
      v6 += 8;
      v4 = v4 + v8 + v9;
      v7 -= 2;
    }
    while (v7);
    if (v2 == v3)
      return v4 > 0.0;
  }
  v10 = v2 - v3;
  v11 = (double *)(v1 + 32 * v3 + 40);
  do
  {
    v12 = *v11;
    v11 += 4;
    v4 = v4 + v12;
    --v10;
  }
  while (v10);
  return v4 > 0.0;
}

uint64_t DayDuration.goalMet.getter()
{
  uint64_t v0;

  return (*(double *)(v0 + 16) - *MEMORY[0x1E0DA85A0] <= *(double *)(v0 + 8)) & ~*(unsigned __int8 *)(v0 + 24);
}

uint64_t WeekResults.canCompareAverage(against:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  uint64_t v10;

  v3 = type metadata accessor for WeekResults(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(v1 + 16);
  sub_1A9BACCD0(a1, (uint64_t)v6);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = v6[16] ^ 1;
  sub_1A9C88F30((uint64_t)v6);
  return v8 & 1;
}

uint64_t type metadata accessor for WeekResults(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB48F10);
}

uint64_t sub_1A9C88F30(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void WeekResults.localizedAverageComparison(against:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  if ((*(_BYTE *)(v1 + 16) & 1) == 0 && (*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    sub_1A9CE82E0();
    v2 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v2);

    if (v3)
    {
      sub_1A9CE6168();
      swift_bridgeObjectRelease();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t WeekResults.days.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WeekResults.average.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t WeekResults.dates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WeekResults(0) + 24);
  v4 = sub_1A9CE5F64();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double WeekResults.max.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 28));
}

uint64_t WeekResults.mostRecentSleepDurationGoal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 32));
}

double WeekResults.axisSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 36));
}

uint64_t WeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WeekResults(0) + 40);
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id WeekResults.xAxisIntervalFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 44));
}

id WeekResults.yAxisFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 48));
}

id WeekResults.averageDurationFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for WeekResults(0) + 52));
}

uint64_t sub_1A9C89248@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *((_BYTE *)a1 + 24);
  v9 = type metadata accessor for WeekResults(0);
  v10 = *(_QWORD *)(a2 + *(int *)(v9 + 28));
  v11 = a2 + *(int *)(v9 + 40);
  v12 = a3 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v13 = sub_1A9CE6444();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v11, v13);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v10;
  return result;
}

uint64_t DayDuration.dayIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double DayDuration.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t DayDuration.goal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DayDuration.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t initializeBufferWithCopyOfBuffer for WeekResults(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_1A9CE5F64();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[8];
    *(_QWORD *)(v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v14 = v7 + v13;
    v15 = (uint64_t)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
    v16 = a3[10];
    *(_QWORD *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v17 = v7 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = sub_1A9CE6444();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[11];
    v21 = a3[12];
    v22 = *(void **)((char *)a2 + v20);
    *(_QWORD *)(v7 + v20) = v22;
    v23 = *(void **)((char *)a2 + v21);
    *(_QWORD *)(v7 + v21) = v23;
    v24 = a3[13];
    v25 = *(void **)((char *)a2 + v24);
    *(_QWORD *)(v7 + v24) = v25;
    v26 = v22;
    v27 = v23;
    v28 = v25;
  }
  return v7;
}

void destroy for WeekResults(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[10];
  v7 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);

}

uint64_t initializeWithCopy for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[11];
  v20 = a3[12];
  v21 = *(void **)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = *(void **)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  v23 = a3[13];
  v24 = *(void **)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v25 = v21;
  v26 = v22;
  v27 = v24;
  return a1;
}

uint64_t assignWithCopy for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[11];
  v20 = *(void **)(a2 + v19);
  v21 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v22 = v20;

  v23 = a3[12];
  v24 = *(void **)(a2 + v23);
  v25 = *(void **)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v26 = v24;

  v27 = a3[13];
  v28 = *(void **)(a2 + v27);
  v29 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  v30 = v28;

  return a1;
}

uint64_t initializeWithTake for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for WeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[11];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = a3[12];
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);

  v21 = a3[13];
  v22 = *(void **)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);

  return a1;
}

uint64_t getEnumTagSinglePayload for WeekResults()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C89944(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A9CE5F64();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_1A9CE6444();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WeekResults()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A9C899F0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1A9CE5F64();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_1A9CE6444();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A9C89A8C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A9CE5F64();
  if (v1 <= 0x3F)
  {
    result = sub_1A9CE6444();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DayDuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DayDuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DayDuration()
{
  return &type metadata for DayDuration;
}

_QWORD *sub_1A9C89BA8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    *(_QWORD *)(a1 + 32) = a2[4];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_1A9CE6444();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1A9C89C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1A9C89C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1A9C89CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_1A9C89D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1A9C89DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1A9C89E48()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C89E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1A9C89E94()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C89EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for DayRelativeDuration(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB48FC0);
}

uint64_t sub_1A9C89EF8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id SleepScheduleProviding.sleepScheduleModel.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)(*(uint64_t (**)(void))(a2 + 8))();
  v8[0] = 0;
  v3 = objc_msgSend(v2, sel_sleepScheduleModelWithError_, v8);

  if (v3)
  {
    v4 = v8[0];
  }
  else
  {
    v5 = v8[0];
    v6 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8570]), sel_init);
  }
  return v3;
}

uint64_t sub_1A9C8A054(uint64_t a1, char a2)
{
  uint64_t result;
  double v5;
  char v6;

  result = sub_1A9CE6DD4();
  if ((v6 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      return result;
    return sub_1A9CE6DE0();
  }
  if ((a2 & 1) != 0 || v5 != *(double *)&a1)
    return sub_1A9CE6DE0();
  return result;
}

id SleepScheduleProvider.__allocating_init(sleepStore:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_log_type_t type;
  void *v25;
  id v26[2];

  v26[1] = *(id *)MEMORY[0x1E0C80C00];
  v26[0] = 0;
  v2 = objc_msgSend(a1, sel_currentSleepScheduleWithError_, v26);
  v3 = v26[0];
  if (v2)
  {
    v4 = v26[0];
  }
  else if (v26[0])
  {
    v10 = qword_1ED2628A0;
    v11 = v26[0];
    if (v10 != -1)
      swift_once();
    v12 = sub_1A9CE6990();
    __swift_project_value_buffer(v12, (uint64_t)qword_1ED262888);
    v13 = v11;
    v14 = sub_1A9CE6978();
    v15 = sub_1A9CE8664();
    if (os_log_type_enabled(v14, v15))
    {
      type = v15;
      v16 = swift_slowAlloc();
      v25 = (void *)swift_slowAlloc();
      v26[0] = v25;
      *(_DWORD *)v16 = 136446466;
      v17 = sub_1A9CE8D48();
      sub_1A9B91D6C(v17, v18, (uint64_t *)v26);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      v19 = v13;
      v20 = objc_msgSend(v19, sel_description);
      v21 = sub_1A9CE82E0();
      v23 = v22;

      sub_1A9B91D6C(v21, v23, (uint64_t *)v26);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v14, type, "[%{public}s] Failed to read sleep schedule with error: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v25, -1, -1);
      MEMORY[0x1AF420344](v16, -1, -1);

    }
    else
    {

    }
  }
  v5 = (id)HKSPCurrentDateProvider();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  v7 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleProvider());
  v8 = SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, v2, (uint64_t)sub_1A9BE4A30, v6);

  return v8;
}

uint64_t sub_1A9C8A3B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t SleepScheduleProviding.sleepSchedule.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  return v3;
}

id sub_1A9C8A418()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
  v2 = (void *)sub_1A9CE6258();
  v17[0] = 0;
  v3 = objc_msgSend(v1, sel_upcomingResolvedScheduleOccurrenceAfterDate_error_, v2, v17);

  v4 = v17[0];
  if (v17[0])
  {
    v5 = qword_1ED2628A0;
    v6 = v17[0];
    if (v5 != -1)
      swift_once();
    v7 = sub_1A9CE6990();
    __swift_project_value_buffer(v7, (uint64_t)qword_1ED262888);
    v8 = v6;
    v9 = sub_1A9CE6978();
    v10 = sub_1A9CE8664();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = (void *)swift_slowAlloc();
      v17[0] = v12;
      *(_DWORD *)v11 = 136446466;
      sub_1A9B91D6C(0xD000000000000015, 0x80000001A9CF4DC0, (uint64_t *)v17);
      sub_1A9CE888C();
      *(_WORD *)(v11 + 12) = 2082;
      sub_1A9B94A18(0, (unint64_t *)&unk_1EEB49000);
      v13 = v8;
      v14 = sub_1A9CE8304();
      sub_1A9B91D6C(v14, v15, (uint64_t *)v17);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] Error loading upcoming resolved occurrence: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v12, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);

    }
    else
    {

    }
  }

  return v3;
}

id SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v4 = (void *)sub_1A9CE6258();
  v21[0] = 0;
  v5 = objc_msgSend(v3, sel_upcomingResolvedScheduleOccurrenceAfterDate_error_, v4, v21);

  v6 = v21[0];
  if (v21[0])
  {
    v7 = qword_1ED2628A0;
    v8 = v21[0];
    if (v7 != -1)
      swift_once();
    v9 = sub_1A9CE6990();
    __swift_project_value_buffer(v9, (uint64_t)qword_1ED262888);
    v10 = v8;
    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE8664();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = (void *)swift_slowAlloc();
      v21[0] = v14;
      *(_DWORD *)v13 = 136446466;
      v15 = sub_1A9CE8D48();
      sub_1A9B91D6C(v15, v16, (uint64_t *)v21);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      sub_1A9B94A18(0, (unint64_t *)&unk_1EEB49000);
      v17 = v10;
      v18 = sub_1A9CE8304();
      sub_1A9B91D6C(v18, v19, (uint64_t *)v21);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] Error loading upcoming resolved occurrence: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);

    }
    else
    {

    }
  }

  return v5;
}

id SleepScheduleProvider.__allocating_init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for SleepScheduleProvider()
{
  return objc_opt_self();
}

id SleepScheduleProviding.mutableSleepSchedule.getter(uint64_t a1, uint64_t a2)
{
  void *v3;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  if (v3
    && (objc_msgSend(v3, sel_mutableCopy),
        v3,
        sub_1A9CE88EC(),
        swift_unknownObjectRelease(),
        sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45698),
        swift_dynamicCast()))
  {
    return v3;
  }
  else
  {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);
  }
}

void SleepScheduleProviding.hasActiveSchedule.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  unint64_t v11;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  v2 = v10;
  if (v10)
  {
    if (!objc_msgSend(v10, sel_isEnabled))
    {

      return;
    }
    v3 = objc_msgSend(v10, sel_occurrences);
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
    v4 = sub_1A9CE83DC();

    v11 = MEMORY[0x1E0DEE9D8];
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v5 = sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (v5)
      {
LABEL_5:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v7 = (id)MEMORY[0x1AF41F600](i, v4);
          else
            v7 = *(id *)(v4 + 8 * i + 32);
          v8 = v7;
          if ((objc_msgSend(v7, sel_isSingleDayOverride) & 1) != 0)
          {

          }
          else
          {
            sub_1A9CE89F4();
            sub_1A9CE8A24();
            sub_1A9CE8A30();
            sub_1A9CE8A00();
          }
        }
        swift_bridgeObjectRelease();
        v9 = v11;
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_21;
        goto LABEL_19;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v5)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
    {
LABEL_21:
      swift_bridgeObjectRetain();
      sub_1A9CE8AC0();

      swift_release_n();
      return;
    }
LABEL_19:
    if ((v9 & 0x4000000000000000) == 0)
    {
      swift_release();

      return;
    }
    goto LABEL_21;
  }
}

id SleepScheduleProviding.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  id v4;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  if (!v4)
    return 0;
  v2 = objc_msgSend(v4, sel_isEnabled);

  return v2;
}

BOOL SleepScheduleProviding.hasWindDown.getter(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  id v5;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  if (!v5)
    return 0;
  objc_msgSend(v5, sel_windDownTime);
  v3 = v2;

  return v3 > 0.0;
}

id SleepScheduleProviding.occurrence(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  unint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v21;

  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  sub_1A9CE6DD4();
  swift_release();
  if (v21)
  {
    v4 = objc_msgSend(v21, sel_occurrencesOnDays_, a1);

    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
    v5 = sub_1A9CE83DC();

    if (!(v5 >> 62))
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRetain();
    v8 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v8 == 1)
      goto LABEL_4;
    goto LABEL_10;
  }
  v5 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_9;
LABEL_3:
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
  {
LABEL_4:
    if ((v5 & 0xC000000000000001) != 0)
    {
      v6 = (id)MEMORY[0x1AF41F600](0, v5);
      goto LABEL_7;
    }
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v6 = *(id *)(v5 + 32);
LABEL_7:
      v7 = v6;
      swift_bridgeObjectRelease();
      return v7;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (qword_1ED2628A0 != -1)
LABEL_17:
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1ED262888);
  v10 = sub_1A9CE6978();
  v11 = sub_1A9CE8664();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = (void *)swift_slowAlloc();
    v21 = v13;
    *(_DWORD *)v12 = 136446466;
    v14 = sub_1A9CE8D48();
    sub_1A9B91D6C(v14, v15, (uint64_t *)&v21);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    v16 = (id)NSStringFromHKSPWeekdays();
    v17 = sub_1A9CE82E0();
    v19 = v18;

    sub_1A9B91D6C(v17, v19, (uint64_t *)&v21);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Did not find occurrence with weekday identifier: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v13, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  return 0;
}

id SleepScheduleProviding.editableOverrideOccurrence(forCurrentDate:gregorianCalendar:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, _QWORD *, double);
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  char *v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  os_log_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  id v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  char **v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  void (*v89)(char *, uint64_t);
  id v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98[5];

  v87 = a2;
  v98[4] = *MEMORY[0x1E0C80C00];
  v8 = sub_1A9CE62E8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v92 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v85 - v15;
  v17 = (void (*)(uint64_t, _QWORD *, double))a4[3];
  v90 = a4;
  v91 = v4;
  v17(a3, a4, v14);
  sub_1A9CE6DD4();
  swift_release();
  v18 = (id)v98[0];
  if (!v98[0])
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8568]), sel_init);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v19 = sub_1A9CE6990();
  v20 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED262888);
  v88 = *(NSObject **)(v9 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v88)(v16, a1, v8);
  v21 = v18;
  v22 = sub_1A9CE6978();
  v23 = sub_1A9CE867C();
  v24 = os_log_type_enabled(v22, v23);
  v95 = v20;
  v96 = v21;
  v93 = a3;
  v94 = a1;
  if (v24)
  {
    v25 = swift_slowAlloc();
    v85 = v8;
    v26 = v25;
    v27 = (_QWORD *)swift_slowAlloc();
    v86 = swift_slowAlloc();
    v98[0] = v86;
    *(_DWORD *)v26 = 136446722;
    v28 = sub_1A9CE8D48();
    v97 = sub_1A9B91D6C(v28, v29, v98);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2114;
    v30 = sub_1A9CE6258();
    v97 = v30;
    sub_1A9CE888C();
    *v27 = v30;
    v31 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32 = v85;
    v89 = v31;
    v31(v16, v85);
    *(_WORD *)(v26 + 22) = 2114;
    v21 = v96;
    v97 = (uint64_t)v96;
    v33 = v96;
    a1 = v94;
    sub_1A9CE888C();
    v27[1] = v21;

    a3 = v93;
    _os_log_impl(&dword_1A9B87000, v22, v23, "[%{public}s] generating editable override occcurence for current date: %{public}@ and schedule: %{public}@", (uint8_t *)v26, 0x20u);
    sub_1A9BE2564(0, (unint64_t *)&qword_1ED2627B0, (unint64_t *)&qword_1ED2627A0);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v27, -1, -1);
    v34 = v86;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v34, -1, -1);
    MEMORY[0x1AF420344](v26, -1, -1);

    v35 = v32;
  }
  else
  {
    v89 = *(void (**)(char *, uint64_t))(v9 + 8);
    v89(v16, v8);

    v35 = v8;
  }
  v36 = SleepScheduleProviding.sleepScheduleModel.getter(a3, (uint64_t)v90);
  v37 = (void *)sub_1A9CE6258();
  v38 = objc_msgSend(v36, sel_upcomingResolvedOccurrenceAfterDate_, v37);

  v39 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v88)(v92, a1, v35);
  v40 = v38;
  v41 = sub_1A9CE6978();
  v42 = sub_1A9CE867C();
  if (os_log_type_enabled(v41, v42))
  {
    v88 = v41;
    v90 = v36;
    v43 = swift_slowAlloc();
    v85 = swift_slowAlloc();
    v86 = swift_slowAlloc();
    v98[0] = v86;
    *(_DWORD *)v43 = 136446722;
    v44 = sub_1A9CE8D48();
    v97 = sub_1A9B91D6C(v44, v45, v98);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2114;
    v46 = sub_1A9CE6258();
    v97 = v46;
    v47 = (_QWORD *)v85;
    sub_1A9CE888C();
    *v47 = v46;
    v89(v39, v35);
    *(_WORD *)(v43 + 22) = 2114;
    if (v40)
    {
      v97 = (uint64_t)v40;
      v48 = v40;
      sub_1A9CE888C();
    }
    else
    {
      v97 = 0;
      sub_1A9CE888C();
      v38 = 0;
    }
    v47[1] = v38;

    v49 = v88;
    _os_log_impl(&dword_1A9B87000, v88, v42, "[%{public}s] upcoming resolved occurrence after date: %{public}@ is: %{public}@", (uint8_t *)v43, 0x20u);
    sub_1A9BE2564(0, (unint64_t *)&qword_1ED2627B0, (unint64_t *)&qword_1ED2627A0);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v47, -1, -1);
    v50 = v86;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v50, -1, -1);
    MEMORY[0x1AF420344](v43, -1, -1);

    v21 = v96;
    v36 = v90;
    if (!v40)
      goto LABEL_21;
  }
  else
  {
    v89(v39, v35);

    if (!v40)
      goto LABEL_21;
  }
  v51 = objc_msgSend(v40, sel_occurrence);
  if (v51)
  {
    v52 = v51;
    if (objc_msgSend(v51, sel_isSingleDayOverride))
    {
      v90 = v36;
      v53 = sub_1A9CE6978();
      v54 = sub_1A9CE867C();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc();
        v56 = swift_slowAlloc();
        v98[0] = v56;
        *(_DWORD *)v55 = 136446210;
        v57 = sub_1A9CE8D48();
        v97 = sub_1A9B91D6C(v57, v58, v98);
        v21 = v96;
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v53, v54, "[%{public}s] upcoming resolved occurrence is single day override, returning", v55, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v56, -1, -1);
        MEMORY[0x1AF420344](v55, -1, -1);
      }

      objc_msgSend(v52, sel_mutableCopy);
      sub_1A9CE88EC();

      swift_unknownObjectRelease();
      sub_1A9B94A18(0, (unint64_t *)&unk_1EEB4A1D0);
      swift_dynamicCast();
      return (id)v97;
    }

  }
LABEL_21:
  v60 = sub_1A9CE6978();
  v61 = sub_1A9CE867C();
  v62 = os_log_type_enabled(v60, v61);
  v91 = v40;
  if (v62)
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v98[0] = v64;
    *(_DWORD *)v63 = 136446210;
    v65 = sub_1A9CE8D48();
    v97 = sub_1A9B91D6C(v65, v66, v98);
    sub_1A9CE888C();
    v21 = v96;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v60, v61, "[%{public}s] upcoming resolved occurrence is not a single day override, generating a new one", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v64, -1, -1);
    MEMORY[0x1AF420344](v63, -1, -1);
  }

  v67 = (void *)sub_1A9CE6258();
  v68 = (void *)sub_1A9CE63CC();
  v69 = objc_msgSend(v36, sel_overrideOccurrenceGenerationResultForCurrentDate_gregorianCalendar_schedule_, v67, v68, v21);

  v70 = v69;
  v71 = sub_1A9CE6978();
  v72 = sub_1A9CE867C();
  v73 = &off_1E55E8000;
  if (os_log_type_enabled(v71, v72))
  {
    v74 = swift_slowAlloc();
    v75 = (_QWORD *)swift_slowAlloc();
    v76 = swift_slowAlloc();
    v98[0] = v76;
    *(_DWORD *)v74 = 136446722;
    v77 = sub_1A9CE8D48();
    v97 = sub_1A9B91D6C(v77, v78, v98);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v74 + 12) = 2114;
    v79 = objc_msgSend(v70, sel_overrideOccurrence);
    v97 = (uint64_t)v79;
    sub_1A9CE888C();
    *v75 = v79;

    *(_WORD *)(v74 + 22) = 1024;
    v80 = objc_msgSend(v70, sel_wasGeneratedFromTemplate);

    LODWORD(v97) = v80;
    sub_1A9CE888C();

    _os_log_impl(&dword_1A9B87000, v71, v72, "[%{public}s] generated override %{public}@ (from template: %{BOOL}d)", (uint8_t *)v74, 0x1Cu);
    sub_1A9BE2564(0, (unint64_t *)&qword_1ED2627B0, (unint64_t *)&qword_1ED2627A0);
    swift_arrayDestroy();
    v81 = v75;
    v21 = v96;
    MEMORY[0x1AF420344](v81, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v76, -1, -1);
    v82 = v74;
    v73 = &off_1E55E8000;
    MEMORY[0x1AF420344](v82, -1, -1);

  }
  else
  {

  }
  v83 = v91;
  v59 = objc_msgSend(v70, v73[408]);
  objc_msgSend(v70, sel_wasGeneratedFromTemplate);

  return v59;
}

id SleepScheduleProvider.sleepStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t SleepScheduleProvider.currentDateProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t SleepScheduleProvider.currentSchedulePublisher.getter()
{
  return swift_retain();
}

uint64_t sub_1A9C8BCA8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A9C8BD10()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C8BD58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A9C8BDA8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SleepScheduleProvider.currentGoalPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.currentWindDownDurationPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.currentScheduleEnabledPublisher.getter()
{
  return swift_retain();
}

id SleepScheduleProvider.init(sleepStore:schedule:currentDateProvider:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  objc_super v20;
  uint64_t v21;
  char v22;

  v9 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentSchedulePublisher;
  sub_1A9C8C910(0, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (unint64_t *)&qword_1ED262900);
  swift_allocObject();
  v10 = v4;
  *(_QWORD *)&v4[v9] = sub_1A9CE6DF8();
  v11 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher;
  sub_1A9C8C910(0, &qword_1ED2628E0, &qword_1ED262940, (unint64_t *)&unk_1ED262930);
  swift_allocObject();
  *(_QWORD *)&v10[v11] = sub_1A9CE6DF8();
  v12 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentGoalPublisher;
  sub_1A9B92D08();
  swift_allocObject();
  *(_QWORD *)&v10[v12] = sub_1A9CE6DF8();
  v13 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentWindDownDurationPublisher;
  v21 = 0;
  v22 = 1;
  swift_allocObject();
  *(_QWORD *)&v10[v13] = sub_1A9CE6DF8();
  v14 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentScheduleEnabledPublisher;
  LOBYTE(v21) = 1;
  sub_1A9BBD7C4();
  swift_allocObject();
  *(_QWORD *)&v10[v14] = sub_1A9CE6DF8();
  v15 = OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_eventRecordPublisher;
  sub_1A9C8C978();
  swift_allocObject();
  *(_QWORD *)&v10[v15] = sub_1A9CE6DB0();
  *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_query] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore] = a1;
  v16 = &v10[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v17 = a1;
  swift_retain();

  v20.receiver = v10;
  v20.super_class = (Class)type metadata accessor for SleepScheduleProvider();
  v18 = objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend(v17, sel_addObserver_, v18);
  sub_1A9C8C1C4(a2);

  swift_release();
  return v18;
}

id SleepScheduleProvider.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore], sel_removeObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C8C1C4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char v21;
  id v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t result;
  void *v38;
  uint64_t v39;
  id v40;
  id v41[3];

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1A9CE62E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1ED262888);
  v10 = sub_1A9CE6978();
  v11 = sub_1A9CE867C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (void *)swift_slowAlloc();
    v39 = v4;
    v14 = v13;
    v41[0] = v13;
    v38 = a1;
    *(_DWORD *)v12 = 136446210;
    v15 = sub_1A9CE8D48();
    v40 = (id)sub_1A9B91D6C(v15, v16, (uint64_t *)v41);
    a1 = v38;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Updating all publishers!", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    v4 = v39;
    MEMORY[0x1AF420344](v17, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  sub_1A9CE6DD4();
  v18 = v41[0];
  if (v41[0])
  {
    if (a1)
    {
      sub_1A9B94A18(0, (unint64_t *)&qword_1ED262900);
      v19 = v18;
      v20 = a1;
      v21 = sub_1A9CE8814();

      if ((v21 & 1) != 0)
        goto LABEL_14;
LABEL_13:
      v41[0] = a1;
      v22 = v20;
      sub_1A9CE6DE0();
      goto LABEL_14;
    }

LABEL_12:
    v20 = a1;
    goto LABEL_13;
  }
  if (a1)
    goto LABEL_12;
LABEL_14:
  swift_beginAccess();
  v23 = *(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  v24 = swift_retain();
  v23(v24);
  v25 = sub_1A9C8A418();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1A9CE6DD4();
  v26 = v40;
  if (v40)
  {
    if (v25)
    {
      sub_1A9B94A18(0, (unint64_t *)&unk_1ED262930);
      v27 = v26;
      v28 = v25;
      v29 = sub_1A9CE8814();

      if ((v29 & 1) != 0)
        goto LABEL_23;
      goto LABEL_22;
    }

  }
  else if (!v25)
  {
    goto LABEL_24;
  }
  v28 = v25;
LABEL_22:
  v40 = v25;
  v28 = v28;
  sub_1A9CE6DE0();
LABEL_23:

LABEL_24:
  swift_release();
  if (a1 && (objc_msgSend(a1, sel_sleepDurationGoal), v30 > 0.0))
  {
    objc_msgSend(a1, sel_sleepDurationGoal);
    v31 = 0;
    v33 = v32;
  }
  else
  {
    v33 = 0;
    v31 = 1;
  }
  sub_1A9C8A054(v33, v31);
  if (a1)
  {
    objc_msgSend(a1, sel_windDownTime);
    v35 = v34;
  }
  else
  {
    v35 = 0;
  }
  sub_1A9C8A054(v35, a1 == 0);
  if (!a1)
  {
    result = sub_1A9CE6DD4();
    if ((v40 & 1) != 0)
      return result;
    LOBYTE(v36) = 1;
    goto LABEL_36;
  }
  v36 = objc_msgSend(a1, sel_isEnabled);
  result = sub_1A9CE6DD4();
  if (v36 != v40)
  {
LABEL_36:
    LOBYTE(v40) = v36;
    return sub_1A9CE6DE0();
  }
  return result;
}

id SleepScheduleProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepScheduleProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1A9C8C6A0()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_sleepStore);
}

uint64_t sub_1A9C8C6B4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
  swift_retain();
  return v1;
}

uint64_t sub_1A9C8C6F0()
{
  return swift_retain();
}

uint64_t sub_1A9C8C704()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9C8C750()
{
  return swift_retain();
}

uint64_t sub_1A9C8C764()
{
  return swift_retain();
}

uint64_t sub_1A9C8C778()
{
  return swift_retain();
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepScheduleDidChange:)(uint64_t a1, void *a2)
{
  return sub_1A9C8C9EC(a2);
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepEventRecordDidChange:)(uint64_t a1, void *a2)
{
  return sub_1A9C8CDB4(a2, "[%{public}s] Observed sleep event record change to %{public}s");
}

uint64_t SleepScheduleProvider.sleepStore(_:sleepEventDidOccur:)(uint64_t a1, void *a2)
{
  return sub_1A9C8CDB4(a2, "[%{public}s] Observed sleep event %{public}s");
}

void sub_1A9C8C910(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9BE2564(255, a3, a4);
    v5 = sub_1A9CE6DEC();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1A9C8C978()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2628A8)
  {
    sub_1A9B94A18(255, (unint64_t *)&unk_1ED262920);
    v0 = sub_1A9CE6DBC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2628A8);
  }
}

uint64_t sub_1A9C8C9EC(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  swift_getObjectType();
  v3 = sub_1A9CE80A0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1ED2628A0 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
  v9 = a1;
  v10 = v1;
  v11 = v9;
  v12 = v10;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  if (os_log_type_enabled(v13, v14))
  {
    v29 = v3;
    v31 = v4;
    v15 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v34 = v30;
    *(_DWORD *)v15 = 136446722;
    v16 = sub_1A9CE8D48();
    v32 = a1;
    v33 = sub_1A9B91D6C(v16, v17, &v34);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    if (v32)
    {
      v33 = (uint64_t)v11;
      sub_1A9B94A18(0, (unint64_t *)&qword_1ED262900);
      v18 = v11;
      v19 = sub_1A9CE82F8();
      v21 = v20;
    }
    else
    {
      v21 = 0xE300000000000000;
      v19 = 7104878;
    }
    v33 = sub_1A9B91D6C(v19, v21, &v34);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    v22 = v12;
    swift_retain();
    sub_1A9CE6DD4();

    swift_release();
    if (v33)
    {
      sub_1A9B94A18(0, (unint64_t *)&qword_1ED262900);
      v23 = sub_1A9CE82F8();
      v25 = v24;
    }
    else
    {
      v25 = 0xE300000000000000;
      v23 = 7104878;
    }
    v3 = v29;
    v33 = sub_1A9B91D6C(v23, v25, &v34);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] Observed sleep schedule change to %{public}s from %{public}s", (uint8_t *)v15, 0x20u);
    v26 = v30;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v26, -1, -1);
    MEMORY[0x1AF420344](v15, -1, -1);

    v4 = v31;
    a1 = v32;
  }
  else
  {

  }
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v7 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0DEF740], v3);
  v27 = sub_1A9CE80AC();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
  if ((v27 & 1) != 0)
    return sub_1A9C8C1C4(a1);
  __break(1u);
  return result;
}

uint64_t sub_1A9C8CDB4(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  void (*v35)(uint64_t);
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52[3];

  v4 = v2;
  swift_getObjectType();
  v6 = sub_1A9CE62E8();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE80A0();
  v50 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1ED2628A0 != -1)
    swift_once();
  v14 = sub_1A9CE6990();
  __swift_project_value_buffer(v14, (uint64_t)qword_1ED262888);
  v15 = a1;
  v16 = sub_1A9CE6978();
  v17 = sub_1A9CE867C();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v47 = v4;
    v19 = v18;
    v44 = swift_slowAlloc();
    v52[0] = v44;
    *(_DWORD *)v19 = 136446466;
    v46 = v10;
    v20 = sub_1A9CE8D48();
    v51 = (id)sub_1A9B91D6C(v20, v21, v52);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    v43 = v19 + 14;
    v22 = v15;
    v23 = objc_msgSend(v22, sel_description);
    v24 = sub_1A9CE82E0();
    v45 = v9;
    v25 = a2;
    v26 = v24;
    v28 = v27;

    v51 = (id)sub_1A9B91D6C(v26, v28, v52);
    sub_1A9CE888C();

    v10 = v46;
    swift_bridgeObjectRelease();
    v29 = v25;
    v9 = v45;
    _os_log_impl(&dword_1A9B87000, v16, v17, v29, (uint8_t *)v19, 0x16u);
    v30 = v44;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v30, -1, -1);
    v31 = v19;
    v4 = v47;
    MEMORY[0x1AF420344](v31, -1, -1);

  }
  else
  {

  }
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v13 = sub_1A9CE870C();
  v32 = v50;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v50 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v33 = sub_1A9CE80AC();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 8))(v13, v10);
  if ((v33 & 1) != 0)
  {
    swift_beginAccess();
    v35 = *(void (**)(uint64_t))(v4
                                         + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_currentDateProvider);
    v36 = swift_retain();
    v35(v36);
    v37 = sub_1A9C8A418();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
    sub_1A9CE6DD4();
    v38 = v51;
    if (v51)
    {
      if (v37)
      {
        sub_1A9B94A18(0, (unint64_t *)&unk_1ED262930);
        v39 = v38;
        v40 = v37;
        v41 = sub_1A9CE8814();

        if ((v41 & 1) != 0)
        {

          return swift_release();
        }
LABEL_15:
        v51 = v37;
        v42 = v40;
        sub_1A9CE6DE0();

        return swift_release();
      }

    }
    else if (!v37)
    {
      return swift_release();
    }
    v40 = v37;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C8D1D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI21SleepScheduleProvider_nextOccurrencePublisher);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t dispatch thunk of SleepScheduleProviding.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentDateProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentSchedulePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepScheduleProviding.nextOccurrencePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentGoalPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentWindDownDurationPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepScheduleProviding.currentScheduleEnabledPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t method lookup function for SleepScheduleProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepScheduleProvider.nextOccurrencePublisher.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepScheduleProvider.__allocating_init(sleepStore:schedule:currentDateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingReceiptStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1A9CE77A0();
  v15 = sub_1A9CE77E8();
  swift_release();
  if (qword_1ED262D40 != -1)
    swift_once();
  v14 = qword_1ED262D68;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7818();
  v13 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v2 = qword_1EEB45958;
  v3 = qword_1EEB42EB8;
  swift_retain();
  if (v3 != -1)
    swift_once();
  v12 = sub_1A9CE77E8();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v4 = qword_1EEB45950;
  swift_retain();
  v5 = sub_1A9CE77E8();
  v6 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE7860();
  sub_1A9CE7824();
  v7 = sub_1A9CE786C();
  swift_release();
  v8 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v9 = sub_1A9CE786C();
  swift_release();
  v10 = qword_1EEB45958;
  *(_QWORD *)a1 = v15;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v14;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = v6;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v7;
  *(_BYTE *)(a1 + 136) = 2;
  *(_QWORD *)(a1 + 144) = v8;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = v9;
  *(_BYTE *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 176) = v10;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 8;
  return swift_retain();
}

void ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v45;
  id v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  id v60;
  id v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v65 = a3;
  v64 = a2;
  v66 = a5;
  v7 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v60 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v67 = (uint64_t)&v60 - v22;
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v11);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v28);
  v30 = (char *)&v60 - v29;
  v31 = a4[11];
  v78 = a4[10];
  v79 = v31;
  v80 = *((_QWORD *)a4 + 24);
  v32 = a4[7];
  v74 = a4[6];
  v75 = v32;
  v33 = a4[9];
  v76 = a4[8];
  v77 = v33;
  v34 = a4[3];
  v70 = a4[2];
  v71 = v34;
  v35 = a4[5];
  v72 = a4[4];
  v73 = v35;
  v36 = *a4;
  v69 = a4[1];
  v68 = v36;
  if (a1)
  {
    v37 = objc_msgSend(a1, sel_bedtimeComponents);
    sub_1A9CE6024();

    v38 = sub_1A9CE60C0();
    v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
    v39(v30, 0, 1, v38);
    v40 = objc_msgSend(a1, sel_wakeUpComponents);
    sub_1A9CE6024();

    v39(v27, 0, 1, v38);
    v60 = objc_msgSend(a1, sel_weekdays);
  }
  else
  {
    v41 = sub_1A9CE60C0();
    v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
    v42(v30, 1, 1, v41);
    v42(v27, 1, 1, v41);
    v60 = 0;
  }
  v43 = sub_1A9CE62E8();
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v44(v67, 1, 1, v43);
  v62 = v20;
  v44((uint64_t)v20, 1, 1, v43);
  v63 = v16;
  v44((uint64_t)v16, 1, 1, v43);
  v61 = a1;
  if (a1)
  {
    v45 = a1;
    v46 = objc_msgSend(v45, sel_alarmConfiguration);
    v47 = objc_msgSend(v46, sel_isEnabled);

    if (v47)
      v48 = 0;
    else
      v48 = 2;
  }
  else
  {
    v48 = 0;
  }
  v49 = (uint64_t)&v10[v7[11]];
  v44(v49, 1, 1, v43);
  v50 = (uint64_t)&v10[v7[12]];
  v44(v50, 1, 1, v43);
  v51 = (uint64_t)&v10[v7[13]];
  v44(v51, 1, 1, v43);
  sub_1A9BB70A0((uint64_t)v30, (uint64_t)v10);
  sub_1A9BB70A0((uint64_t)v27, (uint64_t)&v10[v7[5]]);
  v52 = &v10[v7[6]];
  *(_QWORD *)v52 = v64;
  v52[8] = v65 & 1;
  *(_QWORD *)&v10[v7[7]] = v60;
  sub_1A9C141CC(v67, v51);
  sub_1A9C141CC((uint64_t)v62, v50);
  sub_1A9C141CC((uint64_t)v63, v49);
  *(_QWORD *)&v10[v7[14]] = 0;
  v10[v7[8]] = v48;
  v10[v7[9]] = 0;
  v53 = &v10[v7[10]];
  v54 = v79;
  *((_OWORD *)v53 + 10) = v78;
  *((_OWORD *)v53 + 11) = v54;
  *((_QWORD *)v53 + 24) = v80;
  v55 = v75;
  *((_OWORD *)v53 + 6) = v74;
  *((_OWORD *)v53 + 7) = v55;
  v56 = v77;
  *((_OWORD *)v53 + 8) = v76;
  *((_OWORD *)v53 + 9) = v56;
  v57 = v71;
  *((_OWORD *)v53 + 2) = v70;
  *((_OWORD *)v53 + 3) = v57;
  v58 = v73;
  *((_OWORD *)v53 + 4) = v72;
  *((_OWORD *)v53 + 5) = v58;
  v59 = v69;
  *(_OWORD *)v53 = v68;
  *((_OWORD *)v53 + 1) = v59;
  sub_1A9C92F78((uint64_t)v10, v66);

}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C92A38((void (*)(void))MEMORY[0x1E0CDD5E0], a1);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFocusFullScheduleStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1EEB42EE8 != -1)
    swift_once();
  v2 = qword_1EEB49828;
  v3 = qword_1EEB42D00;
  swift_retain();
  if (v3 != -1)
    swift_once();
  v4 = qword_1EEB45950;
  swift_retain();
  v5 = sub_1A9CE78C0();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v6 = qword_1EEB45958;
  v7 = qword_1EEB49828;
  v8 = qword_1EEB45950;
  v9 = qword_1EEB42EF0;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  v10 = v6;
  if (v9 != -1)
  {
    swift_once();
    v10 = qword_1EEB45958;
  }
  v11 = qword_1EEB49830;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 80) = v8;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = v6;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v7;
  *(_BYTE *)(a1 + 136) = 2;
  *(_QWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = v11;
  *(_BYTE *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 176) = v10;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 4;
  swift_retain();
  return swift_retain();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFocusNextOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_1A9CE7854();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v3 = qword_1EEB45950;
  swift_retain();
  v4 = sub_1A9CE78C0();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v5 = qword_1EEB45958;
  v6 = qword_1EEB42EE8;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = qword_1EEB49828;
  v8 = qword_1EEB42CF8;
  swift_retain();
  v9 = v7;
  if (v8 != -1)
  {
    swift_once();
    v9 = qword_1EEB49828;
  }
  v10 = qword_1EEB45948;
  v11 = qword_1EEB42EF0;
  swift_retain_n();
  swift_retain_n();
  if (v11 != -1)
    swift_once();
  v12 = qword_1EEB49830;
  v13 = qword_1EEB45950;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = 256;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 80) = v10;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = v10;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 136) = 2;
  *(_QWORD *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = v12;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = v13;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 7;
  swift_retain();
  return swift_retain();
}

void ScheduleOccurrenceViewModel.init(resolvedOccurrence:relativeWeekdayFormatter:viewStyle:)(void *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  char v62;
  id v63;
  unsigned int v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v84 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v82 = (uint64_t)&v77 - v19;
  MEMORY[0x1E0C80A78](v18, v20);
  v83 = (uint64_t)&v77 - v21;
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v12);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v27);
  v29 = (char *)&v77 - v28;
  v30 = a3[11];
  v95 = a3[10];
  v96 = v30;
  v97 = *((_QWORD *)a3 + 24);
  v31 = a3[7];
  v91 = a3[6];
  v92 = v31;
  v32 = a3[9];
  v93 = a3[8];
  v94 = v32;
  v33 = a3[3];
  v87 = a3[2];
  v88 = v33;
  v34 = a3[5];
  v89 = a3[4];
  v90 = v34;
  v35 = *a3;
  v86 = a3[1];
  v85 = v35;
  v81 = a4;
  v80 = a2;
  v79 = v26;
  v78 = (uint64_t)&v77 - v28;
  if (a1)
  {
    v36 = objc_msgSend(a1, sel_occurrence);
    v37 = objc_msgSend(v36, sel_bedtimeComponents);

    sub_1A9CE6024();
    v38 = sub_1A9CE60C0();
    v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
    v39(v29, 0, 1, v38);
    v40 = objc_msgSend(a1, sel_occurrence);
    v41 = objc_msgSend(v40, sel_wakeUpComponents);

    sub_1A9CE6024();
    v39(v26, 0, 1, v38);
    v42 = objc_msgSend(a1, sel_windDownEvent);
    if (v42)
    {
      v43 = v42;
      v44 = objc_msgSend(v42, sel_dueDate);

      v45 = v83;
      sub_1A9CE62C4();

      v46 = sub_1A9CE62E8();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
      goto LABEL_6;
    }
  }
  else
  {
    v47 = sub_1A9CE60C0();
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
    v48(v29, 1, 1, v47);
    v48(v26, 1, 1, v47);
  }
  v49 = sub_1A9CE62E8();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
  v50(v83, 1, 1, v49);
  if (!a1)
  {
    v50(v82, 1, 1, v49);
    v50(v84, 1, 1, v49);
LABEL_16:
    v62 = 0;
    goto LABEL_17;
  }
LABEL_6:
  v51 = objc_msgSend(a1, sel_bedtimeEvent);
  if (v51)
  {
    v52 = v51;
    v53 = objc_msgSend(v51, sel_dueDate);

    v54 = v82;
    sub_1A9CE62C4();

    v49 = sub_1A9CE62E8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v54, 0, 1, v49);
  }
  else
  {
    v49 = sub_1A9CE62E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v82, 1, 1, v49);
  }
  v55 = objc_msgSend(a1, sel_wakeUpEvent);
  v56 = objc_msgSend(v55, sel_dueDate);

  v57 = v84;
  sub_1A9CE62C4();

  sub_1A9CE62E8();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v57, 0, 1, v49);
  v58 = objc_msgSend(a1, sel_wakeUpEvent);
  v59 = objc_msgSend(v58, sel_type);

  v60 = objc_msgSend(a1, sel_occurrence);
  if (!v60)
    goto LABEL_16;
  v61 = v60;
  if (v59 == (id)1)
  {

    v62 = 1;
  }
  else
  {
    v63 = objc_msgSend(v60, sel_alarmConfiguration);
    v64 = objc_msgSend(v63, sel_isEnabled);

    if (v64)
      v62 = 0;
    else
      v62 = 2;
  }
LABEL_17:
  v65 = (uint64_t)&v11[v8[11]];
  sub_1A9CE62E8();
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
  v66(v65, 1, 1, v49);
  v67 = (uint64_t)&v11[v8[12]];
  v66(v67, 1, 1, v49);
  v68 = (uint64_t)&v11[v8[13]];
  v66(v68, 1, 1, v49);
  sub_1A9BB70A0(v78, (uint64_t)v11);
  sub_1A9BB70A0((uint64_t)v79, (uint64_t)&v11[v8[5]]);
  v69 = &v11[v8[6]];
  *(_QWORD *)v69 = 0;
  v69[8] = 1;
  *(_QWORD *)&v11[v8[7]] = 0;
  sub_1A9C141CC(v83, v68);
  sub_1A9C141CC(v82, v67);
  sub_1A9C141CC(v84, v65);
  *(_QWORD *)&v11[v8[14]] = v80;
  v11[v8[8]] = v62;
  v11[v8[9]] = 1;
  v70 = &v11[v8[10]];
  v71 = v96;
  *((_OWORD *)v70 + 10) = v95;
  *((_OWORD *)v70 + 11) = v71;
  *((_QWORD *)v70 + 24) = v97;
  v72 = v92;
  *((_OWORD *)v70 + 6) = v91;
  *((_OWORD *)v70 + 7) = v72;
  v73 = v94;
  *((_OWORD *)v70 + 8) = v93;
  *((_OWORD *)v70 + 9) = v73;
  v74 = v88;
  *((_OWORD *)v70 + 2) = v87;
  *((_OWORD *)v70 + 3) = v74;
  v75 = v90;
  *((_OWORD *)v70 + 4) = v89;
  *((_OWORD *)v70 + 5) = v75;
  v76 = v86;
  *(_OWORD *)v70 = v85;
  *((_OWORD *)v70 + 1) = v76;
  sub_1A9C92F78((uint64_t)v11, v81);

}

uint64_t ScheduleOccurrenceViewModel.AlarmState.hash(into:)()
{
  return sub_1A9CE8C58();
}

BOOL static ScheduleOccurrenceViewModel.AlarmState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ScheduleOccurrenceViewModel.AlarmState.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t ScheduleOccurrenceViewModel.bedtimeComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C38720(v1, a1, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
}

uint64_t ScheduleOccurrenceViewModel.wakeUpComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ScheduleOccurrenceViewModel();
  return sub_1A9C38720(v1 + *(int *)(v3 + 20), a1, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
}

uint64_t ScheduleOccurrenceViewModel.windDownTimeInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 24));
}

uint64_t ScheduleOccurrenceViewModel.weekdays.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 28));
}

uint64_t ScheduleOccurrenceViewModel.alarmState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ScheduleOccurrenceViewModel();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ScheduleOccurrenceViewModel.isNextOccurrence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 36));
}

uint64_t ScheduleOccurrenceViewModel.viewStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  v4 = *(_OWORD *)(v3 + 144);
  v5 = *(_OWORD *)(v3 + 176);
  v31 = *(_OWORD *)(v3 + 160);
  v32 = v5;
  v6 = *(_OWORD *)(v3 + 80);
  v7 = *(_OWORD *)(v3 + 112);
  v27 = *(_OWORD *)(v3 + 96);
  v8 = v27;
  v28 = v7;
  v9 = *(_OWORD *)(v3 + 112);
  v10 = *(_OWORD *)(v3 + 144);
  v29 = *(_OWORD *)(v3 + 128);
  v11 = v29;
  v30 = v10;
  v12 = *(_OWORD *)(v3 + 16);
  v13 = *(_OWORD *)(v3 + 48);
  v23 = *(_OWORD *)(v3 + 32);
  v14 = v23;
  v24 = v13;
  v15 = *(_OWORD *)(v3 + 48);
  v16 = *(_OWORD *)(v3 + 80);
  v25 = *(_OWORD *)(v3 + 64);
  v17 = v25;
  v26 = v16;
  v18 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v19 = v22[0];
  v22[1] = v18;
  v20 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(a1 + 160) = v31;
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 80) = v6;
  v33 = *(_QWORD *)(v3 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(v3 + 192);
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v12;
  return sub_1A9C94D04((uint64_t)v22);
}

uint64_t sub_1A9C8E6E4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - v8;
  v10 = sub_1A9CE62E8();
  v11 = *(_QWORD **)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27 - v17;
  v19 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v0 + v19[13], (uint64_t)v9, &qword_1ED2625E0, v1);
  v20 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v20(v9, 1, v10) == 1)
  {
    v5 = v9;
  }
  else
  {
    v21 = (void (*)(char *, char *, uint64_t))v11[4];
    v21(v18, v9, v10);
    sub_1A9C38720(v0 + v19[12], (uint64_t)v5, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v20(v5, 1, v10) != 1)
    {
      v21(v14, v5, v10);
      sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v24 = sub_1A9CE82A4();
      v25 = (void (*)(char *, uint64_t))v11[1];
      v25(v14, v10);
      v25(v18, v10);
      v23 = v24 ^ 1;
      return v23 & 1;
    }
    ((void (*)(char *, uint64_t))v11[1])(v18, v10);
  }
  sub_1A9B93BDC((uint64_t)v5, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v22 = v0 + v19[6];
  v23 = (*(_BYTE *)(v22 + 8) & 1) == 0 && *(double *)v22 > 0.0;
  return v23 & 1;
}

uint64_t sub_1A9C8E934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(unint64_t, _QWORD, uint64_t);
  uint64_t v77;
  char *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t result;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v2 = v1;
  v110 = a1;
  v3 = sub_1A9CE642C();
  v102 = *(_QWORD *)(v3 - 8);
  v103 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v97 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v100 = (uint64_t)&v95 - v9;
  v10 = sub_1A9CE60C0();
  v111 = *(_QWORD *)(v10 - 8);
  v112 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v99 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A9CE6444();
  v104 = *(_QWORD *)(v13 - 8);
  v105 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v109 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v6);
  MEMORY[0x1E0C80A78](v17, v18);
  v96 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v98 = (char *)&v95 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v107 = (uint64_t)&v95 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v95 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v95 - v32;
  v34 = sub_1A9CE62E8();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v36);
  v95 = (char *)&v95 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v101 = (char *)&v95 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v95 - v43;
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v95 - v47;
  v49 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v106 = v2 + v49[13];
  sub_1A9C38720(v106, (uint64_t)v33, &qword_1ED2625E0, v16);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v51 = v50(v33, 1, v34);
  v108 = v50;
  if (v51 == 1)
  {
    v52 = v34;
    v53 = v2;
    v29 = v33;
  }
  else
  {
    v54 = v35;
    v55 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v55(v48, v33, v34);
    v56 = v34;
    v53 = v2;
    sub_1A9C38720(v2 + v49[12], (uint64_t)v29, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v50(v29, 1, v56) != 1)
    {
      v55(v44, v29, v56);
      sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v68 = sub_1A9CE82A4();
      v69 = *(void (**)(char *, uint64_t))(v54 + 8);
      v69(v44, v56);
      v52 = v56;
      v69(v48, v56);
      v61 = v112;
      v35 = v54;
      v62 = v53;
      if ((v68 & 1) == 0)
        goto LABEL_8;
LABEL_12:
      v58 = 1;
      v59 = v110;
      v60 = v111;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, v58, 1, v61);
    }
    v52 = v56;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v48, v56);
    v35 = v54;
  }
  sub_1A9B93BDC((uint64_t)v29, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v57 = v53 + v49[6];
  if ((*(_BYTE *)(v57 + 8) & 1) != 0)
  {
    v58 = 1;
    v59 = v110;
    v60 = v111;
    v61 = v112;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, v58, 1, v61);
  }
  v62 = v53;
  v61 = v112;
  if (*(double *)v57 <= 0.0)
    goto LABEL_12;
LABEL_8:
  v63 = v109;
  sub_1A9CE6420();
  v64 = v107;
  sub_1A9C38720(v106, v107, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v65 = v52;
  v66 = v108;
  if (v108((char *)v64, 1, v52) != 1)
  {
    v70 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v101, v64, v52);
    v60 = v111;
    goto LABEL_14;
  }
  sub_1A9B93BDC(v64, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v67 = v62 + v49[6];
  v60 = v111;
  if ((*(_BYTE *)(v67 + 8) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v63, v105);
LABEL_26:
    v58 = 1;
    v59 = v110;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, v58, 1, v61);
  }
  v79 = *(double *)v67;
  v80 = v62;
  v81 = v100;
  sub_1A9C38720(v80, v100, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v81, 1, v61) == 1)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v63, v105);
    v82 = &qword_1EEB44248;
    v83 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    v84 = v81;
LABEL_25:
    sub_1A9B93BDC(v84, v82, v83);
    goto LABEL_26;
  }
  v85 = v66;
  v86 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v99, v81, v61);
  v87 = v98;
  sub_1A9CE63E4();
  if (v85(v87, 1, v65) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v86, v61);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v63, v105);
    v82 = &qword_1ED2625E0;
    v83 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v84 = (uint64_t)v87;
    goto LABEL_25;
  }
  v88 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v89 = v95;
  v88(v95, v87, v65);
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v102 + 104))(v97, *MEMORY[0x1E0CB1188], v103);
  if ((~*(_QWORD *)&v79 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  v91 = v109;
  v70 = v101;
  if (v79 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v79 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!__OFSUB__(0, (uint64_t)v79))
  {
    v92 = v97;
    sub_1A9CE63FC();
    v93 = v92;
    v94 = v96;
    (*(void (**)(char *, uint64_t))(v102 + 8))(v93, v103);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v89, v65);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v99, v61);
    if (v108(v94, 1, v65) == 1)
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v91, v105);
      v82 = &qword_1ED2625E0;
      v83 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
      v84 = (uint64_t)v94;
      goto LABEL_25;
    }
    v88(v70, v94, v65);
LABEL_14:
    sub_1A9B92F34(0, &qword_1EEB47BF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v71 = v102;
    v72 = *(_QWORD *)(v102 + 72);
    v73 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
    v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_1A9CEB530;
    v75 = v74 + v73;
    v76 = *(void (**)(unint64_t, _QWORD, uint64_t))(v71 + 104);
    v77 = v103;
    v76(v75, *MEMORY[0x1E0CB1140], v103);
    v76(v75 + v72, *MEMORY[0x1E0CB1178], v77);
    sub_1A9C4B104(v74);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v78 = v109;
    v59 = v110;
    sub_1A9CE63B4();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v70, v65);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v78, v105);
    v58 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, v58, 1, v61);
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t ScheduleOccurrenceViewModel.localizedWindDownString.getter()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  char *v30;
  uint64_t v31;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v30 - v3;
  v31 = sub_1A9CE62E8();
  v5 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v6);
  v30 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v30 - v10;
  v12 = sub_1A9CE60C0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A9CE6444();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6420();
  sub_1A9C8E934((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v22 = &qword_1EEB44248;
    v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    v24 = (uint64_t)v11;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
    sub_1A9CE63E4();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v31) != 1)
    {
      (*(void (**)(void))(v5 + 32))();
      v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
      objc_msgSend(v26, sel_setDateStyle_, 0);
      objc_msgSend(v26, sel_setTimeStyle_, 1);
      v27 = (void *)sub_1A9CE6258();
      v28 = objc_msgSend(v26, sel_stringFromDate_, v27);

      v25 = sub_1A9CE82E0();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      return v25;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v22 = &qword_1ED2625E0;
    v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v24 = (uint64_t)v4;
  }
  sub_1A9B93BDC(v24, v22, v23);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedWindDownDayString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  int v18;
  BOOL v19;
  _QWORD v21[2];

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v21 - v5;
  v7 = sub_1A9CE62E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v1 + v12[13], (uint64_t)v6, &qword_1ED2625E0, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1A9B93BDC((uint64_t)v6, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      v15 = (void *)sub_1A9CE6258();
      v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      v13 = sub_1A9CE82E0();
      v14 = v17;

    }
    else
    {
      v13 = 0;
    }
    v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0] = v13;
      v21[1] = v14;
      sub_1A9BA8EA4();
      v13 = sub_1A9CE88BC();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedBedtimeString.getter()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v34 - v3;
  v5 = sub_1A9CE62E8();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v34 - v11;
  v13 = sub_1A9CE60C0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE6444();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6420();
  sub_1A9C38720(v39, (uint64_t)v12, &qword_1EEB44248, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v23 = &qword_1EEB44248;
    v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    v25 = (uint64_t)v12;
  }
  else
  {
    v35 = v19;
    v39 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    sub_1A9CE63E4();
    v27 = v37;
    v26 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v4, 1, v38) != 1)
    {
      v29 = v36;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v36, v4, v26);
      v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
      objc_msgSend(v30, sel_setDateStyle_, 0);
      objc_msgSend(v30, sel_setTimeStyle_, 1);
      v31 = (void *)sub_1A9CE6258();
      v32 = objc_msgSend(v30, sel_stringFromDate_, v31);

      v28 = sub_1A9CE82E0();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v39);
      return v28;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v39);
    v23 = &qword_1ED2625E0;
    v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v25 = (uint64_t)v4;
  }
  sub_1A9B93BDC(v25, v23, v24);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedBedtimeDayString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  int v18;
  BOOL v19;
  _QWORD v21[2];

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v21 - v5;
  v7 = sub_1A9CE62E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v1 + v12[12], (uint64_t)v6, &qword_1ED2625E0, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1A9B93BDC((uint64_t)v6, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      v15 = (void *)sub_1A9CE6258();
      v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      v13 = sub_1A9CE82E0();
      v14 = v17;

    }
    else
    {
      v13 = 0;
    }
    v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0] = v13;
      v21[1] = v14;
      sub_1A9BA8EA4();
      v13 = sub_1A9CE88BC();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedWakeUpString.getter()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v35 - v3;
  v5 = sub_1A9CE62E8();
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v37 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - v11;
  v13 = sub_1A9CE60C0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE6444();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6420();
  v23 = type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v40 + *(int *)(v23 + 20), (uint64_t)v12, &qword_1EEB44248, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v24 = &qword_1EEB44248;
    v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    v26 = (uint64_t)v12;
  }
  else
  {
    v36 = v19;
    v40 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
    sub_1A9CE63E4();
    v28 = v38;
    v27 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v4, 1, v39) != 1)
    {
      v30 = v37;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v37, v4, v27);
      v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
      objc_msgSend(v31, sel_setDateStyle_, 0);
      objc_msgSend(v31, sel_setTimeStyle_, 1);
      v32 = (void *)sub_1A9CE6258();
      v33 = objc_msgSend(v31, sel_stringFromDate_, v32);

      v29 = sub_1A9CE82E0();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v40);
      return v29;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v40);
    v24 = &qword_1ED2625E0;
    v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    v26 = (uint64_t)v4;
  }
  sub_1A9B93BDC(v26, v24, v25);
  return 0;
}

uint64_t ScheduleOccurrenceViewModel.localizedWakeUpDayString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  int v18;
  BOOL v19;
  _QWORD v21[2];

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v21 - v5;
  v7 = sub_1A9CE62E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v1 + v12[11], (uint64_t)v6, &qword_1ED2625E0, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1A9B93BDC((uint64_t)v6, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v14 = *(void **)(v1 + v12[14]);
    if (v14)
    {
      v15 = (void *)sub_1A9CE6258();
      v16 = objc_msgSend(v14, sel_stringFromDate_, v15);

      v13 = sub_1A9CE82E0();
      v14 = v17;

    }
    else
    {
      v13 = 0;
    }
    v18 = *(unsigned __int8 *)(v1 + v12[10] + 168);
    v19 = v18 != 2 && (v18 & 1) == 0;
    if (v19 && v14)
    {
      v21[0] = v13;
      v21[1] = v14;
      sub_1A9BA8EA4();
      v13 = sub_1A9CE88BC();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  return v13;
}

uint64_t ScheduleOccurrenceViewModel.localizedHeaderString.getter()
{
  return sub_1A9C9016C(1);
}

uint64_t ScheduleOccurrenceViewModel.localizedHeaderAccessibilityString.getter()
{
  return sub_1A9C9016C(0);
}

uint64_t sub_1A9C9016C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v15;

  v3 = sub_1A9CE6444();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScheduleOccurrenceViewModel();
  if ((*(_BYTE *)(v1 + *(int *)(v8 + 36)) & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v9 = (id)qword_1ED264F90;
    v10 = sub_1A9CE6168();

  }
  else
  {
    v11 = *(_QWORD *)(v1 + *(int *)(v8 + 28));
    sub_1A9CE6420();
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
    objc_msgSend(v12, sel_setFormattingContext_, 2);
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
    objc_msgSend(v13, sel_setFormattingContext_, 5);
    v10 = (uint64_t)_sSo15NSDateFormatterC13SleepHealthUIE13localizedList5using8calendar010standaloneB008listItemB015useShortSymbolsSSSo12HKSPWeekdaysV_10Foundation8CalendarVA2BSbtFZ_0(v11, (uint64_t)v7, v12, (uint64_t)v13, a1 & 1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v10;
}

uint64_t sub_1A9C9031C()
{
  id v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ScheduleOccurrenceViewModel();
  v0 = (id)HKSPIdentifierStringForWeekdays();
  v1 = sub_1A9CE82E0();
  v3 = v2;

  swift_bridgeObjectRelease();
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = (id)HKSPIdentifierStringForWeekdays();
    v6 = sub_1A9CE82E0();
    v8 = v7;

  }
  else
  {
    v8 = 0xE400000000000000;
    v6 = 1954047310;
  }
  v13 = 3;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB520;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  static String.healthAccessibilityIdentifier(_:_:)(&v13, inited);
  v11 = v10;
  swift_setDeallocating();
  swift_arrayDestroy();
  return v11;
}

__n128 sub_1A9C90480@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  __int16 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  v4 = *(unsigned __int8 *)(v3 + 56);
  if (qword_1ED2626A8 != -1)
    swift_once();
  if (v4)
    v5 = -772;
  else
    v5 = 0x8000;
  v32 = v5;
  v6 = (id)qword_1ED264F90;
  v7 = sub_1A9CE6168();
  v30 = v8;
  v31 = v7;
  swift_bridgeObjectRelease();

  v9 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 48);
  v29 = *(_BYTE *)(v3 + 57);
  swift_retain();
  swift_retain();
  v11 = ScheduleOccurrenceViewModel.localizedWindDownString.getter();
  sub_1A9C906E0(v11, v12, 1, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  v28 = v35;
  v27 = v36;
  v25 = v38;
  v26 = v37;
  v24 = v39;
  v22 = v41;
  v23 = v40;
  v13 = ScheduleOccurrenceViewModel.localizedWindDownDayString.getter();
  v15 = v14;
  v16 = *(_QWORD *)(v3 + 160);
  v17 = *(_QWORD *)(v3 + 176);
  v18 = *(_BYTE *)(v3 + 185);
  swift_retain();
  swift_retain();
  v33 = sub_1A9C9031C();
  v34 = v19;
  sub_1A9CE8340();
  v20 = *(_QWORD *)(v3 + 192);
  *(_WORD *)a1 = v32;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = v28;
  result = v27;
  *(__n128 *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v25;
  *(_BYTE *)(a1 + 104) = v24;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v22;
  *(_WORD *)(a1 + 128) = -772;
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 152) = v16;
  *(_QWORD *)(a1 + 160) = v17;
  *(_BYTE *)(a1 + 168) = v18;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = v33;
  *(_QWORD *)(a1 + 200) = v34;
  *(_QWORD *)(a1 + 208) = v20;
  return result;
}

uint64_t sub_1A9C906E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v9 = v4 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
    v10 = 121;
    if ((a3 & 1) != 0)
      v10 = 89;
    v11 = 96;
    if ((a3 & 1) != 0)
      v11 = 64;
    v12 = 112;
    if ((a3 & 1) != 0)
      v12 = 80;
    v13 = *(_QWORD *)(v9 + v12);
    v14 = *(_QWORD *)(v9 + v11);
    v15 = *(_BYTE *)(v9 + v10);
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    *(_WORD *)a4 = -772;
    *(_QWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = a2;
    *(_QWORD *)(a4 + 24) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_BYTE *)(a4 + 40) = v15;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
  }
  else
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v17 = (id)qword_1ED264F90;
    v18 = sub_1A9CE6168();
    v20 = v19;

    v21 = v4 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
    v22 = *(_QWORD *)(v21 + 128);
    v23 = *(_QWORD *)(v21 + 144);
    LOBYTE(v21) = *(_BYTE *)(v21 + 153);
    *(_WORD *)a4 = -772;
    *(_QWORD *)(a4 + 8) = v18;
    *(_QWORD *)(a4 + 16) = v20;
    *(_QWORD *)(a4 + 24) = v22;
    *(_QWORD *)(a4 + 32) = v23;
    *(_BYTE *)(a4 + 40) = v21;
    *(_QWORD *)(a4 + 48) = a1;
    *(_QWORD *)(a4 + 56) = 0;
    swift_retain();
    return swift_retain();
  }
  return result;
}

__n128 sub_1A9C9086C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  __int16 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v1 + *(int *)(type metadata accessor for ScheduleOccurrenceViewModel() + 40);
  v4 = *(unsigned __int8 *)(v3 + 56);
  if (qword_1ED2626A8 != -1)
    swift_once();
  if (v4)
    v5 = -772;
  else
    v5 = 0;
  v32 = v5;
  v6 = (id)qword_1ED264F90;
  v7 = sub_1A9CE6168();
  v30 = v8;
  v31 = v7;
  swift_bridgeObjectRelease();

  v9 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 48);
  v29 = *(_BYTE *)(v3 + 57);
  swift_retain();
  swift_retain();
  v11 = ScheduleOccurrenceViewModel.localizedBedtimeString.getter();
  sub_1A9C906E0(v11, v12, 1, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  v28 = v35;
  v27 = v36;
  v25 = v38;
  v26 = v37;
  v24 = v39;
  v22 = v41;
  v23 = v40;
  v13 = ScheduleOccurrenceViewModel.localizedBedtimeDayString.getter();
  v15 = v14;
  v16 = *(_QWORD *)(v3 + 160);
  v17 = *(_QWORD *)(v3 + 176);
  v18 = *(_BYTE *)(v3 + 185);
  swift_retain();
  swift_retain();
  v33 = sub_1A9C9031C();
  v34 = v19;
  sub_1A9CE8340();
  v20 = *(_QWORD *)(v3 + 192);
  *(_WORD *)a1 = v32;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = v28;
  result = v27;
  *(__n128 *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v25;
  *(_BYTE *)(a1 + 104) = v24;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v22;
  *(_WORD *)(a1 + 128) = -772;
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 152) = v16;
  *(_QWORD *)(a1 + 160) = v17;
  *(_BYTE *)(a1 + 168) = v18;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = v33;
  *(_QWORD *)(a1 + 200) = v34;
  *(_QWORD *)(a1 + 208) = v20;
  return result;
}

__n128 sub_1A9C90AC4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v3 = type metadata accessor for ScheduleOccurrenceViewModel();
  v4 = v3;
  v5 = *(int *)(v3 + 32);
  v6 = *(unsigned __int8 *)(v1 + v5);
  if (*(_BYTE *)(v1 + v5))
  {
    if (v6 == 1)
    {
      if (*(_BYTE *)(v1 + *(int *)(v3 + 40) + 56))
        v7 = -772;
      else
        v7 = -32767;
      v37 = v7;
    }
    else
    {
      if (*(_BYTE *)(v1 + *(int *)(v3 + 40) + 56))
        v9 = -772;
      else
        v9 = 4096;
      v37 = v9;
    }
  }
  else
  {
    if (*(_BYTE *)(v1 + *(int *)(v3 + 40) + 56))
      v8 = -772;
    else
      v8 = 4097;
    v37 = v8;
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v10 = (id)qword_1ED264F90;
  v11 = sub_1A9CE6168();
  v35 = v12;
  v36 = v11;
  swift_bridgeObjectRelease();

  v13 = v1 + *(int *)(v4 + 40);
  v14 = *(_QWORD *)(v13 + 32);
  v15 = *(_QWORD *)(v13 + 48);
  v34 = *(_BYTE *)(v13 + 57);
  swift_retain();
  swift_retain();
  v16 = ScheduleOccurrenceViewModel.localizedWakeUpString.getter();
  sub_1A9C906E0(v16, v17, v6 < 2, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  v33 = v40;
  v32 = v41;
  v30 = v43;
  v31 = v42;
  v29 = v44;
  v27 = v46;
  v28 = v45;
  v18 = ScheduleOccurrenceViewModel.localizedWakeUpDayString.getter();
  v20 = v19;
  v21 = *(_QWORD *)(v13 + 160);
  v22 = *(_QWORD *)(v13 + 176);
  v23 = *(_BYTE *)(v13 + 185);
  swift_retain();
  swift_retain();
  v38 = sub_1A9C9031C();
  v39 = v24;
  sub_1A9CE8340();
  v25 = *(_QWORD *)(v13 + 192);
  *(_WORD *)a1 = v37;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_BYTE *)(a1 + 40) = v34;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = v33;
  result = v32;
  *(__n128 *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 88) = v31;
  *(_QWORD *)(a1 + 96) = v30;
  *(_BYTE *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = v27;
  *(_WORD *)(a1 + 128) = -772;
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_BYTE *)(a1 + 168) = v23;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = v38;
  *(_QWORD *)(a1 + 200) = v39;
  *(_QWORD *)(a1 + 208) = v25;
  return result;
}

uint64_t static ScheduleOccurrenceViewModel.emptyViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD, _QWORD);
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  _BYTE v63[11];
  __int16 v64;
  _BYTE v65[11];
  __int16 v66;
  _BYTE v67[11];
  __int16 v68;
  _BYTE v69[11];
  __int16 v70;
  _BYTE v71[11];
  __int16 v72;
  _DWORD v73[3];

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v47 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v47 - v13;
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v2);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v47 - v21;
  sub_1A9CE77A0();
  v60 = sub_1A9CE77E8();
  swift_release();
  if (qword_1ED262D40 != -1)
    swift_once();
  v59 = qword_1ED262D68;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7818();
  v58 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v23 = qword_1EEB42EB8;
  v57 = qword_1EEB45958;
  swift_retain();
  if (v23 != -1)
    swift_once();
  v56 = sub_1A9CE77E8();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v54 = qword_1EEB45950;
  swift_retain();
  v53 = sub_1A9CE77E8();
  v55 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE7860();
  sub_1A9CE7824();
  v52 = sub_1A9CE786C();
  swift_release();
  v51 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v50 = sub_1A9CE786C();
  swift_release();
  v49 = qword_1EEB45958;
  v24 = sub_1A9CE60C0();
  v25 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v24 - 8) + 56);
  v25(v22, 1, 1, v24);
  v25(v18, 1, 1, v24);
  v26 = sub_1A9CE62E8();
  v48 = v18;
  v27 = v26;
  v28 = *(_QWORD *)(v26 - 8);
  v47 = v22;
  v29 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v28 + 56);
  v29(v14, 1, 1, v26);
  v29(v10, 1, 1, v27);
  v29(v6, 1, 1, v27);
  v30 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v31 = a1 + v30[11];
  v29(v31, 1, 1, v27);
  v32 = a1 + v30[12];
  v29(v32, 1, 1, v27);
  v33 = a1 + v30[13];
  v29(v33, 1, 1, v27);
  sub_1A9BB70A0((uint64_t)v47, a1);
  sub_1A9BB70A0((uint64_t)v48, a1 + v30[5]);
  v34 = a1 + v30[6];
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  *(_QWORD *)(a1 + v30[7]) = 0;
  v35 = v49;
  swift_retain();
  sub_1A9C141CC((uint64_t)v14, v33);
  sub_1A9C141CC((uint64_t)v10, v32);
  result = sub_1A9C141CC((uint64_t)v6, v31);
  *(_QWORD *)(a1 + v30[14]) = 0;
  *(_BYTE *)(a1 + v30[8]) = 0;
  *(_BYTE *)(a1 + v30[9]) = 0;
  v37 = a1 + v30[10];
  *(_QWORD *)v37 = v60;
  *(_BYTE *)(v37 + 8) = 2;
  *(_DWORD *)(v37 + 9) = v73[0];
  *(_DWORD *)(v37 + 12) = *(_DWORD *)((char *)v73 + 3);
  *(_QWORD *)(v37 + 16) = v59;
  *(_WORD *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + 26) = *(_DWORD *)&v71[7];
  *(_WORD *)(v37 + 30) = v72;
  *(_QWORD *)(v37 + 32) = v58;
  *(_BYTE *)(v37 + 40) = 2;
  *(_DWORD *)(v37 + 41) = *(_DWORD *)v71;
  *(_DWORD *)(v37 + 44) = *(_DWORD *)&v71[3];
  *(_QWORD *)(v37 + 48) = v57;
  *(_WORD *)(v37 + 56) = 0;
  v38 = *(_DWORD *)&v69[7];
  *(_WORD *)(v37 + 62) = v70;
  *(_DWORD *)(v37 + 58) = v38;
  *(_QWORD *)(v37 + 64) = v56;
  *(_BYTE *)(v37 + 72) = 2;
  v39 = *(_DWORD *)v69;
  *(_DWORD *)(v37 + 76) = *(_DWORD *)&v69[3];
  *(_DWORD *)(v37 + 73) = v39;
  *(_QWORD *)(v37 + 80) = v54;
  *(_WORD *)(v37 + 88) = 0;
  v40 = *(_DWORD *)&v67[7];
  *(_WORD *)(v37 + 94) = v68;
  *(_DWORD *)(v37 + 90) = v40;
  *(_QWORD *)(v37 + 96) = v53;
  *(_BYTE *)(v37 + 104) = 2;
  v41 = *(_DWORD *)v67;
  *(_DWORD *)(v37 + 108) = *(_DWORD *)&v67[3];
  *(_DWORD *)(v37 + 105) = v41;
  *(_QWORD *)(v37 + 112) = v55;
  *(_WORD *)(v37 + 120) = 0;
  v42 = *(_DWORD *)&v65[7];
  *(_WORD *)(v37 + 126) = v66;
  *(_DWORD *)(v37 + 122) = v42;
  *(_QWORD *)(v37 + 128) = v52;
  *(_BYTE *)(v37 + 136) = 2;
  v43 = *(_DWORD *)v65;
  *(_DWORD *)(v37 + 140) = *(_DWORD *)&v65[3];
  *(_DWORD *)(v37 + 137) = v43;
  *(_QWORD *)(v37 + 144) = v51;
  *(_WORD *)(v37 + 152) = 0;
  v44 = *(_DWORD *)&v63[7];
  *(_WORD *)(v37 + 158) = v64;
  *(_DWORD *)(v37 + 154) = v44;
  *(_QWORD *)(v37 + 160) = v50;
  *(_BYTE *)(v37 + 168) = 2;
  v45 = *(_DWORD *)v63;
  *(_DWORD *)(v37 + 172) = *(_DWORD *)&v63[3];
  *(_DWORD *)(v37 + 169) = v45;
  *(_QWORD *)(v37 + 176) = v35;
  *(_WORD *)(v37 + 184) = 0;
  v46 = v61;
  *(_WORD *)(v37 + 190) = v62;
  *(_DWORD *)(v37 + 186) = v46;
  *(_QWORD *)(v37 + 192) = 0;
  return result;
}

__n128 ScheduleOccurrenceViewModel.init(bedtimeComponents:wakeUpComponents:windDownTimeInterval:weekdays:relativeWindDownDate:relativeBedtimeDate:relativeWakeUpDate:relativeWeekdayFormatter:alarmState:isNextOccurrence:viewStyle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char *a11, char a12, __int128 *a13)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 result;
  char v29;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v29 = *a11;
  v42 = a13[10];
  v43 = a13[11];
  v44 = *((_QWORD *)a13 + 24);
  v38 = a13[6];
  v39 = a13[7];
  v40 = a13[8];
  v41 = a13[9];
  v34 = a13[2];
  v35 = a13[3];
  v36 = a13[4];
  v37 = a13[5];
  v32 = *a13;
  v33 = (__n128)a13[1];
  v17 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v18 = a9 + v17[11];
  v19 = sub_1A9CE62E8();
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  v21 = a9 + v17[12];
  v20(v21, 1, 1, v19);
  v22 = a9 + v17[13];
  v20(v22, 1, 1, v19);
  sub_1A9BB70A0(a1, a9);
  sub_1A9BB70A0(a2, a9 + v17[5]);
  v23 = a9 + v17[6];
  *(_QWORD *)v23 = a3;
  *(_BYTE *)(v23 + 8) = a4 & 1;
  *(_QWORD *)(a9 + v17[7]) = a5;
  sub_1A9C141CC(a6, v22);
  sub_1A9C141CC(a7, v21);
  sub_1A9C141CC(a8, v18);
  *(_QWORD *)(a9 + v17[14]) = a10;
  *(_BYTE *)(a9 + v17[8]) = v29;
  *(_BYTE *)(a9 + v17[9]) = a12;
  v24 = a9 + v17[10];
  *(_OWORD *)(v24 + 160) = v42;
  *(_OWORD *)(v24 + 176) = v43;
  *(_QWORD *)(v24 + 192) = v44;
  *(_OWORD *)(v24 + 96) = v38;
  *(_OWORD *)(v24 + 112) = v39;
  *(_OWORD *)(v24 + 128) = v40;
  *(_OWORD *)(v24 + 144) = v41;
  *(_OWORD *)(v24 + 32) = v34;
  *(_OWORD *)(v24 + 48) = v35;
  *(_OWORD *)(v24 + 64) = v36;
  *(_OWORD *)(v24 + 80) = v37;
  result = v33;
  *(_OWORD *)v24 = v32;
  *(__n128 *)(v24 + 16) = v33;
  return result;
}

uint64_t ScheduleOccurrenceViewModel.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;

  v1 = v0;
  v2 = sub_1A9CE62E8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v56 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v55 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v55 - v16;
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v10);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v55 - v21;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1A9CF3DB0;
  sub_1A9C38720(v1, (uint64_t)v22, &qword_1EEB44248, v18);
  *(_QWORD *)(v23 + 32) = sub_1A9CE82F8();
  *(_QWORD *)(v23 + 40) = v24;
  sub_1A9C38720(v1 + v6[5], (uint64_t)v22, &qword_1EEB44248, v18);
  *(_QWORD *)(v23 + 48) = sub_1A9CE82F8();
  *(_QWORD *)(v23 + 56) = v25;
  v26 = (id)NSStringFromHKSPWeekdays();
  v27 = sub_1A9CE82E0();
  v29 = v28;

  *(_QWORD *)(v23 + 64) = v27;
  *(_QWORD *)(v23 + 72) = v29;
  v60 = *(_BYTE *)(v1 + v6[8]);
  *(_QWORD *)(v23 + 80) = sub_1A9CE82F8();
  *(_QWORD *)(v23 + 88) = v30;
  v31 = 1702195828;
  if (!*(_BYTE *)(v1 + v6[9]))
    v31 = 0x65736C6166;
  v32 = 0xE500000000000000;
  if (*(_BYTE *)(v1 + v6[9]))
    v32 = 0xE400000000000000;
  *(_QWORD *)(v23 + 96) = v31;
  *(_QWORD *)(v23 + 104) = v32;
  v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C38720(v1 + v6[11], (uint64_t)v17, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  *(_QWORD *)(v23 + 112) = sub_1A9CE82F8();
  *(_QWORD *)(v23 + 120) = v34;
  sub_1A9C38720(v1 + v6[12], (uint64_t)v17, &qword_1ED2625E0, v33);
  *(_QWORD *)(v23 + 128) = sub_1A9CE82F8();
  *(_QWORD *)(v23 + 136) = v35;
  v36 = *(_QWORD *)(v1 + v6[10] + 192);
  sub_1A9C461A8(v1, (uint64_t)v9);
  if ((v36 & 2) != 0)
  {
    v37 = sub_1A9C8E6E4();
    sub_1A9C94DDC((uint64_t)v9);
    if ((v37 & 1) != 0)
    {
      if ((*(_BYTE *)(v1 + v6[6] + 8) & 1) == 0)
      {
        v38 = sub_1A9CE849C();
        v40 = v39;
        v42 = *(_QWORD *)(v23 + 16);
        v41 = *(_QWORD *)(v23 + 24);
        if (v42 >= v41 >> 1)
          v23 = (uint64_t)sub_1A9CADD68((_QWORD *)(v41 > 1), v42 + 1, 1, (_QWORD *)v23);
        *(_QWORD *)(v23 + 16) = v42 + 1;
        v43 = v23 + 16 * v42;
        *(_QWORD *)(v43 + 32) = v38;
        *(_QWORD *)(v43 + 40) = v40;
      }
      v44 = v55;
      sub_1A9C38720(v1 + v6[13], v55, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      v46 = v57;
      v45 = v58;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v44, 1, v58) == 1)
      {
        sub_1A9B93BDC(v44, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v56, v44, v45);
        sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
        v47 = sub_1A9CE8B74();
        v49 = v48;
        v51 = *(_QWORD *)(v23 + 16);
        v50 = *(_QWORD *)(v23 + 24);
        if (v51 >= v50 >> 1)
          v23 = (uint64_t)sub_1A9CADD68((_QWORD *)(v50 > 1), v51 + 1, 1, (_QWORD *)v23);
        *(_QWORD *)(v23 + 16) = v51 + 1;
        v52 = v23 + 16 * v51;
        *(_QWORD *)(v52 + 32) = v47;
        *(_QWORD *)(v52 + 40) = v49;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v56, v45);
      }
    }
  }
  else
  {
    sub_1A9C94DDC((uint64_t)v9);
  }
  v59 = v23;
  sub_1A9B94CA0(0, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v53 = sub_1A9CE8280();
  swift_bridgeObjectRelease();
  return v53;
}

uint64_t ScheduleOccurrenceViewModel.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  int *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v1 = v0;
  v2 = sub_1A9CE62E8();
  v44 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v42 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v41 = (uint64_t)&v39 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v40 = (uint64_t)&v39 - v15;
  v16 = sub_1A9CE60C0();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB44248, v17, v5);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v27);
  v29 = (char *)&v39 - v28;
  sub_1A9C38720(v1, (uint64_t)&v39 - v28, &qword_1EEB44248, v17);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v30(v29, 1, v16) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v29, v16);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1EEB49060, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAD8]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v16);
  }
  v31 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v1 + v31[5], (uint64_t)v26, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  if (v30(v26, 1, v16) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v26, v16);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1EEB49060, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAD8]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v16);
  }
  v33 = v43;
  v32 = v44;
  if (*(_BYTE *)(v1 + v31[6] + 8) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    sub_1A9CE8C64();
    sub_1A9CE8C70();
  }
  v34 = v40;
  sub_1A9C38720(v1 + v31[13], v40, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v35(v34, 1, v2) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v33, v34, v2);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1EEB49068, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
  }
  v36 = v41;
  sub_1A9C38720(v1 + v31[12], v41, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v35(v36, 1, v2) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v33, v36, v2);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1EEB49068, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
  }
  v37 = v42;
  sub_1A9C38720(v1 + v31[11], v42, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v35(v37, 1, v2) == 1)
  {
    sub_1A9CE8C64();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v33, v37, v2);
    sub_1A9CE8C64();
    sub_1A9B92B9C(&qword_1EEB49068, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1A9CE8250();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v2);
  }
  sub_1A9CE8C58();
  sub_1A9CE8C58();
  return sub_1A9CE8C64();
}

uint64_t ScheduleOccurrenceViewModel.hashValue.getter()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C92020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ScheduleOccurrenceViewModel.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ScheduleOccurrenceViewModel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v56[1] = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v56 - v5;
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], v2);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v56 - v10;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A9CF4E10;
  sub_1A9C38720(v1, (uint64_t)v11, &qword_1EEB44248, v7);
  v13 = sub_1A9CE82F8();
  v15 = v14;
  *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
  v16 = sub_1A9BDD3E4();
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  v17 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  sub_1A9C38720(v1 + v17[5], (uint64_t)v11, &qword_1EEB44248, v7);
  v18 = sub_1A9CE82F8();
  v19 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 96) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 104) = v16;
  *(_QWORD *)(v12 + 72) = v18;
  *(_QWORD *)(v12 + 80) = v20;
  v21 = v1 + v17[6];
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)&v70[0] = v22;
  BYTE8(v70[0]) = v21;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v23 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 136) = v19;
  *(_QWORD *)(v12 + 144) = v16;
  *(_QWORD *)(v12 + 112) = v23;
  *(_QWORD *)(v12 + 120) = v24;
  v25 = (id)NSStringFromHKSPWeekdays();
  v26 = sub_1A9CE82E0();
  v28 = v27;

  *(_QWORD *)(v12 + 176) = v19;
  *(_QWORD *)(v12 + 184) = v16;
  *(_QWORD *)(v12 + 152) = v26;
  *(_QWORD *)(v12 + 160) = v28;
  LOBYTE(v70[0]) = *(_BYTE *)(v1 + v17[8]);
  v29 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 216) = v19;
  *(_QWORD *)(v12 + 224) = v16;
  *(_QWORD *)(v12 + 192) = v29;
  *(_QWORD *)(v12 + 200) = v30;
  v31 = 1702195828;
  if (!*(_BYTE *)(v1 + v17[9]))
    v31 = 0x65736C6166;
  v32 = 0xE500000000000000;
  if (*(_BYTE *)(v1 + v17[9]))
    v32 = 0xE400000000000000;
  *(_QWORD *)(v12 + 256) = v19;
  *(_QWORD *)(v12 + 264) = v16;
  *(_QWORD *)(v12 + 232) = v31;
  *(_QWORD *)(v12 + 240) = v32;
  v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C38720(v1 + v17[11], (uint64_t)v6, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v34 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 296) = v19;
  *(_QWORD *)(v12 + 304) = v16;
  *(_QWORD *)(v12 + 272) = v34;
  *(_QWORD *)(v12 + 280) = v35;
  sub_1A9C38720(v1 + v17[12], (uint64_t)v6, &qword_1ED2625E0, v33);
  v36 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 336) = v19;
  *(_QWORD *)(v12 + 344) = v16;
  *(_QWORD *)(v12 + 312) = v36;
  *(_QWORD *)(v12 + 320) = v37;
  sub_1A9C38720(v1 + v17[13], (uint64_t)v6, &qword_1ED2625E0, v33);
  v38 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 376) = v19;
  *(_QWORD *)(v12 + 384) = v16;
  *(_QWORD *)(v12 + 352) = v38;
  *(_QWORD *)(v12 + 360) = v39;
  v40 = v1 + v17[10];
  v41 = *(_OWORD *)(v40 + 144);
  v42 = *(_OWORD *)(v40 + 176);
  v79 = *(_OWORD *)(v40 + 160);
  v80 = v42;
  v43 = *(_OWORD *)(v40 + 80);
  v44 = *(_OWORD *)(v40 + 112);
  v75 = *(_OWORD *)(v40 + 96);
  v76 = v44;
  v45 = *(_OWORD *)(v40 + 112);
  v46 = *(_OWORD *)(v40 + 144);
  v77 = *(_OWORD *)(v40 + 128);
  v78 = v46;
  v47 = *(_OWORD *)(v40 + 16);
  v48 = *(_OWORD *)(v40 + 48);
  v71 = *(_OWORD *)(v40 + 32);
  v72 = v48;
  v49 = *(_OWORD *)(v40 + 48);
  v50 = *(_OWORD *)(v40 + 80);
  v73 = *(_OWORD *)(v40 + 64);
  v74 = v50;
  v51 = *(_OWORD *)(v40 + 16);
  v70[0] = *(_OWORD *)v40;
  v70[1] = v51;
  v52 = *(_OWORD *)(v40 + 176);
  v67 = v79;
  v68 = v52;
  v63 = v75;
  v64 = v45;
  v65 = v77;
  v66 = v41;
  v59 = v71;
  v60 = v49;
  v61 = v73;
  v62 = v43;
  v81 = *(_QWORD *)(v40 + 192);
  v69 = *(_QWORD *)(v40 + 192);
  v57 = v70[0];
  v58 = v47;
  sub_1A9C94D04((uint64_t)v70);
  v53 = sub_1A9CE82F8();
  *(_QWORD *)(v12 + 416) = v19;
  *(_QWORD *)(v12 + 424) = v16;
  *(_QWORD *)(v12 + 392) = v53;
  *(_QWORD *)(v12 + 400) = v54;
  return sub_1A9CE82EC();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.font.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.titleCased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.color.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hideIcons.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hidden.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  swift_retain();
  sub_1A9CE77F4();
  swift_release();
  if (v1 != 2)
    sub_1A9CE8C64();
  sub_1A9CE8C64();
  swift_retain();
  sub_1A9CE7C74();
  swift_release();
  sub_1A9CE8C64();
  return sub_1A9CE8C64();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hashValue.getter()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C92568()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C925D4()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SleepHealthUI::ScheduleOccurrenceViewModel::ViewStyle::Options __swiftcall ScheduleOccurrenceViewModel.ViewStyle.Options.init(rawValue:)(SleepHealthUI::ScheduleOccurrenceViewModel::ViewStyle::Options rawValue)
{
  SleepHealthUI::ScheduleOccurrenceViewModel::ViewStyle::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.headerTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 25);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.titleTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_BYTE *)(v1 + 56);
  v5 = *(_BYTE *)(v1 + 57);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.timeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_BYTE *)(v1 + 88);
  v5 = *(_BYTE *)(v1 + 89);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 64);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.disabledTimeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_BYTE *)(v1 + 120);
  v5 = *(_BYTE *)(v1 + 121);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.unsetTimeTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(_BYTE *)(v1 + 152);
  v5 = *(_BYTE *)(v1 + 153);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 128);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.dayTextStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_BYTE *)(v1 + 168);
  v3 = *(_QWORD *)(v1 + 176);
  v4 = *(_BYTE *)(v1 + 184);
  v5 = *(_BYTE *)(v1 + 185);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 160);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  swift_retain();
  return swift_retain();
}

void ScheduleOccurrenceViewModel.ViewStyle.options.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 192);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepRoomNextOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C92A38((void (*)(void))MEMORY[0x1E0CDD5F8], a1);
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepRoomRepeatOccurrenceStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1A9CE77A0();
  sub_1A9CE7824();
  v15 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v14 = qword_1EEB45950;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v13 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v2 = qword_1EEB45958;
  v3 = qword_1EEB42EB8;
  swift_retain();
  if (v3 != -1)
    swift_once();
  v12 = sub_1A9CE77E8();
  v4 = qword_1EEB45950;
  swift_retain();
  v5 = sub_1A9CE77E8();
  v6 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE7860();
  sub_1A9CE7824();
  v7 = sub_1A9CE786C();
  swift_release();
  v8 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v9 = sub_1A9CE786C();
  swift_release();
  v10 = qword_1EEB45958;
  *(_QWORD *)a1 = v15;
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v14;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 112) = v6;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v7;
  *(_BYTE *)(a1 + 136) = 2;
  *(_QWORD *)(a1 + 144) = v8;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = v9;
  *(_BYTE *)(a1 + 168) = 2;
  *(_QWORD *)(a1 + 176) = v10;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  return swift_retain();
}

uint64_t static ScheduleOccurrenceViewModel.ViewStyle.sleepFullScheduleStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C92A38((void (*)(void))MEMORY[0x1E0CDD5F8], a1);
}

uint64_t sub_1A9C92A38@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1A9CE77A0();
  v17 = sub_1A9CE77E8();
  swift_release();
  if (qword_1ED262D40 != -1)
    swift_once();
  v16 = qword_1ED262D68;
  swift_retain();
  sub_1A9CE78C0();
  a1();
  v15 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v4 = qword_1EEB45958;
  v5 = qword_1EEB42EB8;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v14 = sub_1A9CE77E8();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v6 = qword_1EEB45950;
  swift_retain();
  v7 = sub_1A9CE77E8();
  v8 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE7860();
  sub_1A9CE7824();
  v9 = sub_1A9CE786C();
  swift_release();
  v10 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v11 = sub_1A9CE786C();
  swift_release();
  v12 = qword_1EEB45958;
  *(_QWORD *)a2 = v17;
  *(_BYTE *)(a2 + 8) = 2;
  *(_QWORD *)(a2 + 16) = v16;
  *(_WORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = 2;
  *(_QWORD *)(a2 + 48) = v4;
  *(_WORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v14;
  *(_BYTE *)(a2 + 72) = 2;
  *(_QWORD *)(a2 + 80) = v6;
  *(_WORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v7;
  *(_BYTE *)(a2 + 104) = 2;
  *(_QWORD *)(a2 + 112) = v8;
  *(_WORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v9;
  *(_BYTE *)(a2 + 136) = 2;
  *(_QWORD *)(a2 + 144) = v10;
  *(_WORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = v11;
  *(_BYTE *)(a2 + 168) = 2;
  *(_QWORD *)(a2 + 176) = v12;
  *(_WORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  return swift_retain();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.hash(into:)()
{
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  ScheduleOccurrenceViewModel.ViewStyle.TextStyle.hash(into:)();
  return sub_1A9CE8C58();
}

uint64_t ScheduleOccurrenceViewModel.ViewStyle.hashValue.getter()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C92EC0()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C92F00()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.ViewStyle.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t type metadata accessor for ScheduleOccurrenceViewModel()
{
  uint64_t result;

  result = qword_1EEB49108;
  if (!qword_1EEB49108)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9C92F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  uint64_t result;
  char v9;
  unsigned int v10;

  v2 = a1[8];
  v3 = a1[24];
  v4 = a1[25];
  v5 = a2[8];
  v6 = a2[24];
  v7 = a2[25];
  if ((sub_1A9CE77D0() & 1) == 0)
    return 0;
  if (v2 == 2)
  {
    if (v5 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v5 == 2 || ((((v2 & 1) == 0) ^ v5) & 1) == 0)
      return result;
  }
  v9 = sub_1A9CE7C44();
  if (((v3 ^ v6) & 1) != 0)
    v10 = 0;
  else
    v10 = v4 ^ v7 ^ 1;
  if ((v9 & 1) != 0)
    return v10;
  else
    return 0;
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72;

  v2 = *((_BYTE *)a1 + 8);
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 25);
  v62 = a1[4];
  v61 = *((_BYTE *)a1 + 40);
  v60 = a1[6];
  v58 = *((_BYTE *)a1 + 57);
  v59 = *((_BYTE *)a1 + 56);
  v52 = a1[8];
  v51 = *((_BYTE *)a1 + 72);
  v50 = a1[10];
  v49 = *((_BYTE *)a1 + 88);
  v48 = *((_BYTE *)a1 + 89);
  v42 = a1[12];
  v41 = *((_BYTE *)a1 + 104);
  v40 = a1[14];
  v38 = *((_BYTE *)a1 + 121);
  v39 = *((_BYTE *)a1 + 120);
  v32 = a1[16];
  v31 = *((_BYTE *)a1 + 136);
  v30 = a1[18];
  v28 = *((_BYTE *)a1 + 153);
  v29 = *((_BYTE *)a1 + 152);
  v26 = a1[20];
  v25 = *((_BYTE *)a1 + 168);
  v24 = a1[22];
  v23 = *((_BYTE *)a1 + 184);
  v68 = *a1;
  v21 = *((_BYTE *)a1 + 185);
  v22 = a1[24];
  v69 = v2;
  v6 = *a2;
  v70 = v3;
  v7 = *((_BYTE *)a2 + 8);
  v71 = v4;
  v8 = a2[2];
  v72 = v5;
  v9 = *((_BYTE *)a2 + 24);
  v63 = v6;
  LOBYTE(v6) = *((_BYTE *)a2 + 25);
  v64 = v7;
  v53 = a2[4];
  v65 = v8;
  LOBYTE(v8) = *((_BYTE *)a2 + 40);
  v66 = v9;
  v57 = a2[6];
  v67 = v6;
  v55 = *((_BYTE *)a2 + 56);
  v56 = v8;
  v54 = *((_BYTE *)a2 + 57);
  v47 = a2[8];
  v44 = a2[10];
  v45 = *((_BYTE *)a2 + 88);
  v46 = *((_BYTE *)a2 + 72);
  v43 = *((_BYTE *)a2 + 89);
  v33 = a2[12];
  v34 = *((_BYTE *)a2 + 104);
  v35 = a2[14];
  v36 = *((_BYTE *)a2 + 120);
  v37 = *((_BYTE *)a2 + 121);
  v27 = a2[16];
  v10 = *((_BYTE *)a2 + 136);
  v11 = a2[18];
  v12 = *((_BYTE *)a2 + 152);
  v13 = *((_BYTE *)a2 + 153);
  v14 = a2[20];
  v15 = *((_BYTE *)a2 + 168);
  v16 = a2[22];
  v17 = *((_BYTE *)a2 + 184);
  v18 = *((_BYTE *)a2 + 185);
  v19 = a2[24];
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0;
  v68 = v62;
  v69 = v61;
  v70 = v60;
  v71 = v59;
  v72 = v58;
  v63 = v53;
  v64 = v56;
  v65 = v57;
  v66 = v55;
  v67 = v54;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0;
  v68 = v52;
  v69 = v51;
  v70 = v50;
  v71 = v49;
  v72 = v48;
  v63 = v47;
  v64 = v46;
  v65 = v44;
  v66 = v45;
  v67 = v43;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0;
  v68 = v42;
  v69 = v41;
  v70 = v40;
  v71 = v39;
  v72 = v38;
  v63 = v33;
  v64 = v34;
  v65 = v35;
  v66 = v36;
  v67 = v37;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0;
  v68 = v32;
  v69 = v31;
  v70 = v30;
  v71 = v29;
  v72 = v28;
  v63 = v27;
  v64 = v10;
  v65 = v11;
  v66 = v12;
  v67 = v13;
  if ((_s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & 1) == 0)return 0;
  v68 = v26;
  v69 = v25;
  v70 = v24;
  v71 = v23;
  v72 = v21;
  v63 = v14;
  v64 = v15;
  v65 = v16;
  v66 = v17;
  v67 = v18;
  return _s13SleepHealthUI27ScheduleOccurrenceViewModelV0F5StyleV04TextH0V2eeoiySbAG_AGtFZ_0((unsigned __int8 *)&v68, (unsigned __int8 *)&v63) & (v22 == v19);
}

uint64_t _s13SleepHealthUI27ScheduleOccurrenceViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  int v103;
  _BYTE *v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  _BYTE *v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t (*v118)(uint64_t);
  void (*v119)(_BYTE *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v137;
  _BYTE *v138;
  uint64_t (*v139)(uint64_t);
  uint64_t v140;
  char v141;
  void (*v142)(_BYTE *, uint64_t);
  uint64_t v143;
  int *v144;
  uint64_t v145;
  double v146;
  char v147;
  double *v148;
  double v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t);
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  unsigned int v160;
  unsigned int (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  _BYTE *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t v169;
  void (*v170)(_BYTE *, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t);
  uint64_t v177;
  unsigned int (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  char v184;
  void (*v185)(_BYTE *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t);
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  int v192;
  _BYTE *v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  char v198;
  void (*v199)(_BYTE *, uint64_t);
  int *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(uint64_t, uint64_t, uint64_t);
  int v204;
  int v205;
  char v206;
  char v207;
  _BYTE v208[12];
  int v209;
  _BYTE *v210;
  _BYTE *v211;
  _BYTE *v212;
  _BYTE *v213;
  _BYTE *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  int *v223;
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  _BYTE *v227;
  _BYTE *v228;
  _BYTE *v229;
  _BYTE *v230;
  _BYTE *v231;
  _BYTE *v232;
  _BYTE *v233;
  _BYTE *v234;
  _BYTE *v235;
  _BYTE *v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  unsigned int (*v242)(uint64_t, uint64_t, uint64_t);

  v242 = a2;
  v3 = sub_1A9CE62E8();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v216 = v3;
  v218 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v214 = &v208[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v210 = &v208[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v212 = &v208[-v13];
  MEMORY[0x1E0C80A78](v14, v15);
  v215 = &v208[-v16];
  sub_1A9C38778(0, (unint64_t *)&qword_1EEB482F0, &qword_1ED2625E0, v4);
  v217 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v211 = &v208[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v20, v21);
  v213 = &v208[-v22];
  MEMORY[0x1E0C80A78](v23, v24);
  v219 = &v208[-v25];
  v223 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  MEMORY[0x1E0C80A78](v223, v26);
  v229 = &v208[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v28, v29);
  v228 = &v208[-v30];
  MEMORY[0x1E0C80A78](v31, v32);
  v227 = &v208[-v33];
  MEMORY[0x1E0C80A78](v34, v35);
  v237 = &v208[-v36];
  MEMORY[0x1E0C80A78](v37, v38);
  v236 = &v208[-v39];
  MEMORY[0x1E0C80A78](v40, v41);
  v230 = &v208[-v42];
  MEMORY[0x1E0C80A78](v43, v44);
  v233 = &v208[-v45];
  MEMORY[0x1E0C80A78](v46, v47);
  v234 = &v208[-v48];
  MEMORY[0x1E0C80A78](v49, v50);
  v231 = &v208[-v51];
  MEMORY[0x1E0C80A78](v52, v53);
  v235 = &v208[-v54];
  MEMORY[0x1E0C80A78](v55, v56);
  v241 = &v208[-v57];
  MEMORY[0x1E0C80A78](v58, v59);
  v232 = &v208[-v60];
  MEMORY[0x1E0C80A78](v61, v62);
  v226 = &v208[-v63];
  MEMORY[0x1E0C80A78](v64, v65);
  v225 = &v208[-v66];
  MEMORY[0x1E0C80A78](v67, v68);
  v238 = &v208[-v69];
  MEMORY[0x1E0C80A78](v70, v71);
  v239 = (uint64_t)&v208[-v72];
  v73 = sub_1A9CE60C0();
  v74 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  v75 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v76);
  v221 = &v208[-((v77 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9C38778(0, &qword_1EEB49168, &qword_1EEB44248, v74);
  v79 = v78;
  MEMORY[0x1E0C80A78](v78, v80);
  v222 = &v208[-((v81 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v82, v83);
  v85 = &v208[-v84];
  sub_1A9B92F34(0, &qword_1EEB44248, v74, v7);
  MEMORY[0x1E0C80A78](v86, v87);
  v220 = &v208[-((v88 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v89, v90);
  v92 = &v208[-v91];
  MEMORY[0x1E0C80A78](v93, v94);
  v96 = &v208[-v95];
  MEMORY[0x1E0C80A78](v97, v98);
  v100 = &v208[-v99];
  v240 = a1;
  sub_1A9C38720(a1, (uint64_t)&v208[-v99], &qword_1EEB44248, v74);
  sub_1A9C38720((uint64_t)v242, (uint64_t)v96, &qword_1EEB44248, v74);
  v101 = (uint64_t)&v85[*(int *)(v79 + 48)];
  sub_1A9C38720((uint64_t)v100, (uint64_t)v85, &qword_1EEB44248, v74);
  sub_1A9C38720((uint64_t)v96, v101, &qword_1EEB44248, v74);
  v224 = v75;
  v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v102((uint64_t)v85, 1, v73) == 1)
  {
    sub_1A9B93BDC((uint64_t)v96, &qword_1EEB44248, v74);
    sub_1A9B93BDC((uint64_t)v100, &qword_1EEB44248, v74);
    v103 = v102(v101, 1, v73);
    v104 = v241;
    if (v103 == 1)
    {
      sub_1A9B93BDC((uint64_t)v85, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
      v105 = v239;
      sub_1A9C461A8(v240, v239);
      v106 = v242;
      v107 = v238;
      sub_1A9C461A8((uint64_t)v242, (uint64_t)v238);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_1A9C38720((uint64_t)v85, (uint64_t)v92, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  if (v102(v101, 1, v73) == 1)
  {
    v108 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
    sub_1A9B93BDC((uint64_t)v96, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    sub_1A9B93BDC((uint64_t)v100, &qword_1EEB44248, v108);
    (*(void (**)(_BYTE *, uint64_t))(v224 + 8))(v92, v73);
    v104 = v241;
LABEL_6:
    sub_1A9C387E4((uint64_t)v85, &qword_1EEB49168, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    v105 = v239;
    v109 = v240;
    sub_1A9C461A8(v240, v239);
    v106 = v242;
    v107 = v238;
    sub_1A9C461A8((uint64_t)v242, (uint64_t)v238);
    v111 = (uint64_t)v236;
    v110 = (uint64_t)v237;
LABEL_7:
    sub_1A9C94DDC((uint64_t)v107);
    sub_1A9C94DDC(v105);
    v112 = v233;
    v113 = v235;
    v115 = v225;
    v114 = v226;
LABEL_15:
    sub_1A9C461A8(v109, (uint64_t)v115);
    sub_1A9C461A8((uint64_t)v106, (uint64_t)v114);
LABEL_16:
    sub_1A9C94DDC((uint64_t)v114);
    sub_1A9C94DDC((uint64_t)v115);
    v128 = v234;
    goto LABEL_17;
  }
  v116 = v224;
  v117 = v221;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v224 + 32))(v221, v101, v73);
  v118 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB48578, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAE0]);
  v209 = sub_1A9CE82A4();
  v119 = *(void (**)(_BYTE *, uint64_t))(v116 + 8);
  v119(v117, v73);
  sub_1A9B93BDC((uint64_t)v96, &qword_1EEB44248, v118);
  sub_1A9B93BDC((uint64_t)v100, &qword_1EEB44248, v118);
  v119(v92, v73);
  sub_1A9B93BDC((uint64_t)v85, &qword_1EEB44248, v118);
  v105 = v239;
  v109 = v240;
  sub_1A9C461A8(v240, v239);
  v106 = v242;
  v107 = v238;
  sub_1A9C461A8((uint64_t)v242, (uint64_t)v238);
  v111 = (uint64_t)v236;
  v110 = (uint64_t)v237;
  v104 = v241;
  if ((v209 & 1) == 0)
    goto LABEL_7;
LABEL_9:
  v120 = v223[5];
  v121 = v105 + v120;
  v122 = v105;
  v123 = (uint64_t)&v107[v120];
  v124 = v222;
  v125 = (uint64_t)&v222[*(int *)(v79 + 48)];
  v126 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9C38720(v121, (uint64_t)v222, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  sub_1A9C38720(v123, v125, &qword_1EEB44248, v126);
  if (v102((uint64_t)v124, 1, v73) == 1)
  {
    sub_1A9C94DDC((uint64_t)v107);
    sub_1A9C94DDC(v122);
    if (v102(v125, 1, v73) == 1)
    {
      sub_1A9B93BDC((uint64_t)v124, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
      v109 = v240;
      v115 = v225;
      sub_1A9C461A8(v240, (uint64_t)v225);
      v114 = v226;
      sub_1A9C461A8((uint64_t)v106, (uint64_t)v226);
      v112 = v233;
      v104 = v241;
      v111 = (uint64_t)v236;
      v110 = (uint64_t)v237;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v127 = v220;
  sub_1A9C38720((uint64_t)v124, (uint64_t)v220, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  if (v102(v125, 1, v73) == 1)
  {
    sub_1A9C94DDC((uint64_t)v238);
    sub_1A9C94DDC(v239);
    (*(void (**)(_BYTE *, uint64_t))(v224 + 8))(v127, v73);
LABEL_14:
    sub_1A9C387E4((uint64_t)v124, &qword_1EEB49168, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    v112 = v233;
    v113 = v235;
    v111 = (uint64_t)v236;
    v109 = v240;
    v104 = v241;
    v115 = v225;
    v114 = v226;
    v110 = (uint64_t)v237;
    goto LABEL_15;
  }
  v137 = v224;
  v138 = v221;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v224 + 32))(v221, v125, v73);
  v139 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB48578, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAE0]);
  v140 = (uint64_t)v124;
  v141 = sub_1A9CE82A4();
  v142 = *(void (**)(_BYTE *, uint64_t))(v137 + 8);
  v142(v138, v73);
  sub_1A9C94DDC((uint64_t)v238);
  sub_1A9C94DDC(v239);
  v142(v127, v73);
  sub_1A9B93BDC(v140, &qword_1EEB44248, v139);
  v109 = v240;
  v115 = v225;
  sub_1A9C461A8(v240, (uint64_t)v225);
  v114 = v226;
  sub_1A9C461A8((uint64_t)v106, (uint64_t)v226);
  v112 = v233;
  v113 = v235;
  v111 = (uint64_t)v236;
  v104 = v241;
  v110 = (uint64_t)v237;
  if ((v141 & 1) == 0)
    goto LABEL_16;
LABEL_29:
  v143 = (uint64_t)v115;
  v144 = v223;
  v145 = v143 + v223[6];
  v146 = *(double *)v145;
  v147 = *(_BYTE *)(v145 + 8);
  sub_1A9C94DDC(v143);
  v148 = (double *)&v114[v144[6]];
  v149 = *v148;
  v150 = (uint64_t)v114;
  v151 = *((_BYTE *)v148 + 8);
  sub_1A9C94DDC(v150);
  if ((v147 & 1) != 0)
  {
    v128 = v234;
    v113 = v235;
    if ((v151 & 1) != 0)
    {
      v129 = v232;
      sub_1A9C461A8(v109, (uint64_t)v232);
      sub_1A9C461A8((uint64_t)v106, (uint64_t)v104);
      goto LABEL_34;
    }
    goto LABEL_17;
  }
  v128 = v234;
  v113 = v235;
  if ((v151 & 1) != 0)
  {
LABEL_17:
    v129 = v232;
    sub_1A9C461A8(v109, (uint64_t)v232);
    sub_1A9C461A8((uint64_t)v106, (uint64_t)v104);
LABEL_18:
    sub_1A9C94DDC((uint64_t)v104);
    sub_1A9C94DDC((uint64_t)v129);
    v130 = v230;
    v131 = v231;
LABEL_19:
    sub_1A9C461A8(v109, (uint64_t)v113);
    sub_1A9C461A8((uint64_t)v106, (uint64_t)v131);
LABEL_20:
    sub_1A9C94DDC((uint64_t)v131);
    sub_1A9C94DDC((uint64_t)v113);
LABEL_21:
    sub_1A9C461A8(v109, (uint64_t)v128);
    sub_1A9C461A8((uint64_t)v106, (uint64_t)v112);
LABEL_22:
    sub_1A9C94DDC((uint64_t)v112);
    sub_1A9C94DDC((uint64_t)v128);
    v133 = (uint64_t)v228;
    v132 = (uint64_t)v229;
    v134 = (uint64_t)v227;
LABEL_23:
    sub_1A9C461A8(v109, (uint64_t)v130);
    sub_1A9C461A8((uint64_t)v106, v111);
LABEL_24:
    sub_1A9C94DDC(v111);
    sub_1A9C94DDC((uint64_t)v130);
    sub_1A9C461A8(v109, v110);
    sub_1A9C461A8((uint64_t)v106, v134);
LABEL_25:
    sub_1A9C94DDC(v134);
    sub_1A9C94DDC(v110);
    sub_1A9C461A8(v109, v133);
    sub_1A9C461A8((uint64_t)v106, v132);
    goto LABEL_26;
  }
  v129 = v232;
  sub_1A9C461A8(v109, (uint64_t)v232);
  sub_1A9C461A8((uint64_t)v106, (uint64_t)v104);
  if (v146 != v149)
    goto LABEL_18;
LABEL_34:
  v152 = v144[13];
  v153 = (uint64_t)&v129[v152];
  v154 = (uint64_t)&v104[v152];
  v155 = v219;
  v156 = (uint64_t)&v219[*(int *)(v217 + 48)];
  v157 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C38720(v153, (uint64_t)v219, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1A9C38720(v154, v156, &qword_1ED2625E0, v157);
  v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48);
  v159 = v216;
  if (v158((uint64_t)v155, 1, v216) == 1)
  {
    sub_1A9C94DDC((uint64_t)v104);
    sub_1A9C94DDC((uint64_t)v232);
    v160 = v158(v156, 1, v159);
    v161 = v158;
    v112 = v233;
    v128 = v234;
    v113 = v235;
    v131 = v231;
    if (v160 == 1)
    {
      v242 = v161;
      sub_1A9B93BDC((uint64_t)v219, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      sub_1A9C461A8(v109, (uint64_t)v113);
      sub_1A9C461A8((uint64_t)v106, (uint64_t)v131);
      v162 = v217;
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  v163 = v215;
  sub_1A9C38720((uint64_t)v155, (uint64_t)v215, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v164 = v158(v156, 1, v159);
  v165 = v159;
  v112 = v233;
  if (v164 == 1)
  {
    sub_1A9C94DDC((uint64_t)v241);
    sub_1A9C94DDC((uint64_t)v232);
    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v163, v165);
    v128 = v234;
    v113 = v235;
    v131 = v231;
LABEL_39:
    sub_1A9C387E4((uint64_t)v219, (unint64_t *)&qword_1EEB482F0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v130 = v230;
    goto LABEL_19;
  }
  v242 = v158;
  v166 = v218;
  v167 = v214;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v156, v165);
  sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v168 = v163;
  v169 = v165;
  LODWORD(v239) = sub_1A9CE82A4();
  v170 = *(void (**)(_BYTE *, uint64_t))(v166 + 8);
  v162 = v217;
  v170(v167, v169);
  sub_1A9C94DDC((uint64_t)v241);
  sub_1A9C94DDC((uint64_t)v232);
  v170(v168, v169);
  sub_1A9B93BDC((uint64_t)v219, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v113 = v235;
  sub_1A9C461A8(v109, (uint64_t)v235);
  v131 = v231;
  sub_1A9C461A8((uint64_t)v106, (uint64_t)v231);
  v130 = v230;
  v128 = v234;
  if ((v239 & 1) == 0)
    goto LABEL_20;
LABEL_41:
  v171 = v223[12];
  v172 = (uint64_t)v131;
  v173 = (uint64_t)&v131[v171];
  v174 = v213;
  v175 = (uint64_t)&v213[*(int *)(v162 + 48)];
  v176 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C38720((uint64_t)&v113[v171], (uint64_t)v213, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1A9C38720(v173, v175, &qword_1ED2625E0, v176);
  v177 = v216;
  v178 = v242;
  if (v242((uint64_t)v174, 1, v216) == 1)
  {
    sub_1A9C94DDC(v172);
    sub_1A9C94DDC((uint64_t)v113);
    if (v178(v175, 1, v177) == 1)
    {
      sub_1A9B93BDC((uint64_t)v174, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      v128 = v234;
      sub_1A9C461A8(v109, (uint64_t)v234);
      v179 = v177;
      v112 = v233;
      sub_1A9C461A8((uint64_t)v106, (uint64_t)v233);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  v180 = v212;
  sub_1A9C38720((uint64_t)v174, (uint64_t)v212, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v178(v175, 1, v177) == 1)
  {
    sub_1A9C94DDC((uint64_t)v231);
    sub_1A9C94DDC((uint64_t)v235);
    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v180, v177);
LABEL_46:
    sub_1A9C387E4((uint64_t)v174, (unint64_t *)&qword_1EEB482F0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v130 = v230;
    v112 = v233;
    v128 = v234;
    goto LABEL_21;
  }
  v181 = v218;
  v182 = v175;
  v179 = v177;
  v183 = v214;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v182, v179);
  sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v184 = sub_1A9CE82A4();
  v185 = *(void (**)(_BYTE *, uint64_t))(v181 + 8);
  v185(v183, v179);
  sub_1A9C94DDC((uint64_t)v231);
  sub_1A9C94DDC((uint64_t)v235);
  v185(v180, v179);
  sub_1A9B93BDC((uint64_t)v174, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v128 = v234;
  sub_1A9C461A8(v109, (uint64_t)v234);
  v112 = v233;
  sub_1A9C461A8((uint64_t)v106, (uint64_t)v233);
  v130 = v230;
  if ((v184 & 1) == 0)
    goto LABEL_22;
LABEL_48:
  v186 = v223[11];
  v187 = (uint64_t)&v112[v186];
  v188 = v211;
  v189 = (uint64_t)&v211[*(int *)(v217 + 48)];
  v190 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1A9C38720((uint64_t)&v128[v186], (uint64_t)v211, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1A9C38720(v187, v189, &qword_1ED2625E0, v190);
  v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v242;
  if (v242((uint64_t)v188, 1, v179) == 1)
  {
    sub_1A9C94DDC((uint64_t)v233);
    sub_1A9C94DDC((uint64_t)v234);
    v192 = v191(v189, 1, v179);
    v133 = (uint64_t)v228;
    v132 = (uint64_t)v229;
    v134 = (uint64_t)v227;
    if (v192 == 1)
    {
      sub_1A9B93BDC((uint64_t)v188, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
      v130 = v230;
      sub_1A9C461A8(v109, (uint64_t)v230);
      sub_1A9C461A8((uint64_t)v106, v111);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  v193 = v210;
  sub_1A9C38720((uint64_t)v188, (uint64_t)v210, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v191(v189, 1, v179) == 1)
  {
    sub_1A9C94DDC((uint64_t)v233);
    sub_1A9C94DDC((uint64_t)v234);
    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v193, v179);
    v133 = (uint64_t)v228;
    v132 = (uint64_t)v229;
    v134 = (uint64_t)v227;
LABEL_53:
    sub_1A9C387E4((uint64_t)v188, (unint64_t *)&qword_1EEB482F0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v130 = v230;
    goto LABEL_23;
  }
  v194 = v218;
  v195 = v214;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v218 + 32))(v214, v189, v179);
  sub_1A9B92B9C(&qword_1EEB482F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v196 = v193;
  v197 = (uint64_t)v188;
  v198 = sub_1A9CE82A4();
  v199 = *(void (**)(_BYTE *, uint64_t))(v194 + 8);
  v199(v195, v179);
  sub_1A9C94DDC((uint64_t)v233);
  sub_1A9C94DDC((uint64_t)v234);
  v199(v196, v179);
  sub_1A9B93BDC(v197, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v130 = v230;
  sub_1A9C461A8(v109, (uint64_t)v230);
  sub_1A9C461A8((uint64_t)v106, v111);
  v133 = (uint64_t)v228;
  v132 = (uint64_t)v229;
  v134 = (uint64_t)v227;
  if ((v198 & 1) == 0)
    goto LABEL_24;
LABEL_55:
  v200 = v223;
  v201 = v223[7];
  v202 = (uint64_t)v130;
  v242 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))&v130[v201];
  v203 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + v201);
  sub_1A9C94DDC(v111);
  sub_1A9C94DDC(v202);
  sub_1A9C461A8(v109, v110);
  sub_1A9C461A8((uint64_t)v106, v134);
  if (v242 != v203)
    goto LABEL_25;
  v204 = *(unsigned __int8 *)(v110 + v200[8]);
  sub_1A9C94DDC(v110);
  v205 = *(unsigned __int8 *)(v134 + v200[8]);
  sub_1A9C94DDC(v134);
  sub_1A9C461A8(v109, v133);
  sub_1A9C461A8((uint64_t)v106, v132);
  if (v204 == v205)
  {
    v206 = *(_BYTE *)(v133 + v200[9]);
    sub_1A9C94DDC(v133);
    v207 = *(_BYTE *)(v132 + v200[9]);
    sub_1A9C94DDC(v132);
    v135 = v206 ^ v207 ^ 1;
    return v135 & 1;
  }
LABEL_26:
  sub_1A9C94DDC(v132);
  sub_1A9C94DDC(v133);
  v135 = 0;
  return v135 & 1;
}

uint64_t sub_1A9C9489C(unint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  id v31;
  __int128 v32[12];
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v31 = a2;
  v7 = type metadata accessor for ScheduleOccurrenceViewModel();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    if (!v12)
      return v13;
    v34 = MEMORY[0x1E0DEE9D8];
    result = sub_1A9BE05A0(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
      break;
    v28 = v4;
    v15 = 0;
    v13 = v34;
    v30 = a1 & 0xC000000000000001;
    v29 = v31 == 0;
    while (v12 != v15)
    {
      if (v30)
        v16 = (id)MEMORY[0x1AF41F600](v15, a1);
      else
        v16 = *(id *)(a1 + 8 * v15 + 32);
      v17 = v16;
      if (v31)
      {
        objc_msgSend(v31, sel_windDownTime);
        v19 = v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = *(_OWORD *)(a3 + 176);
      v32[10] = *(_OWORD *)(a3 + 160);
      v32[11] = v20;
      v33 = *(_QWORD *)(a3 + 192);
      v21 = *(_OWORD *)(a3 + 112);
      v32[6] = *(_OWORD *)(a3 + 96);
      v32[7] = v21;
      v22 = *(_OWORD *)(a3 + 144);
      v32[8] = *(_OWORD *)(a3 + 128);
      v32[9] = v22;
      v23 = *(_OWORD *)(a3 + 48);
      v32[2] = *(_OWORD *)(a3 + 32);
      v32[3] = v23;
      v24 = *(_OWORD *)(a3 + 80);
      v32[4] = *(_OWORD *)(a3 + 64);
      v32[5] = v24;
      v25 = *(_OWORD *)a3;
      v32[1] = *(_OWORD *)(a3 + 16);
      v32[0] = v25;
      sub_1A9C94D04(a3);
      ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v17, v19, v29, v32, (uint64_t)v11);

      v34 = v13;
      v27 = *(_QWORD *)(v13 + 16);
      v26 = *(_QWORD *)(v13 + 24);
      v4 = v27 + 1;
      if (v27 >= v26 >> 1)
      {
        sub_1A9BE05A0(v26 > 1, v27 + 1, 1);
        v13 = v34;
      }
      ++v15;
      *(_QWORD *)(v13 + 16) = v4;
      sub_1A9C92F78((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v27);
      if (v12 == v15)
        return v13;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v12 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void _s13SleepHealthUI27ScheduleOccurrenceViewModelV013makeRepeatingeF6Models05sleepD09viewStyleSayACGSo09HKSPSleepD0CSg_AC0fM0VtFZ_0(void *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  unint64_t v18;
  id v19;
  _OWORD v20[12];
  uint64_t v21;

  v2 = *(_OWORD *)(a2 + 160);
  v3 = *(_OWORD *)(a2 + 176);
  v4 = *(_OWORD *)(a2 + 128);
  v20[9] = *(_OWORD *)(a2 + 144);
  v20[10] = v2;
  v20[11] = v3;
  v6 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a2 + 192);
  v20[7] = v5;
  v20[8] = v4;
  v7 = *(_OWORD *)(a2 + 48);
  v20[2] = *(_OWORD *)(a2 + 32);
  v20[3] = v7;
  v8 = *(_OWORD *)(a2 + 64);
  v20[5] = *(_OWORD *)(a2 + 80);
  v20[6] = v6;
  v20[4] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v9;
  v10 = MEMORY[0x1E0DEE9D8];
  if (a1)
  {
    v12 = objc_msgSend(a1, sel_occurrences);
    sub_1A9C977A0();
    v13 = sub_1A9CE83DC();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (v14)
        goto LABEL_4;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14)
      {
LABEL_4:
        if (v14 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
            v16 = (id)MEMORY[0x1AF41F600](i, v13);
          else
            v16 = *(id *)(v13 + 8 * i + 32);
          v17 = v16;
          if ((objc_msgSend(v16, sel_isSingleDayOverride) & 1) != 0)
          {

          }
          else
          {
            sub_1A9CE89F4();
            sub_1A9CE8A24();
            sub_1A9CE8A30();
            sub_1A9CE8A00();
          }
        }
        swift_bridgeObjectRelease();
        v18 = v10;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    v19 = a1;
    sub_1A9C94D04((uint64_t)v20);
    sub_1A9C9489C(v18, a1, (uint64_t)v20);
    sub_1A9C460D0((uint64_t)v20);
    swift_release();

  }
}

uint64_t sub_1A9C94D04(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9C94DDC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScheduleOccurrenceViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A9C94E1C()
{
  unint64_t result;

  result = qword_1EEB49070;
  if (!qword_1EEB49070)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.AlarmState, &type metadata for ScheduleOccurrenceViewModel.AlarmState);
    atomic_store(result, (unint64_t *)&qword_1EEB49070);
  }
  return result;
}

uint64_t sub_1A9C94E60()
{
  return sub_1A9B92B9C(&qword_1EEB49078, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel, (uint64_t)&protocol conformance descriptor for ScheduleOccurrenceViewModel);
}

unint64_t sub_1A9C94E90()
{
  unint64_t result;

  result = qword_1EEB49080;
  if (!qword_1EEB49080)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle.TextStyle, &type metadata for ScheduleOccurrenceViewModel.ViewStyle.TextStyle);
    atomic_store(result, (unint64_t *)&qword_1EEB49080);
  }
  return result;
}

unint64_t sub_1A9C94ED8()
{
  unint64_t result;

  result = qword_1EEB49088;
  if (!qword_1EEB49088)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle.Options, &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB49088);
  }
  return result;
}

unint64_t sub_1A9C94F20()
{
  unint64_t result;

  result = qword_1EEB49090;
  if (!qword_1EEB49090)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle.Options, &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB49090);
  }
  return result;
}

unint64_t sub_1A9C94F68()
{
  unint64_t result;

  result = qword_1EEB49098;
  if (!qword_1EEB49098)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle.Options, &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB49098);
  }
  return result;
}

unint64_t sub_1A9C94FB0()
{
  unint64_t result;

  result = qword_1EEB490A0;
  if (!qword_1EEB490A0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle.Options, &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB490A0);
  }
  return result;
}

unint64_t sub_1A9C94FF8()
{
  unint64_t result;

  result = qword_1EEB490A8;
  if (!qword_1EEB490A8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceViewModel.ViewStyle, &type metadata for ScheduleOccurrenceViewModel.ViewStyle);
    atomic_store(result, (unint64_t *)&qword_1EEB490A8);
  }
  return result;
}

uint64_t dispatch thunk of ScheduleOccurrenceViewModelProviding.viewModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ScheduleOccurrenceViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  char *v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v45;
  int *v46;
  uint64_t *v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    v12 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A9CE60C0();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v13 = a3[5];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    if (v9((uint64_t *)((char *)a2 + v13), 1, v7))
    {
      sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v15, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    v21 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    v22 = a3[10];
    v23 = a3[11];
    v46 = a3;
    v24 = (char *)a1 + v22;
    v25 = (char *)a2 + v22;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    v24[24] = v25[24];
    v24[25] = v25[25];
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    v24[40] = v25[40];
    *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
    v24[56] = v25[56];
    v24[57] = v25[57];
    *((_QWORD *)v24 + 8) = *((_QWORD *)v25 + 8);
    v24[72] = v25[72];
    *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
    v24[88] = v25[88];
    v24[89] = v25[89];
    *((_QWORD *)v24 + 12) = *((_QWORD *)v25 + 12);
    v24[104] = v25[104];
    *((_QWORD *)v24 + 14) = *((_QWORD *)v25 + 14);
    v24[120] = v25[120];
    v24[121] = v25[121];
    *((_QWORD *)v24 + 16) = *((_QWORD *)v25 + 16);
    v24[136] = v25[136];
    *((_QWORD *)v24 + 18) = *((_QWORD *)v25 + 18);
    v24[152] = v25[152];
    v24[153] = v25[153];
    *((_QWORD *)v24 + 20) = *((_QWORD *)v25 + 20);
    v24[168] = v25[168];
    v24[184] = v25[184];
    v24[185] = v25[185];
    v26 = *((_QWORD *)v25 + 22);
    *((_QWORD *)v24 + 24) = *((_QWORD *)v25 + 24);
    v47 = a2;
    __dst = (char *)a1 + v23;
    v42 = (char *)a2 + v23;
    *((_QWORD *)v24 + 22) = v26;
    v27 = sub_1A9CE62E8();
    v45 = *(_QWORD *)(v27 - 8);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v43(v42, 1, v27))
    {
      sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v45;
    }
    else
    {
      v29 = v45;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(__dst, v42, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v27);
    }
    v30 = v46[12];
    v12 = a1;
    v31 = (char *)a1 + v30;
    v32 = (char *)v47 + v30;
    if (v43((char *)v47 + v30, 1, v27))
    {
      sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v32, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v27);
    }
    v34 = v46[13];
    v35 = (char *)a1 + v34;
    v36 = (char *)v47 + v34;
    if (v43((char *)v47 + v34, 1, v27))
    {
      sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v35, v36, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v27);
    }
    v38 = v46[14];
    v39 = *(void **)((char *)v47 + v38);
    *(uint64_t *)((char *)a1 + v38) = (uint64_t)v39;
    v40 = v39;
  }
  return v12;
}

void destroy for ScheduleOccurrenceViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + a2[5];
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v8 = a1 + a2[11];
  v9 = sub_1A9CE62E8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = a1 + a2[12];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  v13 = a1 + a2[13];
  if (!v11(v13, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);

}

char *initializeWithCopy for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v42;
  int *v43;
  char *v44;

  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v18] = a2[v18];
  v19 = a3[10];
  v20 = a3[11];
  v43 = a3;
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  v21[24] = v22[24];
  v21[25] = v22[25];
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  v21[40] = v22[40];
  *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
  v21[56] = v22[56];
  v21[57] = v22[57];
  *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
  v21[72] = v22[72];
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  v21[88] = v22[88];
  v21[89] = v22[89];
  *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
  v21[104] = v22[104];
  *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
  v21[120] = v22[120];
  v21[121] = v22[121];
  *((_QWORD *)v21 + 16) = *((_QWORD *)v22 + 16);
  v21[136] = v22[136];
  *((_QWORD *)v21 + 18) = *((_QWORD *)v22 + 18);
  v21[152] = v22[152];
  v21[153] = v22[153];
  *((_QWORD *)v21 + 20) = *((_QWORD *)v22 + 20);
  v21[168] = v22[168];
  v21[184] = v22[184];
  v21[185] = v22[185];
  v23 = *((_QWORD *)v22 + 22);
  *((_QWORD *)v21 + 24) = *((_QWORD *)v22 + 24);
  v44 = a2;
  __dst = &a1[v20];
  v39 = &a2[v20];
  *((_QWORD *)v21 + 22) = v23;
  v24 = sub_1A9CE62E8();
  v42 = *(_QWORD *)(v24 - 8);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v40(v39, 1, v24))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v26 = v42;
  }
  else
  {
    v26 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v39, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v24);
  }
  v27 = v43[12];
  v28 = &a1[v27];
  v29 = &v44[v27];
  if (v40(&v44[v27], 1, v24))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v24);
  }
  v31 = v43[13];
  v32 = &a1[v31];
  v33 = &v44[v31];
  if (v40(&v44[v31], 1, v24))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v32, v33, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v24);
  }
  v35 = v43[14];
  v36 = *(void **)&v44[v35];
  *(_QWORD *)&a1[v35] = v36;
  v37 = v36;
  return a1;
}

char *assignWithCopy for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;

  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  v22 = a3[10];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  swift_retain();
  swift_release();
  v23[8] = v24[8];
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  swift_retain();
  swift_release();
  v23[24] = v24[24];
  v23[25] = v24[25];
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  swift_retain();
  swift_release();
  v23[40] = v24[40];
  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  swift_retain();
  swift_release();
  v23[56] = v24[56];
  v23[57] = v24[57];
  *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
  swift_retain();
  swift_release();
  v23[72] = v24[72];
  *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
  swift_retain();
  swift_release();
  v23[88] = v24[88];
  v23[89] = v24[89];
  *((_QWORD *)v23 + 12) = *((_QWORD *)v24 + 12);
  swift_retain();
  swift_release();
  v23[104] = v24[104];
  *((_QWORD *)v23 + 14) = *((_QWORD *)v24 + 14);
  swift_retain();
  swift_release();
  v23[120] = v24[120];
  v23[121] = v24[121];
  *((_QWORD *)v23 + 16) = *((_QWORD *)v24 + 16);
  swift_retain();
  swift_release();
  v23[136] = v24[136];
  *((_QWORD *)v23 + 18) = *((_QWORD *)v24 + 18);
  swift_retain();
  swift_release();
  v23[152] = v24[152];
  v23[153] = v24[153];
  *((_QWORD *)v23 + 20) = *((_QWORD *)v24 + 20);
  swift_retain();
  swift_release();
  v23[168] = v24[168];
  *((_QWORD *)v23 + 22) = *((_QWORD *)v24 + 22);
  swift_retain();
  swift_release();
  v23[184] = v24[184];
  v23[185] = v24[185];
  *((_QWORD *)v23 + 24) = *((_QWORD *)v24 + 24);
  v25 = a3[11];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_1A9CE62E8();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_18:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_19:
  v34 = a3[12];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v37 = v30(&a1[v34], 1, v28);
  v38 = v30(v36, 1, v28);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v35, v36, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v28);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
LABEL_24:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v35, v36, v28);
LABEL_25:
  v40 = a3[13];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = v30(&a1[v40], 1, v28);
  v44 = v30(v42, 1, v28);
  if (!v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v41, v42, v28);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v41, v28);
    goto LABEL_30;
  }
  if (v44)
  {
LABEL_30:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v41, v42, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v41, 0, 1, v28);
LABEL_31:
  v46 = a3[14];
  v47 = *(void **)&a1[v46];
  v48 = *(void **)&a2[v46];
  *(_QWORD *)&a1[v46] = v48;
  v49 = v48;

  return a1;
}

char *initializeWithTake for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v18] = a2[v18];
  v19 = a3[10];
  v20 = a3[11];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *((_QWORD *)v21 + 24) = *((_QWORD *)v22 + 24);
  v23 = *((_OWORD *)v22 + 11);
  *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
  *((_OWORD *)v21 + 11) = v23;
  v24 = *((_OWORD *)v22 + 7);
  *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
  *((_OWORD *)v21 + 7) = v24;
  v25 = *((_OWORD *)v22 + 9);
  *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
  *((_OWORD *)v21 + 9) = v25;
  v26 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v26;
  v27 = *((_OWORD *)v22 + 5);
  *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
  *((_OWORD *)v21 + 5) = v27;
  v28 = *((_OWORD *)v22 + 1);
  v29 = &a1[v20];
  v30 = &a2[v20];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  v31 = sub_1A9CE62E8();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v33(v30, 1, v31))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  if (v33(&a2[v35], 1, v31))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v36, v37, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v36, 0, 1, v31);
  }
  v39 = a3[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  if (v33(&a2[v39], 1, v31))
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v40, v41, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v31);
  }
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  return a1;
}

char *assignWithTake for ScheduleOccurrenceViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v22 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v22] = a2[v22];
  v23 = a3[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  swift_release();
  v24[8] = v25[8];
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  swift_release();
  v24[24] = v25[24];
  v24[25] = v25[25];
  *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
  swift_release();
  v24[40] = v25[40];
  *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
  swift_release();
  v24[56] = v25[56];
  v24[57] = v25[57];
  *((_QWORD *)v24 + 8) = *((_QWORD *)v25 + 8);
  swift_release();
  v24[72] = v25[72];
  *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
  swift_release();
  v24[88] = v25[88];
  v24[89] = v25[89];
  *((_QWORD *)v24 + 12) = *((_QWORD *)v25 + 12);
  swift_release();
  v24[104] = v25[104];
  *((_QWORD *)v24 + 14) = *((_QWORD *)v25 + 14);
  swift_release();
  v24[120] = v25[120];
  v24[121] = v25[121];
  *((_QWORD *)v24 + 16) = *((_QWORD *)v25 + 16);
  swift_release();
  v24[136] = v25[136];
  *((_QWORD *)v24 + 18) = *((_QWORD *)v25 + 18);
  swift_release();
  v24[152] = v25[152];
  v24[153] = v25[153];
  *((_QWORD *)v24 + 20) = *((_QWORD *)v25 + 20);
  swift_release();
  v24[168] = v25[168];
  *((_QWORD *)v24 + 22) = *((_QWORD *)v25 + 22);
  swift_release();
  v24[184] = v25[184];
  v24[185] = v25[185];
  *((_QWORD *)v24 + 24) = *((_QWORD *)v25 + 24);
  v26 = a3[11];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = sub_1A9CE62E8();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_18:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_19:
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = v31(&a1[v35], 1, v29);
  v39 = v31(v37, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v36, v37, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v36, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
LABEL_24:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v36, v37, v29);
LABEL_25:
  v41 = a3[13];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v44 = v31(&a1[v41], 1, v29);
  v45 = v31(v43, 1, v29);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v42, v43, v29);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v42, v29);
    goto LABEL_30;
  }
  if (v45)
  {
LABEL_30:
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v42, v43, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v42, 0, 1, v29);
LABEL_31:
  v47 = a3[14];
  v48 = *(void **)&a1[v47];
  *(_QWORD *)&a1[v47] = *(_QWORD *)&a2[v47];

  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C96BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1A9C96CAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1A9B92F34(0, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
      return;
    }
    sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_1A9C96D80()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A9B92F34(319, &qword_1EEB44248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    sub_1A9B92F34(319, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.AlarmState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9C96EC4 + 4 * byte_1A9CF4E25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9C96EF8 + 4 * byte_1A9CF4E20[v4]))();
}

uint64_t sub_1A9C96EF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C96F00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C96F08);
  return result;
}

uint64_t sub_1A9C96F14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C96F1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9C96F20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C96F28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.AlarmState()
{
  return &type metadata for ScheduleOccurrenceViewModel.AlarmState;
}

uint64_t destroy for ScheduleOccurrenceViewModel.ViewStyle()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for ScheduleOccurrenceViewModel.ViewStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 200))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 200) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle;
}

uint64_t destroy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceViewModel.ViewStyle.TextStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle.TextStyle()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle.TextStyle;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceViewModel.ViewStyle.Options()
{
  return &type metadata for ScheduleOccurrenceViewModel.ViewStyle.Options;
}

unint64_t sub_1A9C977A0()
{
  unint64_t result;

  result = qword_1EEB43540;
  if (!qword_1EEB43540)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB43540);
  }
  return result;
}

id sub_1A9C977DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  objc_super v30;

  v4 = &v3[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  v5 = (void *)*MEMORY[0x1E0DC4B10];
  v6 = (void *)objc_opt_self();
  v7 = v3;
  v8 = objc_msgSend(v6, sel_hk_sleepKeyColor);
  v9 = *MEMORY[0x1E0DC1448];
  v10 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v11 = v5;
  v12 = v8;
  v13 = objc_msgSend(v10, sel_init);
  v14 = v13;
  if (v12)
    objc_msgSend(v13, sel_setTextColor_, v12);
  v15 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v16 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v11, 0, 0, 0, 0, 0, 0, v9, 0);
  objc_msgSend(v14, sel_setFont_, v16);

  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v14, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v14, sel_setLineBreakMode_, 0);
  objc_msgSend(v14, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v7[v15] = v14;
  v17 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel;
  v18 = (void *)*MEMORY[0x1E0DC4A88];
  v19 = *MEMORY[0x1E0DC1420];
  v20 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v21 = v18;
  v22 = objc_msgSend(v20, sel_init);
  v23 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v21, 0, 1, 0, 0, 0, 0, v19, 0);
  objc_msgSend(v22, sel_setFont_, v23);

  objc_msgSend(v22, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v22, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v22, sel_setLineBreakMode_, 0);
  objc_msgSend(v22, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v7[v17] = v22;

  if (a3)
  {
    v24 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  v30.receiver = v7;
  v30.super_class = (Class)type metadata accessor for ConfirmationListItemTableViewCell();
  v25 = objc_msgSendSuper2(&v30, sel_initWithStyle_reuseIdentifier_, a1, v24);

  v26 = v25;
  objc_msgSend(v26, sel_setAccessoryType_, 0);
  objc_msgSend(v26, sel_setSelectionStyle_, 0);
  sub_1A9C97B7C();

  return v26;
}

void sub_1A9C97B7C()
{
  char *v0;
  void *v1;
  uint64_t inited;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;

  v1 = v0;
  sub_1A9BB7420();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEDE30;
  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel];
  *(_QWORD *)(inited + 32) = v3;
  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel];
  *(_QWORD *)(inited + 40) = v4;
  v11 = inited;
  sub_1A9CE83E8();
  v5 = v3;
  v6 = v4;
  v7 = objc_msgSend(v0, sel_contentView);
  UIView.addSubviews(_:useAutoLayout:)((Swift::OpaquePointer)v11, 1);

  v8 = objc_msgSend(v1, sel_contentView);
  UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v11, 4.0, 16.0, 0.0, 16.0, 0.0);
  swift_bridgeObjectRelease();

  v9 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v10 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_activateConstraints_, v10);

}

id sub_1A9C97CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA29C(v2, (uint64_t)v12);
  if (!v13)
  {
    sub_1A9BEDB34((uint64_t)v12, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v14 = 0u;
    v15 = 0u;
    v16 = 0;
    goto LABEL_9;
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  sub_1A9B94928(0, &qword_1EEB491B8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    goto LABEL_9;
  }
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_9:
    sub_1A9BEDB34((uint64_t)&v14, &qword_1EEB491B0, &qword_1EEB491B8);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel), sel_setText_, 0);
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel), sel_setText_, 0);
  }
  sub_1A9B949B8(&v14, (uint64_t)v17);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v4 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v5 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setText_, v5, 0xE000000000000000);

  v6 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel);
  v7 = __swift_project_boxed_opaque_existential_1Tm(v17, v18);
  sub_1A9BC654C(*v7, *((_BYTE *)v7 + 8));
  v8 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setText_, v8);

  __swift_project_boxed_opaque_existential_1Tm(v17, v18);
  v9 = sub_1A9CE68DC();
  sub_1A9C97F74(v9, v10);
  swift_bridgeObjectRelease();
  return (id)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
}

void sub_1A9C97F74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (a2)
  {
    v3 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel);
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    v4 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setAccessibilityIdentifier_, v4);

    v5 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel);
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    v6 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  }
  else
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel), sel_setAccessibilityIdentifier_, 0);
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel), sel_setAccessibilityIdentifier_, 0);
  }
}

id sub_1A9C980D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConfirmationListItemTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ConfirmationListItemTableViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1A9C98188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  return sub_1A9BCA29C(v3, a1);
}

uint64_t sub_1A9C981D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA1C8(a1, v3);
  swift_endAccess();
  sub_1A9C97CCC();
  return sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
}

id (*sub_1A9C9825C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9C982A4;
}

id sub_1A9C982A4(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9C97CCC();
  return result;
}

uint64_t sub_1A9C982D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CF5424, a3);
  return sub_1A9CE67E0();
}

void sub_1A9C98338(uint64_t a1, uint64_t a2)
{
  sub_1A9C97F74(a1, a2);
}

void sub_1A9C98358()
{
  char *v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_item];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  v3 = (void *)*MEMORY[0x1E0DC4B10];
  v4 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  v5 = *MEMORY[0x1E0DC1448];
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v7 = v3;
  v8 = v4;
  v9 = objc_msgSend(v6, sel_init);
  v10 = v9;
  if (v8)
    objc_msgSend(v9, sel_setTextColor_, v8);
  v11 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_titleLabel;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v12 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v7, 0, 0, 0, 0, 0, 0, v5, 0);
  objc_msgSend(v10, sel_setFont_, v12);

  objc_msgSend(v10, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v10, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v10, sel_setLineBreakMode_, 0);
  objc_msgSend(v10, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v1[v11] = v10;
  v13 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationListItemTableViewCell_detailLabel;
  v14 = (void *)*MEMORY[0x1E0DC4A88];
  v15 = *MEMORY[0x1E0DC1420];
  v16 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v17 = v14;
  v18 = objc_msgSend(v16, sel_init);
  v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v17, 0, 1, 0, 0, 0, 0, v15, 0);
  objc_msgSend(v18, sel_setFont_, v19);

  objc_msgSend(v18, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v18, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v18, sel_setLineBreakMode_, 0);
  objc_msgSend(v18, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v1[v13] = v18;

  sub_1A9CE8A84();
  __break(1u);
}

id CurrentUserModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CurrentUserModel.init()()
{
  void *v0;
  id v1;
  char *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  objc_super v16;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_allocWithZone(MEMORY[0x1E0C97298]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_init);
  *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_contactStore] = v3;
  sub_1A9BB7420();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CEDE30;
  v5 = (void *)*MEMORY[0x1E0C966D0];
  v6 = (void *)*MEMORY[0x1E0C967A0];
  *(_QWORD *)(v4 + 32) = *MEMORY[0x1E0C966D0];
  *(_QWORD *)(v4 + 40) = v6;
  sub_1A9CE83E8();
  sub_1A9C987E4();
  v7 = v5;
  v8 = v6;
  v9 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v17[0] = 0;
  v10 = objc_msgSend(v3, sel__ios_meContactWithKeysToFetch_error_, v9, v17);

  v11 = v17[0];
  if (v10)
  {
    *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact] = v10;
    v12 = v11;
  }
  else
  {
    v13 = v17[0];
    v14 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact] = 0;
  }

  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for CurrentUserModel();
  return objc_msgSendSuper2(&v16, sel_init);
}

unint64_t sub_1A9C987E4()
{
  unint64_t result;

  result = qword_1EEB491D0;
  if (!qword_1EEB491D0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB491D0);
  }
  return result;
}

uint64_t type metadata accessor for CurrentUserModel()
{
  return objc_opt_self();
}

uint64_t sub_1A9C98878()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI16CurrentUserModel_meContact);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v2, sel_nickname);
  sub_1A9CE82E0();

  v4 = sub_1A9CE8328();
  swift_bridgeObjectRelease();
  if (v4 < 1)
  {
    v6 = objc_msgSend(v2, sel_givenName);
    sub_1A9CE82E0();

    v7 = sub_1A9CE8328();
    swift_bridgeObjectRelease();
    if (v7 >= 1)
    {
      v5 = objc_msgSend(v2, sel_givenName);
      goto LABEL_6;
    }

    return 0;
  }
  v5 = objc_msgSend(v2, sel_nickname);
LABEL_6:
  v8 = v5;
  v9 = sub_1A9CE82E0();

  return v9;
}

id CurrentUserModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentUserModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for CurrentUserModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CurrentUserModel.firstName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t WindDownPickerItem.baseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WindDownPickerItem.baseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*WindDownPickerItem.baseIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t WindDownPickerItem.reuseIdentifier.getter()
{
  type metadata accessor for WindDownTimePickerCollectionViewCell();
  sub_1A9C762B8();
  return sub_1A9CE6774();
}

uint64_t WindDownPickerItem.uniqueIdentifier.getter()
{
  uint64_t v0;

  sub_1A9C98B94();
  v0 = sub_1A9CE82F8();
  sub_1A9CE84B4();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_1A9C98B94()
{
  unint64_t result;

  result = qword_1EEB49210;
  if (!qword_1EEB49210)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB49210);
  }
  return result;
}

uint64_t WindDownPickerItem.init(windDownDurationPublisher:maxDuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v6 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = 0x7065656C53;
  *(_QWORD *)(v6 + 56) = 0xE500000000000000;
  *(_QWORD *)(v6 + 64) = 0x736E6F6974704FLL;
  *(_QWORD *)(v6 + 72) = 0xE700000000000000;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2A68);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v8 = sub_1A9CE8280();
  v10 = v9;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

unint64_t sub_1A9C98D0C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A9C98D38();
  result = sub_1A9C98D7C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A9C98D38()
{
  unint64_t result;

  result = qword_1EEB49218;
  if (!qword_1EEB49218)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WindDownPickerItem, &type metadata for WindDownPickerItem);
    atomic_store(result, (unint64_t *)&qword_1EEB49218);
  }
  return result;
}

unint64_t sub_1A9C98D7C()
{
  unint64_t result;

  result = qword_1EEB49220;
  if (!qword_1EEB49220)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for WindDownPickerItem, &type metadata for WindDownPickerItem);
    atomic_store(result, (unint64_t *)&qword_1EEB49220);
  }
  return result;
}

uint64_t sub_1A9C98DC0()
{
  type metadata accessor for WindDownTimePickerCollectionViewCell();
  sub_1A9C762B8();
  return sub_1A9CE6774();
}

uint64_t destroy for WindDownPickerItem()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WindDownPickerItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WindDownPickerItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for WindDownPickerItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WindDownPickerItem()
{
  return &type metadata for WindDownPickerItem;
}

void sub_1A9C98F2C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void (*v9)(_BYTE *, _QWORD *);
  _BYTE v10[24];
  _QWORD v11[3];
  _QWORD *v12;

  v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    v2 = v1;
    v3 = (uint64_t)v0 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
    swift_beginAccess();
    sub_1A9C99460(v3, (uint64_t)v11);
    v4 = v12;
    if (v12)
    {
      v5 = __swift_project_boxed_opaque_existential_1Tm(v11, (uint64_t)v12);
      v6 = *(v4 - 1);
      MEMORY[0x1E0C80A78](v5, v5);
      v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v6 + 16))(v8);
      sub_1A9BE2C2C((uint64_t)v11);
      v9 = *(void (**)(_BYTE *, _QWORD *))(v6 + 8);
      swift_bridgeObjectRetain();
      v9(v8, v4);
      v4 = (_QWORD *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A9BE2C2C((uint64_t)v11);
    }
    objc_msgSend(v2, sel_setText_, v4);

  }
  sub_1A9C99074();
}

void sub_1A9C99074()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  void (*v10)(_BYTE *, uint64_t);
  id v11;
  _BYTE v12[24];
  _QWORD v13[3];
  uint64_t v14;

  v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    v2 = v1;
    v3 = (uint64_t)v0 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
    swift_beginAccess();
    sub_1A9C99460(v3, (uint64_t)v13);
    v4 = v14;
    if (v14)
    {
      v5 = __swift_project_boxed_opaque_existential_1Tm(v13, v14);
      v6 = *(_QWORD *)(v4 - 8);
      MEMORY[0x1E0C80A78](v5, v5);
      v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v6 + 16))(v8);
      sub_1A9BE2C2C((uint64_t)v13);
      v9 = (void *)*((_QWORD *)v8 + 2);
      v10 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v11 = v9;
      v10(v8, v4);
      if (v9)
      {
LABEL_7:
        objc_msgSend(v2, sel_setTextColor_, v11);

        return;
      }
    }
    else
    {
      sub_1A9BE2C2C((uint64_t)v13);
    }
    v11 = objc_msgSend(v0, sel_tintColor);
    goto LABEL_7;
  }
}

id sub_1A9C992CC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TextTableViewCell()
{
  return objc_opt_self();
}

id sub_1A9C9932C(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  uint64_t ObjectType;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  objc_super v16;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = &v2[OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  v7 = (*(uint64_t (**)(void))(ObjectType + 112))();
  if (a2)
  {
    v8 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for TextTableViewCell();
  v9 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, v7, v8);

  v10 = v9;
  objc_msgSend(v10, sel_setAccessoryType_, 0);
  v11 = objc_msgSend(v10, sel_textLabel);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, sel_setNumberOfLines_, 0);

  }
  v13 = objc_msgSend(v10, sel_textLabel);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, sel_setLineBreakMode_, 0);

  }
  return v10;
}

uint64_t sub_1A9C99460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BE2B84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C994A4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[4];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  char v77;
  char *v78;
  char v79[24];
  ValueMetadata *v80;
  _UNKNOWN **v81;

  v63 = a8;
  v62 = a7;
  v61 = a6;
  v60 = a5;
  v67 = a4;
  v68 = a2;
  v69 = a3;
  v11 = sub_1A9CE6234();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB48C00, v16, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v57 - v19;
  sub_1A9C0143C(0);
  v65 = *(_QWORD *)(v21 - 8);
  v66 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v64 = (char *)v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = a9;
  v71 = v12;
  v72 = v11;
  if ((a1 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
  }
  else if (qword_1ED2626A8 != -1)
  {
    swift_once();
  }
  v24 = (id)qword_1ED264F90;
  v58 = sub_1A9CE6168();
  v73 = v25;

  swift_bridgeObjectRelease();
  v26 = (id)qword_1ED264F90;
  v55 = 0xE000000000000000;
  v57[3] = sub_1A9CE6168();
  v59 = v27;

  swift_bridgeObjectRelease();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v28 = (id)qword_1ED264F90;
  v29 = sub_1A9CE6168();
  v31 = v30;

  swift_bridgeObjectRelease();
  v32 = (id)qword_1ED264F90;
  v55 = 0xE000000000000000;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  v33 = (id)HKSPScreenTimeURL();
  if (v33)
  {
    v34 = v33;
    sub_1A9CE621C();

    v35 = v71;
    v36 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v20, v15, v72);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v20, 0, 1, v36);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v20, 1, v36);
    if ((_DWORD)result != 1)
    {
      v57[2] = v57;
      v80 = &type metadata for DeepLinkOpener;
      v81 = &protocol witness table for DeepLinkOpener;
      v76[0] = v60;
      v76[1] = v61;
      v77 = v62 & 1;
      v78 = v63;
      v74 = v58;
      v75 = v73;
      v39 = MEMORY[0x1E0C80A78](result, v38);
      v57[-10] = v76;
      v57[-9] = v29;
      v57[1] = v31;
      MEMORY[0x1E0C80A78](v39, v40);
      v63 = v20;
      sub_1A9B92F34(0, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
      v42 = v41;
      sub_1A9C74924(0, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
      v44 = v43;
      v45 = sub_1A9BA8EA4();
      v46 = sub_1A9C7603C();
      v47 = sub_1A9C01758();
      v55 = v46;
      v56 = v47;
      v53 = MEMORY[0x1E0CDDD58];
      v54 = v45;
      v51 = v42;
      v52 = v44;
      v49 = MEMORY[0x1E0CDDD78];
      v50 = MEMORY[0x1E0DEA968];
      v48 = v64;
      sub_1A9CE7B9C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v63, v36);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v70, v48, v66);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56))(v20, 1, 1, v72);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C99B04@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75[24];
  ValueMetadata *v76;
  _UNKNOWN **v77;

  v64 = a4;
  v65 = a2;
  v66 = a3;
  v7 = sub_1A9CE6234();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB48C00, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v72 = (char *)v57 - v15;
  sub_1A9C9CBC8(0);
  v62 = *(_QWORD *)(v16 - 8);
  v63 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v61 = (char *)v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a5;
  v68 = v8;
  v69 = v7;
  if ((a1 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
  }
  else if (qword_1ED2626A8 != -1)
  {
    swift_once();
  }
  v19 = (id)qword_1ED264F90;
  v59 = sub_1A9CE6168();
  v70 = v20;

  swift_bridgeObjectRelease();
  v21 = (id)qword_1ED264F90;
  v55 = 0xE000000000000000;
  v58 = sub_1A9CE6168();
  v60 = v22;

  swift_bridgeObjectRelease();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v23 = (id)qword_1ED264F90;
  v24 = sub_1A9CE6168();
  v26 = v25;

  swift_bridgeObjectRelease();
  v27 = (id)qword_1ED264F90;
  v55 = 0xE000000000000000;
  sub_1A9CE6168();
  v29 = v28;

  swift_bridgeObjectRelease();
  v30 = (id)HKSPScreenTimeURL();
  if (v30)
  {
    v31 = v30;
    sub_1A9CE621C();

    v32 = v68;
    v33 = v69;
    v34 = v72;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v72, v11, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33);
    if ((_DWORD)result != 1)
    {
      v57[2] = v57;
      v76 = &type metadata for DeepLinkOpener;
      v77 = &protocol witness table for DeepLinkOpener;
      v73 = v59;
      v74 = v70;
      MEMORY[0x1E0C80A78](result, v36);
      v57[-10] = v71;
      v57[-9] = v24;
      v57[1] = v26;
      MEMORY[0x1E0C80A78](v37, v38);
      sub_1A9C9B40C();
      v58 = v39;
      sub_1A9B92F34(0, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
      v41 = v40;
      sub_1A9C74924(0, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
      v59 = v29;
      v43 = v42;
      v44 = sub_1A9B92B9C(&qword_1EEB49270, (uint64_t (*)(uint64_t))sub_1A9C9B40C, MEMORY[0x1E0CDFA58]);
      v45 = sub_1A9BA8EA4();
      v46 = sub_1A9C7603C();
      v47 = sub_1A9C01758();
      v55 = v46;
      v56 = v47;
      v53 = v44;
      v54 = v45;
      v51 = v41;
      v52 = v43;
      v50 = MEMORY[0x1E0DEA968];
      v49 = v58;
      v48 = v61;
      sub_1A9CE7B9C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v75);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v72, v33);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v67, v48, v63);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v72, 1, 1, v69);
  }
  __break(1u);
  return result;
}

uint64_t SleepDeepLinkDestination.deepLinkURL.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  id *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (*v1)
  {
    v3 = (id *)MEMORY[0x1E0DA83A8];
    if (*v1 == 1)
      v3 = (id *)MEMORY[0x1E0DA83B0];
    v4 = *v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = (id)HKSPSleepURL();

  if (v5)
  {
    sub_1A9CE621C();

    v6 = sub_1A9CE6234();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 0;
  }
  else
  {
    v6 = sub_1A9CE6234();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a1;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

uint64_t sub_1A9C9A1FC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, unint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, __int128 a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82[2];
  uint64_t v83;
  uint64_t v84;

  v71 = a3;
  v81 = a5;
  v78 = a8;
  v74 = a6;
  v75 = a7;
  sub_1A9B92F34(0, &qword_1EEB49278, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD8338], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v77 = (char *)&v65 - v13;
  sub_1A9C016DC();
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v79 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18);
  v80 = (uint64_t)&v65 - v19;
  v20 = sub_1A9CE717C();
  v72 = *(_QWORD *)(v20 - 8);
  v73 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1A9CE6234();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  MEMORY[0x1E0C80A78](v24, v27);
  v28 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C74924(0, &qword_1EEB45EB8, MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CDFA38]);
  v68 = v29;
  v70 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v65 - v31;
  sub_1A9C015E0(0);
  v69 = v33;
  v67 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v65 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C75F98();
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  v76 = (uint64_t)&v65 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v41);
  v66 = (char *)&v65 - v42;
  v83 = a1;
  v84 = a2;
  sub_1A9B923D4(v71, (uint64_t)v82);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, a4, v24);
  v43 = (*(unsigned __int8 *)(v25 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v44 = (v26 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject();
  sub_1A9B949B8(v82, v45 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v45 + v43, v28, v24);
  v46 = (uint64_t *)(v45 + v44);
  v48 = v74;
  v47 = v75;
  *v46 = v74;
  v46[1] = v47;
  swift_bridgeObjectRetain();
  sub_1A9C0344C(v48);
  v71 = sub_1A9BA8EA4();
  sub_1A9CE7E18();
  sub_1A9CE7170();
  sub_1A9C01674();
  v49 = v68;
  sub_1A9CE7B18();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v23, v73);
  v50 = v70;
  v51 = *(void (**)(char *, uint64_t))(v70 + 8);
  v51(v32, v49);
  v52 = v67;
  v53 = (uint64_t)v66;
  v54 = v69;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, v36, v69);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v54);
  v82[0] = v78;
  swift_bridgeObjectRetain();
  v55 = v77;
  sub_1A9CE6F0C();
  v56 = sub_1A9CE6F18();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 0, 1, v56);
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = v48;
  *(_QWORD *)(v57 + 24) = v47;
  sub_1A9C0344C(v48);
  sub_1A9CE7E0C();
  v58 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v79, v32, v49);
  v51(v32, v49);
  v59 = v58;
  v60 = v80;
  sub_1A9C9CA8C(v58, v80);
  v61 = v76;
  sub_1A9BA6F90(v53, v76, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9BA6F90(v60, v58, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  v62 = v81;
  sub_1A9BA6F90(v61, v81, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9C01554();
  sub_1A9BA6F90(v59, v62 + *(int *)(v63 + 48), (uint64_t (*)(_QWORD))sub_1A9C016DC);
  sub_1A9B97190(v60, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  sub_1A9B97190(v53, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9B97190(v59, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  return sub_1A9B97190(v61, (uint64_t (*)(_QWORD))sub_1A9C75F98);
}

uint64_t sub_1A9C9A70C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  return sub_1A9C9A758(a1, a2, a3, a4, a5, a6, a7, a8, a9, (unint64_t)&unk_1E55DC7A8, (uint64_t)sub_1A9C9CA7C, (uint64_t)&unk_1E55DC7D0, (uint64_t)sub_1A9C9CE2C);
}

uint64_t sub_1A9C9A758@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92[2];
  uint64_t v93;
  uint64_t v94;

  v86 = a7;
  v81 = a5;
  v82 = a6;
  v76 = a3;
  v91 = a8;
  v89 = a12;
  v90 = a13;
  v83 = a11;
  v85 = a9;
  v77 = a10;
  sub_1A9B92F34(0, &qword_1EEB49278, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD8338], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v84 = (char *)&v70 - v18;
  sub_1A9C016DC();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v87 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v88 = (uint64_t)&v70 - v24;
  v25 = sub_1A9CE717C();
  v78 = *(_QWORD *)(v25 - 8);
  v79 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1A9CE6234();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 64);
  MEMORY[0x1E0C80A78](v29, v32);
  v33 = (char *)&v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C74924(0, &qword_1EEB45EB8, MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CDFA38]);
  v73 = v34;
  v75 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v70 - v36;
  sub_1A9C015E0(0);
  v74 = v38;
  v72 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v70 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C75F98();
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v80 = (uint64_t)&v70 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v46);
  v71 = (char *)&v70 - v47;
  v93 = a1;
  v94 = a2;
  sub_1A9B923D4(v76, (uint64_t)v92);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, a4, v29);
  v48 = (*(unsigned __int8 *)(v30 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v49 = (v31 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject();
  sub_1A9B949B8(v92, v50 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v50 + v48, v33, v29);
  v51 = (uint64_t *)(v50 + v49);
  v53 = v81;
  v52 = v82;
  *v51 = v81;
  v51[1] = v52;
  swift_bridgeObjectRetain();
  sub_1A9C0344C(v53);
  v77 = sub_1A9BA8EA4();
  sub_1A9CE7E18();
  sub_1A9CE7170();
  sub_1A9C01674();
  v54 = v73;
  sub_1A9CE7B18();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v28, v79);
  v55 = v75;
  v56 = *(void (**)(char *, uint64_t))(v75 + 8);
  v56(v37, v54);
  v57 = v72;
  v58 = (uint64_t)v71;
  v59 = v74;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v41, v74);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v59);
  *(_QWORD *)&v92[0] = v86;
  *((_QWORD *)&v92[0] + 1) = v85;
  swift_bridgeObjectRetain();
  v60 = v84;
  sub_1A9CE6F0C();
  v61 = sub_1A9CE6F18();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 0, 1, v61);
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = v53;
  *(_QWORD *)(v62 + 24) = v52;
  sub_1A9C0344C(v53);
  sub_1A9CE7E0C();
  v63 = (uint64_t)v87;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v87, v37, v54);
  v56(v37, v54);
  v64 = v63;
  v65 = v88;
  sub_1A9C9CA8C(v63, v88);
  v66 = v80;
  sub_1A9BA6F90(v58, v80, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9BA6F90(v65, v63, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  v67 = v91;
  sub_1A9BA6F90(v66, v91, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9C01554();
  sub_1A9BA6F90(v64, v67 + *(int *)(v68 + 48), (uint64_t (*)(_QWORD))sub_1A9C016DC);
  sub_1A9B97190(v65, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  sub_1A9B97190(v58, (uint64_t (*)(_QWORD))sub_1A9C75F98);
  sub_1A9B97190(v64, (uint64_t (*)(_QWORD))sub_1A9C016DC);
  return sub_1A9B97190(v66, (uint64_t (*)(_QWORD))sub_1A9C75F98);
}

SleepHealthUI::SleepDeepLinkDestination_optional __swiftcall SleepDeepLinkDestination.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  SleepHealthUI::SleepDeepLinkDestination_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A9CE8B20();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SleepDeepLinkDestination.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696472616F626E6FLL;
  if (*v0 != 1)
    v1 = 0x63536567616E616DLL;
  if (*v0)
    return v1;
  else
    return 0x657078456E69616DLL;
}

uint64_t sub_1A9C9AD64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A9C30D20(*a1, *a2);
}

uint64_t sub_1A9C9AD70()
{
  sub_1A9CE8C4C();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C9AE2C()
{
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9C9AEC4()
{
  sub_1A9CE8C4C();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

SleepHealthUI::SleepDeepLinkDestination_optional sub_1A9C9AF7C(Swift::String *a1)
{
  return SleepDeepLinkDestination.init(rawValue:)(*a1);
}

void sub_1A9C9AF88(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEE0065636E656972;
  v4 = 0xEA0000000000676ELL;
  v5 = 0x696472616F626E6FLL;
  if (v2 != 1)
  {
    v5 = 0x63536567616E616DLL;
    v4 = 0xEE00656C75646568;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x657078456E69616DLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t SleepDeepLinkDestination.description.getter()
{
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

unint64_t SleepDeepLinkDestination.route.getter()
{
  _BYTE *v0;
  unint64_t v1;
  id *v2;
  id v3;

  v1 = *v0;
  if (*v0)
  {
    v2 = (id *)MEMORY[0x1E0DA83B0];
    if ((_DWORD)v1 != 1)
      v2 = (id *)MEMORY[0x1E0DA83A8];
    v1 = (unint64_t)*v2;
    v3 = *v2;
  }
  return v1;
}

uint64_t SleepDeepLinkDestination.localizedTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SleepDeepLinkButton.init(destination:deepLinkOpener:)@<X0>(char *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  char v7;
  uint64_t v8;

  v5 = *a1;
  sub_1A9CE7DC4();
  *(_BYTE *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 56) = v8;
  *(_BYTE *)a3 = v5;
  return sub_1A9B949B8(a2, a3 + 8);
}

uint64_t SleepDeepLinkButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  sub_1A9C9B40C();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9C01BD4(v1, (uint64_t)&v19);
  v9 = (_OWORD *)swift_allocObject();
  v10 = v20;
  v9[1] = v19;
  v9[2] = v10;
  v11 = v22;
  v9[3] = v21;
  v9[4] = v11;
  v16 = v1;
  sub_1A9C78190();
  sub_1A9C9B4D8();
  sub_1A9CE7E00();
  v12 = *(_BYTE *)v1 != 1;
  v13 = *(_QWORD *)(v1 + 56);
  v17 = *(_BYTE *)(v1 + 48);
  v18 = v13;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DE8();
  sub_1A9C99B04(v12, v19, *((uint64_t *)&v19 + 1), v20, a1);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1A9C9B40C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49258)
  {
    sub_1A9C78190();
    sub_1A9C9B4D8();
    v0 = sub_1A9CE7E24();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49258);
  }
}

void sub_1A9C9B46C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44600)
  {
    sub_1A9B94CA0(255, &qword_1EEB44608, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1A9CE76B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44600);
  }
}

unint64_t sub_1A9C9B4D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB49260;
  if (!qword_1EEB49260)
  {
    sub_1A9C78190();
    v2 = v1;
    v3[0] = sub_1A9BC85AC();
    v3[1] = sub_1A9B92B9C((unint64_t *)&qword_1EEB44660, (uint64_t (*)(uint64_t))sub_1A9C9B46C, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB49260);
  }
  return result;
}

void sub_1A9C9B558(_BYTE *a1)
{
  id v2;
  void *v3;
  unsigned int v4;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_healthAppHidden);

    if (v4)
      sub_1A9C9C318((uint64_t)a1);
    else
      sub_1A9C9B734(a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A9C9B5D4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();
  return swift_deallocObject();
}

void sub_1A9C9B600()
{
  uint64_t v0;

  sub_1A9C9B558((_BYTE *)(v0 + 16));
}

Swift::Void __swiftcall SleepDeepLinkButton.openDeepLink()()
{
  _BYTE *v0;
  id v1;
  void *v2;
  unsigned int v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_healthAppHidden);

    if (v3)
      sub_1A9C9C318((uint64_t)v0);
    else
      sub_1A9C9B734(v0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A9C9B680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t result;

  SleepDeepLinkDestination.localizedTitle.getter();
  sub_1A9BA8EA4();
  v2 = sub_1A9CE79C8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t sub_1A9C9B72C@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C9B680(a1);
}

void sub_1A9C9B734(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id *v15;
  id v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  os_log_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - v4;
  v6 = sub_1A9CE6234();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v34 - v13;
  if (*a1)
  {
    v15 = (id *)MEMORY[0x1E0DA83A8];
    if (*a1 == 1)
      v15 = (id *)MEMORY[0x1E0DA83B0];
    v16 = *v15;
  }
  else
  {
    v16 = 0;
  }
  v17 = (id)HKSPSleepURL();

  if (v17)
  {
    sub_1A9CE621C();

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v18(v14, v5, v6);
      if (qword_1EEB42CC8 != -1)
        swift_once();
      v19 = sub_1A9CE6990();
      __swift_project_value_buffer(v19, (uint64_t)qword_1EEB572B0);
      sub_1A9C01BD4((uint64_t)a1, (uint64_t)v42);
      v20 = sub_1A9CE6978();
      v21 = sub_1A9CE867C();
      if (os_log_type_enabled(v20, (os_log_type_t)v21))
      {
        v36 = v21;
        v37 = v20;
        v38 = v18;
        v22 = swift_slowAlloc();
        v35 = swift_slowAlloc();
        v41 = v35;
        *(_DWORD *)v22 = 136446466;
        v39 = sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF5730, &v41);
        sub_1A9CE888C();
        *(_WORD *)(v22 + 12) = 2082;
        v39 = 0xD000000000000019;
        v40 = 0x80000001A9CFAC80;
        sub_1A9CE8340();
        swift_bridgeObjectRelease();
        v39 = sub_1A9B91D6C(v39, v40, &v41);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        sub_1A9C01CD0((uint64_t)v42);
        v23 = v37;
        _os_log_impl(&dword_1A9B87000, v37, (os_log_type_t)v36, "[%{public}s] Opening deep link to destination: %{public}s", (uint8_t *)v22, 0x16u);
        v24 = v35;
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v24, -1, -1);
        MEMORY[0x1AF420344](v22, -1, -1);

        v18 = v38;
      }
      else
      {
        sub_1A9C01CD0((uint64_t)v42);

      }
      sub_1A9B923D4((uint64_t)(a1 + 8), (uint64_t)v42);
      v30 = v43;
      v31 = v44;
      __swift_project_boxed_opaque_existential_1Tm(v42, v43);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v14, v6);
      v32 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v33 = swift_allocObject();
      v18((char *)(v33 + v32), v10, v6);
      (*(void (**)(char *, void (*)(void *), uint64_t, uint64_t, uint64_t))(v31 + 8))(v14, sub_1A9C9CB8C, v33, v30, v31);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_1A9C9CAD8((uint64_t)v5);
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v25 = sub_1A9CE6990();
  __swift_project_value_buffer(v25, (uint64_t)qword_1EEB572B0);
  sub_1A9C01BD4((uint64_t)a1, (uint64_t)v42);
  v26 = sub_1A9CE6978();
  v27 = sub_1A9CE8670();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v41 = v29;
    *(_DWORD *)v28 = 136446466;
    v39 = sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF5730, &v41);
    sub_1A9CE888C();
    *(_WORD *)(v28 + 12) = 2082;
    v39 = 0xD000000000000019;
    v40 = 0x80000001A9CFAC80;
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v39 = sub_1A9B91D6C(v39, v40, &v41);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    sub_1A9C01CD0((uint64_t)v42);
    _os_log_impl(&dword_1A9B87000, v26, v27, "[%{public}s] Unable to resolve deep link URL for destination: %{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v29, -1, -1);
    MEMORY[0x1AF420344](v28, -1, -1);
  }
  else
  {
    sub_1A9C01CD0((uint64_t)v42);
  }

}

void sub_1A9C9BE20(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = sub_1A9CE6234();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - v11;
  if (a1)
  {
    v13 = a1;
    if (qword_1EEB42CC8 != -1)
      swift_once();
    v14 = sub_1A9CE6990();
    __swift_project_value_buffer(v14, (uint64_t)qword_1EEB572B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    v15 = a1;
    v16 = a1;
    v17 = sub_1A9CE6978();
    v18 = sub_1A9CE8664();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v36 = v34;
      *(_DWORD *)v19 = 136446722;
      v35 = sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF5730, &v36);
      sub_1A9CE888C();
      *(_WORD *)(v19 + 12) = 2082;
      sub_1A9B92B9C(&qword_1EEB49280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v20 = sub_1A9CE8B74();
      v35 = sub_1A9B91D6C(v20, v21, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v19 + 22) = 2082;
      v35 = (uint64_t)a1;
      v22 = a1;
      sub_1A9BB15F4();
      v23 = sub_1A9CE82F8();
      v35 = sub_1A9B91D6C(v23, v24, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] Failed to open deep link (%{public}s) due to error: %{public}s", (uint8_t *)v19, 0x20u);
      v25 = v34;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v25, -1, -1);
      MEMORY[0x1AF420344](v19, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    if (qword_1EEB42CC8 != -1)
      swift_once();
    v26 = sub_1A9CE6990();
    __swift_project_value_buffer(v26, (uint64_t)qword_1EEB572B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    v27 = sub_1A9CE6978();
    v28 = sub_1A9CE867C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v36 = v30;
      *(_DWORD *)v29 = 136446466;
      v35 = sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF5730, &v36);
      sub_1A9CE888C();
      *(_WORD *)(v29 + 12) = 2082;
      sub_1A9B92B9C(&qword_1EEB49280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v31 = sub_1A9CE8B74();
      v35 = sub_1A9B91D6C(v31, v32, &v36);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl(&dword_1A9B87000, v27, v28, "[%{public}s] Successfully opened deep link (%{public}s)", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v30, -1, -1);
      MEMORY[0x1AF420344](v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }

  }
}

uint64_t sub_1A9C9C318(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  if (qword_1EEB42CC8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB572B0);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9[0] = v6;
    *(_DWORD *)v5 = 136446210;
    sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF5730, v9);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Displaying Health App Hidden Alert", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v7 = *(_QWORD *)(a1 + 56);
  LOBYTE(v9[0]) = *(_BYTE *)(a1 + 48);
  v9[1] = v7;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

unint64_t sub_1A9C9C4D8()
{
  unint64_t result;

  result = qword_1EEB49268;
  if (!qword_1EEB49268)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepDeepLinkDestination, &type metadata for SleepDeepLinkDestination);
    atomic_store(result, (unint64_t *)&qword_1EEB49268);
  }
  return result;
}

uint64_t sub_1A9C9C51C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for SleepDeepLinkDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9C9C57C + 4 * byte_1A9CF55C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9C9C5B0 + 4 * asc_1A9CF55C0[v4]))();
}

uint64_t sub_1A9C9C5B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C9C5B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C9C5C0);
  return result;
}

uint64_t sub_1A9C9C5CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C9C5D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9C9C5D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C9C5E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepDeepLinkDestination()
{
  return &type metadata for SleepDeepLinkDestination;
}

uint64_t dispatch thunk of SleepDeepLinkDestinationOpening.openDeepLink(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t destroy for SleepDeepLinkButton(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SleepDeepLinkButton(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepDeepLinkButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepDeepLinkButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepDeepLinkButton()
{
  return &type metadata for SleepDeepLinkButton;
}

uint64_t sub_1A9C9C94C()
{
  sub_1A9C9B40C();
  sub_1A9B92F34(255, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
  sub_1A9C74924(255, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
  sub_1A9B92B9C(&qword_1EEB49270, (uint64_t (*)(uint64_t))sub_1A9C9B40C, MEMORY[0x1E0CDFA58]);
  sub_1A9BA8EA4();
  sub_1A9C7603C();
  sub_1A9C01758();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C9CA34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C9A1FC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_OWORD *)(v1 + 72));
}

uint64_t (*sub_1A9C9CA84())(void)
{
  uint64_t v0;

  return sub_1A9C3A7E0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1A9C9CA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C016DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C9CAD8(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C9CB2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1A9CE6234();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void sub_1A9C9CB8C(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A9CE6234() - 8) + 80);
  sub_1A9C9BE20(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_1A9C9CBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[8];

  if (!qword_1EEB49288)
  {
    sub_1A9C9B40C();
    v3 = v2;
    sub_1A9B92F34(255, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v5 = v4;
    sub_1A9C74924(255, &qword_1EEB45ED0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CD9BF0]);
    v7 = v6;
    v8 = sub_1A9B92B9C(&qword_1EEB49270, (uint64_t (*)(uint64_t))sub_1A9C9B40C, MEMORY[0x1E0CDFA58]);
    v9 = sub_1A9BA8EA4();
    v10 = sub_1A9C7603C();
    v11 = sub_1A9C01758();
    v14[0] = v3;
    v14[1] = MEMORY[0x1E0DEA968];
    v14[2] = v5;
    v14[3] = v7;
    v14[4] = v8;
    v14[5] = v9;
    v14[6] = v10;
    v14[7] = v11;
    v12 = MEMORY[0x1AF420248](a1, v14, MEMORY[0x1E0CDEF18], 0);
    if (!v13)
      atomic_store(v12, (unint64_t *)&qword_1EEB49288);
  }
}

uint64_t sub_1A9C9CCE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1A9C9A758(v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], a1, v1[10], (unint64_t)&unk_1E55DC820, (uint64_t)sub_1A9C9CA7C, (uint64_t)&unk_1E55DC848, (uint64_t)sub_1A9C9CE2C);
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1A9CE6234();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C9CDD0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(sub_1A9CE6234() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1A9C3A744((_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

id SleepSettingsProviderWrapper.provider.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_1A9C9CE3C()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t sub_1A9C9CE54()
{
  return swift_retain();
}

uint64_t sub_1A9C9CE6C()
{
  return swift_retain();
}

uint64_t SleepSettingsProviderWrapper.__allocating_init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;

  v4 = swift_allocObject();
  v5 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(_QWORD *)(v4 + 16) = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
  return v4;
}

uint64_t SleepSettingsProviderWrapper.init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;

  v3 = v2;
  v6 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(_QWORD *)(v3 + 16) = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
  return v3;
}

uint64_t SleepSettingsProviderWrapper.__allocating_init(sleepStore:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = swift_allocObject();
  v3 = HKSPSleepStore.settings.getter();
  v4 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(_QWORD *)(v2 + 16) = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v3);
  return v2;
}

uint64_t SleepSettingsProviderWrapper.init(sleepStore:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;

  v2 = v1;
  v4 = HKSPSleepStore.settings.getter();
  v5 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  *(_QWORD *)(v2 + 16) = SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v4);
  return v2;
}

uint64_t SleepSettingsProviderWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SleepSettingsProviderWrapper.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_1A9C9D03C()
{
  uint64_t v0;

  return objc_retain(*(id *)(*(_QWORD *)(*(_QWORD *)v0 + 16)
                           + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore));
}

uint64_t sub_1A9C9D058()
{
  return swift_retain();
}

uint64_t sub_1A9C9D074()
{
  return swift_retain();
}

uint64_t type metadata accessor for SleepSettingsProviderWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepSettingsProviderWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.sleepStore.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.currentSettingsPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.currentSleepFocusConfigurationPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.__allocating_init(sleepStore:sleepSettings:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SleepSettingsProviderWrapper.__allocating_init(sleepStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t static String.lockScreenAccessibilityIdentifier(_:)()
{
  sub_1A9CE8340();
  return 0xD000000000000014;
}

id LockScreenContentView.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void LockScreenContentView.model.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*LockScreenContentView.model.modify())()
{
  return nullsub_1;
}

uint64_t LockScreenContentView.$model.getter()
{
  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  return sub_1A9CE7104();
}

uint64_t LockScreenContentView.init(model:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  result = sub_1A9CE70F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t LockScreenContentView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  sub_1A9C9D3B8();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C9D450(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C9D474(*(void **)(v1 + 8), (uint64_t)v6);
  v12 = sub_1A9CE7740();
  sub_1A9CE6F24();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C9D3B8);
  v21 = &v11[*(int *)(v8 + 36)];
  *v21 = v12;
  *((_QWORD *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v20;
  v21[40] = 0;
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C9D3B8);
  v22 = sub_1A9CE774C();
  sub_1A9CE6F24();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_1A9BA6F90((uint64_t)v11, a1, (uint64_t (*)(_QWORD))sub_1A9C9D450);
  sub_1A9C9D8C0(0);
  v32 = a1 + *(int *)(v31 + 36);
  *(_BYTE *)v32 = v22;
  *(_QWORD *)(v32 + 8) = v24;
  *(_QWORD *)(v32 + 16) = v26;
  *(_QWORD *)(v32 + 24) = v28;
  *(_QWORD *)(v32 + 32) = v30;
  *(_BYTE *)(v32 + 40) = 0;
  return sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C9D450);
}

void sub_1A9C9D3B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49350)
  {
    sub_1A9B95370(255, &qword_1EEB49358, (uint64_t (*)(uint64_t))sub_1A9C9D42C, MEMORY[0x1E0CE0428], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v0 = sub_1A9CE7CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49350);
  }
}

void sub_1A9C9D42C(uint64_t a1)
{
  sub_1A9B95370(a1, &qword_1EEB49360, type metadata accessor for LockScreenGreetingView, (uint64_t)&type metadata for LockScreenBedtimeView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
}

void sub_1A9C9D450(uint64_t a1)
{
  sub_1A9B95370(a1, &qword_1EEB49368, (uint64_t (*)(uint64_t))sub_1A9C9D3B8, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1A9C9D474(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD v29[3];
  unsigned __int8 v30;

  v29[2] = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848];
  sub_1A9B95370(0, &qword_1EEB493B0, (uint64_t (*)(uint64_t))sub_1A9C9D42C, MEMORY[0x1E0CE0428], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  v29[1] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v29 - v6;
  sub_1A9B95370(0, &qword_1EEB493B8, type metadata accessor for LockScreenGreetingView, (uint64_t)&type metadata for LockScreenBedtimeView, v3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (_QWORD *)((char *)v29 - v10);
  sub_1A9C9D42C(0);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LockScreenGreetingView(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_QWORD *)((char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getKeyPath();
  swift_getKeyPath();
  v21 = a1;
  sub_1A9CE6E64();

  swift_release();
  swift_release();
  if (v30 - 1 >= 2)
  {
    v29[0] = v13;
    if (v30)
    {
      *(uint64_t *)((char *)v20 + *(int *)(v17 + 20)) = swift_getKeyPath();
      sub_1A9C9DCA4();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for LockScreenContentModel();
      sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
      v27 = v21;
      *v20 = sub_1A9CE70F8();
      v20[1] = v28;
      sub_1A9BA6F90((uint64_t)v20, (uint64_t)v11, type metadata accessor for LockScreenGreetingView);
      swift_storeEnumTagMultiPayload();
      sub_1A9B92B9C(&qword_1EEB493A0, type metadata accessor for LockScreenGreetingView, (uint64_t)&unk_1A9CF0F50);
      sub_1A9C9DC50();
      sub_1A9CE74E8();
      sub_1A9BA6F90((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C9D42C);
      swift_storeEnumTagMultiPayload();
      sub_1A9C9DBD0();
      sub_1A9CE74E8();
      sub_1A9B97190((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1A9C9D42C);
      sub_1A9B97190((uint64_t)v20, type metadata accessor for LockScreenGreetingView);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      sub_1A9C9DBD0();
      sub_1A9CE74E8();
    }
  }
  else
  {
    type metadata accessor for LockScreenContentModel();
    sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
    v22 = v21;
    v23 = sub_1A9CE70F8();
    v25 = v24;
    *v11 = v23;
    v11[1] = (uint64_t)v24;
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1EEB493A0, type metadata accessor for LockScreenGreetingView, (uint64_t)&unk_1A9CF0F50);
    sub_1A9C9DC50();
    v26 = v25;
    sub_1A9CE74E8();
    sub_1A9BA6F90((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9C9D42C);
    swift_storeEnumTagMultiPayload();
    sub_1A9C9DBD0();
    sub_1A9CE74E8();
    sub_1A9B97190((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1A9C9D42C);

  }
}

void sub_1A9C9D8C0(uint64_t a1)
{
  sub_1A9B95370(a1, &qword_1EEB49370, (uint64_t (*)(uint64_t))sub_1A9C9D450, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

uint64_t sub_1A9C9D8E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C9D8F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  sub_1A9C9D3B8();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C9D450(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C9D474(*(void **)(v1 + 8), (uint64_t)v6);
  v12 = sub_1A9CE7740();
  sub_1A9CE6F24();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C9D3B8);
  v21 = &v11[*(int *)(v8 + 36)];
  *v21 = v12;
  *((_QWORD *)v21 + 1) = v14;
  *((_QWORD *)v21 + 2) = v16;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v20;
  v21[40] = 0;
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C9D3B8);
  v22 = sub_1A9CE774C();
  sub_1A9CE6F24();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_1A9BA6F90((uint64_t)v11, a1, (uint64_t (*)(_QWORD))sub_1A9C9D450);
  sub_1A9C9D8C0(0);
  v32 = a1 + *(int *)(v31 + 36);
  *(_BYTE *)v32 = v22;
  *(_QWORD *)(v32 + 8) = v24;
  *(_QWORD *)(v32 + 16) = v26;
  *(_QWORD *)(v32 + 24) = v28;
  *(_QWORD *)(v32 + 32) = v30;
  *(_BYTE *)(v32 + 40) = 0;
  return sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9C9D450);
}

id sub_1A9C9DA74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  *a2 = v2;
  return v2;
}

void sub_1A9C9DA80(id *a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 8), *a1);
}

ValueMetadata *type metadata accessor for LockScreenContentView()
{
  return &type metadata for LockScreenContentView;
}

uint64_t sub_1A9C9DAA0()
{
  return sub_1A9BC2874(&qword_1EEB49378, (uint64_t (*)(uint64_t))sub_1A9C9D8C0, sub_1A9C9DACC);
}

uint64_t sub_1A9C9DACC()
{
  return sub_1A9BC2874(&qword_1EEB49380, (uint64_t (*)(uint64_t))sub_1A9C9D450, (uint64_t (*)(void))sub_1A9C9DAE8);
}

unint64_t sub_1A9C9DAE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEB49388;
  if (!qword_1EEB49388)
  {
    sub_1A9C9D3B8();
    v2 = v1;
    v3 = sub_1A9C9DB48();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDF690], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB49388);
  }
  return result;
}

unint64_t sub_1A9C9DB48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB49390;
  if (!qword_1EEB49390)
  {
    sub_1A9B95370(255, &qword_1EEB49358, (uint64_t (*)(uint64_t))sub_1A9C9D42C, MEMORY[0x1E0CE0428], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9C9DBD0();
    v3[1] = MEMORY[0x1E0CE0400];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB49390);
  }
  return result;
}

unint64_t sub_1A9C9DBD0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB49398;
  if (!qword_1EEB49398)
  {
    sub_1A9C9D42C(255);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB493A0, type metadata accessor for LockScreenGreetingView, (uint64_t)&unk_1A9CF0F50);
    v3[1] = sub_1A9C9DC50();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB49398);
  }
  return result;
}

unint64_t sub_1A9C9DC50()
{
  unint64_t result;

  result = qword_1EEB493A8;
  if (!qword_1EEB493A8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDF68, &type metadata for LockScreenBedtimeView);
    atomic_store(result, (unint64_t *)&qword_1EEB493A8);
  }
  return result;
}

void sub_1A9C9DCA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46AF0)
  {
    sub_1A9CE7110();
    v0 = sub_1A9CE6F78();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46AF0);
  }
}

ValueMetadata *type metadata accessor for RelativeReferenceLine()
{
  return &type metadata for RelativeReferenceLine;
}

uint64_t sub_1A9C9DD08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C9DD18@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  _OWORD v25[3];

  v4 = sub_1A9CE7F20();
  v5 = MEMORY[0x1E0CDFE18];
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C9DF30(0);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *MEMORY[0x1E0CDB0C0];
  v15 = sub_1A9CE73B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v8, v14, v15);
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  sub_1A9BA6F90((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))v5);
  v16 = &v13[*(int *)(v10 + 36)];
  v17 = v25[1];
  *(_OWORD *)v16 = v25[0];
  *((_OWORD *)v16 + 1) = v17;
  *((_OWORD *)v16 + 2) = v25[2];
  sub_1A9B97190((uint64_t)v8, (uint64_t (*)(_QWORD))v5);
  sub_1A9CE6FFC();
  v19 = v18 * 0.5;
  sub_1A9CE6FFC();
  v21 = (1.0 - a2) * v20;
  sub_1A9BA6F90((uint64_t)v13, a1, (uint64_t (*)(_QWORD))sub_1A9C9DF30);
  sub_1A9BCC414(0, &qword_1EEB493C8, sub_1A9C9DF30);
  v23 = (double *)(a1 + *(int *)(v22 + 36));
  *v23 = v19;
  v23[1] = v21;
  return sub_1A9B97190((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C9DF30);
}

uint64_t sub_1A9C9DECC@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v4;
  *a1 = sub_1A9C9DF28;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))result;
  return result;
}

uint64_t sub_1A9C9DF18()
{
  return swift_deallocObject();
}

uint64_t sub_1A9C9DF28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9C9DD18(a1, *(double *)(v1 + 16));
}

void sub_1A9C9DF30(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB493C0, (void (*)(uint64_t))MEMORY[0x1E0CDFE18]);
}

uint64_t sub_1A9C9DF4C()
{
  return sub_1A9B92B9C(&qword_1EEB493D0, (uint64_t (*)(uint64_t))sub_1A9C9DF78, MEMORY[0x1E0CD9318]);
}

void sub_1A9C9DF78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB493D8)
  {
    sub_1A9BCC414(255, &qword_1EEB493C8, sub_1A9C9DF30);
    sub_1A9C9DFF0();
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB493D8);
  }
}

unint64_t sub_1A9C9DFF0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB493E0;
  if (!qword_1EEB493E0)
  {
    sub_1A9BCC414(255, &qword_1EEB493C8, sub_1A9C9DF30);
    v2 = v1;
    v3[0] = sub_1A9C9E070();
    v3[1] = sub_1A9BA41BC();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB493E0);
  }
  return result;
}

unint64_t sub_1A9C9E070()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB493E8;
  if (!qword_1EEB493E8)
  {
    sub_1A9C9DF30(255);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB493F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE18], MEMORY[0x1E0CDFE00]);
    v3[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB493E8);
  }
  return result;
}

uint64_t HKDateCache.occurrenceDescription(_:at:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  id v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t result;
  void *v37;
  id v38;
  void *v39;
  id v40;
  char *v41;
  uint64_t v42;
  id v43;
  char *v44;
  _BOOL8 v45;
  void *v46;
  unsigned __int8 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  id v53;
  char *v54;
  double v55;
  double v56;
  unsigned __int8 v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  char v72;

  v4 = v3;
  v61 = a2;
  v70 = a3;
  v71 = a1;
  v5 = sub_1A9CE6360();
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v62 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE62E8();
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v60 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v65 = (char *)&v59 - v13;
  v14 = sub_1A9CE5F64();
  v66 = *(_QWORD *)(v14 - 8);
  v67 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE6378();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v59 - v25;
  v27 = sub_1A9CE6444();
  v28 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v27, v29);
  v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = objc_msgSend(v3, sel_calendar, v30);
  sub_1A9CE63D8();

  sub_1A9CE6390();
  v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  v34(v32, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v22, *MEMORY[0x1E0CB0EF8], v18);
  LOBYTE(v33) = sub_1A9CE636C();
  v35 = *(void (**)(char *, uint64_t))(v19 + 8);
  v35(v22, v18);
  result = ((uint64_t (*)(char *, uint64_t))v35)(v26, v18);
  if ((v33 & 1) != 0)
  {
    v37 = (void *)sub_1A9CE6258();
    v38 = objc_msgSend(v4, sel_calendar);
    sub_1A9CE63D8();

    v39 = (void *)sub_1A9CE63CC();
    v34(v32, v27);
    v40 = objc_msgSend(v71, sel_nextDateIntervalWithWakeUpAfterDate_gregorianCalendar_, v37, v39);

    sub_1A9CE5F04();
    v41 = v17;
    if ((sub_1A9CE5F40() & 1) != 0)
    {
      v42 = (uint64_t)v65;
      sub_1A9CE5F10();
    }
    else
    {
      v42 = (uint64_t)v65;
      sub_1A9CE5F34();
    }
    v43 = objc_msgSend(v4, sel_calendar);
    sub_1A9CE63D8();

    v44 = v62;
    sub_1A9CE6348();
    v45 = Calendar.dayPeriod(for:in:)(v42);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v64);
    v34(v32, v27);
    v46 = (void *)sub_1A9CE6258();
    v47 = objc_msgSend(v4, sel_isDateInToday_, v46);

    if ((v47 & 1) != 0)
    {
      v48 = 0;
      v50 = v68;
      v49 = v69;
    }
    else
    {
      v51 = (void *)sub_1A9CE6258();
      v52 = objc_msgSend(v4, sel_isDateInTomorrow_, v51);

      v50 = v68;
      v49 = v69;
      if (v52)
      {
        BSDayPeriod.simplified.getter(v45, &v72);
        v48 = 1;
        if (v72 == 2)
        {
          v53 = objc_msgSend(v4, sel_startOfTomorrowMidnight);
          v54 = v60;
          sub_1A9CE62C4();

          sub_1A9CE6240();
          v56 = v55;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
          if (v56 < 43200.0)
            v48 = 0;
        }
      }
      else
      {
        v48 = 2;
      }
    }
    v57 = objc_msgSend(v71, sel_isSingleDayOverride);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v42, v49);
    result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v41, v67);
    v58 = v70;
    *v70 = v48;
    *((_QWORD *)v58 + 1) = v45;
    v58[16] = v57;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL LockScreenContentState.showsWeather.getter()
{
  unsigned __int8 *v0;

  return *v0 == 3;
}

BOOL LockScreenContentState.showsAlarmAction.getter()
{
  _BYTE *v0;
  BOOL v1;

  if (*v0)
    v1 = *v0 == 3;
  else
    v1 = 1;
  return !v1;
}

uint64_t LockScreenContentState.heading.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = sub_1A9CE6360();
  v29 = *(_QWORD *)(v1 - 8);
  v30 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE62E8();
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE6378();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1A9CE6444();
  v15 = *(_QWORD *)(v14 - 8);
  v18 = MEMORY[0x1E0C80A78](v14, v16);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 0;
  if (*v0 >= 3u)
  {
    v22 = v17;
    (*(void (**)(char *, _QWORD, uint64_t, double))(v10 + 104))(v13, *MEMORY[0x1E0CB0EF8], v9, v18);
    sub_1A9CE6384();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    sub_1A9CE62DC();
    sub_1A9CE6348();
    v23 = Calendar.dayPeriod(for:in:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v22);
    v31 = 0;
    sub_1A9CBC680(&v31, v23);
    if (qword_1ED2626A8 != -1)
      swift_once();
    v24 = (id)qword_1ED264F90;
    v21 = sub_1A9CE6168();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t LockScreenContentState.isShortFormat.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentTraitCollection);
  v1 = objc_msgSend(v0, sel_preferredContentSizeCategory);

  LOBYTE(v0) = sub_1A9CE879C();
  return v0 & 1;
}

uint64_t LockScreenContentState.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t LockScreenContentState.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t static LockScreenContentState.== infix(_:_:)(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_1A9C9E940 + 4 * byte_1A9CF5980[*a1]))();
}

BOOL sub_1A9C9E940@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

uint64_t sub_1A9C9E984(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_1A9C9E9A4 + 4 * byte_1A9CF5984[*a1]))();
}

BOOL sub_1A9C9E9A4@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

unint64_t sub_1A9C9E9DC()
{
  unint64_t result;

  result = qword_1EEB493F8;
  if (!qword_1EEB493F8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for LockScreenContentState, &type metadata for LockScreenContentState);
    atomic_store(result, (unint64_t *)&qword_1EEB493F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LockScreenContentState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A9C9EA6C + 4 * byte_1A9CF598D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A9C9EAA0 + 4 * byte_1A9CF5988[v4]))();
}

uint64_t sub_1A9C9EAA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C9EAA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C9EAB0);
  return result;
}

uint64_t sub_1A9C9EABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C9EAC4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A9C9EAC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C9EAD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LockScreenContentState()
{
  return &type metadata for LockScreenContentState;
}

uint64_t View.sizeReader(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  _QWORD v15[4];

  v14[0] = a1;
  v14[1] = a4;
  sub_1A9C9EC8C(255, (unint64_t *)&qword_1EEB48378, (uint64_t (*)(uint64_t))sub_1A9C6395C, sub_1A9C9ECFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB820]);
  v6 = sub_1A9CE7164();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v14 - v9;
  v15[2] = sub_1A9C9ED18;
  v15[3] = 0;
  sub_1A9CE7FEC();
  sub_1A9C6395C();
  sub_1A9C9ECFC();
  sub_1A9CE7A7C();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v14[0];
  *(_QWORD *)(v11 + 24) = a2;
  v12 = sub_1A9C9EDD4();
  v15[0] = a3;
  v15[1] = v12;
  swift_retain();
  MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v6, v15);
  sub_1A9C63A2C();
  sub_1A9C9EE3C();
  sub_1A9CE7B48();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1A9C9EC8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_1A9C9ECFC()
{
  return sub_1A9B92B9C(&qword_1EEB483B0, (uint64_t (*)(uint64_t))sub_1A9C6395C, MEMORY[0x1E0CD9318]);
}

uint64_t sub_1A9C9ED18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1A9CE7C8C();
  result = sub_1A9CE6FFC();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1A9C9ED58(uint64_t result, uint64_t (*a2)(double, double))
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
    return a2(*(double *)result, *(double *)(result + 8));
  return result;
}

uint64_t sub_1A9C9ED84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C9EDA8(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 16) & 1) == 0)
    return (*(uint64_t (**)(double, double))(v1 + 16))(*(double *)result, *(double *)(result + 8));
  return result;
}

unint64_t sub_1A9C9EDD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB49400;
  if (!qword_1EEB49400)
  {
    sub_1A9C9EC8C(255, (unint64_t *)&qword_1EEB48378, (uint64_t (*)(uint64_t))sub_1A9C6395C, sub_1A9C9ECFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB820]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB838], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB49400);
  }
  return result;
}

unint64_t sub_1A9C9EE3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB483C0;
  if (!qword_1EEB483C0)
  {
    sub_1A9C63B8C(255);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB483D0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA00]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEE998], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB483C0);
  }
  return result;
}

uint64_t sub_1A9C9EEB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_1A9C9EC8C(255, (unint64_t *)&qword_1EEB48378, (uint64_t (*)(uint64_t))sub_1A9C6395C, sub_1A9C9ECFC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB820]);
  v2 = sub_1A9CE7164();
  sub_1A9C63B08();
  v3 = sub_1A9CE7164();
  v7[0] = v1;
  v7[1] = sub_1A9C9EDD4();
  v4 = MEMORY[0x1E0CD9C20];
  v6[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v7);
  v6[1] = sub_1A9B92B9C(&qword_1EEB49408, (uint64_t (*)(uint64_t))sub_1A9C63B08, MEMORY[0x1E0CDC940]);
  return MEMORY[0x1AF420284](v4, v3, v6);
}

ValueMetadata *type metadata accessor for SizeReader()
{
  return &type metadata for SizeReader;
}

void sub_1A9C9EFA0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

_QWORD *sub_1A9C9EFB0(_QWORD *result, _QWORD *(*a2)(__int128 *__return_ptr))
{
  _QWORD *v2;
  __int128 v3;
  char v4;
  __int128 v5;
  char v6;

  v2 = result;
  if ((result[2] & 1) != 0)
  {
    result = a2(&v5);
    v3 = v5;
    v4 = v6;
  }
  else
  {
    v4 = 0;
    v3 = *(_OWORD *)result;
  }
  *(_OWORD *)v2 = v3;
  *((_BYTE *)v2 + 16) = v4;
  return result;
}

uint64_t sub_1A9C9F00C(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1ED2630B8);
}

uint64_t sub_1A9C9F020(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49410);
}

uint64_t static Logger.mode.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1EEB42E60, (uint64_t)qword_1EEB49410, a1);
}

uint64_t sub_1A9C9F050(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49428);
}

uint64_t static Logger.lock.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(qword_1EEB42E68, (uint64_t)qword_1EEB49428, a1);
}

uint64_t sub_1A9C9F080(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1ED262888);
}

uint64_t static Logger.schedule.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1ED2628A0, (uint64_t)qword_1ED262888, a1);
}

uint64_t sub_1A9C9F0B0(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49440);
}

uint64_t static Logger.notification.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1EEB42E78, (uint64_t)qword_1EEB49440, a1);
}

uint64_t sub_1A9C9F0E0(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49458);
}

uint64_t static Logger.analytics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(qword_1EEB42E80, (uint64_t)qword_1EEB49458, a1);
}

uint64_t sub_1A9C9F110(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1ED262510);
}

uint64_t static Logger.widgets.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1ED262528, (uint64_t)qword_1ED262510, a1);
}

uint64_t sub_1A9C9F140(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49470);
}

uint64_t static Logger.bridgeSetup.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1EEB42E90, (uint64_t)qword_1EEB49470, a1);
}

uint64_t sub_1A9C9F170(uint64_t a1)
{
  return sub_1A9C9F184(a1, qword_1EEB49488);
}

uint64_t sub_1A9C9F184(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1A9CE6990();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  sub_1A9CE834C();
  sub_1A9CE834C();
  return sub_1A9CE6984();
}

uint64_t static Logger.onboarding.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1EEB42E98, (uint64_t)qword_1EEB49488, a1);
}

uint64_t NSObject.sp_className.getter()
{
  swift_getObjectType();
  sub_1A9C9F260();
  return sub_1A9CE82F8();
}

unint64_t sub_1A9C9F260()
{
  unint64_t result;

  result = qword_1EEB494A0[0];
  if (!qword_1EEB494A0[0])
  {
    sub_1A9BF000C();
    result = swift_getMetatypeMetadata();
    atomic_store(result, qword_1EEB494A0);
  }
  return result;
}

uint64_t sub_1A9C9F298()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9C9F310(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1A9C9F3C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t sub_1A9C9F400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1A9C9F460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A9C9F4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A9C9F528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1A9C9F58C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A9C9F608 + 4 * byte_1A9CF5A90[v10]))();
  }
}

void sub_1A9C9F68C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1A9C9F780()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C9F7F8);
}

void sub_1A9C9F788(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A9C9F790);
  JUMPOUT(0x1A9C9F7F8);
}

void sub_1A9C9F7D0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C9F7F8);
}

void sub_1A9C9F7D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A9C9F7F8);
}

uint64_t sub_1A9C9F7E0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1A9C9F7F8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1A9C9F7F4);
    JUMPOUT(0x1A9C9F7ECLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for NavigationLinkWithoutChevron()
{
  JUMPOUT(0x1AF4201F4);
}

uint64_t sub_1A9C9F81C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C9F850@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v19 = a2;
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[5];
  v25 = MEMORY[0x1E0CE0428];
  v26 = v3;
  v27 = MEMORY[0x1E0CE0400];
  v28 = v5;
  sub_1A9CE70EC();
  sub_1A9CE7164();
  swift_getTupleTypeMetadata2();
  v6 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v6);
  v7 = sub_1A9CE7ECC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v18 - v14;
  v20 = v4;
  v21 = v3;
  v22 = a1[4];
  v23 = v5;
  v24 = v18;
  sub_1A9CE7FEC();
  sub_1A9CE7EC0();
  MEMORY[0x1AF420284](MEMORY[0x1E0CDFCF8], v7);
  sub_1A9C3C998((uint64_t)v11, v7, (uint64_t)v15);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  sub_1A9C3899C((uint64_t)v15, v7, v19);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, v7);
}

void sub_1A9C9F9FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[19];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25[6] = a1;
  v25[12] = a5;
  v25[9] = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v25[7] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0CE0428];
  v27 = v8;
  v9 = v8;
  v25[0] = v8;
  v28 = MEMORY[0x1E0CE0400];
  v29 = v10;
  v11 = v10;
  v25[1] = v10;
  v12 = sub_1A9CE70EC();
  v25[10] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v25[4] = (char *)v25 - v14;
  v15 = sub_1A9CE7164();
  v25[11] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v25[8] = (char *)v25 - v19;
  v25[2] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  v25[3] = (char *)v25 - v24;
  v26 = a2;
  v27 = v9;
  v25[5] = a4;
  v28 = a4;
  v29 = v11;
  type metadata accessor for NavigationLinkWithoutChevron();
}

uint64_t sub_1A9C9FBA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  v9 = *(_QWORD *)(v8 - 224);
  (*(void (**)(void))(v9 + *(int *)(a1 + 52)))();
  sub_1A9C3C998(v6, v7, v2);
  v10 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v11 = v7;
  v10(v6, v7);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v8 - 200) + 16))(*(_QWORD *)(v8 - 216), v9, *(_QWORD *)(v8 - 272));
  v12 = *(_QWORD *)(v8 - 240);
  sub_1A9CE70E0();
  v13 = MEMORY[0x1AF420284](MEMORY[0x1E0CD9468], v3);
  sub_1A9CE7BCC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 192) + 8))(v12, v3);
  v14 = MEMORY[0x1E0CD9728];
  *(_QWORD *)(v8 - 136) = v13;
  *(_QWORD *)(v8 - 128) = v14;
  v15 = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v4, v8 - 136);
  v16 = *(_QWORD *)(v8 - 208);
  sub_1A9C3C998(v5, v4, v16);
  v17 = *(_QWORD *)(v8 - 184);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v18(v5, v4);
  v19 = *(_QWORD *)(v8 - 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 256) + 16))(v6, v19, v11);
  *(_QWORD *)(v8 - 120) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v5, v16, v4);
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 152) = v11;
  *(_QWORD *)(v8 - 144) = v4;
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 232);
  *(_QWORD *)(v8 - 160) = v15;
  sub_1A9C81F34((uint64_t *)(v8 - 120), 2uLL, v8 - 152);
  v18(v16, v4);
  v10(v19, v11);
  v18(v5, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v6, v11);
}

void sub_1A9C9FD7C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1A9C9F9FC(v1[6], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1A9C9FD8C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A9CE70EC();
  sub_1A9CE7164();
  swift_getTupleTypeMetadata2();
  v0 = sub_1A9CE8010();
  MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v0);
  v1 = sub_1A9CE7ECC();
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDFCF8], v1);
}

uint64_t sub_1A9C9FE44(uint64_t a1)
{
  return sub_1A9C9FF20(a1, qword_1EEB49528);
}

uint64_t static OSSignposter.app.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C9FEA4(&qword_1EEB42EA0, (uint64_t)qword_1EEB49528, a1);
}

uint64_t sub_1A9C9FE74(uint64_t a1)
{
  return sub_1A9C9FF20(a1, qword_1EEB49540);
}

uint64_t static OSSignposter.view.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C9FEA4(&qword_1EEB42EA8, (uint64_t)qword_1EEB49540, a1);
}

uint64_t sub_1A9C9FEA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1A9CE696C();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_1A9C9FF0C(uint64_t a1)
{
  return sub_1A9C9FF20(a1, qword_1EEB49558);
}

uint64_t sub_1A9C9FF20(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1A9CE696C();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  sub_1A9CE834C();
  sub_1A9CE834C();
  return sub_1A9CE6960();
}

uint64_t static OSSignposter.query.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C9FEA4(&qword_1EEB42EB0, (uint64_t)qword_1EEB49558, a1);
}

uint64_t _s5ModelVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t _s5ModelVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t _s5ModelVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *_s5ModelVMa_0()
{
  return &_s5ModelVN_0;
}

id static LocalizedStringTable.sleepFramework.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9CA00D0(&qword_1EEB42D50, (void **)&qword_1EEB48198, a1);
}

id static LocalizedStringTable.sleepHealthUI.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9CA00D0(&qword_1ED2626A8, (void **)&qword_1ED264F90, a1);
}

id sub_1A9CA00D0@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  *a3 = 0x617A696C61636F4CLL;
  a3[1] = 0xEB00000000656C62;
  a3[2] = v5;
  return v5;
}

id static LocalizedStringTable.harmonia.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9CA014C(0xD000000000000014, 0x80000001A9CF95A0, a1);
}

id sub_1A9CA014C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v6 = (void *)qword_1ED264F90;
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v6;
  return v6;
}

id static LocalizedStringTable.sleepStages.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9CA014C(0xD000000000000012, 0x80000001A9CFC310, a1);
}

uint64_t initializeBufferWithCopyOfBuffer for VerticalBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for VerticalBar()
{
  return swift_release();
}

_QWORD *assignWithCopy for VerticalBar(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for VerticalBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for VerticalBar()
{
  return &type metadata for VerticalBar;
}

uint64_t sub_1A9CA0298()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1A9CA02A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  double result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  swift_retain();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = a3;
  *(_QWORD *)(a2 + 24) = a1;
  *(_WORD *)(a2 + 32) = 256;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 72) = v11;
  return result;
}

double sub_1A9CA0350@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double result;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  __int128 v27;

  v3 = *(double *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = sub_1A9CE73F8();
  sub_1A9CA02A8(v4, (uint64_t)&v17, v3);
  v6 = v17;
  v7 = v18;
  result = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 57) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  return result;
}

ValueMetadata *type metadata accessor for Bar()
{
  return &type metadata for Bar;
}

uint64_t sub_1A9CA041C()
{
  return sub_1A9B92B9C(&qword_1EEB49570, (uint64_t (*)(uint64_t))sub_1A9CA0448, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9CA0448()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49578)
  {
    sub_1A9CA04C0();
    sub_1A9B92B9C(&qword_1EEB495A8, (uint64_t (*)(uint64_t))sub_1A9CA04C0, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49578);
  }
}

void sub_1A9CA04C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49580)
  {
    sub_1A9CA0514();
    v0 = sub_1A9CE8010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49580);
  }
}

void sub_1A9CA0514()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB49588)
  {
    sub_1A9CA0578();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB49588);
  }
}

void sub_1A9CA0578()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49590)
  {
    sub_1A9CA0694(255, &qword_1EEB49598);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49590);
  }
}

unint64_t sub_1A9CA05EC()
{
  unint64_t result;

  result = qword_1EEB495A0;
  if (!qword_1EEB495A0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF5C28, &type metadata for Bar);
    atomic_store(result, (unint64_t *)&qword_1EEB495A0);
  }
  return result;
}

unint64_t sub_1A9CA0634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB495B0;
  if (!qword_1EEB495B0)
  {
    sub_1A9CA0694(255, &qword_1EEB495B8);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD8668], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB495B0);
  }
  return result;
}

void sub_1A9CA0694(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1A9CA05EC();
    v3 = sub_1A9CE6F54();
    if (!v4)
      atomic_store(v3, a2);
  }
}

double sub_1A9CA0704@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double *v5;
  id v7;
  id v8;
  double result;
  __int128 v10;
  __int128 v11;
  char v12;

  v7 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, a2, a3, a4, a5, *v5, *v5);
  v8 = objc_msgSend(v7, sel_CGPath);

  sub_1A9CE7944();
  result = *(double *)&v10;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

uint64_t sub_1A9CA07D8()
{
  sub_1A9CA05EC();
  return sub_1A9CE7DB8();
}

uint64_t sub_1A9CA0828()
{
  sub_1A9CA05EC();
  return sub_1A9CE7D88();
}

uint64_t sub_1A9CA0878()
{
  sub_1A9CA05EC();
  return sub_1A9CE7DA0();
}

unint64_t sub_1A9CA08B4()
{
  unint64_t result;

  result = qword_1EEB495C0;
  if (!qword_1EEB495C0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF5BD8, &type metadata for Bar);
    atomic_store(result, (unint64_t *)&qword_1EEB495C0);
  }
  return result;
}

unint64_t sub_1A9CA08FC()
{
  unint64_t result;

  result = qword_1EEB495C8;
  if (!qword_1EEB495C8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF5B88, &type metadata for Bar);
    atomic_store(result, (unint64_t *)&qword_1EEB495C8);
  }
  return result;
}

uint64_t AlarmPreviewPlayer.__allocating_init(model:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AlarmPreviewPlayer.init(model:)(a1);
  return v2;
}

void sub_1A9CA0980()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = v0;
    v3 = qword_1ED2628A0;
    v4 = v1;
    if (v3 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED262888);
    v6 = sub_1A9CE6978();
    v7 = sub_1A9CE867C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136446210;
      v10 = sub_1A9CE8D48();
      sub_1A9B91D6C(v10, v11, &v12);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Updating audio volume on actively playing alert preview", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v9, -1, -1);
      MEMORY[0x1AF420344](v8, -1, -1);
    }

    objc_msgSend(*(id *)(v2 + 16), sel_audioVolume);
    objc_msgSend(v4, sel__updateAudioVolumeDynamicallyToValue_);

  }
}

void sub_1A9CA0B34(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34[3];

  v5 = sub_1A9CE6990();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v10 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED262888);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v11 = a2;
  v12 = a2;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    v32 = v14;
    v30 = v6;
    v31 = a3;
    v15 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v34[0] = v29;
    *(_DWORD *)v15 = 136446722;
    v16 = sub_1A9CE8D48();
    v33 = sub_1A9B91D6C(v16, v17, v34);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    v18 = (id)NSStringFromTLAlertPlaybackCompletionType();
    if (!v18)
    {

      __break(1u);
      return;
    }
    v19 = v18;
    v20 = sub_1A9CE82E0();
    v22 = v21;

    v33 = sub_1A9B91D6C(v20, v22, v34);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    if (a2)
    {
      v33 = (uint64_t)a2;
      v23 = a2;
      sub_1A9BB15F4();
      v24 = sub_1A9CE82F8();
      v26 = v25;
    }
    else
    {
      v26 = 0xE300000000000000;
      v24 = 7104878;
    }
    v27 = v30;
    v28 = v29;
    v33 = sub_1A9B91D6C(v24, v26, v34);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v13, (os_log_type_t)v32, "[%{public}s] Alert finished playing for %{public}s with error: %{public}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v28, -1, -1);
    MEMORY[0x1AF420344](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v5);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1A9CA0E78(0);
    swift_release();
  }
}

void sub_1A9CA0E78(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD aBlock[6];

  v2 = *v1;
  v3 = (void *)v1[3];
  v1[3] = (uint64_t)a1;
  v9 = a1;
  objc_msgSend(v3, sel_stop);
  v4 = (void *)v1[3];
  if (v4)
  {
    v5 = swift_allocObject();
    swift_weakInit();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v2;
    aBlock[4] = sub_1A9CA1A44;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A9BE4D94;
    aBlock[3] = &block_descriptor_30;
    v7 = _Block_copy(aBlock);
    v8 = v4;
    swift_release();
    objc_msgSend(v8, sel_playWithCompletionHandler_, v7);
    _Block_release(v7);

  }
  else
  {

  }
}

uint64_t AlarmPreviewPlayer.init(model:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v7;

  v2 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v3 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v4 = sub_1A9CA111C();

  *(_QWORD *)(v2 + 16) = v4;
  swift_allocObject();
  swift_weakInit();
  sub_1A9B92B28();
  sub_1A9CA130C();
  swift_retain();
  v5 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)(v2 + 32) = v5;
  swift_release();
  return v2;
}

id sub_1A9CA111C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  int v8;
  int v9;
  double v10;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBF738]), sel_initWithType_, 13);
  objc_msgSend(v1, sel_setTopic_, *MEMORY[0x1E0DBF760]);
  v2 = objc_msgSend(v0, sel_toneIdentifier);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v1, sel_setToneIdentifier_, v2);

  }
  v4 = objc_msgSend(v0, sel_vibrationIdentifier);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v1, sel_setVibrationIdentifier_, v4);

  }
  v6 = objc_msgSend(v0, sel_soundVolume);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel_floatValue);
    v9 = v8;

    LODWORD(v10) = v9;
    objc_msgSend(v1, sel_setAudioVolume_, v10);
  }
  objc_msgSend(v1, sel_setShouldRepeat_, 1);
  objc_msgSend(v1, sel_setForPreview_, 1);
  return v1;
}

uint64_t sub_1A9CA1260()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1A9CA1284()
{
  uint64_t Strong;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = Strong;
    v2 = sub_1A9CA111C();
    v3 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v2;
    v4 = v2;

    sub_1A9CA0980();
    swift_release();

  }
}

void sub_1A9CA1304()
{
  sub_1A9CA1284();
}

unint64_t sub_1A9CA130C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB42FA0;
  if (!qword_1EEB42FA0)
  {
    sub_1A9B92B28();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95F48], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB42FA0);
  }
  return result;
}

uint64_t AlarmPreviewPlayer.deinit()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    objc_msgSend(v1, sel_stop);
    v2 = *(void **)(v0 + 24);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(v0 + 24) = 0;

  if (*(_QWORD *)(v0 + 32))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }

  swift_release();
  return v0;
}

uint64_t AlarmPreviewPlayer.__deallocating_deinit()
{
  AlarmPreviewPlayer.deinit();
  return swift_deallocClassInstance();
}

void sub_1A9CA13F0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v22;

  if (*(_QWORD *)(v0 + 24))
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v1 = sub_1A9CE6990();
    __swift_project_value_buffer(v1, (uint64_t)qword_1ED262888);
    oslog = sub_1A9CE6978();
    v2 = sub_1A9CE867C();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      v4 = swift_slowAlloc();
      v22 = v4;
      *(_DWORD *)v3 = 136446210;
      v5 = sub_1A9CE8D48();
      sub_1A9B91D6C(v5, v6, &v22);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, oslog, v2, "[%{public}s] Already playing alert", v3, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v4, -1, -1);
      MEMORY[0x1AF420344](v3, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v7 = v0;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
    swift_retain_n();
    v9 = sub_1A9CE6978();
    v10 = sub_1A9CE867C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      osloga = (os_log_t)swift_slowAlloc();
      v22 = (uint64_t)osloga;
      *(_DWORD *)v11 = 136446466;
      v12 = sub_1A9CE8D48();
      sub_1A9B91D6C(v12, v13, &v22);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      v14 = *(id *)(v7 + 16);
      v15 = objc_msgSend(v14, sel_description);
      v16 = sub_1A9CE82E0();
      v18 = v17;

      sub_1A9B91D6C(v16, v18, &v22);
      sub_1A9CE888C();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] Playing new alert for %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](osloga, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v19 = objc_msgSend((id)objc_opt_self(), sel_alertWithConfiguration_, *(_QWORD *)(v7 + 16));
    sub_1A9CA0E78(v19);
  }
}

void sub_1A9CA17A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  swift_retain_n();
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v14 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    v9 = *(void **)(v1 + 24);
    if (v9)
    {
      sub_1A9B94A18(0, &qword_1EEB495D0);
      v10 = v9;
      v11 = sub_1A9CE82F8();
      v13 = v12;
    }
    else
    {
      v13 = 0xE300000000000000;
      v11 = 7104878;
    }
    sub_1A9B91D6C(v11, v13, &v14);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Stopping alert: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_1A9CA0E78(0);
}

uint64_t type metadata accessor for AlarmPreviewPlayer()
{
  return objc_opt_self();
}

uint64_t method lookup function for AlarmPreviewPlayer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AlarmPreviewPlayer.__allocating_init(model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of AlarmPreviewPlayer.play()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of AlarmPreviewPlayer.stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_1A9CA1A20()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9CA1A44(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A9CA0B34(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

id sub_1A9CA1A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  objc_super v33;

  v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  v7 = (void *)*MEMORY[0x1E0DC4B10];
  v8 = (void *)objc_opt_self();
  v9 = v3;
  v10 = objc_msgSend(v8, sel_hk_sleepKeyColor);
  v11 = *MEMORY[0x1E0DC1448];
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v13 = v7;
  v14 = v10;
  v15 = objc_msgSend(v12, sel_init);
  v16 = v15;
  if (v14)
    objc_msgSend(v15, sel_setTextColor_, v14);
  v17 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_titleLabel;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v18 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v13, 0, 0, 0, 0, 0, 0, v11, 0);
  objc_msgSend(v16, sel_setFont_, v18);

  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v16, sel_setLineBreakMode_, 0);
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v9[v17] = v16;
  v19 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepFocusModeView;
  v20 = (objc_class *)type metadata accessor for ConfirmationFeatureView();
  *(_QWORD *)&v9[v19] = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepScreenView;
  *(_QWORD *)&v9[v21] = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v22 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_windDownView;
  *(_QWORD *)&v9[v22] = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v23 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepTrackingView;
  *(_QWORD *)&v9[v23] = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v24 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_healthStatusView;
  *(_QWORD *)&v9[v24] = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_currentConstraints] = MEMORY[0x1E0DEE9D8];

  if (a3)
  {
    v25 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  v33.receiver = v9;
  v33.super_class = (Class)type metadata accessor for ConfirmationFeaturesTableViewCell();
  v26 = objc_msgSendSuper2(&v33, sel_initWithStyle_reuseIdentifier_, a1, v25);

  v27 = v26;
  objc_msgSend(v27, sel_setAccessoryType_, 0);
  objc_msgSend(v27, sel_setSelectionStyle_, 0);
  sub_1A9CA1F90();
  sub_1A9CA22D0();
  sub_1A9BC09A4();
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1A9CEB520;
  v29 = sub_1A9CE6AB0();
  v30 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v28 + 32) = v29;
  *(_QWORD *)(v28 + 40) = v30;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v31 = v27;
  sub_1A9CE87C0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v31;
}

void sub_1A9CA1E08(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  int v11;
  id v12;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    if (a2)
    {
      v7 = (void *)objc_opt_self();
      v8 = a2;
      v9 = objc_msgSend(v7, sel_currentTraitCollection);
      v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);
      v11 = sub_1A9CE879C();

      v12 = objc_msgSend(v8, sel_preferredContentSizeCategory);
      LODWORD(v10) = sub_1A9CE879C();

      if (((v11 ^ v10) & 1) != 0)
        sub_1A9CA22D0();

      v6 = v8;
    }
    else
    {
      sub_1A9CA22D0();
    }

  }
}

uint64_t sub_1A9CA1F90()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v21;
  id v22;
  id v23;
  id v24;
  Swift::OpaquePointer _;

  v1 = v0;
  sub_1A9BB7420();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEF8A0;
  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_titleLabel];
  *(_QWORD *)(v2 + 32) = v3;
  _._rawValue = (void *)v2;
  sub_1A9CE83E8();
  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_healthStatusView];
  v5 = v3;
  v6 = v4;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v7 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepScreenView];
  v8 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_windDownView];
  v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepFocusModeView];
  v10 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepTrackingView];
  if ((unint64_t)_._rawValue >> 62)
  {
    v21 = v7;
    v22 = v8;
    v23 = v9;
    v24 = v10;
    swift_bridgeObjectRetain();
    v11 = (id)sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v11, 4))
    {
LABEL_5:
      sub_1A9CBF89C();
      sub_1A9CE83E8();
      v11 = v7;
      MEMORY[0x1AF41EFF4]();
      if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                                 + 0x18) >> 1)
        goto LABEL_6;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = *(id *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    v12 = v7;
    v13 = v8;
    v14 = v9;
    v15 = v10;
    if (!__OFADD__(v11, 4))
      goto LABEL_5;
  }
  __break(1u);
LABEL_16:
  sub_1A9CE83F4();
LABEL_6:
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v16 = v8;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v17 = v9;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v18 = v10;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();

  v19 = objc_msgSend(v1, sel_contentView);
  UIView.addSubviews(_:useAutoLayout:)(_, 1);

  return swift_bridgeObjectRelease();
}

id sub_1A9CA22D0()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  id v10;
  char v11;
  double v12;
  uint64_t v13;
  void *v14;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  v3 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_currentConstraints;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_deactivateConstraints_, v4);

  v5 = objc_msgSend(v1, sel_contentView);
  v6 = objc_msgSend(v1, sel_contentView);
  v7 = objc_msgSend(v6, sel_subviews);

  sub_1A9B94A18(0, &qword_1EEB47F90);
  v8 = sub_1A9CE83DC();

  v9 = objc_msgSend((id)objc_opt_self(), sel_currentTraitCollection);
  v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);
  v11 = sub_1A9CE879C();

  v12 = 14.0;
  if ((v11 & 1) != 0)
    v12 = 16.0;
  v13 = UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v8, v12, 16.0, 0.0, 16.0, 0.0);

  swift_bridgeObjectRelease();
  v14 = (void *)sub_1A9CE83D0();
  objc_msgSend(v2, sel_activateConstraints_, v14);

  *(_QWORD *)&v1[v3] = v13;
  swift_bridgeObjectRelease();
  return objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t sub_1A9CA24C0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  id v28;
  id v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;

  v1 = v0;
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item];
  swift_beginAccess();
  sub_1A9BCA29C(v2, (uint64_t)v53);
  if (!v54)
  {
    sub_1A9BEDB34((uint64_t)v53, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v50 = 0u;
    v51 = 0u;
    v52 = 0;
    return sub_1A9BEDB34((uint64_t)&v50, &qword_1EEB49748, &qword_1EEB49750);
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  sub_1A9B94928(0, &qword_1EEB49750);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    return sub_1A9BEDB34((uint64_t)&v50, &qword_1EEB49748, &qword_1EEB49750);
  }
  if (!*((_QWORD *)&v51 + 1))
    return sub_1A9BEDB34((uint64_t)&v50, &qword_1EEB49748, &qword_1EEB49750);
  sub_1A9B949B8(&v50, (uint64_t)v53);
  *(_QWORD *)&v50 = MEMORY[0x1E0DEE9D8];
  v3 = *(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_healthStatusView];
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v4 = *(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepScreenView];
  v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_windDownView];
  v6 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepFocusModeView];
  v7 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepTrackingView];
  if ((unint64_t)v50 >> 62)
  {
    v41 = v4;
    v42 = v5;
    v43 = v6;
    v44 = v7;
    swift_bridgeObjectRetain();
    v45 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!__OFADD__(v45, 4))
    {
LABEL_8:
      sub_1A9CBF89C();
      sub_1A9CE83E8();
      v4 = v4;
      MEMORY[0x1AF41EFF4]();
      if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_9;
      goto LABEL_50;
    }
  }
  else
  {
    v8 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    if (!__OFADD__(v8, 4))
      goto LABEL_8;
  }
  __break(1u);
LABEL_50:
  sub_1A9CE83F4();
LABEL_9:
  v48 = v1;
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v13 = v5;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v14 = v6;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v15 = v7;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();

  result = (uint64_t)__swift_project_boxed_opaque_existential_1Tm(v53, v54);
  v17 = *(unsigned __int8 *)(result + 8);
  v18 = v50;
  if ((unint64_t)v50 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = sub_1A9CE8AC0();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v46 = v15;
  if (v19)
  {
    if (v19 >= 1)
    {
      v20 = 0;
      v49 = v18 & 0xC000000000000001;
      v47 = v18;
      while (1)
      {
        if (v49)
          v22 = (char *)MEMORY[0x1AF41F600](v20, v18);
        else
          v22 = (char *)*(id *)(v18 + 8 * v20 + 32);
        v23 = v22;
        if (*(_QWORD *)&v22[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 8])
        {
          v24 = *(_QWORD *)&v22[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 32];
          if (v17)
          {
            if ((v24 & 1) == 0)
              goto LABEL_35;
          }
          else if ((v24 & 1) != 0)
          {
            goto LABEL_35;
          }
          v25 = objc_msgSend(v48, sel_contentView, v46);
          sub_1A9B94A18(0, &qword_1EEB47F90);
          v26 = v23;
          v27 = sub_1A9CE8760();

          if ((v27 & 1) != 0)
          {
            if ((v17 & 1) != 0)
            {
              v18 = v47;
              if ((v24 & 1) == 0)
                goto LABEL_35;
            }
            else
            {
              v18 = v47;
              if ((v24 & 1) != 0)
              {
LABEL_35:
                v28 = objc_msgSend(v48, sel_contentView, v46);
                sub_1A9B94A18(0, &qword_1EEB47F90);
                v29 = v23;
                v30 = sub_1A9CE8760();

                if ((v30 & 1) != 0)
                  objc_msgSend(v29, sel_removeFromSuperview);
              }
            }
          }
          else
          {
            v21 = objc_msgSend(v48, (SEL)&selRef_featureStatus);
            objc_msgSend(v21, sel_addSubview_, v26);

            v18 = v47;
          }
        }
        ++v20;

        if (v19 == v20)
          goto LABEL_40;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_40:
    swift_bridgeObjectRelease();
    v31 = __swift_project_boxed_opaque_existential_1Tm(v53, v54);
    v32 = *(_QWORD *)(*v31 + 112);
    v33 = *(_QWORD *)(*v31 + 120);
    __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*v31 + 88), v32);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v33 + 96))(v32, v33) & 1) == 0)
    {
      v34 = objc_msgSend(v48, sel_contentView);
      sub_1A9B94A18(0, &qword_1EEB47F90);
      v35 = sub_1A9CE8760();

      if ((v35 & 1) != 0)
        objc_msgSend(v46, sel_removeFromSuperview);
    }
    v36 = __swift_project_boxed_opaque_existential_1Tm(v53, v54);
    v37 = *(_QWORD *)(*v36 + 112);
    v38 = *(_QWORD *)(*v36 + 120);
    __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*v36 + 88), v37);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v38 + 136))(v37, v38) & 1) == 0)
    {
      v39 = objc_msgSend(v48, sel_contentView);
      sub_1A9B94A18(0, &qword_1EEB47F90);
      v40 = sub_1A9CE8760();

      if ((v40 & 1) != 0)
        objc_msgSend(v3, sel_removeFromSuperview);
    }
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
  }
  return result;
}

uint64_t sub_1A9CA2BE4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v25;
  __int128 v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;

  v1 = v0;
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item];
  swift_beginAccess();
  sub_1A9BCA29C(v2, (uint64_t)&v25);
  if (*((_QWORD *)&v26 + 1))
  {
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
    sub_1A9B94928(0, &qword_1EEB49750);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v37 + 1))
      {
        sub_1A9B949B8(&v36, (uint64_t)v47);
        v3 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_titleLabel];
        v4 = __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC6684(*((_BYTE *)v4 + 8));
        v5 = (void *)sub_1A9CE82B0();
        swift_bridgeObjectRelease();
        objc_msgSend(v3, sel_setText_, v5);

        __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC54B8((uint64_t)&v36);
        v6 = v41;
        v7 = v42;
        v8 = v43;
        v25 = v36;
        v26 = v37;
        v27 = v38;
        v28 = v39;
        v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v43;
        v33 = v44;
        v34 = v45;
        v35 = v46;
        sub_1A9BBF29C((double *)&v25);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC5748(*v9, (uint64_t)&v36);
        v10 = v41;
        v11 = v42;
        v12 = v43;
        v25 = v36;
        v26 = v37;
        v27 = v38;
        v28 = v39;
        v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v43;
        v33 = v44;
        v34 = v45;
        v35 = v46;
        sub_1A9BBF29C((double *)&v25);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC5C1C(*v13, (uint64_t)&v36);
        v14 = v41;
        v15 = v42;
        v16 = v43;
        v25 = v36;
        v26 = v37;
        v27 = v38;
        v28 = v39;
        v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v43;
        v33 = v44;
        v34 = v45;
        v35 = v46;
        sub_1A9BBF29C((double *)&v25);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC59B4(*v17, (uint64_t)&v36);
        v18 = v41;
        v19 = v42;
        v20 = v43;
        v25 = v36;
        v26 = v37;
        v27 = v38;
        v28 = v39;
        v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v43;
        v33 = v44;
        v34 = v45;
        v35 = v46;
        sub_1A9BBF29C((double *)&v25);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        sub_1A9BC5F58((uint64_t)&v36);
        v21 = v41;
        v22 = v42;
        v23 = v43;
        v25 = v36;
        v26 = v37;
        v27 = v38;
        v28 = v39;
        v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v43;
        v33 = v44;
        v34 = v45;
        v35 = v46;
        sub_1A9BBF29C((double *)&v25);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A9CA24C0();
        sub_1A9CA22D0();
        __swift_project_boxed_opaque_existential_1Tm(v47, v48);
        objc_msgSend(v1, sel_separatorInset);
        objc_msgSend(v1, sel_setSeparatorInset_);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
      }
    }
    else
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
    }
  }
  else
  {
    sub_1A9BEDB34((uint64_t)&v25, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
  }
  return sub_1A9BEDB34((uint64_t)&v36, &qword_1EEB49748, &qword_1EEB49750);
}

id sub_1A9CA3138()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConfirmationFeaturesTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ConfirmationFeaturesTableViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1A9CA3238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item;
  swift_beginAccess();
  return sub_1A9BCA29C(v3, a1);
}

uint64_t sub_1A9CA3288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA1C8(a1, v3);
  swift_endAccess();
  sub_1A9CA2BE4();
  return sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
}

uint64_t (*sub_1A9CA330C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9CA3354;
}

uint64_t sub_1A9CA3354(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9CA2BE4();
  return result;
}

uint64_t sub_1A9CA3384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CF5D5C, a3);
  return sub_1A9CE67E0();
}

void sub_1A9CA33E8()
{
  char *v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_item];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  v3 = (void *)*MEMORY[0x1E0DC4B10];
  v4 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  v5 = *MEMORY[0x1E0DC1448];
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v7 = v3;
  v8 = v4;
  v9 = objc_msgSend(v6, sel_init);
  v10 = v9;
  if (v8)
    objc_msgSend(v9, sel_setTextColor_, v8);
  v11 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_titleLabel;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v12 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v7, 0, 0, 0, 0, 0, 0, v5, 0);
  objc_msgSend(v10, sel_setFont_, v12);

  objc_msgSend(v10, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v10, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v10, sel_setLineBreakMode_, 0);
  objc_msgSend(v10, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v1[v11] = v10;
  v13 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepFocusModeView;
  v14 = (objc_class *)type metadata accessor for ConfirmationFeatureView();
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v15 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepScreenView;
  *(_QWORD *)&v1[v15] = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v16 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_windDownView;
  *(_QWORD *)&v1[v16] = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v17 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_sleepTrackingView;
  *(_QWORD *)&v1[v17] = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v18 = OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_healthStatusView;
  *(_QWORD *)&v1[v18] = objc_msgSend(objc_allocWithZone(v14), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI33ConfirmationFeaturesTableViewCell_currentConstraints] = MEMORY[0x1E0DEE9D8];

  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9CA3674()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9CA3698(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A9CA1E08(a1, a2, v2);
}

void sub_1A9CA36A0()
{
  char *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v1, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_titleLabel]);

  v2 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v2, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker]);

  v3 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v3, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel]);

}

id sub_1A9CA3768()
{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;

  sub_1A9C485A8();
  v1 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel);
  LODWORD(v2) = 1148813312;
  objc_msgSend(v1, sel_setContentHuggingPriority_forAxis_, 1, v2);
  LODWORD(v3) = 1148846080;
  objc_msgSend(v1, sel_setContentCompressionResistancePriority_forAxis_, 1, v3);
  return objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
}

void sub_1A9CA37DC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v1 = v0;
  sub_1A9C48FA8();
  v17 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEF0F0;
  v3 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel];
  v4 = objc_msgSend(v3, sel_topAnchor);
  v5 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_datePicker], sel_bottomAnchor);
  v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(_QWORD *)(v2 + 32) = v6;
  v7 = objc_msgSend(v3, sel_leadingAnchor);
  v8 = objc_msgSend(v1, sel_contentView);
  v9 = objc_msgSend(v8, sel_layoutMarginsGuide);

  v10 = objc_msgSend(v9, sel_leadingAnchor);
  v11 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v2 + 40) = v11;
  v12 = objc_msgSend(v1, sel_contentView);
  v13 = objc_msgSend(v12, sel_layoutMarginsGuide);

  v14 = objc_msgSend(v13, sel_trailingAnchor);
  v15 = objc_msgSend(v3, sel_trailingAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v2 + 48) = v16;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v18 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_activateConstraints_, v18);

}

void sub_1A9CA3A54()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CEF8A0;
  v4 = objc_msgSend(v1, sel_contentView);
  v5 = objc_msgSend(v4, sel_layoutMarginsGuide);

  v6 = objc_msgSend(v5, sel_bottomAnchor);
  v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel], sel_bottomAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v3 + 32) = v8;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v9 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v9);

}

void sub_1A9CA3BC0(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v21;
  uint64_t v22;

  v3 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C4A1BC(a1);
  v7 = &a1[*(int *)(v3 + 68)];
  v8 = *(_QWORD *)v7;
  v9 = *((_QWORD *)v7 + 1);
  v10 = v1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  swift_beginAccess();
  v11 = (_QWORD *)(v10 + *(int *)(v3 + 68));
  v12 = v11[1];
  if (!v9)
  {
    if (!v12)
    {
LABEL_14:
      sub_1A9BD9150((uint64_t)a1, (uint64_t)v6);
      goto LABEL_15;
    }
LABEL_10:
    sub_1A9BD9150((uint64_t)a1, (uint64_t)v6);
    goto LABEL_11;
  }
  if (!v12)
    goto LABEL_10;
  if (v8 == *v11 && v9 == v12)
    goto LABEL_14;
  v14 = sub_1A9CE8BB0();
  sub_1A9BD9150((uint64_t)a1, (uint64_t)v6);
  if ((v14 & 1) == 0)
    goto LABEL_11;
LABEL_15:
  v15 = *(int *)(v3 + 64);
  v16 = &v6[v15];
  v17 = *(_QWORD *)&v6[v15 + 8];
  v18 = (_QWORD *)(v10 + v15);
  v19 = v18[1];
  if (!v17)
  {
    swift_bridgeObjectRetain();
    sub_1A9BD9114((uint64_t)v6);
    if (!v19)
      return;
    swift_bridgeObjectRelease();
LABEL_12:
    sub_1A9CA3D5C();
    return;
  }
  if (!v19)
  {
LABEL_11:
    sub_1A9BD9114((uint64_t)v6);
    goto LABEL_12;
  }
  if (*(_QWORD *)v16 == *v18 && v17 == v19)
  {
    sub_1A9BD9114((uint64_t)v6);
    return;
  }
  v21 = sub_1A9CE8BB0();
  sub_1A9BD9114((uint64_t)v6);
  if ((v21 & 1) == 0)
    goto LABEL_12;
}

void sub_1A9CA3D5C()
{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel);
  v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
  if ((v1 & 1) != 0)
  {
    swift_beginAccess();
    v4 = *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 68);
  }
  else
  {
    swift_beginAccess();
    v4 = *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 64);
  }
  if (*(_QWORD *)(v3 + v4 + 8))
  {
    swift_bridgeObjectRetain();
    v5 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v2, sel_setText_, v5);

}

id ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell.__allocating_init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a3)
  {
    v6 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithStyle_reuseIdentifier_, a1, v6);

  return v7;
}

id ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  objc_super v17;

  v4 = v3;
  v7 = OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel;
  v8 = (void *)objc_opt_self();
  v9 = v4;
  v10 = objc_msgSend(v8, sel_secondaryLabelColor);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  objc_msgSend(v11, sel_setTextColor_, v10);

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v12 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4AB8], 0, 0, 1, 0, 0, 0, *MEMORY[0x1E0DC1448], 0);
  objc_msgSend(v11, sel_setFont_, v12);

  objc_msgSend(v11, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v11, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v11, sel_setNumberOfLines_, 1);
  v13 = (void *)sub_1A9CE82B0();
  objc_msgSend(v11, sel_setText_, v13);

  *(_QWORD *)&v4[v7] = v11;
  if (a3)
  {
    v14 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  v15 = objc_msgSendSuper2(&v17, sel_initWithStyle_reuseIdentifier_, a1, v14);

  return v15;
}

void sub_1A9CA40E4()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13SleepHealthUI60ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell_dayLabel));
}

id ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell()
{
  uint64_t result;

  result = qword_1EEB49780;
  if (!qword_1EEB49780)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9CA4174()
{
  return type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
}

uint64_t sub_1A9CA417C()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1A9CA41CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void (*v4)(_QWORD *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  sub_1A9CE70C8();
  sub_1A9CA4764(&qword_1EEB49798, MEMORY[0x1E0CD9390]);
  sub_1A9CE8520();
  sub_1A9CE855C();
  if (v9[4] == v9[0])
  {
    v2 = sub_1A9CE702C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    v4 = (void (*)(_QWORD *, _QWORD))sub_1A9CE858C();
    v6 = v5;
    v7 = sub_1A9CE702C();
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v6, v7);
    v4(v9, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
}

double ProportionalHStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, int a2)
{
  double *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  double v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, _QWORD);
  double v27;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char v32;
  char v33;
  double v34;
  double v35;
  char v36;
  char v37;
  double v38;
  double v39;
  double v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  double v44;
  char *v45;
  int v46;
  char v47[32];
  char v48;

  v46 = a2;
  sub_1A9CA46D4();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v42 - v10;
  v12 = sub_1A9CE702C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v42 - v19;
  v21 = *v2;
  v22 = v2[1];
  sub_1A9CA41CC((uint64_t)v11);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v23(v11, 1, v12) == 1)
  {
    v24 = (uint64_t)v11;
LABEL_7:
    sub_1A9CA4728(v24);
    return 0.0;
  }
  v44 = *(double *)&a1;
  v45 = v20;
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(v20, v11, v12);
  sub_1A9CE70C8();
  sub_1A9CA4764(&qword_1EEB49798, MEMORY[0x1E0CD9390]);
  if ((sub_1A9CE8544() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v7, 1, 1, v12);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v45, v12);
    v24 = (uint64_t)v7;
    goto LABEL_7;
  }
  v43 = v16;
  sub_1A9CE855C();
  sub_1A9CA4764(&qword_1EEB497A0, MEMORY[0x1E0CD9380]);
  sub_1A9CE8274();
  v26 = (void (*)(char *, _QWORD))sub_1A9CE858C();
  (*(void (**)(char *))(v13 + 16))(v7);
  v26(v47, 0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
  if (v23(v7, 1, v12) == 1)
    goto LABEL_6;
  v29 = v43;
  v25(v43, v7, v12);
  sub_1A9CE8520();
  sub_1A9CE855C();
  if (sub_1A9CE8550() != 2)
  {
    v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    v31(v29, v12);
    v31(v45, v12);
    return 0.0;
  }
  v30 = v45;
  if ((v46 & 1) != 0)
  {
    sub_1A9CE71A0();
    v47[0] = v32 & 1;
    v48 = v33 & 1;
    sub_1A9CE7014();
    v35 = v34;
    sub_1A9CE71A0();
    v47[0] = v36 & 1;
    v48 = v37 & 1;
    sub_1A9CE7014();
    v38 = ceil(v35 / v21);
    v40 = ceil((v22 + v39) / (1.0 - v21));
    if (v38 > v40)
      v27 = v38;
    else
      v27 = v40;
  }
  else
  {
    v27 = v44;
  }
  v47[0] = 0;
  v48 = 1;
  sub_1A9CE7014();
  v47[0] = 0;
  v48 = 1;
  sub_1A9CE7014();
  v41 = *(void (**)(char *, uint64_t))(v13 + 8);
  v41(v29, v12);
  v41(v30, v12);
  return v27;
}

double static ProportionalHStack.idealWidth(forFirstSubviewWidth:secondSubviewWidth:ratio:spacing:)(double a1, double a2, double a3, double a4)
{
  double result;
  double v5;

  result = ceil(a1 / a3);
  v5 = ceil((a2 + a4) / (1.0 - a3));
  if (result <= v5)
    return v5;
  return result;
}

void sub_1A9CA46D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49790)
  {
    sub_1A9CE702C();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49790);
  }
}

uint64_t sub_1A9CA4728(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CA46D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9CA4764(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A9CE70C8();
    result = MEMORY[0x1AF420284](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ProportionalHStack.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_1A9CA4870(a1, a2, a3, a4);
}

double sub_1A9CA47C0(uint64_t a1, char a2)
{
  return ProportionalHStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1);
}

uint64_t sub_1A9CA47D0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_1A9CA4870(a1, a2, a3, a4);
}

uint64_t sub_1A9CA47DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1A9CA4834(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E0CDFB58]);
}

uint64_t sub_1A9CA4808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1A9CA4834(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E0CDFB60]);
}

uint64_t sub_1A9CA4834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_1A9CA4870(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  _BYTE v33[32];
  char v34;
  CGRect v35;
  CGRect v36;

  sub_1A9CA46D4();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v33[-v15 - 8];
  v17 = sub_1A9CE702C();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = &v33[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v33[-v24 - 8];
  v26 = *v4;
  sub_1A9CA41CC((uint64_t)v16);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v27(v16, 1, v17) == 1)
    return sub_1A9CA4728((uint64_t)v16);
  v29 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v29(v25, v16, v17);
  sub_1A9CE70C8();
  sub_1A9CA4764(&qword_1EEB49798, MEMORY[0x1E0CD9390]);
  if ((sub_1A9CE8544() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v12, 1, 1, v17);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
    return sub_1A9CA4728((uint64_t)v12);
  }
  v32 = v29;
  sub_1A9CE855C();
  sub_1A9CA4764(&qword_1EEB497A0, MEMORY[0x1E0CD9380]);
  sub_1A9CE8274();
  v30 = (void (*)(_BYTE *, _QWORD))sub_1A9CE858C();
  (*(void (**)(char *))(v18 + 16))(v12);
  v30(v33, 0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
  if (v27(v12, 1, v17) == 1)
    goto LABEL_6;
  v32(v21, v12, v17);
  sub_1A9CE8520();
  sub_1A9CE855C();
  if (sub_1A9CE8550() == 2)
  {
    v35.origin.x = a1;
    v35.origin.y = a2;
    v35.size.width = a3;
    v35.size.height = a4;
    ceil(v26 * CGRectGetWidth(v35));
    sub_1A9CE8028();
    v33[0] = 0;
    v34 = 1;
    sub_1A9CE7020();
    v36.origin.x = a1;
    v36.origin.y = a2;
    v36.size.width = a3;
    v36.size.height = a4;
    CGRectGetWidth(v36);
    sub_1A9CE8028();
    v33[0] = 0;
    v34 = 1;
    sub_1A9CE7020();
  }
  v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  v31(v21, v17);
  return ((uint64_t (*)(char *, uint64_t))v31)(v25, v17);
}

unint64_t sub_1A9CA4C04()
{
  unint64_t result;

  result = qword_1EEB497A8;
  if (!qword_1EEB497A8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ProportionalHStack, &type metadata for ProportionalHStack);
    atomic_store(result, (unint64_t *)&qword_1EEB497A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProportionalHStack()
{
  return &type metadata for ProportionalHStack;
}

uint64_t QuickScheduleManagementViewRepresentation.init(sleepStore:provenanceSource:isEditingSchedule:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

char *QuickScheduleManagementViewRepresentation.makeUIViewController(context:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  char *result;
  char *v5;
  void *v6;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v3 = objc_allocWithZone((Class)type metadata accessor for QuickScheduleManagementViewController());
  result = QuickScheduleManagementViewController.init(sleepStore:provenanceSource:)(v1, v2);
  if (result)
  {
    v5 = result;
    sub_1A9CA55A4();
    sub_1A9CE76E0();
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id QuickScheduleManagementViewRepresentation.makeCoordinator()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  objc_class *v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  objc_super v12;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  v6 = (objc_class *)type metadata accessor for QuickScheduleManagementViewRepresentation.Coordinator();
  v7 = (char *)objc_allocWithZone(v6);
  swift_unknownObjectWeakInit();
  v8 = &v7[OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent];
  *(_QWORD *)v8 = v1;
  *((_QWORD *)v8 + 1) = v2;
  *((_QWORD *)v8 + 2) = v3;
  *((_QWORD *)v8 + 3) = v4;
  v8[32] = v5;
  v12.receiver = v7;
  v12.super_class = v6;
  v9 = v1;
  v10 = v2;
  swift_retain();
  swift_retain();
  return objc_msgSendSuper2(&v12, sel_init);
}

id QuickScheduleManagementViewRepresentation.Coordinator.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  swift_unknownObjectWeakInit();
  v7 = &v3[OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent];
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *((_QWORD *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v5;
  v7[32] = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id sub_1A9CA4E5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  id v10;

  v3 = *a1 + OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v10 = *(id *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_BYTE *)(v3 + 32);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  swift_retain();
  swift_retain();
  v8 = v4;
  return v10;
}

uint64_t sub_1A9CA4EDC(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *a2 + OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v8 = *(void **)v7;
  v9 = *(void **)(v7 + 8);
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v6;
  swift_retain();
  swift_retain();
  v10 = v2;
  v11 = v3;
  swift_release();

  return swift_release();
}

id sub_1A9CA4F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;
  id v10;

  v3 = v1 + OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v4 = *(void **)v3;
  v10 = *(id *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_BYTE *)(v3 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  swift_retain();
  swift_retain();
  v8 = v4;
  return v10;
}

uint64_t sub_1A9CA500C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v1 + OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent;
  swift_beginAccess();
  v7 = *(void **)v6;
  v8 = *(void **)(v6 + 8);
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v5;
  swift_release();

  return swift_release();
}

uint64_t (*sub_1A9CA509C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id QuickScheduleManagementViewRepresentation.Coordinator.init(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  objc_super v8;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  swift_unknownObjectWeakInit();
  v6 = &v1[OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent];
  *(_OWORD *)v6 = *(_OWORD *)a1;
  *((_QWORD *)v6 + 2) = v3;
  *((_QWORD *)v6 + 3) = v4;
  v6[32] = v5;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for QuickScheduleManagementViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t sub_1A9CA5164()
{
  return sub_1A9CA587C("[%{public}s] Will save schedule.");
}

void sub_1A9CA51D8(uint64_t a1, void *a2)
{
  sub_1A9CA5660(a2);
}

uint64_t sub_1A9CA5244()
{
  return sub_1A9CA587C("[%{public}s] Did cancel.");
}

void sub_1A9CA52B8(uint64_t a1, void *a2)
{
  sub_1A9CA5A50(a2);
}

id QuickScheduleManagementViewRepresentation.Coordinator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void QuickScheduleManagementViewRepresentation.Coordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id QuickScheduleManagementViewRepresentation.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QuickScheduleManagementViewRepresentation.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1A9CA5428@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  id v11;
  id v12;
  id result;
  objc_super v14;

  v3 = *(void **)v1;
  v4 = *(void **)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = (objc_class *)type metadata accessor for QuickScheduleManagementViewRepresentation.Coordinator();
  v9 = (char *)objc_allocWithZone(v8);
  swift_unknownObjectWeakInit();
  v10 = &v9[OBJC_IVAR____TtCV13SleepHealthUI41QuickScheduleManagementViewRepresentation11Coordinator_parent];
  *(_QWORD *)v10 = v3;
  *((_QWORD *)v10 + 1) = v4;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v6;
  v10[32] = v7;
  v14.receiver = v9;
  v14.super_class = v8;
  v11 = v3;
  v12 = v4;
  swift_retain();
  swift_retain();
  result = objc_msgSendSuper2(&v14, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_1A9CA54E0()
{
  sub_1A9CA55FC();
  return sub_1A9CE76A4();
}

uint64_t sub_1A9CA5530()
{
  sub_1A9CA55FC();
  return sub_1A9CE7674();
}

void sub_1A9CA5580()
{
  sub_1A9CA55FC();
  sub_1A9CE7698();
  __break(1u);
}

void sub_1A9CA55A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB497B0)
  {
    sub_1A9CA55FC();
    v0 = sub_1A9CE76EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB497B0);
  }
}

unint64_t sub_1A9CA55FC()
{
  unint64_t result;

  result = qword_1EEB497B8;
  if (!qword_1EEB497B8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for QuickScheduleManagementViewRepresentation, &type metadata for QuickScheduleManagementViewRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEB497B8);
  }
  return result;
}

uint64_t type metadata accessor for QuickScheduleManagementViewRepresentation.Coordinator()
{
  return objc_opt_self();
}

void sub_1A9CA5660(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;

  swift_getObjectType();
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB572B0);
  v12 = a1;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v13);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    sub_1A9CA5FFC();
    v9 = v12;
    v10 = sub_1A9CE82F8();
    sub_1A9B91D6C(v10, v11, &v13);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Did save schedule %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1A9CA587C(const char *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10[3];

  swift_getObjectType();
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB572B0);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, a1, v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  swift_beginAccess();
  sub_1A9C6F4F8();
  return sub_1A9CE7EF0();
}

void sub_1A9CA5A50(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18[2];

  swift_getObjectType();
  v2 = objc_msgSend(a1, sel_title);
  if (v2)
  {
    v3 = v2;
    v4 = sub_1A9CE82E0();
    v6 = v5;

  }
  else
  {
    v6 = 0x80000001A9CFEFD0;
    v4 = 0xD00000000000001BLL;
  }
  v7 = objc_msgSend(a1, sel_message);
  if (v7)
  {
    v8 = v7;
    sub_1A9CE82E0();

  }
  v18[1] = v6;
  sub_1A9CE8340();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v10 = v4;
  v9 = v6;
  if (qword_1EEB42CC8 != -1)
    swift_once();
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EEB572B0);
  swift_bridgeObjectRetain();
  v12 = sub_1A9CE6978();
  v13 = sub_1A9CE8664();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v18[0] = v15;
    *(_DWORD *)v14 = 136446466;
    v16 = sub_1A9CE8D48();
    sub_1A9B91D6C(v16, v17, v18);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1A9B91D6C(v10, v9, v18);
    sub_1A9CE888C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v15, -1, -1);
    MEMORY[0x1AF420344](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t destroy for QuickScheduleManagementViewRepresentation(id *a1)
{

  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for QuickScheduleManagementViewRepresentation(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = v3;
  v7 = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QuickScheduleManagementViewRepresentation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for QuickScheduleManagementViewRepresentation(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuickScheduleManagementViewRepresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuickScheduleManagementViewRepresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuickScheduleManagementViewRepresentation()
{
  return &type metadata for QuickScheduleManagementViewRepresentation;
}

uint64_t method lookup function for QuickScheduleManagementViewRepresentation.Coordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.parent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.parent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.parent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.quickScheduleManagementViewControllerWillSave(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.quickScheduleManagementViewController(_:didSave:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.quickScheduleManagementViewControllerDidCancel(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of QuickScheduleManagementViewRepresentation.Coordinator.quickScheduleManagementViewController(_:shouldPresent:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

void sub_1A9CA5FFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262910)
  {
    sub_1A9CA6050();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262910);
  }
}

unint64_t sub_1A9CA6050()
{
  unint64_t result;

  result = qword_1ED262900;
  if (!qword_1ED262900)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED262900);
  }
  return result;
}

id static Font.chartUnit.getter()
{
  id result;
  void *v1;
  unsigned int v2;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_isAppleWatch);

    if (v2)
    {
      return (id)sub_1A9CE789C();
    }
    else
    {
      if (qword_1EEB42EC0 != -1)
        swift_once();
      return (id)swift_retain();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Font.short.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_1A9CE7884();
  v1 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x1E0C80A78](v0, v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v1 + 104))(v5, *MEMORY[0x1E0CDD6D8], v0, v3);
  v6 = sub_1A9CE78A8();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  return v6;
}

uint64_t sub_1A9CA61C4(uint64_t a1)
{
  return sub_1A9CA6208(a1, MEMORY[0x1E0CDD7B0], &qword_1EEB497F8);
}

uint64_t static Font.title2Rounded.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EB8);
}

uint64_t sub_1A9CA61F4(uint64_t a1)
{
  return sub_1A9CA6208(a1, MEMORY[0x1E0CDD7E0], &qword_1EEB49800);
}

uint64_t sub_1A9CA6208(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  sub_1A9CA68E4();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE78CC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *a2, v9);
  v14 = *MEMORY[0x1E0CDD550];
  v15 = sub_1A9CE7800();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v8, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  v17 = sub_1A9CE7848();
  sub_1A9CA6938((uint64_t)v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *a3 = v17;
  return result;
}

uint64_t static Font.footnoteRounded.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EC0);
}

uint64_t sub_1A9CA635C(uint64_t a1)
{
  return sub_1A9CA65CC(a1, (void (*)(uint64_t))MEMORY[0x1E0CDD770], MEMORY[0x1E0CDD6D8], &qword_1EEB49808);
}

uint64_t static Font.footnoteTightLeading.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EC8);
}

uint64_t sub_1A9CA6394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_1A9CA68E4();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A9CE77B8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE77AC();
  v9 = *MEMORY[0x1E0CDD550];
  v10 = sub_1A9CE7800();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v3, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v3, 0, 1, v10);
  v12 = sub_1A9CE783C();
  sub_1A9CA6938((uint64_t)v3);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  qword_1EEB49810 = v12;
  return result;
}

uint64_t static Font.footnote2Rounded.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42ED0);
}

uint64_t sub_1A9CA64D8(uint64_t a1)
{
  return sub_1A9CA65CC(a1, (void (*)(uint64_t))MEMORY[0x1E0CDD810], MEMORY[0x1E0CDD6D8], &qword_1EEB49818);
}

uint64_t static Font.footnote2TightLeading.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42ED8);
}

uint64_t sub_1A9CA6510()
{
  uint64_t result;

  if (qword_1EEB42ED8 != -1)
    swift_once();
  result = sub_1A9CE77C4();
  qword_1EEB49820 = result;
  return result;
}

uint64_t static Font.footnote2TightLeadingSmallCaps.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EE0);
}

uint64_t sub_1A9CA6578(uint64_t a1)
{
  return sub_1A9CA65CC(a1, (void (*)(uint64_t))MEMORY[0x1E0CDD4D8], MEMORY[0x1E0CDD6D0], &qword_1EEB49828);
}

uint64_t static Font.bodyLoose.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EE8);
}

uint64_t sub_1A9CA65B0(uint64_t a1)
{
  return sub_1A9CA65CC(a1, (void (*)(uint64_t))MEMORY[0x1E0CDD770], MEMORY[0x1E0CDD6D0], &qword_1EEB49830);
}

uint64_t sub_1A9CA65CC(uint64_t a1, void (*a2)(uint64_t), unsigned int *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v7 = sub_1A9CE7884();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v12, *a3, v7);
  v13 = sub_1A9CE78A8();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  *a4 = v13;
  return result;
}

uint64_t static Font.footnoteLoose.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42EF0);
}

void static UIFont.footnote2TightLeading.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x1E0DC4AC8]);
  v1 = objc_msgSend(v0, sel_fontDescriptorWithSymbolicTraits_, 0x8000);

  if (v1)
  {
    objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v1, 0.0);

  }
  else
  {
    __break(1u);
  }
}

void static UIFont.footnote2TightLeadingSmallCaps.getter()
{
  id v0;
  id v1;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x1E0DC4AC8]);
  v1 = objc_msgSend(v0, sel_fontDescriptorWithSymbolicTraits_, 0x8000);

  if (v1)
  {
    isa = UIFontDescriptor.addingLowercaseSmallCapsAttributes()().super.isa;

    objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, isa, 0.0);
  }
  else
  {
    __break(1u);
  }
}

id static UIFont.chartUnit.getter()
{
  id result;
  void *v1;
  unsigned int v2;
  uint64_t *v3;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_isAppleWatch);

    sub_1A9CA68A8();
    v3 = (uint64_t *)MEMORY[0x1E0DC4A98];
    if (!v2)
      v3 = (uint64_t *)MEMORY[0x1E0DC4AB8];
    return static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*v3, 0, v2 ^ 1, 0, 0, 0, 0, 0, 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1A9CA68A8()
{
  unint64_t result;

  result = qword_1EEB45220;
  if (!qword_1EEB45220)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB45220);
  }
  return result;
}

void sub_1A9CA68E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263210)
  {
    sub_1A9CE7800();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263210);
  }
}

uint64_t sub_1A9CA6938(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CA68E4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9CA6974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A9CE8490();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A9CE8484();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A9CA7EEC(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A9CE8460();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t SleepNotificationManager.__allocating_init(notificationCenter:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

BOOL static SleepNotificationManager.AuthorizationStatus.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t SleepNotificationManager.AuthorizationStatus.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t SleepNotificationManager.AuthorizationStatus.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t SleepNotificationManager.init(notificationCenter:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1A9CA6B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v7 = v6;
  sub_1A9CA6C98();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE8490();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_1A9CE8478();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v19 = sub_1A9CE846C();
  v20 = (_QWORD *)swift_allocObject();
  v21 = MEMORY[0x1E0DF06E8];
  v20[2] = v19;
  v20[3] = v21;
  v20[4] = v7;
  v20[5] = a1;
  v20[6] = a2;
  v20[7] = a3;
  v20[8] = a4;
  v20[9] = a5;
  v20[10] = a6;
  sub_1A9CA6974((uint64_t)v17, (uint64_t)&unk_1EEB48A80, (uint64_t)v20);
  return swift_release();
}

void sub_1A9CA6C98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB453C0)
  {
    sub_1A9CE8490();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, &qword_1EEB453C0);
  }
}

uint64_t sub_1A9CA6CEC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v8[7] = v12;
  v8[8] = v13;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v8[9] = sub_1A9CE8478();
  v8[10] = sub_1A9CE846C();
  v10 = (_QWORD *)swift_task_alloc();
  v8[11] = v10;
  *v10 = v8;
  v10[1] = sub_1A9CA6D84;
  v10[16] = a4;
  v10[17] = *a4;
  return swift_task_switch();
}

uint64_t sub_1A9CA6D84(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_BYTE *)(*v1 + 120) = a1;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 96) = sub_1A9CE8460();
  *(_QWORD *)(v2 + 104) = v3;
  return swift_task_switch();
}

uint64_t sub_1A9CA6E04()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;

  if (*(_BYTE *)(v0 + 120))
  {
    v1 = 24;
    if (*(_BYTE *)(v0 + 120) != 1)
      v1 = 40;
    v2 = *(void (**)(uint64_t))(v0 + v1);
    v3 = swift_release();
    v2(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v5;
    *v5 = v0;
    v5[1] = sub_1A9CA6EB8;
    v6 = *(_QWORD **)(v0 + 16);
    v5[15] = v6;
    v5[16] = *v6;
    return swift_task_switch();
  }
}

uint64_t sub_1A9CA6EB8(char a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)

  else
    *(_BYTE *)(v4 + 121) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_1A9CA6F34()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 121);
  v2 = *(void (**)(uint64_t))(v0 + 56);
  swift_release();
  v2(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A9CA6F7C()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 56);
  swift_release();
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A9CA6FB8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9CA6FFC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  *(_QWORD *)(v1 + 136) = *v0;
  return swift_task_switch();
}

uint64_t sub_1A9CA701C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v10;

  if (qword_1EEB42E78 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49440);
  v2 = sub_1A9CE6978();
  v3 = sub_1A9CE867C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_1A9CE8D48();
    v0[10] = sub_1A9B91D6C(v6, v7, &v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v2, v3, "%s [TCC] requestAuthorizationStatus initiating", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v5, -1, -1);
    MEMORY[0x1AF420344](v4, -1, -1);
  }

  v8 = *(void **)(v0[16] + 16);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1A9CA7214;
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = sub_1A9CA7430;
  v0[13] = &block_descriptor_3_3;
  objc_msgSend(v8, sel_getNotificationSettingsWithCompletionHandler_, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_1A9CA7214()
{
  return swift_task_switch();
}

uint64_t sub_1A9CA7260()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(v1, sel_authorizationStatus);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = sub_1A9CE8D48();
    *(_QWORD *)(v0 + 80) = sub_1A9B91D6C(v7, v8, &v13);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v2;
    type metadata accessor for UNAuthorizationStatus(0);
    v9 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 80) = sub_1A9B91D6C(v9, v10, &v13);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "%s [TCC] requestAuthorizationStatus status: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v11 = sub_1A9CA7CF8((unint64_t)v2);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
}

uint64_t sub_1A9CA7430(uint64_t a1, void *a2)
{
  id v2;

  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  v2 = a2;
  return swift_continuation_resume();
}

uint64_t sub_1A9CA7460()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  *(_QWORD *)(v1 + 128) = *v0;
  return swift_task_switch();
}

uint64_t sub_1A9CA7480()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v10;

  if (qword_1EEB42E78 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  v0[17] = __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49440);
  v2 = sub_1A9CE6978();
  v3 = sub_1A9CE867C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_1A9CE8D48();
    v0[10] = sub_1A9B91D6C(v6, v7, &v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v2, v3, "%s [TCC] requestAuthorization initiating", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v5, -1, -1);
    MEMORY[0x1AF420344](v4, -1, -1);
  }

  v8 = *(void **)(v0[15] + 16);
  v0[7] = v0 + 19;
  v0[2] = v0;
  v0[3] = sub_1A9CA767C;
  v0[14] = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = sub_1A9CA7A38;
  v0[13] = &block_descriptor_31;
  objc_msgSend(v8, sel_requestAuthorizationWithOptions_completionHandler_, 39, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_1A9CA767C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1A9CA76DC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 152);
  v2 = sub_1A9CE6978();
  v3 = sub_1A9CE867C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315394;
    v6 = sub_1A9CE8D48();
    *(_QWORD *)(v0 + 80) = sub_1A9B91D6C(v6, v7, &v9);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    *(_DWORD *)(v0 + 80) = v1;
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v2, v3, "%s [TCC] requestAuthorization granted: %{BOOL}d", (uint8_t *)v4, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v5, -1, -1);
    MEMORY[0x1AF420344](v4, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1A9CA7848()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 144);
  swift_willThrow();
  v2 = v1;
  v3 = v1;
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE8664();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 144);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v16[0] = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = sub_1A9CE8D48();
    *(_QWORD *)(v0 + 80) = sub_1A9B91D6C(v9, v10, v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = v6;
    v11 = v6;
    sub_1A9BB15F4();
    v12 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 80) = sub_1A9B91D6C(v12, v13, v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v4, v5, "%s [TCC] requestAuthorization error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 144);

  }
  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1A9CA7A38(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_1A9BB15F4();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t SleepNotificationManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SleepNotificationManager.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t sub_1A9CA7AF8()
{
  unint64_t result;

  result = qword_1EEB49840;
  if (!qword_1EEB49840)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepNotificationManager.AuthorizationStatus, &type metadata for SleepNotificationManager.AuthorizationStatus);
    atomic_store(result, (unint64_t *)&qword_1EEB49840);
  }
  return result;
}

uint64_t type metadata accessor for SleepNotificationManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepNotificationManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepNotificationManager.__allocating_init(notificationCenter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SleepNotificationManager.requestAuthorizationIfNeeded(alreadyAuthorized:alreadyDenied:afterRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for SleepNotificationManager.AuthorizationStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9CA7BC8 + 4 * byte_1A9CF6035[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9CA7BFC + 4 * byte_1A9CF6030[v4]))();
}

uint64_t sub_1A9CA7BFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CA7C04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9CA7C0CLL);
  return result;
}

uint64_t sub_1A9CA7C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9CA7C20);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9CA7C24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CA7C2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepNotificationManager.AuthorizationStatus()
{
  return &type metadata for SleepNotificationManager.AuthorizationStatus;
}

uint64_t sub_1A9CA7C48(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A9CA7CAC;
  return v6(a1);
}

uint64_t sub_1A9CA7CAC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1A9CA7CF8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  if (a1 < 5)
    return 0x101010200uLL >> (8 * a1);
  if (qword_1EEB42E78 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49440);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8670();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315394;
    sub_1A9B91D6C(0xD000000000000013, 0x80000001A9CF60C0, &v10);
    sub_1A9CE888C();
    *(_WORD *)(v5 + 12) = 2080;
    type metadata accessor for UNAuthorizationStatus(0);
    v7 = sub_1A9CE82F8();
    sub_1A9B91D6C(v7, v8, &v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "%s [TCC] authorizationStatus unknown: %s", (uint8_t *)v5, 0x16u);
    v1 = 2;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);

  }
  else
  {

    return 2;
  }
  return v1;
}

uint64_t sub_1A9CA7EEC(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CA6C98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9CA7F28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9CA7F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A9BDDCC0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EEB49910 + dword_1EEB49910))(a1, v4);
}

void sub_1A9CA7FBC(char a1)
{
  sub_1A9CE8C4C();
  __asm { BR              X10 }
}

uint64_t sub_1A9CA8018()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

void sub_1A9CA8098(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1A9CA80E0()
{
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

void sub_1A9CA8148(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9CA818C()
{
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

void sub_1A9CA824C(uint64_t a1, char a2)
{
  sub_1A9CE8C4C();
  __asm { BR              X10 }
}

uint64_t sub_1A9CA829C()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

void sub_1A9CA8370(uint64_t a1, char a2)
{
  sub_1A9CE8C4C();
  __asm { BR              X10 }
}

uint64_t sub_1A9CA83C8()
{
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

SleepHealthUI::ArticleIdentifier_optional __swiftcall ArticleIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  SleepHealthUI::ArticleIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A9CE8B20();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static ArticleIdentifier.allCases.getter()
{
  return &unk_1E55D2B98;
}

uint64_t ArticleIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A9CA84E4 + 4 * byte_1A9CF611F[*v0]))(0xD000000000000023, 0x80000001A9CF7F60);
}

uint64_t sub_1A9CA84E4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

void sub_1A9CA8538(char *a1)
{
  sub_1A9C30BBC(*a1);
}

unint64_t sub_1A9CA8548()
{
  unint64_t result;

  result = qword_1EEB49920;
  if (!qword_1EEB49920)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ArticleIdentifier, &type metadata for ArticleIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EEB49920);
  }
  return result;
}

void sub_1A9CA858C()
{
  char *v0;

  sub_1A9CA7FBC(*v0);
}

void sub_1A9CA8594(uint64_t a1)
{
  char *v1;

  sub_1A9CA8098(a1, *v1);
}

void sub_1A9CA859C(uint64_t a1)
{
  char *v1;

  sub_1A9CA8370(a1, *v1);
}

SleepHealthUI::ArticleIdentifier_optional sub_1A9CA85A4(Swift::String *a1)
{
  return ArticleIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1A9CA85B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ArticleIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1A9CA85D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB49928;
  if (!qword_1EEB49928)
  {
    sub_1A9CA8620();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB49928);
  }
  return result;
}

void sub_1A9CA8620()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49930)
  {
    v0 = sub_1A9CE8430();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49930);
  }
}

void sub_1A9CA8674(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E55D2BC0;
}

uint64_t storeEnumTagSinglePayload for ArticleIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A9CA86D0 + 4 * byte_1A9CF6129[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A9CA8704 + 4 * byte_1A9CF6124[v4]))();
}

uint64_t sub_1A9CA8704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CA870C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9CA8714);
  return result;
}

uint64_t sub_1A9CA8720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9CA8728);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A9CA872C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CA8734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArticleIdentifier()
{
  return &type metadata for ArticleIdentifier;
}

id ScheduleOccurrenceHeaderView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id sub_1A9CA87A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC13SleepHealthUI28ScheduleOccurrenceHeaderView____lazy_storage___titleLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI28ScheduleOccurrenceHeaderView____lazy_storage___titleLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI28ScheduleOccurrenceHeaderView____lazy_storage___titleLabel);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setNumberOfLines_, 0);
    v5 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
    objc_msgSend(v4, sel_setTextColor_, v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id ScheduleOccurrenceHeaderView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  objc_super v18;

  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI28ScheduleOccurrenceHeaderView____lazy_storage___titleLabel] = 0;
  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for ScheduleOccurrenceHeaderView();
  v9 = objc_msgSendSuper2(&v18, sel_initWithFrame_, a1, a2, a3, a4);
  v10 = sub_1A9CA87A0();
  objc_msgSend(v9, sel_addSubview_, v10);

  sub_1A9CA8BD0();
  v11 = sub_1A9CA87A0();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v12 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4B58], 32770, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v11, sel_setFont_, v12);

  sub_1A9BC09A4();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1A9CEB520;
  v14 = sub_1A9CE6AB0();
  v15 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v15;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v16 = v9;
  sub_1A9CE87C0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v16;
}

uint64_t type metadata accessor for ScheduleOccurrenceHeaderView()
{
  return objc_opt_self();
}

void sub_1A9CA8A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_1A9CA87A0();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
    v7 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4B58], 32770, 0, 0, 0, 0, 0, 0, 1);
    objc_msgSend(v6, sel_setFont_, v7);

  }
}

void sub_1A9CA8BD0()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v1 = sub_1A9CA87A0();
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v2 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CED8F0;
  v4 = sub_1A9CA87A0();
  v5 = objc_msgSend(v4, sel_topAnchor);

  v6 = objc_msgSend(v0, sel_topAnchor);
  v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_constant_, v6, 12.0);

  *(_QWORD *)(v3 + 32) = v7;
  v8 = objc_msgSend(v0, sel_bottomAnchor);
  v9 = sub_1A9CA87A0();
  v10 = objc_msgSend(v9, sel_lastBaselineAnchor);

  v11 = objc_msgSend(v8, sel_constraintEqualToAnchor_constant_, v10, 12.0);
  *(_QWORD *)(v3 + 40) = v11;
  v12 = sub_1A9CA87A0();
  v13 = objc_msgSend(v12, sel_leadingAnchor);

  v14 = objc_msgSend(v0, sel_leadingAnchor);
  v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v14, 2.0);

  *(_QWORD *)(v3 + 48) = v15;
  v16 = objc_msgSend(v0, sel_trailingAnchor);
  v17 = sub_1A9CA87A0();
  v18 = objc_msgSend(v17, sel_trailingAnchor);

  v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v18, 2.0);
  *(_QWORD *)(v3 + 56) = v19;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v20 = (id)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v20);

}

id ScheduleOccurrenceHeaderView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceHeaderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9CA8E98()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9CA8EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9CA8A6C(a1, a2, v2);
}

uint64_t method lookup function for ScheduleOccurrenceHeaderView()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1A9CA8ED0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *);
  uint64_t v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];

  v1 = v0;
  v44 = *v0;
  v2 = type metadata accessor for Alarm();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v41 - v9;
  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v41 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v41 - v22;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v24 = sub_1A9CE6990();
  __swift_project_value_buffer(v24, (uint64_t)qword_1EEB49410);
  swift_retain_n();
  v25 = sub_1A9CE6978();
  v45 = sub_1A9CE867C();
  v26 = (_QWORD *)&unk_1EEB57000;
  if (os_log_type_enabled(v25, (os_log_type_t)v45))
  {
    v41 = v7;
    v42 = v10;
    v27 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    v48[0] = v43;
    *(_DWORD *)v27 = 136446466;
    v28 = sub_1A9CE8D48();
    v29 = v3;
    v30 = v2;
    v47 = sub_1A9B91D6C(v28, v31, v48);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    v32 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    sub_1A9CAA974(v32, (uint64_t)v23);
    sub_1A9CAA974((uint64_t)v23, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 1, v30) == 1)
    {
      v33 = 0xE300000000000000;
      v34 = 7104878;
    }
    else
    {
      v35 = (uint64_t)v42;
      sub_1A9BE9FBC((uint64_t)v20, (uint64_t)v42);
      sub_1A9CAA8F4(v35, (uint64_t)v41);
      v34 = sub_1A9CE82F8();
      v33 = v36;
      sub_1A9CAA938(v35);
    }
    sub_1A9CAA75C((uint64_t)v23);
    v46 = sub_1A9B91D6C(v34, v33, v48);
    sub_1A9CE888C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v25, (os_log_type_t)v45, "[%{public}s] upcoming alarm did change: %{public}s", (uint8_t *)v27, 0x16u);
    v37 = v43;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v37, -1, -1);
    MEMORY[0x1AF420344](v27, -1, -1);

    v26 = &unk_1EEB57000;
  }
  else
  {

    swift_release_n();
  }
  v38 = (void (*)(char *))v1[2];
  v39 = (uint64_t)v1 + v26[200];
  swift_beginAccess();
  sub_1A9CAA974(v39, (uint64_t)v16);
  v38(v16);
  return sub_1A9CAA75C((uint64_t)v16);
}

uint64_t sub_1A9CA9290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v27;

  v3 = v2;
  v6 = v3 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
  v7 = type metadata accessor for Alarm();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarmManager;
  *(_QWORD *)(v3 + v8) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D4FA58]), sel_init);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v9 = qword_1EEB42E60;
  swift_retain();
  if (v9 != -1)
    swift_once();
  v10 = sub_1A9CE6990();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EEB49410);
  v11 = sub_1A9CE6978();
  v12 = sub_1A9CE867C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v27 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_1A9CE8D48();
    sub_1A9B91D6C(v15, v16, &v27);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] init", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v14, -1, -1);
    MEMORY[0x1AF420344](v13, -1, -1);
  }

  v17 = (void *)objc_opt_self();
  v18 = objc_msgSend(v17, sel_defaultCenter);
  v19 = OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarmManager;
  objc_msgSend(v18, sel_addObserver_selector_name_object_, v3, sel_handleAlarmChangeWithNotification_, *MEMORY[0x1E0D4F950], *(_QWORD *)(v3 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarmManager));

  v20 = objc_msgSend(v17, sel_defaultCenter);
  objc_msgSend(v20, sel_addObserver_selector_name_object_, v3, sel_handleAlarmChangeWithNotification_, *MEMORY[0x1E0D4F980], *(_QWORD *)(v3 + v19));

  v21 = objc_msgSend(v17, sel_defaultCenter);
  v22 = (void *)*MEMORY[0x1E0D4F990];
  v23 = *(void **)(v3 + v19);
  swift_retain();
  v24 = v22;
  v25 = v23;
  objc_msgSend(v21, sel_addObserver_selector_name_object_, v3, sel_handleAlarmChangeWithNotification_, v24, v25);

  swift_release();
  swift_release();
  return v3;
}

void sub_1A9CA958C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_1A9CE5F88();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEB49410);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v10 = sub_1A9CE6978();
  v11 = sub_1A9CE867C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v19[1] = v2;
    v13 = v12;
    v14 = swift_slowAlloc();
    v21 = v14;
    *(_DWORD *)v13 = 136446466;
    v15 = sub_1A9CE8D48();
    v20 = sub_1A9B91D6C(v15, v16, &v21);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_1A9B92B9C(&qword_1EEB49A70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE648], MEMORY[0x1E0CAE658]);
    v17 = sub_1A9CE8B74();
    v20 = sub_1A9B91D6C(v17, v18, &v21);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] received alarm notification: %s, privacy: .public)", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v14, -1, -1);
    MEMORY[0x1AF420344](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  sub_1A9CA9D1C();
}

void sub_1A9CA9894(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_1EEB42E60 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49410);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v10);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] dismissing active alarm", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = type metadata accessor for Alarm();
  sub_1A9BEF614(*(void **)(a1 + *(int *)(v9 + 20)));
}

uint64_t sub_1A9CA9A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v11;

  v1 = v0;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EEB49410);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v11);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v9, sel_removeObserver_, v1);

  swift_release();
  sub_1A9CAA75C(v1 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm);

  return v1;
}

uint64_t sub_1A9CA9C14()
{
  sub_1A9CA9A38();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9CA9C38()
{
  return type metadata accessor for AlarmProvider();
}

uint64_t type metadata accessor for AlarmProvider()
{
  uint64_t result;

  result = qword_1EEB499A8;
  if (!qword_1EEB499A8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9CA9C7C()
{
  unint64_t v0;

  sub_1A9B92F34(319, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1A9CA9D1C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = *v0;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v3 = sub_1A9CE6990();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EEB49410);
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE867C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1A9CE8D48();
    sub_1A9B91D6C(v8, v9, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] update", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);
  }

  v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                              + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarmManager), sel_nextAlarm));
  if (v10)
  {
    v11 = v10;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v1;
    *(_QWORD *)(v12 + 24) = v2;
    aBlock[4] = (uint64_t)sub_1A9CAA7D4;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9BB6368;
    aBlock[3] = (uint64_t)&block_descriptor_32;
    v13 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v14 = objc_msgSend(v11, sel_addCompletionBlock_, v13);
    _Block_release(v13);

  }
}

uint64_t sub_1A9CA9F64(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t aBlock[6];

  v45 = a3;
  v7 = sub_1A9CE8070();
  v48 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE8094();
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v15 = sub_1A9CE6990();
  __swift_project_value_buffer(v15, (uint64_t)qword_1EEB49410);
  v16 = a1;
  v17 = sub_1A9CE6978();
  v18 = sub_1A9CE867C();
  v19 = os_log_type_enabled(v17, v18);
  v44 = v16;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v41 = swift_slowAlloc();
    aBlock[0] = v41;
    *(_DWORD *)v20 = 136446466;
    v42 = a2;
    v21 = sub_1A9CE8D48();
    v43 = v7;
    v49 = sub_1A9B91D6C(v21, v22, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    v49 = (uint64_t)a1;
    sub_1A9CAA834();
    v23 = v16;
    v24 = a1;
    v25 = v14;
    v26 = v10;
    v27 = a4;
    v28 = v23;
    v29 = sub_1A9CE82F8();
    v49 = sub_1A9B91D6C(v29, v30, aBlock);
    a2 = v42;
    sub_1A9CE888C();

    a4 = v27;
    v10 = v26;
    v14 = v25;
    a1 = v24;
    v7 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] next alarm: %{public}s", (uint8_t *)v20, 0x16u);
    v31 = v41;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v31, -1, -1);
    MEMORY[0x1AF420344](v20, -1, -1);

  }
  else
  {

  }
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v32 = (void *)sub_1A9CE870C();
  v33 = (_QWORD *)swift_allocObject();
  v34 = v45;
  v33[2] = a1;
  v33[3] = v34;
  v33[4] = a2;
  v33[5] = a4;
  aBlock[4] = (uint64_t)sub_1A9CAA828;
  aBlock[5] = (uint64_t)v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9C0A74C;
  aBlock[3] = (uint64_t)&block_descriptor_6_5;
  v35 = _Block_copy(aBlock);
  v36 = v44;
  swift_retain();
  v37 = a2;
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  v38 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1A9B92F34(0, &qword_1EEB47E30, v38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C04D54();
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v14, v10, v35);
  _Block_release(v35);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v14, v47);
}

void sub_1A9CAA384(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v36[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v36[-1] - v12;
  v14 = type metadata accessor for Alarm();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v36[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  sub_1A9CDF7C4(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1A9CAA75C((uint64_t)v13);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
    v20 = a2 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    sub_1A9CAA898((uint64_t)v10, v20);
    swift_endAccess();
    sub_1A9CA8ED0();
    sub_1A9CAA75C((uint64_t)v10);
    if (a3)
    {
      v21 = a3;
      if (qword_1EEB42E60 != -1)
        swift_once();
      v22 = sub_1A9CE6990();
      __swift_project_value_buffer(v22, (uint64_t)qword_1EEB49410);
      v23 = a3;
      v24 = a3;
      v25 = sub_1A9CE6978();
      v26 = sub_1A9CE8664();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc();
        v28 = swift_slowAlloc();
        v36[0] = v28;
        *(_DWORD *)v27 = 136446466;
        v29 = sub_1A9CE8D48();
        v35 = sub_1A9B91D6C(v29, v30, v36);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        v35 = (uint64_t)a3;
        v31 = a3;
        sub_1A9BB15F4();
        v32 = sub_1A9CE82F8();
        v35 = sub_1A9B91D6C(v32, v33, v36);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A9B87000, v25, v26, "[%{public}s] error retrieving upcoming alarm: %{public}s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v28, -1, -1);
        MEMORY[0x1AF420344](v27, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    sub_1A9BE9FBC((uint64_t)v13, (uint64_t)v18);
    sub_1A9CAA8F4((uint64_t)v18, (uint64_t)v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    v34 = a2 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    sub_1A9CAA898((uint64_t)v10, v34);
    swift_endAccess();
    sub_1A9CA8ED0();
    sub_1A9CAA75C((uint64_t)v10);
    sub_1A9CAA938((uint64_t)v18);
  }
}

uint64_t sub_1A9CAA75C(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9CAA7B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9CAA7D4(void *a1, void *a2)
{
  uint64_t v2;

  return sub_1A9CA9F64(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t sub_1A9CAA7F4()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1A9CAA828()
{
  uint64_t v0;

  sub_1A9CAA384(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1A9CAA834()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49A78)
  {
    sub_1A9B94A18(255, (unint64_t *)&qword_1EEB49A80);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49A78);
  }
}

uint64_t sub_1A9CAA898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9CAA8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Alarm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9CAA938(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Alarm();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9CAA974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SleepActivityConfigurationSectionBuilder.dataSource.getter()
{
  return swift_retain();
}

uint64_t SleepActivityConfigurationSectionBuilder.init(dataSource:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SleepActivityConfigurationSectionBuilder.sections()()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

uint64_t SleepActivityConfigurationSectionBuilder.sleepTreatment()()
{
  void *v0;
  id v1;
  char *v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if (!v3)
    return 0;
  type metadata accessor for SleepSettingsModel();
  sub_1A9B92B9C(&qword_1EEB46650, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
  sub_1A9CE7200();
  type metadata accessor for WatchAppInstalledProvider();
  sub_1A9B92B9C(&qword_1EEB49A88, (uint64_t (*)(uint64_t))type metadata accessor for WatchAppInstalledProvider, (uint64_t)&protocol conformance descriptor for WatchAppInstalledProvider);
  sub_1A9CE7200();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9CE6D8C();
  v0 = *(void **)&v3[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider];
  sub_1A9CE6D8C();
  v1 = v0;

  sub_1A9CAAC64();
  sub_1A9BC2784(&qword_1EEB49AB0, (uint64_t (*)(uint64_t))sub_1A9CAAC64, sub_1A9CAAD78, sub_1A9CAADE0);
  return sub_1A9CE7ED8();
}

void sub_1A9CAAC64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49A90)
  {
    sub_1A9CAACC8();
    sub_1A9CAAD40(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49A90);
  }
}

void sub_1A9CAACC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB49A98)
  {
    sub_1A9CAAD24(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB49A98);
  }
}

void sub_1A9CAAD24(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB47138, (uint64_t (*)(uint64_t))sub_1A9C2D4D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1A9CAAD40(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB49AA0, (uint64_t (*)(uint64_t))sub_1A9CAAD5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1A9CAAD5C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB49AA8, (uint64_t (*)(uint64_t))type metadata accessor for WatchAppInstalledProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9CAAD78()
{
  return sub_1A9BC2784(&qword_1EEB49AB8, (uint64_t (*)(uint64_t))sub_1A9CAACC8, (uint64_t (*)(void))sub_1A9CAAD9C, sub_1A9C2D9F8);
}

unint64_t sub_1A9CAAD9C()
{
  unint64_t result;

  result = qword_1EEB49AC0;
  if (!qword_1EEB49AC0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF7328, &type metadata for SleepTreatmentRowView);
    atomic_store(result, (unint64_t *)&qword_1EEB49AC0);
  }
  return result;
}

uint64_t sub_1A9CAADE0()
{
  return sub_1A9B92B9C(&qword_1EEB49AC8, (uint64_t (*)(uint64_t))sub_1A9CAAD40, MEMORY[0x1E0CDCF80]);
}

ValueMetadata *type metadata accessor for SleepActivityConfigurationSectionBuilder()
{
  return &type metadata for SleepActivityConfigurationSectionBuilder;
}

unint64_t static ScheduleOccurrenceDeleteTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD000000000000025;
}

void sub_1A9CAAF4C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setTextAlignment_, 1);

  }
  v3 = objc_msgSend(v0, sel_textLabel);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(), sel_hk_appErrorColor);
    objc_msgSend(v4, sel_setTextColor_, v5);

  }
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v9[4] = sub_1A9C219C0;
  v9[5] = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1A9C21C90;
  v9[3] = &block_descriptor_33;
  v7 = _Block_copy(v9);
  v8 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v8);

}

void sub_1A9CAB094()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    v2 = v1;
    if (qword_1ED2626A8 != -1)
      swift_once();
    v3 = (id)qword_1ED264F90;
    sub_1A9CE6168();
    swift_bridgeObjectRelease();

    v4 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setText_, v4, 0xE000000000000000);

  }
}

void sub_1A9CAB1EC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v2 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = 0x7065656C53;
  *(_QWORD *)(v2 + 56) = 0xE500000000000000;
  strcpy((char *)(v2 + 64), "ScheduleEditor");
  *(_BYTE *)(v2 + 79) = -18;
  v11 = v2;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2BE8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v4 = sub_1A9CE8280();
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v7 = (void *)sub_1A9CE82B0();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v7, v11);

  v8 = objc_msgSend(v1, sel_textLabel);
  if (v8)
  {
    v9 = v8;
    v12 = v6;
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v10 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setAccessibilityIdentifier_, v10, v4, v12);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id ScheduleOccurrenceDeleteTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceDeleteTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceDeleteTableViewCell()
{
  return objc_opt_self();
}

void ScheduleOccurrenceDeleteTableViewCell.apply(_:)(uint64_t a1)
{
  _BYTE *v1;
  id v2;
  void *v3;
  id v4;
  id v5;

  v1[OBJC_IVAR____TtC13SleepHealthUI37ScheduleOccurrenceDeleteTableViewCell_model] = *(_BYTE *)(a1 + 49);
  v2 = objc_msgSend(v1, sel_textLabel);
  if (v2)
  {
    v3 = v2;
    if (qword_1ED2626A8 != -1)
      swift_once();
    v4 = (id)qword_1ED264F90;
    sub_1A9CE6168();
    swift_bridgeObjectRelease();

    v5 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setText_, v5, 0xE000000000000000);

  }
}

void sub_1A9CAB588(uint64_t a1)
{
  ScheduleOccurrenceDeleteTableViewCell.apply(_:)(a1);
}

uint64_t method lookup function for ScheduleOccurrenceDeleteTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for ScheduleOccurrenceDeleteTableViewCell.Model(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9CAB600 + 4 * byte_1A9CF63A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9CAB634 + 4 * asc_1A9CF63A0[v4]))();
}

uint64_t sub_1A9CAB634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CAB63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9CAB644);
  return result;
}

uint64_t sub_1A9CAB650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9CAB658);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9CAB65C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9CAB664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceDeleteTableViewCell.Model()
{
  return &type metadata for ScheduleOccurrenceDeleteTableViewCell.Model;
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t Calendar.date(bySubtracting:from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v7, a1, v2, v5);
  v8 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CB47B0(v8, a1, (uint64_t)v7);
  swift_bridgeObjectRelease();
  sub_1A9CE63F0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
}

uint64_t Calendar.timeComponents(from:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, _QWORD, uint64_t);
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  _QWORD v68[2];
  uint64_t v69;
  id v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v68 - v6;
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v68 - v10;
  v12 = sub_1A9CE60C0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v3);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v73 = (char *)v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)v68 - v22;
  v75 = sub_1A9CE62E8();
  v76 = *(_QWORD *)(v75 - 8);
  v25 = MEMORY[0x1E0C80A78](v75, v24);
  v27 = (char *)v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v25, v28);
  v72 = (char *)v68 - v30;
  MEMORY[0x1E0C80A78](v29, v31);
  v74 = (char *)v68 - v32;
  sub_1A9CE6048();
  if ((v33 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v77, 1, 1, v12);
  sub_1A9CE6084();
  if ((v34 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v77, 1, 1, v12);
  sub_1A9CE6048();
  if ((v35 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v77, 1, 1, v12);
  sub_1A9CE6084();
  if ((v36 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v77, 1, 1, v12);
  sub_1A9CAC0D8((uint64_t)v23);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  v38 = v75;
  if (v37(v23, 1, v75) == 1)
  {
    v39 = v77;
    v40 = v13;
  }
  else
  {
    v71 = v37;
    v68[0] = *(_QWORD *)(v76 + 32);
    ((void (*)(char *, char *, uint64_t))v68[0])(v74, v23, v38);
    v70 = (id)sub_1A9CE63CC();
    v69 = sub_1A9CE6258();
    sub_1A9CE6060();
    if ((v42 & 1) != 0 && (sub_1A9CE606C(), (v43 & 1) != 0) && (sub_1A9CE6030(), (v44 & 1) != 0))
    {
      v40 = v13;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
      v48 = v71;
      v47 = v38;
    }
    else
    {
      v45 = sub_1A9CE6444();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v11, 1, 1, v45);
      v46 = sub_1A9CE6498();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v7, 1, 1, v46);
      v68[1] = sub_1A9CE6048();
      sub_1A9CE6084();
      v47 = v75;
      sub_1A9CE60A8();
      v40 = v13;
      v48 = v71;
    }
    v49 = (void *)sub_1A9CE6018();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v12);
    v51 = (void *)v69;
    v50 = v70;
    v52 = objc_msgSend(v70, sel_hksp_previousDateBeforeDate_matchingComponents_, v69, v49);

    v53 = v76;
    if (v52)
    {
      sub_1A9CE62C4();

      v23 = v73;
      v54 = (void (*)(char *, char *, uint64_t))v68[0];
      ((void (*)(char *, char *, uint64_t))v68[0])(v73, v27, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v23, 0, 1, v47);
      if (v48(v23, 1, v47) != 1)
      {
        v55 = v47;
        v56 = v72;
        v54(v72, v23, v55);
        sub_1A9B92F34(0, &qword_1EEB47BF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v57 = sub_1A9CE642C();
        v58 = v55;
        v59 = *(_QWORD *)(v57 - 8);
        v60 = *(_QWORD *)(v59 + 72);
        v61 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
        v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_1A9CEB530;
        v63 = v62 + v61;
        v64 = *(void (**)(unint64_t, _QWORD, uint64_t))(v59 + 104);
        v64(v63, *MEMORY[0x1E0CB1140], v57);
        v64(v63 + v60, *MEMORY[0x1E0CB1178], v57);
        sub_1A9C4B104(v62);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v65 = v77;
        v66 = v74;
        sub_1A9CE63A8();
        swift_bridgeObjectRelease();
        v67 = *(void (**)(char *, uint64_t))(v53 + 8);
        v67(v56, v58);
        v67(v66, v58);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v65, 0, 1, v12);
      }
    }
    else
    {
      v23 = v73;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v73, 1, 1, v47);
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v74, v47);
    v39 = v77;
  }
  sub_1A9BD5744((uint64_t)v23);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v39, 1, 1, v12);
}

BOOL Calendar.dayPeriod(for:in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_1A9CE62E8();
  v3 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  v28 = v3;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE642C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)sub_1A9CE63CC();
  v13 = (void *)sub_1A9CE6258();
  v14 = (void *)sub_1A9CE6330();
  v15 = objc_msgSend(v12, sel_bs_dayPeriodForDate_inLocale_, v13, v14);

  BSDayPeriod.simplified.getter((uint64_t)v15, (char *)&v30);
  if (v30 == 2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0CB1140], v7);
    v16 = sub_1A9CE6438();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v16 - 10 >= 0xFFFFFFFFFFFFFFF9)
    {
      if (qword_1ED2628A0 != -1)
        swift_once();
      v17 = sub_1A9CE6990();
      __swift_project_value_buffer(v17, (uint64_t)qword_1ED262888);
      v18 = v27;
      v19 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, a1, v27);
      v20 = sub_1A9CE6978();
      v21 = sub_1A9CE867C();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v30 = v23;
        *(_DWORD *)v22 = 136315138;
        sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
        v24 = sub_1A9CE8B74();
        v29 = sub_1A9B91D6C(v24, v25, &v30);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v18);
        _os_log_impl(&dword_1A9B87000, v20, v21, "[BSDayPeriod] overriding evening with morning for date: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v23, -1, -1);
        MEMORY[0x1AF420344](v22, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
      }

      return v16 > 5;
    }
  }
  return (BOOL)v15;
}

uint64_t sub_1A9CAC0D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  char v14;
  _QWORD v16[2];

  v2 = sub_1A9CE62E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE60C0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6048();
  if ((v12 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  v13 = sub_1A9CE6084();
  if ((v14 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  v16[1] = v13;
  _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CE62DC();
  sub_1A9CE63B4();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_1A9CE6054();
  sub_1A9CE6090();
  sub_1A9CE609C();
  sub_1A9CE603C();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t Calendar.timeComponents(bySubtractingHours:from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, _QWORD, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _QWORD v30[2];

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v30 - v5;
  v7 = sub_1A9CE62E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v30 - v14;
  sub_1A9CE6048();
  if ((v16 & 1) != 0 || (sub_1A9CE6084(), (v17 & 1) != 0))
  {
    v20 = sub_1A9CE60C0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
  else
  {
    sub_1A9CAC0D8((uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1A9BD5744((uint64_t)v6);
      v18 = sub_1A9CE60C0();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v6, v7);
      sub_1A9CE624C();
      sub_1A9B92F34(0, &qword_1EEB47BF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v21 = sub_1A9CE642C();
      v22 = *(_QWORD *)(v21 - 8);
      v30[1] = v1;
      v23 = *(_QWORD *)(v22 + 72);
      v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1A9CEB530;
      v26 = v25 + v24;
      v27 = *(void (**)(unint64_t, _QWORD, uint64_t))(v22 + 104);
      v27(v26, *MEMORY[0x1E0CB1140], v21);
      v27(v26 + v23, *MEMORY[0x1E0CB1178], v21);
      sub_1A9C4B104(v25);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_1A9CE63B4();
      swift_bridgeObjectRelease();
      v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v11, v7);
      v28(v15, v7);
      v29 = sub_1A9CE60C0();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 0, 1, v29);
    }
  }
}

uint64_t Calendar.dateComponents(byAdding:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v35 - v12;
  v14 = sub_1A9CE62E8();
  v15 = *(_QWORD **)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v35[0] = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v36 = (char *)v35 - v20;
  v21 = MEMORY[0x1E0DEE9E8];
  v37 = MEMORY[0x1E0DEE9E8];
  v22 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  v35[1] = a1;
  sub_1A9CB49DC(v22, a1, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  v23 = v37;
  v37 = v21;
  v24 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CB49DC(v24, a2, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  LOBYTE(v21) = sub_1A9CAC828(v37, v23);
  v25 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    sub_1A9CE63E4();
    v26 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
    if (v26(v13, 1, v14) == 1)
    {
      v9 = v13;
    }
    else
    {
      v27 = (void (*)(char *, char *, uint64_t))v15[4];
      v28 = v36;
      v27(v36, v13, v14);
      sub_1A9CE63F0();
      if (v26(v9, 1, v14) != 1)
      {
        v31 = v35[0];
        v27((char *)v35[0], v9, v14);
        v37 = MEMORY[0x1E0DEE9E8];
        v32 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
        sub_1A9CB49DC(v32, a2, (uint64_t)&v37);
        swift_bridgeObjectRelease();
        sub_1A9CE63B4();
        swift_bridgeObjectRelease();
        v33 = (void (*)(uint64_t, uint64_t))v15[1];
        v33(v31, v14);
        v33((uint64_t)v28, v14);
        v34 = sub_1A9CE60C0();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v25, 0, 1, v34);
      }
      ((void (*)(char *, uint64_t))v15[1])(v28, v14);
    }
    sub_1A9BD5744((uint64_t)v9);
  }
  v29 = sub_1A9CE60C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v25, 1, 1, v29);
}

uint64_t sub_1A9CAC828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = sub_1A9CE642C();
  v49 = *(_QWORD **)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v38 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v38 - v14;
  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v17 = *(_QWORD *)(a2 + 56);
  v47 = a2 + 56;
  v18 = -1 << *(_BYTE *)(a2 + 32);
  v40 = ~v18;
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v17;
  v41 = (unint64_t)(63 - v18) >> 6;
  v48 = a1 + 56;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v44 = a2;
  v39 = v15;
  v45 = 0;
  v46 = v20;
  if (!v20)
    goto LABEL_8;
LABEL_7:
  v42 = (v20 - 1) & v20;
  v43 = v22;
  for (i = __clz(__rbit64(v20)) | (v22 << 6); ; i = __clz(__rbit64(v25)) + (v26 << 6))
  {
    v28 = *(_QWORD *)(a2 + 48);
    v29 = v49;
    v30 = v49[9];
    v31 = (void (*)(char *, unint64_t, uint64_t))v49[2];
    v31(v15, v28 + v30 * i, v4);
    ((void (*)(char *, char *, uint64_t))v29[4])(v11, v15, v4);
    if (!*(_QWORD *)(a1 + 16)
      || (sub_1A9B92B9C(&qword_1EEB47C48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]),
          v32 = sub_1A9CE8244(),
          v33 = -1 << *(_BYTE *)(a1 + 32),
          v34 = v32 & ~v33,
          ((*(_QWORD *)(v48 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0))
    {
      v37 = (void (*)(char *, uint64_t))v49[1];
LABEL_31:
      v37(v11, v4);
      v16 = 0;
      goto LABEL_32;
    }
    v35 = ~v33;
    while (1)
    {
      v31(v7, *(_QWORD *)(a1 + 48) + v34 * v30, v4);
      sub_1A9B92B9C(&qword_1EEB47C50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
      v36 = sub_1A9CE82A4();
      v37 = (void (*)(char *, uint64_t))v49[1];
      v37(v7, v4);
      if ((v36 & 1) != 0)
        break;
      v34 = (v34 + 1) & v35;
      if (((*(_QWORD *)(v48 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
        goto LABEL_31;
    }
    result = ((uint64_t (*)(char *, uint64_t))v37)(v11, v4);
    v20 = v42;
    v22 = v43;
    a2 = v44;
    v15 = v39;
    v45 = v43;
    v46 = v42;
    if (v42)
      goto LABEL_7;
LABEL_8:
    v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v24 >= v41)
      goto LABEL_34;
    v25 = *(_QWORD *)(v47 + 8 * v24);
    v26 = v22 + 1;
    if (!v25)
    {
      v26 = v22 + 2;
      if (v22 + 2 >= v41)
        goto LABEL_34;
      v25 = *(_QWORD *)(v47 + 8 * v26);
      if (!v25)
      {
        v26 = v22 + 3;
        if (v22 + 3 >= v41)
          goto LABEL_34;
        v25 = *(_QWORD *)(v47 + 8 * v26);
        if (!v25)
          break;
      }
    }
LABEL_21:
    v42 = (v25 - 1) & v25;
    v43 = v26;
  }
  v27 = v22 + 4;
  if (v22 + 4 >= v41)
  {
LABEL_34:
    v16 = 1;
LABEL_32:
    sub_1A9CACF44();
    return v16;
  }
  v25 = *(_QWORD *)(v47 + 8 * v27);
  if (v25)
  {
    v26 = v22 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v26 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v26 >= v41)
      goto LABEL_34;
    v25 = *(_QWORD *)(v47 + 8 * v26);
    ++v27;
    if (v25)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t Calendar.dateComponents(bySubtracting:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a3;
  v58 = sub_1A9CE60C0();
  v60 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v53 - v14;
  v16 = sub_1A9CE62E8();
  v17 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  v57 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v53 - v23;
  v25 = MEMORY[0x1E0DEE9E8];
  v61 = MEMORY[0x1E0DEE9E8];
  v26 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CB49DC(v26, a1, (uint64_t)&v61);
  swift_bridgeObjectRelease();
  v27 = v61;
  v61 = v25;
  v28 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
  sub_1A9CB49DC(v28, a2, (uint64_t)&v61);
  swift_bridgeObjectRelease();
  v29 = sub_1A9CAC828(v61, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    v54 = v20;
    v55 = a1;
    sub_1A9CE63E4();
    v31 = v56;
    v30 = v57;
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
    if (v32((uint64_t)v15, 1, v56) == 1)
    {
      v33 = (uint64_t)v15;
      v35 = v58;
      v34 = v59;
    }
    else
    {
      v53 = a2;
      v37 = v24;
      v38 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v38(v37, v15, v31);
      v39 = v60;
      v40 = (uint64_t)v7;
      v41 = v7;
      v42 = v55;
      v35 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v41, v55, v58);
      v43 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
      sub_1A9CB47B0(v43, v42, v40);
      swift_bridgeObjectRelease();
      v33 = (uint64_t)v11;
      sub_1A9CE63F0();
      v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v45 = v56;
      v46 = v57;
      v44(v40, v35);
      v47 = v32(v33, 1, v45);
      v48 = v37;
      v34 = v59;
      if (v47 != 1)
      {
        v49 = v54;
        v38(v54, (char *)v33, v45);
        v61 = MEMORY[0x1E0DEE9E8];
        v50 = _s10Foundation14DateComponentsV13SleepHealthUIE08calendarC0ShyAA8CalendarV9ComponentOGvgZ_0();
        sub_1A9CB49DC(v50, v53, (uint64_t)&v61);
        swift_bridgeObjectRelease();
        sub_1A9CE63B4();
        swift_bridgeObjectRelease();
        v51 = *(void (**)(char *, uint64_t))(v46 + 8);
        v51(v49, v45);
        v51(v48, v45);
        v36 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v34, v36, 1, v35);
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v45);
    }
    sub_1A9BD5744(v33);
    v36 = 1;
  }
  else
  {
    v36 = 1;
    v35 = v58;
    v34 = v59;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v34, v36, 1, v35);
}

uint64_t sub_1A9CACF44()
{
  return swift_release();
}

id static NSDateFormatter.makeTimeFormatter(locale:shouldCondense:)(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = (void *)objc_opt_self();
  v5 = (void *)sub_1A9CE82B0();
  v6 = (void *)sub_1A9CE6330();
  v7 = objc_msgSend(v4, sel_dateFormatFromTemplate_options_locale_, v5, 0, v6);

  if (v7)
  {
    v8 = sub_1A9CE82E0();
    v10 = v9;

  }
  else
  {
    v10 = 0xE500000000000000;
    v8 = 0x616D6D3A68;
  }
  v11 = sub_1A9CAE664(v8, v10, a1, a2 & 1);
  swift_bridgeObjectRelease();
  return v11;
}

char *NSDateFormatter.veryShortStandaloneWeekdaySymbol(for:)(uint64_t a1)
{
  return sub_1A9CAD610(a1, (SEL *)&selRef_veryShortStandaloneWeekdaySymbols);
}

char *NSDateFormatter.standaloneWeekdaySymbol(for:)(uint64_t a1)
{
  return sub_1A9CAD610(a1, (SEL *)&selRef_standaloneWeekdaySymbols);
}

id static NSDateFormatter.standalone.getter()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  objc_msgSend(v0, sel_setFormattingContext_, 2);
  return v0;
}

char *NSDateFormatter.localizedCommaSeparatedList(using:calendar:useShortSymbols:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;

  if (*MEMORY[0x1E0DA8498] == a1)
    return 0;
  v6 = (void *)sub_1A9CE63CC();
  v7 = objc_msgSend(v6, sel_hksp_orderedSleepWeekdaysForWeekdays_, a1);
  sub_1A9B94A18(0, &qword_1EEB440A8);
  v8 = sub_1A9CE83DC();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (char *)sub_1A9CE8AC0();
    v9 = (uint64_t)result;
    v34 = v6;
    if (result)
      goto LABEL_5;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain();
    v34 = v6;
    if (v9)
    {
LABEL_5:
      if (v9 < 1)
        goto LABEL_48;
      v11 = 0;
      v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
          v13 = (id)MEMORY[0x1AF41F600](v11, v8);
        else
          v13 = *(id *)(v8 + 8 * v11 + 32);
        v14 = v13;
        v15 = objc_msgSend(v13, sel_unsignedIntegerValue, v34);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_1A9CAE0E0(0, v12[2] + 1, 1, v12);
        v17 = v12[2];
        v16 = v12[3];
        if (v17 >= v16 >> 1)
          v12 = sub_1A9CAE0E0((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
        ++v11;
        v12[2] = v17 + 1;
        v12[v17 + 4] = v15;
      }
      while (v9 != v11);
      goto LABEL_18;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_18:
  swift_bridgeObjectRelease_n();
  v18 = v12[2];
  if (!v18)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    v31 = (void *)objc_opt_self();
    v32 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v31, sel_localizedStringByJoiningStrings_, v32);

    v3 = sub_1A9CE82E0();
    return (char *)v3;
  }
  swift_bridgeObjectRetain();
  v19 = 0;
  v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    HKSPDayForWeekdays();
    if ((a3 & 1) != 0)
      break;
    result = (char *)objc_msgSend(v35, sel_standaloneWeekdaySymbols);
    if (!result)
      goto LABEL_50;
    v24 = result;
    v22 = sub_1A9CE83DC();

    result = (char *)NSGregorianCalendarDayForHKSPDay();
    if (result)
    {
      v23 = result - 1;
      if (__OFSUB__(result, 1))
        goto LABEL_43;
      if (((unint64_t)v23 & 0x8000000000000000) != 0)
        goto LABEL_45;
      if ((unint64_t)v23 >= *(_QWORD *)(v22 + 16))
        goto LABEL_47;
      goto LABEL_34;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    if (v18 == ++v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  result = (char *)objc_msgSend(v35, sel_shortStandaloneWeekdaySymbols);
  if (!result)
    goto LABEL_49;
  v21 = result;
  v22 = sub_1A9CE83DC();

  result = (char *)NSGregorianCalendarDayForHKSPDay();
  if (!result)
    goto LABEL_20;
  v23 = result - 1;
  if (!__OFSUB__(result, 1))
  {
    if (((unint64_t)v23 & 0x8000000000000000) != 0)
      goto LABEL_44;
    if ((unint64_t)v23 >= *(_QWORD *)(v22 + 16))
      goto LABEL_46;
LABEL_34:
    v25 = v22 + 16 * (_QWORD)v23;
    v27 = *(_QWORD *)(v25 + 32);
    v26 = *(_QWORD *)(v25 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = sub_1A9CADD68(0, v20[2] + 1, 1, v20);
    v29 = v20[2];
    v28 = v20[3];
    if (v29 >= v28 >> 1)
      v20 = sub_1A9CADD68((_QWORD *)(v28 > 1), v29 + 1, 1, v20);
    v20[2] = v29 + 1;
    v30 = &v20[2 * v29];
    v30[4] = v27;
    v30[5] = v26;
    goto LABEL_21;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

id static NSDateFormatter.makeHourOnlyFormatter(locale:shouldCondense:)(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = (void *)objc_opt_self();
  v5 = (void *)sub_1A9CE82B0();
  v6 = (void *)sub_1A9CE6330();
  v7 = objc_msgSend(v4, sel_dateFormatFromTemplate_options_locale_, v5, 0, v6);

  if (v7)
  {
    v8 = sub_1A9CE82E0();
    v10 = v9;

  }
  else
  {
    v10 = 0xE200000000000000;
    v8 = 24936;
  }
  v11 = sub_1A9CAE664(v8, v10, a1, a2 & 1);
  swift_bridgeObjectRelease();
  return v11;
}

void __swiftcall NSDateFormatter.init(formattingContext:)(NSDateFormatter *__return_ptr retstr, NSFormattingContext formattingContext)
{
  objc_msgSend(objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init), sel_setFormattingContext_, formattingContext);
}

id static NSDateFormatter.middleOfSentence.getter()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  objc_msgSend(v0, sel_setFormattingContext_, 5);
  return v0;
}

char *NSDateFormatter.shortStandaloneWeekdaySymbol(for:)(uint64_t a1)
{
  return sub_1A9CAD610(a1, (SEL *)&selRef_shortStandaloneWeekdaySymbols);
}

char *sub_1A9CAD610(uint64_t a1, SEL *a2)
{
  void *v2;
  char *result;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  result = (char *)objc_msgSend(v2, *a2);
  if (!result)
    goto LABEL_12;
  v4 = result;
  v5 = sub_1A9CE83DC();

  result = (char *)NSGregorianCalendarDayForHKSPDay();
  if (!result)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else if (((unint64_t)v6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v6 < *(_QWORD *)(v5 + 16))
    {
      v7 = *(_QWORD *)(v5 + 16 * (_QWORD)v6 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return (char *)v7;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Time.time.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Time.designator.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Time.designatorComesBeforeTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

void __swiftcall Time.init(time:designator:designatorComesBeforeTime:)(SleepHealthUI::Time *__return_ptr retstr, Swift::String time, Swift::String_optional designator, Swift::Bool designatorComesBeforeTime)
{
  retstr->time = time;
  retstr->designator = designator;
  retstr->designatorComesBeforeTime = designatorComesBeforeTime;
}

void __swiftcall NSDateFormatter.time(hour:minute:)(SleepHealthUI::Time *__return_ptr retstr, Swift::Int hour, Swift::Int minute)
{
  void *v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  id v37;
  void *v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  Swift::Int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  SleepHealthUI::Time *v55;

  v4 = v3;
  v51 = minute;
  v55 = retstr;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v53 = (char *)&v46 - v9;
  v54 = sub_1A9CE62E8();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v10);
  v50 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB44250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v6);
  MEMORY[0x1E0C80A78](v12, v13);
  v47 = (char *)&v46 - v14;
  v15 = sub_1A9CE60C0();
  v48 = *(_QWORD *)(v15 - 8);
  v49 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v6);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v46 - v25;
  v27 = sub_1A9CE6444();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  v36 = (char *)&v46 - v35;
  v37 = objc_msgSend(v4, sel_calendar, v34);
  if (!v37)
  {
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v40(v26, 1, 1, v27);
    v41 = v54;
    goto LABEL_5;
  }
  v38 = v37;
  v46 = hour;
  sub_1A9CE63D8();

  v39 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v39(v26, v31, v27);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v40(v26, 0, 1, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    v41 = v54;
LABEL_5:
    sub_1A9CE6420();
    sub_1A9B93BDC((uint64_t)v26, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    goto LABEL_7;
  }
  v39(v36, v26, v27);
  v41 = v54;
LABEL_7:
  v40(v22, 1, 1, v27);
  v42 = sub_1A9CE6498();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v47, 1, 1, v42);
  sub_1A9CE60A8();
  sub_1A9CE6054();
  sub_1A9CE6090();
  v43 = (uint64_t)v53;
  sub_1A9CE63E4();
  v44 = v52;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v43, 1, v41) == 1)
  {
    sub_1A9B93BDC(v43, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1A9CE8A84();
    __break(1u);
  }
  else
  {
    v45 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v50, v43, v41);
    NSDateFormatter.time(date:)((uint64_t)v55);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v41);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v49);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v27);
  }
}

void NSDateFormatter.time(date:)(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  char v16;
  uint64_t v17;

  v2 = v1;
  v17 = *MEMORY[0x1E0C80C00];
  sub_1A9B94A18(0, &qword_1EEB49B00);
  v4 = (void *)sub_1A9CE8838();
  v16 = 0;
  v5 = (void *)sub_1A9CE6258();
  v15 = v4;
  v6 = objc_msgSend(v2, sel_hksp_timeStringFromDate_designatorString_designatorIsBeforeTime_, v5, &v15, &v16);

  v7 = v15;
  v8 = sub_1A9CE82E0();
  v10 = v9;

  if ((uint64_t)objc_msgSend(v7, sel_length) < 1)
  {

    v11 = 0;
    v13 = 0;
  }
  else
  {
    v11 = sub_1A9CE82E0();
    v13 = v12;

  }
  v14 = v16;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v14;
}

_QWORD *sub_1A9CADD68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A9BC42B4(0, (unint64_t *)&qword_1ED263330);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A9CAE46C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A9CADE80(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A9B92F34(0, &qword_1EEB44438, (uint64_t (*)(uint64_t))sub_1A9BB53B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1A9CAE55C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9CADFB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A9CAE214(a1, a2, a3, a4, (unint64_t *)&qword_1EEB44770, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B090]);
}

_QWORD *sub_1A9CADFC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A9BC42B4(0, (unint64_t *)&unk_1ED263320);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A9CAE7BC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1A9CAE0E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A9B92F34(0, qword_1EEB49B10, (uint64_t (*)(uint64_t))type metadata accessor for HKSPWeekdays, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A9CAE8AC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9CAE200(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A9CAE214(a1, a2, a3, a4, &qword_1ED2634A0, type metadata accessor for SleepStageSegment);
}

uint64_t sub_1A9CAE214(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A9B92F34(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1A9CE8A78();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A9CAED4C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1A9CAE430(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A9CAE214(a1, a2, a3, a4, &qword_1ED262D98, (uint64_t (*)(uint64_t))sub_1A9C472B8);
}

uint64_t sub_1A9CAE444(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A9CAE214(a1, a2, a3, a4, &qword_1EEB49B08, type metadata accessor for SleepDayModel.SegmentModel);
}

uint64_t sub_1A9CAE458(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1A9CAE214(a1, a2, a3, a4, &qword_1EEB45510, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE690]);
}

uint64_t sub_1A9CAE46C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9CAE55C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1A9BB53B0();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

id sub_1A9CAE664(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;

  if ((a4 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1A9CE8370();
    if (v5)
    {
      v6 = v4;
      v7 = v5;
      do
      {
        if ((sub_1A9CE825C() & 1) == 0)
          MEMORY[0x1AF41EF64](v6, v7);
        swift_bridgeObjectRelease();
        v6 = sub_1A9CE8370();
        v7 = v8;
      }
      while (v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v10 = (void *)sub_1A9CE6330();
  objc_msgSend(v9, sel_setLocale_, v10);

  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setDateFormat_, v11);

  return v9;
}

uint64_t sub_1A9CAE7BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

char *sub_1A9CAE8AC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1A9CE8AFC();
  __break(1u);
  return result;
}

char *_sSo15NSDateFormatterC13SleepHealthUIE13localizedList5using8calendar010standaloneB008listItemB015useShortSymbolsSSSo12HKSPWeekdaysV_10Foundation8CalendarVA2BSbtFZ_0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  void *v10;
  id v11;
  void *v12;
  char *result;
  void *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  void *v19;

  if (*MEMORY[0x1E0DA8498] == a1)
    return 0;
  v10 = (void *)sub_1A9CE63CC();
  v11 = objc_msgSend(v10, sel_hksp_localizedGroupingStringForWeekdays_, a1);
  if (v11)
  {
    v12 = v11;
    v5 = sub_1A9CE82E0();

    return (char *)v5;
  }
  if ((HKSPWeekdaysIsSingleDay() & 1) == 0)
  {
    NSDateFormatter.localizedCommaSeparatedList(using:calendar:useShortSymbols:)(a1, a2, a5 & 1);
    v19 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v19, sel_hk_localizedFirstWordCapitalizedString);

    goto LABEL_13;
  }
  HKSPDayForWeekdays();
  result = (char *)objc_msgSend(a3, sel_standaloneWeekdaySymbols);
  if (result)
  {
    v14 = result;
    v15 = sub_1A9CE83DC();

    result = (char *)NSGregorianCalendarDayForHKSPDay();
    if (!result)
    {

      swift_bridgeObjectRelease();
      return 0;
    }
    v16 = result - 1;
    if (__OFSUB__(result, 1))
    {
      __break(1u);
    }
    else if (((unint64_t)v16 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v16 < *(_QWORD *)(v15 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v17 = (void *)sub_1A9CE82B0();
        swift_bridgeObjectRelease();
        v18 = objc_msgSend(v17, sel_hk_localizedFirstWordCapitalizedString);

LABEL_13:
        v5 = sub_1A9CE82E0();

        return (char *)v5;
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t destroy for Time()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Time(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Time(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Time(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Time(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Time(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Time()
{
  return &type metadata for Time;
}

uint64_t sub_1A9CAED4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t DynamicStack.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  *a5 = swift_getKeyPath();
  sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for DynamicStack(0, a3, a4, v10);
  v12 = (uint64_t *)((char *)a5 + *(int *)(result + 36));
  *v12 = a1;
  v12[1] = a2;
  return result;
}

uint64_t DynamicStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v41 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = sub_1A9CE7E3C();
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v36 - v11;
  v13 = sub_1A9CE7EB4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v36 - v20;
  v22 = sub_1A9CE74F4();
  v39 = *(_QWORD *)(v22 - 8);
  v40 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v38 = (char *)&v36 - v24;
  v25 = sub_1A9CAF27C();
  if (v25)
  {
    v27 = sub_1A9CE7404();
    MEMORY[0x1E0C80A78](v27, v28);
    *(&v36 - 4) = v3;
    *(&v36 - 3) = v4;
    *(&v36 - 2) = v2;
    sub_1A9CE7EA8();
    MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v13);
    sub_1A9C3C998((uint64_t)v17, v13, (uint64_t)v21);
    v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v17, v13);
    sub_1A9C3899C((uint64_t)v21, v13, (uint64_t)v17);
    MEMORY[0x1AF420284](MEMORY[0x1E0CDFB10], v5);
    v30 = (uint64_t)v38;
    sub_1A9C389B4((uint64_t)v17, v13);
    v29(v17, v13);
    v29(v21, v13);
  }
  else
  {
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v36 - 4) = v3;
    *(&v36 - 3) = v4;
    *(&v36 - 2) = v2;
    sub_1A9CE7398();
    sub_1A9CE7E30();
    MEMORY[0x1AF420284](MEMORY[0x1E0CDFB10], v5);
    sub_1A9C3C998((uint64_t)v8, v5, (uint64_t)v12);
    v31 = *(void (**)(char *, uint64_t))(v37 + 8);
    v31(v8, v5);
    sub_1A9C3899C((uint64_t)v12, v5, (uint64_t)v8);
    MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v13);
    v30 = (uint64_t)v38;
    sub_1A9C38A78((uint64_t)v8, v13, v5);
    v31(v8, v5);
    v31(v12, v5);
  }
  v32 = MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v13);
  v33 = MEMORY[0x1AF420284](MEMORY[0x1E0CDFB10], v5);
  v42[0] = v32;
  v42[1] = v33;
  v34 = v40;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v40, v42);
  sub_1A9C3899C(v30, v34, v41);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v30, v34);
}

BOOL sub_1A9CAF27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v0 = sub_1A9CE7110();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v12 - v7;
  sub_1A9C82CBC((uint64_t)&v12 - v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0CD98D0], v0);
  sub_1A9CAFCFC();
  v9 = sub_1A9CE828C();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v8, v0);
  return (v9 & 1) == 0;
}

uint64_t sub_1A9CAF364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v19 - v11;
  v16 = type metadata accessor for DynamicStack(0, v13, v14, v15);
  (*(void (**)(void))(a1 + *(int *)(v16 + 36)))();
  sub_1A9C3C998((uint64_t)v8, a2, (uint64_t)v12);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, a2);
  sub_1A9C3899C((uint64_t)v12, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v17)(v12, a2);
}

uint64_t sub_1A9CAF454()
{
  return sub_1A9CE7248();
}

uint64_t sub_1A9CAF474()
{
  return sub_1A9CE7248();
}

uint64_t sub_1A9CAF494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1A9CE7110();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  return sub_1A9CE7254();
}

uint64_t type metadata accessor for DynamicStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicStack);
}

uint64_t sub_1A9CAF520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9CAF364(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9CAF53C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9CAF570()
{
  unint64_t v0;

  sub_1A9CAFB6C(319, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_1A9CAF5F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_1A9CE7110();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = *(int *)(a3 + 36);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1A9CAF6E0(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_1A9CE7110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

_QWORD *sub_1A9CAF760(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1A9CE7110();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = *(int *)(a3 + 36);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

_QWORD *sub_1A9CAF824(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1A9CAF904((uint64_t)a1);
    sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1A9CE7110();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v7 = *(int *)(a3 + 36);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A9CAF904(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1A9CAF950(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1A9CE7110();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 36)] = *(_OWORD *)&a2[*(int *)(a3 + 36)];
  return a1;
}

char *sub_1A9CAFA04(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1A9CAF904((uint64_t)a1);
    sub_1A9CAFB6C(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_1A9CE7110();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  *(_OWORD *)&a1[*(int *)(a3 + 36)] = *(_OWORD *)&a2[*(int *)(a3 + 36)];
  swift_release();
  return a1;
}

uint64_t sub_1A9CAFAD4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9CAFAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_1A9CAFB6C(0, qword_1EEB46AF8, MEMORY[0x1E0CD87E8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

void sub_1A9CAFB6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1A9CE7110();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1A9CAFBC4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1A9CAFBD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1A9CAFB6C(0, qword_1EEB46AF8, MEMORY[0x1E0CD87E8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
}

uint64_t sub_1A9CAFC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v0 = sub_1A9CE7EB4();
  v1 = sub_1A9CE7E3C();
  v2 = sub_1A9CE74F4();
  v4[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CDFCC0], v0);
  v4[1] = MEMORY[0x1AF420284](MEMORY[0x1E0CDFB10], v1);
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v4);
}

unint64_t sub_1A9CAFCFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED263180;
  if (!qword_1ED263180)
  {
    v1 = sub_1A9CE7110();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9980], v1);
    atomic_store(result, (unint64_t *)&qword_1ED263180);
  }
  return result;
}

id sub_1A9CAFD48(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = qword_1ED2626A8;
  v2 = a1;
  if (v1 != -1)
    swift_once();
  v3 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v4 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v2, sel_hksp_addNextButtonWithTitle_, v4, 0xE000000000000000);

  return v5;
}

uint64_t sub_1A9CAFE44()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t result;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_boldButton);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_hksp_nextButtonTapped, 64);
  v3 = (void *)sub_1A9CE82B0();
  objc_msgSend(v2, sel_setTitle_forState_, v3, 0);

  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v4 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = 0x7065656C53;
  *(_QWORD *)(v4 + 56) = 0xE500000000000000;
  *(_QWORD *)(v4 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v4 + 72) = 0xEA0000000000676ELL;
  v6 = v2;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2C18);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v7 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setAccessibilityIdentifier_, v7);

  v8 = objc_msgSend(v1, sel_hksp_presentationStyle);
  if (!v8 || v8 == (id)2)
    goto LABEL_6;
  if (v8 == (id)1)
  {
    v9 = (id)BPSPillSelectedColor();
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v6, sel_setTintColor_, v9);

    }
LABEL_6:
    v11 = objc_msgSend(v1, sel_buttonTray);
    objc_msgSend(v11, sel_addButton_, v6);

    return (uint64_t)v6;
  }
  result = sub_1A9CE8BBC();
  __break(1u);
  return result;
}

id sub_1A9CB00C4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9CB03C8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1A9CAFE44);
}

id sub_1A9CB00D4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v18[2];

  v1 = v0;
  sub_1A9B92F34(0, qword_1EEB49BD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v18 - v4;
  v6 = objc_msgSend((id)objc_opt_self(), sel_buttonWithType_, 1);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  sub_1A9CE8844();
  v7 = sub_1A9CE8850();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 0, 1, v7);
  sub_1A9CE885C();
  v8 = objc_msgSend(v6, sel_titleLabel);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, sel_setTextAlignment_, 1);

  }
  v10 = (void *)sub_1A9CE82B0();
  objc_msgSend(v6, sel_setTitle_forState_, v10, 0);

  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v1, sel_hksp_contentViewButtonTapped, 64);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v11 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = 0x7065656C53;
  *(_QWORD *)(v11 + 56) = 0xE500000000000000;
  *(_QWORD *)(v11 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v11 + 72) = 0xEA0000000000676ELL;
  v18[1] = v11;
  v13 = v6;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2C48);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14);

  v15 = objc_msgSend(v1, sel_secondaryContentView);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_addSubview_, v13);
    objc_msgSend(v13, sel_hk_alignConstraintsWithView_, v16);

  }
  return v13;
}

id sub_1A9CB03BC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9CB03C8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1A9CB00D4);
}

id sub_1A9CB03C8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;

  v6 = sub_1A9CE82E0();
  v8 = v7;
  v9 = a1;
  v10 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease();
  return v10;
}

void sub_1A9CB042C(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;

  v1 = qword_1ED2626A8;
  v2 = a1;
  if (v1 != -1)
    swift_once();
  v3 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v4 = (id)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_hksp_addSkipButtonWithTitle_, v4, 0xE000000000000000);

}

void sub_1A9CB0518()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_linkButton);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_hksp_skipButtonTapped, 64);
  v3 = (void *)sub_1A9CE82B0();
  objc_msgSend(v2, sel_setTitle_forState_, v3, 0);

  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v4 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = 0x7065656C53;
  *(_QWORD *)(v4 + 56) = 0xE500000000000000;
  *(_QWORD *)(v4 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v4 + 72) = 0xEA0000000000676ELL;
  v6 = v2;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2C78);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v7 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setAccessibilityIdentifier_, v7);

  v8 = objc_msgSend(v1, sel_buttonTray);
  objc_msgSend(v8, sel_addButton_, v6);

}

uint64_t sub_1A9CB0724(void *a1)
{
  id v2;

  sub_1A9CE82E0();
  v2 = a1;
  sub_1A9CB0518();

  return swift_bridgeObjectRelease();
}

void sub_1A9CB077C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 1, v0, sel_hksp_cancelButtonTapped);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v3 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = 0x7065656C53;
  *(_QWORD *)(v3 + 56) = 0xE500000000000000;
  *(_QWORD *)(v3 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v3 + 72) = 0xEA0000000000676ELL;
  v5 = v2;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2CA8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v6 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

  v7 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v7, sel_setRightBarButtonItem_, v5);

}

void sub_1A9CB0944(void *a1)
{
  id v1;

  v1 = a1;
  sub_1A9CB077C();

}

void sub_1A9CB097C()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3438]), sel_initWithActivityIndicatorStyle_, 100);
  objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v3, sel_setTag_, 1234);
  v1 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v1, sel_addSubview_, v3);

  v2 = objc_msgSend(v0, sel_contentView);
  objc_msgSend(v3, sel_hk_alignConstraintsWithView_, v2);

  objc_msgSend(v3, sel_setHidden_, 0);
  objc_msgSend(v3, sel_startAnimating);

}

void sub_1A9CB0A70(void *a1)
{
  id v1;

  v1 = a1;
  sub_1A9CB097C();

}

void sub_1A9CB0AA4(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_contentView);
  v6 = objc_msgSend(v2, sel_viewWithTag_, 1234);

  if (v6)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, sel_setHidden_, 1);
      objc_msgSend(v4, sel_stopAnimating);
      objc_msgSend(v4, sel_removeFromSuperview);
    }

    v5 = v6;
  }
  else
  {
    v5 = v1;
  }

}

void sub_1A9CB0B6C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  _QWORD aBlock[6];

  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = qword_1ED2626A8;
  v8 = v3;
  if (v7 != -1)
    swift_once();
  v9 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v8;
  v10[5] = ObjectType;
  v27 = v8;
  swift_retain();
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_1A9CB18D4;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C432C8;
  aBlock[3] = &block_descriptor_34;
  v12 = _Block_copy(aBlock);
  swift_release();
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_actionWithTitle_style_handler_, v11, 0, v12, 0xE000000000000000);
  _Block_release(v12);

  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v15 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0x7065656C53;
  *(_QWORD *)(v15 + 56) = 0xE500000000000000;
  *(_QWORD *)(v15 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v15 + 72) = 0xEA0000000000676ELL;
  aBlock[0] = v15;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2CD8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v17 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAccessibilityIdentifier_, v17);

  v18 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v19 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v13, sel_actionWithTitle_style_handler_, v19, 1, 0, 0xE000000000000000);

  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v21 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0x7065656C53;
  *(_QWORD *)(v21 + 56) = 0xE500000000000000;
  *(_QWORD *)(v21 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v21 + 72) = 0xEA0000000000676ELL;
  aBlock[0] = v21;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2D18);
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v23 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v23);

  v24 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v25 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, 0, v25, 0, 0xE000000000000000);

  objc_msgSend(v26, sel_addAction_, v14);
  objc_msgSend(v26, sel_addAction_, v20);
  objc_msgSend(v27, sel_presentViewController_animated_completion_, v26, 1, 0);

}

void sub_1A9CB10D0(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18[2];
  uint64_t v19;
  void *v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  a2();
  v20 = a4;
  sub_1A9CB18F8();
  sub_1A9CB1934();
  v5 = a4;
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_1A9B949B8(v18, (uint64_t)v21);
    v6 = v22;
    v7 = v23;
    __swift_project_boxed_opaque_existential_1Tm(v21, v22);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7))
    {
      v9 = v8;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
      swift_unknownObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
      return;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  }
  else
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_1A9CB1988((uint64_t)v18);
  }
  if (qword_1ED262DB8 != -1)
    swift_once();
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1ED2630B8);
  v12 = sub_1A9CE6978();
  v13 = sub_1A9CE8670();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21[0] = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = sub_1A9CE8D48();
    *(_QWORD *)&v18[0] = sub_1A9B91D6C(v16, v17, v21);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] No delegate found while attemping to cancel onboarding", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v15, -1, -1);
    MEMORY[0x1AF420344](v14, -1, -1);
  }

}

uint64_t sub_1A9CB130C(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = a1;
  sub_1A9CB0B6C((uint64_t)sub_1A9CB189C, v5);

  return swift_release();
}

void sub_1A9CB1378(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v5 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v6 = a3;
  v7 = a1;
  v8 = objc_msgSend(v5, sel_initWithImage_, v6);
  objc_msgSend(v8, sel_setContentMode_, 1);
  v9 = objc_msgSend(v7, sel_contentView);
  objc_msgSend(v9, sel_addSubview_, v8);

  v10 = objc_msgSend(v7, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v10, 0, *MEMORY[0x1E0DC3298], *(double *)(MEMORY[0x1E0DC3298] + 8), *(double *)(MEMORY[0x1E0DC3298] + 16), *(double *)(MEMORY[0x1E0DC3298] + 24));

  swift_bridgeObjectRelease();
}

void sub_1A9CB1474(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v4 = a3;
  v5 = a1;
  v6 = objc_msgSend(v5, sel_contentView);
  objc_msgSend(v6, sel_addSubview_, v4);

  v7 = objc_msgSend(v5, sel_contentView);
  objc_msgSend(v7, sel_setClipsToBounds_, 1);

  v8 = objc_msgSend(v5, sel_contentView);
  UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(v8, 0, *MEMORY[0x1E0DC3298], *(double *)(MEMORY[0x1E0DC3298] + 8), *(double *)(MEMORY[0x1E0DC3298] + 16), *(double *)(MEMORY[0x1E0DC3298] + 24));

  swift_bridgeObjectRelease();
}

void OBWelcomeController.hksp_addHostedContentView<A>(hostedView:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  _QWORD v22[2];

  v3 = v2;
  v6 = sub_1A9CE76D4();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD0B0];
  MEMORY[0x1E0C80A78](v6, v8);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE7428();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, a2);
  v14 = (void *)sub_1A9CE741C();
  sub_1A9B92F34(0, &qword_1EEB49B98, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1A9CEB520;
  sub_1A9CE76C8();
  v22[1] = v15;
  sub_1A9CB17C8();
  sub_1A9B92F34(0, &qword_1EEB49BA8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9CB1810();
  sub_1A9CE8904();
  sub_1A9CE7410();
  objc_msgSend(v3, sel_addChildViewController_, v14);
  v16 = objc_msgSend(v3, sel_contentView);
  v17 = objc_msgSend(v14, sel_view);
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v16, sel_addSubview_, v17);

    objc_msgSend(v14, sel_didMoveToParentViewController_, v3);
    v19 = objc_msgSend(v14, sel_view);
    if (v19)
    {
      v20 = v19;
      v21 = objc_msgSend(v3, sel_contentView);
      objc_msgSend(v20, sel_hk_alignConstraintsWithView_, v21);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1A9CB17C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB49BA0;
  if (!qword_1EEB49BA0)
  {
    v1 = sub_1A9CE76D4();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDD0C0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB49BA0);
  }
  return result;
}

unint64_t sub_1A9CB1810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB49BB0;
  if (!qword_1EEB49BB0)
  {
    sub_1A9B92F34(255, &qword_1EEB49BA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD0B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB49BB0);
  }
  return result;
}

uint64_t sub_1A9CB1870()
{
  return 0;
}

uint64_t sub_1A9CB1878()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A9CB189C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1A9CB18A8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1A9CB18D4(uint64_t a1)
{
  uint64_t v1;

  sub_1A9CB10D0(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

unint64_t sub_1A9CB18F8()
{
  unint64_t result;

  result = qword_1EEB49BB8;
  if (!qword_1EEB49BB8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB49BB8);
  }
  return result;
}

unint64_t sub_1A9CB1934()
{
  unint64_t result;

  result = qword_1EEB49BC0;
  if (!qword_1EEB49BC0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB49BC0);
  }
  return result;
}

uint64_t sub_1A9CB1988(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92F34(0, &qword_1EEB49BC8, (uint64_t (*)(uint64_t))sub_1A9CB1934, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1A9CB19DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v12 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
    v13 = a3[8];
    v14 = a3[9];
    v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v16 = v12;
    v17 = v15;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1A9CB1AAC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2[5];
  v5 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

_OWORD *sub_1A9CB1B18(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = *(void **)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v12 = a3[8];
  v13 = a3[9];
  v14 = *(void **)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v14;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v15 = v11;
  v16 = v14;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1A9CB1BBC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v10 = a3[7];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = a3[8];
  v15 = *(void **)((char *)a2 + v14);
  v16 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  v17 = v15;

  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1A9CB1C88(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  return a1;
}

_OWORD *sub_1A9CB1D1C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);

  v12 = a3[8];
  v13 = *(void **)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);

  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9CB1DCC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9CB1DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1A9CE6444();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1A9CB1E58()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9CB1E64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A9CE6444();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for WeekResultsBuilder()
{
  uint64_t result;

  result = qword_1EEB49C30;
  if (!qword_1EEB49C30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9CB1F1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9CB1FBC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for WeekResultsBuilder();
  v0 = swift_bridgeObjectRetain();
  sub_1A9BAD3D8(v0);
  v2 = v1;
  swift_bridgeObjectRelease();
  if (v2)
  {
    v3 = objc_msgSend(v2, sel_sleepDurationGoal);
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
      objc_msgSend(v4, sel_doubleValueForUnit_, v5);
      v7 = v6;

      return v7;
    }

  }
  return 0;
}

id sub_1A9CB209C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  int v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_BYTE *, _BYTE *, uint64_t);
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t (*v78)(char *, uint64_t);
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  _BYTE *v93;
  void (*v94)(_BYTE *, uint64_t);
  _QWORD *v95;
  int *v96;
  char *v97;
  void *v98;
  _BYTE v100[4];
  int v101;
  uint64_t v102;
  void (*v103)(_BYTE *, _BYTE *, uint64_t);
  int v104;
  NSObject *v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  char *v122;
  id v123;
  _BYTE *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;

  v2 = v1;
  v115 = a1;
  v3 = sub_1A9CE6444();
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v111 = &v100[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1A9CE5F64();
  v113 = *(_QWORD *)(v6 - 8);
  v114 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v110 = &v100[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for WeekResultsBuilder();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)&v100[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v120 = sub_1A9CE62E8();
  v107 = *(_QWORD *)(v120 - 8);
  v14 = MEMORY[0x1E0C80A78](v120, v13);
  v109 = &v100[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v108 = &v100[-v18];
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v121 = &v100[-v21];
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v106 = &v100[-v24];
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v124 = &v100[-v27];
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = &v100[-v29];
  v31 = (void *)objc_opt_self();
  v32 = swift_bridgeObjectRetain();
  sub_1A9CB37BC(v32);
  swift_bridgeObjectRelease();
  sub_1A9BAFB14();
  v33 = (void *)sub_1A9CE83D0();
  swift_release();
  v34 = *v2;
  v123 = objc_msgSend(v31, sel_sleepMetricsForDaySummaries_inMorningIndexRange_, v33, *v2, v2[1]);

  v112 = v9;
  v35 = (char *)v2 + *(int *)(v9 + 20);
  v36 = (void *)objc_opt_self();
  v122 = v35;
  v37 = sub_1A9CE63CC();
  v38 = objc_msgSend(v36, sel_hk_noonWithDayIndex_calendar_, v34, v37);

  sub_1A9CE62C4();
  v39 = sub_1A9CE8694();
  LOBYTE(v37) = v40;
  sub_1A9BA6F90((uint64_t)v2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WeekResultsBuilder);
  if ((v37 & 1) != 0)
    v39 = *v12;
  sub_1A9B97190((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WeekResultsBuilder);
  v41 = (void *)sub_1A9CE63CC();
  v42 = objc_msgSend(v36, sel_hk_noonWithDayIndex_calendar_, v39, v41);

  sub_1A9CE62C4();
  v43 = v123;
  v44 = (uint64_t)objc_msgSend(v123, sel_sleepAnalysisCount);
  v45 = 0;
  v46 = v121;
  if (v44 < 2)
  {
    v52 = 1;
    v48 = v120;
  }
  else
  {
    v47 = objc_msgSend(v43, sel_averageSleepDuration);
    v48 = v120;
    if (v47)
    {
      v49 = v47;
      v50 = objc_msgSend(v47, sel_hk_secondsNumber);

      objc_msgSend(v50, sel_doubleValue);
      v45 = v51;

      v52 = 0;
    }
    else
    {
      v52 = 1;
    }
  }
  v53 = v30;
  v54 = sub_1A9CB1FBC();
  LODWORD(v30) = v55;
  v56 = v106;
  if (qword_1EEB42E78 != -1)
    swift_once();
  LODWORD(v120) = v52;
  v57 = sub_1A9CE6990();
  __swift_project_value_buffer(v57, (uint64_t)qword_1EEB49440);
  v58 = v107;
  v59 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v107 + 16);
  v59(v56, v53, v48);
  v59(v46, v124, v48);
  v60 = sub_1A9CE6978();
  v61 = sub_1A9CE864C();
  v105 = v60;
  v104 = v61;
  v62 = os_log_type_enabled(v60, v61);
  v118 = v53;
  v119 = v54;
  if (v62)
  {
    v63 = swift_slowAlloc();
    v102 = swift_slowAlloc();
    v127 = v102;
    *(_DWORD *)v63 = 136447235;
    v125 = sub_1A9B91D6C(0xD000000000000012, 0x80000001A9CF6510, &v127);
    sub_1A9CE888C();
    *(_WORD *)(v63 + 12) = 2080;
    v103 = v59;
    v101 = (int)v30;
    sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v64 = sub_1A9CE8B74();
    v125 = sub_1A9B91D6C(v64, v65, &v127);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v30 = *(_BYTE **)(v58 + 8);
    v59 = v103;
    ((void (*)(_BYTE *, uint64_t))v30)(v56, v48);
    *(_WORD *)(v63 + 22) = 2080;
    v66 = v121;
    v67 = sub_1A9CE8B74();
    v125 = sub_1A9B91D6C(v67, v68, &v127);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v121 = v30;
    ((void (*)(_BYTE *, uint64_t))v30)(v66, v48);
    *(_WORD *)(v63 + 32) = 2081;
    v125 = v45;
    v126 = v120;
    sub_1A9B94CA0(0, (unint64_t *)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v69 = sub_1A9CE82F8();
    v125 = sub_1A9B91D6C(v69, v70, &v127);
    v54 = v119;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 42) = 2081;
    v125 = v54;
    LOBYTE(v30) = v101;
    v126 = v101 & 1;
    v71 = sub_1A9CE82F8();
    v125 = sub_1A9B91D6C(v71, v72, &v127);
    v53 = v118;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v73 = v105;
    _os_log_impl(&dword_1A9B87000, v105, (os_log_type_t)v104, "[%{public}s] [%s-%s] average: %{private}s, mostRecentGoal: %{private}s", (uint8_t *)v63, 0x34u);
    v74 = v102;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v74, -1, -1);
    MEMORY[0x1AF420344](v63, -1, -1);

  }
  else
  {
    v77 = *(_BYTE **)(v58 + 8);
    ((void (*)(_BYTE *, uint64_t))v77)(v56, v48);
    v121 = v77;
    ((void (*)(_BYTE *, uint64_t))v77)(v46, v48);

  }
  MEMORY[0x1E0C80A78](v75, v76);
  *(_QWORD *)&v100[-32] = v2;
  *(_QWORD *)&v100[-24] = v54;
  LODWORD(v107) = v30 & 1;
  v100[-16] = v30 & 1;
  v106 = (_BYTE *)sub_1A9CB30EC((void (*)(_QWORD *__return_ptr, char *))sub_1A9CB38BC, (uint64_t)&v100[-48], v78, v79);
  v59(v108, v53, v48);
  v80 = v124;
  v59(v109, v124, v48);
  v81 = v110;
  sub_1A9CE5F1C();
  sub_1A9CB2A2C();
  v83 = v82;
  v85 = v116;
  v84 = v117;
  v86 = v111;
  (*(void (**)(_BYTE *, char *, uint64_t))(v116 + 16))(v111, v122, v117);
  v87 = v2;
  v88 = v112;
  v89 = *(void **)((char *)v87 + *(int *)(v112 + 32));
  v90 = objc_allocWithZone(MEMORY[0x1E0CB3570]);
  v91 = v89;
  v92 = objc_msgSend(v90, sel_init);
  objc_msgSend(v92, sel_setAllowedUnits_, 32);
  objc_msgSend(v92, sel_setUnitsStyle_, 1);

  v93 = v80;
  v94 = (void (*)(_BYTE *, uint64_t))v121;
  ((void (*)(_BYTE *, uint64_t))v121)(v93, v48);
  v94(v118, v48);
  v124 = *(_BYTE **)((char *)v87 + *(int *)(v88 + 28));
  v95 = v115;
  *v115 = v106;
  v95[1] = v45;
  *((_BYTE *)v95 + 16) = v120;
  v96 = (int *)type metadata accessor for WeekResults(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(v113 + 32))((char *)v95 + v96[6], v81, v114);
  *(_QWORD *)((char *)v95 + v96[7]) = v83;
  v97 = (char *)v95 + v96[8];
  *(_QWORD *)v97 = v119;
  v97[8] = v107;
  *(_QWORD *)((char *)v95 + v96[9]) = 0x40AC200000000000;
  (*(void (**)(char *, _BYTE *, uint64_t))(v85 + 32))((char *)v95 + v96[10], v86, v84);
  *(_QWORD *)((char *)v95 + v96[11]) = v91;
  *(_QWORD *)((char *)v95 + v96[12]) = v92;
  v98 = v124;
  *(_QWORD *)((char *)v95 + v96[13]) = v124;
  return v98;
}

