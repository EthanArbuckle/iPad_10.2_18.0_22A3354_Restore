uint64_t static Logger.app.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B8AA0C(&qword_1ED262DB8, (uint64_t)qword_1ED2630B8, a1);
}

uint64_t sub_1A9B8AA0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for SleepStagesModel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1ED262DA0);
}

void sub_1A9B8AAA0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A9B92F34(319, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    sub_1A9B92F34(319, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1A9B8AB70@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1A9B8ABC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1A9B8AC28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF4203E0](v1);
}

uint64_t sub_1A9B8AC74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1A9B8ACDC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF4203E0](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1A9B8AD50;
}

void sub_1A9B8AD50(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

BOOL sub_1A9B8ADC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  return v1 && *(_BYTE *)(v1 + qword_1EEB440C0) != 2;
}

id ScheduleOccurrenceViewController.__allocating_init(scheduleOccurrence:isAdding:weekdaysWithExistingOccurrences:sleepScheduleProvider:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, int a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _BYTE v31[40];

  v6 = a6;
  v27 = a6;
  v30 = a5;
  v29 = a3;
  v28 = a2;
  v9 = sub_1A9CE6444();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a4[3];
  v14 = a4[4];
  __swift_project_boxed_opaque_existential_1Tm(a4, v15);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 40);
  v17 = a1;
  v18 = v16(v15, v14);
  v20 = a4[3];
  v19 = a4[4];
  __swift_project_boxed_opaque_existential_1Tm(a4, v20);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v20, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v6, v9);
  type metadata accessor for ScheduleOccurrenceEditModel();
  swift_allocObject();
  LOBYTE(v6) = v28;
  v22 = sub_1A9BD5470(v17, v28, 0, v29, v18, v21, v30, (uint64_t)v13);

  swift_release();
  swift_release();
  sub_1A9B923D4((uint64_t)a4, (uint64_t)v31);
  v23 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
  v24 = sub_1A9B92438(v22, (v6 & 1) == 0, (uint64_t)v31);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v9);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a4);
  return v24;
}

id ScheduleOccurrenceViewController.__allocating_init(scheduleOccurrence:isAdding:weekdaysWithExistingOccurrences:sleepSchedulePublisher:sleepDurationGoalPublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  id v22;
  _OWORD v24[2];
  uint64_t v25;

  v14 = sub_1A9CE6444();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a7, v14);
  type metadata accessor for ScheduleOccurrenceEditModel();
  swift_allocObject();
  v19 = sub_1A9BD5470(a1, a2, 0, a3, a5, a4, a6, (uint64_t)v18);
  v20 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewController();
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v21 = objc_allocWithZone(v20);
  v22 = sub_1A9B92438(v19, (a2 & 1) == 0, (uint64_t)v24);

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a7, v14);
  return v22;
}

id ScheduleOccurrenceViewController.__allocating_init(overrideOccurrence:allowsDeletion:isAdding:sleepScheduleProvider:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, int a2, char a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v13 = *(_QWORD *)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a4, v13);
  MEMORY[0x1E0C80A78](v15, v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = sub_1A9B927F4(a1, a2, a3, (uint64_t)v17, a5, a6, v6, v13, v14);

  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v19;
}

uint64_t sub_1A9B8B1DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1A9B8B230()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id *v15;
  char v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  objc_class *v22;
  id v23;
  void *v24;
  uint64_t ObjCClassFromMetadata;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  unint64_t v32;
  id v33;
  void *v34;
  char *v35;
  id v36;
  char v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char *v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  id v91[3];
  uint64_t v92;
  uint64_t v93;
  objc_super v94;

  v1 = v0;
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v83 = (char *)&v76 - v4;
  v5 = sub_1A9CE8778();
  v85 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v82 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B929B4();
  v9 = v8;
  v81 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v0, sel_tableView);
  if (!v13)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v14 = v13;
  v15 = *(id **)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  v16 = v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_allowsDeletion];
  swift_retain();
  v17 = objc_msgSend(v1, sel_traitCollection);
  v18 = objc_msgSend(v17, sel_preferredContentSizeCategory);

  LOBYTE(v17) = sub_1A9CE8790();
  v19 = objc_allocWithZone((Class)_s10DataSourceCMa());
  v20 = sub_1A9BB24C8(v14, (uint64_t)v15, v16, v17 & 1);

  swift_release();
  v21 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource] = v20;

  v22 = (objc_class *)type metadata accessor for ScheduleOccurrenceViewController();
  v94.receiver = v1;
  v94.super_class = v22;
  objc_msgSendSuper2(&v94, sel_viewDidLoad);
  v23 = objc_msgSend(v1, sel_tableView);
  if (!v23)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v24 = v23;
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v26 = (void *)sub_1A9CE82B0();
  objc_msgSend(v24, sel_registerClass_forHeaderFooterViewReuseIdentifier_, ObjCClassFromMetadata, v26);

  v27 = objc_msgSend(v1, sel_tableView);
  if (!v27)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v28 = v27;
  objc_msgSend(v27, sel_setDelegate_, v1);

  v29 = objc_msgSend(v1, sel_navigationController);
  if (v29)
  {
    v30 = v29;
    v31 = objc_msgSend(v29, sel_viewControllers);

    sub_1A9B94A18(0, &qword_1EEB43070);
    v32 = sub_1A9CE83DC();

    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      v44 = sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (v44)
        goto LABEL_7;
    }
    else if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v32 & 0xC000000000000001) != 0)
      {
        v33 = (id)MEMORY[0x1AF41F600](0, v32);
        goto LABEL_10;
      }
      if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v33 = *(id *)(v32 + 32);
LABEL_10:
        v34 = v33;
        swift_bridgeObjectRelease();
        v35 = v1;
        v36 = v34;
        v37 = sub_1A9CE8814();

        if ((v37 & 1) != 0)
        {
          v38 = objc_msgSend(v35, sel_navigationItem);
          v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 1, v35, sel_cancelButtonPressed);
          objc_msgSend(v38, sel_setLeftBarButtonItem_, v39);

          v40 = objc_msgSend(v35, sel_navigationItem);
          v41 = sub_1A9B8C014(v35);
          objc_msgSend(v40, sel_setRightBarButtonItem_, v41);

          v42 = objc_msgSend(v35, sel_navigationItem);
          v43 = objc_msgSend(v42, sel_rightBarButtonItem);

          if (v43)
          {
            objc_msgSend(v43, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);

          }
        }
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
LABEL_15:
  v79 = v5;
  v78 = v12;
  v80 = v9;
  v91[0] = v15[2];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92B28();
  v45 = MEMORY[0x1E0C95F48];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB42FA0, (uint64_t (*)(uint64_t))sub_1A9B92B28, MEMORY[0x1E0C95F48]);
  swift_retain();
  v46 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmConfigurationObserver] = v46;
  swift_release();
  v91[0] = v15[3];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92BE4();
  sub_1A9B92B9C(&qword_1EEB45B90, (uint64_t (*)(uint64_t))sub_1A9B92BE4, v45);
  swift_retain();
  v47 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelEditObserver] = v47;
  swift_release();
  v48 = (uint64_t)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  swift_beginAccess();
  sub_1A9B92C48(v48, (uint64_t)v91);
  v49 = v92;
  if (v92)
  {
    v50 = v93;
    v51 = __swift_project_boxed_opaque_existential_1Tm(v91, v92);
    v52 = *(_QWORD *)(v49 - 8);
    MEMORY[0x1E0C80A78](v51, v51);
    v54 = (char *)&v76 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v52 + 16))(v54);
    sub_1A9B94974((uint64_t)v91, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 24))(v49, v50);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v49);
    v90 = v55;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92D84(0, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (uint64_t)&qword_1ED262900, 0x1E0DA8568);
    sub_1A9B93038();
    v56 = sub_1A9CE6EC4();
    swift_release();
    swift_release();
  }
  else
  {
    sub_1A9B94974((uint64_t)v91, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    v56 = 0;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver] = v56;
  swift_release();
  v91[0] = v15[8];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92D08();
  sub_1A9B92B9C((unint64_t *)&qword_1EEB474C0, (uint64_t (*)(uint64_t))sub_1A9B92D08, MEMORY[0x1E0C95FB8]);
  swift_retain();
  v57 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepDurationGoalObserver] = v57;
  swift_release();
  v91[0] = v15[4];
  sub_1A9B92D84(0, (unint64_t *)&unk_1EEB45BB0, (unint64_t *)&qword_1EEB43000, (uint64_t)&unk_1EEB45BC0, 0x1E0DA8580);
  sub_1A9B92DF8();
  v91[0] = (id)sub_1A9CE6E88();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92E68();
  sub_1A9B92B9C(&qword_1EEB43020, (uint64_t (*)(uint64_t))sub_1A9B92E68, MEMORY[0x1E0C95D90]);
  v58 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_validScheduleRangeObserver] = v58;
  swift_release();
  v77 = (id)objc_opt_self();
  v59 = objc_msgSend(v77, sel_defaultCenter);
  v60 = v82;
  sub_1A9CE8784();

  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v91[0] = (id)sub_1A9CE870C();
  v89 = sub_1A9CE8700();
  v61 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868];
  v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56);
  v62 = (uint64_t)v83;
  v88(v83, 1, 1, v89);
  v87 = sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v86 = sub_1A9B92A68();
  v63 = v78;
  v64 = v79;
  sub_1A9CE6EAC();
  sub_1A9B93BDC(v62, (unint64_t *)&qword_1ED262570, v61);

  v85 = *(_QWORD *)(v85 + 8);
  ((void (*)(char *, uint64_t))v85)(v60, v64);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v84 = sub_1A9B92B9C((unint64_t *)&unk_1ED262560, (uint64_t (*)(uint64_t))sub_1A9B929B4, MEMORY[0x1E0C95CB8]);
  v65 = v80;
  v66 = sub_1A9CE6EC4();
  swift_release();
  v81 = *(_QWORD *)(v81 + 8);
  ((void (*)(char *, uint64_t))v81)(v63, v65);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_significantTimeChangeObserver] = v66;
  swift_release();
  v67 = v77;
  v68 = objc_msgSend(v77, (SEL)&selRef_dateFormatFromTemplate_options_locale_ + 7);
  sub_1A9CE8784();

  v91[0] = (id)sub_1A9CE870C();
  v88((char *)v62, 1, 1, v89);
  sub_1A9CE6EAC();
  sub_1A9B93BDC(v62, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868]);

  ((void (*)(char *, uint64_t))v85)(v60, v64);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v69 = sub_1A9CE6EC4();
  swift_release();
  v70 = (void (*)(char *, uint64_t))v81;
  ((void (*)(char *, uint64_t))v81)(v63, v65);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_localeChangeObserver] = v69;
  swift_release();
  v71 = objc_msgSend(v67, sel_defaultCenter);
  sub_1A9CE8784();

  v91[0] = (id)sub_1A9CE870C();
  v88((char *)v62, 1, 1, v89);
  sub_1A9CE6EAC();
  sub_1A9B93BDC(v62, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868]);

  ((void (*)(char *, uint64_t))v85)(v60, v64);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v72 = sub_1A9CE6EC4();
  swift_release();
  v70(v63, v65);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_willResignActiveObserver] = v72;
  swift_release();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_1A9CEB520;
  v74 = sub_1A9CE6AB0();
  v75 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v73 + 32) = v74;
  *(_QWORD *)(v73 + 40) = v75;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  sub_1A9CE86E8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

id sub_1A9B8C014(char *a1)
{
  id v2;
  uint64_t v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD v14[4];

  if (*(_BYTE *)(*(_QWORD *)&a1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model] + 48) != 1)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 0, a1, sel_saveButtonPressed);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v3 = type metadata accessor for ScheduleOccurrenceViewController();
  v14[3] = v3;
  v14[0] = a1;
  v4 = a1;
  v5 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (v3)
  {
    v6 = __swift_project_boxed_opaque_existential_1Tm(v14, v3);
    v7 = *(_QWORD *)(v3 - 8);
    MEMORY[0x1E0C80A78](v6, v6);
    v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = sub_1A9CE8B98();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
  else
  {
    v10 = 0;
  }
  v12 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
  v11 = objc_msgSend(v12, sel_initWithTitle_style_target_action_, v5, 2, v10, sel_saveButtonPressed, v14[0]);

  swift_unknownObjectRelease();
  return v11;
}

void sub_1A9B8C210(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  id v8;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (char *)v4;
    sub_1A9B8E778();
    v6 = *(void **)&v5[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v5, sel_tableView);
      sub_1A9BB20E4(v2, v8);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1A9B8C2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    *(_BYTE *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged) = 1;
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    objc_msgSend(v4, sel_setModalInPresentation_, 1);
    v5 = objc_msgSend(v4, sel_navigationItem);
    v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      objc_msgSend(v6, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);

      v4 = v6;
    }

  }
}

void sub_1A9B8C3C0(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9B8C418(v2);

  }
}

void sub_1A9B8C418(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  _BYTE *v51;
  char v52;
  id v53;
  id v54;
  unint64_t v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  id v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  _QWORD v72[2];
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  void *v77;
  uint64_t v78;
  uint64_t v79[3];
  uint64_t v80;
  uint64_t v81;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v4 = sub_1A9CE62E8();
  v75 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  v9 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
  v10 = sub_1A9CE6978();
  v11 = sub_1A9CE867C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v73 = v7;
    v74 = v4;
    v14 = v13;
    v79[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v15 = sub_1A9CE8D48();
    v78 = sub_1A9B91D6C(v15, v16, v79);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Sleep schedule did change while editing", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    v7 = v73;
    v4 = v74;
    MEMORY[0x1AF420344](v17, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  if ((v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged] & 1) != 0)
  {
    v18 = sub_1A9CE6978();
    v19 = sub_1A9CE867C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v79[0] = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = sub_1A9CE8D48();
      v78 = sub_1A9B91D6C(v22, v23, v79);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] Ignoring occurrence reset since the user has already edited the model.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v21, -1, -1);
      MEMORY[0x1AF420344](v20, -1, -1);
    }

    return;
  }
  v72[1] = v9;
  if (a1)
  {
    v24 = a1;
  }
  else
  {
    v25 = sub_1A9CE6978();
    v26 = sub_1A9CE867C();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v73 = v7;
      v29 = v4;
      v30 = v28;
      v79[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v31 = sub_1A9CE8D48();
      v78 = sub_1A9B91D6C(v31, v32, v79);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v25, v26, "[%{public}s] Sleep schedule is nil - creating empty schedule.", v27, 0xCu);
      swift_arrayDestroy();
      v33 = v30;
      v4 = v29;
      v7 = v73;
      MEMORY[0x1AF420344](v33, -1, -1);
      MEMORY[0x1AF420344](v27, -1, -1);
    }

    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8568]), sel_init);
  }
  v34 = (uint64_t)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  swift_beginAccess();
  sub_1A9B92C48(v34, (uint64_t)v79);
  v35 = v80;
  if (v80)
  {
    v36 = v81;
    v37 = __swift_project_boxed_opaque_existential_1Tm(v79, v80);
    v38 = a1;
    v39 = *(_QWORD *)(v35 - 8);
    MEMORY[0x1E0C80A78](v37, v37);
    v41 = (char *)v72 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v39 + 16))(v41);
    v42 = v38;
    sub_1A9B94974((uint64_t)v79, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    v43 = SleepScheduleProviding.sleepScheduleModel.getter(v35, v36);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v35);
  }
  else
  {
    v44 = a1;
    sub_1A9B94974((uint64_t)v79, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
    v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8570]), sel_init);
  }
  sub_1A9CE62DC();
  v45 = *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  if (*(_BYTE *)(v45 + 49) == 1)
  {
    v46 = (void *)sub_1A9CE6258();
    v47 = (void *)sub_1A9CE63CC();
    v48 = objc_msgSend(v43, sel_overrideOccurrenceGenerationResultForCurrentDate_gregorianCalendar_schedule_, v46, v47, v24);

    v49 = objc_msgSend(v48, sel_overrideOccurrence);
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v49, 0);

    v50 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
    if (v50)
    {
      v51 = v50;
      if (objc_msgSend(v48, sel_wasGeneratedFromTemplate))
      {
        v52 = v51[qword_1EEB440E0];
        v51[qword_1EEB440E0] = 0;
        if ((v52 & 1) == 0)
          goto LABEL_33;
      }
      else
      {
        v60 = objc_msgSend(v48, sel_upcomingOccurrenceWasOverride);
        v61 = v51[qword_1EEB440E0];
        v51[qword_1EEB440E0] = v60;
        if (v60 == v61)
        {
LABEL_33:

          goto LABEL_34;
        }
      }
      sub_1A9BB29C0();
      goto LABEL_33;
    }
LABEL_43:
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v45 + 48) == 1)
  {
    v53 = objc_msgSend(v24, sel_mutableOccurrenceTemplate);
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v53, (uint64_t)objc_msgSend(v24, sel_weekdaysWithOccurrences));

LABEL_34:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v4);
    return;
  }
  v73 = v2;
  v74 = v4;
  swift_beginAccess();
  v54 = objc_msgSend(v24, sel_occurrencesOnDays_, objc_msgSend(*(id *)(v45 + 40), sel_weekdays));
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  v55 = sub_1A9CE83DC();

  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    v62 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v62)
      goto LABEL_26;
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (!*(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_37;
LABEL_26:
  if ((v55 & 0xC000000000000001) != 0)
  {
    v56 = (id)MEMORY[0x1AF41F600](0, v55);
  }
  else
  {
    if (!*(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_43;
    }
    v56 = *(id *)(v55 + 32);
  }
  v57 = v56;
  swift_bridgeObjectRelease();
  v58 = objc_msgSend(v57, sel_weekdays);
  if (v58 == objc_msgSend(*(id *)(v45 + 40), sel_weekdays))
  {
    objc_msgSend(v57, sel_mutableCopy);
    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&unk_1EEB4A1D0);
    swift_dynamicCast();
    v59 = v77;
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v77, (uint64_t)objc_msgSend(v24, sel_weekdaysWithOccurrences));

    (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v74);
    return;
  }

LABEL_38:
  v63 = sub_1A9CE6978();
  v64 = sub_1A9CE8664();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = v43;
    v66 = (uint8_t *)swift_slowAlloc();
    v67 = swift_slowAlloc();
    v79[0] = v67;
    *(_DWORD *)v66 = 136446210;
    v68 = sub_1A9CE8D48();
    v77 = (void *)sub_1A9B91D6C(v68, v69, v79);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v63, v64, "[%{public}s] Occurrence being edited has changed weekdays. Dismissing.", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v67, -1, -1);
    v70 = v66;
    v43 = v65;
    MEMORY[0x1AF420344](v70, -1, -1);
  }

  v71 = v74;
  objc_msgSend(v73, sel_cancelButtonPressed);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v71);
}

void sub_1A9B8CDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_1A9B8E990("[%{public}s] Sleep duration goal did change while editing");

  }
}

void sub_1A9B8CE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_navigationItem);
    v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      objc_msgSend(v6, sel_setEnabled_, ScheduleOccurrenceEditModel.isValid.getter() & 1);

    }
    sub_1A9B8E778();

  }
}

void sub_1A9B8CEF4(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = (void *)MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, *a3);

  }
}

void sub_1A9B8CF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_1A9B8D480();

  }
}

void sub_1A9B8CF9C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _BYTE *v8;
  id v9;
  id v10;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = *(void **)(v5 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
    v8 = v7;

    if (v7)
    {
      v9 = objc_msgSend(a1, sel_traitCollection);
      v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);

      LOBYTE(v9) = sub_1A9CE8790();
      v8[qword_1EEB440F0] = v9 & 1;
      sub_1A9BB29C0();

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1A9B8D0A8(char a1)
{
  char *v1;
  char *v2;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  char *v10;
  id v11;
  char v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t ObjectType;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[4];
  objc_super v26;

  v2 = v1;
  swift_getObjectType();
  v26.receiver = v2;
  v26.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  objc_msgSendSuper2(&v26, sel_viewWillDisappear_, a1 & 1);
  v4 = objc_msgSend(v2, sel_navigationController);
  if (!v4)
    goto LABEL_11;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_viewControllers);

  sub_1A9B94A18(0, &qword_1EEB43070);
  v7 = sub_1A9CE83DC();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_4;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_4:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x1AF41F600](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_24:
      swift_once();
      goto LABEL_19;
    }
    v8 = *(id *)(v7 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = v2;
  v11 = v9;
  v12 = sub_1A9CE8814();

  if ((v12 & 1) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] & 1) != 0)
  {
LABEL_17:
    sub_1A9CA17A4();
    return;
  }
  if (v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged] == 1)
  {
    if (*(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    v14 = &v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
    swift_beginAccess();
    if (MEMORY[0x1AF4203E0](v14))
    {
      v15 = *((_QWORD *)v14 + 1);
      ObjectType = swift_getObjectType();
      v17 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      (*(void (**)(char *, id, _QWORD, uint64_t, uint64_t))(v15 + 8))(v2, v17, 0, ObjectType, v15);

      swift_unknownObjectRelease();
    }
    goto LABEL_17;
  }
  if (qword_1ED262DB8 != -1)
    goto LABEL_24;
LABEL_19:
  v18 = sub_1A9CE6990();
  __swift_project_value_buffer(v18, (uint64_t)qword_1ED2630B8);
  v19 = sub_1A9CE6978();
  v20 = sub_1A9CE867C();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v25[0] = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_1A9CE8D48();
    v25[3] = sub_1A9B91D6C(v23, v24, v25);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v19, v20, "[%{public}s] Skipping notifying delegate due to no changes", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v22, -1, -1);
    MEMORY[0x1AF420344](v21, -1, -1);
  }

}

void sub_1A9B8D480()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED2630B8);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1A9CE8D48();
    sub_1A9B91D6C(v5, v6, &v7);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] App will resign active", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  sub_1A9CA17A4();
}

void sub_1A9B8D644(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  objc_super v12;

  v2 = v1;
  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  objc_msgSendSuper2(&v12, sel_restoreUserActivityState_, a1);
  sub_1A9B90B94(1);
  if (v4)
  {
    v5 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v6 = sub_1A9CE82E0();
    v8 = v7;
    if (v6 == sub_1A9CE82E0() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      v11 = sub_1A9CE8BB0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
        return;
    }
    ScheduleOccurrenceEditModel.alarmEnabled.setter(1);
  }
}

void sub_1A9B8D798()
{
  sub_1A9B930A0();
}

void sub_1A9B8D854(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v2)
  {
    v4 = v2;
    sub_1A9CE6A74();

    if (v8)
    {
      if ((v7 != 0xD000000000000029 || v8 != 0x80000001A9CF7DE0) && (sub_1A9CE8BB0() & 1) == 0)
      {
        if (v7 == 0xD000000000000025 && v8 == 0x80000001A9CF7E70)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = sub_1A9CE8BB0();
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0)
            goto LABEL_12;
        }
        sub_1A9B8DC74();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      sub_1A9B8D9B0();
    }
LABEL_12:
    v6 = (void *)sub_1A9CE64B0();
    objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, v6, 1);

    return;
  }
  __break(1u);
}

void sub_1A9B8D9B0()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15[4];

  v1 = v0;
  swift_getObjectType();
  v2 = objc_msgSend(*(id *)(*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model]+ OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v2, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v14, sel_toneIdentifier);
  v5 = objc_msgSend(v14, sel_vibrationIdentifier);
  v6 = objc_msgSend(v3, sel_hksh_alarmPickerWithToneIdentifier_vibrationIdentifier_, v4, v5);

  objc_msgSend(v6, sel_setDelegate_, v1);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v7 = sub_1A9CE6990();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED2630B8);
  v8 = sub_1A9CE6978();
  v9 = sub_1A9CE867C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v15[0] = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_1A9CE8D48();
    sub_1A9B91D6C(v12, v13, v15);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v8, v9, "[%{public}s] Presenting tone picker", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v11, -1, -1);
    MEMORY[0x1AF420344](v10, -1, -1);
  }

  objc_msgSend(v1, sel_showViewController_sender_, v6, 0);
}

void sub_1A9B8DC74()
{
  _BYTE *v0;
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void (*v7)(_BYTE *, id, uint64_t, uint64_t);
  id v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  id v13;
  void *v14;
  _BYTE *v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;

  v1 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] & 1) == 0)
  {
    v2 = v0;
    v3 = &v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
    swift_beginAccess();
    if (MEMORY[0x1AF4203E0](v3))
    {
      v4 = *((_QWORD *)v3 + 1);
      if (*(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      ObjectType = swift_getObjectType();
      v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
      swift_beginAccess();
      v7 = *(void (**)(_BYTE *, id, uint64_t, uint64_t))(v4 + 16);
      v8 = *(id *)(v6 + 40);
      v7(v2, v8, ObjectType, v4);

      v2[v1] = 1;
      v9 = objc_msgSend(v2, sel_navigationController);
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend(v9, sel_viewControllers);

        sub_1A9B94A18(0, &qword_1EEB43070);
        v12 = sub_1A9CE83DC();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = sub_1A9CE8AC0();
          swift_bridgeObjectRelease();
          if (v18)
          {
LABEL_8:
            if ((v12 & 0xC000000000000001) != 0)
            {
              v13 = (id)MEMORY[0x1AF41F600](0, v12);
            }
            else
            {
              if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return;
              }
              v13 = *(id *)(v12 + 32);
            }
            v14 = v13;
            swift_bridgeObjectRelease();
            v15 = v2;
            v16 = v14;
            v17 = sub_1A9CE8814();

            if ((v17 & 1) != 0)
              goto LABEL_16;
            goto LABEL_15;
          }
        }
        else if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
LABEL_15:
      v19 = objc_msgSend(v2, sel_navigationController);

LABEL_16:
      swift_unknownObjectRelease();
    }
  }
}

void sub_1A9B8DF88(uint64_t a1, void *a2)
{
  sub_1A9B931AC(a2);
}

id sub_1A9B8E05C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = sub_1A9CE64E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  v12 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v12)
    return 0;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v12;
  MEMORY[0x1AF41D0D4](v13);
  sub_1A9CE6A74();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v27)
  {
    if (v26 == 0xD000000000000029 && v27 == 0x80000001A9CF7DE0 || (sub_1A9CE8BB0() & 1) != 0)
    {
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
  }
  v16 = *(void **)(v3 + v11);
  if (!v16)
    return 0;
  v17 = v16;
  sub_1A9BB2D68(a2);
  v19 = v18;

  if (!v19)
    return 0;
  v20 = (void *)sub_1A9CE82B0();
  v21 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v20);

  if (!v21)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  v15 = (id)swift_dynamicCastClass();
  if (v15)
  {
    v22 = v21;
    v23 = sub_1A9CA87A0();
    v24 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_setText_, v24);

  }
  else
  {
    swift_bridgeObjectRelease();

  }
  return v15;
}

id sub_1A9B8E34C(uint64_t a1, uint64_t a2)
{
  return sub_1A9B93598(a2);
}

double sub_1A9B8E3A4(uint64_t a1, uint64_t a2)
{
  return sub_1A9B93718(a2);
}

double sub_1A9B8E404(uint64_t a1, uint64_t a2)
{
  return sub_1A9B9388C(a2);
}

double sub_1A9B8E464(uint64_t a1, uint64_t a2)
{
  return sub_1A9B93A00(a2);
}

void ScheduleOccurrenceViewController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ScheduleOccurrenceViewController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1A9B8E51C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A9B94974(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
  sub_1A9B94894(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate);

}

id ScheduleOccurrenceViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL sub_1A9B8E740()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  return v1 && *(_BYTE *)(v1 + qword_1EEB440C0) != 2;
}

void sub_1A9B8E778()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  id v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, sel_tableView);
  if (!v1)
    goto LABEL_17;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_visibleCells);

  sub_1A9B94A18(0, &qword_1EEB43520);
  v4 = sub_1A9CE83DC();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1A9CE8AC0();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_15;
LABEL_4:
  if (v5 < 1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  v6 = 0;
  v10 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1AF41F600](v6, v4);
    else
      v7 = *(id *)(v4 + 8 * v6 + 32);
    v14 = v7;
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1A9B949B8(v12, (uint64_t)v15);
      v9 = v16;
      v8 = v17;
      __swift_project_boxed_opaque_existential_1Tm(v15, v16);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v8 + 8))(*(_QWORD *)(v11 + v10), v9, v8);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
    }
    else
    {
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_1A9B94974((uint64_t)v12, (unint64_t *)&unk_1EEB43530, (uint64_t)&qword_1EEB43528, (uint64_t)&protocol descriptor for ScheduleOccurrenceEditModelConsuming);
    }
    ++v6;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
}

void sub_1A9B8E990(const char *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v9);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, a1, v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  sub_1A9B8E778();
}

void sub_1A9B8EB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  swift_getObjectType();
  v2 = sub_1A9CE6360();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6348();
  v7 = sub_1A9CE6354() & 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v7 != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime))
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime) = v7;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
    v9 = sub_1A9CE6978();
    v10 = sub_1A9CE867C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v16 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1A9CE8D48();
      v15 = sub_1A9B91D6C(v13, v14, &v16);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] 24 hour time changed", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v12, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);
    }

    sub_1A9B8E778();
  }
}

void sub_1A9B8ED8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate) & 1) == 0)
  {
    v2 = v0;
    v3 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
    swift_beginAccess();
    if (MEMORY[0x1AF4203E0](v3))
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);
      swift_unknownObjectRelease();
      *(_BYTE *)(v2 + v1) = 1;
    }
  }
}

void ScheduleOccurrenceViewController.sleepScheduleComponentsEditViewEditingDidChange(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v2 = v1;
  v29 = a1;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v28 - v5;
  v7 = sub_1A9CE64E0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  v13 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource];
  if (!v13)
    goto LABEL_22;
  v30 = 0xD00000000000003ELL;
  v31 = 0x80000001A9CF7D20;
  swift_bridgeObjectRetain();
  v14 = v13;
  sub_1A9CE6A98();
  swift_bridgeObjectRelease();

  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
  {
    sub_1A9B93BDC((uint64_t)v6, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v16 = objc_msgSend(v2, sel_tableView);
    if (!v16)
      goto LABEL_23;
    v17 = v16;
    v18 = (void *)sub_1A9CE64B0();
    v19 = objc_msgSend(v17, sel_cellForRowAtIndexPath_, v18);

    if (v19)
    {
      type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
      if (swift_dynamicCastClass())
        sub_1A9C49C58(v29);

    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  v20 = *(void **)&v2[v12];
  if (!v20)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v30 = 0xD00000000000003DLL;
  v31 = 0x80000001A9CF7D60;
  swift_bridgeObjectRetain();
  v21 = v20;
  sub_1A9CE6A98();
  swift_bridgeObjectRelease();

  if (v15(v6, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    v22 = objc_msgSend(v2, sel_tableView);
    if (v22)
    {
      v23 = v22;
      v24 = (void *)sub_1A9CE64B0();
      v25 = objc_msgSend(v23, sel_cellForRowAtIndexPath_, v24);

      if (v25)
      {
        type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
        if (swift_dynamicCastClass())
          sub_1A9C49C58(v29);

      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      goto LABEL_19;
    }
LABEL_23:
    __break(1u);
    return;
  }
  sub_1A9B93BDC((uint64_t)v6, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
LABEL_19:
  swift_arrayDestroy();
  v26 = objc_msgSend(v2, sel_navigationItem);
  v27 = objc_msgSend(v26, sel_rightBarButtonItem);

  if (v27)
  {
    objc_msgSend(v27, sel_setEnabled_, 0);

  }
}

uint64_t ScheduleOccurrenceViewController.sleepScheduleComponentsEditViewEditingDidEnd(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void (*v23)(char *, uint64_t);
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v25 - v9;
  v11 = (__int128 *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  v12 = *((_QWORD *)v11 + 4);
  v13 = *((_BYTE *)v11 + 40);
  v14 = *((_BYTE *)v11 + 41);
  v15 = *((_BYTE *)v11 + 42);
  v16 = v11[1];
  v25 = *v11;
  v26 = v16;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v17 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1A9C6BD5C(*(double *)(v17 + 144));
  v18 = *((_QWORD *)v11 + 4);
  v19 = *((_BYTE *)v11 + 40);
  v20 = *((_BYTE *)v11 + 41);
  v21 = *((_BYTE *)v11 + 42);
  v22 = v11[1];
  v25 = *v11;
  v26 = v22;
  v27 = v18;
  v28 = v19;
  v29 = v20;
  v30 = v21;
  sub_1A9C6BF60(*(double *)(v17 + 144));
  ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
  v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v7, v2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v10, v2);
}

uint64_t ScheduleOccurrenceViewController.scheduleOccurrenceComponentsAccessibilityTableViewCellCanUpdateValue(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double v12;
  char v13;
  uint64_t v15;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
  sub_1A9C48010((uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v8 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v9 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v6, 1, v8, v9, *(double *)&qword_1EEB45000);
  }
  else
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v11 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v12 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    v10 = ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v6, 1, v11, v12, *(double *)&qword_1EEB45000);
  }
  v13 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v13 & 1;
}

void ScheduleOccurrenceViewController.scheduleOccurrenceComponentsAccessibilityTableViewCellDidUpdateValue(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1ED2630B8);
  v10 = a1;
  v11 = sub_1A9CE6978();
  v12 = sub_1A9CE867C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v33 = v4;
    v14 = v13;
    v15 = swift_slowAlloc();
    v32 = v5;
    v16 = v15;
    v35 = v15;
    *(_DWORD *)v14 = 136446723;
    v17 = sub_1A9CE8D48();
    v34 = sub_1A9B91D6C(v17, v18, &v35);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    LOBYTE(v34) = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
    v31[1] = v2;
    v19 = sub_1A9CE82F8();
    v34 = sub_1A9B91D6C(v19, v20, &v35);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2081;
    sub_1A9C48010((uint64_t)v8);
    sub_1A9B92B9C(&qword_1EEB430A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
    v21 = sub_1A9CE8B74();
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
    v34 = sub_1A9B91D6C(v21, v23, &v35);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] AX %{public}s changed to %{private}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    v24 = v16;
    v5 = v32;
    MEMORY[0x1AF420344](v24, -1, -1);
    v25 = v14;
    v4 = v33;
    MEMORY[0x1AF420344](v25, -1, -1);

  }
  else
  {

  }
  v26 = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
  sub_1A9C48010((uint64_t)v8);
  if ((v26 & 1) != 0)
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v27 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v28 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v8, 0, v27, v28, *(double *)&qword_1EEB45000);
  }
  else
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v29 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v30 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v8, 0, v29, v30, *(double *)&qword_1EEB45000);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1A9B8E778();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.scheduleOccurrenceAlarmVolumeEditingDidEnd(_:)(UISlider *a1)
{
  uint64_t v2;
  UISlider *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = a1;
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE867C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v15 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = sub_1A9CE8D48();
    v14 = sub_1A9B91D6C(v8, v9, &v15);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    -[UISlider value](v3, sel_value, v14, v15);
    v10 = sub_1A9CE84CC();
    v13 = sub_1A9B91D6C(v10, v11, &v15);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Volume changed to %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);

  }
  else
  {

  }
  -[UISlider value](v3, sel_value, v13);
  ScheduleOccurrenceEditModel.alarmVolume.setter(v12);
  sub_1A9CA13F0();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.switchCellValueChanged(_:value:)(HKSwitchTableViewCell_optional *_, Swift::Bool value)
{
  if (_)
  {
    type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
    if (swift_dynamicCastClass())
    {
      ScheduleOccurrenceEditModel.alarmEnabled.setter(value);
      sub_1A9CA17A4();
    }
    else
    {
      type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
      if (swift_dynamicCastClass())
        ScheduleOccurrenceEditModel.allowsSnooze.setter(value);
    }
  }
}

uint64_t ScheduleOccurrenceViewController.tonePickerViewController(_:selectedToneWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9B93C20(a2, a3, "[%{public}s] Did select tone with identifier: %{public}s", (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.toneIdentifier.setter);
}

id ScheduleOccurrenceViewController.tonePickerViewController(_:willPresent:)(int a1, id a2)
{
  uint64_t v2;
  id result;

  if (a2)
  {
    objc_msgSend(a2, sel_setShowsEditButtonInNavigationBar_, 1);
    return objc_msgSend(a2, sel_setDelegate_, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id ScheduleOccurrenceViewController.tonePickerViewController(_:didDismiss:)(int a1, id a2)
{
  uint64_t v2;
  id result;

  if (a2)
    return objc_msgSend(a2, sel_setDelegate_, v2);
  __break(1u);
  return result;
}

uint64_t ScheduleOccurrenceViewController.vibrationPickerViewController(_:selectedVibrationWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9B93C20(a2, a3, "[%{public}s] Did select vibration with identifier: %{public}s", (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.vibrationIdentifier.setter);
}

uint64_t sub_1A9B900D0(void *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  if (a4)
  {
    v10 = sub_1A9CE82E0();
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = a3;
  v14 = a1;
  sub_1A9B93C20(v10, v12, a5, a6);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.saveButtonPressed()()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28[3];
  uint64_t v29;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model];
  if ((*(_BYTE *)(v3 + 48) & 1) != 0
    || (v4 = *(void **)(v3 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence),
        swift_beginAccess(),
        (objc_msgSend(v4, sel_isEqual_, *(_QWORD *)(v3 + 40)) & 1) == 0))
  {
    v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = ObjectType;
    v18 = *(_BYTE *)(v3 + 49);
    swift_retain_n();
    if ((v18 & 1) == 0
      && (ScheduleOccurrenceEditModel.hasUpcomingSingleDayOverride.getter() & 1) != 0
      && ScheduleOccurrenceEditModel.scheduleConflictsWithOverride.getter())
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v19 = sub_1A9CE6990();
      __swift_project_value_buffer(v19, (uint64_t)qword_1ED2630B8);
      v20 = sub_1A9CE6978();
      v21 = sub_1A9CE867C();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v28[0] = v23;
        *(_DWORD *)v22 = 136446210;
        v24 = sub_1A9CE8D48();
        v29 = sub_1A9B91D6C(v24, v25, v28);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v20, v21, "[%{public}s] schedule conflicts with override, presenting alert", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v23, -1, -1);
        MEMORY[0x1AF420344](v22, -1, -1);
      }

      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = sub_1A9B93E94;
      *(_QWORD *)(v26 + 24) = v17;
      sub_1A9B94A18(0, &qword_1EEB430A8);
      swift_retain();
      v27 = static UIAlertController.overlappingOverrideOccurrenceAlert(dismissHandler:)((uint64_t)sub_1A9B93EC0, v26);
      objc_msgSend(v1, sel_presentViewController_animated_completion_, v27, 1, 0);
      swift_release_n();
      swift_release();
      swift_release();

    }
    else
    {
      sub_1A9B90628(1, 0, v16);
      swift_release();
      swift_release_n();
    }
  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
    v6 = sub_1A9CE6978();
    v7 = sub_1A9CE867C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v28[0] = v9;
      *(_DWORD *)v8 = 136446210;
      v10 = sub_1A9CE8D48();
      v29 = sub_1A9B91D6C(v10, v11, v28);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] save button pressed but no changes were made", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v9, -1, -1);
      MEMORY[0x1AF420344](v8, -1, -1);
    }

    v12 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
    if ((v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] & 1) == 0)
    {
      v13 = &v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate];
      swift_beginAccess();
      if (MEMORY[0x1AF4203E0](v13))
      {
        v14 = *((_QWORD *)v13 + 1);
        if (*(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver])
        {
          swift_retain();
          sub_1A9CE6D80();
          swift_release();
        }
        v15 = swift_getObjectType();
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 24))(v1, v15, v14);
        swift_unknownObjectRelease();
        v1[v12] = 1;
      }
    }
  }
}

void sub_1A9B90628(char a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *oslog;
  uint64_t v23[3];
  uint64_t v24;

  if ((a1 & 1) != 0)
  {
    v4 = a3 + 16;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
    v6 = sub_1A9CE6978();
    v7 = sub_1A9CE867C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v23[0] = v9;
      *(_DWORD *)v8 = 136446466;
      v10 = sub_1A9CE8D48();
      v24 = sub_1A9B91D6C(v10, v11, v23);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      LOBYTE(v24) = a2 & 1;
      v12 = sub_1A9CE82F8();
      v24 = sub_1A9B91D6C(v12, v13, v23);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Saving (deleteOverride: %{public}s)", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v9, -1, -1);
      MEMORY[0x1AF420344](v8, -1, -1);
    }

    swift_beginAccess();
    v14 = MEMORY[0x1AF4203E0](v4);
    if (v14)
    {
      v15 = (void *)v14;
      sub_1A9B90988(a2 & 1);

    }
  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v16 = sub_1A9CE6990();
    __swift_project_value_buffer(v16, (uint64_t)qword_1ED2630B8);
    oslog = sub_1A9CE6978();
    v17 = sub_1A9CE867C();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v23[0] = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = sub_1A9CE8D48();
      v24 = sub_1A9B91D6C(v20, v21, v23);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, oslog, v17, "[%{public}s] Cancelling", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v19, -1, -1);
      MEMORY[0x1AF420344](v18, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1A9B90988(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  id v8;

  v2 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate) & 1) == 0)
  {
    v3 = v1;
    v4 = result;
    v5 = v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate;
    swift_beginAccess();
    result = MEMORY[0x1AF4203E0](v5);
    if (result)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (*(_QWORD *)(v3 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver))
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      ObjectType = swift_getObjectType();
      v8 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      (*(void (**)(uint64_t, id, _QWORD, uint64_t, uint64_t))(v6 + 8))(v3, v8, v4 & 1, ObjectType, v6);

      result = swift_unknownObjectRelease();
      *(_BYTE *)(v3 + v2) = 1;
    }
  }
  return result;
}

Swift::Void __swiftcall ScheduleOccurrenceViewController.ppt_toggleAlarmEnabled()()
{
  uint64_t v0;
  id v1;
  unsigned __int8 v2;
  id v3;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)+ OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v2 = objc_msgSend(v3, sel_isEnabled);

  ScheduleOccurrenceEditModel.alarmEnabled.setter(v2 ^ 1);
}

uint64_t sub_1A9B90B94(char a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = objc_msgSend(v1, sel_userInfo);
  v4 = MEMORY[0x1E0DEE9B8];
  if (v3)
  {
    v5 = v3;
    v6 = sub_1A9CE8214();

    sub_1A9CBFDA0(a1);
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = v8;
    sub_1A9CE897C();
    if (*(_QWORD *)(v6 + 16) && (v9 = sub_1A9BAD6E8((uint64_t)&v12), (v10 & 1) != 0))
    {
      sub_1A9B948EC(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v13);
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    sub_1A9B948B8((uint64_t)&v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  sub_1A9B94CA0(0, &qword_1EEB43518, v4 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
    return v12;
  else
    return 0;
}

uint64_t sub_1A9B90CC4(char a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;

  v3 = objc_msgSend(v1, sel_userInfo);
  v4 = MEMORY[0x1E0DEE9B8];
  if (v3)
  {
    v5 = v3;
    v6 = sub_1A9CE8214();

    sub_1A9CBFDA0(a1);
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = v8;
    sub_1A9CE897C();
    if (*(_QWORD *)(v6 + 16) && (v9 = sub_1A9BAD6E8((uint64_t)v12), (v10 & 1) != 0))
    {
      sub_1A9B948EC(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v13);
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    sub_1A9B948B8((uint64_t)v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  sub_1A9B94CA0(0, &qword_1EEB43518, v4 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
    return v12[0];
  else
    return 2;
}

void sub_1A9B90DF4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1A9B90DFC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1A9B90E10@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1A9B90E24@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A9B90E38(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1A9B90E68@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1A9B90E94@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1A9B90EB8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1A9B90ECC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1A9B90EE0(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1A9B90EF4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A9B90F08(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A9B90F1C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1A9B90F30(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A9B90F44()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1A9B90F54()
{
  return sub_1A9CE88F8();
}

_QWORD *sub_1A9B90F6C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1A9B90F80(uint64_t a1, uint64_t a2)
{
  return sub_1A9B91BE4(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1A9B90FA0()
{
  return sub_1A9CE8C58();
}

uint64_t sub_1A9B90FCC()
{
  return sub_1A9CE6654();
}

uint64_t sub_1A9B90FD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1AF41D290](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1A9B91024(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x1AF41D29C](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1A9B91078(double *a1@<X8>)
{
  *a1 = MEMORY[0x1AF41D2A8]();
}

uint64_t sub_1A9B9109C()
{
  sub_1A9B92B9C(&qword_1EEB43470, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB90C);
  return sub_1A9CE8BF8();
}

uint64_t sub_1A9B910DC()
{
  sub_1A9B92B9C(&qword_1EEB43470, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB90C);
  return sub_1A9CE8BEC();
}

uint64_t sub_1A9B91120()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  return sub_1A9CE6180();
}

id sub_1A9B91160()
{
  id *v0;

  return *v0;
}

uint64_t sub_1A9B91168@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1A9B9117C()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9B911C0()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

_QWORD *sub_1A9B91200@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A9B9120C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1A9CE82C8();
  *a2 = 0;
  return result;
}

uint64_t sub_1A9B91280(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1A9CE82D4();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1A9B912FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1A9CE82E0();
  v2 = sub_1A9CE82B0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A9B9133C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1A9B92AC4(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1A9B91378()
{
  return sub_1A9CE82E0();
}

uint64_t sub_1A9B91388()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  return sub_1A9CE61BC();
}

uint64_t sub_1A9B913C8()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  return sub_1A9CE6198();
}

uint64_t sub_1A9B91408(void *a1)
{
  id v2;

  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  v2 = a1;
  return sub_1A9CE618C();
}

uint64_t sub_1A9B9146C()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1A9CE882C();

  return v2;
}

uint64_t sub_1A9B914A0()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  return sub_1A9CE61B0();
}

uint64_t sub_1A9B914F0()
{
  sub_1A9CE8C4C();
  sub_1A9CE8250();
  return sub_1A9CE8C7C();
}

_QWORD *sub_1A9B9154C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1A9B9155C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1A9B91568()
{
  sub_1A9B92B9C(&qword_1EEB43620, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1A9CECA84);
  sub_1A9B92B9C(&qword_1EEB43628, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1A9CECA24);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B915EC()
{
  sub_1A9B92B9C(&qword_1EEB43640, (uint64_t (*)(uint64_t))type metadata accessor for HKSPSleepLaunchURLRoute, (uint64_t)&unk_1A9CEC7F4);
  sub_1A9B92B9C(&qword_1EEB43648, (uint64_t (*)(uint64_t))type metadata accessor for HKSPSleepLaunchURLRoute, (uint64_t)&unk_1A9CEC79C);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B91670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A9CE82E0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A9B91698()
{
  sub_1A9B92B9C(&qword_1EEB43650, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1A9CEC64C);
  sub_1A9B92B9C(&qword_1EEB43658, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1A9CEC5EC);
  return sub_1A9CE8B14();
}

double sub_1A9B9171C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1A9B91728()
{
  sub_1A9B92B9C(&qword_1EEB434D0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1A9CEBD60);
  sub_1A9B92B9C(&qword_1EEB434D8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1A9CEBD00);
  sub_1A9B94850();
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B917C8()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
  return sub_1A9CE61A4();
}

BOOL sub_1A9B91820(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A9B91834()
{
  sub_1A9B92B9C(&qword_1EEB434B0, (uint64_t (*)(uint64_t))type metadata accessor for HKSPProvenanceSource, (uint64_t)&unk_1A9CEC168);
  sub_1A9B92B9C(&qword_1EEB434B8, (uint64_t (*)(uint64_t))type metadata accessor for HKSPProvenanceSource, (uint64_t)&unk_1A9CEC110);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B918B8()
{
  sub_1A9B92B9C(&qword_1EEB43630, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1A9CEC934);
  sub_1A9B92B9C(&qword_1EEB43638, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1A9CEC8DC);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B9193C()
{
  sub_1A9B92B9C((unint64_t *)&qword_1EEB434C0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEC218);
  sub_1A9B92B9C(&qword_1EEB434C8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEBE64);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B919C0()
{
  sub_1A9B92B9C((unint64_t *)&unk_1EEB47F80, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEC2A0);
  sub_1A9B92B9C(&qword_1EEB43510, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEB9C4);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B91A44()
{
  sub_1A9B92B9C(&qword_1EEB434F8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEC2E4);
  sub_1A9B92B9C((unint64_t *)&unk_1EEB43500, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEBAD8);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B91AC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A9CE82B0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A9B91B0C()
{
  sub_1A9B92B9C(&qword_1EEB434E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEC25C);
  sub_1A9B92B9C(&qword_1EEB434F0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEBBEC);
  return sub_1A9CE8B14();
}

uint64_t sub_1A9B91B90(uint64_t a1, uint64_t a2)
{
  return sub_1A9B91BE4(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1A9B91B9C()
{
  return sub_1A9CE84C0();
}

uint64_t sub_1A9B91BA4()
{
  return sub_1A9CE8C70();
}

uint64_t sub_1A9B91BD4()
{
  return sub_1A9CE8C40();
}

uint64_t sub_1A9B91BE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1A9CE82E0();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A9B91C20()
{
  sub_1A9CE82E0();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9B91C60()
{
  uint64_t v0;

  sub_1A9CE82E0();
  sub_1A9CE8C4C();
  sub_1A9CE831C();
  v0 = sub_1A9CE8C7C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1A9B91CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1A9CE82E0();
  v2 = v1;
  if (v0 == sub_1A9CE82E0() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_1A9B91D58(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A9B91D6C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1A9B91E3C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1A9B948EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1A9B948EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1A9B91E3C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1A9CE8898();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1A9B91FF4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1A9CE89E8();
  if (!v8)
  {
    sub_1A9CE8A78();
    __break(1u);
LABEL_17:
    result = sub_1A9CE8AFC();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1A9B91FF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1A9B92088(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1A9B92274(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1A9B92274(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1A9B92088(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1A9B921FC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1A9CE89C4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1A9CE8A78();
      __break(1u);
LABEL_10:
      v2 = sub_1A9CE837C();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1A9CE8AFC();
    __break(1u);
LABEL_14:
    result = sub_1A9CE8A78();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1A9B921FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1A9B94CA0(0, &qword_1ED262A48, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1A9B92274(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9B94CA0(0, &qword_1ED262A48, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9B923D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ScheduleOccurrenceViewController()
{
  return objc_opt_self();
}

id sub_1A9B92438(uint64_t a1, int a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  double v25;
  uint64_t v27;

  v4 = v3;
  HIDWORD(v27) = a2;
  v7 = sub_1A9CE6360();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmConfigurationObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelEditObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_significantTimeChangeObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_localeChangeObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepDurationGoalObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_scheduleChangeObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_validScheduleRangeObserver] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_willResignActiveObserver] = 0;
  v12 = (uint64_t)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_sleepScheduleProvider];
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_hasFinishedNotifyingDelegate] = 0;
  v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_modelHasChanged] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource] = 0;
  v13 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_isIn24HourTime;
  v14 = v4;
  sub_1A9CE6348();
  v15 = sub_1A9CE6354();
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17 = a3;
  v16(v11, v7);
  v4[v13] = v15 & 1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model] = a1;
  v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_allowsDeletion] = BYTE4(v27);
  swift_beginAccess();
  swift_retain();
  sub_1A9B94A8C(a3, v12);
  swift_endAccess();
  type metadata accessor for AlarmPreviewPlayer();
  swift_allocObject();
  v18 = swift_retain();
  *(_QWORD *)&v14[OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_alarmPreviewPlayer] = AlarmPreviewPlayer.init(model:)(v18);

  if ((*(_BYTE *)(a1 + 49) & 1) == 0 && (*(_BYTE *)(a1 + 48) & 1) != 0)
    swift_beginAccess();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v19 = (id)qword_1ED264F90;
  v20 = sub_1A9CE6168();
  v22 = v21;
  swift_bridgeObjectRelease();

  v23 = SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(v20, v22, 0, 0, 0, 2, 1);
  v24 = objc_msgSend(v23, sel_headerView);
  LODWORD(v25) = 0;
  objc_msgSend(v24, sel_setTitleHyphenationFactor_, v25);

  sub_1A9B94974(v17, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding);
  return v23;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_1A9B927F4(void *a1, int a2, char a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id result;
  uint64_t (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  int v27;
  int v28;
  _BYTE v29[40];
  uint64_t v30[5];

  v27 = a5;
  v28 = a2;
  v13 = sub_1A9CE6444();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[3] = a8;
  v30[4] = a9;
  __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(void))(*(_QWORD *)(a8 - 8) + 32))();
  result = objc_msgSend(a1, sel_isSingleDayOverride);
  if ((_DWORD)result)
  {
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 40);
    v20 = a1;
    v21 = v19(a8, a9);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a8, a9);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a6, v13);
    type metadata accessor for ScheduleOccurrenceEditModel();
    swift_allocObject();
    v23 = sub_1A9BD5470(v20, a3 & 1, 1, 0, v21, v22, v27 & 1, (uint64_t)v17);

    swift_release();
    swift_release();
    sub_1A9B923D4((uint64_t)v30, (uint64_t)v29);
    v24 = objc_allocWithZone((Class)type metadata accessor for ScheduleOccurrenceViewController());
    v25 = sub_1A9B92438(v23, v28 & 1, (uint64_t)v29);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a6, v13);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A9B929B4()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED2625A0)
  {
    sub_1A9CE8778();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30];
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    sub_1A9B92B9C(&qword_1ED2632E0, v0, MEMORY[0x1E0CB1F20]);
    sub_1A9B92A68();
    v1 = sub_1A9CE6D50();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED2625A0);
  }
}

unint64_t sub_1A9B92A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED2625B0;
  if (!qword_1ED2625B0)
  {
    v1 = sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEF7F8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED2625B0);
  }
  return result;
}

uint64_t sub_1A9B92AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1A9B92AFC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9B92B20(void **a1)
{
  uint64_t v1;

  sub_1A9B8C210(a1, v1);
}

void sub_1A9B92B28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB42F90)
  {
    sub_1A9B94A18(255, &qword_1EEB42F98);
    v0 = sub_1A9CE6DBC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB42F90);
  }
}

uint64_t sub_1A9B92B9C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1AF420284](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A9B92BDC(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8C2BC(a1, v1);
}

void sub_1A9B92BE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB42FB0)
  {
    type metadata accessor for ScheduleOccurrenceEditModel();
    v0 = sub_1A9CE6DBC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB42FB0);
  }
}

uint64_t sub_1A9B92C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92CAC(0, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1A9B92CAC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1A9CE8880();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1A9B92D00(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8CDE0(a1, v1);
}

void sub_1A9B92D08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2628C0)
  {
    sub_1A9B94CA0(255, (unint64_t *)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2628C0);
  }
}

void sub_1A9B92D84(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1A9B92CAC(255, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94A18);
    v6 = sub_1A9CE6DEC();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1A9B92DF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB43010;
  if (!qword_1EEB43010)
  {
    sub_1A9B92D84(255, (unint64_t *)&unk_1EEB45BB0, (unint64_t *)&qword_1EEB43000, (uint64_t)&unk_1EEB45BC0, 0x1E0DA8580);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB43010);
  }
  return result;
}

void sub_1A9B92E60(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8CE38(a1, v1);
}

void sub_1A9B92E68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45BD0)
  {
    sub_1A9B92CAC(255, (unint64_t *)&qword_1EEB43000, (uint64_t)&unk_1EEB45BC0, 0x1E0DA8580, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94A18);
    v0 = sub_1A9CE6D68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45BD0);
  }
}

void sub_1A9B92EEC(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8CEF4(a1, v1, (SEL *)&selRef_handleSignificantTimeChange);
}

void sub_1A9B92F0C(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8CEF4(a1, v1, (SEL *)&selRef_handleLocaleDidChange);
}

void sub_1A9B92F2C(uint64_t a1)
{
  uint64_t v1;

  sub_1A9B8CF4C(a1, v1);
}

void sub_1A9B92F34(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_1A9B92F8C()
{
  unint64_t result;

  result = qword_1EEB44580;
  if (!qword_1EEB44580)
  {
    sub_1A9B94928(255, &qword_1EEB43060);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44580);
  }
  return result;
}

void sub_1A9B92FD4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9B8CF9C(a1, a2, v2);
}

unint64_t sub_1A9B92FDC()
{
  unint64_t result;

  result = qword_1EEB44590;
  if (!qword_1EEB44590)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44590);
  }
  return result;
}

void sub_1A9B93030(void **a1)
{
  uint64_t v1;

  sub_1A9B8C3C0(a1, v1);
}

unint64_t sub_1A9B93038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB43068;
  if (!qword_1EEB43068)
  {
    sub_1A9B92D84(255, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (uint64_t)&qword_1ED262900, 0x1E0DA8568);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB43068);
  }
  return result;
}

void sub_1A9B930A0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v1)
  {
    v2 = v1;
    sub_1A9CE6A74();

    if (v4)
    {
      if ((v3 != 0xD000000000000029 || v4 != 0x80000001A9CF7DE0)
        && (sub_1A9CE8BB0() & 1) == 0
        && (v3 != 0xD000000000000025 || v4 != 0x80000001A9CF7E70))
      {
        sub_1A9CE8BB0();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1A9B931AC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29[3];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  id v33;

  v2 = v1;
  type metadata accessor for ScheduleOccurrenceDayPickerTableViewCell();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model);
    v6 = *(char **)(v4 + OBJC_IVAR____TtC13SleepHealthUI40ScheduleOccurrenceDayPickerTableViewCell_picker);
    swift_beginAccess();
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(void **)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v9 = a1;
    sub_1A9CBE7E0(v7, (uint64_t)objc_msgSend(v8, sel_weekdays));
    *(_QWORD *)&v6[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleDayPicker_alertPresenter + 8] = &off_1E55D2F20;
    swift_unknownObjectWeakAssign();
    objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v2, sel_scheduleDayPickerDidChange_, 4096);

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  v10 = swift_dynamicCastClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v13 = a1;
    v14 = objc_msgSend(v12, sel_alarmConfiguration);
    objc_msgSend(v14, sel_mutableCopy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
    swift_dynamicCast();
    v15 = v29[0];
    v16 = objc_msgSend(v29[0], sel_isEnabled);
LABEL_7:
    v20 = v16;

    objc_msgSend(v11, sel_setOn_animated_, v20, 1);
    objc_msgSend(v11, sel_setDelegate_, v2);

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v11 = (void *)v17;
    v18 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v13 = a1;
    v19 = objc_msgSend(v18, sel_alarmConfiguration);
    objc_msgSend(v19, sel_mutableCopy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
    swift_dynamicCast();
    v15 = v29[0];
    v16 = objc_msgSend(v29[0], sel_allowsSnooze);
    goto LABEL_7;
  }
  type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model);
    v24 = a1;
    sub_1A9C495AC(v23);
    v25 = v22 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
    swift_beginAccess();
    *(_QWORD *)(v25 + 8) = &protocol witness table for ScheduleOccurrenceViewController;
    swift_unknownObjectWeakAssign();

  }
  else
  {
    v33 = a1;
    sub_1A9B94A18(0, &qword_1EEB43520);
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
    v26 = a1;
    if (swift_dynamicCast())
    {
      sub_1A9B949B8(&v32, (uint64_t)v29);
      v27 = v30;
      v28 = v31;
      __swift_project_boxed_opaque_existential_1Tm(v29, v30);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v28 + 8))(*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_model), v27, v28);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }

  }
}

id sub_1A9B93598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (v8)
  {
    sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
    *(_QWORD *)(v9 + 32) = a1;
    *(_QWORD *)(v9 + 40) = 0;
    v10 = v8;
    MEMORY[0x1AF41D0D4](v9);
    sub_1A9CE6A74();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v14)
    {
      if (v13 == 0xD00000000000002BLL && v14 == 0x80000001A9CF7CF0)
      {
        swift_bridgeObjectRelease();
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
      }
      v11 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
    }
  }
  return 0;
}

double sub_1A9B93718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  double result;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v8)
    return *MEMORY[0x1E0DC53D8];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  v10 = v8;
  MEMORY[0x1AF41D0D4](v9);
  sub_1A9CE6A74();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v14)
    return *MEMORY[0x1E0DC53D8];
  if (v13 == 0xD000000000000029 && v14 == 0x80000001A9CF7DE0)
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  v12 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  result = 0.0;
  if ((v12 & 1) == 0)
    return *MEMORY[0x1E0DC53D8];
  return result;
}

double sub_1A9B9388C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  double result;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v8)
    return *MEMORY[0x1E0DC53D8];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  v10 = v8;
  MEMORY[0x1AF41D0D4](v9);
  sub_1A9CE6A74();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v14)
    return *MEMORY[0x1E0DC53D8];
  if (v13 == 0xD00000000000002BLL && v14 == 0x80000001A9CF7CF0)
  {
    swift_bridgeObjectRelease();
    return 10.0;
  }
  v12 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  result = 10.0;
  if ((v12 & 1) == 0)
    return *MEMORY[0x1E0DC53D8];
  return result;
}

double sub_1A9B93A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  double result;
  char v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_1A9CE64E0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource;
  v10 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ScheduleOccurrenceViewController_dataSource);
  if (!v10)
    return 44.0;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = 0;
  v12 = v10;
  MEMORY[0x1AF41D0D4](v11);
  sub_1A9CE6A74();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (!v20)
    goto LABEL_7;
  if (v19 == 0xD000000000000029 && v20 == 0x80000001A9CF7DE0)
  {
    swift_bridgeObjectRelease();
    return 1.0;
  }
  v14 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  result = 1.0;
  if ((v14 & 1) == 0)
  {
LABEL_7:
    v15 = *(void **)(v2 + v9);
    if (v15)
    {
      v16 = v15;
      sub_1A9BB2D68(a1);
      v18 = v17;

      if (v18)
      {
        swift_bridgeObjectRelease();
        if (qword_1EEB42D40 != -1)
          swift_once();
        return *(double *)&qword_1EEB47F98;
      }
    }
    return 44.0;
  }
  return result;
}

uint64_t sub_1A9B93BDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1A9B92F34(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1A9B93C20(uint64_t a1, uint64_t a2, char *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *format;
  uint64_t v20;

  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
  swift_bridgeObjectRetain_n();
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    format = a3;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1A9CE8D48();
    sub_1A9B91D6C(v13, v14, &v20);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    if (a2)
    {
      swift_bridgeObjectRetain();
      v15 = sub_1A9CE82F8();
      v17 = v16;
    }
    else
    {
      v17 = 0xE300000000000000;
      v15 = 7104878;
    }
    sub_1A9B91D6C(v15, v17, &v20);
    sub_1A9CE888C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, format, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  return a4(a1, a2);
}

uint64_t sub_1A9B93E70()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9B93E94(char a1, char a2)
{
  uint64_t v2;

  sub_1A9B90628(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A9B93E9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9B93EC0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, a1);
}

uint64_t method lookup function for ScheduleOccurrenceViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.isAnimating.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:shouldHighlightRowAt:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:didSelectRowAt:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:willDisplay:forRowAt:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:viewForHeaderInSection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:viewForFooterInSection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:heightForHeaderInSection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:heightForFooterInSection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewController.tableView(_:estimatedHeightForHeaderInSection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewController(_:didModify:deleteOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewController(_:didFinishByDeleting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScheduleOccurrenceViewControllerDelegate.scheduleOccurrenceViewControllerDidCancel(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void type metadata accessor for HKSPProvenanceSource(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43328, (uint64_t)&unk_1E55D30C0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKTimePeriodStringFormatOptions(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43330, (uint64_t)&unk_1E55D30E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKSPSleepLockScreenState(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43338, (uint64_t)&unk_1E55D3110, MEMORY[0x1E0DEEC78]);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TimeOfDay(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimeOfDay(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43340, (uint64_t)&unk_1E55D3188, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for BSDayPeriod(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43348, (uint64_t)&unk_1E55D31B0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKSPDay(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43350, (uint64_t)&unk_1E55D31D0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKSPWeekdays(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43358, (uint64_t)&unk_1E55D31F0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKSPSleepWidgetState(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43360, (uint64_t)&unk_1E55D3218, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43368, (uint64_t)&unk_1E55D3238, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43370, (uint64_t)&unk_1E55D3258, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43378, (uint64_t)&unk_1E55D32D8, MEMORY[0x1E0DEEC78]);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43380, (uint64_t)&unk_1E55D3358, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43388, (uint64_t)&unk_1E55D3380, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43390, (uint64_t)&unk_1E55D33A8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43398, (uint64_t)&unk_1E55D33D0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB433A0, (uint64_t)&unk_1E55D33F8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKError(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB433A8, (uint64_t)&unk_1E55D3420, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1A9B94298()
{
  return sub_1A9B92B9C(&qword_1EEB433B0, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB824);
}

uint64_t sub_1A9B942C4()
{
  return sub_1A9B92B9C(&qword_1EEB433B8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB850);
}

uint64_t sub_1A9B942F0()
{
  return sub_1A9B92B9C(&qword_1EEB433C0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEB988);
}

uint64_t sub_1A9B9431C()
{
  return sub_1A9B92B9C(&qword_1EEB433C8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEB95C);
}

uint64_t sub_1A9B94348()
{
  return sub_1A9B92B9C(&qword_1EEB433D0, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEBA9C);
}

uint64_t sub_1A9B94374()
{
  return sub_1A9B92B9C(&qword_1EEB433D8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEBA70);
}

uint64_t sub_1A9B943A0()
{
  return sub_1A9B92B9C(&qword_1EEB433E0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEBBB0);
}

uint64_t sub_1A9B943CC()
{
  return sub_1A9B92B9C(&qword_1EEB433E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEBB84);
}

uint64_t sub_1A9B943F8()
{
  return sub_1A9B92B9C(&qword_1EEB433F0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1A9CEBCC4);
}

uint64_t sub_1A9B94424()
{
  return sub_1A9B92B9C(&qword_1EEB433F8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1A9CEBC98);
}

uint64_t sub_1A9B94450()
{
  return sub_1A9B92B9C(&qword_1EEB43400, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1A9CEBD34);
}

uint64_t sub_1A9B9447C()
{
  return sub_1A9B92B9C(&qword_1EEB43408, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEBE28);
}

uint64_t sub_1A9B944A8()
{
  return sub_1A9B92B9C(&qword_1EEB43410, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEBDFC);
}

uint64_t sub_1A9B944D4()
{
  return sub_1A9B92B9C((unint64_t *)&qword_1EEB43418, (uint64_t (*)(uint64_t))type metadata accessor for HKSPWeekdays, (uint64_t)&unk_1A9CEC1F0);
}

uint64_t sub_1A9B94500()
{
  return sub_1A9B92B9C(&qword_1EEB43420, (uint64_t (*)(uint64_t))type metadata accessor for HKSPWeekdays, (uint64_t)&unk_1A9CEBF10);
}

uint64_t sub_1A9B9452C()
{
  return sub_1A9B92B9C(&qword_1EEB43428, (uint64_t (*)(uint64_t))type metadata accessor for HKSPWeekdays, (uint64_t)&unk_1A9CEBF40);
}

uint64_t sub_1A9B94558()
{
  return sub_1A9B92B9C(&qword_1EEB43430, (uint64_t (*)(uint64_t))type metadata accessor for HKSPWeekdays, (uint64_t)&unk_1A9CEBF78);
}

uint64_t sub_1A9B94584()
{
  return sub_1A9B92B9C(&qword_1EEB43438, (uint64_t (*)(uint64_t))type metadata accessor for HKSPProvenanceSource, (uint64_t)&unk_1A9CEC0D8);
}

uint64_t sub_1A9B945B0()
{
  return sub_1A9B92B9C(&qword_1EEB43440, (uint64_t (*)(uint64_t))type metadata accessor for HKSPProvenanceSource, (uint64_t)&unk_1A9CEC0B0);
}

uint64_t sub_1A9B945DC()
{
  return sub_1A9B92B9C(&qword_1EEB43448, (uint64_t (*)(uint64_t))type metadata accessor for HKSPProvenanceSource, (uint64_t)&unk_1A9CEC140);
}

uint64_t sub_1A9B94608()
{
  return sub_1A9B92B9C(&qword_1EEB43450, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEBE98);
}

uint64_t sub_1A9B94634()
{
  return sub_1A9B92B9C(&qword_1EEB43458, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEBC20);
}

uint64_t sub_1A9B94660()
{
  return sub_1A9B92B9C(&qword_1EEB43460, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEB9F8);
}

uint64_t sub_1A9B9468C()
{
  return sub_1A9B92B9C(&qword_1EEB43468, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEBB0C);
}

uint64_t sub_1A9B946B8()
{
  return sub_1A9B92B9C(&qword_1EEB43470, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB90C);
}

uint64_t sub_1A9B946E4()
{
  return sub_1A9B92B9C(&qword_1EEB43478, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB8D8);
}

uint64_t sub_1A9B94710()
{
  return sub_1A9B92B9C(&qword_1EEB43480, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEB894);
}

uint64_t sub_1A9B9473C()
{
  return sub_1A9B92B9C(&qword_1EEB43488, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1A9CEC3D0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43588, (uint64_t)&unk_1E55D3540, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1A9B94784()
{
  return sub_1A9B92B9C(&qword_1EEB43490, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1A9CEC394);
}

unint64_t sub_1A9B947B4()
{
  unint64_t result;

  result = qword_1EEB43498;
  if (!qword_1EEB43498)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EEB43498);
  }
  return result;
}

uint64_t sub_1A9B947F8()
{
  return sub_1A9B92B9C(&qword_1EEB434A0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1A9CEC40C);
}

uint64_t sub_1A9B94824()
{
  return sub_1A9B92B9C((unint64_t *)&qword_1EEB434A8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
}

unint64_t sub_1A9B94850()
{
  unint64_t result;

  result = qword_1EEB434E0;
  if (!qword_1EEB434E0)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEF060], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEB434E0);
  }
  return result;
}

uint64_t sub_1A9B94894(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1A9B948B8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1A9B948EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1A9B94928(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A9B94974(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_1A9B92CAC(0, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1A9B949B8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1A9B94A18(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1A9B94A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92CAC(0, &qword_1EEB42FD0, (uint64_t)&unk_1EEB42FD8, (uint64_t)&protocol descriptor for SleepScheduleProviding, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1A9B94CA0(a1, (unint64_t *)&unk_1EEB43550, (uint64_t)&unk_1E55D3448, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1ED262988, (uint64_t)&unk_1E55D3468, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43560, (uint64_t)&unk_1E55D3488, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43568, (uint64_t)&unk_1E55D34B0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43570, (uint64_t)&unk_1E55D34D8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKSPSleepLaunchURLRoute(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43578, (uint64_t)&unk_1E55D34F8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CLKDeviceSizeClass(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43580, (uint64_t)&unk_1E55D3520, MEMORY[0x1E0DEEC78]);
}

uint64_t initializeBufferWithCopyOfBuffer for SleepStagesLegend.LegendRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1A9B94BE4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A9B94C04(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43590, (uint64_t)&unk_1E55D35B8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB43598, (uint64_t)&unk_1E55D35E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB435A0, (uint64_t)&unk_1E55D3610, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1A9B94CA0(a1, &qword_1EEB435A8, (uint64_t)&unk_1E55D3688, MEMORY[0x1E0DEEC78]);
}

void sub_1A9B94CA0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1A9B94CE4()
{
  return sub_1A9B92B9C(&qword_1EEB435B0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1A9CEC5B0);
}

uint64_t sub_1A9B94D10()
{
  return sub_1A9B92B9C(&qword_1EEB435B8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1A9CEC584);
}

uint64_t sub_1A9B94D3C()
{
  return sub_1A9B92B9C(&qword_1EEB435C0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1A9CEC620);
}

uint64_t sub_1A9B94D68()
{
  return sub_1A9B92B9C(&qword_1EEB435C8, (uint64_t (*)(uint64_t))type metadata accessor for HKSPSleepLaunchURLRoute, (uint64_t)&unk_1A9CEC764);
}

uint64_t sub_1A9B94D94()
{
  return sub_1A9B92B9C(&qword_1EEB435D0, (uint64_t (*)(uint64_t))type metadata accessor for HKSPSleepLaunchURLRoute, (uint64_t)&unk_1A9CEC73C);
}

uint64_t sub_1A9B94DC0()
{
  return sub_1A9B92B9C(&qword_1EEB435D8, (uint64_t (*)(uint64_t))type metadata accessor for HKSPSleepLaunchURLRoute, (uint64_t)&unk_1A9CEC7CC);
}

uint64_t sub_1A9B94DEC()
{
  return sub_1A9B92B9C(&qword_1EEB435E0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1A9CEC8A4);
}

uint64_t sub_1A9B94E18()
{
  return sub_1A9B92B9C(&qword_1EEB435E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1A9CEC87C);
}

uint64_t sub_1A9B94E44()
{
  return sub_1A9B92B9C(&qword_1EEB435F0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1A9CEC90C);
}

uint64_t sub_1A9B94E70()
{
  return sub_1A9B92B9C(&qword_1EEB435F8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1A9CEC9E8);
}

uint64_t sub_1A9B94E9C()
{
  return sub_1A9B92B9C(&qword_1EEB43600, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1A9CEC9BC);
}

uint64_t sub_1A9B94EC8()
{
  return sub_1A9B92B9C((unint64_t *)&unk_1EEB43608, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1A9CECA58);
}

uint64_t sub_1A9B94EF4()
{
  return sub_1A9B92B9C(&qword_1ED262A30, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_1A9CECB14);
}

uint64_t sub_1A9B94F20()
{
  return sub_1A9B92B9C(&qword_1EEB43618, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceSizeClass, (uint64_t)&unk_1A9CEC6DC);
}

uint64_t sub_1A9B94F7C()
{
  uint64_t v0;
  uint64_t result;

  sub_1A9CE7C68();
  v0 = sub_1A9CE7CC8();
  result = swift_release();
  qword_1ED2629F8 = v0;
  return result;
}

id sub_1A9B94FB8(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D1DE8, &qword_1EEB43840);
}

id sub_1A9B94FD0(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D1E38, &qword_1EEB43848);
}

id sub_1A9B94FE8(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D1E88, &qword_1EEB43850);
}

uint64_t SleepStagesDiagram.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static SleepStagesDiagram.Options.useCompactSize.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SleepStagesDiagram.Options.hideYAxisSupplementaryLabels.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static SleepStagesDiagram.Options.hideAllYAxisLabels.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static SleepStagesDiagram.Options.useGrayScale.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static SleepStagesDiagram.Options.useSmallXAxisLabels.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static SleepStagesDiagram.Options.hideXAxisTicks.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static SleepStagesDiagram.Options.showDateRange.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static SleepStagesDiagram.Options.shouldAnimate.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

uint64_t SleepStagesDiagram.init(sleepDayModel:sleepStagesModel:options:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *a2;
  type metadata accessor for SleepDayModel(0);
  sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
  *a3 = sub_1A9CE70F8();
  a3[1] = v6;
  v7 = type metadata accessor for SleepStagesDiagram(0);
  result = sub_1A9BA0D6C(a1, (uint64_t)a3 + *(int *)(v7 + 20), type metadata accessor for SleepStagesModel);
  *(uint64_t *)((char *)a3 + *(int *)(v7 + 24)) = v5;
  return result;
}

uint64_t type metadata accessor for SleepStagesDiagram(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1ED2625F0);
}

uint64_t SleepStagesDiagram.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  sub_1A9B951C4();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B9544C(v0);
  v5 = type metadata accessor for SleepStagesDiagram(0);
  sub_1A9B95F44((*(_QWORD *)(v0 + *(int *)(v5 + 24)) & 4) != 0);
  return sub_1A9B97190((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1A9B951C4);
}

void sub_1A9B951C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263240)
  {
    sub_1A9B95370(255, &qword_1ED263208, (uint64_t (*)(uint64_t))sub_1A9B95238, (uint64_t)&type metadata for GridView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v0 = sub_1A9CE7CF8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263240);
  }
}

void sub_1A9B95238()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263250)
  {
    sub_1A9B952B0(255);
    sub_1A9B92B9C(&qword_1ED263278, (uint64_t (*)(uint64_t))sub_1A9B952B0, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263250);
  }
}

void sub_1A9B952B0(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED263280, (uint64_t (*)(uint64_t))sub_1A9B952CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9B952CC(uint64_t a1)
{
  sub_1A9BAAA78(a1, &qword_1ED2630B0, (void (*)(uint64_t))type metadata accessor for Somnogram, (void (*)(uint64_t))sub_1A9B952FC);
}

uint64_t type metadata accessor for Somnogram(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, (uint64_t *)&unk_1ED263048);
}

void sub_1A9B952FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2631D0)
  {
    sub_1A9B95370(255, &qword_1ED2631C8, (uint64_t (*)(uint64_t))sub_1A9B953D0, MEMORY[0x1E0CDA208], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2631D0);
  }
}

void sub_1A9B95370(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_1A9B953D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2631C0)
  {
    sub_1A9BAAB64(255, &qword_1ED263190, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2631C0);
  }
}

uint64_t sub_1A9B9544C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v17;

  sub_1A9B95370(0, &qword_1ED2631E0, (uint64_t (*)(uint64_t))sub_1A9B95238, (uint64_t)&type metadata for GridView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (uint64_t *)((char *)&v17 - v4);
  sub_1A9B95238();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SleepStagesDiagram(0) + 20));
  swift_bridgeObjectRetain();
  v11 = sub_1A9C318EC(2u, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12 = sub_1A9C318EC(3u, v10);
  swift_bridgeObjectRelease();
  v13 = v11 + v12;
  swift_bridgeObjectRetain();
  v14 = sub_1A9C318EC(1u, v10);
  swift_bridgeObjectRelease();
  if (v13 + v14 <= 0.0)
  {
    *v5 = 4;
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1ED263248, (uint64_t (*)(uint64_t))sub_1A9B95238, MEMORY[0x1E0CDFCC0]);
    sub_1A9BA39D4();
    return sub_1A9CE74E8();
  }
  else
  {
    *(_QWORD *)v9 = sub_1A9CE7404();
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    sub_1A9BA759C(0, &qword_1ED263178, sub_1A9B952B0);
    sub_1A9B956B4(a1, (uint64_t)&v9[*(int *)(v15 + 44)]);
    sub_1A9BA6F90((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1A9B95238);
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1ED263248, (uint64_t (*)(uint64_t))sub_1A9B95238, MEMORY[0x1E0CDFCC0]);
    sub_1A9BA39D4();
    sub_1A9CE74E8();
    return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9B95238);
  }
}

uint64_t sub_1A9B956B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE v74[7];
  _BYTE v75[7];
  char v76;
  char v77;
  _BYTE v78[126];
  _BYTE v79[126];
  __int128 v80;
  char v81;
  _BYTE v82[7];
  uint64_t v83;
  char v84;
  _BYTE v85[7];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  _BYTE v91[7];
  char v92;
  _BYTE v93[7];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int16 v99;
  uint64_t v100[17];

  v72 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v69 - v6;
  sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v69 - v10;
  v12 = type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Somnogram(0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v69 - v22;
  v24 = type metadata accessor for SleepStagesDiagram(0);
  sub_1A9BA6F90(a1 + *(int *)(v24 + 20), (uint64_t)v15, type metadata accessor for SleepStagesModel);
  v25 = a1 + *(int *)(v24 + 24);
  v100[0] = *(_QWORD *)v25;
  KeyPath = swift_getKeyPath();
  sub_1A9B95CD0((uint64_t)v15, v100, KeyPath, 0, (uint64_t)v23);
  if ((*(_BYTE *)(v25 + 1) & 1) == 0)
    goto LABEL_4;
  swift_retain();
  sub_1A9C65C40((unint64_t)v11);
  swift_release();
  v27 = sub_1A9CE5F64();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v11, 1, v27) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v11, (uint64_t)&qword_1ED263400, (uint64_t)MEMORY[0x1E0CAE5D0], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
LABEL_4:
    sub_1A9BAB054(&v80);
    goto LABEL_14;
  }
  sub_1A9BAAEE4((uint64_t)v11, (uint64_t)&qword_1ED263400, (uint64_t)MEMORY[0x1E0CAE5D0], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  swift_retain();
  v28 = sub_1A9C66EA0();
  v30 = v29;
  swift_release();
  v100[0] = v28;
  v100[1] = v30;
  sub_1A9BA8EA4();
  sub_1A9CE88BC();
  v71 = v31;
  swift_bridgeObjectRelease();
  if (qword_1EEB42EF8 != -1)
    swift_once();
  v32 = sub_1A9CE7800();
  v33 = MEMORY[0x1E0CDD560];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 1, 1, v32);
  sub_1A9CE7830();
  sub_1A9BAAEE4((uint64_t)v7, (uint64_t)&qword_1ED263210, (uint64_t)v33, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v34 = sub_1A9CE7998();
  v36 = v35;
  v38 = v37;
  swift_release();
  v39 = v38 & 1;
  v40 = sub_1A9CE79A4();
  v42 = v41;
  LODWORD(v70) = v43;
  sub_1A9BAA670(v34, v36, v39);
  swift_bridgeObjectRelease();
  if (qword_1EEB42F00 != -1)
    swift_once();
  v44 = v70 & 1;
  v45 = sub_1A9CE7968();
  v69 = v46;
  v70 = v45;
  v48 = v47;
  v50 = v49;
  sub_1A9BAA670(v40, v42, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v51 = sub_1A9CE7740();
  if (qword_1EEB42B78 != -1)
    swift_once();
  sub_1A9CE6F24();
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v59 = v58;
  v60 = sub_1A9CE774C();
  if (qword_1EEB42B80 != -1)
    swift_once();
  sub_1A9CE6F24();
  v77 = v48 & 1;
  v76 = 0;
  v73 = 0;
  *(_DWORD *)v82 = *(_DWORD *)v79;
  *(_DWORD *)&v82[3] = *(_DWORD *)&v79[3];
  *(_DWORD *)v85 = *(_DWORD *)v78;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v78[3];
  *(_DWORD *)&v91[3] = *(_DWORD *)&v75[3];
  *(_DWORD *)v91 = *(_DWORD *)v75;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v74[3];
  *(_DWORD *)v93 = *(_DWORD *)v74;
  *(_QWORD *)&v80 = v70;
  *((_QWORD *)&v80 + 1) = v69;
  v81 = v48 & 1;
  v83 = v50;
  v84 = v51;
  v86 = v53;
  v87 = v55;
  v88 = v57;
  v89 = v59;
  v90 = 0;
  v92 = v60;
  v94 = v61;
  v95 = v62;
  v96 = v63;
  v97 = v64;
  v98 = 0;
  v99 = 256;
  nullsub_1(&v80);
LABEL_14:
  sub_1A9BA0D6C((uint64_t)&v80, (uint64_t)v100, (uint64_t (*)(_QWORD))sub_1A9B952FC);
  sub_1A9BA6F90((uint64_t)v23, (uint64_t)v20, type metadata accessor for Somnogram);
  sub_1A9BA0D6C((uint64_t)v100, (uint64_t)v78, (uint64_t (*)(_QWORD))sub_1A9B952FC);
  v65 = v72;
  sub_1A9BA6F90((uint64_t)v20, v72, type metadata accessor for Somnogram);
  sub_1A9B952CC(0);
  v67 = v65 + *(int *)(v66 + 48);
  sub_1A9BA0D6C((uint64_t)v78, (uint64_t)v79, (uint64_t (*)(_QWORD))sub_1A9B952FC);
  sub_1A9BA0D6C((uint64_t)v79, v67, (uint64_t (*)(_QWORD))sub_1A9B952FC);
  sub_1A9BAB0A0((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A9BAB070);
  sub_1A9B97190((uint64_t)v23, type metadata accessor for Somnogram);
  sub_1A9BA0D6C((uint64_t)v78, (uint64_t)&v80, (uint64_t (*)(_QWORD))sub_1A9B952FC);
  sub_1A9BAB0A0((uint64_t)&v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_1A9BAB10C);
  return sub_1A9B97190((uint64_t)v20, type metadata accessor for Somnogram);
}

uint64_t sub_1A9B95CD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v32 = a4;
  v31 = a3;
  v8 = sub_1A9CE6360();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  sub_1A9BA0D6C(a1, a5, type metadata accessor for SleepStagesModel);
  v14 = (int *)type metadata accessor for Somnogram(0);
  *(_QWORD *)(a5 + v14[5]) = v13;
  sub_1A9CE6348();
  v15 = HKSPIsRemoveSpacesForTimeFormatEnabled();
  v16 = (void *)objc_opt_self();
  v17 = (void *)sub_1A9CE82B0();
  v18 = (void *)sub_1A9CE6330();
  v19 = objc_msgSend(v16, sel_dateFormatFromTemplate_options_locale_, v17, 0, v18);

  if (v19)
  {
    v20 = sub_1A9CE82E0();
    v22 = v21;

  }
  else
  {
    v22 = 0xE500000000000000;
    v20 = 0x616D6D3A68;
  }
  v23 = v14[6];
  v24 = sub_1A9CAE664(v20, v22, (uint64_t)v12, v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  *(_QWORD *)(a5 + v23) = v24;
  v25 = (uint64_t *)(a5 + v14[7]);
  *v25 = swift_getKeyPath();
  v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
  sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  v27 = (uint64_t *)(a5 + v14[8]);
  *v27 = swift_getKeyPath();
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], v26);
  swift_storeEnumTagMultiPayload();
  v28 = (uint64_t *)(a5 + v14[9]);
  *v28 = swift_getKeyPath();
  sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], v26);
  result = swift_storeEnumTagMultiPayload();
  v30 = a5 + v14[10];
  *(_QWORD *)v30 = v31;
  *(_BYTE *)(v30 + 8) = v32 & 1;
  return result;
}

uint64_t sub_1A9B95F44(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[7];

  v2 = v1;
  sub_1A9B95370(0, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v5 = v4;
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v28 - v11;
  sub_1A9BAAF20(0, &qword_1ED2631D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v28 - v15;
  sub_1A9B951C4();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)v28 - v20;
  if ((a1 & 1) != 0)
  {
    sub_1A9BA6F90(v2, (uint64_t)v28 - v20, (uint64_t (*)(_QWORD))sub_1A9B951C4);
    sub_1A9BA6F90((uint64_t)v21, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1A9B951C4);
    swift_storeEnumTagMultiPayload();
    sub_1A9BA409C(&qword_1ED263238, (uint64_t (*)(uint64_t))sub_1A9B951C4, (uint64_t (*)(void))sub_1A9BA3934, MEMORY[0x1E0CDF690]);
    sub_1A9BA3A18();
    sub_1A9CE74E8();
    return sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9B951C4);
  }
  else
  {
    sub_1A9CE7FEC();
    sub_1A9CE71C4();
    sub_1A9BA6F90(v2, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9B951C4);
    v23 = &v9[*(int *)(v5 + 36)];
    v24 = v28[5];
    *((_OWORD *)v23 + 4) = v28[4];
    *((_OWORD *)v23 + 5) = v24;
    *((_OWORD *)v23 + 6) = v28[6];
    v25 = v28[1];
    *(_OWORD *)v23 = v28[0];
    *((_OWORD *)v23 + 1) = v25;
    v26 = v28[3];
    *((_OWORD *)v23 + 2) = v28[2];
    *((_OWORD *)v23 + 3) = v26;
    v27 = MEMORY[0x1E0CDA240];
    sub_1A9BAA704((uint64_t)v9, (uint64_t)v12, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, MEMORY[0x1E0CDA240]);
    sub_1A9BAAFA8((uint64_t)v12, (uint64_t)v16);
    swift_storeEnumTagMultiPayload();
    sub_1A9BA409C(&qword_1ED263238, (uint64_t (*)(uint64_t))sub_1A9B951C4, (uint64_t (*)(void))sub_1A9BA3934, MEMORY[0x1E0CDF690]);
    sub_1A9BA3A18();
    sub_1A9CE74E8();
    return sub_1A9BAB00C((uint64_t)v12, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, v27);
  }
}

uint64_t sub_1A9B96244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1A9B951C4();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B9544C(v1);
  sub_1A9B95F44((*(_QWORD *)(v1 + *(int *)(a1 + 24)) & 4) != 0);
  return sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9B951C4);
}

uint64_t OneDaySleepStagesDiagram.init(sleepDayModel:sleepStagesModel:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SleepDayModel(0);
  sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
  *a2 = sub_1A9CE70F8();
  a2[1] = v4;
  v5 = type metadata accessor for OneDaySleepStagesDiagram(0);
  return sub_1A9BA0D6C(a1, (uint64_t)a2 + *(int *)(v5 + 20), type metadata accessor for SleepStagesModel);
}

uint64_t type metadata accessor for OneDaySleepStagesDiagram(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB43960);
}

BOOL sub_1A9B96380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL8 v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for OneDaySleepStagesDiagram(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 32) + 16);
  sub_1A9BA6F90(v1, (uint64_t)v5, v7);
  if (v6)
  {
    v8 = *(_QWORD *)&v5[*(int *)(v2 + 20)];
    swift_bridgeObjectRetain();
    v9 = sub_1A9C318EC(2u, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10 = sub_1A9C318EC(3u, v8);
    swift_bridgeObjectRelease();
    v11 = v9 + v10;
    swift_bridgeObjectRetain();
    v12 = sub_1A9C318EC(1u, v8);
    swift_bridgeObjectRelease();
    v13 = v11 + v12 > 0.0;
  }
  else
  {
    v13 = 0;
  }
  sub_1A9B97190((uint64_t)v5, type metadata accessor for OneDaySleepStagesDiagram);
  return v13;
}

uint64_t OneDaySleepStagesDiagram.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL *v9;
  uint64_t v11;

  v1 = sub_1A9CE7620();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9B965C0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (BOOL *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = sub_1A9B96380();
  sub_1A9B96918(v0, (uint64_t)&v9[*(int *)(v6 + 52)]);
  sub_1A9CE7614();
  sub_1A9B92B9C(&qword_1EEB438C8, (uint64_t (*)(uint64_t))sub_1A9B965C0, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
  sub_1A9CE7B54();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9B965C0);
}

uint64_t sub_1A9B965C0()
{
  uint64_t result;

  result = qword_1EEB43860;
  if (!qword_1EEB43860)
  {
    sub_1A9B96654(255);
    sub_1A9B92B9C(&qword_1EEB438C0, (uint64_t (*)(uint64_t))sub_1A9B96654, MEMORY[0x1E0CE0680]);
    type metadata accessor for OptionalContentGroup();
  }
  return result;
}

void sub_1A9B96654(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43868, (uint64_t (*)(uint64_t))sub_1A9B96670, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9B96670()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EEB43870)
  {
    sub_1A9B966FC(255);
    sub_1A9CE7F38();
    sub_1A9B9688C(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EEB43870);
  }
}

void sub_1A9B966FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1EEB43878)
  {
    sub_1A9B96774();
    v3 = v2;
    v4 = sub_1A9B92B9C(&qword_1EEB438A8, (uint64_t (*)(uint64_t))sub_1A9B96774, MEMORY[0x1E0CDFCC0]);
    v6 = type metadata accessor for DiagramHeader(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EEB43878);
  }
}

void sub_1A9B96774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43880)
  {
    sub_1A9B967EC(255);
    sub_1A9B92B9C(&qword_1EEB438A0, (uint64_t (*)(uint64_t))sub_1A9B967EC, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43880);
  }
}

void sub_1A9B967EC(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43888, (uint64_t (*)(uint64_t))sub_1A9B96808, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9B96808()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB43890)
  {
    sub_1A9BAAB64(255, (unint64_t *)&qword_1EEB43898, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB43890);
  }
}

void sub_1A9B9688C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEB438B0)
  {
    v2 = type metadata accessor for SleepStagesChart(255);
    v3 = sub_1A9B92B9C(&qword_1EEB438B8, type metadata accessor for SleepStagesChart, (uint64_t)&protocol conformance descriptor for SleepStagesChart);
    v5 = type metadata accessor for DiagramHeader(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB438B0);
  }
}

uint64_t type metadata accessor for SleepStagesChart(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB439F0);
}

uint64_t sub_1A9B96918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t KeyPath;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t (*v67)(void);
  int *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  int *v84;
  int *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  void (*v90)(char *, uint64_t);
  uint64_t v92;
  int *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  _OWORD v116[9];
  _OWORD v117[2];
  _OWORD v118[9];
  _OWORD v119[2];
  char v120;
  char v121;
  char v122;
  char v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[3];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[4];

  v4 = type metadata accessor for SleepStagesModel(0);
  v92 = *(_QWORD *)(v4 - 8);
  v93 = (int *)v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v94 = (uint64_t *)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9B92F34(0, &qword_1EEB438D0, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v99 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v98 = (uint64_t)&v92 - v13;
  sub_1A9B9688C(0);
  v15 = v14;
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v97 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v92 - v21;
  MEMORY[0x1E0C80A78](v20, v23);
  v102 = (uint64_t)&v92 - v24;
  v96 = sub_1A9CE7F38();
  v101 = *(_QWORD *)(v96 - 8);
  v26 = MEMORY[0x1E0C80A78](v96, v25);
  v95 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v92 - v29;
  if (qword_1EEB42D50 != -1)
    swift_once();
  v31 = (void *)qword_1EEB48198;
  KeyPath = swift_getKeyPath();
  v33 = v31;
  v34 = sub_1A9CE6168();
  v36 = v35;

  swift_bridgeObjectRelease();
  v37 = sub_1A9CE7404();
  sub_1A9B971CC(a1, &v124);
  v38 = *((_QWORD *)&v125 + 1);
  v39 = v126[0];
  v40 = BYTE1(v126[0]);
  v41 = *(_QWORD *)&v126[2];
  v42 = BYTE8(v126[2]);
  v43 = *((_QWORD *)&v128 + 1);
  v44 = v129;
  v45 = v124;
  v46 = *(_OWORD *)((char *)v126 + 8);
  v47 = v127;
  v123 = 1;
  v122 = v125;
  v121 = BYTE8(v126[1]);
  v120 = v128;
  *(_QWORD *)&v124 = KeyPath;
  BYTE8(v124) = 0;
  *(_QWORD *)&v125 = v34;
  *((_QWORD *)&v125 + 1) = v36;
  v126[0] = (unint64_t)v37;
  LOBYTE(v126[1]) = 1;
  *(_OWORD *)((char *)&v126[1] + 8) = v45;
  BYTE8(v126[2]) = v122;
  *(_QWORD *)&v127 = v38;
  BYTE8(v127) = v39;
  BYTE9(v127) = v40;
  v128 = v46;
  LOBYTE(v129) = v121;
  *((_QWORD *)&v129 + 1) = v41;
  LOBYTE(v130[0]) = v42;
  BYTE1(v130[0]) = BYTE9(v126[2]);
  *(_OWORD *)((char *)v130 + 8) = v47;
  BYTE8(v130[1]) = v120;
  *(_QWORD *)&v130[2] = v43;
  BYTE8(v130[2]) = v44;
  BYTE9(v130[2]) = BYTE1(v129);
  v100 = v30;
  sub_1A9CE7F2C();
  v48 = (void *)qword_1EEB48198;
  *(_QWORD *)v22 = swift_getKeyPath();
  v22[8] = 0;
  v49 = v48;
  v50 = sub_1A9CE6168();
  v52 = v51;

  swift_bridgeObjectRelease();
  *((_QWORD *)v22 + 2) = v50;
  *((_QWORD *)v22 + 3) = v52;
  v53 = (uint64_t *)&v22[*(int *)(v15 + 40)];
  v54 = type metadata accessor for OneDaySleepStagesDiagram(0);
  v55 = v98;
  sub_1A9BA6F90(a1 + *(int *)(v54 + 20), v98, type metadata accessor for SleepStagesModel);
  v57 = v92;
  v56 = v93;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v92 + 56))(v55, 0, 1, v93);
  type metadata accessor for SleepDayModel(0);
  sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
  swift_retain_n();
  *v53 = sub_1A9CE70F8();
  v53[1] = v58;
  v59 = v99;
  sub_1A9BAA620(v55, v99, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v57 + 48))(v59, 1, v56);
  v61 = v100;
  if (v60 == 1)
  {
    v62 = v94;
    *v94 = MEMORY[0x1E0DEE9D8];
    v63 = (char *)v62 + v56[5];
    v64 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
    v65 = MEMORY[0x1E0DEE9D8];
    sub_1A9BA05E0(MEMORY[0x1E0DEE9D8], type metadata accessor for SleepStageSegment, (char *)sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08, (unint64_t)v62 + v56[6]);
    v66 = sub_1A9BA0B4C(v65, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08);
    swift_release();
    *(double *)((char *)v62 + v56[7]) = v66;
    v67 = MEMORY[0x1E0DEB940];
    sub_1A9BAAEE4(v98, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9BAAEE4(v99, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)v67, (uint64_t (*)(_QWORD))sub_1A9B92F34);
  }
  else
  {
    swift_release();
    sub_1A9BAAEE4(v55, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    v62 = v94;
    sub_1A9BA0D6C(v59, (uint64_t)v94, type metadata accessor for SleepStagesModel);
  }
  v68 = (int *)type metadata accessor for SleepStagesChart(0);
  sub_1A9BA0D6C((uint64_t)v62, (uint64_t)v53 + v68[5], type metadata accessor for SleepStagesModel);
  *((_BYTE *)v53 + v68[6]) = 0;
  *(uint64_t *)((char *)v53 + v68[7]) = 0;
  v69 = v102;
  sub_1A9BA0D6C((uint64_t)v22, v102, (uint64_t (*)(_QWORD))sub_1A9B9688C);
  v113 = v129;
  v114 = v130[0];
  v115[0] = v130[1];
  *(_OWORD *)((char *)v115 + 10) = *(_OWORD *)((char *)&v130[1] + 10);
  v110 = v126[2];
  v111 = v127;
  v112 = v128;
  v106 = v124;
  v107 = v125;
  v108 = v126[0];
  v109 = v126[1];
  v105 = 0;
  v70 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  v72 = v95;
  v71 = v96;
  v70(v95, v61, v96);
  v104 = 0;
  v73 = v97;
  sub_1A9BA6F90(v69, v97, (uint64_t (*)(_QWORD))sub_1A9B9688C);
  v116[7] = v113;
  v116[8] = v114;
  v74 = v113;
  v117[0] = v115[0];
  *(_OWORD *)((char *)v117 + 10) = *(_OWORD *)((char *)v115 + 10);
  v75 = v110;
  v76 = v111;
  v116[4] = v110;
  v116[5] = v111;
  v77 = v112;
  v116[6] = v112;
  v78 = v106;
  v79 = v107;
  v116[0] = v106;
  v116[1] = v107;
  v81 = v108;
  v80 = v109;
  v116[2] = v108;
  v116[3] = v109;
  v82 = v115[0];
  *(_OWORD *)(a2 + 128) = v114;
  *(_OWORD *)(a2 + 144) = v82;
  *(_OWORD *)(a2 + 154) = *(_OWORD *)((char *)v115 + 10);
  *(_OWORD *)(a2 + 64) = v75;
  *(_OWORD *)(a2 + 80) = v76;
  *(_OWORD *)(a2 + 96) = v77;
  *(_OWORD *)(a2 + 112) = v74;
  *(_OWORD *)a2 = v78;
  *(_OWORD *)(a2 + 16) = v79;
  v103 = 0;
  *(_OWORD *)(a2 + 32) = v81;
  *(_OWORD *)(a2 + 48) = v80;
  v83 = v105;
  *(_QWORD *)(a2 + 176) = 0x4018000000000000;
  *(_BYTE *)(a2 + 184) = v83;
  sub_1A9B96670();
  v85 = v84;
  v70((char *)(a2 + v84[16]), v72, v71);
  v86 = a2 + v85[20];
  v87 = v104;
  *(_QWORD *)v86 = 0x4018000000000000;
  *(_BYTE *)(v86 + 8) = v87;
  sub_1A9BA6F90(v73, a2 + v85[24], (uint64_t (*)(_QWORD))sub_1A9B9688C);
  v88 = a2 + v85[28];
  v89 = v103;
  *(_QWORD *)v88 = 0x4010000000000000;
  *(_BYTE *)(v88 + 8) = v89;
  sub_1A9BAAD1C((uint64_t)v116);
  sub_1A9BAAD1C((uint64_t)&v124);
  sub_1A9B97190(v102, (uint64_t (*)(_QWORD))sub_1A9B9688C);
  v90 = *(void (**)(char *, uint64_t))(v101 + 8);
  v90(v100, v71);
  sub_1A9BAAE00((uint64_t)&v124);
  sub_1A9B97190(v73, (uint64_t (*)(_QWORD))sub_1A9B9688C);
  v90(v72, v71);
  v118[7] = v113;
  v118[8] = v114;
  v119[0] = v115[0];
  *(_OWORD *)((char *)v119 + 10) = *(_OWORD *)((char *)v115 + 10);
  v118[4] = v110;
  v118[5] = v111;
  v118[6] = v112;
  v118[0] = v106;
  v118[1] = v107;
  v118[2] = v108;
  v118[3] = v109;
  return sub_1A9BAAE00((uint64_t)v118);
}

uint64_t sub_1A9B97190(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1A9B971CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  double v22;
  double v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v75[2];
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;

  v83 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v82 = (char *)v75 - v6;
  v7 = sub_1A9CE78CC();
  v81 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v3);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v75 - v13;
  v15 = sub_1A9CE6150();
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = a1 + *(int *)(type metadata accessor for OneDaySleepStagesDiagram(0) + 20);
  v18 = type metadata accessor for SleepStagesModel(0);
  sub_1A9BAA620(v17 + *(int *)(v18 + 20), (uint64_t)v14, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)v3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
  v19 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v14, 1, v19) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v14, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v20 = (void *)sub_1A9CE80C4();
    sub_1A9B97190((uint64_t)v14, type metadata accessor for SleepMetricsWrapper);
    v21 = objc_msgSend(v20, sel_averageSleepDuration);

    if (v21)
    {
      objc_msgSend(v21, sel__value);
      v23 = v22;

      goto LABEL_6;
    }
  }
  v23 = 0.0;
LABEL_6:
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v24, sel_setAllowedUnits_, 96);
  objc_msgSend(v24, sel_setUnitsStyle_, 5);
  objc_msgSend(v24, sel_setFormattingContext_, 2);
  v25 = objc_msgSend(v24, sel_stringFromTimeInterval_, v23);

  if (v25)
  {
    sub_1A9CE82E0();

  }
  sub_1A9CE8358();
  swift_bridgeObjectRelease();
  v26 = sub_1A9CE79BC();
  v28 = v27;
  v30 = v29;
  if (qword_1EEB42EB8 != -1)
    swift_once();
  v84 = sub_1A9CE7998();
  v79 = v31;
  v80 = v32;
  v78 = v33 & 1;
  sub_1A9BAA670(v26, v28, v30 & 1);
  swift_bridgeObjectRelease();
  swift_retain();
  v34 = sub_1A9C66D04();
  v36 = v35;
  swift_release();
  v86 = (uint64_t)v34;
  v87 = v36;
  v77 = sub_1A9BA8EA4();
  v37 = sub_1A9CE79C8();
  v39 = v38;
  v75[0] = v40;
  v42 = v41 & 1;
  v43 = v81;
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v10, *MEMORY[0x1E0CDD7C8], v7);
  v44 = *MEMORY[0x1E0CDD550];
  v45 = sub_1A9CE7800();
  v75[1] = a1;
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 104))(v82, v44, v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v45);
  sub_1A9CE7848();
  sub_1A9BAAEE4(v47, (uint64_t)&qword_1ED263210, (uint64_t)MEMORY[0x1E0CDD560], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v7);
  v81 = sub_1A9CE7998();
  v82 = v48;
  v76 = v49;
  LOBYTE(v46) = v50;
  swift_release();
  LOBYTE(v44) = v46 & 1;
  sub_1A9BAA670(v37, v39, v42);
  swift_bridgeObjectRelease();
  swift_retain();
  v51 = sub_1A9C66EA0();
  v53 = v52;
  swift_release();
  v86 = v51;
  v87 = v53;
  v54 = sub_1A9CE79C8();
  v56 = v55;
  v58 = v57 & 1;
  sub_1A9CE78C0();
  v59 = sub_1A9CE7998();
  v61 = v60;
  v63 = v62;
  v65 = v64;
  swift_release();
  LOBYTE(v39) = v63 & 1;
  sub_1A9BAA670(v54, v56, v58);
  swift_bridgeObjectRelease();
  v66 = v78;
  LOBYTE(v86) = v78;
  v85 = v44;
  v68 = v83;
  v67 = v84;
  v70 = v79;
  v69 = v80;
  *v83 = v84;
  v68[1] = v70;
  *((_BYTE *)v68 + 16) = v66;
  v68[3] = v69;
  *((_WORD *)v68 + 16) = 256;
  v72 = v81;
  v71 = v82;
  v73 = v76;
  v68[5] = v81;
  v68[6] = v73;
  *((_BYTE *)v68 + 56) = v44;
  v68[8] = v71;
  *((_WORD *)v68 + 36) = 256;
  v68[10] = v59;
  v68[11] = v61;
  *((_BYTE *)v68 + 96) = v39;
  v68[13] = v65;
  *((_WORD *)v68 + 56) = 256;
  sub_1A9BAA680(v67, v70, v66);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v72, v73, v44);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v59, v61, v39);
  swift_bridgeObjectRetain();
  sub_1A9BAA670(v59, v61, v39);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v72, v73, v85);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v84, v70, v86);
  return swift_bridgeObjectRelease();
}

uint64_t SleepStagesChart.init(sleepDayModel:sleepStagesModel:isLoading:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t (*v23)(void);
  char v24;
  uint64_t v25;
  int *v26;
  uint64_t result;
  uint64_t v28;
  int v29;

  v29 = a3;
  sub_1A9B92F34(0, &qword_1EEB438D0, type metadata accessor for SleepStagesModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - v11;
  v13 = (int *)type metadata accessor for SleepStagesModel(0);
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = *a4;
  if (!a1)
  {
    type metadata accessor for SleepDayModel(0);
    swift_allocObject();
    SleepDayModel.init(segmentModels:sleepMetrics:)(MEMORY[0x1E0DEE9D8], 0);
  }
  type metadata accessor for SleepDayModel(0);
  sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
  swift_retain();
  *a5 = sub_1A9CE70F8();
  a5[1] = v18;
  sub_1A9BAA620(a2, (uint64_t)v12, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13) == 1)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    *v17 = MEMORY[0x1E0DEE9D8];
    v20 = (char *)v17 + v13[5];
    v21 = type metadata accessor for SleepMetricsWrapper(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    sub_1A9BA05E0(v19, type metadata accessor for SleepStageSegment, (char *)sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08, (unint64_t)v17 + v13[6]);
    v22 = sub_1A9BA0B4C(v19, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08);
    swift_release();
    *(double *)((char *)v17 + v13[7]) = v22;
    v23 = MEMORY[0x1E0DEB940];
    sub_1A9BAAEE4(a2, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9BAAEE4((uint64_t)v12, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1A9B92F34);
  }
  else
  {
    swift_release();
    sub_1A9BAAEE4(a2, (uint64_t)&qword_1EEB438D0, (uint64_t)type metadata accessor for SleepStagesModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9BA0D6C((uint64_t)v12, (uint64_t)v17, type metadata accessor for SleepStagesModel);
  }
  v24 = v29;
  v25 = v28;
  v26 = (int *)type metadata accessor for SleepStagesChart(0);
  result = sub_1A9BA0D6C((uint64_t)v17, (uint64_t)a5 + v26[5], type metadata accessor for SleepStagesModel);
  *((_BYTE *)a5 + v26[6]) = v24 & 1;
  *(uint64_t *)((char *)a5 + v26[7]) = v25;
  return result;
}

uint64_t sub_1A9B97B68()
{
  return sub_1A9CE7AE8();
}

uint64_t sub_1A9B97B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL *v9;
  uint64_t v11;

  v1 = sub_1A9CE7620();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9B965C0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (BOOL *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = sub_1A9B96380();
  sub_1A9B96918(v0, (uint64_t)&v9[*(int *)(v6 + 52)]);
  sub_1A9CE7614();
  sub_1A9B92B9C(&qword_1EEB438C8, (uint64_t (*)(uint64_t))sub_1A9B965C0, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
  sub_1A9CE7B54();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9B965C0);
}

uint64_t SleepStagesChart.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SleepHealthUI::SleepStagesChart::Options __swiftcall SleepStagesChart.Options.init(rawValue:)(SleepHealthUI::SleepStagesChart::Options rawValue)
{
  SleepHealthUI::SleepStagesChart::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SleepStagesChart.Options.showDateRange.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SleepStagesChart.Options.useCompactLegend.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

BOOL sub_1A9B97CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v14;

  v1 = type metadata accessor for SleepStagesChart(0);
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + *(int *)(v3 + 24)) & 1) != 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 8) + 32) + 16);
  sub_1A9BA6F90(v0, (uint64_t)v5, type metadata accessor for SleepStagesChart);
  if (v7)
  {
    v8 = *(_QWORD *)&v5[*(int *)(v1 + 20)];
    swift_bridgeObjectRetain();
    v9 = sub_1A9C318EC(2u, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10 = sub_1A9C318EC(3u, v8);
    swift_bridgeObjectRelease();
    v11 = v9 + v10;
    swift_bridgeObjectRetain();
    v12 = sub_1A9C318EC(1u, v8);
    swift_bridgeObjectRelease();
    v6 = v11 + v12 > 0.0;
  }
  else
  {
    v6 = 0;
  }
  sub_1A9B97190((uint64_t)v5, type metadata accessor for SleepStagesChart);
  return v6;
}

uint64_t SleepStagesChart.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for SleepStagesChart(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1EEB42B88 != -1)
    swift_once();
  v9 = qword_1EEB43850;
  sub_1A9BA6F90(v2, (uint64_t)&v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for SleepStagesChart);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v8, v11 + v10, type metadata accessor for SleepStagesChart);
  sub_1A9BA6F90(v2, (uint64_t)v8, type metadata accessor for SleepStagesChart);
  v12 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v8, v12 + v10, type metadata accessor for SleepStagesChart);
  v19[15] = 0;
  sub_1A9CE7DC4();
  v13 = v19[16];
  v14 = v20;
  if (qword_1EEB42D88 != -1)
    swift_once();
  v15 = qword_1EEB485F8;
  v16 = qword_1EEB42D90;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_1EEB48600;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = sub_1A9BA0DB0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = sub_1A9BA0EE4;
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v17;
  return swift_retain();
}

uint64_t sub_1A9B97FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  sub_1A9B95370(0, &qword_1EEB43CB8, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v25 - v6;
  v8 = type metadata accessor for SleepStagesModel(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SleepStagesDiagram(0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (_QWORD *)((char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)v25 - v18;
  if (sub_1A9B97CC8())
  {
    v20 = type metadata accessor for SleepStagesChart(0);
    sub_1A9BA6F90(a1 + *(int *)(v20 + 20), (uint64_t)v11, type metadata accessor for SleepStagesModel);
    v21 = (*(_QWORD *)(a1 + *(int *)(v20 + 28)) & 1) == 0;
    v25[1] = a2;
    if (v21)
      v22 = 7;
    else
      v22 = 263;
    type metadata accessor for SleepDayModel(0);
    sub_1A9B92B9C(&qword_1ED262FC0, type metadata accessor for SleepDayModel, (uint64_t)&protocol conformance descriptor for SleepDayModel);
    swift_retain();
    *v16 = sub_1A9CE70F8();
    v16[1] = v23;
    sub_1A9BA0D6C((uint64_t)v11, (uint64_t)v16 + *(int *)(v12 + 20), type metadata accessor for SleepStagesModel);
    *(uint64_t *)((char *)v16 + *(int *)(v12 + 24)) = v22;
    sub_1A9BA0D6C((uint64_t)v16, (uint64_t)v19, type metadata accessor for SleepStagesDiagram);
    sub_1A9BA6F90((uint64_t)v19, (uint64_t)v7, type metadata accessor for SleepStagesDiagram);
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1EEB43A50, type metadata accessor for SleepStagesDiagram, (uint64_t)&protocol conformance descriptor for SleepStagesDiagram);
    sub_1A9BA3D00();
    sub_1A9CE74E8();
    return sub_1A9B97190((uint64_t)v19, type metadata accessor for SleepStagesDiagram);
  }
  else
  {
    *v7 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for SleepStagesChart(0) + 24));
    swift_storeEnumTagMultiPayload();
    sub_1A9B92B9C(&qword_1EEB43A50, type metadata accessor for SleepStagesDiagram, (uint64_t)&protocol conformance descriptor for SleepStagesDiagram);
    sub_1A9BA3D00();
    return sub_1A9CE74E8();
  }
}

uint64_t sub_1A9B982DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for SleepStagesChart(0);
  sub_1A9BA6F90(a1 + *(int *)(v4 + 20), a2, type metadata accessor for SleepStagesModel);
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(v4 + 28));
  result = type metadata accessor for SleepStagesLegend(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = (a1 & 2) != 0;
  return result;
}

id sub_1A9B98348(uint64_t a1)
{
  return sub_1A9B98360(a1, (uint64_t)&unk_1E55D1F40, &qword_1EEB43858);
}

id sub_1A9B98360(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (result)
  {
    v6 = result;
    sub_1A9BAE840(a2);
    sub_1A9CE8868();
    v8 = v7;

    result = (id)swift_bridgeObjectRelease();
    *a3 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9B983EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  sub_1A9BA6DAC();
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v44 = (uint64_t)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v38 - v8;
  v10 = type metadata accessor for SleepStagesLegend(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10, v13);
  v14 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA6C24();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v42 = (uint64_t)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v38 - v20;
  v22 = sub_1A9CE7404();
  if (qword_1EEB42B90 != -1)
    swift_once();
  v23 = qword_1EEB43858;
  *(_QWORD *)v21 = v22;
  *((_QWORD *)v21 + 1) = v23;
  v21[16] = 0;
  sub_1A9BA7020(0, &qword_1EEB43BA0, &qword_1EEB43B50);
  v25 = *(int *)(v24 + 44);
  if (qword_1ED262EE8 != -1)
    swift_once();
  v38[2] = &v21[v25];
  v45 = qword_1ED262EE0;
  sub_1A9BA6F90(a1, (uint64_t)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SleepStagesLegend);
  v26 = *(unsigned __int8 *)(v11 + 80);
  v27 = (v26 + 16) & ~v26;
  v40 = v26 | 7;
  v41 = v27 + v12;
  v28 = swift_allocObject();
  v39 = a1;
  sub_1A9BA0D6C((uint64_t)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, type metadata accessor for SleepStagesLegend);
  sub_1A9B94CA0(0, &qword_1EEB43B58, (uint64_t)&type metadata for SleepStage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v38[1] = v29;
  sub_1A9BA6CBC(&qword_1EEB43B60, &qword_1EEB43B58, (uint64_t)&type metadata for SleepStage, MEMORY[0x1E0DEAF48]);
  sub_1A9BA6D68();
  sub_1A9BA6FDC();
  swift_bridgeObjectRetain();
  sub_1A9CE7F5C();
  v30 = sub_1A9CE7404();
  v31 = qword_1EEB43858;
  *(_QWORD *)v9 = v30;
  *((_QWORD *)v9 + 1) = v31;
  v9[16] = 0;
  sub_1A9BA7020(0, &qword_1EEB43BB0, &qword_1EEB43B80);
  v45 = qword_1ED262EE0;
  sub_1A9BA6F90(v39, (uint64_t)v14, type metadata accessor for SleepStagesLegend);
  v32 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v14, v32 + v27, type metadata accessor for SleepStagesLegend);
  sub_1A9BA6F08();
  swift_bridgeObjectRetain();
  sub_1A9CE7F5C();
  v33 = v42;
  sub_1A9BA6F90((uint64_t)v21, v42, (uint64_t (*)(_QWORD))sub_1A9BA6C24);
  v34 = v44;
  sub_1A9BA6F90((uint64_t)v9, v44, (uint64_t (*)(_QWORD))sub_1A9BA6DAC);
  v35 = v43;
  sub_1A9BA6F90(v33, v43, (uint64_t (*)(_QWORD))sub_1A9BA6C24);
  sub_1A9BA6C08(0);
  sub_1A9BA6F90(v34, v35 + *(int *)(v36 + 48), (uint64_t (*)(_QWORD))sub_1A9BA6DAC);
  sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9BA6DAC);
  sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9BA6C24);
  sub_1A9B97190(v34, (uint64_t (*)(_QWORD))sub_1A9BA6DAC);
  return sub_1A9B97190(v33, (uint64_t (*)(_QWORD))sub_1A9BA6C24);
}

uint64_t sub_1A9B98810(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - v5;
  v7 = *v1;
  swift_bridgeObjectRetain();
  v8 = sub_1A9C318EC(2u, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9 = sub_1A9C318EC(3u, v7);
  swift_bridgeObjectRelease();
  v10 = v8 + v9;
  swift_bridgeObjectRetain();
  v11 = sub_1A9C318EC(1u, v7);
  swift_bridgeObjectRelease();
  if (v10 + v11 <= 0.0)
    return 11565;
  v12 = type metadata accessor for SleepStagesModel(0);
  sub_1A9BAA620((uint64_t)v1 + *(int *)(v12 + 20), (uint64_t)v6, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v6, 1, v13) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v6, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v15 = (void *)sub_1A9CE80C4();
    sub_1A9B97190((uint64_t)v6, type metadata accessor for SleepMetricsWrapper);
    sub_1A9C34BD4(a1);

  }
  v16 = sub_1A9CE8D24();
  return sub_1A9C1C100(v16, v17);
}

uint64_t sub_1A9B989F0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v24;

  sub_1A9BAB4E0();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAB974(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = sub_1A9CE7398();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1A9BA759C(0, &qword_1EEB43D90, sub_1A9BAB558);
  sub_1A9B98B5C(a1, a2, a3, a4, (uint64_t)&v13[*(int *)(v19 + 44)]);
  v20 = 0;
  if ((a4 & 1) != 0)
    v20 = sub_1A9CE78C0();
  KeyPath = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BAB4E0);
  v22 = (uint64_t *)&v18[*(int *)(v15 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  sub_1A9B97190((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9BAB4E0);
  return sub_1A9BA0D6C((uint64_t)v18, a5, (uint64_t (*)(_QWORD))sub_1A9BAB974);
}

uint64_t sub_1A9B98B5C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void));
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD v76[2];
  _QWORD v77[2];
  char v78;
  uint64_t v79;
  __int16 v80;

  v64 = a3;
  v65 = a2;
  v63 = a1;
  v62 = a5;
  sub_1A9BAB628(0, &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, MEMORY[0x1E0CDDD78], (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v61 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v60 = (char *)&v58 - v11;
  sub_1A9BAB754();
  v13 = v12;
  v59 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAB6AC(0);
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B95370(0, &qword_1EEB43D10, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, MEMORY[0x1E0CDA208], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v24 = v23;
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v58 - v26;
  sub_1A9BAB628(0, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, v28);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v66 = (uint64_t)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v33);
  v67 = (uint64_t)&v58 - v34;
  v35 = v63;
  v72 = v63;
  v73 = v65;
  v74 = v64;
  v75 = a4;
  v68 = v63;
  v69 = v65;
  v70 = v64;
  v71 = a4;
  sub_1A9B95370(0, &qword_1EEB43D28, (uint64_t (*)(uint64_t))sub_1A9BAB7F0, MEMORY[0x1E0CDF840], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  sub_1A9BAB828();
  sub_1A9CE7D64();
  v36 = sub_1A9C32528(v35);
  v77[0] = MEMORY[0x1AF41E85C](v36);
  sub_1A9B92B9C(&qword_1EEB43D58, (uint64_t (*)(uint64_t))sub_1A9BAB754, MEMORY[0x1E0CDF8C8]);
  sub_1A9BAB930();
  sub_1A9CE7A94();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v13);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v27, v22, v18);
  *(_WORD *)&v27[*(int *)(v24 + 36)] = 1;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v77[0] = 0;
  v77[1] = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v77[0] = 0xD00000000000001ALL;
  v77[1] = 0x80000001A9CF8910;
  sub_1A9C314AC(v35);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  strcpy((char *)v77, "UIA.NanoSleep.");
  HIBYTE(v77[1]) = -18;
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9BAB99C();
  v37 = v66;
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9BAB00C((uint64_t)v27, &qword_1EEB43D10, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, MEMORY[0x1E0CDA208]);
  sub_1A9BABA7C(v37, v67);
  v77[0] = v65;
  v77[1] = v64;
  sub_1A9BA8EA4();
  swift_bridgeObjectRetain();
  v38 = sub_1A9CE79C8();
  v40 = v39;
  LOBYTE(v27) = v41 & 1;
  sub_1A9CE7CE0();
  v42 = sub_1A9CE7968();
  v44 = v43;
  LOBYTE(v37) = v45;
  v47 = v46;
  v65 = v46;
  swift_release();
  sub_1A9BAA670(v38, v40, (char)v27);
  swift_bridgeObjectRelease();
  v77[0] = v42;
  v77[1] = v44;
  v78 = v37 & 1;
  v79 = v47;
  v80 = 1;
  v76[0] = 0;
  v76[1] = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v76[0] = 0xD00000000000001ALL;
  v76[1] = 0x80000001A9CF8910;
  sub_1A9C314AC(v63);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  strcpy((char *)v76, "UIA.NanoSleep.");
  HIBYTE(v76[1]) = -18;
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v48 = MEMORY[0x1E0CDA208];
  sub_1A9BAAB64(0, (unint64_t *)&qword_1EEB43898, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  sub_1A9BABAE0((unint64_t *)&qword_1EEB43DA0, (unint64_t *)&qword_1EEB43898, v48, MEMORY[0x1E0CDA1F0]);
  v49 = (uint64_t)v60;
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v42, v44, v37 & 1);
  swift_bridgeObjectRelease();
  v50 = v66;
  sub_1A9BABB50(v67, v66, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
  v51 = v61;
  v52 = MEMORY[0x1E0CDDD78];
  sub_1A9BABB50(v49, v61, &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, MEMORY[0x1E0CDDD78], (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
  v53 = v50;
  v54 = v62;
  sub_1A9BABB50(v53, v62, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
  sub_1A9BAB574();
  v56 = v54 + *(int *)(v55 + 48);
  *(_QWORD *)v56 = 0x4030000000000000;
  *(_BYTE *)(v56 + 8) = 0;
  sub_1A9BABB50(v51, v54 + *(int *)(v55 + 64), &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, v52, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
  sub_1A9BABBA4(v49, &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, v52, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
  sub_1A9BABBA4(v67, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
  sub_1A9BABBA4(v51, &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, v52, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
  return sub_1A9BABBA4(v66, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
}

uint64_t sub_1A9B992F8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  sub_1A9B95370(0, &qword_1EEB43DA8, (uint64_t (*)(uint64_t))sub_1A9BAB7F0, MEMORY[0x1E0CDF840], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  v31 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t *)((char *)&v29 - v5);
  sub_1A9BAB80C(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1A9CE7D40();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAB7F0(0);
  v30 = v17;
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)&v29 - v23;
  v25 = sub_1A9CE7D28();
  v26 = v25;
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0CDF7D0], v12);
    KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v11 + *(int *)(v8 + 28), v16, v12);
    *v11 = KeyPath;
    sub_1A9BA6F90((uint64_t)v11, (uint64_t)v21 + *(int *)(v30 + 36), (uint64_t (*)(_QWORD))sub_1A9BAB80C);
    *v21 = v26;
    swift_retain();
    sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9BAB80C);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    swift_release();
    sub_1A9BA0D6C((uint64_t)v21, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9BAB7F0);
    sub_1A9BA6F90((uint64_t)v24, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9BAB7F0);
    swift_storeEnumTagMultiPayload();
    sub_1A9BAB8B0();
    sub_1A9CE74E8();
    return sub_1A9B97190((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9BAB7F0);
  }
  else
  {
    *v6 = v25;
    swift_storeEnumTagMultiPayload();
    sub_1A9BAB8B0();
    return sub_1A9CE74E8();
  }
}

uint64_t sub_1A9B995C4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_1A9B989F0(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), v1[24], a1);
}

uint64_t sub_1A9B995D4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v24;

  sub_1A9BABBE8();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABDF8(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = sub_1A9CE7404();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1A9BA759C(0, &qword_1EEB43DE8, sub_1A9BABC60);
  sub_1A9B99740(a1, a2, a3, a4, (uint64_t)&v13[*(int *)(v19 + 44)]);
  v20 = 0;
  if ((a4 & 1) != 0)
    v20 = sub_1A9CE78C0();
  KeyPath = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v13, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BABBE8);
  v22 = (uint64_t *)&v18[*(int *)(v15 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  sub_1A9B97190((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9BABBE8);
  return sub_1A9BA0D6C((uint64_t)v18, a5, (uint64_t (*)(_QWORD))sub_1A9BABDF8);
}

uint64_t sub_1A9B99740@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  _BYTE v59[4];
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD v76[2];
  _QWORD v77[2];
  uint64_t v78;
  unint64_t v79;

  v65 = a5;
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0];
  sub_1A9BABD9C(0, (unint64_t *)&qword_1EEB43DD0, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v64 = &v59[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v14);
  v63 = &v59[-v15];
  sub_1A9BAB754();
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = &v59[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BAB6AC(0);
  v23 = v22;
  v62 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = &v59[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BABD28(0, &qword_1EEB43DC8, v27, v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v66 = &v59[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v30, v32);
  v67 = &v59[-v33];
  v72 = a1;
  v61 = a2;
  v73 = a2;
  v74 = a3;
  v75 = a4;
  v68 = a1;
  v69 = a2;
  v70 = a3;
  v34 = a3;
  v71 = a4;
  sub_1A9B95370(0, &qword_1EEB43D28, (uint64_t (*)(uint64_t))sub_1A9BAB7F0, MEMORY[0x1E0CDF840], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  sub_1A9BAB828();
  sub_1A9CE7D64();
  v60 = a1;
  v35 = sub_1A9C32528(a1);
  v77[0] = MEMORY[0x1AF41E85C](v35);
  v36 = sub_1A9B92B9C(&qword_1EEB43D58, (uint64_t (*)(uint64_t))sub_1A9BAB754, MEMORY[0x1E0CDF8C8]);
  v37 = sub_1A9BAB930();
  sub_1A9CE7A94();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v21, v17);
  v77[0] = 0;
  v77[1] = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v77[0] = 0xD00000000000001ALL;
  v77[1] = 0x80000001A9CF8910;
  sub_1A9C314AC(a1);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  strcpy((char *)v77, "UIA.NanoSleep.");
  HIBYTE(v77[1]) = -18;
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v77[0] = v17;
  v77[1] = &type metadata for SleepStagesLegend.LegendLabelStyle;
  v78 = v36;
  v79 = v37;
  swift_getOpaqueTypeConformance2();
  v38 = v66;
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v26, v23);
  sub_1A9BABEC0((uint64_t)v38, (uint64_t)v67);
  v77[0] = v61;
  v77[1] = v34;
  sub_1A9BA8EA4();
  swift_bridgeObjectRetain();
  v39 = sub_1A9CE79C8();
  v41 = v40;
  LOBYTE(v36) = v42 & 1;
  sub_1A9CE7CE0();
  v43 = sub_1A9CE7968();
  v45 = v44;
  LOBYTE(v34) = v46;
  v48 = v47;
  swift_release();
  sub_1A9BAA670(v39, v41, v36);
  swift_bridgeObjectRelease();
  v77[0] = v43;
  v77[1] = v45;
  LOBYTE(v78) = v34 & 1;
  v79 = v48;
  v76[0] = 0;
  v76[1] = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v76[0] = 0xD00000000000001ALL;
  v76[1] = 0x80000001A9CF8910;
  sub_1A9C314AC(v60);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  strcpy((char *)v76, "UIA.NanoSleep.");
  HIBYTE(v76[1]) = -18;
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v49 = (uint64_t)v63;
  v50 = MEMORY[0x1E0CDDD78];
  sub_1A9CE7B78();
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v43, v45, v34 & 1);
  swift_bridgeObjectRelease();
  v51 = v66;
  v52 = v67;
  sub_1A9BABF24((uint64_t)v67, (uint64_t)v66);
  v53 = v64;
  v54 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0];
  sub_1A9BAA620(v49, (uint64_t)v64, (uint64_t)&qword_1EEB43DD0, (uint64_t)MEMORY[0x1E0CDCFD0], v50, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BABD9C);
  v55 = v65;
  sub_1A9BABF24((uint64_t)v51, v65);
  sub_1A9BABC7C();
  sub_1A9BAA620((uint64_t)v53, v55 + *(int *)(v56 + 48), (uint64_t)&qword_1EEB43DD0, (uint64_t)v54, v50, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BABD9C);
  sub_1A9BAAEE4(v49, (uint64_t)&qword_1EEB43DD0, (uint64_t)v54, v50, (uint64_t (*)(_QWORD))sub_1A9BABD9C);
  v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0];
  sub_1A9BAA5E4((uint64_t)v52, &qword_1EEB43DC8, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, v54, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  sub_1A9BAAEE4((uint64_t)v53, (uint64_t)&qword_1EEB43DD0, (uint64_t)v54, v50, (uint64_t (*)(_QWORD))sub_1A9BABD9C);
  return sub_1A9BAA5E4((uint64_t)v51, &qword_1EEB43DC8, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, v54, v57);
}

uint64_t sub_1A9B99D90@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_1A9B995D4(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), v1[24], a1);
}

uint64_t sub_1A9B99DA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v38 = a2;
  v2 = sub_1A9CE75D8();
  v37 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v35 - v7;
  v9 = sub_1A9CE75C0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAC19C(0, &qword_1EEB43E30, v14);
  v16 = v15;
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v35 - v22;
  sub_1A9CE75CC();
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v13, v9);
  v25 = (uint64_t *)&v20[*(int *)(v16 + 36)];
  v26 = v35;
  *v25 = KeyPath;
  v25[1] = v26;
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  v27(v13, v9);
  sub_1A9BAC218((uint64_t)v20, (uint64_t)v23);
  sub_1A9CE75E4();
  sub_1A9BAC26C((uint64_t)v23, (uint64_t)v20);
  v28 = v36;
  v29 = v37;
  v30 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v30(v36, v8, v2);
  v31 = v38;
  sub_1A9BAC26C((uint64_t)v20, v38);
  sub_1A9BAC120();
  v30((char *)(v31 + *(int *)(v32 + 48)), v28, v2);
  v33 = *(void (**)(char *, uint64_t))(v29 + 8);
  v33(v8, v2);
  sub_1A9BAC2C0((uint64_t)v23);
  v33(v28, v2);
  return sub_1A9BAC2C0((uint64_t)v20);
}

uint64_t sub_1A9B99FC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  *(_QWORD *)a1 = sub_1A9CE7398();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  sub_1A9BA759C(0, &qword_1EEB43E18, sub_1A9BAC104);
  return sub_1A9B99DA0(v3, a1 + *(int *)(v4 + 44));
}

uint64_t sub_1A9B9A03C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *a1 = sub_1A9CE7704();
  sub_1A9BA6B84();
  return sub_1A9B983EC(v1, (uint64_t)&a1[*(int *)(v3 + 44)]);
}

void sub_1A9B9A078()
{
  off_1ED262EB0 = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

uint64_t sub_1A9B9A08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = sub_1A9CE5F64();
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A9CE62A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE62AC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAABAC();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262EB8 != -1)
    swift_once();
  v18 = v0 + *(int *)(type metadata accessor for SleepStageSegment(0) + 20);
  swift_beginAccess();
  v19 = off_1ED262EB0;
  if (*((_QWORD *)off_1ED262EB0 + 2) && (v20 = sub_1A9BAD770(v18), (v21 & 1) != 0))
  {
    v22 = *(_QWORD *)(v19[7] + 16 * v20);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    sub_1A9C438D8(v17);
    sub_1A9CE6294();
    sub_1A9CE5E80();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_1A9B92B9C(&qword_1ED262DD8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB07A8], MEMORY[0x1E0CB07A0]);
    sub_1A9CE8598();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    sub_1A9B97190((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1A9BAABAC);
    v22 = v34;
    v23 = v35;
    v25 = (uint64_t)v30;
    v24 = v31;
    v26 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v18, v32);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v33 = off_1ED262EB0;
    off_1ED262EB0 = (_UNKNOWN *)0x8000000000000000;
    sub_1A9BA7384(v22, v23, v25, isUniquelyReferenced_nonNull_native);
    off_1ED262EB0 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    swift_endAccess();
  }
  return v22;
}

uint64_t sub_1A9B9A364@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t);
  uint64_t v152;
  uint64_t result;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, char *, uint64_t);
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(void);
  void (*v172)(char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  void (*v244)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;

  v206 = a2;
  v193 = sub_1A9CE62E8();
  v192 = *(_QWORD *)(v193 - 8);
  v4 = MEMORY[0x1E0C80A78](v193, v3);
  v191 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v6);
  v190 = (char *)&v187 - v7;
  sub_1A9BAA4A4();
  v205 = v8;
  v203 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v189 = (uint64_t *)((char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v194 = (uint64_t)&v187 - v14;
  v196 = sub_1A9CE5F64();
  v195 = *(_QWORD *)(v196 - 8);
  MEMORY[0x1E0C80A78](v196, v15);
  v188 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED262B00, (uint64_t (*)(uint64_t))sub_1A9BAA4A4, v11);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v204 = (uint64_t)&v187 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v21);
  v202 = (char *)&v187 - v22;
  sub_1A9BA93F0();
  v200 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v239 = (char *)&v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = type metadata accessor for Somnogram(0);
  v237 = *(_QWORD *)(v241 - 8);
  v27 = MEMORY[0x1E0C80A78](v241, v26);
  v201 = (uint64_t)&v187 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = v28;
  MEMORY[0x1E0C80A78](v27, v29);
  v236 = (uint64_t)&v187 - v30;
  sub_1A9B92F34(0, &qword_1ED263168, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30], v11);
  MEMORY[0x1E0C80A78](v31, v32);
  v210 = (char *)&v187 - v33;
  v208 = sub_1A9CE6BC4();
  v246 = *(_QWORD *)(v208 - 8);
  MEMORY[0x1E0C80A78](v208, v34);
  v36 = (char *)&v187 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8924();
  v38 = v37;
  v207 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v39);
  v41 = (char *)&v187 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8874(0);
  v211 = v42;
  v209 = *(uint64_t **)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v187 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8798(0);
  v214 = v46;
  v213 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v47);
  v212 = (char *)&v187 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA865C(0);
  v218 = v49;
  v216 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v50);
  v215 = (char *)&v187 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA84C4(0);
  v220 = v52;
  v219 = *(uint64_t **)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v53);
  v217 = (char *)&v187 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA830C(0);
  v223 = v55;
  v222 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v56);
  v221 = (char *)&v187 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA80F8(0);
  v226 = v58;
  v224 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v59);
  v248 = (char *)&v187 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA7E54(0);
  v228 = v61;
  v227 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v62);
  v225 = (char *)&v187 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA7B88(0);
  v233 = v64;
  v231 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v65);
  v229 = (char *)&v187 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA7858(0);
  v234 = v67;
  v232 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v68);
  v230 = (char *)&v187 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABD28(0, &qword_1EEB43BD8, (uint64_t (*)(uint64_t))sub_1A9BA7778, v70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  v198 = v71;
  MEMORY[0x1E0C80A78](v71, v72);
  v235 = (uint64_t)&v187 - v73;
  sub_1A9BA76A0(0);
  v240 = v74;
  v243 = *(_QWORD *)(v74 - 8);
  v76 = MEMORY[0x1E0C80A78](v74, v75);
  v199 = (char *)&v187 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = MEMORY[0x1E0C80A78](v76, v78);
  v197 = (char *)&v187 - v80;
  MEMORY[0x1E0C80A78](v79, v81);
  v242 = (char *)&v187 - v82;
  if (qword_1ED262EE8 != -1)
    swift_once();
  v83 = qword_1ED262EE0;
  v84 = swift_bridgeObjectRetain();
  v249 = sub_1A9B9B790(v84);
  MEMORY[0x1E0C80A78](v249, v85);
  v247 = sub_1A9CD2DBC((void (*)(uint64_t *__return_ptr, char *))sub_1A9BAA5A0, (uint64_t)(&v187 - 4), v83);
  v86 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v86, v87);
  v185 = (uint64_t)a1;
  sub_1A9BA89D0(0);
  sub_1A9BA8A5C();
  v250 = a1;
  v89 = v88;
  v90 = sub_1A9B92B9C(&qword_1ED263130, (uint64_t (*)(uint64_t))sub_1A9BA8A5C, MEMORY[0x1E0C93978]);
  v251 = v89;
  v252 = v90;
  swift_getOpaqueTypeConformance2();
  sub_1A9CE6C24();
  sub_1A9CE6ABC();
  v245 = sub_1A9CE6CF0();
  v91 = MEMORY[0x1E0C93C30];
  v244 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v245 - 8) + 56);
  v92 = (uint64_t)v210;
  v244(v210, 1, 1, v245);
  v93 = sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
  v94 = MEMORY[0x1E0C93870];
  v95 = v208;
  sub_1A9CE7A28();
  sub_1A9BAAEE4(v92, (uint64_t)&qword_1ED263168, (uint64_t)v91, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  (*(void (**)(char *, uint64_t))(v246 + 8))(v36, v95);
  (*(void (**)(char *, unint64_t))(v207 + 8))(v41, v38);
  v246 = *(int *)(v241 + 20);
  v251 = v38;
  v252 = v95;
  v253 = v93;
  v254 = v94;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v97 = v212;
  v98 = v211;
  sub_1A9CE79F8();
  v99 = ((uint64_t (*)(char *, unint64_t))v209[1])(v45, v98);
  v209 = &v187;
  MEMORY[0x1E0C80A78](v99, v100);
  v185 = (uint64_t)v250;
  sub_1A9BA9008();
  v102 = v101;
  v251 = v98;
  v252 = OpaqueTypeConformance2;
  v103 = swift_getOpaqueTypeConformance2();
  v104 = sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
  v105 = v215;
  v106 = v214;
  sub_1A9CE79EC();
  (*(void (**)(char *, unint64_t))(v213 + 8))(v97, v106);
  v260 = v249;
  v107 = v92;
  v244((char *)v92, 1, 1, v245);
  sub_1A9B94CA0(0, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v109 = v108;
  v251 = v106;
  v252 = v102;
  v253 = v103;
  v254 = v104;
  v110 = swift_getOpaqueTypeConformance2();
  v111 = sub_1A9BA96E4();
  v112 = v217;
  v113 = v218;
  v213 = v109;
  v114 = v111;
  v214 = v111;
  sub_1A9CE7A34();
  sub_1A9BAAEE4(v92, (uint64_t)&qword_1ED263168, (uint64_t)MEMORY[0x1E0C93C30], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  (*(void (**)(char *, unint64_t))(v216 + 8))(v105, v113);
  v251 = v113;
  v252 = v109;
  v253 = v110;
  v254 = v114;
  v115 = swift_getOpaqueTypeConformance2();
  v116 = v221;
  v117 = v220;
  sub_1A9CE7A10();
  v118 = ((uint64_t (*)(char *, unint64_t))v219[1])(v112, v117);
  v219 = &v187;
  MEMORY[0x1E0C80A78](v118, v119);
  v185 = (uint64_t)v250;
  sub_1A9BA9754();
  v121 = v120;
  v251 = v117;
  v252 = v115;
  v122 = swift_getOpaqueTypeConformance2();
  v123 = sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, MEMORY[0x1E0C93BA0]);
  v124 = v223;
  sub_1A9CE7A04();
  (*(void (**)(char *, unint64_t))(v222 + 8))(v116, v124);
  v258 = v247;
  v259 = v249;
  v244((char *)v107, 1, 1, v245);
  v125 = MEMORY[0x1E0CDF5D0];
  sub_1A9B94CA0(0, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v127 = v126;
  v251 = v124;
  v252 = v121;
  v253 = v122;
  v254 = v123;
  v128 = swift_getOpaqueTypeConformance2();
  v129 = v250;
  v130 = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, v125, MEMORY[0x1E0C93DC8]);
  v185 = v130;
  v186 = MEMORY[0x1E0CDF598];
  v131 = v225;
  v132 = v226;
  v133 = v213;
  v134 = v214;
  v135 = v248;
  sub_1A9CE7A4C();
  sub_1A9BAAEE4(v107, (uint64_t)&qword_1ED263168, (uint64_t)MEMORY[0x1E0C93C30], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  (*(void (**)(char *, unint64_t))(v224 + 8))(v135, v132);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v251 = v132;
  v252 = v133;
  v253 = v127;
  v254 = v128;
  v255 = v134;
  v256 = v130;
  v257 = MEMORY[0x1E0CDF598];
  v136 = swift_getOpaqueTypeConformance2();
  v137 = v229;
  v138 = v228;
  sub_1A9CE7A1C();
  (*(void (**)(char *, unint64_t))(v227 + 8))(v131, v138);
  v139 = v236;
  sub_1A9BA6F90((uint64_t)v129, v236, type metadata accessor for Somnogram);
  v140 = (*(unsigned __int8 *)(v237 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80);
  v141 = swift_allocObject();
  sub_1A9BA0D6C(v139, v141 + v140, type metadata accessor for Somnogram);
  sub_1A9B95370(0, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v251 = v138;
  v252 = v136;
  swift_getOpaqueTypeConformance2();
  sub_1A9BA9C48();
  v142 = v230;
  v143 = v233;
  sub_1A9CE7A40();
  swift_release();
  v144 = v137;
  v145 = v246;
  (*(void (**)(char *, uint64_t))(v231 + 8))(v144, v143);
  v146 = (*(unint64_t *)((char *)v129 + v145) >> 9) & 1;
  v147 = *v129;
  swift_bridgeObjectRetain();
  v148 = v235;
  sub_1A9B9E78C(v146, v147, v235);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v232 + 8))(v142, v234);
  v149 = *MEMORY[0x1E0CD9908];
  v150 = sub_1A9CE7110();
  v151 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
  v152 = (uint64_t)v239;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 104))(v239, v149, v150);
  sub_1A9B92B9C(&qword_1ED263188, v151, MEMORY[0x1E0CD9990]);
  result = sub_1A9CE82A4();
  if ((result & 1) != 0)
  {
    v154 = v148;
    sub_1A9BAA0C0();
    sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
    v155 = v197;
    sub_1A9CE7AF4();
    sub_1A9B97190(v152, (uint64_t (*)(_QWORD))sub_1A9BA93F0);
    sub_1A9BAA5E4(v154, &qword_1EEB43BD8, (uint64_t (*)(uint64_t))sub_1A9BA7778, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v156 = v240;
    (*(void (**)(char *, char *, uint64_t))(v243 + 32))(v242, v155, v240);
    v157 = *(uint64_t *)((char *)v129 + v145);
    v158 = v201;
    sub_1A9BA6F90((uint64_t)v129, v201, type metadata accessor for Somnogram);
    if ((v157 & 1) != 0)
    {
      sub_1A9B97190(v158, type metadata accessor for Somnogram);
      v161 = 1;
      v160 = (uint64_t)v202;
    }
    else
    {
      v159 = *(_QWORD *)(v158 + *(int *)(v241 + 20));
      sub_1A9B97190(v158, type metadata accessor for Somnogram);
      v160 = (uint64_t)v202;
      if ((v159 & 0x80) != 0)
      {
        v173 = type metadata accessor for SleepStagesModel(0);
        v174 = v194;
        sub_1A9BAA620((uint64_t)v129 + *(int *)(v173 + 24), v194, (uint64_t)&qword_1ED263400, (uint64_t)MEMORY[0x1E0CAE5D0], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
        v175 = v195;
        v176 = v196;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v174, 1, v196) == 1)
        {
          sub_1A9BAAEE4(v174, (uint64_t)&qword_1ED263400, (uint64_t)MEMORY[0x1E0CAE5D0], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
          v161 = 1;
        }
        else
        {
          v177 = v188;
          (*(void (**)(char *, uint64_t, uint64_t))(v175 + 32))(v188, v174, v176);
          v178 = (uint64_t)v190;
          sub_1A9CE5F34();
          v179 = (uint64_t)v191;
          sub_1A9CE5F10();
          v180 = sub_1A9CE7398();
          v181 = (uint64_t)v189;
          *v189 = v180;
          *(_QWORD *)(v181 + 8) = 0;
          *(_BYTE *)(v181 + 16) = 1;
          sub_1A9BA759C(0, &qword_1EEB43C98, sub_1A9BAA51C);
          sub_1A9B9F15C(v178, v179, (char *)(v181 + *(int *)(v182 + 44)));
          v183 = *(void (**)(uint64_t, uint64_t))(v192 + 8);
          v184 = v193;
          v183(v179, v193);
          v183(v178, v184);
          v156 = v240;
          (*(void (**)(char *, uint64_t))(v175 + 8))(v177, v176);
          sub_1A9BA0D6C(v181, v160, (uint64_t (*)(_QWORD))sub_1A9BAA4A4);
          v161 = 0;
        }
      }
      else
      {
        v161 = 1;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v203 + 56))(v160, v161, 1, v205);
    v162 = v243;
    v163 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
    v164 = v160;
    v165 = v199;
    v166 = v242;
    v163(v199, v242, v156);
    v167 = v204;
    sub_1A9BAA620(v164, v204, (uint64_t)&qword_1ED262B00, (uint64_t)sub_1A9BAA4A4, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
    v168 = v206;
    v163(v206, v165, v156);
    sub_1A9BA761C();
    v170 = (uint64_t)&v168[*(int *)(v169 + 48)];
    v171 = MEMORY[0x1E0DEB940];
    sub_1A9BAA620(v167, v170, (uint64_t)&qword_1ED262B00, (uint64_t)sub_1A9BAA4A4, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
    sub_1A9BAAEE4(v164, (uint64_t)&qword_1ED262B00, (uint64_t)sub_1A9BAA4A4, (uint64_t)v171, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    v172 = *(void (**)(char *, uint64_t))(v162 + 8);
    v172(v166, v156);
    sub_1A9BAAEE4(v167, (uint64_t)&qword_1ED262B00, (uint64_t)sub_1A9BAA4A4, (uint64_t)v171, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    return ((uint64_t (*)(char *, uint64_t))v172)(v165, v156);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9B9B790(uint64_t a1)
{
  int64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1A9BE0464(0, v1, 0);
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A9B9B980@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v5;
  uint64_t result;

  if ((*(_BYTE *)(a2 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 0x20) != 0)
  {
    result = sub_1A9CE7CA4();
  }
  else
  {
    v5 = sub_1A9C32528(*a1);
    result = MEMORY[0x1AF41E85C](v5);
  }
  *a3 = result;
  return result;
}

uint64_t sub_1A9B9B9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE v17[16];
  uint64_t v18;

  sub_1A9BA8A5C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BA89D0(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a1;
  sub_1A9BA8ABC();
  sub_1A9BA8EE8();
  sub_1A9CE6C0C();
  sub_1A9B9C604();
  type metadata accessor for Somnogram(0);
  sub_1A9B92B9C(&qword_1ED263130, (uint64_t (*)(uint64_t))sub_1A9BA8A5C, MEMORY[0x1E0C93978]);
  sub_1A9CE6B10();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a2, v15, v11);
}

uint64_t sub_1A9B9BB68(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for Somnogram(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2, v5);
  v26 = *a1;
  sub_1A9BA6F90((uint64_t)a1, (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for Somnogram);
  sub_1A9BA8B6C(0);
  sub_1A9BA8B88(0);
  sub_1A9B92B9C(&qword_1ED2632A8, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, MEMORY[0x1E0DEAF48]);
  sub_1A9BA8C98(255);
  v9 = v8;
  sub_1A9BA8D70(255);
  v11 = v10;
  sub_1A9BA8E1C(255);
  v13 = v12;
  v14 = sub_1A9CE6B34();
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEA968];
  v22 = v14;
  v23 = MEMORY[0x1E0DEA968];
  v24 = MEMORY[0x1E0C93680];
  v25 = MEMORY[0x1E0C93DB8];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = v13;
  v23 = OpaqueTypeConformance2;
  v17 = swift_getOpaqueTypeConformance2();
  v22 = v11;
  v23 = v17;
  v18 = swift_getOpaqueTypeConformance2();
  v19 = sub_1A9BA8EA4();
  v22 = v9;
  v23 = v15;
  v24 = v18;
  v25 = v19;
  swift_getOpaqueTypeConformance2();
  sub_1A9B92B9C(&qword_1ED262EC8, type metadata accessor for SleepStageSegment, (uint64_t)&protocol conformance descriptor for SleepStageSegment);
  return sub_1A9CE7F44();
}

uint64_t sub_1A9B9BD88@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  int v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeConformance2;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v92 = a2;
  v97 = a3;
  v4 = sub_1A9CE73B0();
  v94 = *(_QWORD *)(v4 - 8);
  v95 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v93 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93770];
  sub_1A9BAAB64(0, &qword_1ED263120, MEMORY[0x1E0DEA968], MEMORY[0x1E0C93DB8], MEMORY[0x1E0C93770]);
  v86 = v8;
  v84 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v82 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v74[1] = (char *)v74 - v13;
  v14 = sub_1A9CE62E8();
  v96 = *(char **)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B95370(0, &qword_1ED263118, v18, MEMORY[0x1E0C93350], v7);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v98 = (char *)v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v74 - v24;
  v76 = sub_1A9CE6B34();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v26);
  v99 = (char *)v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8E1C(0);
  v80 = v28;
  v78 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v77 = (char *)v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8D70(0);
  v85 = v31;
  v81 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v79 = (char *)v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8C98(0);
  v90 = *(_QWORD *)(v34 - 8);
  v91 = v34;
  MEMORY[0x1E0C80A78](v34, v35);
  v88 = (char *)v74 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA8B88(0);
  v89 = v37;
  v87 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v38);
  v83 = (char *)v74 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE73A4();
  type metadata accessor for SleepStageSegment(0);
  v40 = a1;
  sub_1A9CE5F34();
  v74[0] = v25;
  sub_1A9CE6B94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = (void (*)(char *, uint64_t))*((_QWORD *)v96 + 1);
  v41(v17, v14);
  sub_1A9CE73A4();
  sub_1A9CE5F10();
  sub_1A9CE6B94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41(v17, v14);
  sub_1A9CE73A4();
  v96 = a1;
  v42 = *a1;
  if (v42 == 4)
  {
    v43 = sub_1A9CE8BB0();
    v44 = (v43 & 1) == 0;
    if ((v43 & 1) != 0)
      v45 = 0;
    else
      v45 = 0x65656C5365726F63;
    if (v44)
      v46 = 0xE900000000000070;
    else
      v46 = 0xE000000000000000;
  }
  else
  {
    sub_1A9C314AC(*v40);
    v46 = v47;
  }
  v102 = v45;
  v103 = v46;
  v48 = MEMORY[0x1E0DEA968];
  v49 = MEMORY[0x1E0C93DB8];
  sub_1A9CE6B94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = v48;
  sub_1A9CE6B28();
  sub_1A9CE73A4();
  if (v42 == 4)
  {
    v51 = sub_1A9CE8BB0();
    v52 = (v51 & 1) == 0;
    if ((v51 & 1) != 0)
      v53 = 0;
    else
      v53 = 0x65656C5365726F63;
    if (v52)
      v54 = 0xE900000000000070;
    else
      v54 = 0xE000000000000000;
  }
  else
  {
    sub_1A9C314AC(v42);
    v54 = v55;
  }
  v102 = v53;
  v103 = v54;
  v56 = v82;
  sub_1A9CE6B94();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = MEMORY[0x1E0C93680];
  v58 = v77;
  v59 = v76;
  v60 = v99;
  sub_1A9CE6AF8();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v56, v86);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v60, v59);
  type metadata accessor for Somnogram(0);
  v61 = v93;
  v63 = v94;
  v62 = v95;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, *MEMORY[0x1E0CDB0C0], v95);
  v102 = v59;
  v103 = v50;
  v104 = v57;
  v105 = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v65 = v79;
  v66 = v80;
  sub_1A9CE6AEC();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v66);
  v102 = v66;
  v103 = OpaqueTypeConformance2;
  v67 = swift_getOpaqueTypeConformance2();
  v68 = v88;
  v69 = v85;
  sub_1A9CE6B1C();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v65, v69);
  v102 = sub_1A9B9A08C();
  v103 = v70;
  v100 = v69;
  v101 = v67;
  swift_getOpaqueTypeConformance2();
  sub_1A9BA8EA4();
  v71 = v83;
  v72 = v91;
  sub_1A9CE6B04();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v72);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v87 + 32))(v97, v71, v89);
}

uint64_t sub_1A9B9C604()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  double v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  int64_t v41;
  int64_t v42;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  int64_t v45;
  _QWORD *v46;
  int64_t v47;
  double *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t);
  void *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  int64_t v66;
  int64_t v67;
  _QWORD *v68;
  unint64_t v69;
  int64_t v70;
  _QWORD *v71;
  int64_t v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  int64_t v80;
  int64_t v81;
  _QWORD *v82;
  unint64_t v83;
  int64_t v84;
  _QWORD *v85;
  int64_t v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  _QWORD *v96;
  unint64_t v97;
  int64_t v98;
  _QWORD *v99;
  int64_t v100;
  _QWORD *v101;
  _QWORD v103[2];
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v1 = sub_1A9CE73EC();
  v108 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v5 = (char *)v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (unint64_t)v103 - v7;
  v9 = sub_1A9CE6F6C();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)v103 - v16;
  if ((*((_BYTE *)v0 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 0x20) == 0)
  {
    v18 = v0;
    v19 = (void *)objc_opt_self();
    v105 = MEMORY[0x1AF41E85C](objc_msgSend(v19, sel_hk_sleepAwakeColor));
    v103[1] = MEMORY[0x1AF41E85C](objc_msgSend(v19, sel_hk_sleepAsleepREMColor));
    v107 = MEMORY[0x1AF41E85C](objc_msgSend(v19, sel_hk_sleepAsleepCoreColor));
    v106 = MEMORY[0x1AF41E85C](objc_msgSend(v19, sel_hk_sleepAsleepDeepColor));
    v104 = v18;
    sub_1A9C82A78((uint64_t)v17);
    sub_1A9C82AA8(v8);
    v20 = (void *)objc_opt_self();
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v14, *MEMORY[0x1E0CD86D0], v9);
    v21 = sub_1A9CE6F60();
    v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v14, v9);
    v23 = v108;
    (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v5, *MEMORY[0x1E0CDB2D8], v1);
    v24 = sub_1A9CE6F60();
    v25 = *(void (**)(char *, uint64_t))(v23 + 8);
    v25(v5, v1);
    objc_msgSend(v20, sel_somnogramBackgroundOpacityWithIsDarkMode_isHighContrast_isGrayScale_, v21 & 1, v24 & 1, 0);
    v27 = v26;
    v25((char *)v8, v1);
    v22(v17, v9);
    v28 = *v104;
    v29 = sub_1A9C318EC(0, *v104);
    v30 = sub_1A9C318EC(1u, v28);
    v31 = sub_1A9C318EC(2u, v28);
    v32 = sub_1A9C318EC(3u, v28);
    v33 = v32 > 2.22507386e-308;
    v34 = sub_1A9C318EC(4u, v28);
    if (v29 <= 2.22507386e-308)
    {
      v33 = v32 > 2.22507386e-308 && v30 > 2.22507386e-308;
      v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v30 <= 2.22507386e-308 && v34 <= 2.22507386e-308)
      {
        if (v31 <= 2.22507386e-308)
          goto LABEL_51;
        goto LABEL_40;
      }
      goto LABEL_26;
    }
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1A9CE7CC8();
    v36 = sub_1A9CE7FA4();
    v38 = v37;
    sub_1A9CE7CC8();
    v39 = sub_1A9CE7FA4();
    v41 = v35[2];
    v42 = v41 + 2;
    if (__OFADD__(v41, 2))
    {
      __break(1u);
    }
    else
    {
      v24 = v39;
      v29 = v40;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v35[3], v44 = v8 >> 1, (uint64_t)(v8 >> 1) < v42))
      {
        if (v41 <= v42)
          v45 = v41 + 2;
        else
          v45 = v41;
        v35 = sub_1A9CADFC8(isUniquelyReferenced_nonNull_native, v45, 1, MEMORY[0x1E0DEE9D8]);
        v8 = v35[3];
        v44 = v8 >> 1;
      }
      v42 = v35[2];
      v41 = v42 + 1;
      swift_retain();
      if (v44 > v42)
      {
LABEL_11:
        v35[2] = v41;
        v46 = &v35[2 * v42];
        v46[4] = v36;
        v46[5] = v38;
        v47 = v42 + 2;
        swift_retain();
        if ((uint64_t)v44 < v47)
          v35 = sub_1A9CADFC8((_QWORD *)(v8 > 1), v47, 1, v35);
        v35[2] = v47;
        v48 = (double *)&v35[2 * v41];
        *((_QWORD *)v48 + 4) = v24;
        v48[5] = v29;
        swift_release();
        swift_release();
        if (v30 <= 2.22507386e-308 && v31 <= 2.22507386e-308 && v32 <= 2.22507386e-308 && v34 <= 2.22507386e-308)
        {
          v33 = 0;
          goto LABEL_37;
        }
LABEL_26:
        sub_1A9CE7CC8();
        v61 = sub_1A9CE7FA4();
        v63 = v62;
        sub_1A9CE7CC8();
        v64 = sub_1A9CE7FA4();
        v66 = v35[2];
        v67 = v66 + 2;
        if (__OFADD__(v66, 2))
        {
          __break(1u);
        }
        else
        {
          v24 = v64;
          v30 = v65;
          v68 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
          if (!(_DWORD)v68 || (v8 = v35[3], v69 = v8 >> 1, (uint64_t)(v8 >> 1) < v67))
          {
            if (v66 <= v67)
              v70 = v66 + 2;
            else
              v70 = v66;
            v35 = sub_1A9CADFC8(v68, v70, 1, v35);
            v8 = v35[3];
            v69 = v8 >> 1;
          }
          v67 = v35[2];
          v66 = v67 + 1;
          swift_retain();
          if (v69 > v67)
            goto LABEL_34;
        }
        v35 = sub_1A9CADFC8((_QWORD *)(v8 > 1), v66, 1, v35);
        v8 = v35[3];
        v69 = v8 >> 1;
LABEL_34:
        v35[2] = v66;
        v71 = &v35[2 * v67];
        v71[4] = v61;
        v71[5] = v63;
        v72 = v67 + 2;
        swift_retain();
        if ((uint64_t)v69 < v72)
          v35 = sub_1A9CADFC8((_QWORD *)(v8 > 1), v72, 1, v35);
        v35[2] = v72;
        v73 = (double *)&v35[2 * v66];
        *((_QWORD *)v73 + 4) = v24;
        v73[5] = v30;
        swift_release();
        swift_release();
LABEL_37:
        if (v31 <= 2.22507386e-308 && (v33 & 1) == 0 && v34 <= 2.22507386e-308)
          goto LABEL_51;
LABEL_40:
        v74 = v107;
        sub_1A9CE7CC8();
        v75 = sub_1A9CE7FA4();
        v77 = v76;
        sub_1A9CE7CC8();
        v78 = sub_1A9CE7FA4();
        v80 = v35[2];
        v81 = v80 + 2;
        if (__OFADD__(v80, 2))
        {
          __break(1u);
        }
        else
        {
          v74 = v78;
          v31 = v79;
          v82 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
          if (!(_DWORD)v82 || (v33 = v35[3], v83 = v33 >> 1, (uint64_t)(v33 >> 1) < v81))
          {
            if (v80 <= v81)
              v84 = v80 + 2;
            else
              v84 = v80;
            v35 = sub_1A9CADFC8(v82, v84, 1, v35);
            v33 = v35[3];
            v83 = v33 >> 1;
          }
          v81 = v35[2];
          v80 = v81 + 1;
          swift_retain();
          if (v83 > v81)
            goto LABEL_48;
        }
        v35 = sub_1A9CADFC8((_QWORD *)(v33 > 1), v80, 1, v35);
        v33 = v35[3];
        v83 = v33 >> 1;
LABEL_48:
        v35[2] = v80;
        v85 = &v35[2 * v81];
        v85[4] = v75;
        v85[5] = v77;
        v86 = v81 + 2;
        swift_retain();
        if ((uint64_t)v83 < v86)
          v35 = sub_1A9CADFC8((_QWORD *)(v33 > 1), v86, 1, v35);
        v35[2] = v86;
        v87 = (double *)&v35[2 * v80];
        *((_QWORD *)v87 + 4) = v74;
        v87[5] = v31;
        swift_release();
        swift_release();
LABEL_51:
        if (v32 <= 2.22507386e-308 && v34 <= 2.22507386e-308)
        {
LABEL_64:
          v60 = MEMORY[0x1AF41EBE0](v35);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          return v60;
        }
        v88 = v106;
        sub_1A9CE7CC8();
        v89 = sub_1A9CE7FA4();
        v91 = v90;
        sub_1A9CE7CC8();
        v92 = sub_1A9CE7FA4();
        v94 = v35[2];
        v95 = v94 + 2;
        if (__OFADD__(v94, 2))
        {
          __break(1u);
        }
        else
        {
          v88 = v92;
          v27 = v93;
          v96 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
          if (!(_DWORD)v96 || (v33 = v35[3], v97 = v33 >> 1, (uint64_t)(v33 >> 1) < v95))
          {
            if (v94 <= v95)
              v98 = v94 + 2;
            else
              v98 = v94;
            v35 = sub_1A9CADFC8(v96, v98, 1, v35);
            v33 = v35[3];
            v97 = v33 >> 1;
          }
          v95 = v35[2];
          v94 = v95 + 1;
          swift_retain();
          if (v97 > v95)
            goto LABEL_61;
        }
        v35 = sub_1A9CADFC8((_QWORD *)(v33 > 1), v94, 1, v35);
        v33 = v35[3];
        v97 = v33 >> 1;
LABEL_61:
        v35[2] = v94;
        v99 = &v35[2 * v95];
        v99[4] = v89;
        v99[5] = v91;
        v100 = v95 + 2;
        swift_retain();
        if ((uint64_t)v97 < v100)
          v35 = sub_1A9CADFC8((_QWORD *)(v33 > 1), v100, 1, v35);
        v35[2] = v100;
        v101 = &v35[2 * v94];
        v101[4] = v88;
        v101[5] = v27;
        swift_release();
        swift_release();
        goto LABEL_64;
      }
    }
    v35 = sub_1A9CADFC8((_QWORD *)(v8 > 1), v41, 1, v35);
    v8 = v35[3];
    v44 = v8 >> 1;
    goto LABEL_11;
  }
  sub_1A9B94CA0(0, &qword_1ED263318, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_1A9CEB520;
  v106 = sub_1A9CE7C68();
  v49 = v17;
  v50 = v1;
  v51 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v51(v49, *MEMORY[0x1E0CD86E0], v9);
  sub_1A9C82AA8(v8);
  v52 = (void *)objc_opt_self();
  v51(v14, *MEMORY[0x1E0CD86D0], v9);
  v53 = sub_1A9CE6F60();
  v54 = *(void (**)(char *, uint64_t))(v10 + 8);
  v54(v14, v9);
  v55 = v108;
  (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v5, *MEMORY[0x1E0CDB2D8], v50);
  v56 = sub_1A9CE6F60();
  v57 = *(void (**)(char *, uint64_t))(v55 + 8);
  v57(v5, v50);
  objc_msgSend(v52, sel_somnogramBackgroundOpacityWithIsDarkMode_isHighContrast_isGrayScale_, v53 & 1, v56 & 1, 1);
  v57((char *)v8, v50);
  v54(v49, v9);
  v58 = sub_1A9CE7CC8();
  swift_release();
  v59 = v107;
  *(_QWORD *)(v107 + 32) = v58;
  v109 = v59;
  sub_1A9CE83E8();
  return MEMORY[0x1AF41EBEC](v109);
}

uint64_t sub_1A9B9D06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v2 = sub_1A9CE6BAC();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for Somnogram(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  sub_1A9B92F34(0, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v25 - v10;
  v12 = sub_1A9CE642C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A9CE6B70();
  MEMORY[0x1E0C80A78](v17, v18);
  v19 = sub_1A9CE6B4C();
  MEMORY[0x1E0C80A78](v19, v20);
  sub_1A9CE6B40();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0CB1178], v12);
  v21 = sub_1A9CE6444();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
  sub_1A9CE6B58();
  sub_1A9BAAEE4((uint64_t)v11, (uint64_t)&qword_1ED262DF0, (uint64_t)MEMORY[0x1E0CB11F0], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_1A9BA6F90(v25[0], (uint64_t)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  v22 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v23 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for Somnogram);
  sub_1A9CE6BA0();
  sub_1A9BA97CC(0, &qword_1EEB43C30, sub_1A9BA9080, sub_1A9BA9110);
  sub_1A9BA959C();
  return sub_1A9CE6CA8();
}

uint64_t sub_1A9B9D340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t result;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t *);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[4];
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v113 = a2;
  sub_1A9BAAA78(0, &qword_1EEB43CB0, sub_1A9BA9080, sub_1A9BA9110);
  v112 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v111 = (uint64_t)&v96 - v5;
  v6 = sub_1A9CE6BDC();
  MEMORY[0x1E0C80A78](v6, v7);
  v100 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE6C00();
  MEMORY[0x1E0C80A78](v9, v10);
  v99 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA912C();
  v109 = v12;
  v104 = *(v12 - 1);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v98 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v97 = (char *)&v96 - v17;
  v105 = type metadata accessor for Somnogram(0);
  v19 = MEMORY[0x1E0C80A78](v105, v18);
  v103 = (uint64_t)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v21);
  v106 = (uint64_t)&v96 - v22;
  sub_1A9BA9110(0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v110 = (uint64_t)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v27);
  v115 = (char *)&v96 - v28;
  v102 = sub_1A9CE6C9C();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v29);
  v31 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA909C(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v36 = MEMORY[0x1E0C80A78](v32, v35);
  v38 = (char *)&v96 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v39);
  v41 = (char *)&v96 - v40;
  sub_1A9BA9080(0);
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v108 = (uint64_t)&v96 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v46);
  v114 = (char *)&v96 - v47;
  v48 = sub_1A9CE6CE4();
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v50);
  v52 = (char *)&v96 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1A9CE6CD8();
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  v96 = a1;
  v54(v52, a1, v48);
  if (!v53)
  {
    v57 = 1;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    v58 = v105;
    v59 = v107;
    if ((*(_BYTE *)(v107 + *(int *)(v105 + 20)) & 0x80) != 0)
    {
      v63 = 1;
      v64 = v109;
      v62 = (uint64_t)v114;
    }
    else
    {
      sub_1A9CE6F84();
      v123 = v120;
      v124 = v121;
      v125 = v122;
      sub_1A9CE6C84();
      v60 = v102;
      sub_1A9CE6C54();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v31, v60);
      v61 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v61(v41, v38, v33);
      v62 = (uint64_t)v114;
      v61(v114, v41, v33);
      v63 = 0;
      v64 = v109;
    }
    v65 = (uint64_t)v115;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v62, v63, 1, v33);
    v66 = v106;
    sub_1A9BA6F90(v59, v106, type metadata accessor for Somnogram);
    if (v57)
    {
      v67 = *(_QWORD *)(v66 + *(int *)(v58 + 20));
      v68 = v103;
      sub_1A9BA6F90(v66, v103, type metadata accessor for Somnogram);
      if ((v67 & 1) != 0)
      {
        sub_1A9B97190(v68, type metadata accessor for Somnogram);
        sub_1A9B97190(v66, type metadata accessor for Somnogram);
LABEL_15:
        if (sub_1A9CE6CD8())
          sub_1A9CE8034();
        else
          sub_1A9CE8028();
        v106 = v73;
        v105 = v72;
        v74 = sub_1A9CE6BE8();
        v109 = &v96;
        MEMORY[0x1E0C80A78](v74, v75);
        sub_1A9CE6BD0();
        sub_1A9BA9218(0);
        v77 = v76;
        sub_1A9BA92EC();
        v79 = v78;
        sub_1A9BA93F0();
        v81 = v80;
        v82 = sub_1A9BA9468(&qword_1ED262AA0, (uint64_t (*)(uint64_t))sub_1A9BA92EC, (uint64_t (*)(void))sub_1A9BA94F4);
        v83 = sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
        v116 = v79;
        v117 = v81;
        v118 = v82;
        v119 = v83;
        v95[2] = v77;
        v95[3] = swift_getOpaqueTypeConformance2();
        v95[0] = sub_1A9BAAAE8;
        v95[1] = v95;
        v84 = v98;
        sub_1A9CE6B7C();
        v85 = v104;
        v86 = *(void (**)(char *, char *, uint64_t *))(v104 + 32);
        v87 = v97;
        v86(v97, v84, v64);
        v65 = (uint64_t)v115;
        v86(v115, v87, v64);
        v71 = v85;
        v70 = 0;
        v62 = (uint64_t)v114;
        goto LABEL_19;
      }
      v69 = *(_QWORD *)(v68 + *(int *)(v58 + 20));
      sub_1A9B97190(v68, type metadata accessor for Somnogram);
      sub_1A9B97190(v66, type metadata accessor for Somnogram);
      if ((v69 & 0x80) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_1A9B97190(v66, type metadata accessor for Somnogram);
    }
    v70 = 1;
    v71 = v104;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v71 + 56))(v65, v70, 1, v64);
    v88 = v108;
    sub_1A9BA6F90(v62, v108, (uint64_t (*)(_QWORD))sub_1A9BA9080);
    v89 = v110;
    sub_1A9BA6F90(v65, v110, (uint64_t (*)(_QWORD))sub_1A9BA9110);
    sub_1A9BA9644();
    v90 = v111;
    sub_1A9BA6F90(v88, v111, (uint64_t (*)(_QWORD))sub_1A9BA9080);
    sub_1A9BA409C(&qword_1ED262A98, (uint64_t (*)(uint64_t))sub_1A9BA9110, sub_1A9BA96C8, MEMORY[0x1E0C93E10]);
    v91 = v112;
    v92 = v90 + *(int *)(v112 + 48);
    sub_1A9BA6F90(v89, v92, (uint64_t (*)(_QWORD))sub_1A9BA9110);
    v93 = v90;
    v94 = v113;
    sub_1A9BA0D6C(v93, v113, (uint64_t (*)(_QWORD))sub_1A9BA9080);
    sub_1A9BA0D6C(v92, v94 + *(int *)(v91 + 48), (uint64_t (*)(_QWORD))sub_1A9BA9110);
    sub_1A9B97190(v65, (uint64_t (*)(_QWORD))sub_1A9BA9110);
    sub_1A9B97190(v62, (uint64_t (*)(_QWORD))sub_1A9BA9080);
    sub_1A9B97190(v89, (uint64_t (*)(_QWORD))sub_1A9BA9110);
    return sub_1A9B97190(v88, (uint64_t (*)(_QWORD))sub_1A9BA9080);
  }
  v55 = sub_1A9CE6CD8();
  result = sub_1A9CE6CCC();
  if (!__OFSUB__(result, 1))
  {
    v57 = v55 == result - 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9B9DBB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = sub_1A9CE6B70();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = sub_1A9CE6BAC();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for Somnogram(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = sub_1A9CE6B4C();
  MEMORY[0x1E0C80A78](v10, v11);
  sub_1A9CE6B40();
  sub_1A9BA6F90(a1, (uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Somnogram);
  v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v13 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for Somnogram);
  sub_1A9CE6BA0();
  sub_1A9CE6B64();
  sub_1A9BA97CC(0, &qword_1EEB43C50, (void (*)(uint64_t))sub_1A9BA9840, sub_1A9BA98AC);
  sub_1A9BA9A50();
  return sub_1A9CE6CA8();
}

uint64_t sub_1A9B9DD80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[4];
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v97 = a2;
  sub_1A9BAAA78(0, &qword_1EEB43CA8, (void (*)(uint64_t))sub_1A9BA9840, sub_1A9BA98AC);
  v96 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v95 = (uint64_t)&v80 - v5;
  v6 = sub_1A9CE6BDC();
  MEMORY[0x1E0C80A78](v6, v7);
  v88 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE6C00();
  MEMORY[0x1E0C80A78](v9, v10);
  v87 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA98AC(0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v94 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v80 - v17;
  sub_1A9BAAA78(0, &qword_1EEB42B70, (void (*)(uint64_t))MEMORY[0x1E0C933F0], (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  v93 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v92 = (char *)&v80 - v21;
  v22 = sub_1A9CE6C78();
  MEMORY[0x1E0C80A78](v22, v23);
  v24 = sub_1A9CE6C9C();
  v91 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v90 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v80 - v29;
  v31 = sub_1A9CE6AD4();
  v32 = *(_QWORD *)(v31 - 8);
  v34 = MEMORY[0x1E0C80A78](v31, v33);
  v36 = (char *)&v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v37);
  v39 = (char *)&v80 - v38;
  sub_1A9BA9840();
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v44 = (char *)&v80 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v45);
  v98 = (uint64_t)&v80 - v46;
  v89 = a1;
  if (sub_1A9CE6CD8())
  {
    sub_1A9B94CA0(0, &qword_1ED263310, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v86 = v18;
    v47 = swift_allocObject();
    v82 = xmmword_1A9CEB530;
    v83 = xmmword_1A9CED620;
    *(_OWORD *)(v47 + 16) = xmmword_1A9CEB530;
    *(_OWORD *)(v47 + 32) = xmmword_1A9CED620;
    sub_1A9CE6F84();
    v110 = v101;
    v111 = v102;
    v112 = v103;
    sub_1A9CE6AC8();
    sub_1A9CE6C6C();
    v48 = swift_allocObject();
    v49 = v83;
    *(_OWORD *)(v48 + 16) = v82;
    *(_OWORD *)(v48 + 32) = v49;
    sub_1A9CE6F84();
    v107 = v104;
    v108 = v105;
    v109 = v106;
    sub_1A9CE6C90();
    v50 = v39;
    v85 = v39;
    v51 = v32;
    v52 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v52(v36, v50, v31);
    v53 = v36;
    v84 = v36;
    v54 = v30;
    v81 = v30;
    v55 = v91;
    v56 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
    v57 = v90;
    v56(v90, v54, v24);
    v58 = v92;
    v52(v92, v53, v31);
    v59 = v93;
    v60 = &v58[*(int *)(v93 + 48)];
    v56(v60, v57, v24);
    v18 = v86;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v44, v58, v31);
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v44[*(int *)(v59 + 48)], v60, v24);
    v61 = *(void (**)(char *, uint64_t))(v55 + 8);
    v61(v81, v24);
    v62 = *(void (**)(char *, uint64_t))(v51 + 8);
    v62(v85, v31);
    v61(v57, v24);
    v62(v84, v31);
    sub_1A9BA97CC(0, &qword_1EEB43C60, (void (*)(uint64_t))MEMORY[0x1E0C933F0], (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v44, 0, 1, v63);
    v64 = v98;
    sub_1A9BA0D6C((uint64_t)v44, v98, (uint64_t (*)(_QWORD))sub_1A9BA9840);
  }
  else
  {
    sub_1A9BA97CC(0, &qword_1EEB43C60, (void (*)(uint64_t))MEMORY[0x1E0C933F0], (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    v64 = v98;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v98, 1, 1, v65);
  }
  v66 = (uint64_t)v44;
  if ((*(_BYTE *)(v99 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 0x10) != 0)
  {
    sub_1A9BA98C8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v18, 1, 1, v71);
    goto LABEL_9;
  }
  result = sub_1A9CE6CC0();
  if (v100)
  {
    result = _s13SleepHealthUI0A5StageO8rawValueACSgSS_tcfC_0();
    if (result != 5)
    {
      MEMORY[0x1E0C80A78](result, v68);
      sub_1A9CE6BF4();
      sub_1A9CE6BD0();
      sub_1A9BA9940();
      v79[2] = v69;
      v79[3] = sub_1A9B92B9C(&qword_1ED263258, (uint64_t (*)(uint64_t))sub_1A9BA9940, MEMORY[0x1E0CDFCC0]);
      v79[0] = sub_1A9BAA9E0;
      v79[1] = v79;
      sub_1A9CE6B7C();
      sub_1A9BA98C8();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v18, 0, 1, v70);
LABEL_9:
      sub_1A9BA6F90(v64, (uint64_t)v44, (uint64_t (*)(_QWORD))sub_1A9BA9840);
      v72 = v94;
      sub_1A9BA6F90((uint64_t)v18, v94, (uint64_t (*)(_QWORD))sub_1A9BA98AC);
      v73 = MEMORY[0x1E0C93E10];
      sub_1A9BA409C(&qword_1EEB43C70, (uint64_t (*)(uint64_t))sub_1A9BA9840, (uint64_t (*)(void))sub_1A9BA9B20, MEMORY[0x1E0C93E10]);
      v74 = v95;
      sub_1A9BA6F90(v66, v95, (uint64_t (*)(_QWORD))sub_1A9BA9840);
      sub_1A9BA409C(&qword_1ED263110, (uint64_t (*)(uint64_t))sub_1A9BA98AC, sub_1A9BA9BA0, v73);
      v75 = v96;
      v76 = v74 + *(int *)(v96 + 48);
      sub_1A9BA6F90(v72, v76, (uint64_t (*)(_QWORD))sub_1A9BA98AC);
      v77 = v74;
      v78 = v97;
      sub_1A9BA0D6C(v77, v97, (uint64_t (*)(_QWORD))sub_1A9BA9840);
      sub_1A9BA0D6C(v76, v78 + *(int *)(v75 + 48), (uint64_t (*)(_QWORD))sub_1A9BA98AC);
      sub_1A9B97190((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BA98AC);
      sub_1A9B97190(v64, (uint64_t (*)(_QWORD))sub_1A9BA9840);
      sub_1A9B97190(v72, (uint64_t (*)(_QWORD))sub_1A9BA98AC);
      return sub_1A9B97190(v66, (uint64_t (*)(_QWORD))sub_1A9BA9840);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9B9E5F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v20;

  sub_1A9BA9BBC(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B95370(0, &qword_1ED2631A8, v10, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v20 - v14;
  sub_1A9CE6BB8();
  sub_1A9B92B9C(&qword_1ED263128, (uint64_t (*)(uint64_t))MEMORY[0x1E0C937B0], MEMORY[0x1E0C937A8]);
  sub_1A9CE7A58();
  if ((*(_QWORD *)(a1 + *(int *)(type metadata accessor for Somnogram(0) + 20)) & 4) != 0)
    v16 = 0x4000000000000000;
  else
    v16 = 0x4008000000000000;
  v17 = sub_1A9CE7734();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v15, v9, v5);
  v18 = &v15[*(int *)(v12 + 36)];
  *v18 = v17;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v16;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = v16;
  v18[40] = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return sub_1A9BAA704((uint64_t)v15, a2, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778]);
}

uint64_t sub_1A9B9E78C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t OpaqueTypeConformance2;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v135 = a3;
  sub_1A9BA7858(0);
  v139 = v5;
  OpaqueTypeConformance2 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABD28(0, &qword_1EEB43CA0, (uint64_t (*)(uint64_t))sub_1A9BA7778, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  v134 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v138 = (char *)&v127 - v11;
  v12 = sub_1A9CE71E8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABD28(0, &qword_1EEB43BE8, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v18 = v17;
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v127 - v20;
  sub_1A9BA7778(0);
  v137 = v22;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v27);
  v30 = (char *)&v127 - v29;
  v147 = a2;
  if ((a1 & 1) != 0)
  {
    v31 = v28;
    sub_1A9CE71DC();
    KeyPath = swift_getKeyPath();
    v33 = (uint64_t *)&v21[*(int *)(v18 + 36)];
    sub_1A9BA9D0C(0);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v33 + *(int *)(v34 + 28), v16, v12);
    *v33 = KeyPath;
    (*(void (**)(char *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 16))(v21, v133, v139);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_1A9CE7FF8();
    sub_1A9BA8B6C(0);
    v36 = v35;
    v37 = sub_1A9BA9D28();
    v38 = sub_1A9BA409C(&qword_1ED262B28, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, sub_1A9BAA0A4, MEMORY[0x1E0DEAF30]);
    sub_1A9CE79E0();
    swift_release();
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0];
    sub_1A9BAA5E4((uint64_t)v21, &qword_1EEB43BE8, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v131 = v31;
    v40 = v137;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v30, v26, v137);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v138, v30, v40);
    swift_storeEnumTagMultiPayload();
    v140 = v18;
    v141 = v36;
    v142 = v37;
    v143 = v38;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    sub_1A9BA7B88(255);
    v134 = v41;
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], v39);
    v133 = v42;
    sub_1A9BA7E54(255);
    v132 = v43;
    sub_1A9BA80F8(255);
    v130 = v44;
    v45 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v47 = v46;
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v45);
    v129 = v48;
    sub_1A9BA830C(255);
    v128 = v49;
    sub_1A9BA9754();
    v127 = v50;
    sub_1A9BA84C4(255);
    v52 = v51;
    sub_1A9BA865C(255);
    v54 = v53;
    sub_1A9BA8798(255);
    v56 = v55;
    sub_1A9BA9008();
    v58 = v57;
    sub_1A9BA8874(255);
    v60 = v59;
    sub_1A9BA8924();
    v62 = v61;
    v63 = sub_1A9CE6BC4();
    v64 = sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    v140 = v62;
    v141 = v63;
    v142 = v64;
    v143 = MEMORY[0x1E0C93870];
    v65 = swift_getOpaqueTypeConformance2();
    v140 = v60;
    v141 = v65;
    v66 = swift_getOpaqueTypeConformance2();
    v67 = MEMORY[0x1E0C93BA0];
    v68 = sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    v140 = v56;
    v141 = v58;
    v142 = v66;
    v143 = v68;
    v69 = swift_getOpaqueTypeConformance2();
    v70 = sub_1A9BA96E4();
    v140 = v54;
    v141 = v47;
    v142 = v69;
    v143 = v70;
    v71 = swift_getOpaqueTypeConformance2();
    v140 = v52;
    v141 = v71;
    v72 = swift_getOpaqueTypeConformance2();
    v73 = sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v67);
    v140 = v128;
    v141 = v127;
    v142 = v72;
    v143 = v73;
    v74 = swift_getOpaqueTypeConformance2();
    v75 = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v140 = v130;
    v141 = v47;
    v142 = v129;
    v143 = v74;
    v144 = v70;
    v145 = v75;
    v146 = MEMORY[0x1E0CDF598];
    v76 = swift_getOpaqueTypeConformance2();
    v140 = (uint64_t)v132;
    v141 = v76;
    v77 = swift_getOpaqueTypeConformance2();
    v78 = sub_1A9BA9C48();
    v140 = v134;
    v141 = v133;
    v142 = v77;
    v143 = v78;
    swift_getOpaqueTypeConformance2();
    v79 = v137;
    sub_1A9CE74E8();
    return (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v30, v79);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 16);
    v132 = v8;
    v82 = v139;
    v81(v8, v133, v139);
    v81(v138, (uint64_t)v8, v82);
    swift_storeEnumTagMultiPayload();
    sub_1A9BA8B6C(255);
    v84 = v83;
    v85 = sub_1A9BA9D28();
    v86 = sub_1A9BA409C(&qword_1ED262B28, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, sub_1A9BAA0A4, MEMORY[0x1E0DEAF30]);
    v140 = v18;
    v141 = v84;
    v142 = v85;
    v143 = v86;
    v134 = swift_getOpaqueTypeConformance2();
    sub_1A9BA7B88(255);
    v133 = v87;
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v131 = v88;
    sub_1A9BA7E54(255);
    v130 = v89;
    sub_1A9BA80F8(255);
    v129 = v90;
    v91 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v93 = v92;
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v91);
    v128 = v94;
    sub_1A9BA830C(255);
    v127 = v95;
    sub_1A9BA9754();
    v97 = v96;
    sub_1A9BA84C4(255);
    v99 = v98;
    sub_1A9BA865C(255);
    v101 = v100;
    sub_1A9BA8798(255);
    v103 = v102;
    sub_1A9BA9008();
    v105 = v104;
    sub_1A9BA8874(255);
    v107 = v106;
    sub_1A9BA8924();
    v109 = v108;
    v110 = sub_1A9CE6BC4();
    v111 = sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    v140 = v109;
    v141 = v110;
    v142 = v111;
    v143 = MEMORY[0x1E0C93870];
    v112 = swift_getOpaqueTypeConformance2();
    v140 = v107;
    v141 = v112;
    v113 = swift_getOpaqueTypeConformance2();
    v114 = MEMORY[0x1E0C93BA0];
    v115 = sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    v140 = v103;
    v141 = v105;
    v142 = v113;
    v143 = v115;
    v116 = swift_getOpaqueTypeConformance2();
    v117 = sub_1A9BA96E4();
    v140 = v101;
    v141 = v93;
    v142 = v116;
    v143 = v117;
    v118 = swift_getOpaqueTypeConformance2();
    v140 = v99;
    v141 = v118;
    v119 = swift_getOpaqueTypeConformance2();
    v120 = sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v114);
    v140 = v127;
    v141 = v97;
    v142 = v119;
    v143 = v120;
    v121 = swift_getOpaqueTypeConformance2();
    v122 = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v140 = v129;
    v141 = v93;
    v142 = v128;
    v143 = v121;
    v144 = v117;
    v145 = v122;
    v146 = MEMORY[0x1E0CDF598];
    v123 = swift_getOpaqueTypeConformance2();
    v140 = v130;
    v141 = v123;
    v124 = swift_getOpaqueTypeConformance2();
    v125 = sub_1A9BA9C48();
    v140 = v133;
    v141 = v131;
    v142 = v124;
    v143 = v125;
    swift_getOpaqueTypeConformance2();
    v126 = v139;
    sub_1A9CE74E8();
    return (*(uint64_t (**)(char *, uint64_t))(OpaqueTypeConformance2 + 8))(v132, v126);
  }
}

uint64_t sub_1A9B9F15C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  char v31;

  sub_1A9BA9218(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v30 - v15;
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v30 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v30 - v22;
  sub_1A9B9F2F0(a1, (uint64_t)&v30 - v22);
  sub_1A9B9F2F0(a2, (uint64_t)v20);
  v24 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v24(v16, v23, v7);
  v31 = 1;
  v24(v12, v20, v7);
  v24(a3, v16, v7);
  sub_1A9BAA538();
  v26 = &a3[*(int *)(v25 + 48)];
  v27 = v31;
  *(_QWORD *)v26 = 0;
  v26[8] = v27;
  v24(&a3[*(int *)(v25 + 64)], v12, v7);
  v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  v28(v20, v7);
  v28(v23, v7);
  v28(v12, v7);
  return ((uint64_t (*)(char *, uint64_t))v28)(v16, v7);
}

id sub_1A9B9F2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  id result;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  id v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  _BYTE v92[26];

  *(_QWORD *)&v73 = a1;
  sub_1A9BA93F0();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE7878();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  *(_QWORD *)&v74 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A9CE7884();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for Somnogram(0);
  v19 = v18[5];
  *(_QWORD *)&v72 = v2;
  LOBYTE(v19) = *(_BYTE *)(v2 + v19);
  v70 = a2;
  v69 = v5;
  v77 = v8;
  v76 = v9;
  v75 = v10;
  if ((v19 & 0x40) != 0)
  {
    result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior, v69, v70);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v22 = result;
    v23 = objc_msgSend(result, sel_isAppleWatch);

    if (!v23)
    {
      if (qword_1EEB42EC0 != -1)
        goto LABEL_14;
      goto LABEL_7;
    }
    v20 = sub_1A9CE789C();
  }
  else
  {
    sub_1A9CE78B4();
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, *MEMORY[0x1E0CDD6D8], v13);
    sub_1A9CE78A8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v20 = sub_1A9CE77E8();
    swift_release();
  }
  while (1)
  {
    v24 = v72;
    v25 = *(void **)(v72 + v18[6]);
    v26 = (void *)sub_1A9CE6258();
    v27 = objc_msgSend(v25, sel_stringFromDate_, v26);

    v28 = sub_1A9CE82E0();
    v30 = v29;

    *(_QWORD *)&v78 = v28;
    *((_QWORD *)&v78 + 1) = v30;
    sub_1A9BA8EA4();
    v31 = sub_1A9CE79C8();
    v33 = v32;
    v35 = v34 & 1;
    swift_retain();
    v36 = sub_1A9CE7998();
    v38 = v37;
    v40 = v39;
    *(_QWORD *)&v73 = v41;
    swift_release();
    v42 = v40 & 1;
    sub_1A9BAA670(v31, v33, v35);
    swift_bridgeObjectRelease();
    v43 = v74;
    sub_1A9C82AD4(v74);
    v44 = v24 + v18[10];
    v45 = *(_QWORD *)v44;
    v46 = *(_BYTE *)(v44 + 8);
    sub_1A9BAADF4(*(_QWORD *)v44, v46);
    v47 = sub_1A9C828C0(v45, v46);
    sub_1A9BAAED8(v45, v46);
    if ((v47 & 1) != 0)
    {
      v48 = sub_1A9CE774C();
      v18 = (int *)v20;
      sub_1A9CE7788();
      sub_1A9CE6F24();
      v87 = v36;
      v88 = v38;
      v49 = v38;
      v50 = v36;
      v51 = v49;
      v89 = v42;
      v90 = v73;
      *(_QWORD *)&v91 = v48;
      *((_QWORD *)&v91 + 1) = v52;
      *(_QWORD *)v92 = v53;
      *(_QWORD *)&v92[8] = v54;
      *(_QWORD *)&v92[16] = v55;
      *(_WORD *)&v92[24] = 0;
      v56 = v50;
      v57 = v49;
    }
    else
    {
      v18 = (int *)v20;
      v87 = v36;
      v88 = v38;
      v58 = v38;
      v50 = v36;
      v51 = v58;
      v89 = v42;
      v90 = v73;
      v91 = 0u;
      memset(v92, 0, 25);
      v92[25] = 1;
      v56 = v50;
      v57 = v58;
    }
    sub_1A9BAA680(v56, v57, v42);
    v59 = MEMORY[0x1E0CD9778];
    sub_1A9BAAB64(0, &qword_1ED263190, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9BABAE0(&qword_1ED262AB0, &qword_1ED263190, v59, MEMORY[0x1E0CD9758]);
    swift_bridgeObjectRetain();
    sub_1A9CE74E8();
    v74 = v78;
    v73 = v79;
    v72 = v80;
    v71 = v81;
    v60 = v82;
    v61 = v83;
    LOBYTE(v59) = v84;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v43, v76);
    sub_1A9BAA670(v50, v51, v42);
    swift_bridgeObjectRelease();
    v62 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
    v63 = MEMORY[0x1AF41E85C](v62);
    KeyPath = swift_getKeyPath();
    v78 = v74;
    v79 = v73;
    v80 = v72;
    v81 = v71;
    v82 = v60;
    v83 = v61;
    v84 = v59;
    v85 = KeyPath;
    v86 = v63;
    v65 = *MEMORY[0x1E0CD9938];
    v66 = sub_1A9CE7110();
    v67 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
    v68 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v77, v65, v66);
    sub_1A9B92B9C(&qword_1ED263188, v67, MEMORY[0x1E0CD9990]);
    if ((sub_1A9CE82A4() & 1) != 0)
      break;
    __break(1u);
LABEL_14:
    swift_once();
LABEL_7:
    v20 = qword_1EEB49800;
    swift_retain();
  }
  sub_1A9BA92EC();
  sub_1A9BA9468(&qword_1ED262AA0, (uint64_t (*)(uint64_t))sub_1A9BA92EC, (uint64_t (*)(void))sub_1A9BA94F4);
  sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
  sub_1A9CE7AF4();
  swift_release();
  sub_1A9B97190(v68, (uint64_t (*)(_QWORD))sub_1A9BA93F0);
  sub_1A9BAA698(v78, *((uint64_t *)&v78 + 1), v79);
  swift_release();
  return (id)swift_release();
}

uint64_t sub_1A9B9F9B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - v4;
  sub_1A9BA9218(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE62E8();
  sub_1A9CE6CC0();
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1A9B9F2F0((uint64_t)v5, (uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v11, v7);
  }
  return result;
}

__n128 sub_1A9B9FAF0@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v6 = sub_1A9CE7404();
  sub_1A9B9FB74(a1, a2, (uint64_t)&v13);
  v7 = v14;
  v8 = v15;
  v9 = v18;
  result = v13;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(__n128 *)(a3 + 24) = result;
  *(_BYTE *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 72) = v12;
  *(_BYTE *)(a3 + 88) = v9;
  return result;
}

uint64_t sub_1A9B9FB74@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v49 - v8;
  HIDWORD(v49) = a1;
  sub_1A9C312B0(a1);
  v55 = v10;
  v56 = v11;
  v50 = sub_1A9BA8EA4();
  v12 = sub_1A9CE79C8();
  v14 = v13;
  v16 = v15 & 1;
  v17 = (void *)objc_opt_self();
  MEMORY[0x1AF41E85C](objc_msgSend(v17, sel_labelColor));
  v18 = sub_1A9CE7968();
  v51 = v19;
  v52 = v18;
  v21 = v20;
  v53 = v22;
  swift_release();
  sub_1A9BAA670(v12, v14, v16);
  swift_bridgeObjectRelease();
  v23 = *(int *)(type metadata accessor for SleepStagesModel(0) + 20);
  v54 = a2;
  sub_1A9BAA620(a2 + v23, (uint64_t)v9, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B92F34);
  v24 = type metadata accessor for SleepMetricsWrapper(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v9, 1, v24) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v9, (uint64_t)&qword_1ED2633F0, (uint64_t)type metadata accessor for SleepMetricsWrapper, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v25 = (void *)sub_1A9CE80C4();
    sub_1A9B97190((uint64_t)v9, type metadata accessor for SleepMetricsWrapper);
    sub_1A9C34BD4(SBYTE4(v49));

  }
  HIDWORD(v49) = v21 & 1;
  v26 = sub_1A9CE8D24();
  v55 = sub_1A9C1C100(v26, v27);
  v56 = v28;
  v29 = sub_1A9CE79C8();
  v31 = v30;
  v33 = v32 & 1;
  MEMORY[0x1AF41E85C](objc_msgSend(v17, sel_secondaryLabelColor));
  v34 = sub_1A9CE7968();
  v36 = v35;
  v38 = v37;
  swift_release();
  sub_1A9BAA670(v29, v31, v33);
  swift_bridgeObjectRelease();
  type metadata accessor for Somnogram(0);
  sub_1A9C732EC(v34, v36, v38 & 1, (uint64_t)&v55);
  sub_1A9BAA670(v34, v36, v38 & 1);
  swift_bridgeObjectRelease();
  v39 = v55;
  v40 = v56;
  v41 = v57;
  v42 = v58;
  v43 = v59;
  v45 = v51;
  v44 = v52;
  *(_QWORD *)a3 = v52;
  *(_QWORD *)(a3 + 8) = v45;
  v46 = BYTE4(v49);
  *(_BYTE *)(a3 + 16) = BYTE4(v49);
  *(_QWORD *)(a3 + 24) = v53;
  *(_QWORD *)(a3 + 32) = v39;
  *(_QWORD *)(a3 + 40) = v40;
  *(_QWORD *)(a3 + 48) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  *(_BYTE *)(a3 + 64) = v43 & 1;
  v47 = v46;
  sub_1A9BAA680(v44, v45, v46);
  swift_bridgeObjectRetain();
  sub_1A9BAA9EC(v39, v40, v41);
  sub_1A9BAA698(v39, v40, v41);
  sub_1A9BAA670(v44, v45, v47);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9B9FF18()
{
  return sub_1A9CE7224();
}

uint64_t sub_1A9B9FF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BA7308(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CDA4E8]);
}

uint64_t sub_1A9B9FF4C()
{
  return sub_1A9CE72B4();
}

uint64_t sub_1A9B9FF6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_1A9CE73F8();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1A9BA759C(0, &qword_1EEB43BB8, sub_1A9BA7600);
  return sub_1A9B9A364(v1, (char *)(a1 + *(int *)(v3 + 44)));
}

uint64_t GridView.body.getter@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = sub_1A9BA0F4C;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_1A9BA0010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = sub_1A9CE7008();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  result = MEMORY[0x1E0C80A78](v4, v7);
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if (((a2 - 1) & 0x8000000000000000) == 0)
  {
    v11[0] = 0;
    v11[1] = a2 - 1;
    swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = a2;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_1A9BAAB64(0, &qword_1ED262A20, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1A9B95370(0, &qword_1ED2629F0, (uint64_t (*)(uint64_t))sub_1A9BA3EC0, MEMORY[0x1E0CD9DB0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9BA3FD0();
    sub_1A9BA4100();
    return sub_1A9CE7F50();
  }
  __break(1u);
  return result;
}

double sub_1A9BA01A8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t KeyPath;
  double v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = *a1;
  sub_1A9CE6FFC();
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = v12;
  sub_1A9CE6F84();
  v5 = v19;
  v6 = v20;
  v7 = v21;
  v3 = v22;
  v8 = v23;
  if (qword_1ED262A00 != -1)
LABEL_5:
    swift_once();
  v13 = v4 / (double)a2;
  v14 = v13 * (double)(v11 + 1)
      + v13 * 0.5
      + (v13 * (double)v11 + v13 * 0.5 - (v13 * (double)(v11 + 1) + v13 * 0.5)) * 0.5;
  v15 = qword_1ED2629F8;
  KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1A9CE6FFC();
  result = v17 * 0.5;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = KeyPath;
  *(_QWORD *)(a3 + 48) = v15;
  *(double *)(a3 + 56) = result;
  *(double *)(a3 + 64) = v14;
  return result;
}

uint64_t sub_1A9BA02E4@<X0>(uint64_t (**a1)(uint64_t)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a1 = sub_1A9BAC3B0;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_1A9BA0328(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v9;
  CGRect v10;
  CGRect v11;

  CGRectGetMinX(*(CGRect *)&a1);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  CGRectGetMidY(v9);
  sub_1A9CE7920();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMaxX(v10);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetMidY(v11);
  return sub_1A9CE792C();
}

double sub_1A9BA03CC@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  sub_1A9CE7950();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1A9BA0428()
{
  return sub_1A9CE7D7C();
}

void (*sub_1A9BA0444(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1A9CE6EF4();
  return sub_1A9BA04A0;
}

void sub_1A9BA04A0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1A9BA04D0()
{
  sub_1A9BA3F2C();
  return sub_1A9CE7DB8();
}

uint64_t sub_1A9BA0520()
{
  sub_1A9BA3F2C();
  return sub_1A9CE7D88();
}

uint64_t sub_1A9BA0570()
{
  sub_1A9BA3F2C();
  return sub_1A9CE7DA0();
}

uint64_t sub_1A9BA05A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return sub_1A9BA05E0(a1, type metadata accessor for SleepDayModel.SegmentModel, (char *)sub_1A9BAAC34, (void (*)(char *))sub_1A9BAAC40, a2);
}

uint64_t sub_1A9BA05C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return sub_1A9BA05E0(a1, type metadata accessor for SleepStageSegment, (char *)sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08, a2);
}

uint64_t sub_1A9BA05E0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X2>, void (*a4)(char *)@<X3>, unint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(unint64_t, char *, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  void (*v56)(char *);
  char *v57;
  char *v58;
  char *v59;
  void (*v60)(char *, _QWORD, uint64_t, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  void (*v67)(char *);
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *);
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;

  v83 = a3;
  v84 = a4;
  v8 = sub_1A9CE62E8();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v78 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v77 = (char *)&v70 - v13;
  sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v73 = (char *)&v70 - v16;
  v82 = a2(0);
  v17 = *(_QWORD *)(v82 - 8);
  v19 = MEMORY[0x1E0C80A78](v82, v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)&v70 - v23;
  v25 = sub_1A9CE5F64();
  v26 = *(_QWORD *)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v76 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v75 = (char *)&v70 - v32;
  v34 = MEMORY[0x1E0C80A78](v31, v33);
  v79 = (char *)&v70 - v35;
  v37 = MEMORY[0x1E0C80A78](v34, v36);
  v74 = (char *)&v70 - v38;
  MEMORY[0x1E0C80A78](v37, v39);
  v41 = (char *)&v70 - v40;
  v42 = *(_QWORD *)(a1 + 16);
  if (!v42)
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a5, 1, 1, v25);
  v72 = v21;
  v70 = a5;
  v87 = MEMORY[0x1E0DEE9D8];
  sub_1A9BE04F4(0, v42, 0);
  v43 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v81 = *(_QWORD *)(v17 + 72);
  v71 = v43;
  v44 = v43;
  v85 = v25;
  do
  {
    ((void (*)(uint64_t, char *))v83)(v44, v24);
    v45 = &v24[*(int *)(v82 + 20)];
    v86 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v86(v41, v45, v25);
    v84(v24);
    v46 = v87;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1A9BE04F4(0, *(_QWORD *)(v46 + 16) + 1, 1);
      v46 = v87;
    }
    v48 = *(_QWORD *)(v46 + 16);
    v47 = *(_QWORD *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      sub_1A9BE04F4(v47 > 1, v48 + 1, 1);
      v46 = v87;
    }
    *(_QWORD *)(v46 + 16) = v48 + 1;
    v49 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v50 = *(_QWORD *)(v26 + 72);
    v51 = v46 + v49 + v50 * v48;
    v52 = *(void (**)(unint64_t, char *, uint64_t))(v26 + 32);
    v25 = v85;
    v52(v51, v41, v85);
    v87 = v46;
    v44 += v81;
    --v42;
  }
  while (v42);
  v53 = v72;
  ((void (*)(uint64_t, char *))v83)(v71, v72);
  v54 = v74;
  v55 = v86;
  v86(v74, &v53[*(int *)(v82 + 20)], v25);
  v84(v53);
  v55(v79, v54, v25);
  v56 = *(void (**)(char *))(v46 + 16);
  if (v56)
  {
    swift_retain();
    v57 = (char *)(v46 + v49);
    v58 = v73;
    v80 = v26;
    v59 = v75;
    while (1)
    {
      v86(v58, v57, v25);
      v60 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      v60(v58, 0, 1, v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v58, 1, v25) == 1)
        break;
      v82 = (uint64_t)v60;
      v52((unint64_t)v59, v58, v25);
      v61 = v79;
      sub_1A9CE5F34();
      v83 = v57;
      sub_1A9CE5F10();
      v84 = v56;
      v62 = v76;
      v25 = v85;
      v63 = v83;
      sub_1A9CE5F1C();
      v64 = *(void (**)(char *, uint64_t))(v80 + 8);
      v64(v59, v25);
      v64(v61, v25);
      v65 = v61;
      v26 = v80;
      v66 = v62;
      v67 = v84;
      v52((unint64_t)v65, v66, v25);
      v57 = &v63[v50];
      v56 = (void (*)(char *))((char *)v67 - 1);
      if (!v56)
        goto LABEL_15;
    }
  }
  else
  {
    v82 = *(_QWORD *)(v26 + 56);
    swift_retain();
    v58 = v73;
LABEL_15:
    v60 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v82;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v82)(v58, 1, 1, v25);
  }
  v69 = v70;
  swift_release();
  v52(v69, v79, v25);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v74, v25);
  swift_release();
  return ((uint64_t (*)(unint64_t, _QWORD, uint64_t, uint64_t))v60)(v69, 0, 1, v25);
}

double sub_1A9BA0B14(uint64_t a1)
{
  return sub_1A9BA0B4C(a1, type metadata accessor for SleepStageSegment, (void (*)(uint64_t, char *))sub_1A9BAACFC, (void (*)(char *))sub_1A9BAAD08);
}

double sub_1A9BA0B30(uint64_t a1)
{
  return sub_1A9BA0B4C(a1, type metadata accessor for SleepDayModel.SegmentModel, (void (*)(uint64_t, char *))sub_1A9BAAC34, (void (*)(char *))sub_1A9BAAC40);
}

double sub_1A9BA0B4C(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(uint64_t, char *), void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  void (*v25)(char *);
  uint64_t v26;

  v25 = a4;
  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1A9BE04AC(0, v11, 0);
    v12 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    v14 = v26;
    do
    {
      a3(v12, v10);
      sub_1A9CE5F4C();
      v16 = v15;
      v25(v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A9BE04AC(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v26;
      }
      v18 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v14 + 24);
      v19 = v18 + 1;
      if (v18 >= v17 >> 1)
      {
        sub_1A9BE04AC(v17 > 1, v18 + 1, 1);
        v14 = v26;
      }
      *(_QWORD *)(v14 + 16) = v19;
      *(_QWORD *)(v14 + 8 * v18 + 32) = v16;
      v12 += v13;
      --v11;
    }
    while (v11);
  }
  else
  {
    v14 = MEMORY[0x1E0DEE9D8];
    v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v19)
    {
      v21 = 0.0;
      goto LABEL_18;
    }
  }
  if (v19 >= 2)
  {
    v22 = 0;
    v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
    v21 = 0.0;
    do
    {
      v21 = v21 + *(double *)(v14 + 8 * v22 + 32) + *(double *)(v14 + 8 * v22 + 40);
      v22 += 2;
    }
    while (v20 != v22);
    goto LABEL_17;
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    v23 = *(double *)(v14 + 8 * v20++ + 32);
    v21 = v21 + v23;
LABEL_17:
    ;
  }
  while (v19 != v20);
LABEL_18:
  swift_bridgeObjectRelease();
  return v21;
}

unint64_t sub_1A9BA0D30()
{
  unint64_t result;

  result = qword_1ED2633D0;
  if (!qword_1ED2633D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED2633D0);
  }
  return result;
}

uint64_t sub_1A9BA0D6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A9BA0DB0()
{
  return sub_1A9BA0EF0((uint64_t (*)(uint64_t))sub_1A9B97FE8);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for SleepStagesChart(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for SleepStagesModel(0);
  v5 = v3 + *(int *)(v4 + 20);
  v6 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  v8 = v3 + *(int *)(v4 + 24);
  v9 = sub_1A9CE5F64();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return swift_deallocObject();
}

uint64_t sub_1A9BA0EE4()
{
  return sub_1A9BA0EF0((uint64_t (*)(uint64_t))sub_1A9B982DC);
}

uint64_t sub_1A9BA0EF0(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepStagesChart(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1A9BA0F3C()
{
  return swift_deallocObject();
}

uint64_t sub_1A9BA0F4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BA0010(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1A9BA0F58()
{
  unint64_t result;

  result = qword_1EEB438D8;
  if (!qword_1EEB438D8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesDiagram.Options, &type metadata for SleepStagesDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB438D8);
  }
  return result;
}

unint64_t sub_1A9BA0FA0()
{
  unint64_t result;

  result = qword_1EEB438E0;
  if (!qword_1EEB438E0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesDiagram.Options, &type metadata for SleepStagesDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB438E0);
  }
  return result;
}

unint64_t sub_1A9BA0FE8()
{
  unint64_t result;

  result = qword_1ED262ED0;
  if (!qword_1ED262ED0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesDiagram.Options, &type metadata for SleepStagesDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1ED262ED0);
  }
  return result;
}

unint64_t sub_1A9BA1030()
{
  unint64_t result;

  result = qword_1ED262ED8;
  if (!qword_1ED262ED8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesDiagram.Options, &type metadata for SleepStagesDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1ED262ED8);
  }
  return result;
}

uint64_t sub_1A9BA1074()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BA1084()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1A9BA1098()
{
  unint64_t result;

  result = qword_1EEB438E8;
  if (!qword_1EEB438E8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesChart.Options, &type metadata for SleepStagesChart.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB438E8);
  }
  return result;
}

unint64_t sub_1A9BA10E0()
{
  unint64_t result;

  result = qword_1EEB438F0;
  if (!qword_1EEB438F0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesChart.Options, &type metadata for SleepStagesChart.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB438F0);
  }
  return result;
}

unint64_t sub_1A9BA1128()
{
  unint64_t result;

  result = qword_1EEB438F8;
  if (!qword_1EEB438F8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesChart.Options, &type metadata for SleepStagesChart.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB438F8);
  }
  return result;
}

unint64_t sub_1A9BA1170()
{
  unint64_t result;

  result = qword_1EEB43900;
  if (!qword_1EEB43900)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStagesChart.Options, &type metadata for SleepStagesChart.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB43900);
  }
  return result;
}

uint64_t sub_1A9BA11B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BA11C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepStagesDiagram(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__dst;
  int *v27;
  char *v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v27 = (int *)type metadata accessor for SleepStagesModel(0);
    v28 = v9;
    v11 = v27[5];
    __dst = &v9[v11];
    v12 = &v10[v11];
    v13 = type metadata accessor for SleepMetricsWrapper(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(__dst, v12, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v19 = v27[6];
    v20 = &v28[v19];
    v21 = &v10[v19];
    v22 = sub_1A9CE5F64();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_QWORD *)&v28[v27[7]] = *(_QWORD *)&v10[v27[7]];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

_QWORD *initializeWithCopy for SleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__dst;
  uint64_t v25;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for SleepStagesModel(0);
  v10 = *(int *)(v9 + 20);
  __dst = &v7[v10];
  v25 = v9;
  v11 = &v8[v10];
  v12 = type metadata accessor for SleepMetricsWrapper(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v11, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v17 = *(int *)(v25 + 24);
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_1A9CE5F64();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)&v7[*(int *)(v25 + 28)] = *(_QWORD *)&v8[*(int *)(v25 + 28)];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithCopy for SleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  int *v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v31 = a3;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (int *)type metadata accessor for SleepStagesModel(0);
  v9 = v32[5];
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for SleepMetricsWrapper(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v17);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, v11, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  else
  {
    if (v16)
    {
      sub_1A9B97190((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v10, v11, v20);
  }
LABEL_9:
  v21 = v32[6];
  v22 = &v7[v21];
  v23 = &v8[v21];
  v24 = sub_1A9CE5F64();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_14;
  }
  if (v28)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_15:
  *(_QWORD *)&v7[v32[7]] = *(_QWORD *)&v8[v32[7]];
  *(_QWORD *)((char *)a1 + *(int *)(v31 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v31 + 24));
  return a1;
}

_OWORD *initializeWithTake for SleepStagesDiagram(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[6];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_1A9CE5F64();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for SleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  int *v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v32 = a3;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  v33 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = v33[5];
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v11, v12, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  else
  {
    if (v17)
    {
      sub_1A9B97190((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v11, v12, v21);
  }
LABEL_9:
  v22 = v33[6];
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = sub_1A9CE5F64();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_14;
  }
  if (v29)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_15:
  *(_QWORD *)&v8[v33[7]] = *(_QWORD *)&v9[v33[7]];
  *(_QWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v32 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesDiagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SleepStagesDiagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA1DB8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesDiagram.Options()
{
  return &type metadata for SleepStagesDiagram.Options;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneDaySleepStagesDiagram(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v25;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *(uint64_t *)((char *)a1 + v6) = *(uint64_t *)((char *)a2 + v6);
    v25 = (int *)type metadata accessor for SleepStagesModel(0);
    v9 = v25[5];
    v10 = &v7[v9];
    v11 = &v8[v9];
    v12 = type metadata accessor for SleepMetricsWrapper(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, v11, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = v25[6];
    v19 = &v7[v18];
    v20 = &v8[v18];
    v21 = sub_1A9CE5F64();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(_QWORD *)&v7[v25[7]] = *(_QWORD *)&v8[v25[7]];
  }
  return v3;
}

uint64_t _s13SleepHealthUI18SleepStagesDiagramVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for SleepStagesModel(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  v9 = v4 + *(int *)(v5 + 24);
  v10 = sub_1A9CE5F64();
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

_QWORD *initializeWithCopy for OneDaySleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v23;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *(_QWORD *)((char *)a1 + v5) = *(_QWORD *)((char *)a2 + v5);
  v23 = (int *)type metadata accessor for SleepStagesModel(0);
  v8 = v23[5];
  v9 = &v6[v8];
  v10 = &v7[v8];
  v11 = type metadata accessor for SleepMetricsWrapper(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, v10, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = v23[6];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = sub_1A9CE5F64();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_QWORD *)&v6[v23[7]] = *(_QWORD *)&v7[v23[7]];
  return a1;
}

_QWORD *assignWithCopy for OneDaySleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v11, v12, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  else
  {
    if (v17)
    {
      sub_1A9B97190((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v11, v12, v21);
  }
LABEL_9:
  v22 = v9[6];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = sub_1A9CE5F64();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_14;
  }
  if (v29)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_15:
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  return a1;
}

_OWORD *initializeWithTake for OneDaySleepStagesDiagram(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for SleepStagesModel(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for SleepMetricsWrapper(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v9, v10, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[6];
  v16 = &v5[v15];
  v17 = &v6[v15];
  v18 = sub_1A9CE5F64();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
  return a1;
}

_QWORD *assignWithTake for OneDaySleepStagesDiagram(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  v10 = (int *)type metadata accessor for SleepStagesModel(0);
  v11 = v10[5];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for SleepMetricsWrapper(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (v18)
    {
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v19);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v12, v13, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  else
  {
    if (v18)
    {
      sub_1A9B97190((uint64_t)v12, type metadata accessor for SleepMetricsWrapper);
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v12, v13, v22);
  }
LABEL_9:
  v23 = v10[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = sub_1A9CE5F64();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_14;
  }
  if (v30)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_15:
  *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for OneDaySleepStagesDiagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for OneDaySleepStagesDiagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA2A84()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SleepStagesChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *__dst;
  int *v28;
  char *v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v28 = (int *)type metadata accessor for SleepStagesModel(0);
    v29 = v9;
    v11 = v28[5];
    __dst = &v9[v11];
    v12 = &v10[v11];
    v13 = type metadata accessor for SleepMetricsWrapper(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(__dst, v12, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v19 = v28[6];
    v20 = &v29[v19];
    v21 = &v10[v19];
    v22 = sub_1A9CE5F64();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_QWORD *)&v29[v28[7]] = *(_QWORD *)&v10[v28[7]];
    v25 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v25) = *(_QWORD *)((char *)a2 + v25);
  }
  return v4;
}

_QWORD *initializeWithCopy for SleepStagesChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;
  uint64_t v26;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for SleepStagesModel(0);
  v10 = *(int *)(v9 + 20);
  __dst = &v7[v10];
  v26 = v9;
  v11 = &v8[v10];
  v12 = type metadata accessor for SleepMetricsWrapper(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(__dst, v11, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v17 = *(int *)(v26 + 24);
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_1A9CE5F64();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)&v7[*(int *)(v26 + 28)] = *(_QWORD *)&v8[*(int *)(v26 + 28)];
  v23 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  return a1;
}

_QWORD *assignWithCopy for SleepStagesChart(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  int *v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v31 = a3;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (int *)type metadata accessor for SleepStagesModel(0);
  v9 = v32[5];
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for SleepMetricsWrapper(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v17);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v10, v11, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  else
  {
    if (v16)
    {
      sub_1A9B97190((uint64_t)v10, type metadata accessor for SleepMetricsWrapper);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v10, v11, v20);
  }
LABEL_9:
  v21 = v32[6];
  v22 = &v7[v21];
  v23 = &v8[v21];
  v24 = sub_1A9CE5F64();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_14;
  }
  if (v28)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_15:
  *(_QWORD *)&v7[v32[7]] = *(_QWORD *)&v8[v32[7]];
  *((_BYTE *)a1 + *(int *)(v31 + 24)) = *((_BYTE *)a2 + *(int *)(v31 + 24));
  *(_QWORD *)((char *)a1 + *(int *)(v31 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v31 + 28));
  return a1;
}

_OWORD *initializeWithTake for SleepStagesChart(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v12, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[6];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v20 = sub_1A9CE5F64();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v23 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  return a1;
}

_QWORD *assignWithTake for SleepStagesChart(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int *v34;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  v33 = a3;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  v34 = (int *)type metadata accessor for SleepStagesModel(0);
  v10 = v34[5];
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = type metadata accessor for SleepMetricsWrapper(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (v17)
    {
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v18);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v11, v12, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  else
  {
    if (v17)
    {
      sub_1A9B97190((uint64_t)v11, type metadata accessor for SleepMetricsWrapper);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v11, v12, v21);
  }
LABEL_9:
  v22 = v34[6];
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = sub_1A9CE5F64();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_14;
  }
  if (v29)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_15:
  *(_QWORD *)&v8[v34[7]] = *(_QWORD *)&v9[v34[7]];
  v31 = *(int *)(v33 + 28);
  *((_BYTE *)a1 + *(int *)(v33 + 24)) = *((_BYTE *)a2 + *(int *)(v33 + 24));
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepStagesChart()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SleepStagesModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SleepStagesChart()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SleepStagesModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A9BA37EC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesChart.Options()
{
  return &type metadata for SleepStagesChart.Options;
}

ValueMetadata *type metadata accessor for GridView()
{
  return &type metadata for GridView;
}

unint64_t sub_1A9BA389C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED2631F0;
  if (!qword_1ED2631F0)
  {
    sub_1A9BAAF20(255, &qword_1ED2631F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9BA409C(&qword_1ED263238, (uint64_t (*)(uint64_t))sub_1A9B951C4, (uint64_t (*)(void))sub_1A9BA3934, MEMORY[0x1E0CDF690]);
    v3[1] = sub_1A9BA3A18();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED2631F0);
  }
  return result;
}

unint64_t sub_1A9BA3934()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED263200;
  if (!qword_1ED263200)
  {
    sub_1A9B95370(255, &qword_1ED263208, (uint64_t (*)(uint64_t))sub_1A9B95238, (uint64_t)&type metadata for GridView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1ED263248, (uint64_t (*)(uint64_t))sub_1A9B95238, MEMORY[0x1E0CDFCC0]);
    v3[1] = sub_1A9BA39D4();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED263200);
  }
  return result;
}

unint64_t sub_1A9BA39D4()
{
  unint64_t result;

  result = qword_1ED263000;
  if (!qword_1ED263000)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for GridView, &type metadata for GridView);
    atomic_store(result, (unint64_t *)&qword_1ED263000);
  }
  return result;
}

unint64_t sub_1A9BA3A18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED2631B0;
  if (!qword_1ED2631B0)
  {
    sub_1A9B95370(255, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9BA409C(&qword_1ED263238, (uint64_t (*)(uint64_t))sub_1A9B951C4, (uint64_t (*)(void))sub_1A9BA3934, MEMORY[0x1E0CDF690]);
    v3[1] = MEMORY[0x1E0CDA228];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED2631B0);
  }
  return result;
}

uint64_t sub_1A9BA3AC0()
{
  sub_1A9B965C0();
  sub_1A9B92B9C(&qword_1EEB438C8, (uint64_t (*)(uint64_t))sub_1A9B965C0, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BA3B20()
{
  return sub_1A9B92B9C(&qword_1EEB43A30, (uint64_t (*)(uint64_t))sub_1A9BA3B4C, (uint64_t)&protocol conformance descriptor for InfographicGrid<A, B>);
}

uint64_t sub_1A9BA3B4C()
{
  uint64_t result;

  result = qword_1EEB43A38;
  if (!qword_1EEB43A38)
  {
    sub_1A9B95370(255, &qword_1EEB43A40, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    type metadata accessor for SleepStagesLegend(255);
    sub_1A9BA3C60();
    sub_1A9B92B9C(&qword_1EEB43A60, type metadata accessor for SleepStagesLegend, (uint64_t)&unk_1A9CED308);
    type metadata accessor for InfographicGrid();
  }
  return result;
}

uint64_t type metadata accessor for SleepStagesLegend(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB43AC8);
}

uint64_t sub_1A9BA3C2C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1A9BA3C60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB43A48;
  if (!qword_1EEB43A48)
  {
    sub_1A9B95370(255, &qword_1EEB43A40, type metadata accessor for SleepStagesDiagram, (uint64_t)&type metadata for SleepDataUnavailable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB43A50, type metadata accessor for SleepStagesDiagram, (uint64_t)&protocol conformance descriptor for SleepStagesDiagram);
    v3[1] = sub_1A9BA3D00();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB43A48);
  }
  return result;
}

unint64_t sub_1A9BA3D00()
{
  unint64_t result;

  result = qword_1EEB43A58;
  if (!qword_1EEB43A58)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE608, &type metadata for SleepDataUnavailable);
    atomic_store(result, (unint64_t *)&qword_1EEB43A58);
  }
  return result;
}

uint64_t sub_1A9BA3D44()
{
  return sub_1A9B92B9C(&qword_1ED2629C8, (uint64_t (*)(uint64_t))sub_1A9BA3D70, MEMORY[0x1E0CD9318]);
}

void sub_1A9BA3D70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2629D0)
  {
    sub_1A9BA3DF0();
    sub_1A9BA409C(&qword_1ED262A08, (uint64_t (*)(uint64_t))sub_1A9BA3DF0, (uint64_t (*)(void))sub_1A9BA4100, MEMORY[0x1E0CDFEE8]);
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2629D0);
  }
}

void sub_1A9BA3DF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262A10)
  {
    sub_1A9BAAB64(255, &qword_1ED262A20, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1A9B95370(255, &qword_1ED2629F0, (uint64_t (*)(uint64_t))sub_1A9BA3EC0, MEMORY[0x1E0CD9DB0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9BA3FD0();
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262A10);
  }
}

void sub_1A9BA3EC0(uint64_t a1)
{
  sub_1A9BAC19C(a1, &qword_1ED2629E0, (void (*)(uint64_t))sub_1A9BA3ED4);
}

void sub_1A9BA3ED4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2629C0)
  {
    sub_1A9BA3F2C();
    v0 = sub_1A9CE7080();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2629C0);
  }
}

unint64_t sub_1A9BA3F2C()
{
  unint64_t result;

  result = qword_1ED2629B0;
  if (!qword_1ED2629B0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED2B8, &type metadata for HLine);
    atomic_store(result, (unint64_t *)&qword_1ED2629B0);
  }
  return result;
}

void sub_1A9BA3F70(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9B94CA0(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = sub_1A9CE76B0();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1A9BA3FD0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1ED262A28;
  if (!qword_1ED262A28)
  {
    sub_1A9BAAB64(255, &qword_1ED262A20, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v2 = v1;
    v3 = sub_1A9BA4058();
    v4[0] = MEMORY[0x1E0DEB458];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEB8B8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED262A28);
  }
  return result;
}

unint64_t sub_1A9BA4058()
{
  unint64_t result;

  result = qword_1ED262A18;
  if (!qword_1ED262A18)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1ED262A18);
  }
  return result;
}

uint64_t sub_1A9BA409C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3();
    result = MEMORY[0x1AF420284](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BA4100()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED2629E8;
  if (!qword_1ED2629E8)
  {
    sub_1A9B95370(255, &qword_1ED2629F0, (uint64_t (*)(uint64_t))sub_1A9BA3EC0, MEMORY[0x1E0CD9DB0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1A9BA9468(&qword_1ED2629D8, (uint64_t (*)(uint64_t))sub_1A9BA3EC0, sub_1A9BA41A0);
    v3[1] = sub_1A9BA41BC();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED2629E8);
  }
  return result;
}

uint64_t sub_1A9BA41A0()
{
  return sub_1A9B92B9C(&qword_1ED2629B8, (uint64_t (*)(uint64_t))sub_1A9BA3ED4, MEMORY[0x1E0CD9150]);
}

unint64_t sub_1A9BA41BC()
{
  unint64_t result;

  result = qword_1EEB43A68;
  if (!qword_1EEB43A68)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9D98], MEMORY[0x1E0CD9DB0]);
    atomic_store(result, (unint64_t *)&qword_1EEB43A68);
  }
  return result;
}

ValueMetadata *type metadata accessor for HLine()
{
  return &type metadata for HLine;
}

_QWORD *sub_1A9BA4210(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for SleepStagesModel(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SleepMetricsWrapper(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, v11, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_1A9CE5F64();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(_QWORD *)((char *)v7 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)v7 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return v7;
}

uint64_t sub_1A9BA4408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  v2 = type metadata accessor for SleepStagesModel(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  }
  v6 = a1 + *(int *)(v2 + 24);
  v7 = sub_1A9CE5F64();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

_QWORD *sub_1A9BA44EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = v6[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_1A9CE5F64();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1A9BA46BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, v9, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1A9B97190((uint64_t)v8, type metadata accessor for SleepMetricsWrapper);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v8, v9, v18);
  }
LABEL_9:
  v19 = v6[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1A9CE5F64();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_14;
  }
  if (v26)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_15:
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1A9BA4960(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1A9CE5F64();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1A9BA4B20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v8, v9, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1A9B97190((uint64_t)v8, type metadata accessor for SleepMetricsWrapper);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v8, v9, v18);
  }
LABEL_9:
  v19 = v6[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1A9CE5F64();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_14;
  }
  if (v26)
  {
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_15:
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BA4DBC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA4DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for SleepStagesModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1A9BA4E54()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA4E60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SleepStagesModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_1A9BA4ED8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepStagesModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A9BA4F48(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for SleepStagesModel(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SleepMetricsWrapper(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, v11, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_1A9CE5F64();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(uint64_t *)((char *)v7 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    v23 = a3[6];
    *(uint64_t *)((char *)v7 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v24 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)v7 + v23) = (uint64_t)v24;
    v25 = a3[7];
    v26 = (uint64_t *)((char *)v7 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    v28 = v24;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v29 = sub_1A9CE6F6C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    }
    else
    {
      *v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v30 = a3[8];
    v31 = (uint64_t *)((char *)v7 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v33 = sub_1A9CE73EC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    }
    else
    {
      *v31 = *v32;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v34 = a3[9];
    v35 = (uint64_t *)((char *)v7 + v34);
    v36 = (uint64_t *)((char *)a2 + v34);
    sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v37 = sub_1A9CE7878();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    }
    else
    {
      *v35 = *v36;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v38 = a3[10];
    v39 = (char *)v7 + v38;
    v40 = (char *)a2 + v38;
    v41 = *(_QWORD *)v40;
    v42 = v40[8];
    sub_1A9BAADF4(*(_QWORD *)v40, v42);
    *(_QWORD *)v39 = v41;
    v39[8] = v42;
  }
  return v7;
}

uint64_t sub_1A9BA530C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  v4 = type metadata accessor for SleepStagesModel(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  v8 = a1 + *(int *)(v4 + 24);
  v9 = sub_1A9CE5F64();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);

  v11 = a1 + a2[7];
  sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_1A9CE6F6C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  v13 = a1 + a2[8];
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_1A9CE73EC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  v15 = a1 + a2[9];
  sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_1A9CE7878();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  return sub_1A9BAAED8(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
}

_QWORD *sub_1A9BA5538(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v9, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = v6[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_1A9CE5F64();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  v21 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v22 = *(void **)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  v23 = a3[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v26 = v22;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = sub_1A9CE6F6C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
  }
  else
  {
    *v24 = *v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v31 = sub_1A9CE73EC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  else
  {
    *v29 = *v30;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v32 = a3[9];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = sub_1A9CE7878();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  }
  else
  {
    *v33 = *v34;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  sub_1A9BAADF4(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  return a1;
}

_QWORD *sub_1A9BA58D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t (*v35)(uint64_t);
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, v9, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1A9B97190((uint64_t)v8, type metadata accessor for SleepMetricsWrapper);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v8, v9, v18);
  }
LABEL_9:
  v19 = v6[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1A9CE5F64();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_15:
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v28 = a3[6];
  v29 = *(void **)((char *)a2 + v28);
  v30 = *(void **)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = v29;
  v31 = v29;

  if (a1 != a2)
  {
    v32 = a3[7];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8];
    v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4((uint64_t)a1 + v32, (uint64_t)&qword_1ED263170, (uint64_t)MEMORY[0x1E0CD86F8], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED263170, v35, v36);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v37 = sub_1A9CE6F6C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v33, v34, v37);
    }
    else
    {
      *v33 = *v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v38 = a3[8];
    v39 = (_QWORD *)((char *)a1 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0];
    sub_1A9BAAEE4((uint64_t)a1 + v38, (uint64_t)&qword_1ED262698, (uint64_t)MEMORY[0x1E0CDB2E0], (uint64_t)v36, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262698, v41, v36);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v42 = sub_1A9CE73EC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
    }
    else
    {
      *v39 = *v40;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v43 = a3[9];
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0];
    sub_1A9BAAEE4((uint64_t)a1 + v43, (uint64_t)&qword_1ED262A40, (uint64_t)MEMORY[0x1E0CDD6B0], (uint64_t)v36, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262A40, v46, v36);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v47 = sub_1A9CE7878();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
    }
    else
    {
      *v44 = *v45;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v48 = a3[10];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(_QWORD *)v50;
  v52 = v50[8];
  sub_1A9BAADF4(*(_QWORD *)v50, v52);
  v53 = *(_QWORD *)v49;
  v54 = v49[8];
  *(_QWORD *)v49 = v51;
  v49[8] = v52;
  sub_1A9BAAED8(v53, v54);
  return a1;
}

_QWORD *sub_1A9BA5DCC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_1A9CE5F64();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  v20 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v25 = v24;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = sub_1A9CE6F6C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v22, v23, v26);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v31 = v30;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v32 = sub_1A9CE73EC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v28, v29, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  v33 = a3[9];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v37 = v36;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38 = sub_1A9CE7878();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v34, v35, v38);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  v39 = a3[10];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  return a1;
}

_QWORD *sub_1A9BA6154(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for SleepStagesModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SleepMetricsWrapper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (v14)
    {
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
      sub_1A9B92F34(0, &qword_1ED2633F0, type metadata accessor for SleepMetricsWrapper, v15);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      goto LABEL_9;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v8, v9, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    if (v14)
    {
      sub_1A9B97190((uint64_t)v8, type metadata accessor for SleepMetricsWrapper);
      v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v8, v9, v18);
  }
LABEL_9:
  v19 = v6[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_1A9CE5F64();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_14:
    sub_1A9B92F34(0, &qword_1ED263400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_15:
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  v28 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v29 = *(void **)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);

  if (a1 != a2)
  {
    v30 = a3[7];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8];
    v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4((uint64_t)a1 + v30, (uint64_t)&qword_1ED263170, (uint64_t)MEMORY[0x1E0CD86F8], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED263170, v33, v34);
    v36 = v35;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v37 = sub_1A9CE6F6C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v31, v32, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    v38 = a3[8];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0];
    sub_1A9BAAEE4((uint64_t)a1 + v38, (uint64_t)&qword_1ED262698, (uint64_t)MEMORY[0x1E0CDB2E0], (uint64_t)v34, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262698, v41, v34);
    v43 = v42;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v44 = sub_1A9CE73EC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v39, v40, v44);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    v45 = a3[9];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0];
    sub_1A9BAAEE4((uint64_t)a1 + v45, (uint64_t)&qword_1ED262A40, (uint64_t)MEMORY[0x1E0CDD6B0], (uint64_t)v34, (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262A40, v48, v34);
    v50 = v49;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v51 = sub_1A9CE7878();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v46, v47, v51);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
  }
  v52 = a3[10];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = *(_QWORD *)v54;
  LOBYTE(v54) = v54[8];
  v56 = *(_QWORD *)v53;
  v57 = v53[8];
  *(_QWORD *)v53 = v55;
  v53[8] = (char)v54;
  sub_1A9BAAED8(v56, v57);
  return a1;
}

uint64_t sub_1A9BA663C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA6648(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for SleepStagesModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1A9B92F34(0, &qword_1EEB43B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87E8]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[7];
    }
    else
    {
      sub_1A9B92F34(0, &qword_1EEB43B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], MEMORY[0x1E0CD87E8]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[8];
      }
      else
      {
        sub_1A9B92F34(0, &qword_1EEB43B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], MEMORY[0x1E0CD87E8]);
        v8 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a3[9];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[6]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1A9BA6780()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BA678C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = type metadata accessor for SleepStagesModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    sub_1A9B92F34(0, &qword_1EEB43B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87E8]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      sub_1A9B92F34(0, &qword_1EEB43B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], MEMORY[0x1E0CD87E8]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[8];
      }
      else
      {
        sub_1A9B92F34(0, &qword_1EEB43B10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], MEMORY[0x1E0CD87E8]);
        v10 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a4[9];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A9BA68C0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for SleepStagesModel(319);
  if (v0 <= 0x3F)
  {
    sub_1A9B92F34(319, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    if (v1 <= 0x3F)
    {
      sub_1A9B92F34(319, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
      if (v2 <= 0x3F)
      {
        sub_1A9B92F34(319, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_1A9BA69E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BA69F8()
{
  return sub_1A9B92B9C(&qword_1EEB43B18, (uint64_t (*)(uint64_t))sub_1A9BA6A24, MEMORY[0x1E0CD8668]);
}

void sub_1A9BA6A24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43B20)
  {
    sub_1A9BA3F2C();
    v0 = sub_1A9CE6F54();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43B20);
  }
}

unint64_t sub_1A9BA6AA0()
{
  unint64_t result;

  result = qword_1EEB43B28;
  if (!qword_1EEB43B28)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB3D0], MEMORY[0x1E0CDB3F0]);
    atomic_store(result, (unint64_t *)&qword_1EEB43B28);
  }
  return result;
}

unint64_t sub_1A9BA6AE8()
{
  unint64_t result;

  result = qword_1ED2629A0;
  if (!qword_1ED2629A0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED268, &type metadata for HLine);
    atomic_store(result, (unint64_t *)&qword_1ED2629A0);
  }
  return result;
}

unint64_t sub_1A9BA6B30()
{
  unint64_t result;

  result = qword_1ED2629A8;
  if (!qword_1ED2629A8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED218, &type metadata for HLine);
    atomic_store(result, (unint64_t *)&qword_1ED2629A8);
  }
  return result;
}

uint64_t sub_1A9BA6B74()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9BA6B84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43B30)
  {
    sub_1A9BA6BEC(255);
    sub_1A9BA6F4C();
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43B30);
  }
}

void sub_1A9BA6BEC(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43B38, (uint64_t (*)(uint64_t))sub_1A9BA6C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BA6C08(uint64_t a1)
{
  sub_1A9BAAA78(a1, &qword_1EEB43B40, (void (*)(uint64_t))sub_1A9BA6C24, (void (*)(uint64_t))sub_1A9BA6DAC);
}

void sub_1A9BA6C24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43B48)
  {
    sub_1A9BA6E44(255, &qword_1EEB43B50);
    sub_1A9BA6D04(&qword_1EEB43B68, &qword_1EEB43B50, (uint64_t)&type metadata for SleepStagesLegend.LegendRow, (uint64_t (*)(void))sub_1A9BA6D68);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43B48);
  }
}

uint64_t sub_1A9BA6CBC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1A9B94CA0(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BA6D04(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1A9BA6E44(255, a2);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDFEE8], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BA6D68()
{
  unint64_t result;

  result = qword_1EEB43B70;
  if (!qword_1EEB43B70)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED51C, &type metadata for SleepStagesLegend.LegendRow);
    atomic_store(result, (unint64_t *)&qword_1EEB43B70);
  }
  return result;
}

void sub_1A9BA6DAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43B78)
  {
    sub_1A9BA6E44(255, &qword_1EEB43B80);
    sub_1A9BA6D04(&qword_1EEB43B88, &qword_1EEB43B80, (uint64_t)&type metadata for SleepStagesLegend.FlowingLabel, (uint64_t (*)(void))sub_1A9BA6F08);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43B78);
  }
}

void sub_1A9BA6E44(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1A9B94CA0(255, &qword_1EEB43B58, (uint64_t)&type metadata for SleepStage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9BA6CBC(&qword_1EEB43B60, &qword_1EEB43B58, (uint64_t)&type metadata for SleepStage, MEMORY[0x1E0DEAF48]);
    v3 = sub_1A9CE7F68();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_1A9BA6F08()
{
  unint64_t result;

  result = qword_1EEB43B90;
  if (!qword_1EEB43B90)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED4CC, &type metadata for SleepStagesLegend.FlowingLabel);
    atomic_store(result, (unint64_t *)&qword_1EEB43B90);
  }
  return result;
}

unint64_t sub_1A9BA6F4C()
{
  unint64_t result;

  result = qword_1EEB43B98;
  if (!qword_1EEB43B98)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDA290], MEMORY[0x1E0CDA2A8]);
    atomic_store(result, (unint64_t *)&qword_1EEB43B98);
  }
  return result;
}

uint64_t sub_1A9BA6F90(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1A9BA6FDC()
{
  unint64_t result;

  result = qword_1EEB43BA8;
  if (!qword_1EEB43BA8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepStage, &type metadata for SleepStage);
    atomic_store(result, (unint64_t *)&qword_1EEB43BA8);
  }
  return result;
}

void sub_1A9BA7020(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9BA6E44(255, a3);
    v4 = sub_1A9CE708C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepStagesLegend(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for SleepStagesModel(0);
  v4 = v2 + *(int *)(v3 + 20);
  v5 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  v7 = v2 + *(int *)(v3 + 24);
  v8 = sub_1A9CE5F64();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_deallocObject();
}

uint64_t sub_1A9BA7198@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;

  v5 = type metadata accessor for SleepStagesLegend(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  LOBYTE(a1) = *a1;
  result = sub_1A9B98810((char)a1);
  v9 = *(_BYTE *)(v7 + *(int *)(v5 + 20));
  *(_BYTE *)a2 = (_BYTE)a1;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_1A9BA7200()
{
  unsigned __int8 v1;

  sub_1A9CE732C();
  sub_1A9B92B9C(&qword_1ED262AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEF8C8], MEMORY[0x1E0CEF8B8]);
  sub_1A9CE7368();
  return v1;
}

uint64_t sub_1A9BA7260@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1A9CE732C();
  sub_1A9B92B9C(&qword_1ED262AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEF8C8], MEMORY[0x1E0CEF8B8]);
  result = sub_1A9CE7368();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BA72D4()
{
  return sub_1A9CE7278();
}

uint64_t sub_1A9BA72F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BA7308(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CDA400], MEMORY[0x1E0CDA6E8]);
}

uint64_t sub_1A9BA7308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1A9BA7384(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (_QWORD **)v4;
  v29 = a2;
  v9 = sub_1A9CE5F64();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = sub_1A9BAD770(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 16 * v16);
      result = swift_bridgeObjectRelease();
      v25 = v29;
      *v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1A9BAE438();
    goto LABEL_7;
  }
  sub_1A9BADDE4(v19, a4 & 1);
  v26 = sub_1A9BAD770(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_1A9CE8BE0();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_1A9BA74F0(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t sub_1A9BA74F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_1A9CE5F64();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_1A9BA7590()
{
  CGFloat *v0;

  return sub_1A9BA0328(v0[2], v0[3], v0[4], v0[5]);
}

void sub_1A9BA759C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE708C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BA7600(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43BC0, (uint64_t (*)(uint64_t))sub_1A9BA761C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BA761C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB43BC8)
  {
    sub_1A9BA76A0(255);
    sub_1A9B92F34(255, &qword_1ED262B00, (uint64_t (*)(uint64_t))sub_1A9BAA4A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB43BC8);
  }
}

void sub_1A9BA76A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EEB43BD0)
  {
    sub_1A9BABD28(255, &qword_1EEB43BD8, (uint64_t (*)(uint64_t))sub_1A9BA7778, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v3 = v2;
    sub_1A9BA93F0();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1A9BAA0C0();
    v7[3] = sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
    v5 = MEMORY[0x1AF420248](a1, v7, MEMORY[0x1E0CDE4C8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB43BD0);
  }
}

void sub_1A9BA7778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EEB43BE0)
  {
    sub_1A9BABD28(255, &qword_1EEB43BE8, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v3 = v2;
    sub_1A9BA8B6C(255);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1A9BA9D28();
    v7[3] = sub_1A9BA409C(&qword_1ED262B28, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, sub_1A9BAA0A4, MEMORY[0x1E0DEAF30]);
    v5 = MEMORY[0x1AF420248](a1, v7, MEMORY[0x1E0D2BAC8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB43BE0);
  }
}

void sub_1A9BA7858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];

  if (!qword_1EEB43BF0)
  {
    sub_1A9BA7B88(255);
    v10 = v2;
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v9 = v3;
    sub_1A9BA7E54(255);
    sub_1A9BA80F8(255);
    v4 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v4);
    sub_1A9BA830C(255);
    sub_1A9BA9754();
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v6 = sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v5);
    swift_getOpaqueTypeConformance2();
    v11[4] = v6;
    v11[5] = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v11[6] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v11[0] = v10;
    v11[1] = v9;
    v11[2] = swift_getOpaqueTypeConformance2();
    v11[3] = sub_1A9BA9C48();
    v7 = MEMORY[0x1AF420248](a1, v11, MEMORY[0x1E0C93D60], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EEB43BF0);
  }
}

void sub_1A9BA7B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];

  if (!qword_1EEB43BF8)
  {
    sub_1A9BA7E54(255);
    v10 = v2;
    sub_1A9BA80F8(255);
    v3 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v3);
    v9 = v4;
    sub_1A9BA830C(255);
    sub_1A9BA9754();
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v6 = sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v5);
    v11[2] = v9;
    v11[3] = swift_getOpaqueTypeConformance2();
    v11[4] = v6;
    v11[5] = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v11[6] = MEMORY[0x1E0CDF598];
    v11[0] = v10;
    v11[1] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x1AF420248](a1, v11, MEMORY[0x1E0C93CD0], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EEB43BF8);
  }
}

void sub_1A9BA7E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[7];

  if (!qword_1EEB43C00)
  {
    sub_1A9BA80F8(255);
    v12 = v2;
    v3 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v5 = v4;
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v3);
    v11 = v6;
    sub_1A9BA830C(255);
    sub_1A9BA9754();
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v8 = sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v7);
    v13[0] = v12;
    v13[1] = v5;
    v13[2] = v11;
    v13[3] = swift_getOpaqueTypeConformance2();
    v13[4] = v8;
    v13[5] = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v13[6] = MEMORY[0x1E0CDF598];
    v9 = MEMORY[0x1AF420248](a1, v13, MEMORY[0x1E0C93D70], 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&qword_1EEB43C00);
  }
}

void sub_1A9BA80F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_1EEB43C08)
  {
    sub_1A9BA830C(255);
    v8 = v2;
    sub_1A9BA9754();
    v7 = v3;
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    v9[0] = v8;
    v9[1] = v7;
    v9[2] = swift_getOpaqueTypeConformance2();
    v9[3] = sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v4);
    v5 = MEMORY[0x1AF420248](a1, v9, MEMORY[0x1E0C93CA0], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB43C08);
  }
}

void sub_1A9BA830C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EEB43C10)
  {
    sub_1A9BA84C4(255);
    v3 = v2;
    sub_1A9BA865C(255);
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = sub_1A9BA96E4();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0C93CB8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEB43C10);
  }
}

void sub_1A9BA84C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EEB43C18)
  {
    sub_1A9BA865C(255);
    v3 = v2;
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v5 = v4;
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1A9BA96E4();
    v6 = MEMORY[0x1AF420248](a1, v8, MEMORY[0x1E0C93D10], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EEB43C18);
  }
}

void sub_1A9BA865C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EEB43C20)
  {
    sub_1A9BA8798(255);
    v3 = v2;
    sub_1A9BA9008();
    v5 = v4;
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    v6 = MEMORY[0x1AF420248](a1, v8, MEMORY[0x1E0C93C60], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EEB43C20);
  }
}

void sub_1A9BA8798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1ED263220)
  {
    sub_1A9BA8874(255);
    v3 = v2;
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    v6[2] = sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    v6[3] = MEMORY[0x1E0C93870];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0C93C80], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED263220);
  }
}

void sub_1A9BA8874(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1ED263228)
  {
    sub_1A9BA8924();
    v5[0] = v2;
    v5[1] = sub_1A9CE6BC4();
    v5[2] = sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    v5[3] = MEMORY[0x1E0C93870];
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0C93CF0], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1ED263228);
  }
}

void sub_1A9BA8924()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263148)
  {
    sub_1A9BA89D0(255);
    sub_1A9BA8A5C();
    sub_1A9B92B9C(&qword_1ED263130, (uint64_t (*)(uint64_t))sub_1A9BA8A5C, MEMORY[0x1E0C93978]);
    swift_getOpaqueTypeConformance2();
    v0 = sub_1A9CE6C30();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263148);
  }
}

void sub_1A9BA89D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1ED2630E8)
  {
    sub_1A9BA8A5C();
    v5[0] = v2;
    v5[1] = sub_1A9B92B9C(&qword_1ED263130, (uint64_t (*)(uint64_t))sub_1A9BA8A5C, MEMORY[0x1E0C93978]);
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0C93588], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1ED2630E8);
  }
}

void sub_1A9BA8A5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263138)
  {
    sub_1A9BA8ABC();
    sub_1A9BA8EE8();
    v0 = sub_1A9CE6C18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263138);
  }
}

void sub_1A9BA8ABC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263270)
  {
    sub_1A9BA8B6C(255);
    sub_1A9BA8B88(255);
    sub_1A9B92B9C(&qword_1ED2632A8, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, MEMORY[0x1E0DEAF48]);
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263270);
  }
}

void sub_1A9BA8B6C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED263498, type metadata accessor for SleepStageSegment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1A9BA8B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1ED2630E0)
  {
    sub_1A9BA8C98(255);
    v3 = v2;
    sub_1A9BA8D70(255);
    sub_1A9BA8E1C(255);
    sub_1A9CE6B34();
    v4 = MEMORY[0x1E0DEA968];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = swift_getOpaqueTypeConformance2();
    v7[3] = sub_1A9BA8EA4();
    v5 = MEMORY[0x1AF420248](a1, v7, MEMORY[0x1E0C93568], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1ED2630E0);
  }
}

void sub_1A9BA8C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1ED2630F0)
  {
    sub_1A9BA8D70(255);
    v3 = v2;
    sub_1A9BA8E1C(255);
    sub_1A9CE6B34();
    v6[2] = MEMORY[0x1E0C93680];
    v6[3] = MEMORY[0x1E0C93DB8];
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0C93608], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED2630F0);
  }
}

void sub_1A9BA8D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1ED2630D0)
  {
    sub_1A9BA8E1C(255);
    v3 = v2;
    sub_1A9CE6B34();
    v6[2] = MEMORY[0x1E0C93680];
    v6[3] = MEMORY[0x1E0C93DB8];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1AF420248](a1, v6, MEMORY[0x1E0C934E8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED2630D0);
  }
}

void sub_1A9BA8E1C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1ED2630D8)
  {
    v4[0] = sub_1A9CE6B34();
    v4[1] = MEMORY[0x1E0DEA968];
    v4[2] = MEMORY[0x1E0C93680];
    v4[3] = MEMORY[0x1E0C93DB8];
    v2 = MEMORY[0x1AF420248](a1, v4, MEMORY[0x1E0C934F8], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1ED2630D8);
  }
}

unint64_t sub_1A9BA8EA4()
{
  unint64_t result;

  result = qword_1ED263298;
  if (!qword_1ED263298)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED263298);
  }
  return result;
}

unint64_t sub_1A9BA8EE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  result = qword_1ED263268;
  if (!qword_1ED263268)
  {
    sub_1A9BA8ABC();
    v2 = v1;
    sub_1A9BA8C98(255);
    v4 = v3;
    sub_1A9BA8D70(255);
    sub_1A9BA8E1C(255);
    sub_1A9CE6B34();
    v5 = MEMORY[0x1E0DEA968];
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[1] = v4;
    v6[2] = v5;
    v6[3] = swift_getOpaqueTypeConformance2();
    v6[4] = sub_1A9BA8EA4();
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93DA0], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1ED263268);
  }
  return result;
}

void sub_1A9BA9008()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43C28)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C30, sub_1A9BA9080, sub_1A9BA9110);
    sub_1A9BA959C();
    v0 = sub_1A9CE6CB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43C28);
  }
}

void sub_1A9BA9080(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED263158, (uint64_t (*)(uint64_t))sub_1A9BA909C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9BA909C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1ED263150)
  {
    v4[0] = sub_1A9CE6C9C();
    v4[1] = MEMORY[0x1E0C93A98];
    v2 = MEMORY[0x1AF420248](a1, v4, MEMORY[0x1E0C93A60], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1ED263150);
  }
}

void sub_1A9BA9110(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED262A90, (uint64_t (*)(uint64_t))sub_1A9BA912C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9BA912C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262A88)
  {
    sub_1A9BA9218(255);
    sub_1A9BA92EC();
    sub_1A9BA93F0();
    sub_1A9BA9468(&qword_1ED262AA0, (uint64_t (*)(uint64_t))sub_1A9BA92EC, (uint64_t (*)(void))sub_1A9BA94F4);
    sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
    swift_getOpaqueTypeConformance2();
    v0 = sub_1A9CE6B88();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262A88);
  }
}

void sub_1A9BA9218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1ED262AE8)
  {
    sub_1A9BA92EC();
    v3 = v2;
    sub_1A9BA93F0();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1A9BA9468(&qword_1ED262AA0, (uint64_t (*)(uint64_t))sub_1A9BA92EC, (uint64_t (*)(void))sub_1A9BA94F4);
    v7[3] = sub_1A9B92B9C(&qword_1ED2632F0, (uint64_t (*)(uint64_t))sub_1A9BA93F0, MEMORY[0x1E0DECD88]);
    v5 = MEMORY[0x1AF420248](a1, v7, MEMORY[0x1E0CDE4C8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1ED262AE8);
  }
}

void sub_1A9BA92EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262AA8)
  {
    sub_1A9BA9380(255, &qword_1ED262AD0, &qword_1ED263190, MEMORY[0x1E0CD9778]);
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262AA8);
  }
}

void sub_1A9BA9380(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9BAAB64(255, a3, MEMORY[0x1E0CDDD78], a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v5 = sub_1A9CE74F4();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1A9BA93F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2632F8)
  {
    sub_1A9CE7110();
    sub_1A9B92B9C((unint64_t *)&qword_1ED263180, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], MEMORY[0x1E0CD9980]);
    v0 = sub_1A9CE8B08();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2632F8);
  }
}

uint64_t sub_1A9BA9468(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = sub_1A9BAC06C((unint64_t *)&qword_1ED263350, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BA94F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED262AC8;
  if (!qword_1ED262AC8)
  {
    v1 = MEMORY[0x1E0CD9778];
    sub_1A9BA9380(255, &qword_1ED262AD0, &qword_1ED263190, MEMORY[0x1E0CD9778]);
    v3 = v2;
    v4[0] = sub_1A9BABAE0(&qword_1ED262AB0, &qword_1ED263190, v1, MEMORY[0x1E0CD9758]);
    v4[1] = MEMORY[0x1E0CDDD58];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v3, v4);
    atomic_store(result, (unint64_t *)&qword_1ED262AC8);
  }
  return result;
}

unint64_t sub_1A9BA959C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  result = qword_1EEB43C38;
  if (!qword_1EEB43C38)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C30, sub_1A9BA9080, sub_1A9BA9110);
    v2 = v1;
    v4[0] = sub_1A9BA9644();
    v4[1] = sub_1A9BA409C(&qword_1ED262A98, (uint64_t (*)(uint64_t))sub_1A9BA9110, sub_1A9BA96C8, MEMORY[0x1E0C93E10]);
    v3 = v4;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93450], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB43C38);
  }
  return result;
}

unint64_t sub_1A9BA9644()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = qword_1ED263160;
  if (!qword_1ED263160)
  {
    sub_1A9BA9080(255);
    v2 = v1;
    v3[1] = sub_1A9CE6C9C();
    v3[2] = MEMORY[0x1E0C93A98];
    v3[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93E10], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED263160);
  }
  return result;
}

uint64_t sub_1A9BA96C8()
{
  return sub_1A9B92B9C(&qword_1ED262A80, (uint64_t (*)(uint64_t))sub_1A9BA912C, MEMORY[0x1E0C93748]);
}

unint64_t sub_1A9BA96E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED2632C8;
  if (!qword_1ED2632C8)
  {
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = MEMORY[0x1E0C93DB8];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93DD0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED2632C8);
  }
  return result;
}

void sub_1A9BA9754()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43C48)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C50, (void (*)(uint64_t))sub_1A9BA9840, sub_1A9BA98AC);
    sub_1A9BA9A50();
    v0 = sub_1A9CE6CB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43C48);
  }
}

void sub_1A9BA97CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_1A9CE6AE0();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1A9BA9840()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43C58)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C60, (void (*)(uint64_t))MEMORY[0x1E0C933F0], (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43C58);
  }
}

void sub_1A9BA98AC(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED263108, (uint64_t (*)(uint64_t))sub_1A9BA98C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9BA98C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263100)
  {
    sub_1A9BA9940();
    sub_1A9B92B9C(&qword_1ED263258, (uint64_t (*)(uint64_t))sub_1A9BA9940, MEMORY[0x1E0CDFCC0]);
    v0 = sub_1A9CE6B88();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263100);
  }
}

void sub_1A9BA9940()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263260)
  {
    sub_1A9BA99B8(255);
    sub_1A9B92B9C(&qword_1ED263288, (uint64_t (*)(uint64_t))sub_1A9BA99B8, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263260);
  }
}

void sub_1A9BA99B8(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED263290, (uint64_t (*)(uint64_t))sub_1A9BA99D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BA99D4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED263218)
  {
    sub_1A9BA9380(255, &qword_1ED2631E8, &qword_1ED263198, MEMORY[0x1E0CD9D88]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED263218);
  }
}

unint64_t sub_1A9BA9A50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[2];

  result = qword_1EEB43C68;
  if (!qword_1EEB43C68)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C50, (void (*)(uint64_t))sub_1A9BA9840, sub_1A9BA98AC);
    v2 = v1;
    v3 = MEMORY[0x1E0C93E10];
    v5[0] = sub_1A9BA409C(&qword_1EEB43C70, (uint64_t (*)(uint64_t))sub_1A9BA9840, (uint64_t (*)(void))sub_1A9BA9B20, MEMORY[0x1E0C93E10]);
    v5[1] = sub_1A9BA409C(&qword_1ED263110, (uint64_t (*)(uint64_t))sub_1A9BA98AC, sub_1A9BA9BA0, v3);
    v4 = v5;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93450], v2, &v4);
    atomic_store(result, (unint64_t *)&qword_1EEB43C68);
  }
  return result;
}

unint64_t sub_1A9BA9B20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD *v2;
  _QWORD v3[2];

  result = qword_1EEB43C78;
  if (!qword_1EEB43C78)
  {
    sub_1A9BA97CC(255, &qword_1EEB43C60, (void (*)(uint64_t))MEMORY[0x1E0C933F0], (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    v3[0] = MEMORY[0x1E0C933E8];
    v3[1] = MEMORY[0x1E0C93A98];
    v2 = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C93450], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEB43C78);
  }
  return result;
}

uint64_t sub_1A9BA9BA0()
{
  return sub_1A9B92B9C(&qword_1ED2630F8, (uint64_t (*)(uint64_t))sub_1A9BA98C8, MEMORY[0x1E0C93748]);
}

void sub_1A9BA9BBC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1ED263230)
  {
    v4[0] = sub_1A9CE6BB8();
    v4[1] = sub_1A9B92B9C(&qword_1ED263128, (uint64_t (*)(uint64_t))MEMORY[0x1E0C937B0], MEMORY[0x1E0C937A8]);
    v2 = MEMORY[0x1AF420248](a1, v4, MEMORY[0x1E0CEFB08], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1ED263230);
  }
}

unint64_t sub_1A9BA9C48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_1ED2631A0;
  if (!qword_1ED2631A0)
  {
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[2] = sub_1A9CE6BB8();
    v3[3] = sub_1A9B92B9C(&qword_1ED263128, (uint64_t (*)(uint64_t))MEMORY[0x1E0C937B0], MEMORY[0x1E0C937A8]);
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED2631A0);
  }
  return result;
}

void sub_1A9BA9D0C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED262AE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA400], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

unint64_t sub_1A9BA9D28()
{
  unint64_t result;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[9];

  result = qword_1EEB43C88;
  if (!qword_1EEB43C88)
  {
    v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0];
    sub_1A9BABD28(255, &qword_1EEB43BE8, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v10 = v2;
    sub_1A9BA7B88(255);
    v9 = v3;
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], v1);
    v8 = v4;
    sub_1A9BA7E54(255);
    sub_1A9BA80F8(255);
    v5 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v5);
    sub_1A9BA830C(255);
    sub_1A9BA9754();
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v7 = sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v6);
    swift_getOpaqueTypeConformance2();
    v11[6] = v7;
    v11[7] = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v11[8] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v11[2] = v9;
    v11[3] = v8;
    v11[4] = swift_getOpaqueTypeConformance2();
    v11[5] = sub_1A9BA9C48();
    v11[0] = swift_getOpaqueTypeConformance2();
    v11[1] = sub_1A9B92B9C(&qword_1ED262AD8, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v10, v11);
    atomic_store(result, (unint64_t *)&qword_1EEB43C88);
  }
  return result;
}

uint64_t sub_1A9BAA0A4()
{
  return sub_1A9B92B9C(&qword_1ED262A70, type metadata accessor for SleepStageSegment, (uint64_t)&protocol conformance descriptor for SleepStageSegment);
}

unint64_t sub_1A9BAA0C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  _QWORD v12[9];

  result = qword_1EEB43C90;
  if (!qword_1EEB43C90)
  {
    sub_1A9BABD28(255, &qword_1EEB43BD8, (uint64_t (*)(uint64_t))sub_1A9BA7778, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v11 = v1;
    v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0];
    sub_1A9BABD28(255, &qword_1EEB43BE8, (uint64_t (*)(uint64_t))sub_1A9BA7858, (uint64_t (*)(uint64_t))sub_1A9BA9D0C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9BA8B6C(255);
    sub_1A9BA9D28();
    sub_1A9BA409C(&qword_1ED262B28, (uint64_t (*)(uint64_t))sub_1A9BA8B6C, sub_1A9BAA0A4, MEMORY[0x1E0DEAF30]);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    sub_1A9BA7B88(255);
    v9 = v3;
    sub_1A9B95370(255, &qword_1ED2631A8, (uint64_t (*)(uint64_t))sub_1A9BA9BBC, MEMORY[0x1E0CD9778], v2);
    v8 = v4;
    sub_1A9BA7E54(255);
    sub_1A9BA80F8(255);
    v5 = MEMORY[0x1E0DEAEC8];
    sub_1A9B94CA0(255, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B94CA0(255, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))v5);
    sub_1A9BA830C(255);
    sub_1A9BA9754();
    sub_1A9BA84C4(255);
    sub_1A9BA865C(255);
    sub_1A9BA8798(255);
    sub_1A9BA9008();
    sub_1A9BA8874(255);
    sub_1A9BA8924();
    sub_1A9CE6BC4();
    sub_1A9B92B9C(&qword_1ED263140, (uint64_t (*)(uint64_t))sub_1A9BA8924, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6 = MEMORY[0x1E0C93BA0];
    sub_1A9B92B9C(&qword_1EEB43C40, (uint64_t (*)(uint64_t))sub_1A9BA9008, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v7 = sub_1A9BA96E4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1A9B92B9C(&qword_1EEB43C80, (uint64_t (*)(uint64_t))sub_1A9BA9754, v6);
    swift_getOpaqueTypeConformance2();
    v12[6] = v7;
    v12[7] = sub_1A9BA6CBC(&qword_1ED2632B8, &qword_1ED2632B0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0C93DC8]);
    v12[8] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v12[2] = v9;
    v12[3] = v8;
    v12[4] = swift_getOpaqueTypeConformance2();
    v12[5] = sub_1A9BA9C48();
    v12[0] = OpaqueTypeConformance2;
    v12[1] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v11, v12);
    atomic_store(result, (unint64_t *)&qword_1EEB43C90);
  }
  return result;
}

void sub_1A9BAA4A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262AF8)
  {
    sub_1A9BAA51C(255);
    sub_1A9B92B9C(&qword_1ED262B08, (uint64_t (*)(uint64_t))sub_1A9BAA51C, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262AF8);
  }
}

void sub_1A9BAA51C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED262B10, (uint64_t (*)(uint64_t))sub_1A9BAA538, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BAA538()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED262AF0)
  {
    sub_1A9BA9218(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED262AF0);
  }
}

uint64_t sub_1A9BAA5A0@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1A9B9B980(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1A9BAA5BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B9B9E0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9BAA5C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B9D06C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A9BAA5CC()
{
  uint64_t v0;

  return sub_1A9B9DBB8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A9BAA5D8(uint64_t a1)
{
  return sub_1A9BAAB08(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1A9B9E5F4);
}

uint64_t sub_1A9BAA5E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_1A9BABD28(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1A9BAA620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1A9BAA670(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1A9BAA680(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1A9BAA698(uint64_t a1, uint64_t a2, char a3)
{
  sub_1A9BAA670(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9BAA6C0()
{
  return sub_1A9CE7278();
}

uint64_t sub_1A9BAA6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BA7308(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CDA400], MEMORY[0x1E0CDA6E8]);
}

uint64_t sub_1A9BAA704(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  sub_1A9B95370(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t objectdestroy_26Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for Somnogram(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for SleepStagesModel(0);
  v5 = v3 + *(int *)(v4 + 20);
  v6 = type metadata accessor for SleepMetricsWrapper(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2633F8, (uint64_t (*)(uint64_t))sub_1A9BA0D30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  v8 = v3 + *(int *)(v4 + 24);
  v9 = sub_1A9CE5F64();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);

  v11 = v3 + v1[7];
  sub_1A9B92F34(0, &qword_1ED263170, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_1A9CE6F6C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  v13 = v3 + v1[8];
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_1A9CE73EC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  v15 = v3 + v1[9];
  sub_1A9B92F34(0, &qword_1ED262A40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD6B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = sub_1A9CE7878();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  sub_1A9BAAED8(*(_QWORD *)(v3 + v1[10]), *(_BYTE *)(v3 + v1[10] + 8));
  return swift_deallocObject();
}

uint64_t sub_1A9BAA9D4(uint64_t a1)
{
  return sub_1A9BAAA24(a1, (uint64_t (*)(uint64_t))sub_1A9B9DD80);
}

double sub_1A9BAA9E0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1A9B9FAF0(*(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_1A9BAA9EC(uint64_t a1, uint64_t a2, char a3)
{
  sub_1A9BAA680(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A9BAAA18(uint64_t a1)
{
  return sub_1A9BAAA24(a1, (uint64_t (*)(uint64_t))sub_1A9B9D340);
}

uint64_t sub_1A9BAAA24(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Somnogram(0);
  return a2(a1);
}

void sub_1A9BAAA78(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1A9BAAAE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9B9F9B0(a1);
}

uint64_t sub_1A9BAAAF0()
{
  uint64_t v0;

  return sub_1A9B9BB68(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1A9BAAAFC(uint64_t a1)
{
  return sub_1A9BAAB08(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1A9B9BD88);
}

uint64_t sub_1A9BAAB08(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Somnogram(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

void sub_1A9BAAB64(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1A9BAABAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2632D0)
  {
    sub_1A9CE62E8();
    sub_1A9B92B9C((unint64_t *)&qword_1ED262DE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v0 = sub_1A9CE85A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2632D0);
  }
}

uint64_t sub_1A9BAAC24()
{
  return swift_deallocObject();
}

uint64_t sub_1A9BAAC34(uint64_t a1, uint64_t a2)
{
  return sub_1A9BA6F90(a1, a2, type metadata accessor for SleepDayModel.SegmentModel);
}

uint64_t sub_1A9BAAC40(uint64_t a1)
{
  return sub_1A9B97190(a1, type metadata accessor for SleepDayModel.SegmentModel);
}

uint64_t sub_1A9BAAC4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1A9CE7008();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

double sub_1A9BAACAC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1A9CE7008();
  return sub_1A9BA01A8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1A9BAACFC(uint64_t a1, uint64_t a2)
{
  return sub_1A9BA6F90(a1, a2, type metadata accessor for SleepStageSegment);
}

uint64_t sub_1A9BAAD08(uint64_t a1)
{
  return sub_1A9B97190(a1, type metadata accessor for SleepStageSegment);
}

uint64_t sub_1A9BAAD1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 136);
  v9 = *(_BYTE *)(a1 + 152);
  sub_1A9BAADF4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v11, v10, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A9BAADF4(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t sub_1A9BAAE00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a1 + 136);
  v9 = *(_BYTE *)(a1 + 152);
  sub_1A9BAAED8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v11, v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9BAAED8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t sub_1A9BAAEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1A9BAAF20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1A9B951C4();
    v7 = v6;
    sub_1A9B95370(255, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1A9BAAFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B95370(0, &qword_1ED2631B8, (uint64_t (*)(uint64_t))sub_1A9B951C4, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BAB00C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;

  sub_1A9B95370(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

double sub_1A9BAB054(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 107) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1A9BAB070(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1A9BAA680(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A9BAB0A0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(unsigned __int16 *)(a1 + 120) | (*(unsigned __int8 *)(a1 + 122) << 16));
  return a1;
}

uint64_t sub_1A9BAB10C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1A9BAA670(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A9BAB13C()
{
  return sub_1A9CE7224();
}

uint64_t sub_1A9BAB15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BA7308(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CDA4E8]);
}

uint64_t sub_1A9BAB180()
{
  return sub_1A9CE72B4();
}

uint64_t sub_1A9BAB1A0()
{
  return sub_1A9CE72C0();
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.FlowingLabel()
{
  return &type metadata for SleepStagesLegend.FlowingLabel;
}

uint64_t destroy for SleepStagesLegend.LegendRow()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s13SleepHealthUI17SleepStagesLegendV12FlowingLabelVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A9BAB324(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.LegendRow()
{
  return &type metadata for SleepStagesLegend.LegendRow;
}

uint64_t sub_1A9BAB378()
{
  return sub_1A9B92B9C(&qword_1EEB43CC0, (uint64_t (*)(uint64_t))sub_1A9BAB3A4, MEMORY[0x1E0CD8CC8]);
}

void sub_1A9BAB3A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43CC8)
  {
    sub_1A9BA6BEC(255);
    sub_1A9B92B9C(&qword_1EEB43CD0, (uint64_t (*)(uint64_t))sub_1A9BA6BEC, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE6FD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43CC8);
  }
}

uint64_t sub_1A9BAB41C()
{
  return sub_1A9B92B9C(&qword_1EEB43CD8, (uint64_t (*)(uint64_t))sub_1A9BAB448, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9BAB448()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43CE0)
  {
    sub_1A9BA7600(255);
    sub_1A9B92B9C(&qword_1EEB43CE8, (uint64_t (*)(uint64_t))sub_1A9BA7600, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43CE0);
  }
}

uint64_t sub_1A9BAB4C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BAB4D0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9BAB4E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43CF0)
  {
    sub_1A9BAB558(255);
    sub_1A9B92B9C(&qword_1EEB43D70, (uint64_t (*)(uint64_t))sub_1A9BAB558, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43CF0);
  }
}

void sub_1A9BAB558(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43CF8, (uint64_t (*)(uint64_t))sub_1A9BAB574, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BAB574()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB43D00)
  {
    sub_1A9BAB628(255, &qword_1EEB43D08, (uint64_t)&unk_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
    sub_1A9BAB628(255, &qword_1EEB43D68, (uint64_t)&qword_1EEB43898, MEMORY[0x1E0CDDD78], (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9BAAB64);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB43D00);
  }
}

void sub_1A9BAB628(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4, MEMORY[0x1E0CDA208], MEMORY[0x1E0CD9BF0]);
    sub_1A9CE76BC();
    v6 = sub_1A9CE7164();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1A9BAB6AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1EEB43D18)
  {
    sub_1A9BAB754();
    v5[0] = v2;
    v5[1] = &type metadata for SleepStagesLegend.LegendLabelStyle;
    v5[2] = sub_1A9B92B9C(&qword_1EEB43D58, (uint64_t (*)(uint64_t))sub_1A9BAB754, MEMORY[0x1E0CDF8C8]);
    v5[3] = sub_1A9BAB930();
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDDF20], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB43D18);
  }
}

void sub_1A9BAB754()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43D20)
  {
    sub_1A9B95370(255, &qword_1EEB43D28, (uint64_t (*)(uint64_t))sub_1A9BAB7F0, MEMORY[0x1E0CDF840], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    sub_1A9BAB828();
    v0 = sub_1A9CE7D70();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43D20);
  }
}

void sub_1A9BAB7F0(uint64_t a1)
{
  sub_1A9BABD9C(a1, &qword_1EEB43D30, sub_1A9BAB80C);
}

void sub_1A9BAB80C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43D38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

unint64_t sub_1A9BAB828()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB43D40;
  if (!qword_1EEB43D40)
  {
    sub_1A9B95370(255, &qword_1EEB43D28, (uint64_t (*)(uint64_t))sub_1A9BAB7F0, MEMORY[0x1E0CDF840], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9BAB8B0();
    v3[1] = MEMORY[0x1E0CDF820];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB43D40);
  }
  return result;
}

unint64_t sub_1A9BAB8B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB43D48;
  if (!qword_1EEB43D48)
  {
    sub_1A9BAB7F0(255);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB43D50, (uint64_t (*)(uint64_t))sub_1A9BAB80C, MEMORY[0x1E0CDCF80]);
    v4[0] = MEMORY[0x1E0CDF820];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB43D48);
  }
  return result;
}

unint64_t sub_1A9BAB930()
{
  unint64_t result;

  result = qword_1EEB43D60;
  if (!qword_1EEB43D60)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CED5E4, &type metadata for SleepStagesLegend.LegendLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1EEB43D60);
  }
  return result;
}

void sub_1A9BAB974(uint64_t a1)
{
  sub_1A9BABE0C(a1, &qword_1EEB43D78, (void (*)(uint64_t))sub_1A9BAB4E0);
}

uint64_t sub_1A9BAB994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B992F8(*(_BYTE *)(v1 + 40), a1);
}

unint64_t sub_1A9BAB99C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = qword_1EEB43D98;
  if (!qword_1EEB43D98)
  {
    sub_1A9B95370(255, &qword_1EEB43D10, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, MEMORY[0x1E0CDA208], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    sub_1A9BAB754();
    v4[2] = v3;
    v4[3] = &type metadata for SleepStagesLegend.LegendLabelStyle;
    v4[4] = sub_1A9B92B9C(&qword_1EEB43D58, (uint64_t (*)(uint64_t))sub_1A9BAB754, MEMORY[0x1E0CDF8C8]);
    v4[5] = sub_1A9BAB930();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x1E0CDA1F0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB43D98);
  }
  return result;
}

uint64_t sub_1A9BABA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BAB628(0, &qword_1EEB43D08, (uint64_t)&qword_1EEB43D10, (uint64_t)sub_1A9BAB6AC, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))sub_1A9B95370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BABAE0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_1A9BAAB64(255, a2, MEMORY[0x1E0CDDD78], a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v8[0] = MEMORY[0x1E0CDDD58];
    v8[1] = a4;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BABB50(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))
{
  uint64_t v8;

  sub_1A9BAB628(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_1A9BABBA4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(void)))
{
  uint64_t v6;

  sub_1A9BAB628(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1A9BABBE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43DB0)
  {
    sub_1A9BABC60(255);
    sub_1A9B92B9C(&qword_1EEB43DD8, (uint64_t (*)(uint64_t))sub_1A9BABC60, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43DB0);
  }
}

void sub_1A9BABC60(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43DB8, (uint64_t (*)(uint64_t))sub_1A9BABC7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BABC7C()
{
  void (*v0)(uint64_t);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!qword_1EEB43DC0)
  {
    v0 = (void (*)(uint64_t))MEMORY[0x1E0CDCFD0];
    sub_1A9BABD28(255, &qword_1EEB43DC8, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9BABD9C(255, (unint64_t *)&qword_1EEB43DD0, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB43DC0);
  }
}

void sub_1A9BABD28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_1A9BABD9C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BABDF8(uint64_t a1)
{
  sub_1A9BABE0C(a1, &qword_1EEB43DE0, (void (*)(uint64_t))sub_1A9BABBE8);
}

void sub_1A9BABE0C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BABE88(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1A9C312B0(*(_BYTE *)(v1 + 16));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A9BABEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BABD28(0, &qword_1EEB43DC8, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BABF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BABD28(0, &qword_1EEB43DC8, (uint64_t (*)(uint64_t))sub_1A9BAB6AC, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SleepStagesLegend.LegendLabelStyle()
{
  return &type metadata for SleepStagesLegend.LegendLabelStyle;
}

uint64_t sub_1A9BABF98()
{
  return sub_1A9BABFC4(&qword_1EEB43DF0, (uint64_t (*)(uint64_t))sub_1A9BAB974, sub_1A9BAC050);
}

uint64_t sub_1A9BABFC4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = sub_1A9BAC06C((unint64_t *)&qword_1EEB43E00, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BAC050()
{
  return sub_1A9B92B9C(&qword_1EEB43DF8, (uint64_t (*)(uint64_t))sub_1A9BAB4E0, MEMORY[0x1E0CDFB10]);
}

uint64_t sub_1A9BAC06C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_1A9BA3F70(255, a2, a3, a4);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BAC0AC()
{
  return sub_1A9BABFC4(&qword_1EEB43E08, (uint64_t (*)(uint64_t))sub_1A9BABDF8, sub_1A9BAC0D8);
}

uint64_t sub_1A9BAC0D8()
{
  return sub_1A9B92B9C(&qword_1EEB43E10, (uint64_t (*)(uint64_t))sub_1A9BABBE8, MEMORY[0x1E0CDFCC0]);
}

uint64_t sub_1A9BAC0F4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9BAC104(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB43E20, (uint64_t (*)(uint64_t))sub_1A9BAC120, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9BAC120()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB43E28)
  {
    sub_1A9BAC19C(255, &qword_1EEB43E30, (void (*)(uint64_t))MEMORY[0x1E0CDC350]);
    sub_1A9CE75D8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB43E28);
  }
}

void sub_1A9BAC19C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1A9BAC218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BAC19C(0, &qword_1EEB43E30, (void (*)(uint64_t))MEMORY[0x1E0CDC350]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BAC26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BAC19C(0, &qword_1EEB43E30, (void (*)(uint64_t))MEMORY[0x1E0CDC350]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BAC2C0(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BAC19C(0, &qword_1EEB43E30, (void (*)(uint64_t))MEMORY[0x1E0CDC350]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BAC30C()
{
  return sub_1A9B92B9C(&qword_1EEB43E38, (uint64_t (*)(uint64_t))sub_1A9BAC338, MEMORY[0x1E0CDFB10]);
}

void sub_1A9BAC338()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43E40)
  {
    sub_1A9BAC104(255);
    sub_1A9B92B9C(&qword_1EEB43E48, (uint64_t (*)(uint64_t))sub_1A9BAC104, MEMORY[0x1E0CE0680]);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43E40);
  }
}

unint64_t sub_1A9BAC408(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BAF810();
  v2 = (_QWORD *)sub_1A9CE8AE4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_1A9BAD65C((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BAC500(uint64_t a1)
{
  return sub_1A9BACA8C(a1, (void (*)(_QWORD))sub_1A9BAF9CC, (uint64_t)&qword_1EEB47F60, (uint64_t)type metadata accessor for AttributeName, (uint64_t (*)(uint64_t))sub_1A9BAD65C);
}

unint64_t sub_1A9BAC524(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BAF938();
  v2 = (_QWORD *)sub_1A9CE8AE4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_1A9BAD65C((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BAC628(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BAF890(0, &qword_1EEB43F30);
  v2 = (_QWORD *)sub_1A9CE8AE4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A9BAD80C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BAC754(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BAF890(0, &qword_1EEB43F10);
  v2 = sub_1A9CE8AE4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  v7 = MEMORY[0x1E0DEC198];
  while (1)
  {
    sub_1A9BAF6F4(v6, (uint64_t)v16, (uint64_t)&qword_1EEB43F18, v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1A9BAF8DC);
    result = sub_1A9BAD6E8((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v3[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1A9BAF740(&v18, (_OWORD *)(v3[7] + 32 * result));
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BAC8D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BAF890(0, (unint64_t *)&qword_1EEB43F38);
  v2 = sub_1A9CE8AE4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  v7 = MEMORY[0x1E0DEA968];
  while (1)
  {
    sub_1A9BAF6F4(v6, (uint64_t)&v16, (uint64_t)&qword_1EEB43F40, v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1A9BAF8DC);
    v8 = v16;
    v9 = v17;
    result = sub_1A9BAD80C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1A9BAF740(&v18, (_OWORD *)(v3[7] + 32 * result));
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BACA44(uint64_t a1)
{
  return sub_1A9BACA8C(a1, (void (*)(_QWORD))sub_1A9BAF78C, (uint64_t)&qword_1EEB47800, (uint64_t)type metadata accessor for Key, (uint64_t (*)(uint64_t))sub_1A9BAD870);
}

unint64_t sub_1A9BACA68(uint64_t a1)
{
  return sub_1A9BACA8C(a1, (void (*)(_QWORD))sub_1A9BAF670, (uint64_t)&unk_1EEB43F08, (uint64_t)type metadata accessor for TraitKey, (uint64_t (*)(uint64_t))sub_1A9BAD65C);
}

unint64_t sub_1A9BACA8C(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  a2(0);
  v9 = sub_1A9CE8AE4();
  v10 = (_QWORD *)v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  v12 = v9 + 64;
  v13 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A9BAF6F4(v13, (uint64_t)&v20, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1A9BAFA50);
    v14 = v20;
    result = a5(v20);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v10[6] + 8 * result) = v14;
    result = (unint64_t)sub_1A9BAF740(&v21, (_OWORD *)(v10[7] + 32 * result));
    v17 = v10[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v10[2] = v19;
    v13 += 40;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t OneWeekResults.morningIndexRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t OneWeekResults.summaries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OneWeekResults.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 24);
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for OneWeekResults()
{
  uint64_t result;

  result = qword_1EEB43EA8;
  if (!qword_1EEB43EA8)
    return swift_getSingletonMetadata();
  return result;
}

id OneWeekResults.averageDurationFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 28));
}

id OneWeekResults.axisFormatter.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 32));
}

uint64_t OneWeekResults.week.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 36);
  return sub_1A9BACCD0(v3, a1);
}

uint64_t sub_1A9BACCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL OneWeekResults.hasData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OneWeekResults() + 36));
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  if (v2 == 1)
  {
    v3 = 0;
    v4 = 0.0;
  }
  else
  {
    v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
    v6 = (double *)(v1 + 72);
    v4 = 0.0;
    v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v8 = *(v6 - 4);
      v9 = *v6;
      v6 += 8;
      v4 = v4 + v8 + v9;
      v7 -= 2;
    }
    while (v7);
    if (v2 == v3)
      return v4 > 0.0;
  }
  v10 = v2 - v3;
  v11 = (double *)(v1 + 32 * v3 + 40);
  do
  {
    v12 = *v11;
    v11 += 4;
    v4 = v4 + v12;
    --v10;
  }
  while (v10);
  return v4 > 0.0;
}

uint64_t static OneWeekResults.emptyResults.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;

  v2 = sub_1A9CE6378();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*MEMORY[0x1E0CB4B90];
  v12 = *(_QWORD *)(MEMORY[0x1E0CB4B90] + 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0CB0EF8], v2);
  sub_1A9CE6384();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v13, sel_setAllowedUnits_, 96);
  objc_msgSend(v13, sel_setUnitsStyle_, 1);
  v14 = _sSo23NSDateIntervalFormatterC13SleepHealthUIE15weeklyChartAxisABvgZ_0();
  return OneWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)(v11, v12, MEMORY[0x1E0DEE9D8], (uint64_t)v10, (unint64_t)v13, v14, a1);
}

uint64_t OneWeekResults.init(morningIndexRange:summaries:gregorianCalendar:averageDurationFormatter:axisFormatter:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t isUniquelyReferenced_nonNull_native;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  _QWORD *v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;

  v78 = a6;
  v81 = a1;
  v13 = type metadata accessor for WeekResults(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v74 = (uint64_t *)((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (int *)type metadata accessor for WeekResultsBuilder();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  v20 = (int *)type metadata accessor for OneWeekResults();
  v21 = (char *)a7 + v20[6];
  v22 = sub_1A9CE6444();
  v71 = *(_QWORD *)(v22 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v23(v21, a4, v22);
  *(_QWORD *)((char *)a7 + v20[7]) = a5;
  v72 = v22;
  v73 = v20;
  v24 = v20[8];
  isUniquelyReferenced_nonNull_native = a3;
  v76 = a4;
  v77 = a7;
  v26 = v78;
  *(_QWORD *)((char *)a7 + v24) = v78;
  v23(&v19[v16[5]], a4, v22);
  v27 = v16[9];
  *(_QWORD *)&v19[v27] = sub_1A9BAE914(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)v19 = v81;
  *((_QWORD *)v19 + 1) = 7;
  v70 = v16[6];
  *(_QWORD *)&v19[v70] = 0x40CC200000000000;
  *(_QWORD *)&v19[v16[7]] = a5;
  v28 = v16[8];
  v29 = v26;
  v81 = v19;
  v82 = v27;
  *(_QWORD *)&v19[v28] = v26;
  v75 = (id)a5;
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_25:
    v54 = (id)a5;
    v55 = v29;
    swift_bridgeObjectRetain_n();
    v56 = v54;
    v57 = v55;
    v30 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    a5 = (unint64_t)v81;
    if (v30)
      goto LABEL_3;
  }
  else
  {
    v30 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
    v31 = (id)a5;
    v32 = v29;
    v33 = v31;
    v34 = v32;
    swift_bridgeObjectRetain();
    a5 = (unint64_t)v81;
    if (v30)
    {
LABEL_3:
      v29 = (id)(isUniquelyReferenced_nonNull_native & 0xC000000000000001);
      v35 = 4;
      v79 = v30;
      v80 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      do
      {
        if (v29)
          v36 = (id)MEMORY[0x1AF41F600](v35 - 4, isUniquelyReferenced_nonNull_native);
        else
          v36 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v35);
        v37 = v36;
        v38 = v35 - 3;
        if (__OFADD__(v35 - 4, 1))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        objc_msgSend(v36, sel_morningIndex);
        if ((sub_1A9CE86A0() & 1) != 0)
        {
          v39 = isUniquelyReferenced_nonNull_native;
          v40 = objc_msgSend(v37, sel_morningIndex);
          v29 = v37;
          v41 = v82;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v83 = *(_QWORD *)(a5 + v41);
          v42 = v83;
          *(_QWORD *)(a5 + v41) = 0x8000000000000000;
          a5 = sub_1A9BAD7DC((uint64_t)v40);
          v44 = *(_QWORD *)(v42 + 16);
          v45 = (v43 & 1) == 0;
          v46 = v44 + v45;
          if (__OFADD__(v44, v45))
            goto LABEL_23;
          v47 = v43;
          if (*(_QWORD *)(v42 + 24) >= v46)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1A9BAE6A4();
          }
          else
          {
            sub_1A9BAE18C(v46, isUniquelyReferenced_nonNull_native);
            v48 = sub_1A9BAD7DC((uint64_t)v40);
            if ((v47 & 1) != (v49 & 1))
            {
              result = sub_1A9CE8BE0();
              __break(1u);
              return result;
            }
            a5 = v48;
          }
          isUniquelyReferenced_nonNull_native = v83;
          if ((v47 & 1) != 0)
          {
            v50 = *(_QWORD *)(v83 + 56);

            *(_QWORD *)(v50 + 8 * a5) = v29;
          }
          else
          {
            *(_QWORD *)(v83 + 8 * (a5 >> 6) + 64) |= 1 << a5;
            *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 8 * a5) = v40;
            *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * a5) = v29;
            v51 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
            v52 = __OFADD__(v51, 1);
            v53 = v51 + 1;
            if (v52)
              goto LABEL_24;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v53;
          }
          a5 = (unint64_t)v81;
          *(_QWORD *)((char *)v81 + v82) = isUniquelyReferenced_nonNull_native;

          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = v39;
          v30 = v79;
          v29 = (id)v80;
        }
        else
        {

        }
        ++v35;
      }
      while (v38 != v30);
    }
  }
  swift_bridgeObjectRelease();
  v58 = swift_bridgeObjectRetain();
  sub_1A9BAD3D8(v58);
  v60 = v59;
  swift_bridgeObjectRelease();
  v61 = v78;
  if (v60)
  {
    v62 = objc_msgSend(v60, sel_sleepDurationGoal);
    if (v62)
    {
      v63 = v62;
      v64 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
      objc_msgSend(v63, sel_doubleValueForUnit_, v64);
      v66 = v65;

      v61 = v78;
      *(_QWORD *)(a5 + v70) = v66;
    }
    else
    {

    }
  }
  v67 = v74;
  sub_1A9CB209C(v74);

  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v76, v72);
  sub_1A9BAEA04(a5);
  return sub_1A9BAEA40((uint64_t)v67, (uint64_t)v77 + v73[9]);
}

uint64_t sub_1A9BAD3D8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      v11 = 8 * v8;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v11);
      v13 = *(void **)(*(_QWORD *)(a1 + 56) + v11);
      swift_bridgeObjectRetain();
      v15 = v13;
      if (v9)
      {
LABEL_6:
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v19 >= v10)
          goto LABEL_27;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v10)
            goto LABEL_27;
          v20 = *(_QWORD *)(v2 + 8 * v7);
          if (!v20)
          {
            v7 = v19 + 2;
            if (v19 + 2 >= v10)
              goto LABEL_27;
            v20 = *(_QWORD *)(v2 + 8 * v7);
            if (!v20)
            {
              v7 = v19 + 3;
              if (v19 + 3 >= v10)
                goto LABEL_27;
              v20 = *(_QWORD *)(v2 + 8 * v7);
              if (!v20)
              {
                v21 = v19 + 4;
                if (v21 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v12;
                }
                v20 = *(_QWORD *)(v2 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    v7 = v21 + 1;
                    if (__OFADD__(v21, 1))
                      break;
                    if (v7 >= v10)
                      goto LABEL_27;
                    v20 = *(_QWORD *)(v2 + 8 * v7);
                    ++v21;
                    if (v20)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v24 = 0;
                  v25 = 6;
                  if (v10 > 6)
                    v25 = v10;
                  v26 = v25 - 6;
                  while (v26 != v24)
                  {
                    v23 = *(_QWORD *)(a1 + 112 + 8 * v24++);
                    if (v23)
                    {
                      v7 = v24 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                v7 = v21;
              }
            }
          }
        }
LABEL_24:
        v14 = v20 - 1;
        v9 = (v20 - 1) & v20;
        v17 = __clz(__rbit64(v20)) + (v7 << 6);
LABEL_7:
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v17);
        if (v18 < v12)
        {
          v22 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v17);

          v15 = v22;
          v12 = v18;
          if (v9)
            goto LABEL_6;
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v14 >= 9)
      {
        v23 = *(_QWORD *)(a1 + 96);
        if (v23)
        {
          v7 = 4;
        }
        else
        {
          v23 = *(_QWORD *)(a1 + 104);
          if (!v23)
            goto LABEL_44;
          v7 = 5;
        }
LABEL_31:
        v9 = (v23 - 1) & v23;
        v8 = __clz(__rbit64(v23)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v14 = v3 & 0x3F;
    if (v14 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v23 = *(_QWORD *)(a1 + 72);
      if (v23)
      {
        v7 = 1;
        goto LABEL_31;
      }
      if (v14 >= 8)
      {
        v23 = *(_QWORD *)(a1 + 80);
        if (v23)
        {
          v7 = 2;
        }
        else
        {
          v23 = *(_QWORD *)(a1 + 88);
          if (!v23)
            goto LABEL_38;
          v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

unint64_t sub_1A9BAD65C(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CE82E0();
  sub_1A9CE8C4C();
  sub_1A9CE831C();
  v2 = sub_1A9CE8C7C();
  swift_bridgeObjectRelease();
  return sub_1A9BAD8F0(a1, v2);
}

unint64_t sub_1A9BAD6E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A9CE8964();
  return sub_1A9BADA64(a1, v2);
}

unint64_t sub_1A9BAD718(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  v2 = sub_1A9CE8C7C();
  return sub_1A9BADB28(a1, v2);
}

unint64_t sub_1A9BAD770(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CE5F64();
  sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  v2 = sub_1A9CE8244();
  return sub_1A9BADBC4(a1, v2);
}

unint64_t sub_1A9BAD7DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A9CE8C40();
  return sub_1A9BADB28(a1, v2);
}

unint64_t sub_1A9BAD80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9CE8C4C();
  sub_1A9CE831C();
  v4 = sub_1A9CE8C7C();
  return sub_1A9BADD04(a1, a2, v4);
}

unint64_t sub_1A9BAD870(uint64_t a1)
{
  uint64_t v2;

  sub_1A9CE82E0();
  sub_1A9CE8C4C();
  sub_1A9CE831C();
  v2 = sub_1A9CE8C7C();
  swift_bridgeObjectRelease();
  return sub_1A9BAD8F0(a1, v2);
}

unint64_t sub_1A9BAD8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1A9CE82E0();
    v8 = v7;
    if (v6 == sub_1A9CE82E0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1A9CE82E0();
          v15 = v14;
          if (v13 == sub_1A9CE82E0() && v15 == v16)
            break;
          v18 = sub_1A9CE8BB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1A9BADA64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1A9BAF750(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1AF41F5A0](v9, a1);
      sub_1A9B948B8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1A9BADB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1A9BADBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = sub_1A9CE5F64();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5);
      sub_1A9B92B9C(&qword_1ED262DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F8]);
      v15 = sub_1A9CE82A4();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_1A9BADD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1A9CE8BB0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1A9CE8BB0() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1A9BADDE4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;
  uint64_t v46;

  v3 = v2;
  v5 = sub_1A9CE5F64();
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1A9BAF5F0();
  v45 = a2;
  v10 = sub_1A9CE8AD8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v43 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = v2;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_34;
      v25 = v43[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v42)
              goto LABEL_34;
            v25 = v43[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v46 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 32))(v8, v28, v5);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v8, v28, v5);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
    result = sub_1A9CE8244();
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v5);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v9 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1A9BAE18C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  sub_1A9BAFAB0();
  result = sub_1A9CE8AD8();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v35);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      result = sub_1A9CE8C40();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void *sub_1A9BAE438()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = sub_1A9CE5F64();
  v1 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v2);
  v36 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BAF5F0();
  v33 = v0;
  v4 = *v0;
  v5 = sub_1A9CE8ACC();
  v6 = *(_QWORD *)(v4 + 16);
  v39 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v35 = (const void *)(v4 + 64);
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, v35, 8 * v9);
    v7 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v38 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  v16 = v36;
  v15 = v37;
  v17 = v39;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_12;
    }
    v27 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v11;
    if (!v28)
    {
      v11 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v11);
      if (!v28)
        break;
    }
LABEL_25:
    v14 = (v28 - 1) & v28;
    v19 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = 16 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v19);
    v24 = *v23;
    v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 56) + v22);
    *v26 = v24;
    v26[1] = v25;
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v11 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v11);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1A9BAE6A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1A9BAFAB0();
  v2 = *v0;
  v3 = sub_1A9CE8ACC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1A9BAE840(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1A9BAF570();
    v3 = (_QWORD *)sub_1A9CE8AE4();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1A9BAD718(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

unint64_t sub_1A9BAE914(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  unint64_t result;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  sub_1A9BAFAB0();
  v3 = (_QWORD *)sub_1A9CE8AE4();
  v4 = a1[4];
  v5 = (void *)a1[5];
  result = sub_1A9BAD7DC(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v17 = v5;
    return (unint64_t)v3;
  }
  v8 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v4;
    *(_QWORD *)(v3[7] + v9) = v5;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v4 = (uint64_t)*(v8 - 1);
    v14 = *v8;
    v15 = v5;
    result = sub_1A9BAD7DC(v4);
    v8 = v13;
    v5 = v14;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9BAEA04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeekResultsBuilder();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BAEA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeekResults(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for OneWeekResults(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v43 = v10;
    v44 = v11;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = a3[8];
    v14 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + v12) = (uint64_t)v14;
    v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    v16 = a3[9];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v20 = *(uint64_t *)((char *)a2 + v16);
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v19;
    v17[16] = v18[16];
    v21 = (int *)type metadata accessor for WeekResults(0);
    v22 = v21[6];
    v42 = &v17[v22];
    v23 = &v18[v22];
    v24 = sub_1A9CE5F64();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v26 = v14;
    v27 = v15;
    swift_bridgeObjectRetain();
    v25(v42, v23, v24);
    *(_QWORD *)&v17[v21[7]] = *(_QWORD *)&v18[v21[7]];
    v28 = v21[8];
    v29 = &v17[v28];
    v30 = &v18[v28];
    v29[8] = v30[8];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_QWORD *)&v17[v21[9]] = *(_QWORD *)&v18[v21[9]];
    v44(&v17[v21[10]], &v18[v21[10]], v43);
    v31 = v21[11];
    v32 = *(void **)&v18[v31];
    *(_QWORD *)&v17[v31] = v32;
    v33 = v21[12];
    v34 = *(void **)&v18[v33];
    *(_QWORD *)&v17[v33] = v34;
    v35 = v21[13];
    v36 = *(void **)&v18[v35];
    *(_QWORD *)&v17[v35] = v36;
    v37 = v32;
    v38 = v34;
    v39 = v36;
  }
  return v4;
}

void destroy for OneWeekResults(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = sub_1A9CE6444();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);

  v7 = a1 + a2[9];
  swift_bridgeObjectRelease();
  v8 = (int *)type metadata accessor for WeekResults(0);
  v9 = v7 + v8[6];
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v6(v7 + v8[10], v5);

}

uint64_t initializeWithCopy for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v41 = v9;
  v42 = v10;
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = a3[8];
  v13 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v19 = *(_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v18;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v20 = (int *)type metadata accessor for WeekResults(0);
  v21 = v20[6];
  v40 = v16 + v21;
  v22 = v17 + v21;
  v23 = sub_1A9CE5F64();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  v25 = v13;
  v26 = v14;
  swift_bridgeObjectRetain();
  v24(v40, v22, v23);
  *(_QWORD *)(v16 + v20[7]) = *(_QWORD *)(v17 + v20[7]);
  v27 = v20[8];
  v28 = v16 + v27;
  v29 = v17 + v27;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v16 + v20[9]) = *(_QWORD *)(v17 + v20[9]);
  v42(v16 + v20[10], v17 + v20[10], v41);
  v30 = v20[11];
  v31 = *(void **)(v17 + v30);
  *(_QWORD *)(v16 + v30) = v31;
  v32 = v20[12];
  v33 = *(void **)(v17 + v32);
  *(_QWORD *)(v16 + v32) = v33;
  v34 = v20[13];
  v35 = *(void **)(v17 + v34);
  *(_QWORD *)(v16 + v34) = v35;
  v36 = v31;
  v37 = v33;
  v38 = v35;
  return a1;
}

_QWORD *assignWithCopy for OneWeekResults(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = *(void **)((char *)a2 + v11);
  v13 = *(void **)((char *)a1 + v11);
  *(_QWORD *)((char *)a1 + v11) = v12;
  v14 = v12;

  v15 = a3[8];
  v16 = *(void **)((char *)a2 + v15);
  v17 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  v18 = v16;

  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = *((_QWORD *)v21 + 1);
  v20[16] = v21[16];
  *((_QWORD *)v20 + 1) = v22;
  v23 = (int *)type metadata accessor for WeekResults(0);
  v24 = v23[6];
  v25 = &v20[v24];
  v26 = &v21[v24];
  v27 = sub_1A9CE5F64();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  *(_QWORD *)&v20[v23[7]] = *(_QWORD *)&v21[v23[7]];
  v28 = v23[8];
  v29 = &v20[v28];
  v30 = &v21[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  *(_QWORD *)&v20[v23[9]] = *(_QWORD *)&v21[v23[9]];
  v10(&v20[v23[10]], &v21[v23[10]], v9);
  v32 = v23[11];
  v33 = *(void **)&v21[v32];
  v34 = *(void **)&v20[v32];
  *(_QWORD *)&v20[v32] = v33;
  v35 = v33;

  v36 = v23[12];
  v37 = *(void **)&v21[v36];
  v38 = *(void **)&v20[v36];
  *(_QWORD *)&v20[v36] = v37;
  v39 = v37;

  v40 = v23[13];
  v41 = *(void **)&v21[v40];
  v42 = *(void **)&v20[v40];
  *(_QWORD *)&v20[v40] = v41;
  v43 = v41;

  return a1;
}

uint64_t initializeWithTake for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12 + 8);
  *(_QWORD *)v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(v13 + 8) = v15;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(a2 + v12 + 16);
  v16 = (int *)type metadata accessor for WeekResults(0);
  v17 = v16[6];
  v18 = v13 + v17;
  v19 = v14 + v17;
  v20 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(v13 + v16[7]) = *(_QWORD *)(v14 + v16[7]);
  v21 = v16[8];
  v22 = v13 + v21;
  v23 = v14 + v21;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v13 + v16[9]) = *(_QWORD *)(v14 + v16[9]);
  v10(v13 + v16[10], v14 + v16[10], v9);
  *(_QWORD *)(v13 + v16[11]) = *(_QWORD *)(v14 + v16[11]);
  *(_QWORD *)(v13 + v16[12]) = *(_QWORD *)(v14 + v16[12]);
  *(_QWORD *)(v13 + v16[13]) = *(_QWORD *)(v14 + v16[13]);
  return a1;
}

uint64_t assignWithTake for OneWeekResults(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  v13 = a3[8];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = (int *)type metadata accessor for WeekResults(0);
  v19 = v18[6];
  v20 = v16 + v19;
  v21 = v17 + v19;
  v22 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  *(_QWORD *)(v16 + v18[7]) = *(_QWORD *)(v17 + v18[7]);
  v23 = v18[8];
  v24 = v16 + v23;
  v25 = v17 + v23;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v16 + v18[9]) = *(_QWORD *)(v17 + v18[9]);
  v10(v16 + v18[10], v17 + v18[10], v9);
  v26 = v18[11];
  v27 = *(void **)(v16 + v26);
  *(_QWORD *)(v16 + v26) = *(_QWORD *)(v17 + v26);

  v28 = v18[12];
  v29 = *(void **)(v16 + v28);
  *(_QWORD *)(v16 + v28) = *(_QWORD *)(v17 + v28);

  v30 = v18[13];
  v31 = *(void **)(v16 + v30);
  *(_QWORD *)(v16 + v30) = *(_QWORD *)(v17 + v30);

  return a1;
}

uint64_t getEnumTagSinglePayload for OneWeekResults()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BAF37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A9CE6444();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for WeekResults(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for OneWeekResults()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BAF428(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_1A9CE6444();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for WeekResults(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A9BAF4C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for WeekResults(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1A9BAF570()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43EF0)
  {
    type metadata accessor for CLKDeviceSizeClass(255);
    sub_1A9B92B9C(&qword_1EEB43EF8, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceSizeClass, (uint64_t)&unk_1A9CECC28);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43EF0);
  }
}

void sub_1A9BAF5F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2632E8)
  {
    sub_1A9CE5F64();
    sub_1A9B92B9C(&qword_1ED262DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2632E8);
  }
}

void sub_1A9BAF670()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F00)
  {
    type metadata accessor for TraitKey(255);
    sub_1A9B92B9C(&qword_1EEB434E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEC25C);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F00);
  }
}

uint64_t sub_1A9BAF6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

_OWORD *sub_1A9BAF740(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1A9BAF750(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

void sub_1A9BAF78C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F20)
  {
    type metadata accessor for Key(255);
    sub_1A9B92B9C((unint64_t *)&qword_1EEB434C0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1A9CEC218);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F20);
  }
}

void sub_1A9BAF810()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F28)
  {
    type metadata accessor for FeatureKey(255);
    sub_1A9B92B9C(&qword_1EEB434F8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1A9CEC2E4);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F28);
  }
}

void sub_1A9BAF890(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1A9CE8AF0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_1A9BAF8DC(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1A9BAF938()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F48)
  {
    type metadata accessor for TraitKey(255);
    type metadata accessor for Weight(255);
    sub_1A9B92B9C(&qword_1EEB434E8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1A9CEC25C);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F48);
  }
}

void sub_1A9BAF9CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F50)
  {
    type metadata accessor for AttributeName(255);
    sub_1A9B92B9C((unint64_t *)&unk_1EEB47F80, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1A9CEC2A0);
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F50);
  }
}

void sub_1A9BAFA50(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1A9BAFAB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F58)
  {
    sub_1A9BAFB14();
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F58);
  }
}

unint64_t sub_1A9BAFB14()
{
  unint64_t result;

  result = qword_1ED262B50;
  if (!qword_1ED262B50)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED262B50);
  }
  return result;
}

_QWORD *sub_1A9BAFB50()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for SilentModeModel();
  v0 = swift_allocObject();
  result = sub_1A9BB03CC();
  qword_1EEB43F60 = v0;
  return result;
}

uint64_t static SilentModeModel.shared.getter()
{
  if (qword_1EEB42BA0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1A9BAFBCC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BAFC48()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1A9CE6E70();
}

uint64_t sub_1A9BAFCB8()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A9BAFD30()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1A9CE6E70();
}

void (*sub_1A9BAFD9C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A9CE6E58();
  return sub_1A9BAFE14;
}

void sub_1A9BAFE14(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

id sub_1A9BAFE60()
{
  id v0;
  void *v1;
  id v2;

  v0 = sub_1A9BB0EA8();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = objc_msgSend(v0, sel_getSilentMode);

  return v2;
}

uint64_t sub_1A9BAFEA4()
{
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BAFF1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;

  v2 = MEMORY[0x1E0DEAFA0];
  sub_1A9B94CA0(0, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v7 = MEMORY[0x1E0C80A78](v3, v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v15 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13((char *)&v15 - v11, a1, v4);
  v13(v9, (uint64_t)v12, v4);
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, v2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_1A9BB0058()
{
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BB00CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = MEMORY[0x1E0DEAFA0];
  sub_1A9B94CA0(0, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - v7, a1, v4);
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, v2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void (*sub_1A9BB01C4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = MEMORY[0x1E0DEAFA0];
  sub_1A9B94CA0(0, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  v8 = malloc(v7);
  v9 = OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, v4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v3[16] = v10;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BB02B4;
}

void sub_1A9BB02B4(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_1A9CE6E4C();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    sub_1A9CE6E4C();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

_QWORD *sub_1A9BB03CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  id v37;
  id v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[3];
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;

  v1 = v0;
  v57 = *v0;
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v47 - v4;
  v56 = sub_1A9CE8778();
  v51 = *(_QWORD *)(v56 - 8);
  v7 = MEMORY[0x1E0C80A78](v56, v6);
  v54 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v47 - v10;
  sub_1A9B929B4();
  v13 = *(_QWORD *)(v12 - 8);
  v52 = v12;
  v53 = v13;
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v55 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v47 - v18;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)v47 - v24;
  v0[2] = 0;
  v0[3] = 0;
  v26 = (char *)v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  type metadata accessor for SilentModeModel();
  LOBYTE(v58) = sub_1A9BAFE60() & 1;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v25, v21);
  sub_1A9BB1044();
  v50 = (id)objc_opt_self();
  v27 = objc_msgSend(v50, sel_defaultCenter);
  v49 = (id)objc_opt_self();
  v28 = objc_msgSend(v49, sel_sharedAVSystemController);
  sub_1A9CE8784();

  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v58 = (id)sub_1A9CE870C();
  v29 = sub_1A9CE8700();
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v48(v5, 1, 1, v29);
  v47[2] = sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v47[1] = sub_1A9B92A68();
  v30 = v56;
  sub_1A9CE6EAC();
  sub_1A9BB16A0((uint64_t)v5, (uint64_t)&qword_1ED262570, (uint64_t)MEMORY[0x1E0DEF868], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1A9B92F34);

  v51 = *(_QWORD *)(v51 + 8);
  ((void (*)(char *, uint64_t))v51)(v11, v30);
  v31 = swift_allocObject();
  swift_weakInit();
  v32 = swift_allocObject();
  v33 = v57;
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = v33;
  v47[0] = sub_1A9B92B9C((unint64_t *)&unk_1ED262560, (uint64_t (*)(uint64_t))sub_1A9B929B4, MEMORY[0x1E0C95CB8]);
  v34 = v52;
  v35 = sub_1A9CE6EC4();
  swift_release();
  v36 = *(void (**)(char *, uint64_t))(v53 + 8);
  v36(v19, v34);
  v1[2] = v35;
  swift_release();
  v37 = objc_msgSend(v50, sel_defaultCenter);
  v38 = objc_msgSend(v49, sel_sharedAVSystemController);
  v39 = v54;
  sub_1A9CE8784();

  v58 = (id)sub_1A9CE870C();
  v48(v5, 1, 1, v29);
  v40 = v55;
  v41 = v56;
  sub_1A9CE6EAC();
  sub_1A9BB16A0((uint64_t)v5, (uint64_t)&qword_1ED262570, (uint64_t)MEMORY[0x1E0DEF868], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1A9B92F34);

  ((void (*)(char *, uint64_t))v51)(v39, v41);
  v42 = swift_allocObject();
  swift_weakInit();
  v43 = swift_allocObject();
  v44 = v57;
  *(_QWORD *)(v43 + 16) = v42;
  *(_QWORD *)(v43 + 24) = v44;
  v45 = sub_1A9CE6EC4();
  swift_release();
  v36(v40, v34);
  v1[3] = v45;
  swift_release();
  return v1;
}

void sub_1A9BB092C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19[5];
  __int128 v20;
  __int128 v21;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v0 = sub_1A9CE5F7C();
    if (!v0)
      goto LABEL_13;
    v1 = v0;
    v18 = (void *)sub_1A9CE82E0();
    sub_1A9CE897C();
    if (*(_QWORD *)(v1 + 16) && (v2 = sub_1A9BAD6E8((uint64_t)v19), (v3 & 1) != 0))
    {
      sub_1A9B948EC(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v20);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1A9B948B8((uint64_t)v19);
    if (!*((_QWORD *)&v21 + 1))
    {
      swift_release();
      sub_1A9BB16A0((uint64_t)&v20, (uint64_t)&qword_1EEB43518, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1A9B94CA0);
      return;
    }
    sub_1A9B94A18(0, &qword_1EEB440A8);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_13:
      swift_release();
      return;
    }
    if (qword_1EEB42E78 != -1)
      swift_once();
    v4 = sub_1A9CE6990();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EEB49440);
    v5 = v18;
    v6 = sub_1A9CE6978();
    v7 = sub_1A9CE867C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19[0] = v17;
      *(_DWORD *)v8 = 136446466;
      v9 = sub_1A9CE8D48();
      *(_QWORD *)&v20 = sub_1A9B91D6C(v9, v10, v19);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      v11 = v5;
      v12 = objc_msgSend(v11, sel_description);
      v13 = sub_1A9CE82E0();
      v15 = v14;

      *(_QWORD *)&v20 = sub_1A9B91D6C(v13, v15, v19);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Silent mode enabled did change: %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v17, -1, -1);
      MEMORY[0x1AF420344](v8, -1, -1);

    }
    else
    {

    }
    v16 = objc_msgSend(v5, sel_BOOLValue);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v19[0]) = v16;
    swift_retain();
    sub_1A9CE6E70();
    swift_release();

  }
}

uint64_t sub_1A9BB0CCC()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_1EEB42E78 != -1)
      swift_once();
    v1 = sub_1A9CE6990();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49440);
    v2 = sub_1A9CE6978();
    v3 = sub_1A9CE8664();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v8 = v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_1A9CE8D48();
      sub_1A9B91D6C(v6, v7, &v8);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v2, v3, "[%{public}s] Server connection died, rebuilding", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v5, -1, -1);
      MEMORY[0x1AF420344](v4, -1, -1);
    }

    sub_1A9BB1044();
    return swift_release();
  }
  return result;
}

void static SilentModeModel.prewarm()()
{

}

id sub_1A9BB0EA8()
{
  id result;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedAVSystemController);
  if (!result)
  {
    if (qword_1EEB42E78 != -1)
      swift_once();
    v1 = sub_1A9CE6990();
    __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49440);
    v2 = sub_1A9CE6978();
    v3 = sub_1A9CE8664();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v8 = v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_1A9CE8D48();
      sub_1A9B91D6C(v6, v7, &v8);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v2, v3, "[%{public}s] Failed to access shared AVSystemController", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v5, -1, -1);
      MEMORY[0x1AF420344](v4, -1, -1);
    }

    return 0;
  }
  return result;
}

void sub_1A9BB1044()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  id v23[2];

  v23[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = sub_1A9BB0EA8();
  if (v0)
  {
    v1 = v0;
    sub_1A9B92F34(0, &qword_1EEB440A0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1A9CEB520;
    v3 = (void *)*MEMORY[0x1E0D48218];
    *(_QWORD *)(v2 + 32) = *MEMORY[0x1E0D48218];
    type metadata accessor for Name(0);
    v4 = v3;
    v5 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    v6 = *MEMORY[0x1E0D48280];
    v23[0] = 0;
    v7 = objc_msgSend(v1, sel_setAttribute_forKey_error_, v5, v6, v23);

    if (v7)
    {
      v8 = v23[0];
    }
    else
    {
      v9 = v23[0];
      v10 = (void *)sub_1A9CE61E0();

      swift_willThrow();
      if (qword_1EEB42E78 != -1)
        swift_once();
      v11 = sub_1A9CE6990();
      __swift_project_value_buffer(v11, (uint64_t)qword_1EEB49440);
      v12 = v10;
      v13 = v10;
      v14 = sub_1A9CE6978();
      v15 = sub_1A9CE8664();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = swift_slowAlloc();
        v17 = (void *)swift_slowAlloc();
        v23[0] = v17;
        *(_DWORD *)v16 = 136446466;
        v18 = sub_1A9CE8D48();
        sub_1A9B91D6C(v18, v19, (uint64_t *)v23);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2082;
        v20 = v10;
        sub_1A9BB15F4();
        v21 = sub_1A9CE82F8();
        sub_1A9B91D6C(v21, v22, (uint64_t *)v23);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Failed to set attribute with error: %{public}s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v17, -1, -1);
        MEMORY[0x1AF420344](v16, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t SilentModeModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SilentModeModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI15SilentModeModel__enabled;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1A9BB147C()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1A9BB1488@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SilentModeModel();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BB14CC()
{
  return type metadata accessor for SilentModeModel();
}

uint64_t type metadata accessor for SilentModeModel()
{
  uint64_t result;

  result = qword_1EEB43FA0;
  if (!qword_1EEB43FA0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9BB1510()
{
  unint64_t v0;

  sub_1A9B94CA0(319, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SilentModeModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SilentModeModel.enabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SilentModeModel.enabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SilentModeModel.enabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SilentModeModel.$enabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

unint64_t sub_1A9BB15F4()
{
  unint64_t result;

  result = qword_1EEB49DC0;
  if (!qword_1EEB49DC0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB49DC0);
  }
  return result;
}

uint64_t sub_1A9BB1648()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1A9BB166C()
{
  sub_1A9BB092C();
}

uint64_t sub_1A9BB1674()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BB1698()
{
  return sub_1A9BB0CCC();
}

uint64_t sub_1A9BB16A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s10DataSourceCMa()
{
  uint64_t result;

  result = qword_1EEB440F8;
  if (!qword_1EEB440F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BB1728()
{
  return swift_initClassMetadata2();
}

BOOL sub_1A9BB179C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A9BB17B4()
{
  uint64_t v0;
  uint64_t result;

  sub_1A9CE6A50();
  if (*(_BYTE *)(v0 + qword_1EEB440D0) == 1)
  {
    sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
    sub_1A9CE6A20();
    sub_1A9CE6A14();
  }
  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  sub_1A9CE6A20();
  sub_1A9CE6A14();
  swift_bridgeObjectRelease();
  result = sub_1A9CE6A14();
  if (*(_BYTE *)(v0 + qword_1EEB440D8) == 1)
  {
    sub_1A9CE6A20();
    result = sub_1A9CE6A14();
  }
  if (*(_BYTE *)(v0 + qword_1EEB440E0) == 1)
  {
    sub_1A9CE6A20();
    return sub_1A9CE6A14();
  }
  return result;
}

uint64_t sub_1A9BB19C4(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(result + qword_1EEB440C0) = 2;
  if (*(_BYTE *)(result + qword_1EEB440C8) != 2)
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v1 = sub_1A9CE6990();
    __swift_project_value_buffer(v1, (uint64_t)qword_1ED2630B8);
    v2 = sub_1A9CE6978();
    v3 = sub_1A9CE867C();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v10 = v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_1A9CE8D48();
      sub_1A9B91D6C(v6, v7, &v10);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v2, v3, "[%{public}s] performing another snapshot", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v5, -1, -1);
      MEMORY[0x1AF420344](v4, -1, -1);
    }

    return sub_1A9BB29C0(v8, v9);
  }
  return result;
}

id sub_1A9BB1B68(void *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)sub_1A9CE82B0();
  v3 = (void *)sub_1A9CE64B0();
  v4 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v2, v3);

  return v4;
}

uint64_t sub_1A9BB1BD4(uint64_t a1, uint64_t a2)
{
  return sub_1A9BB2D68(a2);
}

id sub_1A9BB1BDC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BB1BFC(a1, a2, a3, a4, (void (*)(uint64_t))sub_1A9BB2D68);
}

uint64_t sub_1A9BB1BE8(uint64_t a1, uint64_t a2)
{
  return sub_1A9BB30A0(a2);
}

id sub_1A9BB1BF0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BB1BFC(a1, a2, a3, a4, (void (*)(uint64_t))sub_1A9BB30A0);
}

id sub_1A9BB1BFC(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v8 = a3;
  v9 = a1;
  a5(a4);
  v11 = v10;

  if (v11)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

void *sub_1A9BB1C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  char v24;
  uint64_t v25;
  id v26;
  id v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  id v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  id v50;

  v3 = v2;
  v6 = sub_1A9CE6378();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB33A0(0, &qword_1EEB44148, MEMORY[0x1E0DC25D0]);
  v19 = (uint64_t (*)(uint64_t, uint64_t))sub_1A9CE6AA4();
  v20 = (void *)v19(a1, a2);
  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v44 = v7;
    v45 = v6;
    v22 = (void **)(v21 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
    swift_beginAccess();
    v23 = *v22;
    v24 = *(_BYTE *)(v3 + qword_1EEB440D0);
    v25 = (uint64_t)*v22 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
    swift_beginAccess();
    *(_BYTE *)(v25 + *(int *)(v15 + 32)) = (v24 & 1) == 0;
    v26 = v20;
    v27 = v23;
    sub_1A9C5B3A8();
    swift_endAccess();
    sub_1A9BD7564();

    v28 = *(unsigned __int8 *)(v3 + qword_1EEB440F0);
    if (v28 == (*(_QWORD *)((char *)*v22
                           + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0))
    {
      v33 = v28 ^ 1;
      v35 = v44;
      v34 = v45;
      (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v10, *MEMORY[0x1E0CB0EF8], v45);
      sub_1A9CE6384();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v34);
      SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v14, v18);
      v36 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
      sub_1A9BD7ED4(22, 0, 7, 0, (uint64_t)v18, v33);
      v37 = *v22;
      *v22 = v38;

    }
    else
    {

    }
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
    v29 = swift_dynamicCastClass();
    if (v29)
    {
      v30 = *(_BYTE *)(v3 + qword_1EEB440D0);
      v31 = v29 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
      swift_beginAccess();
      *(_BYTE *)(v31 + *(int *)(v15 + 32)) = (v30 & 1) == 0;
      v32 = v20;
      sub_1A9C5B3A8();
      swift_endAccess();

    }
    else
    {
      v50 = v20;
      sub_1A9B94A18(0, &qword_1EEB43520);
      sub_1A9BB32BC();
      v39 = v20;
      if (swift_dynamicCast())
      {
        sub_1A9B949B8(&v49, (uint64_t)v46);
        v40 = v47;
        v41 = v48;
        __swift_project_boxed_opaque_existential_1Tm(v46, v47);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v41 + 8))(*(_QWORD *)(v3 + qword_1EEB440B0), v40, v41);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
      }

    }
  }
  return v20;
}

id sub_1A9BB202C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;

  v5 = sub_1A9CE64E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE64BC();
  v10 = a3;
  v11 = a1;
  v12 = sub_1A9BB1C7C((uint64_t)v10, (uint64_t)v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

uint64_t sub_1A9BB20E4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  void *v18;
  _QWORD v19[2];

  sub_1A9BB3310();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE64E0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_1EEB440D8;
  v15 = *(unsigned __int8 *)(v2 + qword_1EEB440D8);
  result = (uint64_t)objc_msgSend(a1, sel_isEnabled);
  v17 = *(unsigned __int8 *)(v2 + v14);
  *(_BYTE *)(v2 + v14) = result;
  if ((_DWORD)result != v17)
  {
    sub_1A9BB29C0();
    result = *(unsigned __int8 *)(v2 + v14);
  }
  if (((result ^ 1 | v15) & 1) == 0)
  {
    v19[0] = 0xD00000000000002ALL;
    v19[1] = 0x80000001A9CF7E40;
    sub_1A9CE6A98();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      return sub_1A9BB3364((uint64_t)v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
      if (a2)
      {
        v18 = (void *)sub_1A9CE64B0();
        objc_msgSend(a2, sel_scrollToRowAtIndexPath_atScrollPosition_animated_, v18, 0, 1);

      }
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }
  return result;
}

uint64_t sub_1A9BB227C()
{
  swift_release();
  return swift_release();
}

id sub_1A9BB22A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s10DataSourceCMa();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BB22DC()
{
  swift_release();
  return swift_release();
}

void sub_1A9BB2314()
{
  swift_release();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A9BB2348()
{
  return _s10DataSourceCMa();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s10DataSourceC17SnapshotOperationVwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10DataSourceC17SnapshotOperationVwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9BB2448 + 4 * byte_1A9CED795[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9BB247C + 4 * byte_1A9CED790[v4]))();
}

uint64_t sub_1A9BB247C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BB2484(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BB248CLL);
  return result;
}

uint64_t sub_1A9BB2498(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BB24A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9BB24A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BB24AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10DataSourceC17SnapshotOperationVMa()
{
  return &_s10DataSourceC17SnapshotOperationVN;
}

id sub_1A9BB24C8(void *a1, uint64_t a2, char a3, char a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _BYTE *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t ObjCClassFromMetadata;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v39 - v11;
  *(_QWORD *)&v4[qword_1EEB440B8] = 0;
  v4[qword_1EEB440C0] = 2;
  v4[qword_1EEB440C8] = 2;
  v4[qword_1EEB440D0] = (*(_BYTE *)(a2 + 49) & 1) == 0;
  v13 = *(void **)(a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  v14 = v4;
  v15 = objc_msgSend(v13, sel_alarmConfiguration);
  objc_msgSend(v15, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v16 = v42;
  LOBYTE(v13) = objc_msgSend(v42, sel_isEnabled);

  v14[qword_1EEB440D8] = (_BYTE)v13;
  v14[qword_1EEB440E0] = a3;
  v14[qword_1EEB440E8] = *(_BYTE *)(a2 + 80);
  v14[qword_1EEB440F0] = a4;
  *(_QWORD *)&v14[qword_1EEB440B0] = a2;
  swift_retain();

  v17 = a1;
  v18 = (id)sub_1A9CE6A68();
  sub_1A9CE6A80();

  if (*((_BYTE *)v18 + qword_1EEB440D0) == 1)
  {
    type metadata accessor for ScheduleOccurrenceDayPickerTableViewCell();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v20 = (void *)sub_1A9CE82B0();
    objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v20);

    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  }
  v21 = swift_getObjCClassFromMetadata();
  v22 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v21, v22);

  v23 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v21, v23);

  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v24 = swift_getObjCClassFromMetadata();
  v25 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v24, v25);

  v26 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v24, v26);

  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  v27 = swift_getObjCClassFromMetadata();
  v28 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v27, v28);

  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  v29 = swift_getObjCClassFromMetadata();
  v30 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v29, v30);

  type metadata accessor for ScheduleOccurrenceAlarmSoundTableViewCell();
  v31 = swift_getObjCClassFromMetadata();
  v32 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v31, v32);

  type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  v33 = swift_getObjCClassFromMetadata();
  v34 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v33, v34);

  type metadata accessor for ScheduleOccurrenceDeleteTableViewCell();
  v35 = swift_getObjCClassFromMetadata();
  v36 = (void *)sub_1A9CE82B0();
  objc_msgSend(v17, sel_registerClass_forCellReuseIdentifier_, v35, v36);

  v37 = v18;
  sub_1A9BB17B4();
  sub_1A9CE6A8C();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  return v37;
}

void sub_1A9BB29C0()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  ObjectType = swift_getObjectType();
  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v30 - v7;
  v31 = v0[qword_1EEB440F0];
  v9 = qword_1EEB440C0;
  v10 = v0[qword_1EEB440C0];
  if (v10 == 2)
  {
    v0[qword_1EEB440C8] = 2;
    v0[v9] = v31;
    sub_1A9BB17B4();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v0;
    *(_QWORD *)(v11 + 24) = ObjectType;
    v12 = v0;
    sub_1A9CE6A8C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v13 = sub_1A9CE6990();
    v14 = __swift_project_value_buffer(v13, (uint64_t)qword_1ED2630B8);
    v15 = sub_1A9CE6978();
    v16 = sub_1A9CE867C();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v30 = v14;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc();
      v33 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = sub_1A9CE8D48();
      v32 = sub_1A9B91D6C(v20, v21, &v33);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] already applying snapshot", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v19, -1, -1);
      MEMORY[0x1AF420344](v18, -1, -1);
    }

    if (((v31 ^ ((v10 & 1) == 0)) & 1) != 0)
    {
      v22 = qword_1EEB440C8;
      v23 = 2;
    }
    else
    {
      v24 = sub_1A9CE6978();
      v25 = sub_1A9CE867C();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v33 = v27;
        *(_DWORD *)v26 = 136446210;
        v28 = sub_1A9CE8D48();
        v32 = sub_1A9B91D6C(v28, v29, &v33);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v24, v25, "[%{public}s] we'll need to re-apply when it's done", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v27, -1, -1);
        MEMORY[0x1AF420344](v26, -1, -1);
      }

      v22 = qword_1EEB440C8;
      v23 = v31;
    }
    v1[v22] = v23;
  }
}

uint64_t sub_1A9BB2D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB3268();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = 0;
  MEMORY[0x1AF41D0D4]();
  sub_1A9CE6A74();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v9 = v16;
  if (!v16)
    return 0;
  v10 = v15;
  if (v15 == 0xD000000000000028 && v16 == 0x80000001A9CF7C90 || (sub_1A9CE8BB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1ED2626A8 == -1)
      goto LABEL_11;
    goto LABEL_24;
  }
  if ((v10 != 0xD00000000000002BLL || v9 != 0x80000001A9CF7CF0) && (sub_1A9CE8BB0() & 1) == 0)
  {
    if (v10 == 0xD00000000000002DLL && v9 == 0x80000001A9CF7CC0
      || (sub_1A9CE8BB0() & 1) != 0
      || v10 == 0xD00000000000003ELL && v9 == 0x80000001A9CF7D20)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        return 0;
    }
    if (*(_BYTE *)(v1 + qword_1EEB440D0) == 1)
    {
      if (qword_1ED2626A8 == -1)
        goto LABEL_11;
      goto LABEL_24;
    }
    return 0;
  }
  swift_bridgeObjectRelease();
  if (qword_1ED2626A8 != -1)
LABEL_24:
    swift_once();
LABEL_11:
  v11 = (id)qword_1ED264F90;
  v12 = sub_1A9CE6168();

  return v12;
}

uint64_t sub_1A9BB30A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB3268();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = 0;
  MEMORY[0x1AF41D0D4]();
  sub_1A9CE6A74();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v9 = v14;
  if (!v14)
    return v9;
  if (v13 == 0xD000000000000029 && v14 == 0x80000001A9CF7DE0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(v1 + qword_1EEB440E8) != 1)
    return 0;
  if (qword_1ED2626A8 != -1)
    swift_once();
  v11 = (id)qword_1ED264F90;
  v9 = sub_1A9CE6168();

  return v9;
}

void sub_1A9BB3268()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43090)
  {
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43090);
  }
}

unint64_t sub_1A9BB32BC()
{
  unint64_t result;

  result = qword_1EEB43528;
  if (!qword_1EEB43528)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB43528);
  }
  return result;
}

void sub_1A9BB3310()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45B50)
  {
    sub_1A9CE64E0();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45B50);
  }
}

uint64_t sub_1A9BB3364(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BB3310();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A9BB33A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = MEMORY[0x1E0DEA968];
    v6[1] = MEMORY[0x1E0DEA968];
    v6[2] = MEMORY[0x1E0DEA978];
    v6[3] = MEMORY[0x1E0DEA978];
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1A9BB3404()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A9BB3428()
{
  uint64_t v0;

  return sub_1A9BB19C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A9BB3430(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1AF41F60C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1A9BB58D0(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1A9CE83E8();
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9BB35E8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1A9CADD68(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BB373C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_1A9CADFB4(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = sub_1A9CE6840();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BB38A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1A9CADE80(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  sub_1A9BB53B0();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BB3A08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A9BB3A70()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9BB3AB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A9BB3B08())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A9BB3B4C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A9BB3BB4()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9BB3C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1A9BB3C5C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SleepOnboardingFlowController.presentationStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle);
}

void SleepOnboardingFlowController.__allocating_init(userInfo:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

id SleepOnboardingFlowController.init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  char *v8;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  objc_super v25;

  v12 = &v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo] = a5;
  *(_QWORD *)&v8[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_presentationStyle] = a6;
  swift_retain();
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v14 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  v15 = objc_msgSendSuper2(&v25, sel_initWithTitle_detailText_icon_contentLayout_, v13, v14, a7, a8);

  v16 = v15;
  objc_msgSend(v16, sel_setModalInPresentation_, 1);
  v17 = objc_msgSend(v16, sel_headerView);
  LODWORD(v18) = 0;
  objc_msgSend(v17, sel_setTitleHyphenationFactor_, v18);

  v19 = objc_msgSend(v16, sel_navigationItem);
  objc_msgSend(v19, sel_setBackButtonDisplayMode_, 1);

  v20 = objc_msgSend(v16, sel_headerView);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v21 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0x7065656C53;
  *(_QWORD *)(v21 + 56) = 0xE500000000000000;
  *(_QWORD *)(v21 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v21 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2148);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v23 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v23);

  swift_release();
  return v16;
}

uint64_t type metadata accessor for SleepOnboardingFlowController()
{
  return objc_opt_self();
}

uint64_t sub_1A9BB4080(char a1)
{
  char *v1;
  char *v2;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  objc_super v22;

  v2 = v1;
  swift_getObjectType();
  v22.receiver = v2;
  v22.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  objc_msgSendSuper2(&v22, sel_viewWillAppear_, a1 & 1);
  v4 = &v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  v5 = *(void **)(*(_QWORD *)v4 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, sel_source);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {
    swift_release();

    return swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v14 = sub_1A9CE6990();
      __swift_project_value_buffer(v14, (uint64_t)qword_1ED2630B8);
      v15 = sub_1A9CE6978();
      v16 = sub_1A9CE867C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v21 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = sub_1A9CE8D48();
        sub_1A9B91D6C(v19, v20, &v21);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] Observing sleep settings or schedule changes for dismissal", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v18, -1, -1);
        MEMORY[0x1AF420344](v17, -1, -1);
      }

      *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = sub_1A9BB4348(&OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo, (uint64_t)&unk_1E55D4110, (uint64_t)sub_1A9BB5FB0);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1A9BB432C()
{
  return sub_1A9BB4348(&OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_userInfo, (uint64_t)&unk_1E55D40E8, (uint64_t)sub_1A9BB5B54);
}

uint64_t sub_1A9BB4348(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;

  v56 = a2;
  v57 = a3;
  sub_1A9BB5404();
  MEMORY[0x1E0C80A78](v5, v6);
  v51 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB5458(0);
  v48 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  sub_1A9BB5558(0);
  v46[1] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  sub_1A9BB5674();
  v13 = v12;
  v47 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB573C();
  v18 = *(_QWORD *)(v17 - 8);
  v52 = v17;
  v53 = v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v49 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB5858();
  v22 = *(_QWORD *)(v21 - 8);
  v54 = v21;
  v55 = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  v50 = (char *)v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v3 + *a1;
  swift_beginAccess();
  v26 = *(_QWORD *)(*(_QWORD *)v25 + 112);
  v27 = *(_QWORD *)(*(_QWORD *)v25 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v25 + 88), v26);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v27 + 40))(v59, v26, v27);
  v28 = v60;
  v29 = v61;
  __swift_project_boxed_opaque_existential_1Tm(v59, v60);
  v58 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
  sub_1A9BB5600();
  v30 = MEMORY[0x1E0C95FB8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB441C0, (uint64_t (*)(uint64_t))sub_1A9BB5600, MEMORY[0x1E0C95FB8]);
  sub_1A9CE6E94();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  v31 = (_QWORD *)(*(_QWORD *)v25 + 88);
  v32 = *(_QWORD *)(*(_QWORD *)v25 + 112);
  v33 = *(_QWORD *)(*(_QWORD *)v25 + 120);
  __swift_project_boxed_opaque_existential_1Tm(v31, v32);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v33 + 48))(v59, v32, v33);
  v34 = v60;
  v35 = v61;
  __swift_project_boxed_opaque_existential_1Tm(v59, v60);
  v58 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35);
  sub_1A9BB5474();
  sub_1A9B92B9C((unint64_t *)&qword_1EEB43068, (uint64_t (*)(uint64_t))sub_1A9BB5474, v30);
  sub_1A9CE6E94();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  v36 = MEMORY[0x1E0C95950];
  sub_1A9B92B9C(&qword_1EEB441D0, (uint64_t (*)(uint64_t))sub_1A9BB5558, MEMORY[0x1E0C95950]);
  sub_1A9B92B9C(&qword_1EEB441D8, (uint64_t (*)(uint64_t))sub_1A9BB5458, v36);
  sub_1A9CE6D38();
  sub_1A9B92B9C(&qword_1EEB441F8, (uint64_t (*)(uint64_t))sub_1A9BB5674, MEMORY[0x1E0C95A60]);
  v37 = sub_1A9CE6E88();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v13);
  v59[0] = v37;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v58 = (id)sub_1A9CE870C();
  v38 = sub_1A9CE8700();
  v39 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v51, 1, 1, v38);
  sub_1A9BB57F0();
  sub_1A9B92B9C(&qword_1EEB441E8, (uint64_t (*)(uint64_t))sub_1A9BB57F0, MEMORY[0x1E0C95D90]);
  sub_1A9B92A68();
  v40 = v49;
  sub_1A9CE6EAC();
  sub_1A9BB5AF4(v39);

  swift_release();
  sub_1A9B92B9C(&qword_1EEB454F0, (uint64_t (*)(uint64_t))sub_1A9BB573C, MEMORY[0x1E0C95CB8]);
  v41 = v50;
  v42 = v52;
  sub_1A9CE6EB8();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v42);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92B9C(&qword_1EEB44200, (uint64_t (*)(uint64_t))sub_1A9BB5858, MEMORY[0x1E0C95988]);
  v43 = v54;
  v44 = sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v41, v43);
  return v44;
}

id sub_1A9BB48F8(char a1)
{
  char *v1;
  char *v2;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  objc_class *v20;
  uint64_t v22;
  objc_super v23;

  v2 = v1;
  swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo];
  swift_beginAccess();
  v5 = *(void **)(*(_QWORD *)v4 + 16);
  swift_retain();
  v6 = objc_msgSend(v5, sel_source);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_sleepChangeObserver] = 0;
      swift_release();
      if (qword_1ED262DB8 != -1)
        swift_once();
      v13 = sub_1A9CE6990();
      __swift_project_value_buffer(v13, (uint64_t)qword_1ED2630B8);
      v14 = sub_1A9CE6978();
      v15 = sub_1A9CE867C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v22 = v17;
        *(_DWORD *)v16 = 136446210;
        v18 = sub_1A9CE8D48();
        sub_1A9B91D6C(v18, v19, &v22);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Done observing sleep settings or schedule changes", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v17, -1, -1);
        MEMORY[0x1AF420344](v16, -1, -1);
      }

    }
  }
  v20 = (objc_class *)type metadata accessor for SleepOnboardingFlowController();
  v23.receiver = v2;
  v23.super_class = v20;
  return objc_msgSendSuper2(&v23, sel_viewWillDisappear_, a1 & 1);
}

void sub_1A9BB4BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v9 = qword_1EEB42BA8;
  swift_bridgeObjectRetain();
  if (v9 != -1)
    swift_once();
  v10 = (id)qword_1EEB44158;
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {
    v13 = (void *)sub_1A9CE82B0();
    v14 = (id)sub_1A9CE82B0();
    objc_msgSend(v7, sel_addBulletedListItemWithTitle_description_image_tintColor_, v13, v14, v12, a7);

  }
  else
  {
    __break(1u);
  }
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:symbolName:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  objc_class *v8;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v8 = v7;
  v12 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    v13 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    goto LABEL_6;
  }
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
LABEL_6:
  v15 = objc_msgSend(objc_allocWithZone(v8), sel_initWithTitle_detailText_symbolName_contentLayout_, v12, v13, v14, a7);

  return v15;
}

void SleepOnboardingFlowController.init(title:detailText:symbolName:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepOnboardingFlowController.__allocating_init(title:detailText:icon:contentLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  objc_class *v6;
  objc_class *v7;
  void *v11;
  void *v12;
  id v13;

  v7 = v6;
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v7), sel_initWithTitle_detailText_icon_contentLayout_, v11, v12, a5, a6);

  return v13;
}

void SleepOnboardingFlowController.init(title:detailText:icon:contentLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepOnboardingFlowController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepOnboardingFlowController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BB4FD0()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A9BB501C()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9BB506C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1A9BB50CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_1A9BB5114()
{
  void *v0;
  void *v1;
  id v2;
  id v3;

  v0 = (void *)*MEMORY[0x1E0DC4AE8];
  v1 = (void *)objc_opt_self();
  v2 = v0;
  v3 = objc_msgSend(v1, sel_configurationWithTextStyle_, v2);

  qword_1EEB44158 = (uint64_t)v3;
}

void sub_1A9BB517C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEA968]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1A9BB51C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED262D70;
  if (!qword_1ED262D70)
  {
    sub_1A9BB517C(255, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1ED262D70);
  }
  return result;
}

uint64_t sub_1A9BB521C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_userInfo);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t sub_1A9BB5274@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t method lookup function for SleepOnboardingFlowController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.userInfo.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.__allocating_init(userInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.__allocating_init(title:detailText:userInfo:presentationStyle:icon:contentLayout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingFlowController.addBulletedListItem(title:description:systemImageName:imageColor:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

unint64_t sub_1A9BB53B0()
{
  unint64_t result;

  result = qword_1EEB449A0;
  if (!qword_1EEB449A0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB449A0);
  }
  return result;
}

void sub_1A9BB5404()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262570)
  {
    sub_1A9CE8700();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262570);
  }
}

void sub_1A9BB5458(uint64_t a1)
{
  sub_1A9BB5574(a1, &qword_1EEB441A8, (uint64_t (*)(uint64_t))sub_1A9BB5474, (unint64_t *)&qword_1EEB43068);
}

void sub_1A9BB5474()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2628D0)
  {
    sub_1A9BB54F8(255, (unint64_t *)&qword_1ED262910, (unint64_t *)&qword_1ED262900, 0x1E0DA8568, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2628D0);
  }
}

void sub_1A9BB54F8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1A9B94A18(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1A9BB5558(uint64_t a1)
{
  sub_1A9BB5574(a1, &qword_1EEB441B0, (uint64_t (*)(uint64_t))sub_1A9BB5600, (unint64_t *)&qword_1EEB441C0);
}

void sub_1A9BB5574(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    sub_1A9B92B9C(a4, a3, MEMORY[0x1E0C95FB8]);
    v7 = sub_1A9CE6D14();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1A9BB5600()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB441B8)
  {
    sub_1A9B94A18(255, &qword_1EEB45560);
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB441B8);
  }
}

void sub_1A9BB5674()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEB441C8)
  {
    sub_1A9BB5558(255);
    sub_1A9BB5458(255);
    v0 = MEMORY[0x1E0C95950];
    sub_1A9B92B9C(&qword_1EEB441D0, (uint64_t (*)(uint64_t))sub_1A9BB5558, MEMORY[0x1E0C95950]);
    sub_1A9B92B9C(&qword_1EEB441D8, (uint64_t (*)(uint64_t))sub_1A9BB5458, v0);
    v1 = sub_1A9CE6D2C();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEB441C8);
  }
}

void sub_1A9BB573C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB441E0)
  {
    sub_1A9BB57F0();
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    sub_1A9B92B9C(&qword_1EEB441E8, (uint64_t (*)(uint64_t))sub_1A9BB57F0, MEMORY[0x1E0C95D90]);
    sub_1A9B92A68();
    v0 = sub_1A9CE6D50();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB441E0);
  }
}

void sub_1A9BB57F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB454E0)
  {
    v0 = sub_1A9CE6D68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB454E0);
  }
}

void sub_1A9BB5858()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB441F0)
  {
    sub_1A9BB573C();
    sub_1A9B92B9C(&qword_1EEB454F0, (uint64_t (*)(uint64_t))sub_1A9BB573C, MEMORY[0x1E0C95CB8]);
    v0 = sub_1A9CE6D20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB441F0);
  }
}

uint64_t sub_1A9BB58D0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1A9BB54F8(0, &qword_1EEB44208, (unint64_t *)&qword_1EEB44570, 0x1E0CB3718, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1A9BB5F48();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1A9C54904(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BB5AF4(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BB5404();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BB5B30()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BB5B54()
{
  uint64_t v0;

  sub_1A9BB5D50(v0);
}

void sub_1A9BB5B5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12[3];

  v1 = a1 + 16;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12[0] = v6;
    *(_DWORD *)v5 = 136446210;
    sub_1A9B91D6C(0xD00000000000001DLL, 0x80000001A9CED860, v12);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Sleep settings or schedule changed during onboarding, dismissing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  swift_beginAccess();
  v7 = MEMORY[0x1AF4203E0](v1);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = (_QWORD *)(v7 + OBJC_IVAR____TtC13SleepHealthUI29SleepOnboardingFlowController_delegate);
    swift_beginAccess();
    if (*v9)
    {
      v10 = v9[1];
      swift_unknownObjectRetain();

      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void sub_1A9BB5D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12[3];

  v1 = a1 + 16;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12[0] = v6;
    *(_DWORD *)v5 = 136446210;
    sub_1A9B91D6C(0xD000000000000026, 0x80000001A9CF8DB0, v12);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Sleep settings or schedule changed during onboarding, dismissing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  swift_beginAccess();
  v7 = MEMORY[0x1AF4203E0](v1);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = (_QWORD *)(v7 + OBJC_IVAR____TtC13SleepHealthUI38SleepOnboardingFlowTableViewController_delegate);
    swift_beginAccess();
    if (*v9)
    {
      v10 = v9[1];
      swift_unknownObjectRetain();

      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

unint64_t sub_1A9BB5F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB44210;
  if (!qword_1EEB44210)
  {
    sub_1A9BB54F8(255, &qword_1EEB44208, (unint64_t *)&qword_1EEB44570, 0x1E0CB3718, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB44210);
  }
  return result;
}

void sub_1A9BB5FB0()
{
  uint64_t v0;

  sub_1A9BB5B5C(v0);
}

id static HKSPSuggestionProvider<>.proactive.getter()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProactiveSuggestionProvider()), sel_init);
}

id ProactiveSuggestionProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t type metadata accessor for ProactiveSuggestionProvider()
{
  return objc_opt_self();
}

void sub_1A9BB6020(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90D0]), sel_init);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7[4] = sub_1A9BB6194;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1A9BB6368;
  v7[3] = &block_descriptor;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_predictedSleepSuggestionWithCompletionHandler_, v6);
  _Block_release(v6);

}

void sub_1A9BB60FC(void *a1, uint64_t a2, void (*a3)(_QWORD))
{
  id v4;

  if (a2)
  {
    a3(0);
  }
  else
  {
    if (a1)
      a1 = sub_1A9BB619C();
    v4 = a1;
    ((void (*)(void *, _QWORD))a3)(a1, 0);

  }
}

uint64_t sub_1A9BB6170()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9BB6194(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9BB60FC(a1, a2, *(void (**)(_QWORD))(v2 + 16));
}

void *sub_1A9BB619C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v6;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);
  objc_msgSend(v1, sel_setEnabled_, 1);
  objc_msgSend(v1, sel_setSleepDurationGoal_, *MEMORY[0x1E0DA8368] * 60.0 * 60.0);
  v2 = objc_msgSend(v0, sel_occurrence);
  v3 = (void *)sub_1A9BB6668();

  objc_msgSend(v3, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&unk_1EEB4A1D0);
  swift_dynamicCast();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8520]), sel_init);
  objc_msgSend(v4, sel_setEnabled_, 0);
  objc_msgSend(v6, sel_setAlarmConfiguration_, v4);
  objc_msgSend(v1, sel_saveOccurrence_, v6);
  objc_msgSend(v1, sel_copy);
  sub_1A9CE88EC();

  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED262900);
  swift_dynamicCast();
  return v6;
}

void sub_1A9BB6368(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void sub_1A9BB6520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = sub_1A9CE61D4();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

id ProactiveSuggestionProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProactiveSuggestionProvider();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ProactiveSuggestionProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProactiveSuggestionProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ProactiveSuggestionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProactiveSuggestionProvider.hksp_suggestedSleepSchedule(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

uint64_t sub_1A9BB663C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A9BB6660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9BB6520(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A9BB6668()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id v57;
  id v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  id v63;
  void *v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  void *v82;
  void (*v83)(uint64_t, uint64_t);
  id v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void (*v104)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  id v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  id v123;
  uint64_t v124;

  v1 = v0;
  sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v114 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v116 = (char *)&v104 - v8;
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v110 = (char *)&v104 - v11;
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v111 = (char *)&v104 - v14;
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v119 = (char *)&v104 - v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v118 = (char *)&v104 - v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v104 - v23;
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (char *)&v104 - v26;
  sub_1A9BB7054(0, &qword_1EEB44250, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v104 - v30;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v104 - v34;
  v36 = sub_1A9CE60C0();
  v37 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v36, v38);
  v113 = (char *)&v104 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v39, v41);
  v115 = (char *)&v104 - v43;
  v45 = MEMORY[0x1E0C80A78](v42, v44);
  v117 = (char *)&v104 - v46;
  v48 = MEMORY[0x1E0C80A78](v45, v47);
  v50 = (char *)&v104 - v49;
  v52 = MEMORY[0x1E0C80A78](v48, v51);
  v120 = (void (*)(char *, char *, uint64_t))((char *)&v104 - v53);
  MEMORY[0x1E0C80A78](v52, v54);
  v56 = (char *)&v104 - v55;
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8530]), sel_init);
  v58 = objc_msgSend(v1, sel_weekdays);
  v112 = v57;
  objc_msgSend(v57, sel_setWeekdays_, v58);
  v59 = sub_1A9CE6444();
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
  v107 = v59;
  v106 = v60;
  ((void (*)(char *, uint64_t, uint64_t))v60)(v35, 1, 1);
  v61 = sub_1A9CE6498();
  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
  v105 = v61;
  v104 = v62;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v31, 1, 1);
  v121 = v56;
  v108 = v35;
  v109 = v31;
  sub_1A9CE60A8();
  v123 = v1;
  v63 = objc_msgSend(v1, sel_bedtimeComponents);
  if (v63)
  {
    v64 = v63;
    sub_1A9CE6024();

    v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v65(v24, 0, 1, v36);
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v65(v24, 1, 1, v36);
  }
  sub_1A9BB70A0((uint64_t)v24, (uint64_t)v27);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v67 = v66(v27, 1, v36);
  v122 = v37;
  v68 = (uint64_t)v118;
  if (v67 == 1)
  {
    sub_1A9BB70F4((uint64_t)v27);
  }
  else
  {
    sub_1A9CE6048();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v36);
  }
  v69 = (uint64_t)v120;
  v70 = v121;
  sub_1A9CE6054();
  v71 = objc_msgSend(v123, sel_bedtimeComponents);
  if (v71)
  {
    v72 = v71;
    v73 = (uint64_t)v119;
    sub_1A9CE6024();

    v74 = 0;
  }
  else
  {
    v74 = 1;
    v73 = (uint64_t)v119;
  }
  v65((char *)v73, v74, 1, v36);
  sub_1A9BB70A0(v73, v68);
  if (v66((char *)v68, 1, v36) == 1)
  {
    sub_1A9BB70F4(v68);
  }
  else
  {
    sub_1A9CE6084();
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v68, v36);
  }
  sub_1A9CE6090();
  v75 = v122;
  v76 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
  v76(v50, v70, v36);
  v77 = sub_1A9CE6084();
  v120 = v76;
  if ((v78 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v69, v50, v36);
  }
  else
  {
    v79 = lrint((double)v77 / 5.0);
    v80 = (unsigned __int128)(v79 * (__int128)5) >> 64;
    result = 5 * v79;
    if (v80 != result >> 63)
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_1A9CE6090();
    sub_1A9CB4400(v69);
    v75 = v122;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v50, v36);
  }
  v82 = (void *)sub_1A9CE6018();
  v83 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v83(v69, v36);
  v84 = v112;
  objc_msgSend(v112, sel_setBedtimeComponents_, v82);

  v85 = 1;
  v106(v108, 1, 1, v107);
  v104(v109, 1, 1, v105);
  v86 = v117;
  sub_1A9CE60A8();
  v87 = objc_msgSend(v123, sel_wakeUpComponents);
  v88 = (uint64_t)v111;
  if (v87)
  {
    v89 = v87;
    v90 = v110;
    sub_1A9CE6024();

    v91 = (uint64_t)v90;
    v85 = 0;
  }
  else
  {
    v91 = (uint64_t)v110;
  }
  v65((char *)v91, v85, 1, v36);
  sub_1A9BB70A0(v91, v88);
  if (v66((char *)v88, 1, v36) == 1)
  {
    sub_1A9BB70F4(v88);
  }
  else
  {
    sub_1A9CE6048();
    v83(v88, v36);
  }
  sub_1A9CE6054();
  v92 = objc_msgSend(v123, sel_wakeUpComponents);
  v93 = (uint64_t)v114;
  if (v92)
  {
    v94 = v92;
    sub_1A9CE6024();

    v95 = 0;
  }
  else
  {
    v95 = 1;
  }
  v96 = (uint64_t)v116;
  v65((char *)v93, v95, 1, v36);
  sub_1A9BB70A0(v93, v96);
  if (v66((char *)v96, 1, v36) == 1)
  {
    sub_1A9BB70F4(v96);
  }
  else
  {
    sub_1A9CE6084();
    v83(v96, v36);
  }
  v97 = v113;
  sub_1A9CE6090();
  v120(v97, v86, v36);
  v98 = sub_1A9CE6084();
  v99 = (uint64_t)v115;
  if ((v100 & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v115, v97, v36);
    goto LABEL_33;
  }
  v101 = lrint((double)v98 / 5.0);
  v102 = (unsigned __int128)(v101 * (__int128)5) >> 64;
  result = 5 * v101;
  if (v102 == result >> 63)
  {
    sub_1A9CE6090();
    sub_1A9CB4400(v99);
    v83((uint64_t)v97, v36);
LABEL_33:
    v103 = (void *)sub_1A9CE6018();
    v83(v99, v36);
    objc_msgSend(v84, sel_setWakeUpComponents_, v103);

    objc_msgSend(v84, sel_copy);
    sub_1A9CE88EC();

    swift_unknownObjectRelease();
    v83((uint64_t)v86, v36);
    v83((uint64_t)v121, v36);
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
    swift_dynamicCast();
    return v124;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_1A9BB7054(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE8880();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1A9BB70A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BB70F4(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UIView.alignConstraints(to:insets:reduceBottomConstraintPriority:)(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  void *v6;
  void *v7;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v35;

  v7 = v6;
  v14 = objc_msgSend(v7, sel_leadingAnchor);
  v15 = objc_msgSend(a1, sel_leadingAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v15, a4);

  v17 = objc_msgSend(v7, sel_topAnchor);
  v18 = objc_msgSend(a1, sel_topAnchor);
  v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_constant_, v18, a3);

  v20 = objc_msgSend(a1, sel_trailingAnchor);
  v21 = objc_msgSend(v7, sel_trailingAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v21, a6);

  v23 = objc_msgSend(a1, sel_bottomAnchor);
  v24 = objc_msgSend(v7, sel_bottomAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_constant_, v24, a5);

  if ((a2 & 1) != 0)
  {
    LODWORD(v26) = 1148829696;
    objc_msgSend(v25, sel_setPriority_, v26);
  }
  sub_1A9BB7420();
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1A9CED8F0;
  *(_QWORD *)(v27 + 32) = v16;
  *(_QWORD *)(v27 + 40) = v19;
  *(_QWORD *)(v27 + 48) = v22;
  *(_QWORD *)(v27 + 56) = v25;
  v35 = v27;
  sub_1A9CE83E8();
  v28 = v16;
  v29 = v19;
  v30 = v22;
  v31 = v25;
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v32 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v33 = (void *)sub_1A9CE83D0();
  objc_msgSend(v32, sel_activateConstraints_, v33);

  return v35;
}

void sub_1A9BB7420()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262A60)
  {
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262A60);
  }
}

Swift::Void __swiftcall UIView.alignConstraints(to:)(UILayoutGuide to)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;

  v2 = v1;
  v4 = (void *)objc_opt_self();
  sub_1A9BB7420();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A9CED8F0;
  v6 = objc_msgSend(v2, sel_leadingAnchor);
  v7 = -[objc_class leadingAnchor](to.super.isa, sel_leadingAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v5 + 32) = v8;
  v9 = objc_msgSend(v2, sel_topAnchor);
  v10 = -[objc_class topAnchor](to.super.isa, sel_topAnchor);
  v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v5 + 40) = v11;
  v12 = -[objc_class trailingAnchor](to.super.isa, sel_trailingAnchor);
  v13 = objc_msgSend(v2, sel_trailingAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(_QWORD *)(v5 + 48) = v14;
  v15 = -[objc_class bottomAnchor](to.super.isa, sel_bottomAnchor);
  v16 = objc_msgSend(v2, sel_bottomAnchor);
  v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(_QWORD *)(v5 + 56) = v17;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v18 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, v18);

  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
}

uint64_t UIView.constrained(toEdgesOf:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;

  v2 = v1;
  sub_1A9BB7420();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CED8F0;
  v5 = objc_msgSend(v2, sel_topAnchor);
  v6 = objc_msgSend(a1, sel_topAnchor);
  v7 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v6);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v2, sel_leadingAnchor);
  v9 = objc_msgSend(a1, sel_leadingAnchor);
  v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

  *(_QWORD *)(v4 + 40) = v10;
  v11 = objc_msgSend(v2, sel_trailingAnchor);
  v12 = objc_msgSend(a1, sel_trailingAnchor);
  v13 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v12);

  *(_QWORD *)(v4 + 48) = v13;
  v14 = objc_msgSend(v2, sel_bottomAnchor);
  v15 = objc_msgSend(a1, sel_bottomAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v4 + 56) = v16;
  sub_1A9CE83E8();
  v17 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v18 = (void *)sub_1A9CE83D0();
  objc_msgSend(v17, sel_activateConstraints_, v18);

  return v4;
}

uint64_t UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(unint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  char **v10;
  id v11;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  double v22;
  void *v23;
  uint64_t v24;
  float v25;
  double v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char **v34;
  id v35;
  id v36;
  unint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t result;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;

  v11 = v6;
  v17 = a1;
  v55 = MEMORY[0x1E0DEE9D8];
  if (!(a1 >> 62))
  {
    v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
      goto LABEL_3;
LABEL_28:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v18 = sub_1A9CE8AC0();
  if (!v18)
    goto LABEL_28;
LABEL_3:
  v52 = v17 & 0xC000000000000001;
  if ((v17 & 0xC000000000000001) != 0)
  {
    v19 = (id)MEMORY[0x1AF41F600](0, v17);
  }
  else
  {
    if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    v19 = *(id *)(v17 + 32);
  }
  v8 = v19;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v8, sel_topAnchor);
  v7 = objc_msgSend(v11, sel_topAnchor);
  v10 = &off_1E55E8000;
  v21 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v7, a3);

  v9 = v21;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_31:
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();

  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v49 = v18 - 1;
  v22 = -a6;
  v48 = v17 + 32;
  swift_bridgeObjectRetain();
  v23 = 0;
  v24 = 0;
  v25 = 1000.0;
  v50 = v18;
  v51 = v11;
  do
  {
    if (v52)
      v27 = (id)MEMORY[0x1AF41F600](v24, v17);
    else
      v27 = *(id *)(v17 + 8 * v24 + 32);
    v18 = (uint64_t)v27;
    objc_msgSend(v27, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, v48);
    v54 = MEMORY[0x1E0DEE9D8];
    v28 = objc_msgSend((id)v18, sel_leadingAnchor);
    v29 = objc_msgSend(v11, sel_leadingAnchor);
    v30 = objc_msgSend(v28, v10[461], v29, a4);

    v31 = v30;
    MEMORY[0x1AF41EFF4]();
    if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A9CE83F4();
    v53 = v31;
    sub_1A9CE8418();
    sub_1A9CE83E8();
    v32 = objc_msgSend((id)v18, sel_trailingAnchor);
    v33 = objc_msgSend(v11, sel_trailingAnchor);
    v34 = v10;
    v35 = objc_msgSend(v32, v10[461], v33, v22);

    v36 = v35;
    MEMORY[0x1AF41EFF4]();
    if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A9CE83F4();
    sub_1A9CE8418();
    sub_1A9CE83E8();
    if (v23)
    {
      v37 = v17;
      v38 = v23;
      v39 = objc_msgSend((id)v18, sel_topAnchor);
      v40 = objc_msgSend(v38, sel_bottomAnchor);
      v41 = objc_msgSend(v39, (SEL)v34 + 3943, v40, a2);

      v42 = v41;
      MEMORY[0x1AF41EFF4]();
      if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A9CE83F4();
      sub_1A9CE8418();
      sub_1A9CE83E8();

      v17 = v37;
    }
    ++v24;
    *(float *)&v26 = v25;
    objc_msgSend((id)v18, sel_setContentHuggingPriority_forAxis_, 1, v26);
    v25 = v25 + -1.0;
    sub_1A9BB3430(v54);

    v23 = (void *)v18;
    v11 = v51;
    v10 = v34;
  }
  while (v50 != v24);
  result = v49;
  if (v52)
  {
    v44 = (id)MEMORY[0x1AF41F600](v49, v17);
    goto LABEL_25;
  }
  if (v49 < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v44 = *(id *)(v48 + 8 * v49);
LABEL_25:
    v7 = v44;
    swift_bridgeObjectRelease();
    v45 = objc_msgSend(v7, sel_bottomAnchor);
    v46 = objc_msgSend(v51, sel_bottomAnchor);
    v47 = objc_msgSend(v45, (SEL)v34 + 3943, v46, -a5);

    v11 = v47;
    MEMORY[0x1AF41EFF4]();
    if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_26:
      sub_1A9CE8418();
      sub_1A9CE83E8();

      return v55;
    }
LABEL_33:
    sub_1A9CE83F4();
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t UIView.constraints(withVerticallyStackedSubviews:spacing:verticalPadding:horizontalPadding:)(unint64_t a1, double a2, double a3, double a4)
{
  return UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(a1, a2, a3, a4, a3, a4);
}

Swift::Void __swiftcall UIView.addSubviews(_:useAutoLayout:)(Swift::OpaquePointer _, Swift::Bool useAutoLayout)
{
  void *v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  id v8;
  void *v9;

  v3 = useAutoLayout;
  if (!((unint64_t)_._rawValue >> 62))
  {
    v5 = *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1A9CE8AC0();
  if (!v5)
    goto LABEL_10;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = !v3;
    do
    {
      if (((unint64_t)_._rawValue & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1AF41F600](v6, _._rawValue);
      else
        v8 = *((id *)_._rawValue + v6 + 4);
      v9 = v8;
      ++v6;
      objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, v7);
      objc_msgSend(v2, sel_addSubview_, v9);

    }
    while (v5 != v6);
    goto LABEL_10;
  }
  __break(1u);
}

__C::CGRect __swiftcall UIView.smallestFrameFittingVisibleContent()()
{
  void *v0;
  id v1;
  uint64_t v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v7;
  double v8;
  double v9;
  double v10;
  __C::CGRect v11;
  __C::CGRect result;

  v1 = objc_msgSend(v0, sel_subviews);
  sub_1A9B94A18(0, &qword_1EEB47F90);
  v2 = sub_1A9CE83DC();

  v11 = UIView.smallestFrameFittingVisibleContent(in:)((Swift::OpaquePointer)v2);
  x = v11.origin.x;
  y = v11.origin.y;
  width = v11.size.width;
  height = v11.size.height;
  swift_bridgeObjectRelease();
  v7 = x;
  v8 = y;
  v9 = width;
  v10 = height;
  result.size.height = v10;
  result.size.width = v9;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

__C::CGRect __swiftcall UIView.smallestFrameFittingVisibleContent(in:)(Swift::OpaquePointer in)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double MaxY;
  char v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double MinX;
  double v32;
  double v33;
  double MinY;
  double v35;
  double MaxX;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  id v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  __C::CGRect result;

  if ((unint64_t)in._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v45 > 0)
    {
      swift_bridgeObjectRetain();
      v46 = sub_1A9CE8AC0();
      if (!v46)
      {
        swift_bridgeObjectRelease();
        v41 = 0.0;
        v42 = 0.0;
        v43 = 0.0;
        v44 = 0.0;
        goto LABEL_43;
      }
      v3 = v46;
      if (v46 >= 1)
      {
        v49 = v1;
        goto LABEL_4;
      }
      __break(1u);
    }
LABEL_39:
    objc_msgSend(v1, sel_frame);
    goto LABEL_43;
  }
  v3 = *(_QWORD *)(((unint64_t)in._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_39;
  swift_bridgeObjectRetain();
LABEL_4:
  v4 = 0;
  v5 = v3 - 1;
  MaxY = 0.0;
  v7 = 1;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
LABEL_5:
  v11 = v4;
  do
  {
    if (((unint64_t)in._rawValue & 0xC000000000000001) != 0)
      v12 = (id)MEMORY[0x1AF41F600](v11, in._rawValue);
    else
      v12 = *((id *)in._rawValue + v11 + 4);
    v13 = v12;
    v4 = v11 + 1;
    if ((objc_msgSend(v12, sel_isHidden) & 1) == 0)
    {
      v47 = v8;
      v48 = v5;
      objc_msgSend(v13, sel_frame);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v22 = objc_msgSend(v13, sel_superview);
      objc_msgSend(v49, sel_convertRect_fromView_, v22, v15, v17, v19, v21);
      v24 = v23;
      v26 = v25;
      v28 = v27;
      v30 = v29;

      v50.origin.x = v24;
      v50.origin.y = v26;
      v50.size.width = v28;
      v50.size.height = v30;
      MinX = CGRectGetMinX(v50);
      v32 = MinX;
      if ((v7 & 1) != 0)
      {
        v51.origin.x = v24;
        v51.origin.y = v26;
        v51.size.width = v28;
        v51.size.height = v30;
        v33 = CGRectGetMinX(v51);
        if (v33 >= v32)
          v10 = v32;
        else
          v10 = v33;
        v52.origin.x = v24;
        v52.origin.y = v26;
        v52.size.width = v28;
        v52.size.height = v30;
        MinY = CGRectGetMinY(v52);
        v53.origin.x = v24;
        v53.origin.y = v26;
        v53.size.width = v28;
        v53.size.height = v30;
        v35 = CGRectGetMinY(v53);
        if (v35 >= MinY)
          v9 = MinY;
        else
          v9 = v35;
        v54.origin.x = v24;
        v54.origin.y = v26;
        v54.size.width = v28;
        v54.size.height = v30;
        MaxX = CGRectGetMaxX(v54);
        v55.origin.x = v24;
        v55.origin.y = v26;
        v55.size.width = v28;
        v55.size.height = v30;
        v37 = CGRectGetMaxX(v55);
        if (MaxX > v37)
          v8 = MaxX;
        else
          v8 = v37;
        v56.origin.x = v24;
        v56.origin.y = v26;
        v56.size.width = v28;
        v56.size.height = v30;
        MaxY = CGRectGetMaxY(v56);
      }
      else
      {
        if (MinX < v10)
          v10 = MinX;
        v57.origin.x = v24;
        v57.origin.y = v26;
        v57.size.width = v28;
        v57.size.height = v30;
        v38 = CGRectGetMinY(v57);
        if (v38 < v9)
          v9 = v38;
        v58.origin.x = v24;
        v58.origin.y = v26;
        v58.size.width = v28;
        v58.size.height = v30;
        v39 = CGRectGetMaxX(v58);
        v8 = v47;
        if (v47 <= v39)
          v8 = v39;
      }
      v5 = v48;
      v59.origin.x = v24;
      v59.origin.y = v26;
      v59.size.width = v28;
      v59.size.height = v30;
      v40 = CGRectGetMaxY(v59);

      v7 = 0;
      if (MaxY <= v40)
        MaxY = v40;
      if (v48 == v11)
      {
        swift_bridgeObjectRelease();
LABEL_34:
        v43 = v8 - v10;
        v44 = MaxY - v9;
        v41 = v10;
        v42 = v9;
        goto LABEL_43;
      }
      goto LABEL_5;
    }

    ++v11;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  v41 = 0.0;
  v42 = 0.0;
  v43 = 0.0;
  v44 = 0.0;
  if ((v7 & 1) == 0)
    goto LABEL_34;
LABEL_43:
  result.size.height = v44;
  result.size.width = v43;
  result.origin.y = v42;
  result.origin.x = v41;
  return result;
}

uint64_t Symbol.image.getter()
{
  Symbol.systemName.getter();
  return sub_1A9CE7D28();
}

BOOL static Symbol.Variant.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Symbol.Variant.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t Symbol.Variant.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

BOOL sub_1A9BB84C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A9BB84DC()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BB8520()
{
  return sub_1A9CE8C58();
}

uint64_t sub_1A9BB8548()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

void Symbol.systemName.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1A9BB85B8@<X0>(char a1@<W8>)
{
  if (a1 == 1)
    return 0xD000000000000016;
  else
    return 0x62756F642E646562;
}

uint64_t static Symbol.alarm(on:snoozing:variant:)@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, __int16 *a4@<X8>)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;

  v4 = *a3;
  v5 = (v4 << 8) | 0x1000;
  v6 = (v4 << 8) | 0x1001;
  if ((a2 & 1) != 0)
    v6 = -32767;
  if ((result & 1) == 0)
    v6 = v5;
  *a4 = v6;
  return result;
}

UIImage Symbol.uiImage.getter(UIImageConfiguration_optional a1)
{
  a1.value.super.isa = 0;
  return Symbol.uiImage(configuration:)(a1);
}

UIImage __swiftcall Symbol.uiImage(configuration:)(UIImageConfiguration_optional configuration)
{
  _WORD *v1;
  Class isa;
  objc_class *v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  isa = configuration.value.super.isa;
  LOWORD(v14) = *v1;
  Symbol.systemName.getter();
  v3 = isa;
  v4 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_withConfiguration_, v4, v3);

  if (!v5)
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v6 = sub_1A9CE6990();
    __swift_project_value_buffer(v6, (uint64_t)qword_1ED2630B8);
    v7 = sub_1A9CE6978();
    v8 = sub_1A9CE8664();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136446466;
      sub_1A9B91D6C(0x6C6F626D7953, 0xE600000000000000, &v14);
      sub_1A9CE888C();
      *(_WORD *)(v9 + 12) = 2082;
      Symbol.systemName.getter();
      sub_1A9B91D6C(v11, v12, &v14);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v7, v8, "[%{public}s] No image for symbol with name %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v10, -1, -1);
      MEMORY[0x1AF420344](v9, -1, -1);
    }

    return (UIImage)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
  }
  return (UIImage)v5;
}

id Symbol.uiColor.getter()
{
  _WORD *v0;

  if ((*v0 & 0xF000) != 0x1000 || (*v0 & 1) != 0)
    return objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  if (qword_1EEB42BB0 != -1)
    swift_once();
  return (id)qword_1EEB44258;
}

void Symbol.color.getter()
{
  _WORD *v0;
  id v1;
  id v2;

  if ((*v0 & 0xF000) != 0x1000 || (*v0 & 1) != 0)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1EEB42BB0 != -1)
      swift_once();
    v1 = (id)qword_1EEB44258;
  }
  JUMPOUT(0x1AF41E85CLL);
}

void Symbol.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1A9BB8F74()
{
  sub_1A9CE8C58();
  return sub_1A9CE8C58();
}

uint64_t Symbol.hashValue.getter()
{
  sub_1A9CE8C4C();
  Symbol.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BB90D4()
{
  sub_1A9CE8C4C();
  Symbol.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BB9120()
{
  sub_1A9CE8C4C();
  Symbol.hash(into:)();
  return sub_1A9CE8C7C();
}

void static Symbol.bedtime.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static Symbol.checkmark.getter(_WORD *a1@<X8>)
{
  *a1 = 12288;
}

void static Symbol.xmark.getter(_WORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static Symbol.circle.getter(_WORD *a1@<X8>)
{
  *a1 = 28672;
}

void static Symbol.plus.getter(_WORD *a1@<X8>)
{
  *a1 = 24576;
}

id static UIColor.wakeup(_:)(char a1)
{
  if ((a1 & 1) != 0)
    return objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  if (qword_1EEB42BB0 != -1)
    swift_once();
  return (id)qword_1EEB44258;
}

id sub_1A9BB9204()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  qword_1EEB44258 = (uint64_t)result;
  return result;
}

id static UIColor.alarmDisabled.getter()
{
  if (qword_1EEB42BB0 != -1)
    swift_once();
  return (id)qword_1EEB44258;
}

UIImage static UIImage.wakeup(_:)(UIImageConfiguration_optional a1)
{
  a1.value.super.isa = 0;
  return Symbol.uiImage(configuration:)(a1);
}

void static Color.wakeup(_:)(char a1)
{
  id v1;
  id v2;

  if ((a1 & 1) != 0)
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_hk_sleepKeyColor);
  }
  else
  {
    if (qword_1EEB42BB0 != -1)
      swift_once();
    v2 = (id)qword_1EEB44258;
  }
  JUMPOUT(0x1AF41E85CLL);
}

uint64_t sub_1A9BB9324()
{
  uint64_t result;

  result = sub_1A9CE7D28();
  qword_1EEB44260 = result;
  return result;
}

uint64_t static Image.bedtime.getter()
{
  if (qword_1EEB42BB8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static Image.wakeup(_:)()
{
  return sub_1A9CE7D28();
}

uint64_t static Image.alarm(on:snoozing:variant:)()
{
  Symbol.systemName.getter();
  return sub_1A9CE7D28();
}

uint64_t static Image.wakeupToolbar.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A9BB9464(a1);
}

uint64_t static Image.checkmarkToolbar.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A9BB9464(a1);
}

uint64_t sub_1A9BB9464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;

  v2 = sub_1A9CE7D28();
  if (qword_1ED262D40 != -1)
    swift_once();
  v3 = qword_1ED262D68;
  KeyPath = swift_getKeyPath();
  *a1 = v2;
  a1[1] = KeyPath;
  a1[2] = v3;
  return swift_retain();
}

uint64_t static Image.standardNavigationChevron.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  sub_1A9BAB80C(0);
  v20 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1A9CE7D40();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1A9CE7D04();
  v11 = objc_msgSend((id)objc_opt_self(), sel_tertiaryLabelColor);
  v12 = MEMORY[0x1AF41E85C](v11);
  KeyPath = swift_getKeyPath();
  sub_1A9CE77DC();
  v14 = sub_1A9CE77E8();
  swift_release();
  v15 = swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CDF7D0], v6);
  v16 = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v20 + 28), v10, v6);
  *v5 = v16;
  sub_1A9BBA4B0();
  sub_1A9BBA69C((uint64_t)v5, (uint64_t)a1 + *(int *)(v17 + 36));
  *a1 = v19;
  a1[1] = KeyPath;
  a1[2] = v12;
  a1[3] = v15;
  a1[4] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1A9BBA6E0((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t Symbol.customVoiceOverString.getter()
{
  _WORD *v0;
  uint64_t v1;
  id v2;

  if ((*v0 & 0xF000) != 0x1000)
    return 0;
  if ((*v0 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
  }
  else if (qword_1ED2626A8 != -1)
  {
    swift_once();
  }
  v2 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t View.addCustomVoiceOverElement(for:title:)@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[3];
  _QWORD v94[2];
  _QWORD v95[2];
  _QWORD v96[2];
  _QWORD v97[2];
  _QWORD v98[2];
  uint64_t v99;
  uint64_t v100;

  v7 = a4;
  v77 = a3;
  v75 = a2;
  v89 = a6;
  v74 = *(char **)(a4 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v73 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v11);
  v72 = (uint64_t)&v71 - v12;
  v13 = sub_1A9CE7620();
  v76 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = v7;
  v100 = a5;
  v17 = MEMORY[0x1AF420248](0, &v99, MEMORY[0x1E0CDEA98], 0);
  v79 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v78 = (char *)&v71 - v19;
  sub_1A9CE76BC();
  v80 = v17;
  v20 = sub_1A9CE7164();
  v81 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v82 = (uint64_t)&v71 - v26;
  v27 = sub_1A9CE74F4();
  v85 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v84 = (uint64_t)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v31);
  v83 = (char *)&v71 - v32;
  v88 = sub_1A9CE74F4();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v33);
  v35 = (char *)&v71 - v34;
  LOWORD(v99) = *a1;
  v36 = Symbol.customVoiceOverString.getter();
  if (v37)
  {
    v38 = v37;
    v71 = v36;
    v72 = v13;
    v73 = v24;
    v39 = v7;
    v74 = v35;
    if (v77)
    {
      sub_1A9CE7608();
      v40 = v78;
      sub_1A9CE7B54();
      v41 = v16;
      v42 = a5;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v41, v72);
      v99 = v71;
      v100 = v38;
      sub_1A9CE8340();
      sub_1A9CE8340();
      v43 = v39;
      v99 = v39;
      v100 = a5;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v45 = (uint64_t)v73;
      v46 = v80;
      sub_1A9CE7AD0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v40, v46);
      v47 = sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
      v90[0] = OpaqueTypeConformance2;
      v90[1] = v47;
      MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v20, v90);
      v48 = v82;
      sub_1A9C3C998(v45, v20, v82);
      v49 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      v49(v45, v20);
      sub_1A9C3899C(v48, v20, v45);
      v50 = (uint64_t)v83;
      sub_1A9C389B4(v45, v20);
    }
    else
    {
      sub_1A9CE7608();
      v57 = v78;
      sub_1A9CE7B54();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v16, v72);
      v43 = v39;
      v99 = v39;
      v100 = a5;
      v58 = swift_getOpaqueTypeConformance2();
      v45 = (uint64_t)v73;
      v59 = v80;
      sub_1A9CE7AD0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v57, v59);
      v60 = sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
      v93[0] = v58;
      v93[1] = v60;
      v42 = a5;
      MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v20, v93);
      v48 = v82;
      sub_1A9C3C998(v45, v20, v82);
      v49 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      v49(v45, v20);
      sub_1A9C3899C(v48, v20, v45);
      v50 = (uint64_t)v83;
      sub_1A9C38A78(v45, v20, v20);
    }
    v49(v45, v20);
    v49(v48, v20);
    v7 = v43;
    v99 = v43;
    v100 = v42;
    v61 = swift_getOpaqueTypeConformance2();
    v62 = sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    v92[0] = v61;
    v92[1] = v62;
    v91[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v20, v92);
    v91[1] = v91[0];
    MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v27, v91);
    v63 = v84;
    sub_1A9C3899C(v50, v27, v84);
    v35 = v74;
    sub_1A9C389B4(v63, v27);
    v64 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v64(v63, v27);
    v64(v50, v27);
    v56 = v89;
  }
  else
  {
    v51 = v72;
    sub_1A9C3C998(v86, v7, v72);
    v52 = (uint64_t)v73;
    sub_1A9C3899C(v51, v7, (uint64_t)v73);
    v99 = v7;
    v100 = a5;
    v53 = swift_getOpaqueTypeConformance2();
    v54 = sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    v98[0] = v53;
    v98[1] = v54;
    v97[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v20, v98);
    v97[1] = v97[0];
    MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v27, v97);
    sub_1A9C38A78(v52, v27, v7);
    v55 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v74 + 1);
    v55(v52, v7);
    v55(v51, v7);
    v56 = v89;
    v42 = a5;
  }
  v65 = v88;
  v66 = v87;
  v99 = v7;
  v100 = v42;
  v67 = swift_getOpaqueTypeConformance2();
  v68 = sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
  v96[0] = v67;
  v96[1] = v68;
  v95[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v20, v96);
  v95[1] = v95[0];
  v69 = MEMORY[0x1E0CDB8A0];
  v94[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v27, v95);
  v94[1] = v42;
  MEMORY[0x1AF420284](v69, v65, v94);
  sub_1A9C3899C((uint64_t)v35, v65, v56);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v35, v65);
}

uint64_t sub_1A9BBA0C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE72E4();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BBA0E8()
{
  swift_retain();
  return sub_1A9CE72F0();
}

uint64_t sub_1A9BBA110()
{
  return sub_1A9CE720C();
}

uint64_t sub_1A9BBA130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_1A9CE7D40();
  MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1A9CE7218();
}

uint64_t sub_1A9BBA1AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE7260();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BBA1D4()
{
  swift_retain();
  return sub_1A9CE726C();
}

uint64_t _s13SleepHealthUI6SymbolO2eeoiySbAC_ACtFZ_0(unsigned __int16 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_1A9BBA220 + 4 * byte_1A9CED911[*a1 >> 12]))();
}

BOOL sub_1A9BBA220@<W0>(unsigned int a1@<W8>)
{
  char v1;

  return a1 < 0x1000 && (a1 ^ v1) == 0;
}

uint64_t sub_1A9BBA3EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE7260();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BBA414()
{
  swift_retain();
  return sub_1A9CE726C();
}

uint64_t sub_1A9BBA43C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE72E4();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BBA464()
{
  swift_retain();
  return sub_1A9CE72F0();
}

uint64_t sub_1A9BBA48C()
{
  return sub_1A9CE720C();
}

void sub_1A9BBA4B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44268)
  {
    sub_1A9BBA514();
    sub_1A9BAB80C(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44268);
  }
}

void sub_1A9BBA514()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44270)
  {
    sub_1A9BBA590();
    sub_1A9BBA604(255, &qword_1EEB43D80, &qword_1EEB43D88);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44270);
  }
}

void sub_1A9BBA590()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44278)
  {
    sub_1A9BBA604(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44278);
  }
}

void sub_1A9BBA604(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9BBA658(255, a3);
    v4 = sub_1A9CE76B0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BBA658(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1A9CE8880();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1A9BBA69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BAB80C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BBA6E0(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BAB80C(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A9BBA720()
{
  unint64_t result;

  result = qword_1EEB44288;
  if (!qword_1EEB44288)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for Symbol.Variant, &type metadata for Symbol.Variant);
    atomic_store(result, (unint64_t *)&qword_1EEB44288);
  }
  return result;
}

unint64_t sub_1A9BBA768()
{
  unint64_t result;

  result = qword_1EEB44290;
  if (!qword_1EEB44290)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for Symbol, &type metadata for Symbol);
    atomic_store(result, (unint64_t *)&qword_1EEB44290);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Symbol(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xFF8)
    goto LABEL_17;
  if (a2 + 61448 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 61448 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 61448;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 61448;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 61448;
  }
LABEL_17:
  v6 = (*a1 & 0xC00 | (*a1 >> 12) & 0xFFFFFC0F | (16 * (*a1 >> 2))) ^ 0xFFF;
  if (v6 >= 0xFF7)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for Symbol(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 61448 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 61448 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFF7)
    return ((uint64_t (*)(void))((char *)&loc_1A9BBA8AC + 4 * byte_1A9CED927[v4]))();
  *a1 = a2 - 4088;
  return ((uint64_t (*)(void))((char *)sub_1A9BBA8E0 + 4 * byte_1A9CED922[v4]))();
}

uint64_t sub_1A9BBA8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1A9BBA8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1A9BBA8F0);
  return result;
}

uint64_t sub_1A9BBA910(uint64_t result, int a2)
{
  __int16 v2;

  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1A9BBA918);
  v2 = (-a2 >> 4) - ((_WORD)a2 << 8);
  *(_WORD *)result = (16 * v2) & 0xFC00 | (4 * (v2 & 0x3F));
  return result;
}

uint64_t sub_1A9BBA91C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1A9BBA924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1A9BBA930(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  v2 = (__int16)v1;
  v3 = v1 >> 12;
  v4 = (v1 & 3 | (4 * ((v1 >> 8) & 3))) + 8;
  if (v2 >= 0)
    return v3;
  else
    return v4;
}

_WORD *sub_1A9BBA958(_WORD *result)
{
  *result &= 0xFFFu;
  return result;
}

_WORD *sub_1A9BBA968(_WORD *result, unsigned int a2)
{
  if (a2 < 8)
    *result = *result & 0x303 | ((_WORD)a2 << 12);
  else
    *result = (((_WORD)a2 << 6) + 512) & 0x300 | a2 & 3 | 0x8000;
  return result;
}

ValueMetadata *type metadata accessor for Symbol()
{
  return &type metadata for Symbol;
}

uint64_t getEnumTagSinglePayload for Symbol.Variant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Symbol.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9BBAA8C + 4 * byte_1A9CED931[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9BBAAC0 + 4 * byte_1A9CED92C[v4]))();
}

uint64_t sub_1A9BBAAC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BBAAC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BBAAD0);
  return result;
}

uint64_t sub_1A9BBAADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BBAAE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9BBAAE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BBAAF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BBAAFC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1A9BBAB04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Symbol.Variant()
{
  return &type metadata for Symbol.Variant;
}

unint64_t sub_1A9BBAB20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB44298;
  if (!qword_1EEB44298)
  {
    sub_1A9BBA590();
    v2 = v1;
    v3 = sub_1A9BBACB4((unint64_t *)&qword_1ED263350, (unint64_t *)&qword_1ED263358, &qword_1ED263360);
    v4[0] = MEMORY[0x1E0CDF820];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB44298);
  }
  return result;
}

unint64_t sub_1A9BBABAC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB442A0;
  if (!qword_1EEB442A0)
  {
    sub_1A9BBA4B0();
    v2 = v1;
    v3[0] = sub_1A9BBAC2C();
    v3[1] = sub_1A9B92B9C(&qword_1EEB43D50, (uint64_t (*)(uint64_t))sub_1A9BAB80C, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB442A0);
  }
  return result;
}

unint64_t sub_1A9BBAC2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB442A8;
  if (!qword_1EEB442A8)
  {
    sub_1A9BBA514();
    v2 = v1;
    v3[0] = sub_1A9BBAB20();
    v3[1] = sub_1A9BBACB4((unint64_t *)&qword_1EEB43E00, &qword_1EEB43D80, &qword_1EEB43D88);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB442A8);
  }
  return result;
}

uint64_t sub_1A9BBACB4(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1A9BBA604(255, a2, a3);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BBACF4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v12 = *a1;
  v1 = v12;
  v13 = v2;
  MEMORY[0x1AF420248](255, &v12, MEMORY[0x1E0CDEA98], 0);
  sub_1A9CE76BC();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0];
  v4 = sub_1A9CE7164();
  v5 = sub_1A9CE74F4();
  v6 = sub_1A9CE74F4();
  v12 = v1;
  v13 = v2;
  v11[0] = swift_getOpaqueTypeConformance2();
  v11[1] = sub_1A9B92B9C(&qword_1EEB44280, v3, MEMORY[0x1E0CDCFB8]);
  v10[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v4, v11);
  v10[1] = v10[0];
  v7 = MEMORY[0x1E0CDB8A0];
  v9[0] = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v5, v10);
  v9[1] = v2;
  return MEMORY[0x1AF420284](v7, v6, v9);
}

BOOL static GoalSectionProvider.Configuration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t GoalSectionProvider.Configuration.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t GoalSectionProvider.Configuration.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t GoalSectionProvider.__allocating_init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  swift_allocObject();
  v10 = sub_1A9BBCF68(a1, a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t GoalSectionProvider.init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = sub_1A9BBCF68(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

uint64_t sub_1A9BBAF44(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 112) = v2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  sub_1A9BBAFB0();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A9BBAFB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *v0;
  result = swift_beginAccess();
  v4 = v0[2];
  if ((v4 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1A9CE8940();
    result = swift_bridgeObjectRelease();
    if (v5)
      return result;
    goto LABEL_3;
  }
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_3:
    v6 = swift_allocObject();
    swift_weakInit();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v2;
    sub_1A9B92D08();
    sub_1A9B92B9C((unint64_t *)&qword_1EEB474C0, (uint64_t (*)(uint64_t))sub_1A9B92D08, MEMORY[0x1E0C95FB8]);
    swift_retain();
    sub_1A9CE6EC4();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1A9CE6D74();
    swift_endAccess();
    swift_release();
    v8 = swift_allocObject();
    swift_weakInit();
    v9 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x1AF4203E0](v1 + 13);
    *(_QWORD *)(v9 + 24) = v1[14];
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_unknownObjectRelease();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v2;
    sub_1A9CE6EC4();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1A9CE6D74();
    swift_endAccess();
    swift_release();
    v11 = swift_allocObject();
    swift_weakInit();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v2;
    sub_1A9BBD7C4();
    sub_1A9B92B9C(&qword_1EEB44460, (uint64_t (*)(uint64_t))sub_1A9BBD7C4, MEMORY[0x1E0C95FB8]);
    swift_retain();
    sub_1A9CE6EC4();
    swift_release();
    swift_release();
    swift_beginAccess();
    sub_1A9CE6D74();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9BBB318(uint64_t a1)
{
  double v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;

  v1 = *(double *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
    v6 = sub_1A9CE6978();
    v7 = sub_1A9CE867C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v16 = v9;
      *(_DWORD *)v8 = 136446466;
      v10 = sub_1A9CE8D48();
      v17 = COERCE_DOUBLE(sub_1A9B91D6C(v10, v11, &v16));
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      v17 = v1;
      v18 = v2;
      sub_1A9B94CA0(0, (unint64_t *)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v12 = sub_1A9CE82F8();
      v17 = COERCE_DOUBLE(sub_1A9B91D6C(v12, v13, &v16));
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] sleep duration goal updated to %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v9, -1, -1);
      MEMORY[0x1AF420344](v8, -1, -1);
    }

    sub_1A9CE6DD4();
    if ((v18 & 1) != 0)
    {
      if ((v2 & 1) != 0)
        goto LABEL_12;
    }
    else if ((v2 & 1) == 0 && v17 == v1)
    {
      goto LABEL_12;
    }
    *(_BYTE *)(v4 + 56) = 1;
    v17 = v1;
    v18 = v2;
    sub_1A9CE6DE0();
LABEL_12:
    v14 = *(void (**)(uint64_t))(v4 + 80);
    v15 = swift_retain();
    v14(v15);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9BBB594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, double);
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v5 = sub_1A9CE80A0();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return result;
  v11 = *(double *)a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v12 = result;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v10 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x1E0DEF740], v5);
  v13 = sub_1A9CE80AC();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v10, v5);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_1ED262DB8 != -1)
LABEL_15:
    swift_once();
  v14 = sub_1A9CE6990();
  __swift_project_value_buffer(v14, (uint64_t)qword_1ED2630B8);
  v15 = sub_1A9CE6978();
  v16 = sub_1A9CE867C();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v32[0] = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = sub_1A9CE8D48();
    v31 = sub_1A9B91D6C(v19, v20, v32);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v21 = sub_1A9CE849C();
    v31 = sub_1A9B91D6C(v21, v22, v32);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] sleep duration goal chosen to be %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v18, -1, -1);
    MEMORY[0x1AF420344](v17, -1, -1);
  }

  if ((*(_BYTE *)(v12 + 56) & 1) == 0 && ((*(_BYTE *)(v12 + 72) & 1) != 0 || *(double *)(v12 + 64) != v11))
  {
    swift_beginAccess();
    if (MEMORY[0x1AF4203E0](a3 + 16))
    {
      v23 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      v25 = swift_allocObject();
      swift_weakInit();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      *(double *)(v26 + 24) = v11;
      v27 = *(void (**)(_QWORD, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, double))(v23 + 8);
      swift_retain();
      v27(0, sub_1A9BBD828, v26, ObjectType, v23, v11);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  *(_BYTE *)(v12 + 56) = 0;
  v28 = *(void (**)(uint64_t))(v12 + 80);
  v29 = swift_retain();
  v28(v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BBB92C(uint64_t a1, double a2)
{
  uint64_t result;

  if (a1)
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (!result)
      return result;
    *(_BYTE *)(result + 56) = 1;
    sub_1A9CE6DE0();
  }
  else
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (!result)
      return result;
    *(double *)(result + 64) = a2;
    *(_BYTE *)(result + 72) = 0;
  }
  return swift_release();
}

uint64_t sub_1A9BBB9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v0 = sub_1A9CE80A0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v6 = result;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v4 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DEF740], v0);
  v7 = sub_1A9CE80AC();
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  if ((v7 & 1) != 0)
  {
    swift_retain();
    sub_1A9CE6DD4();
    swift_release();
    if ((_BYTE)v19)
      v0 = 0x676E69736F6C43;
    else
      v0 = 0x676E696E65704FLL;
    if (qword_1ED262DB8 == -1)
      goto LABEL_7;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_7:
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
  swift_bridgeObjectRetain();
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v19 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1A9CE8D48();
    v18 = sub_1A9B91D6C(v13, v14, &v19);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    swift_bridgeObjectRetain();
    v18 = sub_1A9B91D6C(v0, 0xE700000000000000, &v19);
    sub_1A9CE888C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] %{public}s sleep duration goal picker", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v15 = *(void (**)(uint64_t))(v6 + 80);
  v16 = swift_retain();
  v15(v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BBBCE8()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1AF4203E0](v0 + 104);
}

uint64_t sub_1A9BBBD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 112) = a2;
  swift_unknownObjectWeakAssign();
  sub_1A9BBAFB0();
  return swift_unknownObjectRelease();
}

void (*sub_1A9BBBD90(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v1 + 104);
  v5 = *(_QWORD *)(v1 + 112);
  v3[3] = v4;
  v3[4] = v5;
  return sub_1A9BBBDFC;
}

void sub_1A9BBBDFC(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 112) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    sub_1A9BBAFB0();
  }
  free(v3);
}

uint64_t sub_1A9BBBE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  void (*v34)(uint64_t *, uint64_t *, ValueMetadata *);
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[5];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  ValueMetadata *v58;
  unint64_t v59;

  if ((*v4 & 1) != 0)
  {
    sub_1A9CE6DD4();
    v47 = v56;
    v46 = v57;
    v45 = a3;
    v9 = MEMORY[0x1E0DEA968];
    sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = swift_allocObject();
    v44 = xmmword_1A9CED850;
    *(_OWORD *)(v10 + 16) = xmmword_1A9CED850;
    *(_QWORD *)(v10 + 32) = sub_1A9CE82E0();
    *(_QWORD *)(v10 + 40) = v11;
    *(_QWORD *)(v10 + 48) = 0x7065656C53;
    *(_QWORD *)(v10 + 56) = 0xE500000000000000;
    *(_QWORD *)(v10 + 64) = 0x736E6F6974704FLL;
    *(_QWORD *)(v10 + 72) = 0xE700000000000000;
    swift_retain();
    sub_1A9BB35E8((uint64_t)&unk_1E55D1D18);
    v43 = a1;
    sub_1A9B94CA0(0, &qword_1ED2632C0, v9, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v48 = a4;
    sub_1A9BB51C4();
    v12 = sub_1A9CE8280();
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    v58 = &type metadata for GoalTableViewItem;
    v59 = sub_1A9BBD2F0();
    v15 = swift_allocObject();
    v56 = v15;
    *(_QWORD *)(v15 + 16) = v47;
    *(_BYTE *)(v15 + 24) = v46;
    *(_QWORD *)(v15 + 32) = a2;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = v45;
    *(_QWORD *)(v15 + 56) = v12;
    *(_QWORD *)(v15 + 64) = v14;
    *(_QWORD *)(v15 + 72) = v12;
    *(_QWORD *)(v15 + 80) = v14;
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v44;
    *(_QWORD *)(v16 + 32) = sub_1A9CE82E0();
    *(_QWORD *)(v16 + 40) = v17;
    *(_QWORD *)(v16 + 48) = 0x7065656C53;
    *(_QWORD *)(v16 + 56) = 0xE500000000000000;
    *(_QWORD *)(v16 + 64) = 0x736E6F6974704FLL;
    *(_QWORD *)(v16 + 72) = 0xE700000000000000;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    sub_1A9BB35E8((uint64_t)&unk_1E55D1D48);
    v18 = sub_1A9CE8280();
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    v54 = &type metadata for GoalPickerTableViewItem;
    v55 = sub_1A9BBD370();
    swift_bridgeObjectRelease();
    swift_release();
    v51 = v43;
    v52 = v18;
    v53 = v20;
  }
  else
  {
    sub_1A9CE6DD4();
    v58 = (ValueMetadata *)sub_1A9CE68B8();
    v59 = sub_1A9B92B9C(&qword_1EEB44440, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B350], MEMORY[0x1E0D2B340]);
    v21 = __swift_allocate_boxed_opaque_existential_1(&v56);
    sub_1A9BBC588(v51, v52, a2, a3, (uint64_t)v21);
    v22 = MEMORY[0x1E0DEA968];
    sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1A9CED850;
    *(_QWORD *)(v23 + 32) = sub_1A9CE82E0();
    *(_QWORD *)(v23 + 40) = v24;
    *(_QWORD *)(v23 + 48) = 0x7065656C53;
    *(_QWORD *)(v23 + 56) = 0xE500000000000000;
    *(_QWORD *)(v23 + 64) = 0x736E6F6974704FLL;
    *(_QWORD *)(v23 + 72) = 0xE700000000000000;
    swift_retain();
    sub_1A9BB35E8((uint64_t)&unk_1E55D1CE8);
    sub_1A9B94CA0(0, &qword_1ED2632C0, v22, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9BB51C4();
    v25 = sub_1A9CE8280();
    v27 = v26;
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    v54 = &type metadata for GoalPickerItem;
    v51 = a1;
    v52 = v25;
    v55 = sub_1A9BBD3B4();
    v53 = v27;
  }
  sub_1A9B92F34(0, &qword_1EEB44438, (uint64_t (*)(uint64_t))sub_1A9BB53B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1A9CEB520;
  sub_1A9B923D4((uint64_t)&v56, v28 + 32);
  sub_1A9CE6DD4();
  if (LOBYTE(v49[0]) == 1)
  {
    v29 = v54;
    v30 = v55;
    v31 = __swift_project_boxed_opaque_existential_1Tm(&v51, (uint64_t)v54);
    v49[3] = (uint64_t)v29;
    v32 = *(_QWORD *)(v30 + 8);
    v49[4] = v32;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v49);
    v34 = (void (*)(uint64_t *, uint64_t *, ValueMetadata *))*((_QWORD *)v29[-1].Description + 2);
    v34(boxed_opaque_existential_1, v31, v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A9CADE80(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
      v28 = isUniquelyReferenced_nonNull_native;
      v50 = isUniquelyReferenced_nonNull_native;
    }
    v38 = *(_QWORD *)(v28 + 16);
    v37 = *(_QWORD *)(v28 + 24);
    if (v38 >= v37 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1A9CADE80((_QWORD *)(v37 > 1), v38 + 1, 1, (_QWORD *)v28);
      v50 = isUniquelyReferenced_nonNull_native;
    }
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v36);
    v40 = (char *)&v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    v34((uint64_t *)v40, boxed_opaque_existential_1, v29);
    sub_1A9BC63F8(v38, (uint64_t)v40, &v50, (uint64_t)v29, v32);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
  }
  sub_1A9CE6834();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v56);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v51);
}

uint64_t sub_1A9BBC470@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[3] = sub_1A9CE6840();
  a1[4] = (uint64_t)&protocol witness table for ArrayDataSourceSection;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  v5 = v1[4];
  v4 = v1[5];
  v6 = v1[6];
  swift_retain();
  sub_1A9BBBE74(v4, v5, v6, (uint64_t)boxed_opaque_existential_1);
  return swift_release();
}

uint64_t GoalSectionProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A9B94894(v0 + 104);
  return v0;
}

uint64_t GoalSectionProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1A9B94894(v0 + 104);
  return swift_deallocClassInstance();
}

uint64_t sub_1A9BBC588@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void (*v28)(uint64_t *, _QWORD);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42[5];

  v41 = a1;
  v38 = a5;
  v40 = a2 & 1;
  v7 = sub_1A9CE68E8();
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v37 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB44450, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v32 - v12;
  v14 = sub_1A9CE68A0();
  v33 = *(_QWORD *)(v14 - 8);
  v34 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE6A08();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0DEA968];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v24 + 32) = 0x7065656C53;
  *(_QWORD *)(v24 + 40) = 0xE500000000000000;
  *(_QWORD *)(v24 + 48) = 0x736E6F6974704FLL;
  *(_QWORD *)(v24 + 56) = 0xE700000000000000;
  v39 = a3;
  swift_retain();
  v25 = (char *)sub_1A9CADD68((_QWORD *)1, 3, 1, (_QWORD *)v24);
  *((_QWORD *)v25 + 2) = 3;
  strcpy(v25 + 64, "SleepGoalCell");
  *((_WORD *)v25 + 39) = -4864;
  v42[0] = (uint64_t)v25;
  sub_1A9B94CA0(0, &qword_1ED2632C0, v23, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  v32[1] = v26;
  swift_bridgeObjectRelease();
  sub_1A9CE69FC();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v27 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  sub_1A9CE69F0();
  sub_1A9BBD3F8(v41, v40);
  sub_1A9CE69CC();
  if (!a4 || a4 == 2)
  {
    if ((id)HKHealthTintColor())
    {
LABEL_9:
      v28 = (void (*)(uint64_t *, _QWORD))sub_1A9CE69E4();
      sub_1A9CE69D8();
      v28(v42, 0);
      v42[0] = (uint64_t)&type metadata for GoalSectionModel;
      sub_1A9BBD530();
      sub_1A9CE82F8();
      v42[3] = v18;
      v42[4] = MEMORY[0x1E0DC2398];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42);
      (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v22, v18);
      *v17 = 1;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v33 + 104))(v17, *MEMORY[0x1E0D2B168], v34);
      v30 = sub_1A9CE69B4();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 1, 1, v30);
      (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v37, *MEMORY[0x1E0D2B8C8], v36);
      sub_1A9CE68AC();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    }
    __break(1u);
  }
  if (a4 == 1)
  {
    if ((id)BPSBridgeTintColor())
      goto LABEL_9;
    __break(1u);
  }
  v42[0] = a4;
  result = sub_1A9CE8BBC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BBCA20()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[16];
  id v8;

  v4 = *(_OWORD *)(v0 + 16);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 48);
  sub_1A9BBE0BC((uint64_t)&v4 + 8, (uint64_t)&v8);
  sub_1A9BBE164((uint64_t)&v5 + 8, (uint64_t)v7);
  swift_retain();
  sub_1A9BBE1C0(&v8);
  sub_1A9BBE1E8((uint64_t)v7);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v1 = (id)qword_1ED264F90;
  v2 = sub_1A9CE6168();
  swift_release();

  sub_1A9BBE210(&v8);
  sub_1A9BBE238((uint64_t)v7);
  return v2;
}

uint64_t sub_1A9BBCB38()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[16];
  id v8;

  v4 = *(_OWORD *)(v0 + 16);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 48);
  sub_1A9BBE0BC((uint64_t)&v4 + 8, (uint64_t)&v8);
  sub_1A9BBE164((uint64_t)&v5 + 8, (uint64_t)v7);
  v1 = v5;
  if (!(_QWORD)v5 || (_QWORD)v5 == 2)
  {
    swift_retain();
    sub_1A9BBE1C0(&v8);
    sub_1A9BBE1E8((uint64_t)v7);
    v2 = (id)HKHealthTintColor();
    if (v2)
    {
LABEL_7:
      swift_release();
      sub_1A9BBE210(&v8);
      sub_1A9BBE238((uint64_t)v7);
      return (uint64_t)v2;
    }
    __break(1u);
  }
  if (v1 == 1)
  {
    swift_retain();
    sub_1A9BBE1C0(&v8);
    sub_1A9BBE1E8((uint64_t)v7);
    v2 = (id)BPSBridgeTintColor();
    if (v2)
      goto LABEL_7;
    __break(1u);
  }
  swift_retain();
  sub_1A9BBE1C0(&v8);
  sub_1A9BBE1E8((uint64_t)v7);
  result = sub_1A9CE8BBC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BBCC60()
{
  sub_1A9CE681C();
  return sub_1A9CE6774();
}

uint64_t sub_1A9BBCC90()
{
  sub_1A9BBD530();
  return sub_1A9CE82F8();
}

uint64_t sub_1A9BBCCC8()
{
  return sub_1A9BBCA20();
}

uint64_t sub_1A9BBCD08()
{
  return 0;
}

uint64_t sub_1A9BBCD10()
{
  uint64_t v0;

  return sub_1A9BBD3F8(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_1A9BBCD1C()
{
  return sub_1A9BBCB38();
}

void *sub_1A9BBCD5C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t sub_1A9BBCD80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9BBCDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*sub_1A9BBCDE0())()
{
  return nullsub_1;
}

uint64_t sub_1A9BBCDF4()
{
  swift_retain();
  sub_1A9BBD570();
  return swift_release();
}

uint64_t sub_1A9BBCE20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 1;
  v2 = *MEMORY[0x1E0D2B168];
  v3 = sub_1A9CE68A0();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1A9BBCE74()
{
  return swift_retain();
}

uint64_t sub_1A9BBCE7C()
{
  type metadata accessor for GoalTimePickerTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44498, (uint64_t (*)(uint64_t))type metadata accessor for GoalTimePickerTableViewCell, (uint64_t)&unk_1A9CF2B08);
  return sub_1A9CE6774();
}

uint64_t sub_1A9BBCEC8()
{
  sub_1A9BBE084();
  return sub_1A9CE82F8();
}

uint64_t sub_1A9BBCEF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9BBCF24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_1A9BBCF58())()
{
  return nullsub_1;
}

uint64_t sub_1A9BBCF68(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v10;
  uint64_t v12;
  char v13;

  v10 = *a3;
  *(_QWORD *)(v5 + 16) = MEMORY[0x1E0DEE9E8];
  LOBYTE(v12) = 0;
  sub_1A9BBD7C4();
  swift_allocObject();
  *(_QWORD *)(v5 + 32) = sub_1A9CE6DF8();
  *(_BYTE *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 1;
  *(_QWORD *)(v5 + 112) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v5 + 24) = a1;
  swift_retain();
  sub_1A9CE6DD4();
  sub_1A9B92D08();
  swift_allocObject();
  *(_QWORD *)(v5 + 40) = sub_1A9CE6DF8();
  *(_QWORD *)(v5 + 48) = a2;
  sub_1A9CE6DD4();
  *(_QWORD *)(v5 + 64) = v12;
  *(_BYTE *)(v5 + 72) = v13;
  *(_BYTE *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 80) = a4;
  *(_QWORD *)(v5 + 88) = a5;
  return v5;
}

unint64_t sub_1A9BBD084()
{
  unint64_t result;

  result = qword_1EEB442B0;
  if (!qword_1EEB442B0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for GoalSectionProvider.Configuration, &type metadata for GoalSectionProvider.Configuration);
    atomic_store(result, (unint64_t *)&qword_1EEB442B0);
  }
  return result;
}

uint64_t sub_1A9BBD0C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 104;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v4);
  v6 = *(_QWORD *)(v3 + 112);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t type metadata accessor for GoalSectionProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for GoalSectionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GoalSectionProvider.__allocating_init(goalDurationPublisher:presentationStyle:configuration:updateBlock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of GoalSectionProvider.sleepTimeDurationPickerDelegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GoalSectionProvider.safeGoalSection.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t getEnumTagSinglePayload for SleepOnboardingContext.EntryPoint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalSectionProvider.Configuration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9BBD264 + 4 * byte_1A9CEDB15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9BBD298 + 4 * byte_1A9CEDB10[v4]))();
}

uint64_t sub_1A9BBD298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BBD2A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BBD2A8);
  return result;
}

uint64_t sub_1A9BBD2B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BBD2BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9BBD2C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BBD2C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1A9BBD2D4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GoalSectionProvider.Configuration()
{
  return &type metadata for GoalSectionProvider.Configuration;
}

unint64_t sub_1A9BBD2F0()
{
  unint64_t result;

  result = qword_1EEB44428;
  if (!qword_1EEB44428)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDDF4, &type metadata for GoalTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44428);
  }
  return result;
}

uint64_t sub_1A9BBD334()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A9BBD370()
{
  unint64_t result;

  result = qword_1EEB44430;
  if (!qword_1EEB44430)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDDD8, &type metadata for GoalPickerTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44430);
  }
  return result;
}

unint64_t sub_1A9BBD3B4()
{
  unint64_t result;

  result = qword_1EEB44448;
  if (!qword_1EEB44448)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF346C, &type metadata for GoalPickerItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44448);
  }
  return result;
}

uint64_t sub_1A9BBD3F8(uint64_t a1, char a2)
{
  objc_class *v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  if ((a2 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v6 = (id)qword_1ED264F90;
    v7 = sub_1A9CE6168();
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v4;
    v10.super_class = v3;
    v5 = objc_msgSendSuper2(&v10, sel_init);
    v6 = objc_msgSend(v5, sel_stringFromTimeInterval_, *(double *)&a1);

    if (!v6)
      return 0;
    v7 = sub_1A9CE82E0();
  }
  v8 = v7;

  return v8;
}

unint64_t sub_1A9BBD530()
{
  unint64_t result;

  result = qword_1EEB44458;
  if (!qword_1EEB44458)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44458);
  }
  return result;
}

uint64_t sub_1A9BBD568()
{
  return sub_1A9BBD570();
}

uint64_t sub_1A9BBD570()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;

  if (qword_1ED262DB8 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED2630B8);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136446210;
    sub_1A9B91D6C(0x72756769666E6F43, 0xED00006E6F697461, &v6);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] Edit goal tapped", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  sub_1A9CE6DD4();
  LOBYTE(v6) = (v6 & 1) == 0;
  return sub_1A9CE6DC8();
}

uint64_t sub_1A9BBD710()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9BBD734(uint64_t a1)
{
  return sub_1A9BBB318(a1);
}

uint64_t sub_1A9BBD73C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9BBD760()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BBD78C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BBB594(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A9BBD798()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BBD7BC()
{
  return sub_1A9BBB9DC();
}

void sub_1A9BBD7C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2628B0)
  {
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2628B0);
  }
}

uint64_t sub_1A9BBD828(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BBB92C(a1, *(double *)(v1 + 24));
}

uint64_t destroy for GoalSectionModel(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GoalSectionModel(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GoalSectionModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  v5 = *(void **)(a1 + 24);
  v6 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = v6;

  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GoalSectionModel(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_release();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalSectionModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalSectionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalSectionModel()
{
  return &type metadata for GoalSectionModel;
}

uint64_t destroy for GoalPickerTableViewItem()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13SleepHealthUI23GoalPickerTableViewItemVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GoalPickerTableViewItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for GoalPickerTableViewItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepOnboardingContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepOnboardingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalPickerTableViewItem()
{
  return &type metadata for GoalPickerTableViewItem;
}

uint64_t destroy for GoalTableViewItem(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GoalTableViewItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GoalTableViewItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  v5 = *(void **)(a1 + 24);
  v6 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = v6;

  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for GoalTableViewItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_release();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalTableViewItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalTableViewItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalTableViewItem()
{
  return &type metadata for GoalTableViewItem;
}

unint64_t sub_1A9BBDED0()
{
  unint64_t result;

  result = qword_1EEB44468;
  if (!qword_1EEB44468)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDC84, &type metadata for GoalTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44468);
  }
  return result;
}

unint64_t sub_1A9BBDF14(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1A9BBD2F0();
  a1[2] = sub_1A9BBDF48();
  result = sub_1A9BBDF8C();
  a1[3] = result;
  return result;
}

unint64_t sub_1A9BBDF48()
{
  unint64_t result;

  result = qword_1EEB44470;
  if (!qword_1EEB44470)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDD04, &type metadata for GoalTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44470);
  }
  return result;
}

unint64_t sub_1A9BBDF8C()
{
  unint64_t result;

  result = qword_1EEB44478;
  if (!qword_1EEB44478)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDCCC, &type metadata for GoalTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44478);
  }
  return result;
}

unint64_t sub_1A9BBDFD0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A9BBDFFC();
  result = sub_1A9BBE040();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1A9BBDFFC()
{
  unint64_t result;

  result = qword_1EEB44480;
  if (!qword_1EEB44480)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDDA8, &type metadata for GoalPickerTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44480);
  }
  return result;
}

unint64_t sub_1A9BBE040()
{
  unint64_t result;

  result = qword_1EEB44488;
  if (!qword_1EEB44488)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDD70, &type metadata for GoalPickerTableViewItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44488);
  }
  return result;
}

unint64_t sub_1A9BBE084()
{
  unint64_t result;

  result = qword_1EEB44490;
  if (!qword_1EEB44490)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44490);
  }
  return result;
}

uint64_t sub_1A9BBE0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BBE100();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1A9BBE100()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB444A0)
  {
    sub_1A9B94A18(255, (unint64_t *)&qword_1EEB45220);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB444A0);
  }
}

uint64_t sub_1A9BBE164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B94CA0(0, &qword_1EEB444A8, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id *sub_1A9BBE1C0(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_1A9BBE1E8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

id *sub_1A9BBE210(id *a1)
{

  return a1;
}

uint64_t sub_1A9BBE238(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

Class sub_1A9BBE268(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  objc_class *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  objc_class *v13;
  UIImage v14;
  id v15;
  id v16;
  UIImageConfiguration_optional v18;
  UIImageConfiguration_optional v19;

  v2 = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v3 = 32;
    if ((a1 & 1) != 0)
      v3 = 24;
    v4 = *(void **)(v1 + v3);
    v5 = *MEMORY[0x1E0DC4918];
    v6 = (void *)objc_opt_self();
    v7 = v4;
    v8 = objc_msgSend(v6, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
    v9 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v2, v8);

    v10 = (void *)objc_opt_self();
    v11 = objc_msgSend(v10, sel_configurationWithFont_, v9);

    v12 = objc_msgSend(v10, sel_configurationWithHierarchicalColor_, v7);
    v13 = (objc_class *)objc_msgSend(v11, sel_configurationByApplyingConfiguration_, v12);

    v18.value.super.isa = v13;
    v14.super.isa = Symbol.uiImage(configuration:)(v18).super.isa;

  }
  else
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, *MEMORY[0x1E0DC4918]);
    v16 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v2, v15);

    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v16);
    v19.value.super.isa = v7;
    v14.super.isa = Symbol.uiImage(configuration:)(v19).super.isa;
  }

  return v14.super.isa;
}

uint64_t sub_1A9BBE46C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9BBE498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*sub_1A9BBE4CC())()
{
  return nullsub_1;
}

id sub_1A9BBE4DC()
{
  char *v0;
  char *v1;
  id v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints] = 0;
  v2 = objc_allocWithZone((Class)type metadata accessor for ConfirmationIconView());
  v3 = v0;
  v4 = objc_msgSend(v2, sel_init);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView] = v4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConfirmationFeatureLabelsView()), sel_init);

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for ConfirmationFeatureView();
  v5 = objc_msgSendSuper2(&v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1A9BBE82C();
  sub_1A9BBE978();
  sub_1A9BC09A4();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A9CEB520;
  v7 = sub_1A9CE6AB0();
  v8 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  v9 = v5;
  sub_1A9CE87C0();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v9;
}

void sub_1A9BBE668(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  int v11;
  id v12;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1AF4203E0](v5);
  if (v6)
  {
    v7 = (void *)v6;
    if (a2)
    {
      v8 = a2;
      v9 = objc_msgSend(a1, sel_traitCollection);
      v10 = objc_msgSend(v9, sel_preferredContentSizeCategory);
      v11 = sub_1A9CE879C();

      v12 = objc_msgSend(v8, sel_preferredContentSizeCategory);
      LODWORD(v10) = sub_1A9CE879C();

      if (((v11 ^ v10) & 1) != 0)
        sub_1A9BBE978();

      v7 = v8;
    }
    else
    {
      sub_1A9BBE978();
    }

  }
}

id sub_1A9BBE82C()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id result;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  id v11;
  Swift::OpaquePointer v12;

  sub_1A9BB7420();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEDE30;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView);
  *(_QWORD *)(inited + 32) = v2;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
  *(_QWORD *)(inited + 40) = v3;
  v12._rawValue = (void *)inited;
  sub_1A9CE83E8();
  if (!((unint64_t)v12._rawValue >> 62))
  {
    v4 = *(_QWORD *)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v2;
    result = v3;
    if (v4)
      goto LABEL_3;
LABEL_10:
    UIView.addSubviews(_:useAutoLayout:)(v12, 1);
    return (id)swift_bridgeObjectRelease();
  }
  v10 = v2;
  v11 = v3;
  swift_bridgeObjectRetain();
  v4 = sub_1A9CE8AC0();
  result = (id)swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if (((unint64_t)v12._rawValue & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1AF41F600](i, v12._rawValue);
      else
        v8 = *((id *)v12._rawValue + i + 4);
      v9 = v8;
      objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9BBE978()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;

  v1 = v0;
  v50 = OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_currentConstraints])
  {
    v2 = (void *)objc_opt_self();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
    swift_bridgeObjectRetain();
    v3 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_deactivateConstraints_, v3);

  }
  sub_1A9BB7420();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CED8F0;
  v5 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView];
  v6 = objc_msgSend(v5, sel_leadingAnchor);
  v7 = objc_msgSend(v1, sel_leadingAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v4 + 32) = v8;
  v9 = objc_msgSend(v5, sel_topAnchor);
  v10 = objc_msgSend(v1, sel_topAnchor);
  v11 = objc_msgSend(v9, sel_constraintGreaterThanOrEqualToAnchor_constant_, v10, 0.0);

  *(_QWORD *)(v4 + 40) = v11;
  v12 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView];
  v13 = objc_msgSend(v12, sel_bottomAnchor);
  v14 = objc_msgSend(v1, sel_bottomAnchor);
  v15 = objc_msgSend(v13, sel_constraintLessThanOrEqualToAnchor_constant_, v14, 0.0);

  *(_QWORD *)(v4 + 48) = v15;
  v16 = objc_msgSend(v12, sel_trailingAnchor);
  v17 = objc_msgSend(v1, sel_trailingAnchor);
  v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v17, -1.0);

  *(_QWORD *)(v4 + 56) = v18;
  v51 = v4;
  sub_1A9CE83E8();
  v19 = objc_msgSend((id)objc_opt_self(), sel_currentTraitCollection);
  v20 = objc_msgSend(v19, sel_preferredContentSizeCategory);
  LOBYTE(v18) = sub_1A9CE879C();

  if ((v18 & 1) != 0)
  {
    v21 = objc_msgSend(v12, sel_topAnchor);
    v22 = objc_msgSend(v5, sel_bottomAnchor);
    v23 = objc_msgSend(v21, sel_constraintGreaterThanOrEqualToAnchor_constant_, v22, 0.0);

    v24 = objc_msgSend(v12, sel_leadingAnchor);
    v25 = objc_msgSend(v1, sel_leadingAnchor);
    v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v27 = (id)sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v27, 2))
      {
LABEL_6:
        sub_1A9CBF89C();
        sub_1A9CE83E8();
        v27 = v23;
        MEMORY[0x1AF41EFF4]();
        if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_7:
          sub_1A9CE8418();
          sub_1A9CE83E8();
          v28 = v26;
          MEMORY[0x1AF41EFF4]();
          if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1A9CE83F4();
          sub_1A9CE8418();
          sub_1A9CE83E8();
          goto LABEL_22;
        }
LABEL_26:
        sub_1A9CE83F4();
        goto LABEL_7;
      }
    }
    else
    {
      v27 = *(id *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!__OFADD__(v27, 2))
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_26;
  }
  v29 = objc_msgSend(v5, sel_bottomAnchor);
  v30 = objc_msgSend(v1, sel_bottomAnchor);
  v49 = objc_msgSend(v29, sel_constraintLessThanOrEqualToAnchor_constant_, v30, 0.0);

  v31 = objc_msgSend(v5, sel_centerYAnchor);
  v32 = objc_msgSend(v1, sel_centerYAnchor);
  v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  v34 = objc_msgSend(v12, sel_topAnchor);
  v35 = objc_msgSend(v1, sel_topAnchor);
  v36 = objc_msgSend(v34, sel_constraintGreaterThanOrEqualToAnchor_constant_, v35, 0.0);

  v37 = objc_msgSend(v12, sel_centerYAnchor);
  v38 = objc_msgSend(v1, sel_centerYAnchor);
  v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

  v40 = objc_msgSend(v12, sel_leadingAnchor);
  v41 = objc_msgSend(v5, sel_trailingAnchor);
  v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_constant_, v41, 16.0);

  if (!(v4 >> 62))
  {
    if (!__OFADD__(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10), 5))
      goto LABEL_12;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v48 = sub_1A9CE8AC0();
  swift_bridgeObjectRelease();
  if (__OFADD__(v48, 5))
    goto LABEL_29;
LABEL_12:
  sub_1A9CBF89C();
  sub_1A9CE83E8();
  v37 = v49;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_30:
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v28 = v33;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v27 = v36;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v43 = v39;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v44 = v42;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();

LABEL_22:
  v45 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  swift_bridgeObjectRetain();
  v46 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v45, sel_activateConstraints_, v46);

  *(_QWORD *)&v1[v50] = v51;
  return swift_bridgeObjectRelease();
}

void sub_1A9BBF29C(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Class v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  char v41;
  int v42;

  v2 = v1;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((unsigned __int8 *)a1 + 32);
  v8 = *((unsigned __int16 *)a1 + 20);
  v9 = a1[6];
  v11 = (void *)*((_QWORD *)a1 + 7);
  v10 = (void *)*((_QWORD *)a1 + 8);
  v12 = (void *)*((_QWORD *)a1 + 9);
  v13 = *((unsigned __int8 *)a1 + 80);
  v15 = *((_QWORD *)a1 + 11);
  v14 = *((_QWORD *)a1 + 12);
  v16 = (double *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel);
  v38 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 8);
  v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 16);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 32);
  v36 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 24);
  v35 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 40);
  v19 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 56);
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 48);
  v33 = *(_OWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_viewModel + 64);
  *v16 = v3;
  *((_QWORD *)v16 + 1) = v4;
  *((_QWORD *)v16 + 2) = v5;
  *((_QWORD *)v16 + 3) = v6;
  v42 = v7;
  *((_QWORD *)v16 + 4) = v7;
  *((_QWORD *)v16 + 5) = v8;
  v16[6] = v9;
  *((_QWORD *)v16 + 7) = v11;
  *((_QWORD *)v16 + 8) = v10;
  *((_QWORD *)v16 + 9) = v12;
  *((_QWORD *)v16 + 10) = v13;
  v41 = v13;
  v31 = v14;
  v32 = v15;
  *((_QWORD *)v16 + 11) = v15;
  *((_QWORD *)v16 + 12) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11;
  v40 = v10;
  v39 = v12;
  sub_1A9BC0944(v17, v38, v37, v36, v18, v35, v34, v19, (void *)v33, *((void **)&v33 + 1));
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
  v21 = objc_retain(*(id *)(v20
                          + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel));
  v22 = (void *)sub_1A9CE82B0();
  objc_msgSend(v21, sel_setText_, v22);

  v23 = objc_retain(*(id *)(v20
                          + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel));
  if (v6)
    v24 = (void *)sub_1A9CE82B0();
  else
    v24 = 0;
  objc_msgSend(v23, sel_setText_, v24);

  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_iconView);
  v26 = *(void **)(v25
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView);
  v27 = sub_1A9BBE268(v42);
  objc_msgSend(v26, sel_setImage_, v27);

  if ((v41 & 1) != 0)
  {
    v28 = 0;
  }
  else
  {
    if (v42)
      v29 = v40;
    else
      v29 = v39;
    v28 = v29;
  }
  objc_msgSend(v26, sel_setTintColor_, v28);

  v30 = *(void **)(v25
                 + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint);
  if (v30)
  {
    objc_msgSend(v30, sel_setConstant_, v9);
    sub_1A9BBF528(v32, v31);
  }
  else
  {
    __break(1u);
  }
}

void sub_1A9BBF528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;

  if (a2)
  {
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
    v4 = *(void **)(v3
                  + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel);
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    v5 = v4;
    v6 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setAccessibilityIdentifier_, v6);

    v7 = *(void **)(v3
                  + OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel);
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    v8 = v7;
    v10 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setAccessibilityIdentifier_, v10);

  }
  else
  {
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI23ConfirmationFeatureView_labelsView);
    objc_msgSend(*(id *)(v9+ OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel), sel_setAccessibilityIdentifier_, 0);
    objc_msgSend(*(id *)(v9+ OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel), sel_setAccessibilityIdentifier_, 0);
  }
}

id sub_1A9BBF6C4(uint64_t a1)
{
  return sub_1A9BC0290(a1, type metadata accessor for ConfirmationFeatureView);
}

uint64_t type metadata accessor for ConfirmationFeatureView()
{
  return objc_opt_self();
}

void sub_1A9BBF770(uint64_t a1, uint64_t a2)
{
  sub_1A9BBF528(a1, a2);
}

char *sub_1A9BBF790()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD v26[6];
  objc_super v27;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint] = 0;
  v1 = *MEMORY[0x1E0DC4B58];
  v2 = *MEMORY[0x1E0DC4918];
  v3 = (void *)objc_opt_self();
  v4 = v0;
  v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v2);
  v6 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_compatibleWithTraitCollection_, v1, v5);

  v7 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v6);
  v8 = (void *)sub_1A9CE82B0();
  v9 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v8, v7);

  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v9);
  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView] = v10;
  v11 = v10;
  objc_msgSend(v11, sel_setContentMode_, 4);

  v27.receiver = v4;
  v27.super_class = (Class)type metadata accessor for ConfirmationIconView();
  v12 = (char *)objc_msgSendSuper2(&v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v13 = *(void **)&v12[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView];
  v14 = v12;
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v14, sel_addSubview_, v13);
  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_systemGray6Color);
  v17 = objc_msgSend(v15, sel_systemGray4Color);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v26[4] = sub_1A9BC0924;
  v26[5] = v18;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 1107296256;
  v26[2] = sub_1A9C21C90;
  v26[3] = &block_descriptor_0;
  v20 = _Block_copy(v26);
  v21 = v16;
  v22 = v17;
  v23 = objc_msgSend(v19, sel_initWithDynamicProvider_, v20);
  _Block_release(v20);

  swift_release();
  objc_msgSend(v14, sel_setBackgroundColor_, v23);

  v24 = (id)*MEMORY[0x1E0CD2A68];
  sub_1A9CE87B4();

  sub_1A9BBFB4C();
  return v14;
}

void sub_1A9BBFB4C()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolView];
  v2 = objc_msgSend(v1, sel_centerYAnchor);
  v3 = objc_msgSend(v0, sel_centerYAnchor);
  v4 = objc_msgSend(v2, sel_constraintEqualToAnchor_, v3);

  v5 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint;
  v6 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E20ConfirmationIconView_symbolYConstraint] = v4;

  sub_1A9BB7420();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A9CED8F0;
  v8 = objc_msgSend(v0, sel_heightAnchor);
  v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 44.0);

  *(_QWORD *)(v7 + 32) = v9;
  v10 = objc_msgSend(v0, sel_widthAnchor);
  v11 = objc_msgSend(v10, sel_constraintEqualToConstant_, 44.0);

  *(_QWORD *)(v7 + 40) = v11;
  v12 = objc_msgSend(v1, sel_centerXAnchor);
  v13 = objc_msgSend(v0, sel_centerXAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(_QWORD *)(v7 + 48) = v14;
  v15 = *(void **)&v0[v5];
  if (v15)
  {
    *(_QWORD *)(v7 + 56) = v15;
    sub_1A9CE83E8();
    v16 = (void *)objc_opt_self();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
    v17 = v15;
    v18 = (id)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_activateConstraints_, v18);

  }
  else
  {
    __break(1u);
  }
}

id sub_1A9BBFD9C()
{
  return sub_1A9BC0290(0, type metadata accessor for ConfirmationIconView);
}

uint64_t type metadata accessor for ConfirmationIconView()
{
  return objc_opt_self();
}

char *sub_1A9BBFE04()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t inited;
  void *v22;
  void *v23;
  char *v24;
  id v25;
  id v26;
  char *v27;
  id v28;
  unint64_t v29;
  void *v30;
  void *v31;
  Swift::OpaquePointer v33;
  objc_super v34;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel;
  v3 = (void *)*MEMORY[0x1E0DC4A88];
  v4 = *MEMORY[0x1E0DC1448];
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v6 = v1;
  v7 = v3;
  v8 = objc_msgSend(v5, sel_init);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v9 = v8;
  v10 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v7, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v9, sel_setFont_, v10);

  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v9, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v9, sel_setLineBreakMode_, 0);
  objc_msgSend(v9, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v1[v2] = v9;
  v11 = (void *)*MEMORY[0x1E0DC4AB8];
  v12 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v13 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v14 = v11;
  v15 = v12;
  v16 = objc_msgSend(v13, sel_init);
  v17 = v16;
  if (v15)
    objc_msgSend(v16, sel_setTextColor_, v15);
  v18 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel;
  v19 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v14, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v17, sel_setFont_, v19);

  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v17, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v17, sel_setLineBreakMode_, 0);
  objc_msgSend(v17, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v6[v18] = v17;
  v34.receiver = v6;
  v34.super_class = (Class)type metadata accessor for ConfirmationFeatureLabelsView();
  v20 = (char *)objc_msgSendSuper2(&v34, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1A9BB7420();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEDE30;
  v22 = *(void **)&v20[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel];
  *(_QWORD *)(inited + 32) = v22;
  v23 = *(void **)&v20[OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel];
  *(_QWORD *)(inited + 40) = v23;
  v33._rawValue = (void *)inited;
  sub_1A9CE83E8();
  v24 = v20;
  v25 = v22;
  v26 = v23;
  UIView.addSubviews(_:useAutoLayout:)(v33, 1);
  swift_bridgeObjectRelease();

  v27 = v24;
  v28 = objc_msgSend(v27, sel_subviews);
  sub_1A9B94A18(0, &qword_1EEB47F90);
  v29 = sub_1A9CE83DC();

  UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v29, 1.0, 0.0, 0.0, 0.0, 0.0);
  swift_bridgeObjectRelease();
  v30 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v31 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_activateConstraints_, v31);

  return v27;
}

void sub_1A9BC0258()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1A9BC0280()
{
  return sub_1A9BC0290(0, type metadata accessor for ConfirmationFeatureLabelsView);
}

id sub_1A9BC0290(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for ConfirmationFeatureLabelsView()
{
  return objc_opt_self();
}

uint64_t destroy for ConfirmationFeatureViewModel(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(void **)(a2 + 64);
  v7 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v5;
  v10 = v6;
  v11 = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(void **)(a2 + 56);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 64);
  v8 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 72);
  v11 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ConfirmationFeatureViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  v7 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeatureViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeatureViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeatureViewModel()
{
  return &type metadata for ConfirmationFeatureViewModel;
}

void sub_1A9BC0650()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_titleLabel;
  v3 = (void *)*MEMORY[0x1E0DC4A88];
  v4 = *MEMORY[0x1E0DC1448];
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v6 = v3;
  v7 = objc_msgSend(v5, sel_init);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v8 = v7;
  v9 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v6, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v8, sel_setFont_, v9);

  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v8, sel_setLineBreakMode_, 0);
  objc_msgSend(v8, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v1[v2] = v8;
  v10 = (void *)*MEMORY[0x1E0DC4AB8];
  v11 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v13 = v10;
  v14 = v11;
  v15 = objc_msgSend(v12, sel_init);
  v16 = v15;
  if (v14)
    objc_msgSend(v15, sel_setTextColor_, v14);
  v17 = OBJC_IVAR____TtC13SleepHealthUIP33_3DB6600DA0668F5E054B253ECFD47B8E29ConfirmationFeatureLabelsView_detailLabel;
  v18 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v13, 0, 0, 0, 0, 0, 0, v4, 0);
  objc_msgSend(v16, sel_setFont_, v18);

  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v16, sel_setLineBreakMode_, 0);
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v1[v17] = v16;
  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9BC08F8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1A9BC0924(void *a1)
{
  uint64_t v1;

  return sub_1A9C21834(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1A9BC0944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, void *a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1A9BC09A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43050)
  {
    sub_1A9B92F8C();
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43050);
  }
}

uint64_t sub_1A9BC09F8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BC0A1C(void *a1, void *a2)
{
  uint64_t v2;

  sub_1A9BBE668(a1, a2, v2);
}

void destroy for ConfirmationFeatureViewModel.IconViewModel(id *a1)
{

}

uint64_t initializeWithCopy for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 32);
  v11 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeatureViewModel.IconViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeatureViewModel.IconViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeatureViewModel.IconViewModel()
{
  return &type metadata for ConfirmationFeatureViewModel.IconViewModel;
}

id Result<>.init(summaries:error:)(uint64_t a1, id a2)
{
  id v2;
  uint64_t v5;

  v2 = a2;
  if (a1)
  {

    return (id)a1;
  }
  else if (!a2)
  {
    type metadata accessor for HKError(0);
    sub_1A9BC0CD8(MEMORY[0x1E0DEE9D8]);
    sub_1A9BC0DFC();
    sub_1A9CE61C8();
    return (id)v5;
  }
  return v2;
}

unint64_t sub_1A9BC0CD8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A9BC0E44();
  v2 = sub_1A9CE8AE4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1A9BC0F10(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_1A9BC0EAC(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1A9BAF740(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1A9BC0DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB434A8;
  if (!qword_1EEB434A8)
  {
    type metadata accessor for HKError(255);
    result = MEMORY[0x1AF420284](&unk_1A9CEC328, v1);
    atomic_store(result, (unint64_t *)&qword_1EEB434A8);
  }
  return result;
}

void sub_1A9BC0E44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43F38)
  {
    v0 = sub_1A9CE8AF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43F38);
  }
}

unint64_t sub_1A9BC0EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9CE8C4C();
  sub_1A9CE831C();
  v4 = sub_1A9CE8C7C();
  return sub_1A9BC0FBC(a1, a2, v4);
}

uint64_t sub_1A9BC0F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BC0F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1A9BC0F54()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB43F40)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB43F40);
  }
}

unint64_t sub_1A9BC0FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1A9CE8BB0() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1A9CE8BB0() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1A9CE8BB0() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

_QWORD *initializeBufferWithCopyOfBuffer for LockScreenBedtimeView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void destroy for LockScreenBedtimeView(uint64_t a1)
{

}

_QWORD *assignWithCopy for LockScreenBedtimeView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for LockScreenBedtimeView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = a2[1];
  v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for LockScreenBedtimeView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LockScreenBedtimeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenBedtimeView()
{
  return &type metadata for LockScreenBedtimeView;
}

uint64_t sub_1A9BC1234()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BC1244(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  v3 = a2;
  sub_1A9CE70F8();
  v5 = v4;
  sub_1A9CE7DC4();
  sub_1A9BC132C();
  sub_1A9CE7B78();

  return swift_release();
}

uint64_t sub_1A9BC1324(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BC1244(a1, *(void **)(v1 + 8));
}

unint64_t sub_1A9BC132C()
{
  unint64_t result;

  result = qword_1EEB44598;
  if (!qword_1EEB44598)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEDFC4, &type metadata for AlarmButton);
    atomic_store(result, (unint64_t *)&qword_1EEB44598);
  }
  return result;
}

uint64_t destroy for AlarmButton(uint64_t a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for AlarmButton(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlarmButton(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AlarmButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmButton()
{
  return &type metadata for AlarmButton;
}

uint64_t sub_1A9BC1528()
{
  return sub_1A9BC2784(&qword_1EEB445A0, (uint64_t (*)(uint64_t))sub_1A9BC155C, (uint64_t (*)(void))sub_1A9BC132C, sub_1A9BC15B8);
}

void sub_1A9BC155C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445A8)
  {
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445A8);
  }
}

uint64_t sub_1A9BC15B8()
{
  return sub_1A9B92B9C(&qword_1EEB44280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
}

uint64_t sub_1A9BC15D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BC15E4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v57 = a5;
  v56 = sub_1A9CE71AC();
  MEMORY[0x1E0C80A78](v56, v9);
  v11 = (_OWORD *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9BC2320();
  v53 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BC2A54(0);
  v50 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BC2B74(0);
  v54 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v51 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_allocObject();
  v55 = a1;
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = a2;
  *(_BYTE *)(v24 + 32) = a3;
  *(_QWORD *)(v24 + 40) = a4;
  v58 = a1;
  v59 = a2;
  v60 = a3;
  v49 = a3;
  v61 = a4;
  sub_1A9BC2380();
  sub_1A9BC26DC();
  v52 = a2;
  v48 = a4;
  swift_retain();
  sub_1A9CE7E00();
  v62 = a3;
  v63 = a4;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DE8();
  v25 = v64;
  v26 = v65;
  LOBYTE(a1) = v66;
  v27 = sub_1A9CE7FEC();
  v29 = v28;
  v30 = v53;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v16, v53);
  v31 = &v20[*(int *)(v50 + 36)];
  *(_QWORD *)v31 = v25;
  *((_QWORD *)v31 + 1) = v26;
  v31[16] = a1;
  *((_QWORD *)v31 + 3) = v27;
  *((_QWORD *)v31 + 4) = v29;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v30);
  v32 = (char *)v11 + *(int *)(v56 + 20);
  v33 = *MEMORY[0x1E0CDB0C0];
  v34 = sub_1A9CE73B0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v32, v33, v34);
  __asm { FMOV            V0.2D, #24.0 }
  *v11 = _Q0;
  v40 = (uint64_t)v51;
  v41 = (uint64_t)&v51[*(int *)(v54 + 36)];
  v42 = MEMORY[0x1E0CDA088];
  sub_1A9BA6F90((uint64_t)v11, v41, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA088]);
  sub_1A9BC2B90();
  *(_WORD *)(v41 + *(int *)(v43 + 36)) = 256;
  sub_1A9BA6F90((uint64_t)v20, v40, (uint64_t (*)(_QWORD))sub_1A9BC2A54);
  sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))v42);
  sub_1A9B97190((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1A9BC2A54);
  v44 = swift_allocObject();
  v45 = v52;
  *(_QWORD *)(v44 + 16) = v55;
  *(_QWORD *)(v44 + 24) = v45;
  *(_BYTE *)(v44 + 32) = v49;
  *(_QWORD *)(v44 + 40) = v48;
  sub_1A9BC2784(&qword_1EEB446A8, (uint64_t (*)(uint64_t))sub_1A9BC2B74, sub_1A9BC2CC0, sub_1A9BC2D1C);
  v46 = v45;
  swift_retain();
  sub_1A9CE7B3C();
  swift_release();
  return sub_1A9B97190(v40, (uint64_t (*)(_QWORD))sub_1A9BC2B74);
}

uint64_t sub_1A9BC1990(uint64_t a1, void *a2)
{
  id v3;

  swift_getKeyPath();
  swift_getKeyPath();
  v3 = a2;
  return sub_1A9CE6E70();
}

uint64_t sub_1A9BC19FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t KeyPath;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  _BYTE v97[12];
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;

  v98 = a3;
  v112 = a5;
  v8 = sub_1A9CE7884();
  v110 = *(_QWORD *)(v8 - 8);
  v111 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v109 = &v97[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC2614();
  v101 = v11;
  v99 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v97[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC2600(0);
  v100 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v97[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC25EC(0);
  v102 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v97[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC2584(0);
  v104 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = &v97[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC2570(0);
  v105 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = &v97[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC24F4();
  v106 = v31;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = &v97[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC2478();
  v107 = v35;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = &v97[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BC23FC();
  v108 = v39;
  MEMORY[0x1E0C80A78](v39, v40);
  v103 = &v97[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v117 = a1;
  v118 = a2;
  v119 = v98;
  v120 = a4;
  v113 = a1;
  v114 = a2;
  v115 = v98;
  v116 = a4;
  sub_1A9BAB7F0(0);
  sub_1A9BAB8B0();
  sub_1A9CE7D64();
  LOBYTE(a1) = sub_1A9CE7740();
  sub_1A9CE6F24();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v50 = v99;
  v51 = v101;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(v18, v14, v101);
  v52 = &v18[*(int *)(v100 + 36)];
  *v52 = a1;
  *((_QWORD *)v52 + 1) = v43;
  *((_QWORD *)v52 + 2) = v45;
  *((_QWORD *)v52 + 3) = v47;
  *((_QWORD *)v52 + 4) = v49;
  v52[40] = 0;
  (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v14, v51);
  LOBYTE(v14) = sub_1A9CE774C();
  sub_1A9CE6F24();
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_1A9BA6F90((uint64_t)v18, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1A9BC2600);
  v61 = &v22[*(int *)(v102 + 36)];
  *v61 = (_BYTE)v14;
  *((_QWORD *)v61 + 1) = v54;
  *((_QWORD *)v61 + 2) = v56;
  *((_QWORD *)v61 + 3) = v58;
  *((_QWORD *)v61 + 4) = v60;
  v61[40] = 0;
  sub_1A9B97190((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BC2600);
  LOBYTE(v14) = sub_1A9CE7758();
  sub_1A9CE6F24();
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v69 = v68;
  sub_1A9BA6F90((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(_QWORD))sub_1A9BC25EC);
  v70 = &v26[*(int *)(v104 + 36)];
  *v70 = (_BYTE)v14;
  *((_QWORD *)v70 + 1) = v63;
  *((_QWORD *)v70 + 2) = v65;
  *((_QWORD *)v70 + 3) = v67;
  *((_QWORD *)v70 + 4) = v69;
  v70[40] = 0;
  sub_1A9B97190((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1A9BC25EC);
  LOBYTE(v14) = sub_1A9CE7770();
  sub_1A9CE6F24();
  v72 = v71;
  v74 = v73;
  v76 = v75;
  v78 = v77;
  sub_1A9BA6F90((uint64_t)v26, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_1A9BC2584);
  v79 = &v30[*(int *)(v105 + 36)];
  *v79 = (_BYTE)v14;
  *((_QWORD *)v79 + 1) = v72;
  *((_QWORD *)v79 + 2) = v74;
  *((_QWORD *)v79 + 3) = v76;
  *((_QWORD *)v79 + 4) = v78;
  v79[40] = 0;
  sub_1A9B97190((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1A9BC2584);
  sub_1A9CE7890();
  v81 = v109;
  v80 = v110;
  v82 = v111;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v110 + 104))(v109, *MEMORY[0x1E0CDD6D8], v111);
  v83 = sub_1A9CE78A8();
  (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v81, v82);
  swift_release();
  KeyPath = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v30, (uint64_t)v34, (uint64_t (*)(_QWORD))sub_1A9BC2570);
  v85 = (uint64_t *)&v34[*(int *)(v106 + 36)];
  *v85 = KeyPath;
  v85[1] = v83;
  sub_1A9B97190((uint64_t)v30, (uint64_t (*)(_QWORD))sub_1A9BC2570);
  v86 = sub_1A9CE7CA4();
  v87 = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v34, (uint64_t)v38, (uint64_t (*)(_QWORD))sub_1A9BC24F4);
  v88 = (uint64_t *)&v38[*(int *)(v107 + 36)];
  *v88 = v87;
  v88[1] = v86;
  sub_1A9B97190((uint64_t)v34, (uint64_t (*)(_QWORD))sub_1A9BC24F4);
  v89 = swift_getKeyPath();
  v90 = v103;
  sub_1A9BA6F90((uint64_t)v38, (uint64_t)v103, (uint64_t (*)(_QWORD))sub_1A9BC2478);
  v91 = &v90[*(int *)(v108 + 36)];
  *(_QWORD *)v91 = v89;
  *((_QWORD *)v91 + 1) = 1;
  v91[16] = 0;
  sub_1A9B97190((uint64_t)v38, (uint64_t (*)(_QWORD))sub_1A9BC2478);
  v92 = swift_getKeyPath();
  v93 = v112;
  sub_1A9BA6F90((uint64_t)v90, v112, (uint64_t (*)(_QWORD))sub_1A9BC23FC);
  sub_1A9BC2380();
  v95 = (uint64_t *)(v93 + *(int *)(v94 + 36));
  *v95 = v92;
  v95[1] = 0x3FE0000000000000;
  return sub_1A9B97190((uint64_t)v90, (uint64_t (*)(_QWORD))sub_1A9BC23FC);
}

uint64_t sub_1A9BC2030@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;

  v35 = a2;
  sub_1A9B92F34(0, &qword_1EEB43D38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t *)((char *)&v32 - v5);
  v34 = sub_1A9CE7D40();
  v7 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - v13;
  sub_1A9BAB7F0(0);
  v16 = v15;
  result = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (uint64_t *)((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (v21)
  {
    v22 = v21 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    sub_1A9BC3120(v22, (uint64_t)v14, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v24 = type metadata accessor for Alarm();
    LODWORD(v22) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v14, 1, v24);
    sub_1A9BC3170((uint64_t)v14, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, v23);
    if ((_DWORD)v22 == 1)
      v25 = 4096;
    else
      v25 = 4097;
    v36 = v25;
    Symbol.systemName.getter();
    v26 = sub_1A9CE7D28();
    v27 = v34;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CDF7D0], v34);
    KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v6 + *(int *)(v33 + 28), v10, v27);
    *v6 = KeyPath;
    v29 = (uint64_t)v20 + *(int *)(v16 + 36);
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8];
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68];
    sub_1A9BC3120((uint64_t)v6, v29, &qword_1EEB43D38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    *v20 = v26;
    swift_retain();
    sub_1A9BC3170((uint64_t)v6, &qword_1EEB43D38, v30, v31);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v27);
    swift_release();
    return sub_1A9BA0D6C((uint64_t)v20, v35, (uint64_t (*)(_QWORD))sub_1A9BAB7F0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9BC2310@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BC15E4(*(_QWORD *)v1, *(void **)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1A9BC2320()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445B0)
  {
    sub_1A9BC2380();
    sub_1A9BC26DC();
    v0 = sub_1A9CE7E24();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445B0);
  }
}

void sub_1A9BC2380()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445B8)
  {
    sub_1A9BC23FC();
    sub_1A9B94CA0(255, &qword_1EEB44610, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445B8);
  }
}

void sub_1A9BC23FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445C0)
  {
    sub_1A9BC2478();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445C0);
  }
}

void sub_1A9BC2478()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445C8)
  {
    sub_1A9BC24F4();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445C8);
  }
}

void sub_1A9BC24F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445D0)
  {
    sub_1A9BC2570(255);
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445D0);
  }
}

void sub_1A9BC2570(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB445D8, sub_1A9BC2584);
}

void sub_1A9BC2584(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB445E0, sub_1A9BC25EC);
}

void sub_1A9BC2598(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BC25EC(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB445E8, sub_1A9BC2600);
}

void sub_1A9BC2600(uint64_t a1)
{
  sub_1A9BC2598(a1, &qword_1EEB445F0, (void (*)(uint64_t))sub_1A9BC2614);
}

void sub_1A9BC2614()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB445F8)
  {
    sub_1A9BAB7F0(255);
    sub_1A9BAB8B0();
    v0 = sub_1A9CE7D70();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB445F8);
  }
}

uint64_t sub_1A9BC2690(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255, a2, a3, MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BC26DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44618;
  if (!qword_1EEB44618)
  {
    sub_1A9BC2380();
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB44620, (uint64_t (*)(uint64_t))sub_1A9BC23FC, sub_1A9BC27F4, (uint64_t (*)(void))sub_1A9BC29F4);
    v3[1] = sub_1A9BC2690(&qword_1EEB44668, (uint64_t)&qword_1EEB44610, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1A9B94CA0);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44618);
  }
  return result;
}

uint64_t sub_1A9BC2784(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BC27F4()
{
  return sub_1A9BC2784(&qword_1EEB44628, (uint64_t (*)(uint64_t))sub_1A9BC2478, sub_1A9BC2818, (uint64_t (*)(void))sub_1A9BC2994);
}

uint64_t sub_1A9BC2818()
{
  return sub_1A9BC2784(&qword_1EEB44630, (uint64_t (*)(uint64_t))sub_1A9BC24F4, sub_1A9BC283C, (uint64_t (*)(void))sub_1A9BC2934);
}

uint64_t sub_1A9BC283C()
{
  return sub_1A9BC2874(&qword_1EEB44638, (uint64_t (*)(uint64_t))sub_1A9BC2570, sub_1A9BC2858);
}

uint64_t sub_1A9BC2858()
{
  return sub_1A9BC2874(&qword_1EEB44640, (uint64_t (*)(uint64_t))sub_1A9BC2584, sub_1A9BC28E0);
}

uint64_t sub_1A9BC2874(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BC28E0()
{
  return sub_1A9BC2874(&qword_1EEB44648, (uint64_t (*)(uint64_t))sub_1A9BC25EC, sub_1A9BC28FC);
}

uint64_t sub_1A9BC28FC()
{
  return sub_1A9BC2874(&qword_1EEB44650, (uint64_t (*)(uint64_t))sub_1A9BC2600, sub_1A9BC2918);
}

uint64_t sub_1A9BC2918()
{
  return sub_1A9B92B9C(&qword_1EEB44658, (uint64_t (*)(uint64_t))sub_1A9BC2614, MEMORY[0x1E0CDF8C8]);
}

unint64_t sub_1A9BC2934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB43E00;
  if (!qword_1EEB43E00)
  {
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB43E00);
  }
  return result;
}

unint64_t sub_1A9BC2994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED263350;
  if (!qword_1ED263350)
  {
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED263350);
  }
  return result;
}

unint64_t sub_1A9BC29F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB44660;
  if (!qword_1EEB44660)
  {
    sub_1A9BA3F70(255, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB44660);
  }
  return result;
}

void sub_1A9BC2A54(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB44670, (void (*)(uint64_t))sub_1A9BC2320, (void (*)(uint64_t))sub_1A9BC2AD8);
}

void sub_1A9BC2A70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_1A9CE7164();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1A9BC2AD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44678)
  {
    sub_1A9BC2B30();
    v0 = sub_1A9CE74D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44678);
  }
}

unint64_t sub_1A9BC2B30()
{
  unint64_t result;

  result = qword_1EEB44680;
  if (!qword_1EEB44680)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE1F0, &type metadata for AlarmButtonBlur);
    atomic_store(result, (unint64_t *)&qword_1EEB44680);
  }
  return result;
}

void sub_1A9BC2B74(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB44688, sub_1A9BC2A54, (void (*)(uint64_t))sub_1A9BC2B90);
}

void sub_1A9BC2B90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44690)
  {
    sub_1A9CE71AC();
    sub_1A9B92B9C(&qword_1EEB44698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1A9CE6F90();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44690);
  }
}

uint64_t sub_1A9BC2C0C()
{
  uint64_t v0;

  return sub_1A9BC1990(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A9BC2C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BC19FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BC2C5C()
{
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  return sub_1A9CE7DDC();
}

uint64_t sub_1A9BC2CC0()
{
  return sub_1A9BC2784(&qword_1EEB446B0, (uint64_t (*)(uint64_t))sub_1A9BC2A54, sub_1A9BC2CE4, sub_1A9BC2D00);
}

uint64_t sub_1A9BC2CE4()
{
  return sub_1A9B92B9C(&qword_1EEB446B8, (uint64_t (*)(uint64_t))sub_1A9BC2320, MEMORY[0x1E0CDFA58]);
}

uint64_t sub_1A9BC2D00()
{
  return sub_1A9B92B9C(&qword_1EEB446C0, (uint64_t (*)(uint64_t))sub_1A9BC2AD8, MEMORY[0x1E0CDB838]);
}

uint64_t sub_1A9BC2D1C()
{
  return sub_1A9B92B9C(&qword_1EEB446C8, (uint64_t (*)(uint64_t))sub_1A9BC2B90, MEMORY[0x1E0CD89F0]);
}

void sub_1A9BC2D38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  _QWORD v24[6];

  v9 = objc_msgSend(a1, sel_viewWithTag_, 1);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(a1, sel_contentView);
    objc_msgSend(v11, sel_bounds);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;

    objc_msgSend(v10, sel_setFrame_, v13, v15, v17, v19);
    v20 = (void *)objc_opt_self();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v10;
    *(_QWORD *)(v21 + 24) = a3;
    *(_QWORD *)(v21 + 32) = a4;
    *(_BYTE *)(v21 + 40) = a5 & 1;
    v24[4] = sub_1A9BC36FC;
    v24[5] = v21;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 1107296256;
    v24[2] = sub_1A9C0A74C;
    v24[3] = &block_descriptor_1;
    v22 = _Block_copy(v24);
    swift_retain();
    swift_retain();
    v23 = v10;
    swift_release();
    objc_msgSend(v20, sel_animateWithDuration_animations_, v22, 0.2);
    _Block_release(v22);

  }
}

id sub_1A9BC2EC8(void *a1)
{
  double v2;
  uint64_t v4;

  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446D8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDFDB8]);
  MEMORY[0x1AF41EB14](&v4);
  v2 = 0.2;
  if (!(_BYTE)v4)
    v2 = 0.0;
  return objc_msgSend(a1, sel_setAlpha_, v2);
}

void sub_1A9BC2F4C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9BC2D38(a1, a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
}

uint64_t sub_1A9BC2F68()
{
  return sub_1A9CE744C();
}

uint64_t sub_1A9BC2FA8()
{
  sub_1A9BC3684();
  return sub_1A9CE74AC();
}

uint64_t sub_1A9BC2FF8()
{
  sub_1A9BC3684();
  return sub_1A9CE7458();
}

void sub_1A9BC3048()
{
  sub_1A9BC3684();
  sub_1A9CE74A0();
  __break(1u);
}

void sub_1A9BC306C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1A9BC31AC(*(_QWORD *)(v1 + 24));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A9BC30A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BC2030(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1A9BC30CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A9CE729C();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BC30F4()
{
  return sub_1A9CE72A8();
}

uint64_t sub_1A9BC3120(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_1A9B92F34(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1A9BC3170(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  sub_1A9B92F34(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1A9BC31AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - v4;
  v6 = type metadata accessor for Alarm();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (!v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  v12 = v11 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
  swift_beginAccess();
  sub_1A9BC3120(v12, (uint64_t)v5, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    sub_1A9BA0D6C((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Alarm);
    v14 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    if (v14)
    {
      v15 = v14;
      v16 = (void *)sub_1A9CE6258();
      v17 = objc_msgSend(v15, sel_formatDateAsTimeStyle_, v16);

      if (v17)
      {
        sub_1A9CE82E0();

        sub_1A9B97190((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Alarm);
        return;
      }
      goto LABEL_11;
    }
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  sub_1A9BC3170((uint64_t)v5, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v13 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
}

uint64_t destroy for AlarmButtonBlur()
{
  swift_release();
  return swift_release();
}

uint64_t _s13SleepHealthUI15AlarmButtonBlurVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AlarmButtonBlur(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AlarmButtonBlur(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmButtonBlur(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmButtonBlur(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmButtonBlur()
{
  return &type metadata for AlarmButtonBlur;
}

uint64_t sub_1A9BC360C()
{
  sub_1A9BC2B74(255);
  sub_1A9BC2784(&qword_1EEB446A8, (uint64_t (*)(uint64_t))sub_1A9BC2B74, sub_1A9BC2CC0, sub_1A9BC2D1C);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BC3678()
{
  return MEMORY[0x1E0CE0788];
}

unint64_t sub_1A9BC3684()
{
  unint64_t result;

  result = qword_1EEB446D0;
  if (!qword_1EEB446D0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE160, &type metadata for AlarmButtonBlur);
    atomic_store(result, (unint64_t *)&qword_1EEB446D0);
  }
  return result;
}

uint64_t sub_1A9BC36C8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

id sub_1A9BC36FC()
{
  uint64_t v0;

  return sub_1A9BC2EC8(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void sub_1A9BC3724()
{
  id v0;
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  id v22;
  id v23;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F58]), sel_init);
  objc_msgSend(v0, sel_setAutoresizingMask_, 18);
  v1 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v1, sel_setAllowsHitTesting_, 0);

  objc_msgSend(v0, sel_setUserInteractionEnabled_, 0);
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1A9CEDF40;
  v3 = objc_msgSend((id)objc_opt_self(), sel_effectWithBlurRadius_, 30.0);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_QWORD *)(v2 + 32) = v3;
  v4 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  v5 = objc_msgSend((id)objc_opt_self(), sel_effectCompositingColor_withMode_alpha_, v4, 1010, 0.12);

  if (!v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(_QWORD *)(v2 + 40) = v5;
  v6 = (void *)objc_opt_self();
  v7 = (void *)sub_1A9CE82B0();
  v8 = objc_msgSend(v6, sel_kitImageNamed_, v7);

  if (v8)
  {
    v9 = (void *)objc_opt_self();
    v10 = objc_msgSend(v9, sel_colorEffectLuminanceMap_blendingAmount_, v8, 0.7);

    *(_QWORD *)(v2 + 48) = v10;
    *(_QWORD *)(v2 + 56) = objc_msgSend(v9, sel_colorEffectSaturate_, 2.8);
    *(_QWORD *)(v2 + 64) = objc_msgSend(v9, sel_colorEffectBrightness_, -0.13);
    sub_1A9CE83E8();
    sub_1A9BC3B08();
    v11 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v0, sel_setBackgroundEffects_, v11);

    v12 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v12, sel_bounds);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, v14, v16, v18, v20);
    objc_msgSend(v21, sel_setAutoresizingMask_, 18);
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.03125, 0.03125, 0.03125, 1.0);
    objc_msgSend(v21, sel_setBackgroundColor_, v22);

    objc_msgSend(v21, sel_setAlpha_, 0.0);
    objc_msgSend(v21, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v21, sel_setTag_, 1);
    v23 = objc_msgSend(v0, sel_contentView);
    objc_msgSend(v23, sel_addSubview_, v21);

    return;
  }
LABEL_7:
  __break(1u);
}

unint64_t sub_1A9BC3B08()
{
  unint64_t result;

  result = qword_1EEB446E0;
  if (!qword_1EEB446E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB446E0);
  }
  return result;
}

uint64_t SleepActivityConfigurationSectionLayout.hash(into:)()
{
  return sub_1A9CE8C58();
}

BOOL static SleepActivityConfigurationSectionLayout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepActivityConfigurationSectionLayout.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

unint64_t sub_1A9BC3BCC()
{
  unint64_t result;

  result = qword_1EEB446E8;
  if (!qword_1EEB446E8)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepActivityConfigurationSectionLayout, &type metadata for SleepActivityConfigurationSectionLayout);
    atomic_store(result, (unint64_t *)&qword_1EEB446E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepStage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepActivityConfigurationSectionLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A9BC3CEC + 4 * byte_1A9CEE245[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A9BC3D20 + 4 * byte_1A9CEE240[v4]))();
}

uint64_t sub_1A9BC3D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC3D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BC3D30);
  return result;
}

uint64_t sub_1A9BC3D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BC3D44);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A9BC3D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC3D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepActivityConfigurationSectionLayout()
{
  return &type metadata for SleepActivityConfigurationSectionLayout;
}

void sub_1A9BC3D6C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  id v3;

  v2 = *v1;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior), sel_isDeviceSupported);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v3 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

void sub_1A9BC42B4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1A9CE8B80();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t type metadata accessor for ConfirmationOnboardingSection()
{
  uint64_t result;

  result = qword_1EEB44700;
  if (!qword_1EEB44700)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BC4334()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A9BC4370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  ValueMetadata *v68;
  unint64_t v69;
  _QWORD *v70;

  v2 = v1;
  v63 = sub_1A9CE6318();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v4);
  v62 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE6840();
  v65 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v64 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0DEE9D8];
  v70 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v10 = (id *)(a1 + 40);
  swift_beginAccess();
  objc_msgSend(*(id *)(a1 + 40), sel_sleepDurationGoal);
  v12 = v11;
  v13 = 0;
  if (v11 > 0.0)
  {
    objc_msgSend(*v10, sel_sleepDurationGoal);
    v13 = v14;
  }
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v15 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = 0x7065656C53;
  *(_QWORD *)(v15 + 56) = 0xE500000000000000;
  *(_QWORD *)(v15 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v15 + 72) = 0xEA0000000000676ELL;
  *(_QWORD *)&v67 = v15;
  sub_1A9BB35E8((uint64_t)&unk_1E55D22B8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v17 = sub_1A9CE8280();
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  v68 = &type metadata for ConfirmationGoalItem;
  v69 = sub_1A9BC6390();
  v20 = swift_allocObject();
  *(_QWORD *)&v67 = v20;
  *(_QWORD *)(v20 + 16) = v13;
  *(_BYTE *)(v20 + 24) = v12 <= 0.0;
  *(_QWORD *)(v20 + 32) = v17;
  *(_QWORD *)(v20 + 40) = v19;
  v21 = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v21 = sub_1A9CADE80(0, v21[2] + 1, 1, v21);
    v70 = v21;
  }
  v23 = v21[2];
  v22 = v21[3];
  if (v23 >= v22 >> 1)
    v70 = sub_1A9CADE80((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
  v24 = v68;
  v25 = v69;
  v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v67, (uint64_t)v68);
  v27 = &v60;
  v28 = MEMORY[0x1E0C80A78](v26, v26);
  v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v31 + 16))(v30, v28);
  sub_1A9BC63F8(v23, (uint64_t)v30, (uint64_t *)&v70, (uint64_t)v24, v25);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v67);
  v32 = (__int128 *)objc_msgSend(*v10, sel_occurrences);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  v33 = sub_1A9CE83DC();

  *(_QWORD *)&v67 = v9;
  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0)
      LOBYTE(v32) = v33;
    else
      LOBYTE(v32) = v33 & 0xF8;
    swift_bridgeObjectRetain();
    v34 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    v66 = a1;
    if (v34)
    {
LABEL_9:
      if (v34 < 1)
      {
        __break(1u);
        goto LABEL_50;
      }
      for (i = 0; i != v34; ++i)
      {
        if ((v33 & 0xC000000000000001) != 0)
          v36 = (ValueMetadata *)MEMORY[0x1AF41F600](i, v33);
        else
          v36 = (ValueMetadata *)*(id *)(v33 + 8 * i + 32);
        v24 = v36;
        if ((-[ValueMetadata isSingleDayOverride](v36, sel_isSingleDayOverride) & 1) != 0)
        {

        }
        else
        {
          sub_1A9CE89F4();
          v27 = *(uint64_t **)(v67 + 16);
          sub_1A9CE8A24();
          sub_1A9CE8A30();
          sub_1A9CE8A00();
        }
      }
      swift_bridgeObjectRelease();
      v33 = v67;
      a1 = v66;
      v9 = MEMORY[0x1E0DEE9D8];
      if ((v67 & 0x8000000000000000) != 0)
        goto LABEL_34;
      goto LABEL_25;
    }
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    v66 = a1;
    if (v34)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v33 = MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v33 & 0x4000000000000000) != 0)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    v37 = sub_1A9CE8AC0();
    swift_release();
    if (!v37)
      goto LABEL_35;
    goto LABEL_27;
  }
  v37 = *(_QWORD *)(v33 + 16);
  if (!v37)
  {
LABEL_35:
    swift_release();
    v32 = (__int128 *)MEMORY[0x1E0DEE9D8];
    goto LABEL_36;
  }
LABEL_27:
  *(_QWORD *)&v67 = v9;
  v32 = &v67;
  sub_1A9CE8A18();
  if (v37 < 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    v33 = (uint64_t)sub_1A9CADE80(0, *(_QWORD *)(v33 + 16) + 1, 1, (_QWORD *)v33);
    goto LABEL_38;
  }
  v38 = 0;
  do
  {
    if ((v33 & 0xC000000000000001) != 0)
      MEMORY[0x1AF41F600](v38, v33);
    else
      v39 = *(id *)(v33 + 8 * v38 + 32);
    ++v38;
    sub_1A9CE89F4();
    sub_1A9CE8A24();
    sub_1A9CE8A30();
    sub_1A9CE8A00();
  }
  while (v37 != v38);
  v32 = (__int128 *)v67;
  swift_release();
LABEL_36:
  v40 = sub_1A9BC4BDC((uint64_t)v32);
  swift_bridgeObjectRelease();
  sub_1A9BB38A4(v40);
  v41 = (_QWORD *)swift_retain_n();
  LOBYTE(v32) = sub_1A9BC4CD4(v41, 0);
  v42 = sub_1A9BC4CD4((_QWORD *)a1, 1);
  v33 = (uint64_t)v70;
  v24 = &type metadata for ConfirmationFeaturesItem;
  if ((v42 & 1) == 0)
    goto LABEL_41;
  LOBYTE(v27) = 1;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_51;
LABEL_38:
  v43 = v27 & ~(_BYTE)v32;
  v45 = *(_QWORD *)(v33 + 16);
  v44 = *(_QWORD *)(v33 + 24);
  if (v45 >= v44 >> 1)
    v33 = (uint64_t)sub_1A9CADE80((_QWORD *)(v44 > 1), v45 + 1, 1, (_QWORD *)v33);
  v68 = v24;
  v69 = sub_1A9BC64C4();
  *(_QWORD *)&v67 = a1;
  BYTE8(v67) = 1;
  BYTE9(v67) = v43;
  *(_QWORD *)(v33 + 16) = v45 + 1;
  sub_1A9B949B8(&v67, v33 + 40 * v45 + 32);
  v70 = (_QWORD *)v33;
LABEL_41:
  v46 = sub_1A9BC4CD4((_QWORD *)a1, 0);
  v60 = v2;
  if ((v46 & 1) != 0)
  {
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = (uint64_t)sub_1A9CADE80(0, *(_QWORD *)(v33 + 16) + 1, 1, (_QWORD *)v33);
    v48 = *(_QWORD *)(v33 + 16);
    v47 = *(_QWORD *)(v33 + 24);
    v49 = a1;
    if (v48 >= v47 >> 1)
      v33 = (uint64_t)sub_1A9CADE80((_QWORD *)(v47 > 1), v48 + 1, 1, (_QWORD *)v33);
    v50 = v6;
    v68 = v24;
    v69 = sub_1A9BC64C4();
    *(_QWORD *)&v67 = v49;
    WORD4(v67) = 256;
    *(_QWORD *)(v33 + 16) = v48 + 1;
    sub_1A9B949B8(&v67, v33 + 40 * v48 + 32);
    v70 = (_QWORD *)v33;
  }
  else
  {
    v50 = v6;
  }
  swift_bridgeObjectRetain();
  v51 = v62;
  sub_1A9CE630C();
  sub_1A9CE62F4();
  v52 = *(void (**)(char *, uint64_t))(v61 + 8);
  v53 = v63;
  v52(v51, v63);
  v54 = v64;
  sub_1A9CE6834();
  sub_1A9BC6470();
  v55 = v65;
  v56 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_1A9CEB520;
  (*(void (**)(unint64_t, char *, uint64_t))(v55 + 16))(v57 + v56, v54, v50);
  *(_QWORD *)&v67 = 0;
  *((_QWORD *)&v67 + 1) = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  strcpy((char *)&v67, "MutableArray<");
  HIWORD(v67) = -4864;
  sub_1A9CE630C();
  sub_1A9CE62F4();
  v52(v51, v53);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  v58 = sub_1A9CE684C();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v50);
  swift_bridgeObjectRelease();
  return v58;
}

uint64_t sub_1A9BC4BDC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  __int128 v10;
  ValueMetadata *v11;
  unint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1A9BE053C(0, v1, 0);
    v2 = v13;
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4;
      v13 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      v8 = v5;
      if (v6 >= v7 >> 1)
      {
        sub_1A9BE053C(v7 > 1, v6 + 1, 1);
        v2 = v13;
      }
      v11 = &type metadata for ConfirmationScheduleItem;
      v12 = sub_1A9BC6508();
      *(_QWORD *)&v10 = v8;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1A9B949B8(&v10, v2 + 40 * v6 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A9BC4CD4(_QWORD *a1, char a2)
{
  int v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  void *v36;
  void *v37;
  int v39;
  void *v40;
  void *v41;
  _BYTE v42[56];
  void *v43;
  void *v44;
  id v45;
  _BYTE v46[8];
  unsigned __int8 v47;
  void *v48;
  void *v49;
  id v50;

  if ((a2 & 1) != 0)
  {
    sub_1A9BC54B8((uint64_t)v46);
    v24 = v47;
    v25 = v48;
    v26 = v49;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 != 1)
    {
      sub_1A9BC5748((uint64_t)a1, (uint64_t)v42);
      v27 = v42[32];
      v28 = v43;
      v29 = v44;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        sub_1A9BC59B4((uint64_t)a1, (uint64_t)v46);
        v30 = v47;
        v31 = v48;
        v32 = v49;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30 != 1
          || (v33 = a1[14],
              v34 = a1[15],
              __swift_project_boxed_opaque_existential_1Tm(a1 + 11, v33),
              ((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 96))(v33, v34) & 1) == 0))
        {
          sub_1A9BC5C1C((uint64_t)a1, (uint64_t)v46);
          v35 = v47;
          v36 = v48;
          v37 = v49;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v35 & 1) == 0)
          {
            sub_1A9BC5F58((uint64_t)v46);
            v39 = v47;
            v40 = v48;
            v41 = v49;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v39 == 1)
              goto LABEL_8;
LABEL_17:
            v23 = 0;
            return v23 & 1;
          }
        }
      }
    }
LABEL_14:
    v23 = 1;
    return v23 & 1;
  }
  sub_1A9BC54B8((uint64_t)v46);
  v3 = v47;
  v4 = v48;
  v5 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3 != 1)
    goto LABEL_14;
  sub_1A9BC5748((uint64_t)a1, (uint64_t)v46);
  v6 = v47;
  v7 = v48;
  v8 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6 != 1)
    goto LABEL_14;
  sub_1A9BC59B4((uint64_t)a1, (uint64_t)v46);
  v9 = v47;
  v10 = v48;
  v11 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    v12 = a1[14];
    v13 = a1[15];
    __swift_project_boxed_opaque_existential_1Tm(a1 + 11, v12);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 96))(v12, v13) & 1) != 0)
      goto LABEL_14;
  }
  sub_1A9BC5C1C((uint64_t)a1, (uint64_t)v46);
  v14 = v47;
  v15 = v48;
  v16 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 != 1)
    goto LABEL_14;
  sub_1A9BC5F58((uint64_t)v46);
  v17 = v47;
  v18 = v48;
  v19 = v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    goto LABEL_17;
LABEL_8:
  v20 = a1 + 11;
  v22 = a1[14];
  v21 = a1[15];
  __swift_project_boxed_opaque_existential_1Tm(v20, v22);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 136))(v22, v21);
  return v23 & 1;
}

void sub_1A9BC50A0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A9BC50CC()
{
  sub_1A9CE6894();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9BC50E8()
{
  return type metadata accessor for ConfirmationOnboardingSection();
}

uint64_t sub_1A9BC50F0()
{
  type metadata accessor for ConfirmationListItemTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44750, (uint64_t (*)(uint64_t))type metadata accessor for ConfirmationListItemTableViewCell, (uint64_t)&unk_1A9CF545C);
  sub_1A9CE8604();
  type metadata accessor for ScheduleOccurrenceTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44758, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceTableViewCell, (uint64_t)&unk_1A9CF2D5C);
  sub_1A9CE8604();
  type metadata accessor for ConfirmationFeaturesTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44760, (uint64_t (*)(uint64_t))type metadata accessor for ConfirmationFeaturesTableViewCell, (uint64_t)&unk_1A9CF5D94);
  return sub_1A9CE8604();
}

uint64_t sub_1A9BC51B4()
{
  type metadata accessor for ConfirmationListItemTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44750, (uint64_t (*)(uint64_t))type metadata accessor for ConfirmationListItemTableViewCell, (uint64_t)&unk_1A9CF545C);
  return sub_1A9CE6774();
}

uint64_t sub_1A9BC5200()
{
  sub_1A9BC6B64();
  return sub_1A9CE82F8();
}

uint64_t sub_1A9BC5230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9BC525C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1A9BC5290())()
{
  return nullsub_1;
}

uint64_t sub_1A9BC52A0()
{
  type metadata accessor for ScheduleOccurrenceTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44758, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceTableViewCell, (uint64_t)&unk_1A9CF2D5C);
  return sub_1A9CE6774();
}

uint64_t sub_1A9BC52EC()
{
  id *v0;
  id v1;
  uint64_t v2;

  objc_msgSend(*v0, sel_weekdays);
  v1 = (id)HKSPIdentifierStringForWeekdays();
  v2 = sub_1A9CE82E0();

  return v2;
}

void sub_1A9BC5344(uint64_t a1@<X8>)
{
  void **v1;
  void *v3;
  id v4;
  __int128 v5[12];

  v3 = *v1;
  v4 = v3;
  static ScheduleOccurrenceViewModel.ViewStyle.sleepOnboardingReceiptStyle.getter((uint64_t)v5);
  ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v3, 0, 1, v5, a1);
}

uint64_t sub_1A9BC5390()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1A9CE8C4C();
  v2 = v1;
  sub_1A9CE8820();

  return sub_1A9CE8C7C();
}

void sub_1A9BC53DC()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1A9CE8820();

}

uint64_t sub_1A9BC5420()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1A9CE8C4C();
  v2 = v1;
  sub_1A9CE8820();

  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BC5468()
{
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2627A0);
  return sub_1A9CE8814() & 1;
}

uint64_t sub_1A9BC54B8@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  v3 = sub_1A9CE6168();
  v20 = v4;
  v21 = v3;

  v5 = (id)qword_1ED264F90;
  v6 = sub_1A9CE6168();
  v8 = v7;

  v9 = (void *)*MEMORY[0x1E0DC4B60];
  v10 = (void *)objc_opt_self();
  v11 = v9;
  v12 = objc_msgSend(v10, sel_hk_sleepKeyColor, 0xE000000000000000);
  v13 = objc_msgSend(v10, sel_tertiaryLabelColor);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v14 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = 0x7065656C53;
  *(_QWORD *)(v14 + 56) = 0xE500000000000000;
  *(_QWORD *)(v14 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v14 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2178);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v16 = sub_1A9CE8280();
  v18 = v17;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v18;
  return result;
}

uint64_t sub_1A9BC5748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v4 = (id)qword_1ED264F90;
  v18 = sub_1A9CE6168();
  v6 = v5;

  swift_beginAccess();
  LOBYTE(v4) = objc_msgSend(*(id *)(a1 + 48), sel_scheduledSleepMode, 0xE000000000000000);
  v7 = (void *)*MEMORY[0x1E0DC4B58];
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_hk_sleepKeyColor);
  v11 = objc_msgSend(v8, sel_tertiaryLabelColor);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v12 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0x7065656C53;
  *(_QWORD *)(v12 + 56) = 0xE500000000000000;
  *(_QWORD *)(v12 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v12 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D21B8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v14 = sub_1A9CE8280();
  v16 = v15;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = (_BYTE)v4;
  *(_WORD *)(a2 + 40) = -32512;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_BYTE *)(a2 + 80) = 1;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v16;
  return result;
}

uint64_t sub_1A9BC59B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v4 = (id)qword_1ED264F90;
  v18 = sub_1A9CE6168();
  v6 = v5;

  swift_beginAccess();
  LOBYTE(v4) = objc_msgSend(*(id *)(a1 + 48), sel_sleepTracking, 0xE000000000000000);
  v7 = (void *)*MEMORY[0x1E0DC4B58];
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_hk_sleepKeyColor);
  v11 = objc_msgSend(v8, sel_tertiaryLabelColor);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v12 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0x7065656C53;
  *(_QWORD *)(v12 + 56) = 0xE500000000000000;
  *(_QWORD *)(v12 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v12 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D21F8);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v14 = sub_1A9CE8280();
  v16 = v15;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = (_BYTE)v4;
  *(_WORD *)(a2 + 40) = -32766;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v16;
  return result;
}

uint64_t sub_1A9BC5C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id *v4;
  double v5;
  double v6;
  objc_class *v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  BOOL v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_super v34;

  v4 = (id *)(a1 + 40);
  swift_beginAccess();
  objc_msgSend(*(id *)(a1 + 40), sel_windDownTime);
  v6 = v5;
  v7 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v34.receiver = v8;
  v34.super_class = v7;
  v9 = objc_msgSendSuper2(&v34, sel_init);
  v10 = objc_msgSend(v9, sel_stringFromTimeInterval_, v6);

  if (v10)
  {
    v11 = sub_1A9CE82E0();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xE000000000000000;
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v14 = (id)qword_1ED264F90;
  v15 = sub_1A9CE6168();
  v32 = v16;
  v33 = v15;

  objc_msgSend(*v4, sel_windDownTime, 0xE000000000000000);
  if (v17 <= 0.0)
  {
    swift_bridgeObjectRelease();
    v31 = 0;
    v13 = 0;
  }
  else
  {
    v31 = v11;
  }
  objc_msgSend(*v4, sel_windDownTime);
  v19 = v18 > 0.0;
  v20 = (void *)*MEMORY[0x1E0DC4B60];
  v21 = (void *)objc_opt_self();
  v22 = v20;
  v23 = objc_msgSend(v21, sel_hk_sleepKeyColor);
  v24 = objc_msgSend(v21, sel_tertiaryLabelColor);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v25 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v25 + 40) = v26;
  *(_QWORD *)(v25 + 48) = 0x7065656C53;
  *(_QWORD *)(v25 + 56) = 0xE500000000000000;
  *(_QWORD *)(v25 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v25 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2238);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v27 = sub_1A9CE8280();
  v29 = v28;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a2 = v33;
  *(_QWORD *)(a2 + 8) = v32;
  *(_QWORD *)(a2 + 16) = v31;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v19;
  *(_WORD *)(a2 + 40) = 0x8000;
  *(_QWORD *)(a2 + 48) = 0xC000000000000000;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 72) = v24;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v27;
  *(_QWORD *)(a2 + 96) = v29;
  return result;
}

uint64_t sub_1A9BC5F58@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  swift_beginAccess();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  v3 = sub_1A9CE6168();
  v20 = v4;
  v21 = v3;

  swift_bridgeObjectRelease();
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v5 = (id)qword_1ED264F90;
  v6 = sub_1A9CE6168();
  v8 = v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (void *)*MEMORY[0x1E0DC4B60];
  v10 = (void *)objc_opt_self();
  v11 = v9;
  v12 = objc_msgSend(v10, sel_hk_sleepKeyColor, 0xE000000000000000);
  v13 = objc_msgSend(v10, sel_tertiaryLabelColor);
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v14 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = 0x7065656C53;
  *(_QWORD *)(v14 + 56) = 0xE500000000000000;
  *(_QWORD *)(v14 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v14 + 72) = 0xEA0000000000676ELL;
  sub_1A9BB35E8((uint64_t)&unk_1E55D2278);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v16 = sub_1A9CE8280();
  v18 = v17;
  swift_bridgeObjectRelease();
  result = swift_arrayDestroy();
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = -32510;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v18;
  return result;
}

uint64_t sub_1A9BC62A8()
{
  type metadata accessor for ConfirmationFeaturesTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44760, (uint64_t (*)(uint64_t))type metadata accessor for ConfirmationFeaturesTableViewCell, (uint64_t)&unk_1A9CF5D94);
  return sub_1A9CE6774();
}

uint64_t sub_1A9BC62F4()
{
  uint64_t v1;

  sub_1A9BC6B9C();
  v1 = sub_1A9CE82F8();
  sub_1A9CE8340();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_1A9BC6390()
{
  unint64_t result;

  result = qword_1EEB44768;
  if (!qword_1EEB44768)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE508, &type metadata for ConfirmationGoalItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44768);
  }
  return result;
}

uint64_t sub_1A9BC63D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A9BC63F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_1A9B949B8(&v12, v10 + 40 * a1 + 32);
}

void sub_1A9BC6470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44770)
  {
    sub_1A9CE6840();
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44770);
  }
}

unint64_t sub_1A9BC64C4()
{
  unint64_t result;

  result = qword_1EEB44778;
  if (!qword_1EEB44778)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE4D8, &type metadata for ConfirmationFeaturesItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44778);
  }
  return result;
}

unint64_t sub_1A9BC6508()
{
  unint64_t result;

  result = qword_1EEB44780;
  if (!qword_1EEB44780)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE4A8, &type metadata for ConfirmationScheduleItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44780);
  }
  return result;
}

uint64_t sub_1A9BC654C(uint64_t a1, char a2)
{
  objc_class *v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  if ((a2 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v6 = (id)qword_1ED264F90;
    v7 = sub_1A9CE6168();
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v4;
    v10.super_class = v3;
    v5 = objc_msgSendSuper2(&v10, sel_init);
    v6 = objc_msgSend(v5, sel_stringFromTimeInterval_, *(double *)&a1);

    if (!v6)
      return 0;
    v7 = sub_1A9CE82E0();
  }
  v8 = v7;

  return v8;
}

uint64_t sub_1A9BC6684(char a1)
{
  id v1;
  uint64_t v2;

  if ((a1 & 1) != 0)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
  }
  else if (qword_1ED2626A8 != -1)
  {
    swift_once();
  }
  v1 = (id)qword_1ED264F90;
  v2 = sub_1A9CE6168();

  return v2;
}

ValueMetadata *type metadata accessor for ConfirmationScheduleItem()
{
  return &type metadata for ConfirmationScheduleItem;
}

uint64_t destroy for ConfirmationGoalItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmationGoalItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationGoalItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConfirmationGoalItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationGoalItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationGoalItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationGoalItem()
{
  return &type metadata for ConfirmationGoalItem;
}

uint64_t destroy for ConfirmationFeaturesItem()
{
  return swift_release();
}

uint64_t _s13SleepHealthUI24ConfirmationFeaturesItemVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ConfirmationFeaturesItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ConfirmationFeaturesItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationFeaturesItem(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationFeaturesItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationFeaturesItem()
{
  return &type metadata for ConfirmationFeaturesItem;
}

unint64_t sub_1A9BC6AB4(uint64_t a1)
{
  unint64_t result;

  result = sub_1A9BC6AD8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A9BC6AD8()
{
  unint64_t result;

  result = qword_1EEB44788;
  if (!qword_1EEB44788)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE3DC, &type metadata for ConfirmationGoalItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44788);
  }
  return result;
}

unint64_t sub_1A9BC6B20()
{
  unint64_t result;

  result = qword_1EEB44790;
  if (!qword_1EEB44790)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEE430, &type metadata for ConfirmationScheduleItem);
    atomic_store(result, (unint64_t *)&qword_1EEB44790);
  }
  return result;
}

unint64_t sub_1A9BC6B64()
{
  unint64_t result;

  result = qword_1EEB44798;
  if (!qword_1EEB44798)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB44798);
  }
  return result;
}

unint64_t sub_1A9BC6B9C()
{
  unint64_t result;

  result = qword_1EEB447A0;
  if (!qword_1EEB447A0)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB447A0);
  }
  return result;
}

id sub_1A9BC6BD4()
{
  id result;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  result = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (result)
  {
    v1 = result;
    sub_1A9CDE824(MEMORY[0x1E0DEE9D8]);
    sub_1A9CE8868();
    v3 = v2;

    result = (id)swift_bridgeObjectRelease();
    qword_1EEB447A8 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t OneWeekDiagram.results.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BA6F90(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for OneWeekResults);
}

uint64_t OneWeekDiagram.init(results:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A9BA0D6C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for OneWeekResults);
}

uint64_t OneWeekDiagram.body.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v41 = type metadata accessor for WeekDiagram(0);
  v4 = MEMORY[0x1E0C80A78](v41, v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v40 - v8;
  sub_1A9BC6F80(0);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1 + *(int *)(type metadata accessor for OneWeekResults() + 36);
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(*(_QWORD *)v15 + 16);
  if (!v17)
  {
    v20 = 0;
    goto LABEL_11;
  }
  if (v17 == 1)
  {
    v18 = 0;
    v19 = 0.0;
  }
  else
  {
    v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
    v21 = (double *)(v16 + 72);
    v19 = 0.0;
    v22 = v17 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v23 = *(v21 - 4);
      v24 = *v21;
      v21 += 8;
      v19 = v19 + v23 + v24;
      v22 -= 2;
    }
    while (v22);
    if (v17 == v18)
      goto LABEL_10;
  }
  v25 = v17 - v18;
  v26 = (double *)(v16 + 32 * v18 + 40);
  do
  {
    v27 = *v26;
    v26 += 4;
    v19 = v19 + v27;
    --v25;
  }
  while (v25);
LABEL_10:
  v20 = v19 > 0.0;
LABEL_11:
  *a1 = v20;
  v28 = *(int *)(sub_1A9BC70B0() + 52);
  if (qword_1EEB42D50 != -1)
    swift_once();
  v29 = (void *)qword_1EEB48198;
  *(_QWORD *)v14 = swift_getKeyPath();
  v14[8] = 0;
  v30 = v29;
  v31 = sub_1A9CE6168();
  v33 = v32;

  swift_bridgeObjectRelease();
  *((_QWORD *)v14 + 2) = v31;
  *((_QWORD *)v14 + 3) = v33;
  v34 = *(int *)(v11 + 40);
  if (qword_1EEB42BC0 != -1)
    swift_once();
  v35 = &v14[v34];
  v36 = (uint64_t)&a1[v28];
  v37 = qword_1EEB447A8;
  sub_1A9BA6F90(v15, (uint64_t)v9, type metadata accessor for WeekResults);
  *(_QWORD *)&v9[*(int *)(v41 + 20)] = 59;
  sub_1A9BA6F90((uint64_t)v9, (uint64_t)v6, type metadata accessor for WeekDiagram);
  *(_QWORD *)v35 = v37;
  v35[8] = 0;
  sub_1A9BC704C();
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)&v35[*(int *)(v38 + 48)], type metadata accessor for WeekDiagram);
  sub_1A9BC7270((uint64_t)v9);
  sub_1A9BC7270((uint64_t)v6);
  return sub_1A9BA0D6C((uint64_t)v14, v36, (uint64_t (*)(_QWORD))sub_1A9BC6F80);
}

void sub_1A9BC6F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1EEB447B0)
  {
    sub_1A9BC6FF8();
    v3 = v2;
    v4 = sub_1A9B92B9C(&qword_1EEB447C8, (uint64_t (*)(uint64_t))sub_1A9BC6FF8, MEMORY[0x1E0CE0680]);
    v6 = type metadata accessor for DiagramHeader(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EEB447B0);
  }
}

void sub_1A9BC6FF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB447B8)
  {
    sub_1A9BC704C();
    v0 = sub_1A9CE8010();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB447B8);
  }
}

void sub_1A9BC704C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB447C0)
  {
    type metadata accessor for WeekDiagram(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB447C0);
  }
}

uint64_t sub_1A9BC70B0()
{
  uint64_t result;

  result = qword_1EEB447D0;
  if (!qword_1EEB447D0)
  {
    sub_1A9BC6F80(255);
    sub_1A9B92B9C(&qword_1EEB447D8, (uint64_t (*)(uint64_t))sub_1A9BC6F80, (uint64_t)&unk_1A9CF4900);
    type metadata accessor for OptionalContentGroup();
  }
  return result;
}

uint64_t sub_1A9BC7148@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1A9BC7D48();
  result = sub_1A9CE7368();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BC7194@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1A9BC7D48();
  result = sub_1A9CE7368();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BC71E0()
{
  sub_1A9BC7D48();
  return sub_1A9CE7374();
}

uint64_t sub_1A9BC7228()
{
  sub_1A9BC7D48();
  return sub_1A9CE7374();
}

uint64_t sub_1A9BC7270(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WeekDiagram(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BC72AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for OneWeekDiagram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);

  v4 = type metadata accessor for OneWeekResults();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = *(int *)(v4 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1A9CE6444();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v43 = v10;
    v44 = v11;
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = v6[7];
    v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    v14 = v6[8];
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    v16 = v6[9];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v20 = *(uint64_t *)((char *)a2 + v16);
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v19;
    v17[16] = v18[16];
    v21 = (int *)type metadata accessor for WeekResults(0);
    v22 = v21[6];
    v42 = &v17[v22];
    v23 = &v18[v22];
    v24 = sub_1A9CE5F64();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v26 = v13;
    v27 = v15;
    swift_bridgeObjectRetain();
    v25(v42, v23, v24);
    *(_QWORD *)&v17[v21[7]] = *(_QWORD *)&v18[v21[7]];
    v28 = v21[8];
    v29 = &v17[v28];
    v30 = &v18[v28];
    v29[8] = v30[8];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *(_QWORD *)&v17[v21[9]] = *(_QWORD *)&v18[v21[9]];
    v44(&v17[v21[10]], &v18[v21[10]], v43);
    v31 = v21[11];
    v32 = *(void **)&v18[v31];
    *(_QWORD *)&v17[v31] = v32;
    v33 = v21[12];
    v34 = *(void **)&v18[v33];
    *(_QWORD *)&v17[v33] = v34;
    v35 = v21[13];
    v36 = *(void **)&v18[v35];
    *(_QWORD *)&v17[v35] = v36;
    v37 = v32;
    v38 = v34;
    v39 = v36;
  }
  return a1;
}

void destroy for OneWeekDiagram(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for OneWeekResults();
  v3 = a1 + v2[6];
  v4 = sub_1A9CE6444();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);

  v6 = a1 + v2[9];
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v6 + v7[6];
  v9 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v5(v6 + v7[10], v4);

}

uint64_t initializeWithCopy for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (int *)type metadata accessor for OneWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v40 = v8;
  v41 = v9;
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  v10 = v4[7];
  v11 = *(void **)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = v4[8];
  v13 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  v14 = v4[9];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v18 = *(_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)v15 = v18;
  *(_QWORD *)(v15 + 8) = v17;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v19 = (int *)type metadata accessor for WeekResults(0);
  v20 = v19[6];
  v39 = v15 + v20;
  v21 = v16 + v20;
  v22 = sub_1A9CE5F64();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v24 = v11;
  v25 = v13;
  swift_bridgeObjectRetain();
  v23(v39, v21, v22);
  *(_QWORD *)(v15 + v19[7]) = *(_QWORD *)(v16 + v19[7]);
  v26 = v19[8];
  v27 = v15 + v26;
  v28 = v16 + v26;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v15 + v19[9]) = *(_QWORD *)(v16 + v19[9]);
  v41(v15 + v19[10], v16 + v19[10], v40);
  v29 = v19[11];
  v30 = *(void **)(v16 + v29);
  *(_QWORD *)(v15 + v29) = v30;
  v31 = v19[12];
  v32 = *(void **)(v16 + v31);
  *(_QWORD *)(v15 + v31) = v32;
  v33 = v19[13];
  v34 = *(void **)(v16 + v33);
  *(_QWORD *)(v15 + v33) = v34;
  v35 = v30;
  v36 = v32;
  v37 = v34;
  return a1;
}

_QWORD *assignWithCopy for OneWeekDiagram(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for OneWeekResults();
  v5 = v4[6];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1A9CE6444();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24);
  v9(v6, v7, v8);
  v10 = v4[7];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = v4[8];
  v15 = *(void **)((char *)a2 + v14);
  v16 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  v17 = v15;

  v18 = v4[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v20 + 1);
  v19[16] = v20[16];
  *((_QWORD *)v19 + 1) = v21;
  v22 = (int *)type metadata accessor for WeekResults(0);
  v23 = v22[6];
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = sub_1A9CE5F64();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  *(_QWORD *)&v19[v22[7]] = *(_QWORD *)&v20[v22[7]];
  v27 = v22[8];
  v28 = &v19[v27];
  v29 = &v20[v27];
  v30 = v29[8];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v30;
  *(_QWORD *)&v19[v22[9]] = *(_QWORD *)&v20[v22[9]];
  v9(&v19[v22[10]], &v20[v22[10]], v8);
  v31 = v22[11];
  v32 = *(void **)&v20[v31];
  v33 = *(void **)&v19[v31];
  *(_QWORD *)&v19[v31] = v32;
  v34 = v32;

  v35 = v22[12];
  v36 = *(void **)&v20[v35];
  v37 = *(void **)&v19[v35];
  *(_QWORD *)&v19[v35] = v36;
  v38 = v36;

  v39 = v22[13];
  v40 = *(void **)&v20[v39];
  v41 = *(void **)&v19[v39];
  *(_QWORD *)&v19[v39] = v40;
  v42 = v40;

  return a1;
}

uint64_t initializeWithTake for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (int *)type metadata accessor for OneWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  *(_QWORD *)(a1 + v4[7]) = *(_QWORD *)(a2 + v4[7]);
  *(_QWORD *)(a1 + v4[8]) = *(_QWORD *)(a2 + v4[8]);
  v10 = v4[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10 + 8);
  *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(a2 + v10 + 16);
  v14 = (int *)type metadata accessor for WeekResults(0);
  v15 = v14[6];
  v16 = v11 + v15;
  v17 = v12 + v15;
  v18 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(v11 + v14[7]) = *(_QWORD *)(v12 + v14[7]);
  v19 = v14[8];
  v20 = v11 + v19;
  v21 = v12 + v19;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v11 + v14[9]) = *(_QWORD *)(v12 + v14[9]);
  v9(v11 + v14[10], v12 + v14[10], v8);
  *(_QWORD *)(v11 + v14[11]) = *(_QWORD *)(v12 + v14[11]);
  *(_QWORD *)(v11 + v14[12]) = *(_QWORD *)(v12 + v14[12]);
  *(_QWORD *)(v11 + v14[13]) = *(_QWORD *)(v12 + v14[13]);
  return a1;
}

uint64_t assignWithTake for OneWeekDiagram(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for OneWeekResults();
  v5 = v4[6];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1A9CE6444();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40);
  v9(v6, v7, v8);
  v10 = v4[7];
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  v12 = v4[8];
  v13 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);

  v14 = v4[9];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (int *)type metadata accessor for WeekResults(0);
  v18 = v17[6];
  v19 = v15 + v18;
  v20 = v16 + v18;
  v21 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  *(_QWORD *)(v15 + v17[7]) = *(_QWORD *)(v16 + v17[7]);
  v22 = v17[8];
  v23 = v15 + v22;
  v24 = v16 + v22;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v15 + v17[9]) = *(_QWORD *)(v16 + v17[9]);
  v9(v15 + v17[10], v16 + v17[10], v8);
  v25 = v17[11];
  v26 = *(void **)(v15 + v25);
  *(_QWORD *)(v15 + v25) = *(_QWORD *)(v16 + v25);

  v27 = v17[12];
  v28 = *(void **)(v15 + v27);
  *(_QWORD *)(v15 + v27) = *(_QWORD *)(v16 + v27);

  v29 = v17[13];
  v30 = *(void **)(v15 + v29);
  *(_QWORD *)(v15 + v29) = *(_QWORD *)(v16 + v29);

  return a1;
}

uint64_t getEnumTagSinglePayload for OneWeekDiagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BC7BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OneWeekResults();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OneWeekDiagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BC7C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OneWeekResults();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OneWeekDiagram()
{
  uint64_t result;

  result = qword_1EEB44838;
  if (!qword_1EEB44838)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BC7CB4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OneWeekResults();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9BC7D1C()
{
  return sub_1A9B92B9C(&qword_1EEB44870, (uint64_t (*)(uint64_t))sub_1A9BC70B0, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
}

unint64_t sub_1A9BC7D48()
{
  unint64_t result;

  result = qword_1EEB44878;
  if (!qword_1EEB44878)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF7064, &type metadata for DiagramVariantKey);
    atomic_store(result, (unint64_t *)&qword_1EEB44878);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SleepDataUnavailable(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9BC7DD8 + 4 * byte_1A9CEE5E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9BC7E0C + 4 * asc_1A9CEE5E0[v4]))();
}

uint64_t sub_1A9BC7E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC7E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BC7E1CLL);
  return result;
}

uint64_t sub_1A9BC7E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BC7E30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9BC7E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC7E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepDataUnavailable()
{
  return &type metadata for SleepDataUnavailable;
}

uint64_t sub_1A9BC7E58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BC7E68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;

  v73 = a1;
  sub_1A9BC8428(0);
  v64 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BC8674();
  v62 = v5;
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v68 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v66 = (uint64_t)&v61 - v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v67 = (char *)&v61 - v13;
  sub_1A9BC86F0(0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v72 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v70 = (uint64_t)&v61 - v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v61 - v22;
  sub_1A9BC8788(0);
  v71 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v63 = (uint64_t *)((char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9BC88B8();
  MEMORY[0x1E0C80A78](v27, v28);
  v69 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v30 = (id)qword_1ED264F90;
  v31 = sub_1A9CE6168();
  v33 = v32;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v35 = sub_1A9CE78C0();
  v36 = swift_getKeyPath();
  v74 = v31;
  v75 = v33;
  v76 = 0;
  v77 = MEMORY[0x1E0DEE9D8];
  v78 = KeyPath;
  v79 = 1;
  v80 = v36;
  v81 = v35;
  sub_1A9CE7818();
  sub_1A9BC84BC();
  sub_1A9BC2784(&qword_1EEB44898, (uint64_t (*)(uint64_t))sub_1A9BC84BC, (uint64_t (*)(void))sub_1A9BC85AC, (uint64_t (*)(void))sub_1A9BC2934);
  sub_1A9CE7A88();
  sub_1A9BAA670(v31, v33, 0);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v37 = sub_1A9CE7CE0();
  v38 = swift_getKeyPath();
  v40 = v64;
  v39 = v65;
  v41 = (uint64_t)v67;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v67, v4, v65);
  v42 = (uint64_t *)(v41 + *(int *)(v62 + 36));
  *v42 = v38;
  v42[1] = v37;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v39);
  *(_QWORD *)v23 = sub_1A9CE7398();
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 0;
  sub_1A9BA759C(0, &qword_1EEB448F8, sub_1A9BC8714);
  v44 = &v23[*(int *)(v43 + 44)];
  v45 = v66;
  sub_1A9BA6F90(v41, v66, (uint64_t (*)(_QWORD))sub_1A9BC8674);
  v46 = v68;
  sub_1A9BA6F90(v45, v68, (uint64_t (*)(_QWORD))sub_1A9BC8674);
  *(_QWORD *)v44 = 0;
  v44[8] = 0;
  sub_1A9BC8774(0);
  v48 = v47;
  sub_1A9BA6F90(v46, (uint64_t)&v44[*(int *)(v47 + 48)], (uint64_t (*)(_QWORD))sub_1A9BC8674);
  v49 = &v44[*(int *)(v48 + 64)];
  *(_QWORD *)v49 = 0;
  v49[8] = 0;
  sub_1A9B97190(v45, (uint64_t (*)(_QWORD))sub_1A9BC8674);
  sub_1A9B97190(v46, (uint64_t (*)(_QWORD))sub_1A9BC8674);
  sub_1A9B97190(v41, (uint64_t (*)(_QWORD))sub_1A9BC8674);
  v50 = sub_1A9CE73F8();
  v51 = (uint64_t)v63;
  *v63 = v50;
  *(_QWORD *)(v51 + 8) = 0;
  *(_BYTE *)(v51 + 16) = 0;
  sub_1A9BA759C(0, &qword_1EEB44900, sub_1A9BC8830);
  v53 = v51 + *(int *)(v52 + 44);
  v54 = v70;
  sub_1A9BA6F90((uint64_t)v23, v70, (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  v55 = v72;
  sub_1A9BA6F90(v54, v72, (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  *(_QWORD *)v53 = 0;
  *(_BYTE *)(v53 + 8) = 0;
  sub_1A9BC8844(0);
  v57 = v56;
  sub_1A9BA6F90(v55, v53 + *(int *)(v56 + 48), (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  v58 = v53 + *(int *)(v57 + 64);
  *(_QWORD *)v58 = 0;
  *(_BYTE *)(v58 + 8) = 0;
  sub_1A9B97190(v54, (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  sub_1A9B97190(v55, (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  sub_1A9B97190((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1A9BC86F0);
  sub_1A9BC89C4();
  v59 = (uint64_t)v69;
  sub_1A9CE7B78();
  sub_1A9B97190(v51, (uint64_t (*)(_QWORD))sub_1A9BC8788);
  return sub_1A9BC89E0(v59, v73);
}

uint64_t sub_1A9BC8420@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9BC7E68(a1);
}

void sub_1A9BC8428(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EEB44880)
  {
    sub_1A9BC84BC();
    v5[0] = v2;
    v5[1] = sub_1A9BC2784(&qword_1EEB44898, (uint64_t (*)(uint64_t))sub_1A9BC84BC, (uint64_t (*)(void))sub_1A9BC85AC, (uint64_t (*)(void))sub_1A9BC2934);
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDDEE8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB44880);
  }
}

void sub_1A9BC84BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44888)
  {
    sub_1A9BC8538();
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44888);
  }
}

void sub_1A9BC8538()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44890)
  {
    sub_1A9B94CA0(255, &qword_1ED262998, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44890);
  }
}

unint64_t sub_1A9BC85AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB448A0;
  if (!qword_1EEB448A0)
  {
    sub_1A9BC8538();
    v2 = v1;
    v3 = sub_1A9BC8614();
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB448A0);
  }
  return result;
}

unint64_t sub_1A9BC8614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED262990;
  if (!qword_1ED262990)
  {
    sub_1A9B94CA0(255, &qword_1ED262998, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED262990);
  }
  return result;
}

void sub_1A9BC8674()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB448A8)
  {
    sub_1A9BC8428(255);
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB448A8);
  }
}

void sub_1A9BC86F0(uint64_t a1)
{
  sub_1A9BC87AC(a1, &qword_1EEB448B0, (uint64_t (*)(uint64_t))sub_1A9BC8714, &qword_1EEB448C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
}

void sub_1A9BC8714(uint64_t a1)
{
  sub_1A9BC8728(a1, &qword_1EEB448B8, sub_1A9BC8774);
}

void sub_1A9BC8728(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE8010();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BC8774(uint64_t a1)
{
  sub_1A9BC8858(a1, &qword_1EEB448C0, (void (*)(uint64_t))sub_1A9BC8674);
}

void sub_1A9BC8788(uint64_t a1)
{
  sub_1A9BC87AC(a1, &qword_1EEB448D0, (uint64_t (*)(uint64_t))sub_1A9BC8830, &qword_1EEB448E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFCA0]);
}

void sub_1A9BC87AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = sub_1A9B92B9C(a4, a3, MEMORY[0x1E0CE0680]);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void sub_1A9BC8830(uint64_t a1)
{
  sub_1A9BC8728(a1, &qword_1EEB448D8, sub_1A9BC8844);
}

void sub_1A9BC8844(uint64_t a1)
{
  sub_1A9BC8858(a1, &qword_1EEB448E0, sub_1A9BC86F0);
}

void sub_1A9BC8858(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void sub_1A9BC88B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB448F0)
  {
    sub_1A9BC8788(255);
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB448F0);
  }
}

uint64_t sub_1A9BC891C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE72CC();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BC8944@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1A9CE72CC();
  *a1 = result;
  return result;
}

uint64_t sub_1A9BC896C()
{
  return sub_1A9CE72D8();
}

uint64_t sub_1A9BC8990()
{
  return sub_1A9CE72D8();
}

uint64_t sub_1A9BC89C4()
{
  return sub_1A9B92B9C(&qword_1EEB44908, (uint64_t (*)(uint64_t))sub_1A9BC8788, MEMORY[0x1E0CDFCC0]);
}

uint64_t sub_1A9BC89E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BC88B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BC8A24()
{
  return sub_1A9BC2784(&qword_1EEB44910, (uint64_t (*)(uint64_t))sub_1A9BC88B8, sub_1A9BC89C4, sub_1A9BC15B8);
}

id sub_1A9BC8A58()
{
  id v0;
  void *v1;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  v1 = (void *)sub_1A9CE82B0();
  objc_msgSend(v0, sel_setSourceBundleIdentifier_, v1);

  result = objc_msgSend(v0, sel_resume);
  qword_1EEB57260 = (uint64_t)v0;
  return result;
}

uint64_t static String.sleepAccessibilityIdentifier(_:)()
{
  _QWORD v1[2];

  strcpy((char *)v1, "UIA.NanoSleep.");
  sub_1A9CE8340();
  return v1[0];
}

void static String.healthAccessibilityIdentifier(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  sub_1A9BC8ED8(a1, a2, 0x7065656C53, 0xE500000000000000);
}

void static String.healthAccessibilityIdentifierWithoutBase(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  sub_1A9BC8D08(a1, a2, 0x7065656C53, 0xE500000000000000);
}

SleepHealthUI::SleepAccessibilityCategory_optional __swiftcall SleepAccessibilityCategory.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  SleepHealthUI::SleepAccessibilityCategory_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A9CE8B20();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SleepAccessibilityCategory.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A9BC8BE0 + 4 * byte_1A9CEE6F0[*v0]))(0x696472616F626E4FLL, 0xEA0000000000676ELL);
}

uint64_t sub_1A9BC8BE0()
{
  return 0x736E6F6974704FLL;
}

uint64_t sub_1A9BC8BF8()
{
  return 0x656C756465686353;
}

unint64_t sub_1A9BC8C1C()
{
  return 0xD000000000000012;
}

void sub_1A9BC8C8C(char *a1)
{
  sub_1A9C30E68(*a1);
}

void sub_1A9BC8C98()
{
  char *v0;

  sub_1A9CA824C(0, *v0);
}

void sub_1A9BC8CA4(uint64_t a1)
{
  char *v1;

  sub_1A9CA8148(a1, *v1);
}

void sub_1A9BC8CAC(uint64_t a1)
{
  char *v1;

  sub_1A9CA824C(a1, *v1);
}

SleepHealthUI::SleepAccessibilityCategory_optional sub_1A9BC8CB4(Swift::String *a1)
{
  return SleepAccessibilityCategory.init(rawValue:)(*a1);
}

uint64_t sub_1A9BC8CC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SleepAccessibilityCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static String.sleepAccessibilityIdentifierWithCategory(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  sub_1A9BC8D08(a1, a2, 0x6F6E614E2E414955, 0xED00007065656C53);
}

void sub_1A9BC8D08(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  __asm { BR              X11 }
}

uint64_t sub_1A9BC8D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 48) = 0x736E6F6974704FLL;
  *(_QWORD *)(a1 + 56) = 0xE700000000000000;
  v1 = swift_bridgeObjectRetain();
  sub_1A9BB35E8(v1);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v2 = sub_1A9CE8280();
  swift_bridgeObjectRelease();
  return v2;
}

void static String.healthSleepApneaAccessibilityIdentifier(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  sub_1A9BC8ED8(a1, a2, 0x6E70417065656C53, 0xEA00000000006165);
}

void sub_1A9BC8ED8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v7 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a4;
  __asm { BR              X11 }
}

uint64_t sub_1A9BC8F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 64) = 0x736E6F6974704FLL;
  *(_QWORD *)(v0 + 72) = 0xE700000000000000;
  v1 = swift_bridgeObjectRetain();
  sub_1A9BB35E8(v1);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v2 = sub_1A9CE8280();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1A9BC90B0()
{
  unint64_t result;

  result = qword_1EEB44918;
  if (!qword_1EEB44918)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepAccessibilityCategory, &type metadata for SleepAccessibilityCategory);
    atomic_store(result, (unint64_t *)&qword_1EEB44918);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepAccessibilityCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepAccessibilityCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1A9BC91D0 + 4 * byte_1A9CEE70D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1A9BC9204 + 4 * byte_1A9CEE708[v4]))();
}

uint64_t sub_1A9BC9204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC920C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BC9214);
  return result;
}

uint64_t sub_1A9BC9220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BC9228);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1A9BC922C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BC9234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepAccessibilityCategory()
{
  return &type metadata for SleepAccessibilityCategory;
}

id SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  _BYTE *v7;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id result;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  objc_super v23;

  v7[OBJC_IVAR____TtC13SleepHealthUI27SleepTableWelcomeController_hasSystemMargins] = a7;
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v23.receiver = v7;
  v23.super_class = (Class)type metadata accessor for SleepTableWelcomeController();
  v13 = objc_msgSendSuper2(&v23, sel_initWithTitle_detailText_icon_adoptTableViewScrollView_, v11, v12, a5, 1);

  v14 = objc_allocWithZone(MEMORY[0x1E0DC3D48]);
  v15 = v13;
  v16 = objc_msgSend(v14, sel_initWithFrame_style_, a6, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v15, sel_setTableView_, v16);

  result = objc_msgSend(v15, sel_tableView);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = result;
  v19 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
  objc_msgSend(v18, sel_setBackgroundColor_, v19);

  result = objc_msgSend(v15, sel_tableView);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v20 = result;
  objc_msgSend(result, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  result = objc_msgSend(v15, sel_tableView);
  if (result)
  {
    v21 = result;
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 2.22507386e-308);
    objc_msgSend(v21, sel_setTableHeaderView_, v22);

    return v15;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SleepTableWelcomeController()
{
  return objc_opt_self();
}

void sub_1A9BC94A0()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v25;
  id v26;
  id v27;

  v1 = objc_msgSend(v0, sel_navigationController);
  if (!v1)
    return;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_view);

  if (!v3)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v3, sel_directionalLayoutMargins);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  if (*((_BYTE *)v0 + OBJC_IVAR____TtC13SleepHealthUI27SleepTableWelcomeController_hasSystemMargins) != 1)
    return;
  v12 = objc_msgSend(v0, sel_tableView);
  if (!v12)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  v13 = v12;
  objc_msgSend(v12, sel_directionalLayoutMargins);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  if (v15 != v5 || v17 != v7 || v19 != v9 || v21 != v11)
  {
    v25 = objc_msgSend(v0, sel_headerView);
    objc_msgSend(v25, sel_setDirectionalLayoutMargins_, v5, v7, v9, v11);

    v26 = objc_msgSend(v0, sel_tableView);
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, sel_setDirectionalLayoutMargins_, v5, v7, v9, v11);

      return;
    }
    goto LABEL_20;
  }
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return SleepTableWelcomeController.init(title:detailText:icon:tableViewStyle:hasSystemMargins:)(a1, a2, a3, a4, a5, a6, a7);
}

id SleepTableWelcomeController.__allocating_init(title:detailText:symbolName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v9 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    v10 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
LABEL_6:
  v12 = objc_msgSend(objc_allocWithZone(v6), sel_initWithTitle_detailText_symbolName_, v9, v10, v11);

  return v12;
}

void SleepTableWelcomeController.init(title:detailText:symbolName:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  objc_class *v5;
  objc_class *v6;
  void *v9;
  void *v10;
  id v11;

  v6 = v5;
  v9 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v10 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(objc_allocWithZone(v6), sel_initWithTitle_detailText_icon_, v9, v10, a5);

  return v11;
}

void SleepTableWelcomeController.init(title:detailText:icon:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepTableWelcomeController.__allocating_init(title:detailText:symbolName:adoptTableViewScrollView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  objc_class *v7;
  objc_class *v8;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v8 = v7;
  v12 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    v13 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v14 = 0;
    goto LABEL_6;
  }
  v13 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
LABEL_6:
  v15 = objc_msgSend(objc_allocWithZone(v8), sel_initWithTitle_detailText_symbolName_adoptTableViewScrollView_, v12, v13, v14, a7 & 1);

  return v15;
}

void SleepTableWelcomeController.init(title:detailText:symbolName:adoptTableViewScrollView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepTableWelcomeController.__allocating_init(title:detailText:icon:adoptTableViewScrollView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  objc_class *v6;
  objc_class *v7;
  void *v11;
  void *v12;
  id v13;

  v7 = v6;
  v11 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v7), sel_initWithTitle_detailText_icon_adoptTableViewScrollView_, v11, v12, a5, a6 & 1);

  return v13;
}

void SleepTableWelcomeController.init(title:detailText:icon:adoptTableViewScrollView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepTableWelcomeController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepTableWelcomeController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t dispatch thunk of TableViewAnimating.isAnimating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for SleepTableWelcomeController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepTableWelcomeController.__allocating_init(title:detailText:icon:tableViewStyle:hasSystemMargins:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

id sub_1A9BC9C0C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v1 = OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell____lazy_storage___timePicker);
  }
  else
  {
    v4 = v0;
    v5 = sub_1A9CDF60C();
    v7 = v6;
    v9 = v8;
    v10 = v5;
    v12 = v11 & 1;
    v13 = objc_allocWithZone((Class)type metadata accessor for TimeIntervalPickerView());
    v14 = sub_1A9C2FBD8(v10, v12, v7, v9);
    v15 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v14;
    v3 = v14;

    v2 = 0;
  }
  v16 = v2;
  return v3;
}

uint64_t sub_1A9BC9E30()
{
  sub_1A9CE8340();
  swift_getObjectType();
  sub_1A9BCA424();
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  sub_1A9CE8A60();
  return 0;
}

void sub_1A9BC9F00(void *a1, uint64_t a2, const char **a3)
{
  const char *v4;
  id v5;
  objc_super v6;

  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for TimePickerCollectionViewCell();
  v4 = *a3;
  v5 = v6.receiver;
  objc_msgSendSuper2(&v6, v4);
  sub_1A9BCA2E0();

}

id sub_1A9BC9F50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TimePickerCollectionViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1A9BC9FD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  return sub_1A9BCA29C(v3, a1);
}

uint64_t sub_1A9BCA028(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI28TimePickerCollectionViewCell_item;
  swift_beginAccess();
  sub_1A9BCA1C8(a1, v3);
  v4 = swift_endAccess();
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90))(v4);
  return sub_1A9BCA260(a1);
}

uint64_t (*sub_1A9BCA0AC(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9BCA0F4;
}

uint64_t sub_1A9BCA0F4(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1 + 24)) + 0x90))(result);
  return result;
}

uint64_t sub_1A9BCA13C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1A9BCA188(&qword_1EEB44988, (uint64_t)&unk_1A9CEE904);
  result = sub_1A9BCA188(&qword_1EEB44990, (uint64_t)&unk_1A9CEE8B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1A9BCA188(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TimePickerCollectionViewCell();
    result = MEMORY[0x1AF420284](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BCA1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BCA20C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1A9BCA20C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44998)
  {
    sub_1A9BB53B0();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44998);
  }
}

uint64_t sub_1A9BCA260(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BCA20C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BCA29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BCA20C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1A9BCA2E0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1A9CE6768();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  v11 = objc_msgSend(v0, sel_viewController);
  if (v11)
  {
    v12 = v11;
    sub_1A9CE86DC();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v7, v2);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v10, *MEMORY[0x1E0D2A970], v2);
  }
  v13 = (void *)sub_1A9CE675C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  objc_msgSend(v1, sel_setBackgroundColor_, v13);
  v14 = objc_msgSend(v1, sel_selectedBackgroundView);
  objc_msgSend(v14, sel_setBackgroundColor_, v13);

}

unint64_t sub_1A9BCA424()
{
  unint64_t result;

  result = qword_1EEB449A8;
  if (!qword_1EEB449A8)
  {
    type metadata accessor for TimePickerCollectionViewCell();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB449A8);
  }
  return result;
}

uint64_t sub_1A9BCA458(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = (int *)type metadata accessor for WeekResults(0);
    v9 = v8[6];
    v10 = v7 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_1A9CE5F64();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(_QWORD *)(v7 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    v14 = v8[8];
    v15 = v7 + v14;
    v16 = (uint64_t)a2 + v14;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    v17 = v8[10];
    v18 = v7 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = sub_1A9CE6444();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = v8[11];
    v22 = *(void **)((char *)a2 + v21);
    *(_QWORD *)(v7 + v21) = v22;
    v23 = v8[12];
    v24 = *(void **)((char *)a2 + v23);
    *(_QWORD *)(v7 + v23) = v24;
    v25 = v8[13];
    v26 = *(void **)((char *)a2 + v25);
    *(_QWORD *)(v7 + v25) = v26;
    *(_QWORD *)(v7 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v27 = v22;
    v28 = v24;
    v29 = v26;
  }
  return v7;
}

uint64_t sub_1A9BCA5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v13 = v7[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v16 = v7[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = v7[11];
  v21 = *(void **)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v22 = v7[12];
  v23 = *(void **)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = v7[13];
  v25 = *(void **)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v26 = v21;
  v27 = v23;
  v28 = v25;
  return a1;
}

uint64_t sub_1A9BCA6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v12 = v7[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v15;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v16 = v7[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = v7[11];
  v21 = *(void **)(a2 + v20);
  v22 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v23 = v21;

  v24 = v7[12];
  v25 = *(void **)(a2 + v24);
  v26 = *(void **)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v27 = v25;

  v28 = v7[13];
  v29 = *(void **)(a2 + v28);
  v30 = *(void **)(a1 + v28);
  *(_QWORD *)(a1 + v28) = v29;
  v31 = v29;

  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BCA848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v12 = v7[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v15 = v7[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BCA958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (int *)type metadata accessor for WeekResults(0);
  v7 = v6[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)(a2 + v6[7]);
  v11 = v6[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(a1 + v6[9]) = *(_QWORD *)(a2 + v6[9]);
  v14 = v6[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = v6[11];
  v19 = *(void **)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);

  v20 = v6[12];
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);

  v22 = v6[13];
  v23 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BCAA90()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BCAA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeekResults(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1A9BCAAD8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BCAAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeekResults(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WeekDiagram(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB44AC8);
}

uint64_t sub_1A9BCAB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BD13F8(a1, a2, a3, type metadata accessor for WeekResults);
}

uint64_t sub_1A9BCAB50()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_1A9BCAB60(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449B0);
}

id sub_1A9BCAB80(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449B8);
}

id sub_1A9BCABA0(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449C0);
}

id sub_1A9BCABC0(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449C8);
}

id sub_1A9BCABE0(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449D0);
}

id sub_1A9BCAC00(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449D8);
}

id sub_1A9BCAC20(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449E0);
}

id sub_1A9BCAC40(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449E8);
}

id sub_1A9BCAC60(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449F0);
}

id sub_1A9BCAC80(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB449F8);
}

id sub_1A9BCACA0(uint64_t a1)
{
  return sub_1A9BCACE0(a1, (uint64_t)&unk_1E55D2400, (void (*)(uint64_t))sub_1A9BAE840, &qword_1EEB44A00);
}

id sub_1A9BCACC0(uint64_t a1)
{
  return sub_1A9BCACE0(a1, MEMORY[0x1E0DEE9D8], (void (*)(uint64_t))sub_1A9CDE824, &qword_1EEB44A08);
}

id sub_1A9BCACE0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), _QWORD *a4)
{
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  result = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (result)
  {
    v8 = result;
    a3(a2);
    sub_1A9CE8868();
    v10 = v9;

    result = (id)swift_bridgeObjectRelease();
    *a4 = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A9BCAD70(uint64_t a1)
{
  return sub_1A9BCAD94(a1, &qword_1EEB44A10);
}

uint64_t sub_1A9BCAD7C(uint64_t a1)
{
  return sub_1A9BCAD94(a1, &qword_1EEB44A18);
}

uint64_t sub_1A9BCAD88(uint64_t a1)
{
  return sub_1A9BCAD94(a1, &qword_1EEB44A20);
}

uint64_t sub_1A9BCAD94(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  sub_1A9CE7C68();
  v3 = sub_1A9CE7CC8();
  result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_1A9BCADD8(uint64_t a1)
{
  return sub_1A9BCADF0(a1, &qword_1EEB44A28);
}

uint64_t sub_1A9BCADE4(uint64_t a1)
{
  return sub_1A9BCADF0(a1, &qword_1EEB44A30);
}

uint64_t sub_1A9BCADF0(uint64_t a1, _QWORD *a2)
{
  if (qword_1ED262D40 != -1)
    swift_once();
  *a2 = qword_1ED262D68;
  return swift_retain();
}

uint64_t sub_1A9BCAE40(uint64_t a1)
{
  return sub_1A9BCAE78(0.388235294, 0.4, a1, &qword_1EEB44A38);
}

uint64_t sub_1A9BCAE5C(uint64_t a1)
{
  return sub_1A9BCAE78(0.57254902, 0.596078431, a1, &qword_1EEB44A40);
}

uint64_t sub_1A9BCAE78(double a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v7 = sub_1A9CE7C38();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v11 + 104))(v10, *MEMORY[0x1E0CDF3E0]);
  result = MEMORY[0x1AF41E91C](v10, a1, a1, a2, 1.0);
  *a4 = result;
  return result;
}

double sub_1A9BCAF14()
{
  uint64_t v0;
  double result;
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  if (qword_1EEB42BF8 != -1)
    swift_once();
  sub_1A9B94CA0(0, &qword_1ED263310, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A9CEB530;
  if (qword_1EEB42C00 != -1)
    swift_once();
  *(_QWORD *)(v0 + 32) = qword_1EEB449E0;
  if (qword_1EEB42C08 != -1)
    swift_once();
  *(_QWORD *)(v0 + 40) = qword_1EEB449E8;
  sub_1A9CE6F84();
  result = *(double *)&v2;
  xmmword_1EEB44A48 = v2;
  *(_OWORD *)&qword_1EEB44A58 = v3;
  qword_1EEB44A68 = v4;
  return result;
}

uint64_t sub_1A9BCB04C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A9B92AC0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A9BCB088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[133];
  _BYTE v80[154];
  char v81;
  _BYTE v82[7];
  _BYTE v83[7];
  char v84;
  int v85;
  __int16 v86;
  char v87;
  _QWORD v88[2];
  char v89;
  _BYTE v90[7];
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  char v95;
  _BYTE v96[7];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  char v103;
  _BYTE v104[7];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD v110[17];
  __int128 v111;
  __int128 v112;
  __int128 v113;

  v77 = a2;
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v75 - v5;
  sub_1A9BCC28C();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BCC414(0, &qword_1EEB44B18, v11);
  v13 = v12;
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v76 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v75 - v19;
  MEMORY[0x1E0C80A78](v18, v21);
  v78 = (uint64_t)&v75 - v22;
  *(_QWORD *)v10 = sub_1A9CE7404();
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  sub_1A9BCC718(0, &qword_1EEB44B98, &qword_1EEB44B28, (uint64_t (*)(uint64_t))sub_1A9BCC324);
  sub_1A9BCB7E8(a1, &v10[*(int *)(v23 + 44)]);
  if (qword_1EEB42D68 != -1)
    swift_once();
  v24 = *(int *)(type metadata accessor for WeekDiagram(0) + 20);
  v25 = &unk_1EEB42000;
  if ((*(_BYTE *)(a1 + v24) & 1) == 0)
  {
    if (qword_1EEB42EF8 != -1)
    {
      swift_once();
      v25 = (_QWORD *)&unk_1EEB42000;
    }
    if (v25[388] != -1)
      swift_once();
  }
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  sub_1A9BA6F90((uint64_t)v10, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1A9BCC28C);
  v26 = &v20[*(int *)(v13 + 36)];
  v27 = v112;
  *(_OWORD *)v26 = v111;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v113;
  sub_1A9B97190((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1A9BCC28C);
  sub_1A9BCED58((uint64_t)v20, v78, (uint64_t)&qword_1EEB44B18, (uint64_t)sub_1A9BCC28C, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  if ((*(_BYTE *)(a1 + v24) & 1) != 0)
  {
    sub_1A9BCEE0C((uint64_t)v88);
  }
  else
  {
    v28 = *(void **)(a1 + *(int *)(type metadata accessor for WeekResults(0) + 44));
    v29 = (void *)sub_1A9CE5EEC();
    v30 = objc_msgSend(v28, sel_stringFromDateInterval_, v29);

    if (v30)
    {
      v31 = sub_1A9CE82E0();
      v33 = v32;

      v110[0] = v31;
      v110[1] = v33;
      sub_1A9BA8EA4();
      sub_1A9CE88BC();
      swift_bridgeObjectRelease();
    }
    if (qword_1EEB42EF8 != -1)
      swift_once();
    v34 = sub_1A9CE7800();
    v35 = (uint64_t)MEMORY[0x1E0CDD560];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v6, 1, 1, v34);
    sub_1A9CE7830();
    sub_1A9BAAEE4((uint64_t)v6, (uint64_t)&qword_1ED263210, v35, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    v36 = sub_1A9CE7998();
    v38 = v37;
    LOBYTE(v35) = v39;
    swift_release();
    v40 = v35 & 1;
    v41 = sub_1A9CE79A4();
    v43 = v42;
    v45 = v44;
    sub_1A9BAA670(v36, v38, v40);
    swift_bridgeObjectRelease();
    if (qword_1EEB42F00 != -1)
      swift_once();
    v46 = v45 & 1;
    v47 = sub_1A9CE7968();
    v49 = v48;
    v51 = v50;
    v53 = v52;
    sub_1A9BAA670(v41, v43, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = sub_1A9CE7740();
    if (qword_1EEB42C20 != -1)
      swift_once();
    sub_1A9CE6F24();
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v63 = sub_1A9CE774C();
    if (qword_1EEB42C28 != -1)
      swift_once();
    sub_1A9CE6F24();
    v87 = v51 & 1;
    v84 = 0;
    v81 = 0;
    v88[0] = v47;
    v88[1] = v49;
    v89 = v51 & 1;
    *(_DWORD *)v90 = *(_DWORD *)v80;
    *(_DWORD *)&v90[3] = *(_DWORD *)&v80[3];
    v91 = v53;
    v92 = 256;
    v94 = v86;
    v93 = v85;
    v95 = v54;
    *(_DWORD *)&v96[3] = *(_DWORD *)&v79[3];
    *(_DWORD *)v96 = *(_DWORD *)v79;
    v97 = v56;
    v98 = v58;
    v99 = v60;
    v100 = v62;
    v101 = 0;
    *(_DWORD *)&v102[3] = *(_DWORD *)&v83[3];
    *(_DWORD *)v102 = *(_DWORD *)v83;
    v103 = v63;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v82[3];
    *(_DWORD *)v104 = *(_DWORD *)v82;
    v105 = v64;
    v106 = v65;
    v107 = v66;
    v108 = v67;
    v109 = 0;
    nullsub_1(v88);
  }
  sub_1A9BA0D6C((uint64_t)v88, (uint64_t)v110, (uint64_t (*)(_QWORD))sub_1A9BCC634);
  v68 = MEMORY[0x1E0CD8D90];
  v69 = v78;
  v70 = v76;
  sub_1A9BAA620(v78, v76, (uint64_t)&qword_1EEB44B18, (uint64_t)sub_1A9BCC28C, MEMORY[0x1E0CD8D90], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  sub_1A9BA0D6C((uint64_t)v110, (uint64_t)v79, (uint64_t (*)(_QWORD))sub_1A9BCC634);
  v71 = v77;
  sub_1A9BAA620(v70, v77, (uint64_t)&qword_1EEB44B18, (uint64_t)sub_1A9BCC28C, v68, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  sub_1A9BCC208();
  v73 = v71 + *(int *)(v72 + 48);
  sub_1A9BA0D6C((uint64_t)v79, (uint64_t)v80, (uint64_t (*)(_QWORD))sub_1A9BCC634);
  sub_1A9BA0D6C((uint64_t)v80, v73, (uint64_t (*)(_QWORD))sub_1A9BCC634);
  sub_1A9BCEDA8((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1A9BAB070);
  sub_1A9BAAEE4(v69, (uint64_t)&qword_1EEB44B18, (uint64_t)sub_1A9BCC28C, v68, (uint64_t (*)(_QWORD))sub_1A9BCC414);
  sub_1A9BA0D6C((uint64_t)v79, (uint64_t)v88, (uint64_t (*)(_QWORD))sub_1A9BCC634);
  sub_1A9BCEDA8((uint64_t)v88, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1A9BAB10C);
  return sub_1A9BAAEE4(v70, (uint64_t)&qword_1EEB44B18, (uint64_t)sub_1A9BCC28C, v68, (uint64_t (*)(_QWORD))sub_1A9BCC414);
}

uint64_t sub_1A9BCB7E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v89 = a2;
  sub_1A9BCC470();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t *)((char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9BCC414(0, &qword_1EEB44B40, v7);
  v94 = v8;
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v96 = (uint64_t)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v86 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v95 = (uint64_t)&v86 - v17;
  sub_1A9B92F34(0, &qword_1EEB44BA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v86 - v20;
  v22 = sub_1A9CE6150();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for WeekDiagram(0);
  v97 = 0;
  v98 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v93 = *(int *)(v27 + 20);
  if ((*(_BYTE *)(a1 + v93) & 4) == 0)
    goto LABEL_14;
  v35 = *(_BYTE *)(a1 + 16);
  v86 = v15;
  v87 = v6;
  if ((v35 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  else
  {
    v36 = objc_msgSend(*(id *)(a1 + *(int *)(type metadata accessor for WeekResults(0) + 52)), sel_stringFromTimeInterval_, round(*(double *)(a1 + 8) / 60.0) * 60.0);
    if (v36)
    {
      v37 = v36;
      sub_1A9CE82E0();

    }
    sub_1A9CE8358();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v21, v22);
      goto LABEL_9;
    }
  }
  sub_1A9CE60E4();
  sub_1A9BAAEE4((uint64_t)v21, (uint64_t)&qword_1EEB44BA0, (uint64_t)MEMORY[0x1E0CAF240], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
LABEL_9:
  v38 = sub_1A9CE79BC();
  v40 = v39;
  v42 = v41;
  if (qword_1EEB42C50 != -1)
    swift_once();
  v92 = a1;
  v43 = sub_1A9CE7968();
  v45 = v44;
  v47 = v46 & 1;
  sub_1A9BAA670(v38, v40, v42 & 1);
  swift_bridgeObjectRelease();
  sub_1A9CE78D8();
  v48 = sub_1A9CE7998();
  v97 = v49;
  v98 = v48;
  v28 = v50;
  v52 = v51;
  swift_release();
  v29 = v52 & 1;
  sub_1A9BAA670(v43, v45, v47);
  swift_bridgeObjectRelease();
  v53 = sub_1A9CE7740();
  if (qword_1EEB42C18 != -1)
    swift_once();
  sub_1A9CE6F24();
  v31 = v54;
  v32 = v55;
  v33 = v56;
  v34 = v57;
  v30 = v53;
  v15 = v86;
  v6 = v87;
  a1 = v92;
LABEL_14:
  v90 = v34;
  v91 = v33;
  v58 = v30;
  v59 = v32;
  v92 = v31;
  *v6 = sub_1A9CE7FEC();
  v6[1] = v60;
  sub_1A9BCEE28();
  sub_1A9BCBE6C(a1, (uint64_t)v6 + *(int *)(v61 + 44));
  v62 = sub_1A9CE774C();
  if ((*(_BYTE *)(a1 + v93) & 1) != 0 && qword_1EEB42EF8 != -1)
    swift_once();
  sub_1A9CE6F24();
  v64 = v63;
  v66 = v65;
  v68 = v67;
  v70 = v69;
  sub_1A9BA6F90((uint64_t)v6, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9BCC470);
  v71 = &v15[*(int *)(v94 + 36)];
  *v71 = v62;
  *((_QWORD *)v71 + 1) = v64;
  *((_QWORD *)v71 + 2) = v66;
  *((_QWORD *)v71 + 3) = v68;
  *((_QWORD *)v71 + 4) = v70;
  v71[40] = 0;
  sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9BCC470);
  v72 = MEMORY[0x1E0CD9778];
  v73 = (uint64_t)v15;
  v74 = v95;
  sub_1A9BCED58(v73, v95, (uint64_t)&qword_1EEB44B40, (uint64_t)sub_1A9BCC470, MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  v75 = v96;
  sub_1A9BAA620(v74, v96, (uint64_t)&qword_1EEB44B40, (uint64_t)sub_1A9BCC470, v72, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  v77 = v97;
  v76 = v98;
  v78 = v89;
  *v89 = v98;
  v78[1] = v28;
  v98 = v76;
  v88 = v28;
  v78[2] = v29;
  v78[3] = v77;
  v94 = v29;
  v79 = v78;
  v80 = v91;
  v81 = v92;
  v78[4] = v58;
  v78[5] = v81;
  v78[6] = v59;
  v78[7] = v80;
  v78[8] = v90;
  *((_BYTE *)v78 + 72) = 0;
  sub_1A9BCC324();
  sub_1A9BAA620(v75, (uint64_t)v79 + *(int *)(v82 + 48), (uint64_t)&qword_1EEB44B40, (uint64_t)sub_1A9BCC470, MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BCC414);
  v83 = v76;
  v84 = v88;
  LOBYTE(v79) = v94;
  sub_1A9BAB070(v83, v88, v94, v77);
  sub_1A9BAAEE4(v74, (uint64_t)&qword_1EEB44B40, (uint64_t)sub_1A9BCC470, MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD))sub_1A9BCC414);
  sub_1A9BAAEE4(v75, (uint64_t)&qword_1EEB44B40, (uint64_t)sub_1A9BCC470, MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD))sub_1A9BCC414);
  return sub_1A9BAB10C(v98, v84, (char)v79, v77);
}

uint64_t sub_1A9BCBE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  double v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v34;

  v4 = type metadata accessor for WeekResults(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for WeekBarChart(0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v34 - v15;
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v34 - v18;
  sub_1A9BA6F90(a1, (uint64_t)v7, type metadata accessor for WeekResults);
  v20 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for WeekDiagram(0) + 20));
  v21 = 0;
  if ((v20 & 8) != 0)
  {
    if (qword_1EEB42BE0 != -1)
      swift_once();
    v21 = qword_1EEB449C0;
  }
  sub_1A9BA0D6C((uint64_t)v7, (uint64_t)v16, type metadata accessor for WeekResults);
  v16[v8[5]] = v20 & 1;
  v16[v8[6]] = (v20 & 2) != 0;
  v16[v8[7]] = (v20 & 0x10) != 0;
  v16[v8[8]] = (v20 & 0x20) != 0;
  *(_QWORD *)&v16[v8[9]] = v21;
  sub_1A9BA0D6C((uint64_t)v16, (uint64_t)v19, type metadata accessor for WeekBarChart);
  if ((v20 & 4) != 0 && (*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v26 = *(double *)(a1 + *(int *)(v4 + 28));
    v27 = round(*(double *)(a1 + 8) / 60.0) * 60.0;
    v28 = objc_msgSend(*(id *)(a1 + *(int *)(v4 + 52)), sel_stringFromTimeInterval_, v27);
    if (v28)
    {
      v29 = v28;
      sub_1A9CE82E0();

    }
    if (v26 <= 0.0)
      v30 = 0.0;
    else
      v30 = v27 / v26;
    if (qword_1EEB42BF0 != -1)
      swift_once();
    v23 = qword_1EEB449D0;
    if (qword_1EEB42C48 != -1)
      swift_once();
    v25 = qword_1EEB44A28;
    KeyPath = swift_getKeyPath();
    swift_retain();
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)&v30;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    KeyPath = 0;
    v25 = 0;
  }
  sub_1A9BA6F90((uint64_t)v19, (uint64_t)v12, type metadata accessor for WeekBarChart);
  sub_1A9BA6F90((uint64_t)v12, a2, type metadata accessor for WeekBarChart);
  sub_1A9BCC508();
  v32 = (uint64_t *)(a2 + *(int *)(v31 + 48));
  *v32 = v22;
  v32[1] = v23;
  v32[2] = KeyPath;
  v32[3] = v25;
  sub_1A9BCEEA4(v22, v23, KeyPath);
  sub_1A9B97190((uint64_t)v19, type metadata accessor for WeekBarChart);
  sub_1A9BCEED4(v22, v23, KeyPath);
  return sub_1A9B97190((uint64_t)v12, type metadata accessor for WeekBarChart);
}

uint64_t sub_1A9BCC1B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_1A9CE7404();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1A9BCC718(0, &qword_1EEB44B00, &qword_1EEB44B08, (uint64_t (*)(uint64_t))sub_1A9BCC208);
  return sub_1A9BCB088(v1, a1 + *(int *)(v3 + 44));
}

void sub_1A9BCC208()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44B10)
  {
    sub_1A9BCC414(255, &qword_1EEB44B18, (void (*)(uint64_t))sub_1A9BCC28C);
    sub_1A9BCC634();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44B10);
  }
}

void sub_1A9BCC28C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44B20)
  {
    sub_1A9B92F34(255, &qword_1EEB44B28, (uint64_t (*)(uint64_t))sub_1A9BCC324, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44B78, &qword_1EEB44B28, (uint64_t (*)(uint64_t))sub_1A9BCC324);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44B20);
  }
}

void sub_1A9BCC324()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44B30)
  {
    sub_1A9BCC3A8();
    sub_1A9BCC414(255, &qword_1EEB44B40, (void (*)(uint64_t))sub_1A9BCC470);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44B30);
  }
}

void sub_1A9BCC3A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44B38)
  {
    sub_1A9BD20E4(255, &qword_1ED263190);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44B38);
  }
}

void sub_1A9BCC414(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BCC470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44B48)
  {
    sub_1A9B92F34(255, &qword_1EEB44B50, (uint64_t (*)(uint64_t))sub_1A9BCC508, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44B70, &qword_1EEB44B50, (uint64_t (*)(uint64_t))sub_1A9BCC508);
    v0 = sub_1A9CE7ECC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44B48);
  }
}

void sub_1A9BCC508()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44B58)
  {
    type metadata accessor for WeekBarChart(255);
    sub_1A9BCC588();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44B58);
  }
}

uint64_t type metadata accessor for WeekBarChart(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB44C08);
}

void sub_1A9BCC588()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44B60)
  {
    sub_1A9BD1C20(255, &qword_1EEB44B68);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44B60);
  }
}

uint64_t sub_1A9BCC5EC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1A9B92F34(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A9BCC634()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44B80)
  {
    sub_1A9BD1D38(255, &qword_1EEB44B88, (unint64_t *)&qword_1EEB44B90);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44B80);
  }
}

void sub_1A9BCC6A4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1A9BD20E4(255, (unint64_t *)&qword_1EEB43898);
    v3 = sub_1A9CE7164();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_1A9BCC718(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9B92F34(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v5 = sub_1A9CE708C();
    if (!v6)
      atomic_store(v5, a2);
  }
}

int *sub_1A9BCC788@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t *v27;
  int *result;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t *v58;

  v4 = type metadata accessor for WeekBarChartBars(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BC2A70(0, &qword_1EEB44CA0, v8, (void (*)(uint64_t))sub_1A9BCFA94);
  v10 = v9;
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v18 = (char *)&v51 - v17;
  MEMORY[0x1E0C80A78](v16, v19);
  v56 = (uint64_t)&v51 - v20;
  v21 = *a1;
  v58 = a1;
  swift_bridgeObjectRetain();
  v22 = sub_1A9CD2EA4((uint64_t)sub_1A9BCFB30, (uint64_t)v57, v21);
  swift_bridgeObjectRelease();
  v23 = (int *)type metadata accessor for WeekBarChart(0);
  v24 = *(uint64_t *)((char *)a1 + v23[9]);
  v25 = *((_BYTE *)a1 + v23[5]);
  v26 = *((_BYTE *)a1 + v23[8]);
  *(_QWORD *)v7 = v22;
  *((_QWORD *)v7 + 1) = v24;
  v7[16] = v25;
  v7[17] = v26;
  v27 = (uint64_t *)&v7[*(int *)(v4 + 32)];
  *v27 = swift_getKeyPath();
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  result = (int *)type metadata accessor for WeekResults(0);
  v29 = result[7];
  v30 = *(double *)((char *)a1 + v29);
  v31 = *(double *)((char *)a1 + result[9]);
  v32 = v30 / v31;
  if ((~COERCE__INT64(v30 / v31) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v54 = v14;
  v55 = a2;
  v33 = *((unsigned __int8 *)a1 + v23[7]);
  v51 = v29;
  v52 = result;
  v34 = (uint64_t)v18;
  if (v33 == 1)
  {
    v35 = (char *)a1 + result[8];
    v53 = *(_QWORD *)v35;
    v36 = v35[8];
  }
  else
  {
    v53 = 0;
    v36 = 1;
  }
  v37 = (uint64_t)v32;
  v38 = sub_1A9CE7FEC();
  v40 = v39;
  sub_1A9BA6F90((uint64_t)v7, v34, type metadata accessor for WeekBarChartBars);
  v41 = v34 + *(int *)(v10 + 36);
  *(_QWORD *)v41 = v37;
  *(double *)(v41 + 8) = v31;
  *(double *)(v41 + 16) = v30;
  *(_QWORD *)(v41 + 24) = v53;
  *(_BYTE *)(v41 + 32) = v36;
  *(_QWORD *)(v41 + 40) = v38;
  *(_QWORD *)(v41 + 48) = v40;
  sub_1A9B97190((uint64_t)v7, type metadata accessor for WeekBarChartBars);
  v42 = v56;
  sub_1A9BCED58(v34, v56, (uint64_t)&qword_1EEB44CA0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1A9BCFA94, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
  if (*((_BYTE *)a1 + v23[6]) == 1)
  {
    v43 = *(uint64_t *)((char *)a1 + v51);
    v44 = *(void **)((char *)a1 + v52[12]);
    v45 = v44;
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  v46 = (uint64_t)v54;
  sub_1A9BAA620(v42, (uint64_t)v54, (uint64_t)&qword_1EEB44CA0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1A9BCFA94, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
  v47 = v55;
  sub_1A9BAA620(v46, v55, (uint64_t)&qword_1EEB44CA0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1A9BCFA94, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
  sub_1A9BCF9E4();
  v49 = (_QWORD *)(v47 + *(int *)(v48 + 48));
  *v49 = v43;
  v49[1] = 0;
  v49[2] = v44;
  v50 = v44;
  sub_1A9BAAEE4(v42, (uint64_t)&qword_1EEB44CA0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1A9BCFA94, (uint64_t (*)(_QWORD))sub_1A9BC2A70);

  return (int *)sub_1A9BAAEE4(v46, (uint64_t)&qword_1EEB44CA0, (uint64_t)type metadata accessor for WeekBarChartBars, (uint64_t)sub_1A9BCFA94, (uint64_t (*)(_QWORD))sub_1A9BC2A70);
}

int *sub_1A9BCCB50@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EEB42C10 != -1)
    swift_once();
  v3 = qword_1EEB449F0;
  *(_QWORD *)a1 = sub_1A9CE7398();
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1A9BCF968();
  return sub_1A9BCC788(v1, a1 + *(int *)(v4 + 44));
}

uint64_t sub_1A9BCCBC8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1A9CE73EC();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v18 - v10;
  if (*(_BYTE *)(v1 + 17) != 1 || (a1 & 1) == 0)
  {
    type metadata accessor for WeekBarChartBars(0);
    sub_1A9C82AA8((uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v8, *MEMORY[0x1E0CDB2D8], v3);
    v15 = sub_1A9CE6F60();
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v8, v3);
    v16(v11, v3);
    if ((v15 & 1) != 0)
    {
      if (qword_1EEB42C60 == -1)
        goto LABEL_12;
    }
    else if (qword_1EEB42C58 == -1)
    {
LABEL_12:
      v19 = swift_retain();
      return sub_1A9CE6FF0();
    }
    swift_once();
    goto LABEL_12;
  }
  sub_1A9B94CA0(0, &qword_1ED263318, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A9CEB530;
  if (qword_1EEB42CE8 != -1)
    swift_once();
  *(_QWORD *)(v12 + 32) = qword_1EEB45938;
  v13 = qword_1ED262D40;
  swift_retain();
  if (v13 != -1)
    swift_once();
  *(_QWORD *)(v12 + 40) = qword_1ED262D68;
  v19 = v12;
  sub_1A9CE83E8();
  v14 = v19;
  swift_retain();
  MEMORY[0x1AF41EBEC](v14);
  sub_1A9CE8040();
  sub_1A9CE804C();
  sub_1A9CE70D4();
  return sub_1A9CE6FF0();
}

double sub_1A9BCCE60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  double result;
  _QWORD v28[2];
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;

  v4 = type metadata accessor for WeekBarChartBars(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA6F90(a1, (uint64_t)v8, type metadata accessor for WeekBarChartBars);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  sub_1A9BA0D6C((uint64_t)v8, v10 + v9, type metadata accessor for WeekBarChartBars);
  v11 = sub_1A9CE7728();
  sub_1A9CE6F24();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  if (qword_1EEB42C30 != -1)
    swift_once();
  v20 = qword_1EEB44A10;
  KeyPath = swift_getKeyPath();
  v22 = qword_1EEB42BF8;
  swift_retain();
  if (v22 != -1)
    swift_once();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v23 = v28[1];
  v24 = v29;
  v25 = v30;
  v26 = v31;
  *(_QWORD *)a2 = sub_1A9BD07B8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = v19;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = v20;
  *(_QWORD *)(a2 + 80) = v23;
  *(_BYTE *)(a2 + 88) = v24;
  *(_QWORD *)(a2 + 96) = v25;
  *(_BYTE *)(a2 + 104) = v26;
  result = *(double *)&v32;
  *(_OWORD *)(a2 + 112) = v32;
  return result;
}

uint64_t sub_1A9BCD038@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a1;
  v5 = type metadata accessor for WeekBarChartBars(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A9CE7008();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10, v13);
  *(_QWORD *)a3 = sub_1A9CE7398();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  sub_1A9BD0804();
  v15 = *a2;
  v22 = a3 + *(int *)(v14 + 44);
  v23 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v10);
  sub_1A9BA6F90((uint64_t)a2, (uint64_t)v9, type metadata accessor for WeekBarChartBars);
  v16 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = (v12 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  sub_1A9BA0D6C((uint64_t)v9, v18 + v17, type metadata accessor for WeekBarChartBars);
  sub_1A9B92F34(0, &qword_1EEB44D88, type metadata accessor for DayRelativeDuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9B92F34(0, &qword_1EEB44D90, (uint64_t (*)(uint64_t))sub_1A9BD092C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
  sub_1A9BD0BA8();
  sub_1A9BD0D8C();
  sub_1A9B92B9C(qword_1EEB44E08, type metadata accessor for DayRelativeDuration, (uint64_t)&unk_1A9CF4D18);
  swift_bridgeObjectRetain();
  return sub_1A9CE7F5C();
}

uint64_t sub_1A9BCD254@<X0>(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t result;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  objc_class *v63;
  char *v64;
  id v65;
  id v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  objc_super v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  __int128 v107;

  v92 = a3;
  sub_1A9BD0B5C(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1A9CE7620();
  v9 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v10);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BD09E4(0);
  v14 = v13;
  v83 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BD09C8(0);
  v85 = v18;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v20, v23);
  v84 = (char *)&v82 - v25;
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v82 - v27;
  sub_1A9BC2A70(0, &qword_1EEB44DA0, v29, (void (*)(uint64_t))sub_1A9BD0ADC);
  v86 = v30;
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v90 = (uint64_t)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v32, v34);
  v87 = (char *)&v82 - v36;
  MEMORY[0x1E0C80A78](v35, v37);
  v89 = (uint64_t)&v82 - v38;
  sub_1A9CE6FFC();
  v40 = v39;
  v41 = a1[4];
  v42 = 0.0;
  if (v41 > 0.0)
    v42 = a1[1] / v41;
  v91 = v8;
  if (qword_1EEB42BD0 != -1)
    swift_once();
  v88 = v28;
  v43 = qword_1EEB449B0;
  v44 = v40 * v42;
  v45 = sub_1A9BCCBC8((a1[2] - *MEMORY[0x1E0DA85A0] <= a1[1]) & ~*((_BYTE *)a1 + 24));
  v46 = a2;
  if (qword_1EEB42BD8 != -1)
    swift_once();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v95 = v44;
  v96 = v43;
  v97 = v45;
  v98 = v103;
  v99 = v104;
  v100 = v105;
  v101 = v106;
  v102 = v107;
  sub_1A9CE7608();
  sub_1A9BD20E4(0, &qword_1EEB44DB8);
  v48 = v47;
  v49 = sub_1A9BD21D4(&qword_1EEB44DC0, &qword_1EEB44DB8, (uint64_t)&type metadata for VerticalBar, (uint64_t (*)(void))sub_1A9BD0A98);
  sub_1A9CE7B54();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v93);
  result = swift_release();
  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)v46 + 16), *(_QWORD *)a1))
  {
    __break(1u);
  }
  else
  {
    v95 = v48;
    v96 = v49;
    swift_getOpaqueTypeConformance2();
    sub_1A9CE7AC4();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v17, v14);
    v51 = (void *)objc_opt_self();
    v52 = *(_QWORD *)a1;
    type metadata accessor for DayRelativeDuration(0);
    v53 = (void *)sub_1A9CE63CC();
    v54 = objc_msgSend(v51, sel_hk_noonWithDayIndex_calendar_, v52, v53);

    v55 = (id)HKDateFormatterFromTemplate();
    if (v55)
    {
      v56 = v55;
      v57 = objc_msgSend(v55, sel_stringFromDate_, v54);
      sub_1A9CE82E0();

    }
    else
    {

    }
    v58 = v46;
    v59 = (uint64_t)v91;
    v60 = (uint64_t)v88;
    v61 = (uint64_t)v84;
    sub_1A9CE7134();
    swift_bridgeObjectRelease();
    sub_1A9B97190((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1A9BD09C8);
    v62 = a1[1];
    v63 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    v64 = (char *)objc_allocWithZone(v63);
    *(_QWORD *)&v64[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v94.receiver = v64;
    v94.super_class = v63;
    v65 = objc_msgSendSuper2(&v94, sel_init);
    v66 = objc_msgSend(v65, sel_stringFromTimeInterval_, v62);

    if (v66)
    {
      sub_1A9CE82E0();

    }
    sub_1A9CE7140();
    swift_bridgeObjectRelease();
    sub_1A9B97190(v61, (uint64_t (*)(_QWORD))sub_1A9BD09C8);
    if (*(_BYTE *)(v58 + 16) == 1)
    {
      sub_1A9BA6F90((uint64_t)a1, v59, type metadata accessor for DayRelativeDuration);
      v67 = sub_1A9BCDA4C((uint64_t *)a1);
      v68 = type metadata accessor for XAxisBarLabel(0);
      *(_BYTE *)(v59 + *(int *)(v68 + 20)) = v67;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v59, 0, 1, v68);
    }
    else
    {
      v69 = type metadata accessor for XAxisBarLabel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v59, 1, 1, v69);
    }
    v70 = sub_1A9CE7FE0();
    v72 = v71;
    v73 = (uint64_t)v87;
    v74 = (uint64_t)&v87[*(int *)(v86 + 36)];
    sub_1A9BA6F90(v59, v74, (uint64_t (*)(_QWORD))sub_1A9BD0B5C);
    sub_1A9BD0ADC();
    v76 = (uint64_t *)(v74 + *(int *)(v75 + 36));
    *v76 = v70;
    v76[1] = v72;
    sub_1A9BA6F90(v60, v73, (uint64_t (*)(_QWORD))sub_1A9BD09C8);
    sub_1A9B97190(v59, (uint64_t (*)(_QWORD))sub_1A9BD0B5C);
    sub_1A9B97190(v60, (uint64_t (*)(_QWORD))sub_1A9BD09C8);
    v77 = v89;
    sub_1A9BCED58(v73, v89, (uint64_t)&qword_1EEB44DA0, (uint64_t)sub_1A9BD09C8, (uint64_t)sub_1A9BD0ADC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
    LOBYTE(v70) = sub_1A9BCDA4C((uint64_t *)a1);
    v78 = v90;
    sub_1A9BAA620(v77, v90, (uint64_t)&qword_1EEB44DA0, (uint64_t)sub_1A9BD09C8, (uint64_t)sub_1A9BD0ADC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
    v79 = v92;
    sub_1A9BAA620(v78, v92, (uint64_t)&qword_1EEB44DA0, (uint64_t)sub_1A9BD09C8, (uint64_t)sub_1A9BD0ADC, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9BC2A70);
    sub_1A9BD092C();
    v81 = v79 + *(int *)(v80 + 48);
    *(_QWORD *)v81 = 0;
    *(_BYTE *)(v81 + 8) = 0;
    *(_BYTE *)(v81 + 9) = v70 & 1;
    sub_1A9BAAEE4(v77, (uint64_t)&qword_1EEB44DA0, (uint64_t)sub_1A9BD09C8, (uint64_t)sub_1A9BD0ADC, (uint64_t (*)(_QWORD))sub_1A9BC2A70);
    return sub_1A9BAAEE4(v78, (uint64_t)&qword_1EEB44DA0, (uint64_t)sub_1A9BD09C8, (uint64_t)sub_1A9BD0ADC, (uint64_t (*)(_QWORD))sub_1A9BC2A70);
  }
  return result;
}

BOOL sub_1A9BCDA4C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = type metadata accessor for DayRelativeDuration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v8)
    return 0;
  v9 = *a1;
  sub_1A9BA6F90(*(_QWORD *)v1+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * (v8 - 1), (uint64_t)v7, type metadata accessor for DayRelativeDuration);
  v10 = *v7;
  sub_1A9B97190((uint64_t)v7, type metadata accessor for DayRelativeDuration);
  return v9 == v10;
}

double sub_1A9BCDB08@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[8];
  _BYTE v10[135];

  v3 = sub_1A9CE73F8();
  sub_1A9BCCE60(v1, (uint64_t)v9);
  *(_OWORD *)&v10[71] = v9[4];
  *(_OWORD *)&v10[87] = v9[5];
  *(_OWORD *)&v10[103] = v9[6];
  *(_OWORD *)&v10[119] = v9[7];
  *(_OWORD *)&v10[7] = v9[0];
  *(_OWORD *)&v10[23] = v9[1];
  *(_OWORD *)&v10[39] = v9[2];
  *(_OWORD *)&v10[55] = v9[3];
  v4 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  v5 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v5;
  v6 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  result = *(double *)&v10[32];
  v8 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v8;
  *(_OWORD *)(a1 + 81) = v4;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)&v10[127];
  *(_OWORD *)(a1 + 17) = v6;
  return result;
}

uint64_t sub_1A9BCDBE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  __int128 v45;
  char *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  __int128 v66;

  v2 = v1;
  v49 = a1;
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v45 - v5;
  sub_1A9BD1CB4();
  MEMORY[0x1E0C80A78](v7, v8);
  v48 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)objc_opt_self();
  v11 = *v1;
  v46 = (char *)v1 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v12 = (void *)sub_1A9CE63CC();
  v47 = v10;
  v13 = objc_msgSend(v10, sel_hk_noonWithDayIndex_calendar_, v11, v12);

  v14 = (id)HKDateFormatterFromTemplate();
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, sel_stringFromDate_, v13);
    sub_1A9CE82E0();

  }
  else
  {

  }
  if (qword_1EEB42EF8 != -1)
    swift_once();
  v17 = sub_1A9CE7800();
  v18 = MEMORY[0x1E0CDD560];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
  sub_1A9CE7830();
  sub_1A9BAAEE4((uint64_t)v6, (uint64_t)&qword_1ED263210, (uint64_t)v18, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v19 = sub_1A9CE7998();
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_release();
  if (*((_BYTE *)v1 + *(int *)(type metadata accessor for XAxisBarLabel(0) + 20)) == 1)
  {
    sub_1A9CE7CD4();
  }
  else
  {
    if (qword_1EEB42F00 != -1)
      swift_once();
    swift_retain();
  }
  v24 = sub_1A9CE7968();
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release();
  sub_1A9BAA670(v19, v21, v23 & 1);
  swift_bridgeObjectRelease();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v31 = v62;
  v32 = v63;
  v33 = v64;
  v34 = v65;
  v35 = v66;
  if (qword_1EEB42BE8 != -1)
  {
    v45 = v66;
    swift_once();
    v35 = v45;
  }
  v36 = v24;
  v50 = v24;
  v51 = v26;
  v52 = v28 & 1;
  v53 = v30;
  v54 = 257;
  v55 = v31;
  v56 = v32;
  v57 = v33;
  v58 = v34;
  v59 = v35;
  v60 = 0;
  v61 = *(double *)&qword_1EEB449C8 + *(double *)&qword_1EEB57648;
  v37 = *v2;
  v38 = (void *)sub_1A9CE63CC();
  v39 = objc_msgSend(v47, sel_hk_noonWithDayIndex_calendar_, v37, v38);

  v40 = (id)HKDateFormatterFromTemplate();
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend(v40, sel_stringFromDate_, v39);
    sub_1A9CE82E0();

  }
  else
  {

  }
  sub_1A9BD1D38(0, &qword_1EEB44F90, &qword_1EEB44F98);
  sub_1A9BD1D9C();
  v43 = (uint64_t)v48;
  sub_1A9CE7AD0();
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v36, v26, v28 & 1);
  swift_bridgeObjectRelease();
  return sub_1A9BA0D6C(v43, v49, (uint64_t (*)(_QWORD))sub_1A9BD1CB4);
}

uint64_t sub_1A9BCE0FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  _OWORD v24[9];
  _OWORD v25[2];
  _OWORD v26[11];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[7];

  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - v8;
  v10 = sub_1A9CE73F8();
  sub_1A9BCE3DC(a1, (uint64_t)v24, a3);
  *(_OWORD *)((char *)&v26[4] + 7) = v24[4];
  *(_OWORD *)((char *)&v26[3] + 7) = v24[3];
  *(_OWORD *)((char *)&v26[7] + 7) = v24[7];
  *(_OWORD *)((char *)&v26[8] + 7) = v24[8];
  *(_OWORD *)((char *)&v26[9] + 7) = v25[0];
  v26[10] = *(_OWORD *)((char *)v25 + 9);
  *(_OWORD *)((char *)&v26[5] + 7) = v24[5];
  *(_OWORD *)((char *)&v26[6] + 7) = v24[6];
  *(_OWORD *)((char *)v26 + 7) = v24[0];
  v27 = 1;
  *(_OWORD *)((char *)&v26[1] + 7) = v24[1];
  *(_OWORD *)((char *)&v26[2] + 7) = v24[2];
  v36 = v26[8];
  v37 = v26[9];
  v38 = *(_OWORD *)((char *)v25 + 9);
  v32 = v26[4];
  v33 = v26[5];
  v34 = v26[6];
  v35 = v26[7];
  v28 = v26[0];
  v29 = v26[1];
  v30 = v26[2];
  v31 = v26[3];
  if (qword_1EEB42EF8 != -1)
    swift_once();
  v11 = sub_1A9CE7800();
  v12 = MEMORY[0x1E0CDD560];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v13 = sub_1A9CE7830();
  sub_1A9BAAEE4((uint64_t)v9, (uint64_t)&qword_1ED263210, (uint64_t)v12, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  KeyPath = swift_getKeyPath();
  if (qword_1EEB42F00 != -1)
    swift_once();
  v15 = qword_1EEB57650;
  v16 = swift_getKeyPath();
  v17 = v34;
  *(_OWORD *)(a2 + 129) = v35;
  v18 = v37;
  *(_OWORD *)(a2 + 145) = v36;
  *(_OWORD *)(a2 + 161) = v18;
  *(_OWORD *)(a2 + 177) = v38;
  v19 = v30;
  *(_OWORD *)(a2 + 65) = v31;
  v20 = v33;
  *(_OWORD *)(a2 + 81) = v32;
  *(_OWORD *)(a2 + 97) = v20;
  *(_OWORD *)(a2 + 113) = v17;
  v21 = v29;
  *(_OWORD *)(a2 + 17) = v28;
  *(_OWORD *)(a2 + 33) = v21;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 49) = v19;
  *(_DWORD *)(a2 + 193) = *(_DWORD *)v39;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v39[3];
  *(_QWORD *)(a2 + 200) = KeyPath;
  *(_QWORD *)(a2 + 208) = v13;
  *(_QWORD *)(a2 + 216) = v16;
  *(_QWORD *)(a2 + 224) = v15;
  return swift_retain();
}

uint64_t sub_1A9BCE3DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = objc_msgSend(a1, sel_stringFromTimeInterval_);
  if (v6)
  {
    v7 = v6;
    v8 = sub_1A9CE82E0();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0xE000000000000000;
  }
  v11 = sub_1A9CE7740();
  if (qword_1EEB42EF8 != -1)
    swift_once();
  sub_1A9CE6F24();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = objc_msgSend(a1, sel_stringFromTimeInterval_, a3);
  if (v20)
  {
    v21 = v20;
    v22 = sub_1A9CE82E0();
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0xE000000000000000;
  }
  v25 = sub_1A9CE774C();
  sub_1A9CE6F24();
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = 0;
  v26 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v19;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  *(_QWORD *)(a2 + 96) = v22;
  *(_QWORD *)(a2 + 104) = v24;
  *(_BYTE *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = v26;
  *(_BYTE *)(a2 + 128) = v25;
  *(_QWORD *)(a2 + 136) = v27;
  *(_QWORD *)(a2 + 144) = v28;
  *(_QWORD *)(a2 + 152) = v29;
  *(_QWORD *)(a2 + 160) = v30;
  *(_BYTE *)(a2 + 168) = 0;
  sub_1A9BAA680(v8, v10, 0);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v22, v24, 0);
  swift_bridgeObjectRetain();
  sub_1A9BAA670(v22, v24, 0);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v8, v10, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9BCE5D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BCE0FC(*(void **)(v1 + 16), a1, *(double *)(v1 + 8));
}

uint64_t sub_1A9BCE5E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[4];
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL (*v63)(_BOOL8);
  uint64_t v64;
  uint64_t v65;
  char v66;
  _BYTE v67[7];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[16];
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  unsigned __int8 v76;

  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - v6;
  v48 = *a1;
  if (v48 < 0)
  {
    __break(1u);
  }
  else if (qword_1EEB42C68 == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v8 = xmmword_1EEB44A48;
  v46 = HIDWORD(xmmword_1EEB44A48);
  v47 = DWORD2(xmmword_1EEB44A48);
  v9 = qword_1EEB44A58;
  v10 = qword_1EEB44A60;
  v11 = qword_1EEB44A68;
  v12 = swift_allocObject();
  v13 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 32) = v13;
  v14 = *((_BYTE *)a1 + 32);
  v43 = v12;
  *(_BYTE *)(v12 + 48) = v14;
  KeyPath = swift_getKeyPath();
  v15 = qword_1EEB42C40;
  v45 = v10;
  swift_bridgeObjectRetain();
  if (v15 != -1)
    swift_once();
  v16 = qword_1EEB44A20;
  v41 = swift_getKeyPath();
  v17 = qword_1EEB42EF8;
  v44 = v16;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = sub_1A9CE7800();
  v19 = MEMORY[0x1E0CDD560];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  v40 = sub_1A9CE7830();
  v20 = MEMORY[0x1E0DEB940];
  sub_1A9BAAEE4((uint64_t)v7, (uint64_t)&qword_1ED263210, (uint64_t)v19, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v21 = swift_getKeyPath();
  v76 = 0;
  v22 = MEMORY[0x1E0DEB070];
  sub_1A9BCED58((uint64_t)(a1 + 3), (uint64_t)v72, (uint64_t)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t)v20, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B94CA0);
  sub_1A9BCED58((uint64_t)v72, (uint64_t)&v73, (uint64_t)&qword_1ED2628F0, v22, (uint64_t)v20, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B94CA0);
  if ((v74 & 1) != 0)
  {
    v23 = 0;
    v39 = 0;
    v24 = 0;
    v25 = 255;
  }
  else
  {
    v39 = v73;
    v24 = a1[2];
    v23 = swift_getKeyPath();
    v25 = 0;
  }
  v37 = v76;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v48;
  *(_QWORD *)&v50 = 1;
  *((_QWORD *)&v50 + 1) = v8;
  *(_QWORD *)&v51 = __PAIR64__(v46, v47);
  *((_QWORD *)&v51 + 1) = v9;
  *(_QWORD *)&v52 = v45;
  *((_QWORD *)&v52 + 1) = v11;
  v26 = KeyPath;
  v27 = v43;
  *(_QWORD *)&v53 = sub_1A9BD055C;
  *((_QWORD *)&v53 + 1) = v43;
  *(_QWORD *)&v54 = KeyPath;
  BYTE8(v54) = v76;
  *(_DWORD *)((char *)&v54 + 9) = *(_DWORD *)v75;
  HIDWORD(v54) = *(_DWORD *)&v75[3];
  v28 = v41;
  *(_QWORD *)&v55 = v41;
  *((_QWORD *)&v55 + 1) = v44;
  *(_QWORD *)&v56 = v21;
  v38 = v21;
  v29 = v39;
  v30 = v40;
  *((_QWORD *)&v56 + 1) = v40;
  v31 = v52;
  *(_OWORD *)(a2 + 32) = v51;
  *(_OWORD *)(a2 + 48) = v31;
  v32 = v54;
  *(_OWORD *)(a2 + 64) = v53;
  *(_OWORD *)(a2 + 80) = v32;
  v33 = v50;
  *(_OWORD *)a2 = v49;
  *(_OWORD *)(a2 + 16) = v33;
  v34 = v56;
  *(_OWORD *)(a2 + 96) = v55;
  *(_OWORD *)(a2 + 112) = v34;
  *(_QWORD *)(a2 + 128) = v23;
  *(_QWORD *)(a2 + 136) = v25;
  *(_QWORD *)(a2 + 144) = v29;
  *(_QWORD *)(a2 + 152) = v24;
  sub_1A9BD05B8((uint64_t)&v49);
  sub_1A9BD063C(v23, v25);
  sub_1A9BD0654(v23, v25);
  v57[0] = 0;
  v57[1] = v48;
  v57[2] = 1;
  v57[3] = v8;
  v58 = v47;
  v59 = v46;
  v60 = v9;
  v61 = v45;
  v62 = v11;
  v63 = sub_1A9BD055C;
  v64 = v27;
  v65 = v26;
  v66 = v37;
  *(_DWORD *)v67 = *(_DWORD *)v75;
  *(_DWORD *)&v67[3] = *(_DWORD *)&v75[3];
  v68 = v28;
  v69 = v44;
  v70 = v38;
  v71 = v30;
  return sub_1A9BD066C((uint64_t)v57);
}

BOOL sub_1A9BCEA00(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  _BYTE v6[16];
  double v7;
  char v8;

  if (result)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DEB070];
    v5 = MEMORY[0x1E0DEB940];
    sub_1A9BCED58(a2 + 24, (uint64_t)v6, (uint64_t)&qword_1ED2628F0, MEMORY[0x1E0DEB070], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B94CA0);
    sub_1A9BCED58((uint64_t)v6, (uint64_t)&v7, (uint64_t)&qword_1ED2628F0, v4, (uint64_t)v5, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1A9B94CA0);
    return (v8 & 1) != 0 || *(double *)(a2 + 8) * (double)v3 != v7;
  }
  return result;
}

double sub_1A9BCEAC0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  char v14;
  _OWORD v15[10];

  v3 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v3;
  v14 = *(_BYTE *)(v1 + 32);
  v4 = sub_1A9CE7FEC();
  v6 = v5;
  sub_1A9BCE5E4((uint64_t *)v13, (uint64_t)v15);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = v15[7];
  *(_OWORD *)(a1 + 112) = v15[6];
  *(_OWORD *)(a1 + 128) = v7;
  v8 = v15[9];
  *(_OWORD *)(a1 + 144) = v15[8];
  *(_OWORD *)(a1 + 160) = v8;
  v9 = v15[3];
  *(_OWORD *)(a1 + 48) = v15[2];
  *(_OWORD *)(a1 + 64) = v9;
  v10 = v15[5];
  *(_OWORD *)(a1 + 80) = v15[4];
  *(_OWORD *)(a1 + 96) = v10;
  result = *(double *)v15;
  v12 = v15[1];
  *(_OWORD *)(a1 + 16) = v15[0];
  *(_OWORD *)(a1 + 32) = v12;
  return result;
}

double sub_1A9BCEB40@<D0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t KeyPath;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  double result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  sub_1A9CE6FFC();
  if (qword_1EEB42BF8 != -1)
    swift_once();
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  if (qword_1EEB42C38 != -1)
    swift_once();
  v10 = qword_1EEB44A18;
  KeyPath = swift_getKeyPath();
  swift_retain();
  sub_1A9CE6FFC();
  v13 = v12 * 0.5;
  v14 = a2 & 1;
  sub_1A9BAADF4(a1, v14);
  v15 = sub_1A9C82AFC(a1, v14);
  sub_1A9BAAED8(a1, v14);
  sub_1A9CE6FFC();
  *(_QWORD *)a3 = v18;
  result = (a5 - a4) / a5 * v16 + -1.0 / v15 * 0.5;
  *(_BYTE *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_BYTE *)(a3 + 24) = v21;
  *(_QWORD *)(a3 + 32) = v22;
  *(_QWORD *)(a3 + 40) = v23;
  *(_QWORD *)(a3 + 48) = KeyPath;
  *(_QWORD *)(a3 + 56) = v10;
  *(double *)(a3 + 64) = v13;
  *(double *)(a3 + 72) = result;
  return result;
}

uint64_t sub_1A9BCECEC@<X0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v6;
  *a1 = sub_1A9BD1F3C;
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v7;
  return sub_1A9BAADF4(v3, v4);
}

uint64_t sub_1A9BCED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t sub_1A9BCEDA8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 128);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return a1;
}

double sub_1A9BCEE0C(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_1A9BCEE28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44BA8)
  {
    sub_1A9B92F34(255, &qword_1EEB44B50, (uint64_t (*)(uint64_t))sub_1A9BCC508, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44BA8);
  }
}

uint64_t sub_1A9BCEEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1A9BCEED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9BCEF0C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = (int *)type metadata accessor for WeekResults(0);
    v9 = v8[6];
    v10 = v7 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_1A9CE5F64();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    *(_QWORD *)(v7 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
    v14 = v8[8];
    v15 = v7 + v14;
    v16 = (uint64_t)a2 + v14;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v7 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
    v17 = v8[10];
    v18 = v7 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = sub_1A9CE6444();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = v8[11];
    v22 = *(void **)((char *)a2 + v21);
    *(_QWORD *)(v7 + v21) = v22;
    v23 = v8[12];
    v24 = *(void **)((char *)a2 + v23);
    *(_QWORD *)(v7 + v23) = v24;
    v25 = v8[13];
    v26 = *(void **)((char *)a2 + v25);
    *(_QWORD *)(v7 + v25) = v26;
    v27 = a3[6];
    *(_BYTE *)(v7 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_BYTE *)(v7 + v27) = *((_BYTE *)a2 + v27);
    v28 = a3[8];
    *(_BYTE *)(v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *(_BYTE *)(v7 + v28) = *((_BYTE *)a2 + v28);
    *(_QWORD *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v29 = v22;
    v30 = v24;
    v31 = v26;
  }
  return v7;
}

void sub_1A9BCF09C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for WeekResults(0);
  v3 = a1 + v2[6];
  v4 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = a1 + v2[10];
  v6 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

}

uint64_t sub_1A9BCF13C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v13 = v7[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v16 = v7[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = v7[11];
  v21 = *(void **)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v22 = v7[12];
  v23 = *(void **)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = v7[13];
  v25 = *(void **)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v26 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v28 = v21;
  v29 = v23;
  v30 = v25;
  return a1;
}

uint64_t sub_1A9BCF29C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v12 = v7[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v15;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v16 = v7[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = v7[11];
  v21 = *(void **)(a2 + v20);
  v22 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  v23 = v21;

  v24 = v7[12];
  v25 = *(void **)(a2 + v24);
  v26 = *(void **)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v27 = v25;

  v28 = v7[13];
  v29 = *(void **)(a2 + v28);
  v30 = *(void **)(a1 + v28);
  *(_QWORD *)(a1 + v28) = v29;
  v31 = v29;

  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1A9BCF418(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = (int *)type metadata accessor for WeekResults(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  v12 = v7[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v15 = v7[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
  *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
  *(_QWORD *)(a1 + v7[13]) = *(_QWORD *)(a2 + v7[13]);
  v19 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1A9BCF550(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (int *)type metadata accessor for WeekResults(0);
  v7 = v6[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE5F64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + v6[7]) = *(_QWORD *)(a2 + v6[7]);
  v11 = v6[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(a1 + v6[9]) = *(_QWORD *)(a2 + v6[9]);
  v14 = v6[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = v6[11];
  v19 = *(void **)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);

  v20 = v6[12];
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);

  v22 = v6[13];
  v23 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  v24 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1A9BCF6B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BCF6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, type metadata accessor for WeekResults);
}

uint64_t sub_1A9BCF6C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BCF6D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, type metadata accessor for WeekResults);
}

uint64_t sub_1A9BCF6E0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WeekResults(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeekDiagram.Options()
{
  return &type metadata for WeekDiagram.Options;
}

uint64_t sub_1A9BCF774()
{
  return sub_1A9B92B9C(&qword_1EEB44C50, (uint64_t (*)(uint64_t))sub_1A9BCF7A0, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9BCF7A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44C58)
  {
    sub_1A9B92F34(255, &qword_1EEB44B08, (uint64_t (*)(uint64_t))sub_1A9BCC208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44C60, &qword_1EEB44B08, (uint64_t (*)(uint64_t))sub_1A9BCC208);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44C58);
  }
}

unint64_t sub_1A9BCF83C()
{
  unint64_t result;

  result = qword_1EEB44C68;
  if (!qword_1EEB44C68)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEEA50, &type metadata for WeekDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB44C68);
  }
  return result;
}

unint64_t sub_1A9BCF884()
{
  unint64_t result;

  result = qword_1EEB44C70;
  if (!qword_1EEB44C70)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEEA20, &type metadata for WeekDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB44C70);
  }
  return result;
}

unint64_t sub_1A9BCF8CC()
{
  unint64_t result;

  result = qword_1EEB44C78;
  if (!qword_1EEB44C78)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEEA78, &type metadata for WeekDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB44C78);
  }
  return result;
}

unint64_t sub_1A9BCF914()
{
  unint64_t result;

  result = qword_1EEB44C80;
  if (!qword_1EEB44C80)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEEAB0, &type metadata for WeekDiagram.Options);
    atomic_store(result, (unint64_t *)&qword_1EEB44C80);
  }
  return result;
}

uint64_t sub_1A9BCF958()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9BCF968()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44C88)
  {
    sub_1A9B92F34(255, &qword_1EEB44C90, (uint64_t (*)(uint64_t))sub_1A9BCF9E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44C88);
  }
}

void sub_1A9BCF9E4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44C98)
  {
    sub_1A9BC2A70(255, &qword_1EEB44CA0, (void (*)(uint64_t))type metadata accessor for WeekBarChartBars, (void (*)(uint64_t))sub_1A9BCFA94);
    sub_1A9B94CA0(255, qword_1EEB44CB8, (uint64_t)&type metadata for YAxisLabels, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44C98);
  }
}

uint64_t type metadata accessor for WeekBarChartBars(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB44D18);
}

void sub_1A9BCFA94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44CA8)
  {
    sub_1A9BCFAEC();
    v0 = sub_1A9CE74D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44CA8);
  }
}

unint64_t sub_1A9BCFAEC()
{
  unint64_t result;

  result = qword_1EEB44CB0;
  if (!qword_1EEB44CB0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEED04, &type metadata for GridLines);
    atomic_store(result, (unint64_t *)&qword_1EEB44CB0);
  }
  return result;
}

uint64_t sub_1A9BCFB30@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A9C89248(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for YAxisLabels(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void destroy for YAxisLabels(uint64_t a1)
{

}

_QWORD *assignWithCopy for YAxisLabels(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = (void *)a2[2];
  v4 = (void *)a1[2];
  a1[2] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for YAxisLabels(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for YAxisLabels(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for YAxisLabels(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for YAxisLabels()
{
  return &type metadata for YAxisLabels;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GridLines(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GridLines(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GridLines()
{
  return &type metadata for GridLines;
}

uint64_t sub_1A9BCFD14(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v6 = *(int *)(a3 + 32);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = sub_1A9CE73EC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_1A9BCFE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = sub_1A9CE73EC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1A9BCFEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v5 = *(int *)(a3 + 32);
  v6 = (_QWORD *)(a1 + v5);
  v7 = (_QWORD *)(a2 + v5);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1A9CE73EC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1A9BCFF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4(a1 + v6, (uint64_t)&qword_1ED262698, (uint64_t)MEMORY[0x1E0CDB2E0], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262698, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1A9CE73EC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1A9BD0098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(int *)(a3 + 32);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v8 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1A9CE73EC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1A9BD015C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4(a1 + v6, (uint64_t)&qword_1ED262698, (uint64_t)MEMORY[0x1E0CDB2E0], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, &qword_1ED262698, v9, v10);
    v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_1A9CE73EC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A9BD0278()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BD0284(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1A9B92F34(0, &qword_1EEB43B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], MEMORY[0x1E0CD87E8]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t sub_1A9BD0318()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1A9BD0324(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1A9B92F34(0, &qword_1EEB43B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], MEMORY[0x1E0CD87E8]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

void sub_1A9BD03B0()
{
  unint64_t v0;

  sub_1A9B92F34(319, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1A9BD0458()
{
  return sub_1A9B92B9C(&qword_1EEB44D60, (uint64_t (*)(uint64_t))sub_1A9BD0484, MEMORY[0x1E0CDFB10]);
}

void sub_1A9BD0484()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44D68)
  {
    sub_1A9B92F34(255, &qword_1EEB44C90, (uint64_t (*)(uint64_t))sub_1A9BCF9E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44D70, &qword_1EEB44C90, (uint64_t (*)(uint64_t))sub_1A9BCF9E4);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44D68);
  }
}

uint64_t sub_1A9BD051C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BD052C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BD053C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BD054C()
{
  return swift_deallocObject();
}

BOOL sub_1A9BD055C(_BOOL8 a1)
{
  uint64_t v1;

  return sub_1A9BCEA00(a1, v1 + 16);
}

uint64_t sub_1A9BD0564@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A9CE7230();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BD058C()
{
  return sub_1A9CE723C();
}

uint64_t sub_1A9BD05B8(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A9BAADF4(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1A9BD063C(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_1A9BAADF4(result, a2 & 1);
  return result;
}

uint64_t sub_1A9BD0654(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_1A9BAAED8(result, a2 & 1);
  return result;
}

uint64_t sub_1A9BD066C(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1A9BAAED8(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1A9BD06F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for WeekBarChartBars(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_bridgeObjectRelease();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 32);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1A9CE73EC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1A9BD07B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeekBarChartBars(0) - 8) + 80);
  return sub_1A9BCD038(a1, (uint64_t *)(v2 + ((v5 + 16) & ~v5)), a2);
}

void sub_1A9BD0804()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44D78)
  {
    sub_1A9BD0868();
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44D78);
  }
}

void sub_1A9BD0868()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44D80)
  {
    sub_1A9B92F34(255, &qword_1EEB44D88, type metadata accessor for DayRelativeDuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B92F34(255, &qword_1EEB44D90, (uint64_t (*)(uint64_t))sub_1A9BD092C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BD0BA8();
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44D80);
  }
}

void sub_1A9BD092C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44D98)
  {
    sub_1A9BC2A70(255, &qword_1EEB44DA0, sub_1A9BD09C8, (void (*)(uint64_t))sub_1A9BD0ADC);
    sub_1A9B94CA0(255, &qword_1EEB44DF0, MEMORY[0x1E0CDFC10], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44D98);
  }
}

void sub_1A9BD09C8(uint64_t a1)
{
  sub_1A9BC2A70(a1, &qword_1EEB44DA8, sub_1A9BD09E4, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
}

void sub_1A9BD09E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EEB44DB0)
  {
    sub_1A9BD20E4(255, &qword_1EEB44DB8);
    v5[0] = v2;
    v5[1] = sub_1A9BD21D4(&qword_1EEB44DC0, &qword_1EEB44DB8, (uint64_t)&type metadata for VerticalBar, (uint64_t (*)(void))sub_1A9BD0A98);
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDEA98], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB44DB0);
  }
}

unint64_t sub_1A9BD0A98()
{
  unint64_t result;

  result = qword_1EEB44DC8;
  if (!qword_1EEB44DC8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF5B34, &type metadata for VerticalBar);
    atomic_store(result, (unint64_t *)&qword_1EEB44DC8);
  }
  return result;
}

void sub_1A9BD0ADC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44DD0)
  {
    sub_1A9BD0B5C(255);
    sub_1A9BA409C(&qword_1EEB44DE0, (uint64_t (*)(uint64_t))sub_1A9BD0B5C, sub_1A9BD0B8C, MEMORY[0x1E0CE0798]);
    v0 = sub_1A9CE71D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44DD0);
  }
}

void sub_1A9BD0B5C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB44DD8, type metadata accessor for XAxisBarLabel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for XAxisBarLabel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB44E68);
}

uint64_t sub_1A9BD0B8C()
{
  return sub_1A9B92B9C(&qword_1EEB44DE8, type metadata accessor for XAxisBarLabel, (uint64_t)&unk_1A9CEEE20);
}

unint64_t sub_1A9BD0BA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB44DF8;
  if (!qword_1EEB44DF8)
  {
    sub_1A9B92F34(255, &qword_1EEB44D88, type metadata accessor for DayRelativeDuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB44DF8);
  }
  return result;
}

uint64_t sub_1A9BD0C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = sub_1A9CE7008();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for WeekBarChartBars(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  v7 = v0 + ((v3 + v4 + v6) & ~v6) + *(int *)(v5 + 32);
  sub_1A9B92F34(0, &qword_1ED262698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDB2E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1A9CE73EC();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1A9BD0D14@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_1A9CE7008() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WeekBarChartBars(0) - 8) + 80);
  return sub_1A9BCD254(a1, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_1A9BD0D8C()
{
  return sub_1A9BCC5EC(&qword_1EEB44E00, &qword_1EEB44D90, (uint64_t (*)(uint64_t))sub_1A9BD092C);
}

uint64_t destroy for GoalLine(uint64_t a1)
{
  return sub_1A9BAAED8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t initializeWithCopy for GoalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1A9BAADF4(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GoalLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1A9BAADF4(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1A9BAAED8(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for GoalLine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1A9BAAED8(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for GoalLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GoalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GoalLine()
{
  return &type metadata for GoalLine;
}

_QWORD *sub_1A9BD0F50(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    *(_QWORD *)(a1 + 32) = a2[4];
    v7 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
    v8 = (char *)v4 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1A9CE6444();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return v4;
}

uint64_t sub_1A9BD100C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v2 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_1A9BD1050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BD10E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BD1180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BD1210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(type metadata accessor for DayRelativeDuration(0) + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1A9BD12B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BD12BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, type metadata accessor for DayRelativeDuration);
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 2)
    return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1A9BD1354()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BD1360(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, type metadata accessor for DayRelativeDuration);
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_1A9BD13E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BD13F8(a1, a2, a3, type metadata accessor for DayRelativeDuration);
}

uint64_t sub_1A9BD13F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9BD1464()
{
  return sub_1A9B92B9C(&qword_1EEB44EA0, (uint64_t (*)(uint64_t))sub_1A9BD1490, MEMORY[0x1E0CDFCF8]);
}

void sub_1A9BD1490()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44EA8)
  {
    sub_1A9B92F34(255, &qword_1EEB44EB0, (uint64_t (*)(uint64_t))sub_1A9BD1528, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44ED8, &qword_1EEB44EB0, (uint64_t (*)(uint64_t))sub_1A9BD1528);
    v0 = sub_1A9CE7ECC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44EA8);
  }
}

void sub_1A9BD1528()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44EB8)
  {
    sub_1A9BD15AC();
    sub_1A9B94CA0(255, &qword_1EEB44ED0, (uint64_t)&type metadata for GoalLine, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44EB8);
  }
}

void sub_1A9BD15AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44EC0)
  {
    sub_1A9BD1C20(255, &qword_1EEB44EC8);
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44EC0);
  }
}

unint64_t sub_1A9BD163C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44EE0;
  if (!qword_1EEB44EE0)
  {
    sub_1A9BD16C4();
    v2 = v1;
    v3[0] = sub_1A9BD18D4();
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1ED263350, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44EE0);
  }
  return result;
}

void sub_1A9BD16C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44EE8)
  {
    sub_1A9BD1740();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44EE8);
  }
}

void sub_1A9BD1740()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44EF0)
  {
    sub_1A9BD17BC();
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44EF0);
  }
}

void sub_1A9BD17BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44EF8)
  {
    sub_1A9B92F34(255, &qword_1EEB44F00, (uint64_t (*)(uint64_t))sub_1A9BD1854, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44F10, &qword_1EEB44F00, (uint64_t (*)(uint64_t))sub_1A9BD1854);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44EF8);
  }
}

void sub_1A9BD1854()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB44F08)
  {
    sub_1A9BD20E4(255, &qword_1ED263190);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB44F08);
  }
}

unint64_t sub_1A9BD18D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44F18;
  if (!qword_1EEB44F18)
  {
    sub_1A9BD1740();
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB44F20, (uint64_t (*)(uint64_t))sub_1A9BD17BC, MEMORY[0x1E0CDFCC0]);
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1EEB43E00, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44F18);
  }
  return result;
}

uint64_t sub_1A9BD1974()
{
  return sub_1A9B92B9C(&qword_1EEB44F28, (uint64_t (*)(uint64_t))sub_1A9BD19A0, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9BD19A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44F30)
  {
    sub_1A9B92F34(255, &qword_1EEB44F38, (uint64_t (*)(uint64_t))sub_1A9BD1A38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB44F80, &qword_1EEB44F38, (uint64_t (*)(uint64_t))sub_1A9BD1A38);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44F30);
  }
}

void sub_1A9BD1A38()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB44F40)
  {
    sub_1A9BCC414(255, &qword_1EEB44F48, (void (*)(uint64_t))sub_1A9BD1ABC);
    sub_1A9BD1BB4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB44F40);
  }
}

void sub_1A9BD1ABC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44F50)
  {
    sub_1A9BD1B34();
    sub_1A9B92B9C(&qword_1EEB44F68, (uint64_t (*)(uint64_t))sub_1A9BD1B34, MEMORY[0x1E0CDFB10]);
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44F50);
  }
}

void sub_1A9BD1B34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44F58)
  {
    sub_1A9BD0868();
    sub_1A9BA409C(&qword_1EEB44F60, (uint64_t (*)(uint64_t))sub_1A9BD0868, sub_1A9BD0D8C, MEMORY[0x1E0CDFEE8]);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44F58);
  }
}

void sub_1A9BD1BB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44F70)
  {
    sub_1A9BD1C20(255, &qword_1EEB44F78);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44F70);
  }
}

void sub_1A9BD1C20(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v3 = sub_1A9CE7164();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1A9BD1C94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BD1CA4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9BD1CB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44F88)
  {
    sub_1A9BD1D38(255, &qword_1EEB44F90, &qword_1EEB44F98);
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44F88);
  }
}

void sub_1A9BD1D38(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9BCC6A4(255, a3);
    v4 = sub_1A9CE7164();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1A9BD1D9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44FA0;
  if (!qword_1EEB44FA0)
  {
    sub_1A9BD1D38(255, &qword_1EEB44F90, &qword_1EEB44F98);
    v2 = v1;
    v3[0] = sub_1A9BD1E24();
    v3[1] = MEMORY[0x1E0CD90E0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44FA0);
  }
  return result;
}

unint64_t sub_1A9BD1E24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44FA8;
  if (!qword_1EEB44FA8)
  {
    sub_1A9BCC6A4(255, &qword_1EEB44F98);
    v2 = v1;
    v3[0] = sub_1A9BD1E9C();
    v3[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44FA8);
  }
  return result;
}

unint64_t sub_1A9BD1E9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEB43DA0;
  if (!qword_1EEB43DA0)
  {
    sub_1A9BD20E4(255, (unint64_t *)&qword_1EEB43898);
    v2[0] = MEMORY[0x1E0CDDD58];
    v2[1] = MEMORY[0x1E0CDA1F0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEB43DA0);
  }
  return result;
}

uint64_t sub_1A9BD1F14()
{
  uint64_t v0;

  sub_1A9BAAED8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

double sub_1A9BD1F3C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BCEB40(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1A9BD1F54()
{
  return sub_1A9BC2784(&qword_1EEB44FB0, (uint64_t (*)(uint64_t))sub_1A9BD1CB4, (uint64_t (*)(void))sub_1A9BD1D9C, sub_1A9BC15B8);
}

uint64_t sub_1A9BD1F88()
{
  return sub_1A9B92B9C(&qword_1EEB44FB8, (uint64_t (*)(uint64_t))sub_1A9BD1FB4, MEMORY[0x1E0CD9318]);
}

void sub_1A9BD1FB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44FC0)
  {
    sub_1A9BD2034(255);
    sub_1A9BC2784(&qword_1EEB44FE0, (uint64_t (*)(uint64_t))sub_1A9BD2034, (uint64_t (*)(void))sub_1A9BD212C, (uint64_t (*)(void))sub_1A9BA41BC);
    v0 = sub_1A9CE70BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44FC0);
  }
}

void sub_1A9BD2034(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB44FC8, (void (*)(uint64_t))sub_1A9BD2050);
}

void sub_1A9BD2050()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44FD0)
  {
    sub_1A9BD20E4(255, (unint64_t *)&qword_1EEB44FD8);
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44FD0);
  }
}

void sub_1A9BD20E4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1A9CE7164();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_1A9BD212C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB44FE8;
  if (!qword_1EEB44FE8)
  {
    sub_1A9BD2050();
    v2 = v1;
    v3[0] = sub_1A9BD21D4((unint64_t *)&qword_1EEB44FF0, (unint64_t *)&qword_1EEB44FD8, MEMORY[0x1E0CE0580], (uint64_t (*)(void))sub_1A9BD2248);
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1ED263350, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB44FE8);
  }
  return result;
}

uint64_t sub_1A9BD21D4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    sub_1A9BD20E4(255, a2);
    v8 = v7;
    v9[0] = a4();
    v9[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BD2248()
{
  unint64_t result;

  result = qword_1EEB44FF8;
  if (!qword_1EEB44FF8)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0558], MEMORY[0x1E0CE0580]);
    atomic_store(result, (unint64_t *)&qword_1EEB44FF8);
  }
  return result;
}

Swift::Double __swiftcall Double.init(hours:)(Swift::Double hours)
{
  return hours * 60.0 * 60.0;
}

Swift::Double __swiftcall Double.init(minutes:)(Swift::Double minutes)
{
  return minutes * 60.0;
}

Swift::Double __swiftcall Double.init(hours:)(Swift::Int hours)
{
  return (double)hours * 60.0 * 60.0;
}

Swift::Double __swiftcall Double.init(minutes:)(Swift::Int minutes)
{
  return (double)minutes * 60.0;
}

double static Double.hours(_:)(double a1)
{
  return a1 * 60.0 * 60.0;
}

double static Double.minutes(_:)(double a1)
{
  return a1 * 60.0;
}

double static Double.minutes(_:)(uint64_t a1)
{
  return (double)a1 * 60.0;
}

Swift::Double __swiftcall Double.init(hours:minutes:)(Swift::Int hours, Swift::Int minutes)
{
  Swift::Int v2;
  BOOL v3;
  uint64_t v4;
  Swift::Double result;

  v2 = 60 * hours;
  if ((unsigned __int128)(hours * (__int128)60) >> 64 == (60 * hours) >> 63)
  {
    v3 = __OFADD__(v2, minutes);
    v4 = v2 + minutes;
    if (!v3)
      return (double)v4 * 60.0;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double Double.minutes.getter(double a1)
{
  return a1 / 60.0;
}

double Double.hours.getter(double a1)
{
  return a1 / 60.0 / 60.0;
}

uint64_t Double.hoursAndMinutes.getter(double a1)
{
  uint64_t result;

  if (a1 >= 9.22337204e18 || a1 <= -9.22337204e18)
    return 0;
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
  {
    if (a1 > -9.22337204e18)
      return (uint64_t)a1 / 3600;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Double __swiftcall Double.roundToNearestMinute()()
{
  double v0;

  return round(v0 / 60.0) * 60.0;
}

uint64_t ScheduleOccurrenceEditModel.__allocating_init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v16;

  swift_allocObject();
  v16 = sub_1A9BD5470(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_release();
  return v16;
}

uint64_t ScheduleOccurrenceEditModel.showsAddButtonTitle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ScheduleOccurrenceEditModel.validScheduleRangeDidChange.getter()
{
  sub_1A9BD5C7C(0, (unint64_t *)&unk_1EEB45BB0, (uint64_t (*)(uint64_t))sub_1A9BD56E0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
  sub_1A9B92DF8();
  return sub_1A9CE6E88();
}

id ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v5;

  v1 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v2 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  objc_msgSend(v2, sel_copy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  swift_dynamicCast();
  objc_msgSend(v5, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&unk_1EEB4A1D0);
  swift_dynamicCast();
  v3 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = v5;

  return v2;
}

void ScheduleOccurrenceEditModel.alarmEnabled.setter(char a1)
{
  sub_1A9BD383C(a1, (SEL *)&selRef_setEnabled_);
}

uint64_t ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v15;
  uint64_t v16;

  v3 = v2;
  objc_msgSend(a1, sel_copy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  swift_dynamicCast();
  swift_beginAccess();
  v6 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v16;

  v7 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v8 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence) = a1;
  v9 = a1;

  v10 = a2 & ~(unint64_t)objc_msgSend(v9, sel_weekdays);
  swift_beginAccess();
  *(_QWORD *)(v3 + 56) = v10;
  v11 = objc_msgSend(*(id *)(v3 + v7), sel_alarmConfiguration);
  objc_msgSend(v11, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  sub_1A9CE6DA4();

  sub_1A9CE6DD4();
  if (v15)
  {
    v12 = *(id *)(v3 + v7);
    v13 = (void *)sub_1A9CE63CC();
    objc_msgSend(v15, sel_allowableRangeForModifiedOccurrence_gregorianCalendar_, v12, v13);

  }
  return sub_1A9CE6DE0();
}

uint64_t ScheduleOccurrenceEditModel.isValid.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char v4;
  uint64_t v6;
  char v7;

  if (!sub_1A9BD4CE0())
    goto LABEL_8;
  v1 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  if (*(_BYTE *)(v0 + 49) == 1)
  {
    if ((objc_msgSend(v2, sel_isSingleDayOverride) & 1) == 0)
    {
LABEL_8:
      v4 = 0;
      return v4 & 1;
    }
  }
  else
  {
    v3 = objc_msgSend(v2, sel_weekdays);
    if (v3 == (id)*MEMORY[0x1E0DA8498] || !objc_msgSend(*(id *)(v0 + v1), sel_weekdays))
      goto LABEL_8;
  }
  sub_1A9BD4EB4((uint64_t)&v6);
  v4 = v7 | (v6 == 0);
  return v4 & 1;
}

uint64_t ScheduleOccurrenceEditModel.alarmConfiguration.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  return v3;
}

uint64_t ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;

  v1 = *(unsigned __int8 *)(v0 + 49);
  v2 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  v4 = (void *)sub_1A9CE6018();
  if (v1 == 1)
  {
    v5 = (id)sub_1A9CE6018();
    v6 = (void *)sub_1A9CE63CC();
    objc_msgSend(v3, sel_applyHourAndMinuteFromBedtimeComponents_wakeUpComponents_gregorianCalendar_, v4, v5, v6);

  }
  else
  {
    objc_msgSend(v3, sel_setBedtimeComponents_, v4);

    v5 = *(id *)(v0 + v2);
    v6 = (void *)sub_1A9CE6018();
    objc_msgSend(v5, sel_setWakeUpComponents_, v6);
  }

  return sub_1A9CE6DA4();
}

uint64_t ScheduleOccurrenceEditModel.weekdays.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v6;

  v2 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_setWeekdays_, a1);
  sub_1A9CE6DD4();
  if (v6)
  {
    v3 = *(id *)(v1 + v2);
    v4 = (void *)sub_1A9CE63CC();
    objc_msgSend(v6, sel_allowableRangeForModifiedOccurrence_gregorianCalendar_, v3, v4);

  }
  sub_1A9CE6DE0();
  return sub_1A9CE6DA4();
}

uint64_t ScheduleOccurrenceEditModel.isValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:)(uint64_t a1, double a2, double a3, double a4)
{
  return ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(a1, 1, a2, a3, a4);
}

void ScheduleOccurrenceEditModel.isValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:)(char *a1, double a2, double a3, double a4)
{
  ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(a1, 1, a2, a3, a4);
}

uint64_t ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(uint64_t a1, int a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char v45;
  char v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  id v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char v56;
  char v57;
  double v58;
  uint64_t v59;
  char v60;
  char v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t result;
  double v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91[2];

  v89 = a2;
  sub_1A9BB7054(0, &qword_1EEB44250, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v9, v10);
  v87 = (char *)&v83 - v11;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v12, v13);
  v85 = (char *)&v83 - v14;
  v15 = sub_1A9CE60C0();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v88 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v86 = (char *)&v83 - v22;
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)&v83 - v25;
  v28 = MEMORY[0x1E0C80A78](v24, v27);
  v30 = (char *)&v83 - v29;
  v32 = MEMORY[0x1E0C80A78](v28, v31);
  v34 = (char *)&v83 - v33;
  v36 = MEMORY[0x1E0C80A78](v32, v35);
  v38 = (char *)&v83 - v37;
  MEMORY[0x1E0C80A78](v36, v39);
  v41 = (char *)&v83 - v40;
  sub_1A9CE6048();
  v43 = v42;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v44(v41, a1, v15);
  if ((v43 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v41, v15);
    return 0;
  }
  sub_1A9CE6084();
  v46 = v45;
  v47 = v41;
  v48 = *(void (**)(char *, uint64_t))(v16 + 8);
  v48(v47, v15);
  if ((v46 & 1) != 0)
    return 0;
  v49 = v90;
  v84 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v50 = objc_msgSend(*(id *)(v90 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_wakeUpComponents);
  sub_1A9CE6024();

  sub_1A9CE6048();
  LOBYTE(v50) = v51;
  v44(v34, (uint64_t)v38, v15);
  if ((v50 & 1) != 0)
  {
    v48(v34, v15);
    v48(v38, v15);
    return 0;
  }
  sub_1A9CE6084();
  v53 = v52;
  v48(v34, v15);
  v48(v38, v15);
  if ((v53 & 1) != 0)
    return 0;
  v44(v30, a1, v15);
  v54 = sub_1A9CE6048();
  v55 = v48;
  v57 = v56;
  v58 = (double)v54;
  v59 = sub_1A9CE6084();
  v61 = v60;
  v55(v30, v15);
  v62 = v58 * 60.0 * 60.0;
  if ((v57 & 1) != 0)
    v62 = 0.0;
  v63 = (double)v59 * 60.0;
  if ((v61 & 1) != 0)
    v63 = 0.0;
  sub_1A9C72EAC(v91, round((v62 + v63) / a5) * a5);
  v65 = v91[0];
  v64 = v91[1];
  v66 = objc_msgSend(*(id *)(v49 + v84), sel_wakeUpComponents);
  sub_1A9CE6024();

  v67 = sub_1A9CE6048();
  if ((v68 & 1) != 0)
    v69 = 0;
  else
    v69 = v67;
  v70 = sub_1A9CE6084();
  v72 = v71;
  v55(v26, v15);
  if ((v72 & 1) != 0)
    v73 = 0;
  else
    v73 = v70;
  result = sub_1A9BD5258(v65, v64, v69, v73);
  v76 = v75 > a4;
  if (v75 < a3)
    v76 = 1;
  v77 = !v76;
  if (v76 || (v89 & 1) != 0)
    return v77;
  if (v64 != 60 || !__OFADD__(v65, 1))
  {
    v78 = sub_1A9CE6444();
    v77 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v85, 1, 1, v78);
    v79 = sub_1A9CE6498();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v87, 1, 1, v79);
    v80 = v86;
    sub_1A9CE60A8();
    v81 = objc_msgSend(*(id *)(v49 + v84), sel_wakeUpComponents);
    v82 = v88;
    sub_1A9CE6024();

    ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
    v55(v82, v15);
    v55(v80, v15);
    return v77;
  }
  __break(1u);
  return result;
}

void ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(char *a1, int a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  char v44;
  void (*v45)(char *, char *, uint64_t);
  char v46;
  _BOOL4 v47;
  void (*v48)(char *, uint64_t);
  char v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  double v56;
  uint64_t v57;
  char v58;
  char v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  double v73;
  BOOL v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v84 = a2;
  sub_1A9BB7054(0, &qword_1EEB44250, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v10, v11);
  v82 = (char *)&v79 - v12;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v13, v14);
  v81 = (char *)&v79 - v15;
  v16 = sub_1A9CE60C0();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v80 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v83 = (char *)&v79 - v23;
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v79 - v26;
  v29 = MEMORY[0x1E0C80A78](v25, v28);
  v31 = (char *)&v79 - v30;
  v33 = MEMORY[0x1E0C80A78](v29, v32);
  v35 = (char *)&v79 - v34;
  v37 = MEMORY[0x1E0C80A78](v33, v36);
  v39 = (char *)&v79 - v38;
  MEMORY[0x1E0C80A78](v37, v40);
  v42 = (char *)&v79 - v41;
  v85 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v86 = v5;
  v43 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_bedtimeComponents);
  sub_1A9CE6024();

  sub_1A9CE6048();
  LOBYTE(v43) = v44;
  v45 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v45(v39, v42, v16);
  if ((v43 & 1) != 0)
  {
    v47 = 0;
  }
  else
  {
    sub_1A9CE6084();
    v47 = (v46 & 1) == 0;
  }
  v48 = *(void (**)(char *, uint64_t))(v17 + 8);
  v48(v39, v16);
  v48(v42, v16);
  if (v47)
  {
    sub_1A9CE6048();
    v50 = v49 & 1;
    v45(v35, a1, v16);
    if (v50)
    {
LABEL_24:
      v48(v35, v16);
      return;
    }
    sub_1A9CE6084();
    v52 = v51;
    v48(v35, v16);
    if ((v52 & 1) == 0)
    {
      v45(v31, a1, v16);
      v53 = sub_1A9CE6048();
      v55 = v54;
      v56 = (double)v53;
      v57 = sub_1A9CE6084();
      v59 = v58;
      v48(v31, v16);
      v60 = v56 * 60.0 * 60.0;
      if ((v55 & 1) != 0)
        v60 = 0.0;
      v61 = (double)v57 * 60.0;
      if ((v59 & 1) != 0)
        v61 = 0.0;
      sub_1A9C72EAC(v87, round((v60 + v61) / a5) * a5);
      v63 = v87[0];
      v62 = v87[1];
      v64 = v85;
      v65 = objc_msgSend(*(id *)(v86 + v85), sel_bedtimeComponents);
      sub_1A9CE6024();

      v66 = sub_1A9CE6048();
      v68 = (v67 & 1) != 0 ? 0 : v66;
      v69 = sub_1A9CE6084();
      v71 = v70;
      v48(v27, v16);
      v72 = (v71 & 1) != 0 ? 0 : v69;
      sub_1A9BD5258(v68, v72, v63, v62);
      v74 = v73 > a4;
      if (v73 < a3)
        v74 = 1;
      if (!v74 && (v84 & 1) == 0)
      {
        v75 = objc_msgSend(*(id *)(v86 + v64), sel_bedtimeComponents);
        v35 = v83;
        sub_1A9CE6024();

        if (v62 != 60 || !__OFADD__(v63, 1))
        {
          v76 = sub_1A9CE6444();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v81, 1, 1, v76);
          v77 = sub_1A9CE6498();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v82, 1, 1, v77);
          v78 = v80;
          sub_1A9CE60A8();
          ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
          v48(v78, v16);
          goto LABEL_24;
        }
        __break(1u);
      }
    }
  }
}

void ScheduleOccurrenceEditModel.alarmVolume.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  float v7;
  float v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;

  v2 = v1;
  v4 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v5, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v6 = objc_msgSend(v13, sel_soundVolume);

  if (!v6 || (objc_msgSend(v6, sel_floatValue), v8 = v7, v6, v8 != a1))
  {
    v9 = objc_msgSend(*(id *)(v2 + v4), sel_alarmConfiguration);
    objc_msgSend(v9, sel_mutableCopy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    v10 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    *(float *)&v11 = a1;
    v12 = objc_msgSend(v10, sel_initWithFloat_, v11);
    objc_msgSend(v13, sel_setSoundVolume_, v12);

    objc_msgSend(*(id *)(v2 + v4), sel_setAlarmConfiguration_, v13);
    sub_1A9CE6DA4();
    sub_1A9CE6DA4();

  }
}

void ScheduleOccurrenceEditModel.allowsSnooze.setter(char a1)
{
  sub_1A9BD383C(a1, (SEL *)&selRef_setAllowsSnooze_);
}

void sub_1A9BD383C(char a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  id v7;
  id v8;

  v4 = v2;
  v6 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v7 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v7, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  objc_msgSend(v8, *a2, a1 & 1);
  objc_msgSend(*(id *)(v4 + v6), sel_setAlarmConfiguration_, v8);
  sub_1A9CE6DA4();
  sub_1A9CE6DA4();

}

void ScheduleOccurrenceEditModel.toneIdentifier.setter(uint64_t a1, uint64_t a2)
{
  sub_1A9BD3960(a1, a2, (SEL *)&selRef_setToneIdentifier_);
}

void ScheduleOccurrenceEditModel.vibrationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  sub_1A9BD3960(a1, a2, (SEL *)&selRef_setVibrationIdentifier_);
}

void sub_1A9BD3960(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;

  v5 = v3;
  v7 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v8 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v8, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  if (a2)
  {
    v9 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v10, *a3, v9);

  objc_msgSend(*(id *)(v5 + v7), sel_setAlarmConfiguration_, v10);
  sub_1A9CE6DA4();
  sub_1A9CE6DA4();

}

uint64_t ScheduleOccurrenceEditModel.hasChanges.getter()
{
  uint64_t v0;
  void *v2;

  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    return 1;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  swift_beginAccess();
  return objc_msgSend(v2, sel_isEqual_, *(_QWORD *)(v0 + 40)) ^ 1;
}

uint64_t ScheduleOccurrenceEditModel.hasUpcomingSingleDayOverride.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;

  v1 = sub_1A9CE60C0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - v8;
  v10 = sub_1A9CE62E8();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v24 - v17;
  if ((*(_BYTE *)(v0 + 49) & 1) == 0)
  {
    sub_1A9CE6DD4();
    v19 = v27;
    if (!v27)
      return v19 & 1;
    v25 = v1;
    v20 = objc_msgSend(v27, sel_overrideOccurrence);

    v26 = v20;
    if (v20)
    {
      v21 = objc_msgSend(v26, sel_wakeUpComponents);
      sub_1A9CE6024();

      sub_1A9CE63E4();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v9, v10);
        sub_1A9CE62DC();
        LOBYTE(v19) = sub_1A9CE6264();

        v22 = *(void (**)(char *, uint64_t))(v11 + 8);
        v22(v15, v10);
        v22(v18, v10);
        return v19 & 1;
      }

      sub_1A9BD5744((uint64_t)v9);
    }
  }
  LOBYTE(v19) = 0;
  return v19 & 1;
}

BOOL ScheduleOccurrenceEditModel.scheduleConflictsWithOverride.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v14;
  void *v15;

  v1 = sub_1A9CE62E8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 49) & 1) != 0)
    return 0;
  sub_1A9CE6DD4();
  v6 = v15;
  if (!v15)
    return 0;
  v7 = objc_msgSend((id)objc_opt_self(), sel_templateModelForSchedule_, v15);
  v8 = objc_msgSend(v7, sel_modelByApplyingChangesFromOccurrence_, *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence));
  sub_1A9CE62DC();
  v9 = (void *)sub_1A9CE6258();
  v10 = objc_msgSend((id)objc_opt_self(), sel_builderWithSleepScheduleModel_date_, v8, v9);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v11 = objc_msgSend(v10, sel_buildTimelineWithOptions_, 2);
  v12 = objc_msgSend(v11, sel_sleepScheduleInvalidReason);

  return v12 == (id)3;
}

id ScheduleOccurrenceEditModel.alarmEnabled.getter()
{
  return sub_1A9BD46AC((SEL *)&selRef_isEnabled);
}

BOOL ScheduleOccurrenceEditModel.allowsDaySelection.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 49) & 1) == 0;
}

uint64_t ScheduleOccurrenceEditModel.alarmConfigurationDidChange.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.modelWasEdited.getter()
{
  return swift_retain();
}

void sub_1A9BD3EF4(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;
  v5 = v2;

}

id sub_1A9BD3F48()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 40);
}

uint64_t ScheduleOccurrenceEditModel.isSingleDayOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_1A9BD3F80()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 56);
}

uint64_t ScheduleOccurrenceEditModel.sleepDurationGoalPublisher.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.sleepSchedulePublisher.getter()
{
  return swift_retain();
}

uint64_t ScheduleOccurrenceEditModel.pairedWatchSupportsSleep.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ScheduleOccurrenceEditModel.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  v4 = sub_1A9CE6444();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1A9BD400C()
{
  qword_1EEB45000 = 0x4072C00000000000;
}

double static ScheduleOccurrenceEditModel.editingIncrement.getter()
{
  return sub_1A9BD409C(&qword_1EEB42C70, (uint64_t)&qword_1EEB45000);
}

void sub_1A9BD403C()
{
  qword_1EEB45008 = 0x40AC200000000000;
}

double static ScheduleOccurrenceEditModel.minimumTimeInBed.getter()
{
  return sub_1A9BD409C(&qword_1EEB42C78, (uint64_t)&qword_1EEB45008);
}

void sub_1A9BD406C()
{
  qword_1EEB45010 = 0x40F1940000000000;
}

double static ScheduleOccurrenceEditModel.maximumTimeInBed.getter()
{
  return sub_1A9BD409C(&qword_1EEB42C80, (uint64_t)&qword_1EEB45010);
}

double sub_1A9BD409C(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

uint64_t ScheduleOccurrenceEditModel.init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v9;

  v9 = sub_1A9BD5470(a1, a2, a3, a4, a5, a6, a7, a8);

  swift_release();
  swift_release();
  return v9;
}

uint64_t ScheduleOccurrenceEditModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  v2 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t ScheduleOccurrenceEditModel.__deallocating_deinit()
{
  ScheduleOccurrenceEditModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t ScheduleOccurrenceEditModel.ChangeSet.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SleepHealthUI::ScheduleOccurrenceEditModel::ChangeSet __swiftcall ScheduleOccurrenceEditModel.ChangeSet.init(rawValue:)(SleepHealthUI::ScheduleOccurrenceEditModel::ChangeSet rawValue)
{
  SleepHealthUI::ScheduleOccurrenceEditModel::ChangeSet *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ScheduleOccurrenceEditModel.ChangeSet.bedtime.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ScheduleOccurrenceEditModel.ChangeSet.wakeup.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ScheduleOccurrenceEditModel.ChangeSet.alarm.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

BOOL ScheduleOccurrenceEditModel.ChangeSet.hasOnlyBedtimeChanges.getter()
{
  _QWORD *v0;

  return *v0 == 1;
}

uint64_t ScheduleOccurrenceEditModel.ChangeSet.hasAnyAlarmChanges.getter()
{
  unsigned __int8 *v0;

  return (*v0 >> 2) & 1;
}

uint64_t sub_1A9BD4218(_QWORD *a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  return swift_dynamicCast();
}

void sub_1A9BD42CC(id *a1, _QWORD *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  v3 = *a1;
  objc_msgSend(v2, sel_setAlarmConfiguration_, v3);
  sub_1A9CE6DA4();
  sub_1A9CE6DA4();

}

void (*ScheduleOccurrenceEditModel.alarmEnabled.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  void *v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v4, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v5 = (void *)v3[4];
  LOBYTE(a1) = objc_msgSend(v5, sel_isEnabled);

  *((_BYTE *)v3 + 48) = (_BYTE)a1;
  return sub_1A9BD4434;
}

void sub_1A9BD4434(uint64_t a1, uint64_t a2)
{
  sub_1A9BD4870(a1, a2, (void (*)(_QWORD))ScheduleOccurrenceEditModel.alarmEnabled.setter);
}

float ScheduleOccurrenceEditModel.alarmVolume.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  float v3;
  float v4;
  id v6;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v1, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v2 = objc_msgSend(v6, sel_soundVolume);

  if (!v2)
    return *MEMORY[0x1E0DA8290];
  objc_msgSend(v2, sel_floatValue);
  v4 = v3;

  return v4;
}

void (*ScheduleOccurrenceEditModel.alarmVolume.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  _DWORD *v4;
  id v5;
  void *v6;
  id v7;
  int v8;
  int v9;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  v4 = v3 + 48;
  *((_QWORD *)v3 + 5) = v1;
  v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v5, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v6 = (void *)*((_QWORD *)v3 + 4);
  v7 = objc_msgSend(v6, sel_soundVolume);

  if (v7)
  {
    objc_msgSend(v7, sel_floatValue);
    v9 = v8;

  }
  else
  {
    v9 = *MEMORY[0x1E0DA8290];
  }
  *v4 = v9;
  return sub_1A9BD4674;
}

void sub_1A9BD4674(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  ScheduleOccurrenceEditModel.alarmVolume.setter(*(float *)(*(_QWORD *)a1 + 48));
  free(v1);
}

id ScheduleOccurrenceEditModel.allowsSnooze.getter()
{
  return sub_1A9BD46AC((SEL *)&selRef_allowsSnooze);
}

id sub_1A9BD46AC(SEL *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v6;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v4 = objc_msgSend(v6, *a1);

  return v4;
}

void (*ScheduleOccurrenceEditModel.allowsSnooze.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  void *v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v4, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v5 = (void *)v3[4];
  LOBYTE(a1) = objc_msgSend(v5, sel_allowsSnooze);

  *((_BYTE *)v3 + 48) = (_BYTE)a1;
  return sub_1A9BD4864;
}

void sub_1A9BD4864(uint64_t a1, uint64_t a2)
{
  sub_1A9BD4870(a1, a2, (void (*)(_QWORD))ScheduleOccurrenceEditModel.allowsSnooze.setter);
}

void sub_1A9BD4870(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(_QWORD *)a1 + 48));
  free(v3);
}

id ScheduleOccurrenceEditModel.toneIdentifier.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id result;
  void *v4;
  uint64_t v5;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  v2 = objc_msgSend(v1, sel_toneIdentifier);

  if (v2)
    goto LABEL_4;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedToneManager);
  if (result)
  {
    v4 = result;
    v2 = objc_msgSend(result, sel_defaultToneIdentifierForAlertType_topic_, 13, *MEMORY[0x1E0DBF760]);

    if (!v2)
      return 0;
LABEL_4:
    v5 = sub_1A9CE82E0();

    return (id)v5;
  }
  __break(1u);
  return result;
}

void (*ScheduleOccurrenceEditModel.toneIdentifier.modify(id *a1))(uint64_t *a1, char a2)
{
  void *v1;
  void *v3;

  a1[2] = v1;
  *a1 = ScheduleOccurrenceEditModel.toneIdentifier.getter();
  a1[1] = v3;
  return sub_1A9BD49B8;
}

void sub_1A9BD49B8(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ScheduleOccurrenceEditModel.toneIdentifier.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    ScheduleOccurrenceEditModel.toneIdentifier.setter(*a1, v2);
  }
}

uint64_t ScheduleOccurrenceEditModel.vibrationIdentifier.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  v2 = objc_msgSend(v1, sel_vibrationIdentifier);

  if (!v2)
    return 0;
  v3 = sub_1A9CE82E0();

  return v3;
}

void sub_1A9BD4AA4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  v4 = objc_msgSend(v3, sel_vibrationIdentifier);

  if (v4)
  {
    v5 = sub_1A9CE82E0();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void (*ScheduleOccurrenceEditModel.vibrationIdentifier.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = v1;
  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  v4 = objc_msgSend(v3, sel_vibrationIdentifier);

  if (v4)
  {
    v5 = sub_1A9CE82E0();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1A9BD4BD0;
}

void sub_1A9BD4BD0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ScheduleOccurrenceEditModel.vibrationIdentifier.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    ScheduleOccurrenceEditModel.vibrationIdentifier.setter(*a1, v2);
  }
}

uint64_t ScheduleOccurrenceEditModel.validScheduleRange.getter()
{
  uint64_t v1;

  sub_1A9CE6DD4();
  return v1;
}

id ScheduleOccurrenceEditModel.weekdays.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
}

uint64_t (*ScheduleOccurrenceEditModel.weekdays.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
  return sub_1A9BD4CC0;
}

uint64_t sub_1A9BD4CC0(uint64_t *a1)
{
  return ScheduleOccurrenceEditModel.weekdays.setter(*a1);
}

BOOL sub_1A9BD4CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  char v21;
  void (*v22)(char *, char *, uint64_t);
  char v23;
  _BOOL8 v24;
  void (*v25)(char *, uint64_t);
  id v26;
  char v27;
  char v28;
  uint64_t v30;

  v1 = v0;
  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v5, v8);
  v11 = (char *)&v30 - v10;
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  v15 = (char *)&v30 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v30 - v17;
  v19 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
  v20 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_bedtimeComponents);
  sub_1A9CE6024();

  sub_1A9CE6048();
  LOBYTE(v20) = v21;
  v22 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v22(v15, v18, v2);
  if ((v20 & 1) != 0)
  {
    v24 = 0;
  }
  else
  {
    sub_1A9CE6084();
    v24 = (v23 & 1) == 0;
  }
  v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v15, v2);
  v25(v18, v2);
  if (v24)
  {
    v26 = objc_msgSend(*(id *)(v1 + v19), sel_wakeUpComponents);
    sub_1A9CE6024();

    sub_1A9CE6048();
    LOBYTE(v26) = v27;
    v22(v7, v11, v2);
    if ((v26 & 1) != 0)
    {
      v24 = 0;
    }
    else
    {
      sub_1A9CE6084();
      v24 = (v28 & 1) == 0;
    }
    v25(v7, v2);
    v25(v11, v2);
  }
  return v24;
}

uint64_t sub_1A9BD4EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  void *v29;
  id v30;
  id v31;
  id v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void *v72;

  v2 = v1;
  v4 = sub_1A9CE60C0();
  v71 = *(char **)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v63 - v11;
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v63 - v15;
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  v20 = (char *)&v63 - v19;
  v22 = MEMORY[0x1E0C80A78](v18, v21);
  v24 = (char *)&v63 - v23;
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (char *)&v63 - v26;
  result = sub_1A9CE6DD4();
  v29 = v72;
  if (v72)
  {
    v67 = v72;
    v68 = v12;
    v69 = v8;
    v70 = a1;
    v65 = OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence;
    v66 = v2;
    v30 = *(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v31 = objc_msgSend(v30, sel_bedtimeComponents);
    sub_1A9CE6024();

    v63 = v30;
    v32 = objc_msgSend(v30, sel_wakeUpComponents);
    sub_1A9CE6024();

    v33 = v71;
    v34 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v71 + 2);
    v64 = v27;
    v34(v20, v27, v4);
    v35 = sub_1A9CE6048();
    if ((v36 & 1) != 0)
      v37 = 0;
    else
      v37 = v35;
    v38 = sub_1A9CE6084();
    v40 = v39;
    v41 = (void (*)(char *, uint64_t))*((_QWORD *)v33 + 1);
    v41(v20, v4);
    if ((v40 & 1) != 0)
      v42 = 0;
    else
      v42 = v38;
    v71 = v24;
    v34(v16, v24, v4);
    v43 = sub_1A9CE6048();
    if ((v44 & 1) != 0)
      v45 = 0;
    else
      v45 = v43;
    v46 = sub_1A9CE6084();
    v48 = v47;
    v41(v16, v4);
    if ((v48 & 1) != 0)
      v49 = 0;
    else
      v49 = v46;
    sub_1A9BD5258(v37, v42, v45, v49);
    v51 = v50;
    if (qword_1EEB42F18 != -1)
      swift_once();
    v52 = 8 * (*(double *)&qword_1EEB49FC8 < v51);
    v54 = v68;
    v53 = v69;
    v29 = v67;
    if (qword_1EEB42F10 != -1)
      swift_once();
    if (v51 < *(double *)&qword_1EEB49FC0)
      v55 = v52 | 4;
    else
      v55 = v52;
    v41(v71, v4);
    v41(v64, v4);

    v57 = v65;
    v56 = v66;
    v58 = objc_msgSend(*(id *)(v66 + v65), sel_bedtimeComponents);
    sub_1A9CE6024();

    v59 = objc_msgSend(*(id *)(v56 + v57), sel_wakeUpComponents);
    sub_1A9CE6024();

    v60 = sub_1A9C5A0D4();
    LOBYTE(v57) = sub_1A9C5A2A4();

    if ((v57 & 1) != 0)
      v61 = v60 & 1 | 2;
    else
      v61 = v60 & 1;
    v41(v53, v4);
    result = ((uint64_t (*)(char *, uint64_t))v41)(v54, v4);
    v62 = v61 | v55;
    a1 = v70;
  }
  else
  {
    v62 = 0;
  }
  *(_QWORD *)a1 = v62;
  *(_BYTE *)(a1 + 8) = v29 == 0;
  return result;
}

uint64_t sub_1A9BD5258(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  v4 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v5 < 0)
  {
    v6 = -60;
    if (v5 > -60)
      v6 = a4 - a2;
    v7 = v6 + a2;
    if (v7 == a4)
      v8 = a4;
    else
      v8 = a4 + 1;
    v9 = (v7 - v8) / 0x3CuLL;
    if (v7 != a4)
      ++v9;
    while ((a3 ^ 0x8000000000000000) - result > v9)
    {
      --v4;
      v10 = v5 < -60;
      v5 += 60;
      if (!v10)
        return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

void sub_1A9BD535C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;

  v1 = v0[2];
  v2 = v1 - *v0;
  if (__OFSUB__(v1, *v0))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v3 = v0[1];
  v4 = v0[3];
  v5 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (v5 < 0)
  {
    v6 = -60;
    if (v5 > -60)
      v6 = v4 - v3;
    v7 = v3 + v6;
    if (v7 == v4)
      v8 = v0[3];
    else
      v8 = v4 + 1;
    v9 = v7 == v4;
    v10 = v1 ^ 0x8000000000000000;
    v11 = (v7 - v8) / 0x3CuLL;
    if (!v9)
      ++v11;
    v12 = v10 - *v0;
    while (v12 > v11)
    {
      --v2;
      v13 = v5 < -60;
      v5 += 60;
      if (!v13)
        return;
    }
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t sub_1A9BD5470(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;

  v9 = v8;
  sub_1A9B92B28();
  swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_1A9CE6DB0();
  sub_1A9BD5C7C(0, (unint64_t *)&qword_1EEB42FB0, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceEditModel, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  swift_allocObject();
  *(_QWORD *)(v8 + 24) = sub_1A9CE6DB0();
  sub_1A9BD5C7C(0, (unint64_t *)&unk_1EEB45BB0, (uint64_t (*)(uint64_t))sub_1A9BD56E0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
  swift_allocObject();
  *(_QWORD *)(v8 + 32) = sub_1A9CE6DF8();
  objc_msgSend(a1, sel_copy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  swift_dynamicCast();
  *(_QWORD *)(v8 + 40) = v23;
  *(_QWORD *)(v8 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence) = a1;
  *(_BYTE *)(v8 + 48) = a2;
  v17 = a8;
  *(_BYTE *)(v8 + 49) = a3;
  *(_QWORD *)(v8 + 56) = a4 & ~(unint64_t)objc_msgSend(a1, sel_weekdays);
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 72) = a6;
  *(_BYTE *)(v8 + 80) = a7;
  v18 = v8 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  v19 = sub_1A9CE6444();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v17, v19);
  swift_retain();
  swift_retain();
  sub_1A9CE6DD4();
  sub_1A9CE6DE0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
  return v9;
}

void sub_1A9BD56E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43000)
  {
    sub_1A9B94A18(255, (unint64_t *)&unk_1EEB45BC0);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43000);
  }
}

uint64_t sub_1A9BD5744(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A9BD5794()
{
  unint64_t result;

  result = qword_1EEB45020;
  if (!qword_1EEB45020)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceEditModel.ChangeSet, &type metadata for ScheduleOccurrenceEditModel.ChangeSet);
    atomic_store(result, (unint64_t *)&qword_1EEB45020);
  }
  return result;
}

unint64_t sub_1A9BD57DC()
{
  unint64_t result;

  result = qword_1EEB45028;
  if (!qword_1EEB45028)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceEditModel.ChangeSet, &type metadata for ScheduleOccurrenceEditModel.ChangeSet);
    atomic_store(result, (unint64_t *)&qword_1EEB45028);
  }
  return result;
}

unint64_t sub_1A9BD5824()
{
  unint64_t result;

  result = qword_1EEB45030;
  if (!qword_1EEB45030)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceEditModel.ChangeSet, &type metadata for ScheduleOccurrenceEditModel.ChangeSet);
    atomic_store(result, (unint64_t *)&qword_1EEB45030);
  }
  return result;
}

unint64_t sub_1A9BD586C()
{
  unint64_t result;

  result = qword_1EEB45038;
  if (!qword_1EEB45038)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleOccurrenceEditModel.ChangeSet, &type metadata for ScheduleOccurrenceEditModel.ChangeSet);
    atomic_store(result, (unint64_t *)&qword_1EEB45038);
  }
  return result;
}

id sub_1A9BD58B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 40);
  *a2 = v4;
  return v4;
}

uint64_t sub_1A9BD58F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 56);
  return result;
}

uint64_t sub_1A9BD593C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 56) = v2;
  return result;
}

id sub_1A9BD5984@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = ScheduleOccurrenceEditModel.alarmEnabled.getter();
  *a1 = result & 1;
  return result;
}

void sub_1A9BD59B0(char *a1)
{
  ScheduleOccurrenceEditModel.alarmEnabled.setter(*a1);
}

void sub_1A9BD59D4(float *a1@<X8>)
{
  *a1 = ScheduleOccurrenceEditModel.alarmVolume.getter();
}

void sub_1A9BD59FC(float *a1)
{
  ScheduleOccurrenceEditModel.alarmVolume.setter(*a1);
}

id sub_1A9BD5A20@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = ScheduleOccurrenceEditModel.allowsSnooze.getter();
  *a1 = result & 1;
  return result;
}

void sub_1A9BD5A4C(char *a1)
{
  ScheduleOccurrenceEditModel.allowsSnooze.setter(*a1);
}

id sub_1A9BD5A70@<X0>(_QWORD *a1@<X8>)
{
  id result;
  uint64_t v3;

  result = ScheduleOccurrenceEditModel.toneIdentifier.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A9BD5A98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_12Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.toneIdentifier.setter);
}

uint64_t sub_1A9BD5AA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_12Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))ScheduleOccurrenceEditModel.vibrationIdentifier.setter);
}

uint64_t keypath_set_12Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

id sub_1A9BD5AF4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_weekdays);
  *a2 = result;
  return result;
}

uint64_t sub_1A9BD5B30(uint64_t *a1)
{
  return ScheduleOccurrenceEditModel.weekdays.setter(*a1);
}

uint64_t sub_1A9BD5B54()
{
  return type metadata accessor for ScheduleOccurrenceEditModel();
}

uint64_t type metadata accessor for ScheduleOccurrenceEditModel()
{
  uint64_t result;

  result = qword_1EEB45068;
  if (!qword_1EEB45068)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BD5B98()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for ScheduleOccurrenceEditModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.originalOccurrence.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.otherOccurrenceDays.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModel.__allocating_init(occurrence:isAdding:isSingleDayOverride:weekdaysWithExistingOccurrences:sleepDurationGoalPublisher:sleepSchedulePublisher:pairedWatchSupportsSleep:gregorianCalendar:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

ValueMetadata *type metadata accessor for ScheduleOccurrenceEditModel.ChangeSet()
{
  return &type metadata for ScheduleOccurrenceEditModel.ChangeSet;
}

void sub_1A9BD5C7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1A9BD5CE8()
{
  qword_1EEB45190 = 0x4034000000000000;
}

void sub_1A9BD5CF8()
{
  qword_1EEB45198 = 0x4028000000000000;
}

void sub_1A9BD5D08()
{
  qword_1EEB451A0 = 0x4028000000000000;
}

void sub_1A9BD5D18()
{
  qword_1EEB451A8 = 0x4000000000000000;
}

void sub_1A9BD5D28()
{
  qword_1EEB451B0 = 0x4034000000000000;
}

void sub_1A9BD5D38(char *a1, _QWORD *a2)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  *(_BYTE *)(v3 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = v2;
  sub_1A9C5B3A8();
  swift_endAccess();
  sub_1A9BD7564();
}

uint64_t sub_1A9BD5DAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32));
}

void sub_1A9BD5DFC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  *(_BYTE *)(v4 + *(int *)(type metadata accessor for SleepScheduleComponentsViewModel() + 32)) = a1;
  sub_1A9C5B3A8();
  swift_endAccess();
  sub_1A9BD7564();
}

void (*sub_1A9BD5E74(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = type metadata accessor for SleepScheduleComponentsViewModel();
  v3[8] = v6;
  *((_BYTE *)v3 + 72) = *(_BYTE *)(v5 + *(int *)(v6 + 32));
  return sub_1A9BD5EF0;
}

void sub_1A9BD5EF0(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48) + *(_QWORD *)(*(_QWORD *)a1 + 56);
  swift_beginAccess();
  *(_BYTE *)(v4 + *(int *)(v3 + 32)) = v2;
  sub_1A9C5B3A8();
  swift_endAccess();
  sub_1A9BD7564();
  free(v1);
}

id sub_1A9BD5F64()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
    v5 = (char *)objc_allocWithZone(v4);
    *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
    v10.receiver = v5;
    v10.super_class = v4;
    v6 = objc_msgSendSuper2(&v10, sel_init);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void sub_1A9BD5FFC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    sub_1A9BD8C44(a2);

  }
}

void sub_1A9BD6078(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  const void *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  double v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  id v75;
  _OWORD __src[25];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[12];
  _OWORD __dst[25];
  objc_super v91;
  CGRect v92;

  v2 = v1;
  v91.receiver = v1;
  v91.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  objc_msgSendSuper2(&v91, sel_willMoveToWindow_, a1);
  if (a1)
  {
    v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock];
    v75 = a1;
    objc_msgSend(v75, sel_bounds);
    if (CGRectGetWidth(v92) <= 320.0)
    {
      if (qword_1EEB42E50 != -1)
        swift_once();
      v5 = &unk_1EEB574B0;
    }
    else
    {
      if (qword_1EEB42E48 != -1)
        swift_once();
      v5 = &unk_1EEB57328;
    }
    memcpy(__dst, v5, 0x188uLL);
    v74 = *(_QWORD *)&__dst[12];
    v73 = __dst[11];
    v72 = __dst[10];
    v71 = __dst[9];
    v69 = __dst[8];
    v68 = *((_QWORD *)&__dst[7] + 1);
    v67 = *(_QWORD *)&__dst[7];
    v66 = __dst[6];
    v65 = *((_QWORD *)&__dst[5] + 1);
    v63 = *(_QWORD *)&__dst[5];
    v61 = *((_QWORD *)&__dst[4] + 1);
    v6 = __dst[4];
    v7 = __dst[3];
    v58 = __dst[1];
    v59 = __dst[2];
    v70 = *(_QWORD *)&__dst[24];
    v8 = __dst[23];
    v64 = *((_QWORD *)&__dst[21] + 1);
    v62 = __dst[22];
    v60 = *(_QWORD *)&__dst[21];
    v9 = *((_QWORD *)&__dst[20] + 1);
    v10 = *(_QWORD *)&__dst[20];
    v11 = *((_QWORD *)&__dst[19] + 1);
    v12 = *(_QWORD *)&__dst[19];
    v56 = __dst[18];
    v57 = __dst[0];
    v13 = *((_QWORD *)&__dst[17] + 1);
    v14 = *(_QWORD *)&__dst[17];
    v15 = *((_QWORD *)&__dst[16] + 1);
    v16 = *(_QWORD *)&__dst[16];
    v17 = *((_QWORD *)&__dst[15] + 1);
    v18 = *(_QWORD *)&__dst[15];
    v19 = *((_QWORD *)&__dst[14] + 1);
    v20 = __dst[14];
    v21 = *((_QWORD *)&__dst[13] + 1);
    v55 = *(_OWORD *)((char *)&__dst[12] + 8);
    sub_1A9BD7A70((uint64_t)__dst);
    __src[0] = v57;
    __src[1] = v58;
    __src[2] = v59;
    __src[3] = v7;
    LODWORD(__src[4]) = v6;
    *((_QWORD *)&__src[4] + 1) = v61;
    *(_QWORD *)&__src[5] = v63;
    *((_QWORD *)&__src[5] + 1) = v65;
    __src[6] = v66;
    *(_QWORD *)&__src[7] = v67;
    *((_QWORD *)&__src[7] + 1) = v68;
    __src[8] = v69;
    __src[9] = v71;
    __src[10] = v72;
    __src[11] = v73;
    *(_QWORD *)&__src[12] = v74;
    *(_OWORD *)((char *)&__src[12] + 8) = v55;
    *((_QWORD *)&__src[13] + 1) = v21;
    LODWORD(__src[14]) = v20;
    *((_QWORD *)&__src[14] + 1) = v19;
    *(_QWORD *)&__src[15] = v18;
    *((_QWORD *)&__src[15] + 1) = v17;
    *(_QWORD *)&__src[16] = v16;
    *((_QWORD *)&__src[16] + 1) = v15;
    *(_QWORD *)&__src[17] = v14;
    *((_QWORD *)&__src[17] + 1) = v13;
    __src[18] = v56;
    *(_QWORD *)&__src[19] = v12;
    *((_QWORD *)&__src[19] + 1) = v11;
    *(_QWORD *)&__src[20] = v10;
    *((_QWORD *)&__src[20] + 1) = v9;
    *(_QWORD *)&__src[21] = v60;
    *((_QWORD *)&__src[21] + 1) = v64;
    __src[22] = v62;
    __src[23] = v8;
    v22 = v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
    *(_QWORD *)&__src[24] = v70;
    memcpy(__dst, (const void *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration), 0x188uLL);
    memcpy((void *)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration), __src, 0x188uLL);
    sub_1A9BD7A70((uint64_t)__src);
    sub_1A9BD7B58((uint64_t)__dst);
    sub_1A9C24CB4();
    v23 = *(char **)(v4 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_dial);
    v24 = *(_OWORD *)(v22 + 216);
    v25 = *(_OWORD *)(v22 + 248);
    v26 = *(_OWORD *)(v22 + 200);
    v79 = *(_OWORD *)(v22 + 232);
    v80 = v25;
    v77 = v26;
    v78 = v24;
    v27 = *(_OWORD *)(v22 + 312);
    v29 = *(_OWORD *)(v22 + 264);
    v28 = *(_OWORD *)(v22 + 280);
    v83 = *(_OWORD *)(v22 + 296);
    v84 = v27;
    v81 = v29;
    v82 = v28;
    v30 = *(_OWORD *)(v22 + 376);
    v32 = *(_OWORD *)(v22 + 328);
    v31 = *(_OWORD *)(v22 + 344);
    v87 = *(_OWORD *)(v22 + 360);
    v88 = v30;
    v85 = v32;
    v86 = v31;
    v33 = &v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v34 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 160];
    v36 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 128];
    v35 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 144];
    v89[11] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 176];
    v89[9] = v35;
    v89[10] = v34;
    v89[8] = v36;
    v37 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 112];
    v39 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 64];
    v38 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 80];
    v89[6] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 96];
    v89[7] = v37;
    v89[4] = v39;
    v89[5] = v38;
    v40 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 48];
    v42 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration];
    v41 = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 16];
    v89[2] = *(_OWORD *)&v23[OBJC_IVAR____TtC13SleepHealthUI22SleepScheduleClockDial_configuration + 32];
    v89[3] = v40;
    v89[0] = v42;
    v89[1] = v41;
    v43 = v77;
    v44 = v78;
    v45 = v80;
    *((_OWORD *)v33 + 2) = v79;
    *((_OWORD *)v33 + 3) = v45;
    *(_OWORD *)v33 = v43;
    *((_OWORD *)v33 + 1) = v44;
    v46 = v81;
    v47 = v82;
    v48 = v84;
    *((_OWORD *)v33 + 6) = v83;
    *((_OWORD *)v33 + 7) = v48;
    *((_OWORD *)v33 + 4) = v46;
    *((_OWORD *)v33 + 5) = v47;
    v49 = v85;
    v50 = v86;
    v51 = v88;
    *((_OWORD *)v33 + 10) = v87;
    *((_OWORD *)v33 + 11) = v51;
    *((_OWORD *)v33 + 8) = v49;
    *((_OWORD *)v33 + 9) = v50;
    sub_1A9BD7C48((uint64_t)&v77);
    sub_1A9BD7C48((uint64_t)&v77);
    sub_1A9BD7CE4((uint64_t)v89);
    objc_msgSend(v23, sel_setNeedsDisplay);
    sub_1A9BD7CE4((uint64_t)&v77);
    sub_1A9BD7B58((uint64_t)__src);
    v52 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint];
    if (v52)
    {
      v53 = *(double *)(v22 + 72);
      v54 = v52;
      objc_msgSend(v54, sel_setConstant_, v53);

    }
  }
}

id sub_1A9BD656C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  double MinX;
  double v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  v1 = v0;
  swift_getObjectType();
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    v14 = sub_1A9B91D6C(v7, v8, &v15);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption], sel_layoutIfNeeded);
  v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  objc_msgSend(v9, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  CGRectGetWidth(v17);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_);
  objc_msgSend(v1, sel_bounds);
  MinX = CGRectGetMinX(v18);
  objc_msgSend(v1, sel_directionalLayoutMargins);
  v12 = MinX + v11;
  objc_msgSend(v9, sel_frame);
  objc_msgSend(v9, sel_setFrame_, v12);
  sub_1A9BEE750();
  objc_msgSend(v9, sel_frame);
  CGRectGetHeight(v19);
  if (qword_1EEB42CA0 != -1)
    swift_once();
  objc_msgSend(v9, sel_frame, v14, v15);
  return objc_msgSend(v9, sel_setFrame_);
}

void sub_1A9BD688C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, char *, uint64_t);
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char *v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char *v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;

  v8 = v7;
  LODWORD(v88) = a7;
  v87 = a3;
  LODWORD(v86) = a4 & 1;
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v84 - v15;
  v92 = sub_1A9CE60C0();
  v17 = *(_QWORD *)(v92 - 8);
  v19 = MEMORY[0x1E0C80A78](v92, v18);
  v91 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v89 = (char *)&v84 - v23;
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v84 - v25;
  v27 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock);
  v28 = *(double *)(v27 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 152);
  v29 = *(double *)(v27 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 160);
  v90 = v27 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  v30 = (__int128 *)(v27 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  v85 = a2;
  sub_1A9C6C394(a1, a2, v87, (int)v86, a6, (int)v88, v28, v29);
  swift_endAccess();
  sub_1A9C24914();
  v87 = v8;
  v31 = (_BYTE *)(v8 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model);
  swift_beginAccess();
  *v31 = a6;
  v32 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v33 = v32[7];
  v34 = *(void **)&v31[v33];
  *(_QWORD *)&v31[v33] = a5;
  v35 = a5;

  if (!a5)
  {
    v43 = v32[15];
    v86 = v32 + 15;
    *(_QWORD *)&v31[v43] = 0;
    v42 = v85;
    goto LABEL_9;
  }
  v36 = sub_1A9C5A0D4();
  v37 = sub_1A9C5A2A4();
  v38 = v32[15];
  v86 = v32 + 15;
  if ((v37 & 1) != 0)
    v39 = v36 & 1 | 2;
  else
    v39 = v36 & 1;
  *(_QWORD *)&v31[v38] = v39;
  v40 = (v39 & 1) == 0;
  v41 = v39 & 1;
  if ((v39 & 1) != 0)
  {
    v42 = v85;
    goto LABEL_10;
  }
  v42 = v85;
  if ((v37 & 1) == 0)
  {
LABEL_9:
    v41 = 0;
    v40 = 0;
  }
LABEL_10:
  v31[v32[13]] = v41;
  v31[v32[14]] = v40;

  v44 = v42;
  v45 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v26, v44, v92);
  v46 = *(void (**)(_BYTE *, char *, uint64_t))(v17 + 24);
  v46(&v31[v32[11]], v26, v45);
  sub_1A9C5B3A8();
  v88 = *(void (**)(char *, uint64_t))(v17 + 8);
  v88(v26, v45);
  swift_endAccess();
  v47 = *((_QWORD *)v30 + 4);
  v48 = *((_BYTE *)v30 + 40);
  v49 = *((_BYTE *)v30 + 41);
  v50 = *((_BYTE *)v30 + 42);
  v93 = *v30;
  v94 = v30[1];
  v95 = v47;
  v96 = v48;
  v97 = v49;
  v98 = v50;
  v51 = v89;
  sub_1A9C6BD5C(*(double *)(v90 + 144));
  swift_beginAccess();
  v46(&v31[v32[9]], v51, v45);
  if (!*(_QWORD *)&v31[v32[7]])
  {
    *(_QWORD *)&v31[*v86] = 0;
LABEL_18:
    v55 = 0;
    v56 = 0;
    goto LABEL_19;
  }
  v52 = sub_1A9C5A0D4();
  v53 = sub_1A9C5A2A4();
  if ((v53 & 1) != 0)
    v54 = v52 & 1 | 2;
  else
    v54 = v52 & 1;
  *(_QWORD *)&v31[v32[15]] = v54;
  v55 = v54 & 1;
  v56 = (v54 & 1) == 0;
  if ((v54 & 1) == 0 && (v53 & 1) == 0)
    goto LABEL_18;
LABEL_19:
  v31[v32[13]] = v55;
  v31[v32[14]] = v56;
  sub_1A9CE63E4();
  v57 = sub_1A9C5C990((uint64_t)v16, (uint64_t)v31);
  v59 = v58;
  sub_1A9BD5744((uint64_t)v16);
  v60 = (uint64_t *)&v31[v32[18]];
  swift_bridgeObjectRelease();
  *v60 = v57;
  v60[1] = v59;
  sub_1A9CE63E4();
  v61 = sub_1A9C5C990((uint64_t)v16, (uint64_t)v31);
  v63 = v62;
  sub_1A9BD5744((uint64_t)v16);
  v64 = (uint64_t *)&v31[v32[19]];
  swift_bridgeObjectRelease();
  *v64 = v61;
  v64[1] = v63;
  sub_1A9C5B3A8();
  v65 = v92;
  v88(v89, v92);
  swift_endAccess();
  v66 = *((_QWORD *)v30 + 4);
  v67 = *((_BYTE *)v30 + 40);
  v68 = *((_BYTE *)v30 + 41);
  v69 = *((_BYTE *)v30 + 42);
  v93 = *v30;
  v94 = v30[1];
  v95 = v66;
  v96 = v67;
  v97 = v68;
  v98 = v69;
  v70 = v91;
  sub_1A9C6BF60(*(double *)(v90 + 144));
  swift_beginAccess();
  v46(&v31[v32[10]], v70, v65);
  if (!*(_QWORD *)&v31[v32[7]])
  {
    *(_QWORD *)&v31[*v86] = 0;
LABEL_27:
    v74 = 0;
    v75 = 0;
    goto LABEL_28;
  }
  v71 = sub_1A9C5A0D4();
  v72 = sub_1A9C5A2A4();
  if ((v72 & 1) != 0)
    v73 = v71 & 1 | 2;
  else
    v73 = v71 & 1;
  *(_QWORD *)&v31[v32[15]] = v73;
  v74 = v73 & 1;
  v75 = (v73 & 1) == 0;
  if ((v73 & 1) == 0 && (v72 & 1) == 0)
    goto LABEL_27;
LABEL_28:
  v31[v32[13]] = v74;
  v31[v32[14]] = v75;
  sub_1A9CE63E4();
  v76 = sub_1A9C5C990((uint64_t)v16, (uint64_t)v31);
  v78 = v77;
  sub_1A9BD5744((uint64_t)v16);
  v79 = (uint64_t *)&v31[v32[18]];
  swift_bridgeObjectRelease();
  *v79 = v76;
  v79[1] = v78;
  sub_1A9CE63E4();
  v80 = sub_1A9C5C990((uint64_t)v16, (uint64_t)v31);
  v82 = v81;
  sub_1A9BD5744((uint64_t)v16);
  v83 = (uint64_t *)&v31[v32[19]];
  swift_bridgeObjectRelease();
  *v83 = v80;
  v83[1] = v82;
  sub_1A9C5B3A8();
  v88(v91, v92);
  swift_endAccess();
  sub_1A9BD7564();
}

void sub_1A9BD6ED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int *v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;

  v2 = v1;
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v65 - v6;
  v8 = sub_1A9CE60C0();
  v9 = *(void (**)(char *, uint64_t))(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v71 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v65 - v14;
  v16 = (__int128 *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  v17 = *((_QWORD *)v16 + 4);
  v18 = *((_BYTE *)v16 + 40);
  v19 = *((_BYTE *)v16 + 41);
  v20 = *((_BYTE *)v16 + 42);
  v21 = v16[1];
  v72 = *v16;
  v73 = v21;
  v74 = v17;
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v67 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  sub_1A9C6BD5C(*(double *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144));
  v22 = v2 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  v23 = (int *)type metadata accessor for SleepScheduleComponentsViewModel();
  v24 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v9 + 3);
  v25 = v22 + v23[9];
  v69 = v8;
  v66 = v24;
  v24(v25, v15, v8);
  v26 = *(_QWORD *)(v22 + v23[7]);
  v70 = v2;
  v68 = v9;
  if (!v26)
  {
    v33 = v23[15];
    v65 = v23 + 15;
    *(_QWORD *)(v22 + v33) = 0;
LABEL_9:
    v31 = 0;
    v32 = 0;
    goto LABEL_10;
  }
  v27 = sub_1A9C5A0D4();
  v28 = sub_1A9C5A2A4();
  if ((v28 & 1) != 0)
    v29 = v27 & 1 | 2;
  else
    v29 = v27 & 1;
  v30 = v23[15];
  v65 = v23 + 15;
  *(_QWORD *)(v22 + v30) = v29;
  v31 = v29 & 1;
  v32 = (v29 & 1) == 0;
  if ((v29 & 1) == 0 && (v28 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  *(_BYTE *)(v22 + v23[13]) = v31;
  *(_BYTE *)(v22 + v23[14]) = v32;
  sub_1A9CE63E4();
  v34 = sub_1A9C5C990((uint64_t)v7, v22);
  v36 = v35;
  sub_1A9BD5744((uint64_t)v7);
  v37 = (uint64_t *)(v22 + v23[18]);
  swift_bridgeObjectRelease();
  *v37 = v34;
  v37[1] = v36;
  sub_1A9CE63E4();
  v38 = sub_1A9C5C990((uint64_t)v7, v22);
  v40 = v39;
  sub_1A9BD5744((uint64_t)v7);
  v41 = (uint64_t *)(v22 + v23[19]);
  swift_bridgeObjectRelease();
  *v41 = v38;
  v41[1] = v40;
  sub_1A9C5B3A8();
  v42 = (void (*)(char *, uint64_t))*((_QWORD *)v68 + 1);
  v43 = v15;
  v44 = v69;
  v42(v43, v69);
  swift_endAccess();
  v45 = *((_QWORD *)v16 + 4);
  v46 = *((_BYTE *)v16 + 40);
  v47 = *((_BYTE *)v16 + 41);
  v48 = *((_BYTE *)v16 + 42);
  v49 = v16[1];
  v72 = *v16;
  v73 = v49;
  v74 = v45;
  v75 = v46;
  v76 = v47;
  v77 = v48;
  v50 = v71;
  sub_1A9C6BF60(*(double *)(v67 + 144));
  swift_beginAccess();
  v66(v22 + v23[10], v50, v44);
  v51 = *(_QWORD *)(v22 + v23[7]);
  v68 = v42;
  if (!v51)
  {
    *(_QWORD *)(v22 + *v65) = 0;
LABEL_18:
    v55 = 0;
    v56 = 0;
    goto LABEL_19;
  }
  v52 = sub_1A9C5A0D4();
  v53 = sub_1A9C5A2A4();
  if ((v53 & 1) != 0)
    v54 = v52 & 1 | 2;
  else
    v54 = v52 & 1;
  *(_QWORD *)(v22 + v23[15]) = v54;
  v55 = v54 & 1;
  v56 = (v54 & 1) == 0;
  if ((v54 & 1) == 0 && (v53 & 1) == 0)
    goto LABEL_18;
LABEL_19:
  *(_BYTE *)(v22 + v23[13]) = v55;
  *(_BYTE *)(v22 + v23[14]) = v56;
  sub_1A9CE63E4();
  v57 = sub_1A9C5C990((uint64_t)v7, v22);
  v59 = v58;
  sub_1A9BD5744((uint64_t)v7);
  v60 = (uint64_t *)(v22 + v23[18]);
  swift_bridgeObjectRelease();
  *v60 = v57;
  v60[1] = v59;
  sub_1A9CE63E4();
  v61 = sub_1A9C5C990((uint64_t)v7, v22);
  v63 = v62;
  sub_1A9BD5744((uint64_t)v7);
  v64 = (uint64_t *)(v22 + v23[19]);
  swift_bridgeObjectRelease();
  *v64 = v61;
  v64[1] = v63;
  sub_1A9C5B3A8();
  v68(v71, v44);
  swift_endAccess();
  sub_1A9BD7564();
}

void sub_1A9BD73C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = v0;
  v2 = MEMORY[0x1E0DEA968];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v3 + 32) = 0x7065656C53;
  *(_QWORD *)(v3 + 40) = 0xE500000000000000;
  strcpy((char *)(v3 + 48), "ScheduleEditor");
  *(_BYTE *)(v3 + 63) = -18;
  v4 = (char *)sub_1A9CADD68((_QWORD *)1, 3, 1, (_QWORD *)v3);
  *((_QWORD *)v4 + 2) = 3;
  strcpy(v4 + 64, "ScheduleClock");
  *((_WORD *)v4 + 39) = -4864;
  sub_1A9B94CA0(0, &qword_1ED2632C0, v2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v5 = sub_1A9CE8280();
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed);
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v9 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setAccessibilityIdentifier_, v9, v5, v7);

}

void sub_1A9BD7564()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  double v18;
  double v19;
  id v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  int v30;
  _BYTE v31[24];
  __int128 v32;
  _BYTE v33[27];
  __int128 v34;
  _BYTE v35[27];

  v1 = v0;
  v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v31[-v8];
  v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader];
  if (v10)
  {
    v11 = (uint64_t)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model];
    swift_beginAccess();
    sub_1A9BD9150(v11, (uint64_t)v9);
    v12 = v10 + OBJC_IVAR____TtC13SleepHealthUI29SleepScheduleComponentsHeader_model;
    swift_beginAccess();
    sub_1A9BD9150(v12, (uint64_t)v6);
    swift_beginAccess();
    sub_1A9BD91C0((uint64_t)v9, v12);
    swift_endAccess();
    sub_1A9C51798(v6);
    sub_1A9BD9114((uint64_t)v9);
    sub_1A9BD9114((uint64_t)v6);
  }
  v13 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  v14 = sub_1A9BD5F64();
  v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock];
  v16 = (__int128 *)(v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  *(_OWORD *)&v35[11] = *(__int128 *)((char *)v16 + 27);
  v34 = *v16;
  *(_OWORD *)v35 = v16[1];
  v17 = v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  v18 = *(double *)(v15 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 144);
  if ((v35[26] & 1) != 0)
    sub_1A9C29A5C();
  else
    sub_1A9BD535C();
  v20 = objc_msgSend(v14, sel_stringFromTimeInterval_, v18 * round(v19 / v18));

  objc_msgSend(v13, sel_setText_, v20);
  v21 = &v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model];
  swift_beginAccess();
  v22 = *(_QWORD *)&v21[*(int *)(v2 + 60)];
  if ((v22 & 1) != 0)
  {
    v25 = 2;
  }
  else if ((v22 & 2) != 0)
  {
    v25 = 3;
  }
  else
  {
    *(_OWORD *)&v33[11] = *(__int128 *)((char *)v16 + 27);
    v23 = v16[1];
    v32 = *v16;
    *(_OWORD *)v33 = v23;
    if ((v33[24] & 1) != 0)
    {
      v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
      if (*(_BYTE *)(v24 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) == 6)
        return;
      *(_BYTE *)(v24 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) = 6;
      goto LABEL_20;
    }
    v26 = *(double *)(v17 + 144);
    v27 = *(double *)&v33[16];
    if ((v33[26] & 1) != 0)
      sub_1A9C29A5C();
    else
      sub_1A9BD535C();
    v25 = v27 > v26 * round(v28 / v26);
  }
  v29 = *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
  v30 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message);
  if (v30 == 6 || v30 != v25)
  {
    *(_BYTE *)(v29 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message) = v25;
LABEL_20:
    sub_1A9BEE8E4();
    objc_msgSend(v1, sel_setNeedsLayout);
  }
}

id SleepScheduleComponentsEditView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleComponentsEditView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleComponentsEditView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleComponentsEditView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleComponentsEditView()
{
  uint64_t result;

  result = qword_1EEB45210;
  if (!qword_1EEB45210)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BD7A70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v6 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v7 = *(void **)(a1 + 200);
  v8 = *(void **)(a1 + 208);
  v9 = *(void **)(a1 + 280);
  v10 = *(void **)(a1 + 288);
  v27 = *(void **)(a1 + 296);
  v28 = *(void **)(a1 + 312);
  v29 = *(void **)(a1 + 320);
  v30 = *(void **)(a1 + 360);
  v31 = *(void **)(a1 + 384);
  v11 = *(id *)a1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v6;
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v27;
  v22 = v28;
  v23 = v29;
  swift_bridgeObjectRetain();
  v24 = v30;
  swift_bridgeObjectRetain();
  v25 = v31;
  return a1;
}

uint64_t sub_1A9BD7B58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v15 = *(void **)(a1 + 8);
  v16 = *(void **)a1;
  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a1 + 16);
  v11 = *(void **)(a1 + 40);
  v12 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 208);
  v10 = *(void **)(a1 + 200);
  v3 = *(void **)(a1 + 280);
  v4 = *(void **)(a1 + 288);
  v5 = *(void **)(a1 + 296);
  v6 = *(void **)(a1 + 312);
  v7 = *(void **)(a1 + 320);
  v8 = *(void **)(a1 + 360);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1A9BD7C48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v19;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 80);
  v4 = *(void **)(a1 + 88);
  v5 = *(void **)(a1 + 96);
  v6 = *(void **)(a1 + 112);
  v7 = *(void **)(a1 + 120);
  v8 = *(void **)(a1 + 160);
  v19 = *(void **)(a1 + 184);
  v9 = *(id *)a1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  swift_bridgeObjectRetain();
  v16 = v8;
  swift_bridgeObjectRetain();
  v17 = v19;
  return a1;
}

uint64_t sub_1A9BD7CE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;

  v2 = *(void **)(a1 + 8);
  v10 = *(void **)a1;
  v3 = *(void **)(a1 + 80);
  v4 = *(void **)(a1 + 88);
  v5 = *(void **)(a1 + 96);
  v6 = *(void **)(a1 + 112);
  v7 = *(void **)(a1 + 120);
  v8 = *(void **)(a1 + 160);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1A9BD7D80@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
  swift_beginAccess();
  result = type metadata accessor for SleepScheduleComponentsViewModel();
  *a2 = *(_BYTE *)(v3 + *(int *)(result + 32));
  return result;
}

uint64_t sub_1A9BD7DE0()
{
  return type metadata accessor for SleepScheduleComponentsEditView();
}

uint64_t sub_1A9BD7DE8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SleepScheduleComponentsViewModel();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SleepScheduleComponentsEditView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepScheduleComponentsEditView.includeDayLabelsInHeader.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

void sub_1A9BD7ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v6;
  char *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  objc_class *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  objc_super v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  __int16 v122;
  _BYTE v123[400];

  v7 = v6;
  LODWORD(v115) = a6;
  v113 = a4;
  v114 = a5;
  v11 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v11, v12);
  v109 = (uint64_t)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  v15 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v16 = v7;
  v17 = objc_msgSend(v15, sel_init);
  v18 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  objc_msgSend(v17, sel_setTextColor_, v18);

  objc_msgSend(v17, sel_setNumberOfLines_, 1);
  objc_msgSend(v17, sel_setAdjustsFontSizeToFitWidth_, 1);
  v19 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v20 = *MEMORY[0x1E0DC1448];
  v110 = *MEMORY[0x1E0DC4B60];
  v111 = v20;
  v112 = v19;
  v21 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v110, 0, 1, 0, 0, 0, 1, v20, 0);
  objc_msgSend(v17, sel_setFont_, v21);

  *(_QWORD *)&v7[v14] = v17;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter] = 0;
  *(_QWORD *)&v117 = a1;
  *((_QWORD *)&v117 + 1) = a2;
  v118 = a3;
  v119 = v113;
  v120 = 0;
  v121 = 1;
  v122 = 1;
  if (qword_1EEB42E48 != -1)
    swift_once();
  memcpy(v123, &unk_1EEB57328, 0x188uLL);
  v22 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleClock());
  sub_1A9BD7A70((uint64_t)v123);
  v23 = sub_1A9C24F74(&v117, (uint64_t)v123);
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clock] = v23;
  v24 = v114;
  sub_1A9BD9150(v114, (uint64_t)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model]);
  objc_allocWithZone((Class)type metadata accessor for SleepScheduleClockCaption());
  v25 = (char *)v23;
  v26 = sub_1A9BEDE8C(0);
  v27 = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption] = v26;
  if ((v115 & 1) != 0)
  {
    v28 = v109;
    sub_1A9BD9150(v24, v109);
    v29 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsHeader());
    v27 = sub_1A9C52ECC(v28);
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader] = v27;

  v30 = (objc_class *)type metadata accessor for SleepScheduleComponentsEditView();
  v116.receiver = v16;
  v116.super_class = v30;
  v31 = (char *)objc_msgSendSuper2(&v116, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1A9BD7564();
  v32 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader;
  v33 = *(void **)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader];
  if (v33)
    objc_msgSend(v31, sel_addSubview_, *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader]);
  objc_msgSend(v31, sel_addSubview_, v25);
  v109 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  objc_msgSend(v31, sel_addSubview_, *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed]);
  v115 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption;
  v34 = *(void **)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockCaption];
  objc_msgSend(v31, sel_addSubview_, v34);
  if (v33)
    objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v25, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v34, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v35 = objc_msgSend(v25, sel_widthAnchor);
  v36 = objc_msgSend(v35, sel_constraintEqualToConstant_, *(double *)&v25[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration + 72]);

  v37 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint;
  v38 = *(void **)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint];
  *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = v36;

  v39 = objc_msgSend(*(id *)&v31[v115], sel_topAnchor);
  v40 = objc_msgSend(v25, sel_bottomAnchor);
  v41 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v40);

  v42 = *(void **)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint];
  v113 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint;
  *(_QWORD *)&v31[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = v41;

  v43 = *(void **)&v31[v32];
  v44 = MEMORY[0x1E0DEE9B0];
  if (v43)
  {
    v108 = (id)objc_opt_self();
    sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, v44 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1A9CEF0F0;
    v46 = v43;
    v47 = objc_msgSend(v46, sel_leadingAnchor);
    v48 = objc_msgSend(v31, sel_leadingAnchor);
    v49 = objc_msgSend(v47, (SEL)&selRef_centerXAnchor + 6, v48);

    *(_QWORD *)(v45 + 32) = v49;
    v50 = objc_msgSend(v46, sel_topAnchor);
    v51 = objc_msgSend(v31, sel_topAnchor);
    if (qword_1EEB42C88 != -1)
      swift_once();
    v52 = objc_msgSend(v50, sel_constraintEqualToAnchor_constant_, v51, *(double *)&qword_1EEB45190);

    *(_QWORD *)(v45 + 40) = v52;
    v53 = objc_msgSend(v31, sel_trailingAnchor);
    v54 = objc_msgSend(v46, sel_trailingAnchor);
    v55 = objc_msgSend(v53, sel_constraintEqualToAnchor_, v54);

    *(_QWORD *)(v45 + 48) = v55;
    *(_QWORD *)&v117 = v45;
    sub_1A9CE83E8();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
    v56 = (void *)sub_1A9CE83D0();
    swift_bridgeObjectRelease();
    objc_msgSend(v108, sel_activateConstraints_, v56);

    v57 = objc_msgSend(v46, sel_bottomAnchor);
    v44 = MEMORY[0x1E0DEE9B0];
  }
  else
  {
    v57 = objc_msgSend(v31, sel_topAnchor);
  }
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, v44 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1A9CEF100;
  v59 = objc_msgSend(v25, sel_widthAnchor);
  v60 = objc_msgSend(v25, sel_heightAnchor);
  v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v60);

  *(_QWORD *)(v58 + 32) = v61;
  v62 = *(void **)&v31[v37];
  if (!v62)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  *(_QWORD *)(v58 + 40) = v62;
  v63 = v62;
  v64 = objc_msgSend(v25, sel_topAnchor);
  v65 = qword_1EEB42C90;
  v66 = v57;
  if (v65 != -1)
    swift_once();
  v67 = objc_msgSend(v64, sel_constraintEqualToAnchor_constant_, v66, *(double *)&qword_1EEB45198);

  v108 = v66;
  *(_QWORD *)(v58 + 48) = v67;
  v68 = objc_msgSend(v25, sel_centerXAnchor);
  v69 = objc_msgSend(v31, sel_centerXAnchor);
  v70 = objc_msgSend(v68, sel_constraintEqualToAnchor_, v69);

  *(_QWORD *)(v58 + 56) = v70;
  v71 = *(void **)&v31[v113];
  if (!v71)
    goto LABEL_32;
  v107 = (id)objc_opt_self();
  *(_QWORD *)(v58 + 64) = v71;
  v72 = v115;
  v73 = *(void **)&v31[v115];
  v74 = v71;
  v75 = objc_msgSend(v73, sel_leadingAnchor);
  v76 = objc_msgSend(v31, sel_layoutMarginsGuide);
  v77 = objc_msgSend(v76, sel_leadingAnchor);

  v78 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v77);
  *(_QWORD *)(v58 + 72) = v78;
  v79 = objc_msgSend(v31, sel_layoutMarginsGuide);
  v80 = objc_msgSend(v79, sel_trailingAnchor);

  v81 = objc_msgSend(*(id *)&v31[v72], sel_trailingAnchor);
  v82 = objc_msgSend(v80, sel_constraintEqualToAnchor_, v81);

  *(_QWORD *)(v58 + 80) = v82;
  v83 = objc_msgSend(v31, sel_bottomAnchor);
  v84 = objc_msgSend(*(id *)&v31[v72], sel_bottomAnchor);
  if (qword_1EEB42CA8 != -1)
    swift_once();
  v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_constant_, v84, *(double *)&qword_1EEB451B0);

  *(_QWORD *)(v58 + 88) = v85;
  *(_QWORD *)&v117 = v58;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v86 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_activateConstraints_, v86);

  v87 = *(void **)&v31[v109];
  v88 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(v110, 0, 1, 0, 0, 0, 1, v111, 0);
  objc_msgSend(v87, sel_setFont_, v88);

  v89 = objc_msgSend(v31, sel_traitCollection);
  v90 = objc_msgSend(v89, sel_preferredContentSizeCategory);

  LOBYTE(v89) = sub_1A9CE8790();
  if ((v89 & 1) != 0)
    v91 = 4;
  else
    v91 = 1;
  objc_msgSend(v87, sel_setTextAlignment_, v91);
  v92 = *(void **)&v31[v113];
  v93 = v108;
  if (!v92)
    goto LABEL_30;
  v94 = v92;
  v95 = objc_msgSend(v87, sel_font);
  if (v95)
  {
    v96 = v95;
    objc_msgSend(v95, sel_lineHeight);
    v98 = v97;

    if (qword_1EEB42C98 != -1)
      swift_once();
    v99 = v98 + *(double *)&qword_1EEB451A0;
    if (qword_1EEB42CA0 != -1)
      swift_once();
    objc_msgSend(v94, sel_setConstant_, v99 + *(double *)&qword_1EEB451A8);

LABEL_30:
    objc_msgSend(v31, sel_invalidateIntrinsicContentSize);
    objc_msgSend(v31, sel_setNeedsLayout);
    sub_1A9BD73C0();
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v31, sel_clockDidChange_, 0x20000);
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, 0, sel_sleepScheduleComponentsEditViewEditingDidChange_, 0x20000);
    objc_msgSend(v25, sel_addTarget_action_forControlEvents_, 0, sel_sleepScheduleComponentsEditViewEditingDidEnd_, 0x40000);
    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_1A9CEB530;
    v101 = sub_1A9CE6AB0();
    v102 = MEMORY[0x1E0DC29B0];
    *(_QWORD *)(v100 + 32) = v101;
    *(_QWORD *)(v100 + 40) = v102;
    v103 = sub_1A9CE69A8();
    v104 = MEMORY[0x1E0DC1F90];
    *(_QWORD *)(v100 + 48) = v103;
    *(_QWORD *)(v100 + 56) = v104;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92FDC();
    v105 = v31;
    sub_1A9CE87C0();

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    sub_1A9BD9114(v114);
    return;
  }
LABEL_33:
  __break(1u);
}

id sub_1A9BD8C44(void *a1)
{
  char *v1;
  char *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;
  id v14;
  id result;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  double v26;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_traitCollection);
  v5 = objc_msgSend(v4, sel_preferredContentSizeCategory);

  if (!a1)
  {

    goto LABEL_11;
  }
  v6 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 == sub_1A9CE82E0() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1A9CE8BB0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      goto LABEL_11;
  }
  v13 = objc_msgSend(v2, sel_traitCollection);
  v14 = objc_msgSend(v13, sel_legibilityWeight);

  result = objc_msgSend(a1, sel_legibilityWeight);
  if (v14 == result)
    return result;
LABEL_11:
  v16 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed];
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v17 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4B60], 0, 1, 0, 0, 0, 1, *MEMORY[0x1E0DC1448], 0);
  objc_msgSend(v16, sel_setFont_, v17);

  v18 = objc_msgSend(v2, sel_traitCollection);
  v19 = objc_msgSend(v18, sel_preferredContentSizeCategory);

  LOBYTE(v18) = sub_1A9CE8790();
  if ((v18 & 1) != 0)
    v20 = 4;
  else
    v20 = 1;
  objc_msgSend(v16, sel_setTextAlignment_, v20);
  v21 = *(void **)&v2[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint];
  if (!v21)
  {
LABEL_21:
    objc_msgSend(v2, sel_invalidateIntrinsicContentSize);
    return objc_msgSend(v2, sel_setNeedsLayout);
  }
  v22 = v21;
  result = objc_msgSend(v16, sel_font);
  if (result)
  {
    v23 = result;
    objc_msgSend(result, sel_lineHeight);
    v25 = v24;

    if (qword_1EEB42C98 != -1)
      swift_once();
    v26 = v25 + *(double *)&qword_1EEB451A0;
    if (qword_1EEB42CA0 != -1)
      swift_once();
    objc_msgSend(v22, sel_setConstant_, v26 + *(double *)&qword_1EEB451A8);

    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_1A9BD8F8C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_timeInBed;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v4 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  objc_msgSend(v3, sel_setTextColor_, v4);

  objc_msgSend(v3, sel_setNumberOfLines_, 1);
  objc_msgSend(v3, sel_setAdjustsFontSizeToFitWidth_, 1);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v5 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)(*MEMORY[0x1E0DC4B60], 0, 1, 0, 0, 0, 1, *MEMORY[0x1E0DC1448], 0);
  objc_msgSend(v3, sel_setFont_, v5);

  *(_QWORD *)&v1[v2] = v3;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_clockWidthConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_captionTopConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView____lazy_storage___formatter] = 0;

  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9BD9114(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9BD9150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BD9194()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BD91B8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A9BD5FFC(a1, a2, v2);
}

uint64_t sub_1A9BD91C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepScheduleComponentsViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BD9208()
{
  return MEMORY[0x1E0DEB428];
}

uint64_t CurrentWeatherModel.currentWeather.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A9CE6564();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CurrentWeatherModel.hourlyForecast.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CurrentWeatherModel(0) + 20);
  sub_1A9BD92A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CurrentWeatherModel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB45340);
}

void sub_1A9BD92A8()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEB45228)
  {
    sub_1A9CE6510();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE668];
    sub_1A9B92B9C(&qword_1EEB45230, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE668], MEMORY[0x1E0CEE688]);
    sub_1A9B92B9C(&qword_1EEB45238, v0, MEMORY[0x1E0CEE678]);
    sub_1A9B92B9C(&qword_1EEB45240, v0, MEMORY[0x1E0CEE680]);
    v1 = sub_1A9CE6618();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEB45228);
  }
}

uint64_t CurrentWeatherModel.dailyForecast.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CurrentWeatherModel(0) + 24);
  sub_1A9BD93C0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1A9BD93C0()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEB45248)
  {
    sub_1A9CE6504();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608];
    sub_1A9B92B9C(&qword_1EEB45250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608], MEMORY[0x1E0CEE628]);
    sub_1A9B92B9C(&qword_1EEB45258, v0, MEMORY[0x1E0CEE618]);
    sub_1A9B92B9C(&qword_1EEB45260, v0, MEMORY[0x1E0CEE620]);
    v1 = sub_1A9CE6618();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEB45248);
  }
}

uint64_t sub_1A9BD9490()
{
  uint64_t v1;

  swift_getObjectType();
  v1 = sub_1A9CE8D48();
  sub_1A9CE8340();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1A9BD9514()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BD957C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v15;

  sub_1A9BD979C(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v15 - v10;
  sub_1A9BA6F90(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v12 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v13 = v12;
  sub_1A9CE6E70();
  return sub_1A9B97190((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1A9BD979C);
}

uint64_t sub_1A9BD9670()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BD96DC(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  sub_1A9BD979C(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9BA6F90(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v7 = v1;
  sub_1A9CE6E70();
  return sub_1A9B97190(a1, (uint64_t (*)(_QWORD))sub_1A9BD979C);
}

void sub_1A9BD979C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB45270, type metadata accessor for CurrentWeatherModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void (*sub_1A9BD97B8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A9CE6E58();
  return sub_1A9BAFE14;
}

uint64_t sub_1A9BD9830()
{
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BD98A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45700, (uint64_t (*)(uint64_t))sub_1A9BD979C, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9BD99E4()
{
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BD9A58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45700, (uint64_t (*)(uint64_t))sub_1A9BD979C, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v6, a1, v3);
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1A9BD9B50(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1A9B92F34(0, (unint64_t *)&unk_1EEB45700, (uint64_t (*)(uint64_t))sub_1A9BD979C, MEMORY[0x1E0C96180]);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel__currentWeatherModel;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v3[16] = v9;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BB02B4;
}

id WeatherModel.locationModel.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel);
}

id WeatherModel.__allocating_init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;

  v4 = objc_allocWithZone((Class)type metadata accessor for LocationModel());
  swift_bridgeObjectRetain();
  v5 = LocationModel.init(debugIdentifier:)(a1, a2);
  v6 = objc_allocWithZone((Class)type metadata accessor for WeatherModel(0));
  v7 = sub_1A9BDCFFC(v5, a1, a2);

  return v7;
}

id WeatherModel.__allocating_init(locationModel:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_1A9BDCFFC(a1, a2, a3);

  return v8;
}

id WeatherModel.init(locationModel:debugIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = sub_1A9BDCFFC(a1, a2, a3);

  return v4;
}

void sub_1A9BD9D4C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  _QWORD v29[2];
  uint8_t *v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;

  v1 = v0;
  swift_getObjectType();
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v29 - v4;
  sub_1A9BDD2D4(0, &qword_1EEB49CF0, MEMORY[0x1E0C96180]);
  v7 = v6;
  v37 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v29 - v9;
  sub_1A9BDD1D4();
  v36 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService])
  {
    v35 = v10;
    if (qword_1EEB42E60 != -1)
      swift_once();
    v17 = sub_1A9CE6990();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EEB49410);
    v18 = v1;
    v19 = sub_1A9CE6978();
    v20 = sub_1A9CE867C();
    v34 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v32 = v19;
      v21 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v38 = v31;
      v33 = v12;
      *(_DWORD *)v21 = 136446210;
      v29[1] = v21 + 12;
      v30 = v21;
      v29[0] = v21 + 4;
      v39 = (id)sub_1A9CE8D48();
      v40 = v22;
      sub_1A9CE8340();
      swift_bridgeObjectRetain();
      sub_1A9CE8340();
      swift_bridgeObjectRelease();
      v39 = (id)sub_1A9B91D6C((uint64_t)v39, v40, &v38);
      v12 = v33;
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      v19 = v32;
      v23 = v30;
      _os_log_impl(&dword_1A9B87000, v32, (os_log_type_t)v34, "[%{public}s] starting", v30, 0xCu);
      v24 = v31;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v24, -1, -1);
      MEMORY[0x1AF420344](v23, -1, -1);
    }
    else
    {

    }
    sub_1A9CE65AC();
    *(_QWORD *)&v1[v16] = sub_1A9CE65A0();
    swift_release();
    sub_1A9CB7FBC();
    swift_beginAccess();
    sub_1A9BDD2D4(0, &qword_1EEB45298, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    v25 = v35;
    sub_1A9CE6E40();
    swift_endAccess();
    sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
    v39 = (id)sub_1A9CE870C();
    v26 = sub_1A9CE8700();
    v27 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v5, 1, 1, v26);
    sub_1A9BDD27C();
    sub_1A9B92A68();
    sub_1A9CE6EAC();
    sub_1A9B93BDC((uint64_t)v5, (unint64_t *)&qword_1ED262570, v27);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v7);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92B9C(&qword_1EEB452A0, (uint64_t (*)(uint64_t))sub_1A9BDD1D4, MEMORY[0x1E0C95CB8]);
    v28 = v36;
    sub_1A9CE6EC4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v28);
    swift_beginAccess();
    sub_1A9CE6D74();
    swift_endAccess();
    swift_release();
    sub_1A9CB7A24();
  }
}

void sub_1A9BDA228(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  id v7;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (char *)v4;
    if (v2)
    {
      v6 = v2;
      sub_1A9BDA4E0(v6);
      v7 = *(id *)&v5[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel];
      sub_1A9CB7D68();

      v5 = v6;
    }

  }
}

uint64_t sub_1A9BDA2B8()
{
  char *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = swift_getObjectType();
  v2 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService])
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v3 = sub_1A9CE6990();
    __swift_project_value_buffer(v3, (uint64_t)qword_1EEB49410);
    v4 = v0;
    v5 = sub_1A9CE6978();
    v6 = sub_1A9CE867C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v7 = 136446210;
      v10 = sub_1A9CE8D48();
      v11 = v8;
      sub_1A9CE8340();
      swift_bridgeObjectRetain();
      sub_1A9CE8340();
      swift_bridgeObjectRelease();
      sub_1A9B91D6C(v10, v11, &v12);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] stopping", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v9, -1, -1);
      MEMORY[0x1AF420344](v7, -1, -1);

    }
    else
    {

    }
    sub_1A9CB7D68();
    *(_QWORD *)&v0[v2] = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9BDA4E0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  os_log_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v2 = v1;
  swift_getObjectType();
  sub_1A9B92F34(0, &qword_1EEB453C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v34 - v6;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EEB49410);
  v9 = v2;
  v10 = a1;
  v11 = v9;
  v12 = v10;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v39 = v36;
    *(_DWORD *)v16 = 136446467;
    v37 = sub_1A9CE8D48();
    v38 = v17;
    v35 = v13;
    HIDWORD(v34) = v15;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v37 = sub_1A9B91D6C(v37, v38, &v39);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2081;
    v18 = v12;
    v19 = objc_msgSend(v18, sel_description);
    v20 = sub_1A9CE82E0();
    v21 = v12;
    v22 = v7;
    v24 = v23;

    v37 = sub_1A9B91D6C(v20, v24, &v39);
    sub_1A9CE888C();
    v7 = v22;
    v12 = v21;
    swift_bridgeObjectRelease();

    v25 = v35;
    _os_log_impl(&dword_1A9B87000, v35, BYTE4(v34), "[%{public}s] fetching current weather for location: %{private}s", (uint8_t *)v16, 0x16u);
    v26 = v36;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v26, -1, -1);
    MEMORY[0x1AF420344](v16, -1, -1);

  }
  else
  {

  }
  v27 = sub_1A9CE8490();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 1, 1, v27);
  sub_1A9CE8478();
  v28 = v11;
  v29 = v12;
  v30 = sub_1A9CE846C();
  v31 = (_QWORD *)swift_allocObject();
  v32 = MEMORY[0x1E0DF06E8];
  v31[2] = v30;
  v31[3] = v32;
  v31[4] = v28;
  v31[5] = v29;
  sub_1A9CA6974((uint64_t)v7, (uint64_t)&unk_1EEB453D0, (uint64_t)v31);
  return swift_release();
}

uint64_t sub_1A9BDA854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[19] = a4;
  v5[20] = a5;
  sub_1A9BD979C(0);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CEE8F8];
  sub_1A9B92F34(0, &qword_1EEB453D8, (uint64_t (*)(uint64_t))sub_1A9BD93C0, MEMORY[0x1E0CEE8F8]);
  v5[23] = v7;
  v5[24] = *(_QWORD *)(v7 - 8);
  v5[25] = swift_task_alloc();
  sub_1A9B92F34(0, &qword_1EEB453E0, (uint64_t (*)(uint64_t))sub_1A9BD92A8, v6);
  v5[26] = v8;
  v5[27] = *(_QWORD *)(v8 - 8);
  v5[28] = swift_task_alloc();
  sub_1A9B92F34(0, &qword_1EEB453E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE728], v6);
  v5[29] = v9;
  v5[30] = *(_QWORD *)(v9 - 8);
  v5[31] = swift_task_alloc();
  sub_1A9BD93C0();
  v5[32] = v10;
  v5[33] = *(_QWORD *)(v10 - 8);
  v5[34] = swift_task_alloc();
  sub_1A9BD92A8();
  v5[35] = v11;
  v5[36] = *(_QWORD *)(v11 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v12 = sub_1A9CE6564();
  v5[40] = v12;
  v5[41] = *(_QWORD *)(v12 - 8);
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  sub_1A9CE8478();
  v5[46] = sub_1A9CE846C();
  v5[47] = sub_1A9CE8460();
  v5[48] = v13;
  return swift_task_switch();
}

uint64_t sub_1A9BDAA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService);
  *(_QWORD *)(v0 + 392) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 312);
    v3 = *(_QWORD *)(v0 + 320);
    v4 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 48) = v2;
    *(_QWORD *)(v0 + 56) = v4;
    swift_retain();
    sub_1A9CE6588();
    *(_QWORD *)(v0 + 64) = v7;
    sub_1A9CE657C();
    *(_QWORD *)(v0 + 72) = v8;
    sub_1A9CE6570();
    *(_QWORD *)(v0 + 80) = v9;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 400) = v10;
    *(_QWORD *)(v0 + 16) = v3;
    *(_QWORD *)(v0 + 24) = v5;
    *(_QWORD *)(v0 + 32) = v6;
    *v10 = v0;
    v10[1] = sub_1A9BDAD80;
    return sub_1A9CE6594();
  }
  else
  {
    swift_release();
    if (qword_1EEB42E60 != -1)
      swift_once();
    v12 = *(void **)(v0 + 152);
    v13 = sub_1A9CE6990();
    __swift_project_value_buffer(v13, (uint64_t)qword_1EEB49410);
    v14 = v12;
    v15 = sub_1A9CE6978();
    v16 = sub_1A9CE8664();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(void **)(v0 + 152);
    if (v17)
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v23 = v20;
      *(_DWORD *)v19 = 136446210;
      v21 = sub_1A9BD9490();
      *(_QWORD *)(v0 + 88) = sub_1A9B91D6C(v21, v22, &v23);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] weatherService is nil", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v20, -1, -1);
      MEMORY[0x1AF420344](v19, -1, -1);

    }
    else
    {

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A9BDAD80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = v2[30];
    v3 = v2[31];
    v6 = v2[28];
    v5 = v2[29];
    v7 = v2[26];
    v8 = v2[27];
    (*(void (**)(_QWORD, _QWORD))(v2[24] + 8))(v2[25], v2[23]);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_1A9BDAE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  os_log_type_t type;
  NSObject *log;
  os_log_t loga;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, os_log_t);
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;

  swift_release();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v59 = *(void **)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 360);
  v62 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EEB49410);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v10(v1, v2, v4);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v65(v6, v5, v7);
  v11 = v62;
  v63 = v10;
  v10(v11, v2, v4);
  v12 = v59;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  v15 = os_log_type_enabled(v13, v14);
  v17 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 352);
  if (v15)
  {
    log = v13;
    v18 = *(_QWORD *)(v0 + 320);
    v48 = *(_QWORD *)(v0 + 328);
    v49 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 288);
    v60 = *(_QWORD *)(v0 + 336);
    v50 = *(_QWORD *)(v0 + 280);
    v51 = *(_QWORD *)(v0 + 304);
    type = v14;
    v19 = *(void **)(v0 + 152);
    v20 = swift_slowAlloc();
    v53 = swift_slowAlloc();
    v66 = v53;
    *(_DWORD *)v20 = 136446979;
    v21 = sub_1A9BD9490();
    *(_QWORD *)(v0 + 120) = sub_1A9B91D6C(v21, v22, &v66);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2081;
    v63(v60, v16, v18);
    v23 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 128) = sub_1A9B91D6C(v23, v24, &v66);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v25 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v25(v16, v18);
    *(_WORD *)(v20 + 22) = 2081;
    v65(v49, v51, v50);
    v26 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 136) = sub_1A9B91D6C(v26, v27, &v66);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v58 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v58(v51, v50);
    *(_WORD *)(v20 + 32) = 2081;
    v63(v60, v17, v18);
    v28 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 144) = sub_1A9B91D6C(v28, v29, &v66);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v61 = (void (*)(uint64_t, os_log_t))v25;
    v25(v17, v18);
    _os_log_impl(&dword_1A9B87000, log, type, "[%{public}s] fetched current weather: %{private}s, hourly forecast: %{private}s, daily forecast: %{private}s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v53, -1, -1);
    MEMORY[0x1AF420344](v20, -1, -1);

  }
  else
  {
    v31 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 328);
    v33 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 280);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(void **)(v0 + 152);

    v37 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v37(v16, v31);
    v58 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v58(v33, v34);
    v61 = (void (*)(uint64_t, os_log_t))v37;
    v37(v17, v31);

  }
  v30 = (void (*)(uint64_t))v63;
  v64 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 312);
  loga = *(os_log_t *)(v0 + 320);
  v40 = *(_QWORD *)(v0 + 272);
  v39 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 264);
  v44 = *(_QWORD *)(v0 + 168);
  v43 = *(_QWORD *)(v0 + 176);
  v52 = *(void **)(v0 + 152);
  v30(v43);
  v45 = type metadata accessor for CurrentWeatherModel(0);
  v65(v43 + *(int *)(v45 + 20), v38, v39);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v43 + *(int *)(v45 + 24), v40, v42);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 0, 1, v45);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9BA6F90(v43, v44, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v46 = v52;
  sub_1A9CE6E70();
  sub_1A9B97190(v43, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  v58(v38, v39);
  v61(v64, loga);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A9BDB3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v30, v2);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v9 = *(void **)(v0 + 408);
  v10 = *(void **)(v0 + 152);
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EEB49410);
  v12 = v10;
  v13 = v9;
  v14 = v12;
  v15 = v9;
  v16 = sub_1A9CE6978();
  v17 = sub_1A9CE8664();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(void **)(v0 + 408);
  v20 = *(void **)(v0 + 152);
  if (v18)
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v31 = v22;
    *(_DWORD *)v21 = 136446466;
    v23 = sub_1A9BD9490();
    *(_QWORD *)(v0 + 96) = sub_1A9B91D6C(v23, v24, &v31);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 12) = 2082;
    *(_QWORD *)(v0 + 104) = v19;
    v25 = v19;
    sub_1A9B94928(0, (unint64_t *)&qword_1EEB49DC0);
    v26 = sub_1A9CE82F8();
    *(_QWORD *)(v0 + 112) = sub_1A9B91D6C(v26, v27, &v31);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v16, v17, "[%{public}s] error fetching current weather: %{public}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v22, -1, -1);
    MEMORY[0x1AF420344](v21, -1, -1);
  }
  else
  {

  }
  v28 = *(void **)(v0 + 408);
  sub_1A9BDA2B8();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A9BDB748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager);
  }
  else
  {
    v3 = v0;
    sub_1A9CE8190();
    swift_allocObject();
    v2 = sub_1A9CE8184();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1A9BDB7C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint8_t *v75;
  uint64_t v76;
  id v77;
  uint64_t ObjectType;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;

  ObjectType = swift_getObjectType();
  v1 = sub_1A9CE81CC();
  v100 = *(_QWORD *)(v1 - 8);
  v101 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v99 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A9CE6600();
  v97 = *(_QWORD *)(v4 - 8);
  v98 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v96 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE81B4();
  MEMORY[0x1E0C80A78](v7, v8);
  v95 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1A9CE8160();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v10);
  v91 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE65D0();
  MEMORY[0x1E0C80A78](v12, v13);
  v90 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A9CE816C();
  v93 = *(_QWORD *)(v15 - 8);
  v94 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v92 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE62E8();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v83 = v18;
  v82 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v81 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1A9CE81FC();
  v105 = *(_QWORD *)(v22 - 8);
  v106 = v22;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v85 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v26);
  v89 = (char *)&v75 - v27;
  sub_1A9B92F34(0, &qword_1ED2625E0, v19, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v28, v29);
  v80 = (char *)&v75 - v30;
  v31 = sub_1A9CE6498();
  MEMORY[0x1E0C80A78](v31, v32);
  v79 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1A9CE6648();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v34);
  v104 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for CurrentWeatherModel(0);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v40 = (char *)&v75 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BD979C(0);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v75 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1A9CE6564();
  v102 = *(_QWORD *)(v45 - 8);
  v103 = v45;
  v47 = MEMORY[0x1E0C80A78](v45, v46);
  v49 = (char *)&v75 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v50);
  v52 = (char *)&v75 - v51;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v53 = v107;
  if (!v107)
    return 0;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v44, 1, v36))
  {
    sub_1A9B97190((uint64_t)v44, (uint64_t (*)(_QWORD))sub_1A9BD979C);

    return 0;
  }
  sub_1A9BA6F90((uint64_t)v44, (uint64_t)v40, type metadata accessor for CurrentWeatherModel);
  sub_1A9B97190((uint64_t)v44, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v56 = v102;
  v55 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v49, v40, v103);
  sub_1A9B97190((uint64_t)v40, type metadata accessor for CurrentWeatherModel);
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v49, v55);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v57 = sub_1A9CE6990();
  __swift_project_value_buffer(v57, (uint64_t)qword_1EEB49410);
  v58 = v0;
  v59 = sub_1A9CE6978();
  v60 = sub_1A9CE867C();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v76 = swift_slowAlloc();
    v109 = v76;
    *(_DWORD *)v61 = 136446210;
    v75 = v61 + 4;
    v107 = (void *)sub_1A9CE8D48();
    v108 = v62;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v107 = (void *)sub_1A9B91D6C((uint64_t)v107, v108, &v109);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v59, v60, "[%{public}s] loading gradient for current weather", v61, 0xCu);
    v63 = v76;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v63, -1, -1);
    MEMORY[0x1AF420344](v61, -1, -1);
  }
  else
  {

  }
  v77 = v58;
  swift_bridgeObjectRetain();
  sub_1A9CE648C();
  objc_msgSend(v53, sel_coordinate);
  v64 = v82;
  v65 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v80, 1, 1, v83);
  sub_1A9CE663C();
  v66 = v81;
  sub_1A9CE62D0();
  v67 = v89;
  sub_1A9CE819C();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
  sub_1A9CE6558();
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v85, v67, v106);
  sub_1A9CE6528();
  v68 = *MEMORY[0x1E0DCC878];
  v69 = sub_1A9CE8154();
  v70 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v91, v68, v69);
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v70, *MEMORY[0x1E0DCC890], v88);
  sub_1A9CE651C();
  v71 = v96;
  sub_1A9CE6540();
  sub_1A9CE65DC();
  sub_1A9CE65F4();
  sub_1A9CE65E8();
  sub_1A9CE81A8();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v71, v98);
  v72 = v92;
  sub_1A9CE8148();
  sub_1A9BDB748();
  v73 = v99;
  sub_1A9CE8178();
  swift_release();
  v54 = sub_1A9CE81C0();

  (*(void (**)(char *, uint64_t))(v100 + 8))(v73, v101);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v72, v94);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v67, v106);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v104, v86);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v52, v103);
  return v54;
}

uint64_t CurrentWeather.predominateCloudAltitudeKind.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = sub_1A9CE6600();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6540();
  sub_1A9CE65DC();
  sub_1A9CE65F4();
  sub_1A9CE65E8();
  sub_1A9CE81A8();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

id WeatherModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WeatherModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id WeatherModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherModel(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BDC380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for WeatherModel(0);
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t CurrentWeatherModel.naturalLanguageDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1A9CE81F0();
  swift_allocObject();
  sub_1A9CE81E4();
  type metadata accessor for CurrentWeatherModel(0);
  v0 = sub_1A9CE81D8();
  v2 = v1;
  swift_release();
  if (v2)
    return v0;
  else
    return 0;
}

uint64_t CurrentWeatherModel.todaysWeather.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v0 = sub_1A9CE6498();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE62E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentWeatherModel(0);
  sub_1A9CE654C();
  sub_1A9CE648C();
  sub_1A9CE660C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t CurrentWeather.conditionsIcon.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = sub_1A9CE65D0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6558();
  sub_1A9CE6528();
  sub_1A9CE65B8();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t CurrentWeather.conditionsImageTemplate.getter()
{
  return sub_1A9BDC5F4(MEMORY[0x1E0CDF770]);
}

uint64_t CurrentWeather.conditionsImage.getter()
{
  return sub_1A9BDC5F4(MEMORY[0x1E0CDF760]);
}

uint64_t sub_1A9BDC5F4(unsigned int *a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF788];
  sub_1A9B92F34(0, &qword_1EEB452B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF788], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v22 - v5;
  v7 = sub_1A9CE65D0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE8130();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6558();
  sub_1A9CE6528();
  sub_1A9CE65B8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_1A9CE8124();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_1A9CE7D04();
  v17 = *a1;
  v18 = sub_1A9CE7D34();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v6, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
  v20 = sub_1A9CE7D1C();
  swift_release();
  sub_1A9B93BDC((uint64_t)v6, &qword_1EEB452B8, v2);
  return v20;
}

uint64_t CurrentWeather.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_1A9CE65D0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6558();
  v5 = sub_1A9CE65C4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

uint64_t CurrentWeather.temperatureText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v0 = sub_1A9CE813C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE86F4();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DCCAA0];
  v18 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB54F8(0, &qword_1EEB452C0, (unint64_t *)&qword_1EEB452C8, 0x1E0CB3B00, MEMORY[0x1E0CAE328]);
  v11 = v10;
  v17 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v17 - v13;
  sub_1A9CE6534();
  sub_1A9CE8118();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DCC860], v0);
  sub_1A9CE6630();
  sub_1A9CE6624();
  sub_1A9B92B9C(&qword_1EEB452D0, v6, MEMORY[0x1E0DCCA98]);
  v15 = sub_1A9CE5EA4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v11);
  return v15;
}

double CurrentWeather.currentTemperature.getter()
{
  return sub_1A9BDCA60((void (*)(uint64_t))MEMORY[0x1E0CEE6C8]);
}

double DayWeather.currentHighTemperature.getter()
{
  return sub_1A9BDCA60((void (*)(uint64_t))MEMORY[0x1E0CEE5E0]);
}

double DayWeather.currentLowTemperature.getter()
{
  return sub_1A9BDCA60((void (*)(uint64_t))MEMORY[0x1E0CEE5D0]);
}

double sub_1A9BDCA60(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  double v14;
  double v15;
  uint64_t v17;

  sub_1A9BB54F8(0, &qword_1EEB452C0, (unint64_t *)&qword_1EEB452C8, 0x1E0CB3B00, MEMORY[0x1E0CAE328]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v17 - v11;
  a1(v10);
  sub_1A9CE5EB0();
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v12, v3);
  sub_1A9CE5E98();
  v15 = v14;
  v13(v8, v3);
  return v15;
}

uint64_t DayWeather.shortNaturalLanguageDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[3];
  unsigned int v32;
  void (*v33)(char *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v0 = sub_1A9CE813C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE86F4();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DCCAA0];
  v37 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB54F8(0, &qword_1EEB452C0, (unint64_t *)&qword_1EEB452C8, 0x1E0CB3B00, MEMORY[0x1E0CAE328]);
  v12 = v11;
  v34 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v31 - v14;
  sub_1A9CE64F8();
  sub_1A9CE8118();
  v32 = *MEMORY[0x1E0DCC860];
  v33 = *(void (**)(char *))(v1 + 104);
  v33(v4);
  v31[2] = sub_1A9CE6630();
  sub_1A9CE6624();
  v31[1] = sub_1A9B92B9C(&qword_1EEB452D0, v6, MEMORY[0x1E0DCCA98]);
  v16 = v7;
  v17 = sub_1A9CE5EA4();
  v35 = v18;
  v36 = v17;
  swift_release();
  v31[0] = *(_QWORD *)(v1 + 8);
  v19 = v0;
  ((void (*)(char *, uint64_t))v31[0])(v4, v0);
  v20 = *(void (**)(char *, uint64_t))(v37 + 8);
  v20(v10, v7);
  v21 = *(void (**)(char *, uint64_t))(v34 + 8);
  v21(v15, v12);
  sub_1A9CE64EC();
  sub_1A9CE8118();
  ((void (*)(char *, _QWORD, uint64_t))v33)(v4, v32, v19);
  sub_1A9CE6624();
  v22 = sub_1A9CE5EA4();
  v37 = v23;
  swift_release();
  ((void (*)(char *, uint64_t))v31[0])(v4, v19);
  v20(v10, v16);
  v21(v15, v12);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v24 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9BDD380();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1A9CEB530;
  v26 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEA968];
  v27 = sub_1A9BDD3E4();
  v28 = v35;
  *(_QWORD *)(v25 + 32) = v36;
  *(_QWORD *)(v25 + 40) = v28;
  *(_QWORD *)(v25 + 96) = v26;
  *(_QWORD *)(v25 + 104) = v27;
  *(_QWORD *)(v25 + 64) = v27;
  *(_QWORD *)(v25 + 72) = v22;
  *(_QWORD *)(v25 + 80) = v37;
  v29 = sub_1A9CE82EC();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_1A9BDCEFC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BDCF78(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v4 = v2;
  v5 = v3;
  return sub_1A9CE6E70();
}

uint64_t type metadata accessor for WeatherModel(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, (uint64_t *)&unk_1EEB453B0);
}

id sub_1A9BDCFFC(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  id v24;
  objc_class *v25;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;

  v27 = a2;
  v28 = a3;
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v27 - v9;
  sub_1A9BD979C(0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v27 - v17;
  v19 = &v3[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel__currentWeatherModel];
  v20 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  sub_1A9BA6F90((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  v21 = v3;
  sub_1A9CE6E34();
  sub_1A9B97190((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v10, v6);
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_weatherService] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_cancellables] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel____lazy_storage___gradientManager] = 0;
  v22 = &v21[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_debugIdentifier];
  v23 = v28;
  *(_QWORD *)v22 = v27;
  *((_QWORD *)v22 + 1) = v23;
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI12WeatherModel_locationModel] = a1;
  v24 = a1;

  v25 = (objc_class *)type metadata accessor for WeatherModel(0);
  v29.receiver = v21;
  v29.super_class = v25;
  return objc_msgSendSuper2(&v29, sel_init);
}

void sub_1A9BDD1D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45280)
  {
    sub_1A9BDD2D4(255, &qword_1EEB49CF0, MEMORY[0x1E0C96180]);
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    sub_1A9BDD27C();
    sub_1A9B92A68();
    v0 = sub_1A9CE6D50();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45280);
  }
}

unint64_t sub_1A9BDD27C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45288;
  if (!qword_1EEB45288)
  {
    sub_1A9BDD2D4(255, &qword_1EEB49CF0, MEMORY[0x1E0C96180]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C96190], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45288);
  }
  return result;
}

void sub_1A9BDD2D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9BB54F8(255, (unint64_t *)&qword_1EEB49CE0, &qword_1EEB45278, 0x1E0C9E3B8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1A9BDD34C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BDD370(void **a1)
{
  uint64_t v1;

  sub_1A9BDA228(a1, v1);
}

void sub_1A9BDD380()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB452D8)
  {
    sub_1A9B94928(255, (unint64_t *)&qword_1EEB47060);
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB452D8);
  }
}

unint64_t sub_1A9BDD3E4()
{
  unint64_t result;

  result = qword_1EEB452E0;
  if (!qword_1EEB452E0)
  {
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EEB452E0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CurrentWeatherModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A9CE6564();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_1A9BD92A8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_1A9BD93C0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for CurrentWeatherModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_1A9CE6564();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  sub_1A9BD92A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  sub_1A9BD93C0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1A9CE6564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_1A9BD92A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_1A9BD93C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1A9CE6564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_1A9BD92A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_1A9BD93C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1A9CE6564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_1A9BD92A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_1A9BD93C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for CurrentWeatherModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1A9CE6564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_1A9BD92A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  sub_1A9BD93C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentWeatherModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BDD860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1A9CE6564();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_1A9BD92A8();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_1A9BD93C0();
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CurrentWeatherModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9BDD904(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_1A9CE6564();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_1A9BD92A8();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_1A9BD93C0();
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A9BDD9A4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1A9CE6564();
  if (v0 <= 0x3F)
  {
    sub_1A9BD92A8();
    if (v1 <= 0x3F)
    {
      sub_1A9BD93C0();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_1A9BDDA44()
{
  return type metadata accessor for WeatherModel(0);
}

void sub_1A9BDDA4C()
{
  unint64_t v0;

  sub_1A9B92F34(319, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for WeatherModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of WeatherModel.currentWeatherModel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of WeatherModel.$currentWeatherModel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of WeatherModel.__allocating_init(locationModel:debugIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of WeatherModel.startIfNeeded()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of WeatherModel.stopIfNeeded()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of WeatherModel.loadGradient()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t sub_1A9BDDC14()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1A9BDDC48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1A9BDDCC0;
  return sub_1A9BDA854(a1, v4, v5, v7, v6);
}

uint64_t sub_1A9BDDCC0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A9BDDD08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BDDD84(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = v2;
  return sub_1A9CE6E70();
}

uint64_t sub_1A9BDDDF0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BDDE5C()
{
  swift_beginAccess();
  sub_1A9BDFB8C(0, &qword_1EEB453F8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BDDECC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9BDFB8C(0, &qword_1EEB45508, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9BDFB8C(0, &qword_1EEB453F8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9BDDFF4()
{
  swift_beginAccess();
  sub_1A9BDFB8C(0, &qword_1EEB453F8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BDE060@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9BDE308(a1);
}

uint64_t sub_1A9BDE074(void **a1, void **a2)
{
  return sub_1A9BDE394(a1, a2);
}

uint64_t sub_1A9BDE088()
{
  return sub_1A9BDE414();
}

uint64_t sub_1A9BDE0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  swift_beginAccess();
  sub_1A9B92F34(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BDE124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7, unint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v23;

  sub_1A9B92F34(0, a5, a6, MEMORY[0x1E0C96180]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v23 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v23 - v19, a1, v12);
  v21(v17, (uint64_t)v20, v12);
  swift_beginAccess();
  sub_1A9B92F34(0, a8, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, v12);
}

uint64_t sub_1A9BDE260()
{
  return sub_1A9BDE27C((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1EEB45408, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel);
}

uint64_t sub_1A9BDE27C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  sub_1A9B92F34(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BDE2F4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A9BDE308(a1);
}

uint64_t sub_1A9BDE308@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BDE380(void **a1, void **a2)
{
  return sub_1A9BDE394(a1, a2);
}

uint64_t sub_1A9BDE394(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v4 = v2;
  v5 = v3;
  return sub_1A9CE6E70();
}

uint64_t sub_1A9BDE400()
{
  return sub_1A9BDE414();
}

uint64_t sub_1A9BDE414()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A9BDE484()
{
  return sub_1A9BDE27C((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1EEB45418, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel);
}

uint64_t sub_1A9BDE4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v4;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v0 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  v1 = *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v0);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);

  return v2;
}

id sub_1A9BDE548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  char *v11;

  v0 = sub_1A9CE62E8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v5 = v11;
  v6 = *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
  v7 = *(_QWORD *)&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v11[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider], v6);
  (*(void (**)(void))&v5[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider])();
  v8 = SleepScheduleProviding.upcomingResolvedOccurrence(forCurrentDate:)((uint64_t)v4, v6, v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);

  return v8;
}

void sub_1A9BDE664()
{
  uint64_t v0;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  sub_1A9BC3D6C(v0);
}

char *sub_1A9BDE6F0@<X0>(_QWORD *a1@<X8>)
{
  char *result;
  char *v3;
  unsigned __int8 v4;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  result = (char *)objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior], sel_isDeviceSupported);
  if ((_DWORD)result && (result = v3, v4 >= 2u))
  {
    *a1 = v3;
    return v3;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

id SleepActivityConfigurationModel.watchAppInstalledProvider.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider));
}

uint64_t SleepActivityConfigurationModel.__allocating_init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_1A9BDE810(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))sub_1A9BDF750);
}

uint64_t SleepActivityConfigurationModel.init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return sub_1A9BDE810(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))sub_1A9BDF3C4);
}

uint64_t sub_1A9BDE810(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, void *, void *, uint64_t, uint64_t, void *))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a1 + 24);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a1, v13);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  swift_getObjectType();
  v17 = a9(v14, v16, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v17;
}

uint64_t sub_1A9BDE910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  id v18;

  sub_1A9B92F34(0, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v17 - v2;
  sub_1A9BB573C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v10 = (void *)v17[0];
  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v11 = sub_1A9CE6D98();

  v17[0] = v11;
  sub_1A9CE6E1C();
  v12 = sub_1A9CE6E88();
  swift_release();
  v17[0] = v12;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v18 = (id)sub_1A9CE870C();
  v13 = sub_1A9CE8700();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 1, 1, v13);
  sub_1A9BB57F0();
  sub_1A9B92B9C(&qword_1EEB441E8, (uint64_t (*)(uint64_t))sub_1A9BB57F0, MEMORY[0x1E0C95D90]);
  sub_1A9B92A68();
  sub_1A9CE6EAC();
  sub_1A9BB5AF4((uint64_t)v3);

  swift_release();
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_1A9BDFB58;
  *(_QWORD *)(v15 + 24) = v14;
  sub_1A9B92B9C(&qword_1EEB454F0, (uint64_t (*)(uint64_t))sub_1A9BB573C, MEMORY[0x1E0C95CB8]);
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  return swift_release();
}

void sub_1A9BDEC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF4203E0](v1);
  if (v2)
  {
    v3 = (void *)v2;
    sub_1A9BDEC64();

  }
}

uint64_t sub_1A9BDEC64()
{
  void *v0;
  int v1;
  uint64_t result;
  id v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  sub_1A9BDED24(&v5);
  v1 = v5;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  if (v1 != v4)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v3 = v0;
    return sub_1A9CE6E70();
  }
  return result;
}

void sub_1A9BDED24(_BYTE *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  unsigned int v4;
  uint64_t ObjectType;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior);
  v4 = objc_msgSend(v3, sel_hksp_supportsSleep);
  if (!v4)
    goto LABEL_28;
  ObjectType = swift_getObjectType();
  if ((HKFeatureAvailabilityProviding.isFeatureOnboarded.getter(ObjectType) & 1) == 0)
  {
    LOBYTE(v4) = objc_msgSend(v3, sel_isDeviceSupported);
LABEL_28:
    *a1 = v4;
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  v6 = *(void **)&v16[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  v7 = v6;

  if (!v6)
  {
    LOBYTE(v4) = 3;
    goto LABEL_28;
  }
  if (!objc_msgSend(v7, sel_isEnabled))
  {

    LOBYTE(v4) = 2;
    goto LABEL_28;
  }
  v8 = objc_msgSend(v7, sel_occurrences);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  v9 = sub_1A9CE83DC();

  v17 = MEMORY[0x1E0DEE9D8];
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_7;
LABEL_21:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v15 = sub_1A9CE8AC0();

      swift_release_n();
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 16);
      swift_release();

    }
    if (v15)
      LOBYTE(v4) = 4;
    else
      LOBYTE(v4) = 3;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v10 = sub_1A9CE8AC0();
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_21;
LABEL_7:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1AF41F600](i, v9);
      else
        v12 = *(id *)(v9 + 8 * i + 32);
      v13 = v12;
      if ((objc_msgSend(v12, sel_isSingleDayOverride) & 1) != 0)
      {

      }
      else
      {
        sub_1A9CE89F4();
        sub_1A9CE8A24();
        sub_1A9CE8A30();
        sub_1A9CE8A00();
      }
    }
    swift_bridgeObjectRelease();
    v14 = v17;
    goto LABEL_22;
  }
  __break(1u);
}

id SleepActivityConfigurationModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepActivityConfigurationModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepActivityConfigurationModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepActivityConfigurationModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BDF1B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SleepActivityConfigurationModel();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t SleepActivityConfigurationModel.featureAvailabilityProvidingDidUpdateOnboardingCompletion(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_1A9CE80A0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v4 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DEF740], v0);
  v5 = sub_1A9CE80AC();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) != 0)
    return sub_1A9BDEC64();
  __break(1u);
  return result;
}

id sub_1A9BDF3C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  id v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  objc_class *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  objc_super v58;
  id v59;
  char v60;

  v56 = a5;
  v57 = a8;
  v50 = a1;
  v51 = a7;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v47 = a2;
  v48 = a14;
  v52 = a13;
  v49 = *(_QWORD *)(a10 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](v14, v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BDFB8C(0, &qword_1EEB453F8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0C96198]);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v24);
  v26 = (char *)&v47 - v25;
  v27 = &a9[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__layout];
  v60 = 0;
  v28 = a9;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v26, v22);
  v29 = (uint64_t *)&v28[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_configUIVisitedKey];
  *v29 = sub_1A9CE82E0();
  v29[1] = v30;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  v31 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v47, a12);
  v32 = sub_1A9C10D90((uint64_t)v20, v31, a12, v48);
  swift_beginAccess();
  v59 = v32;
  sub_1A9CE6E34();
  swift_endAccess();
  v33 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v16, v50, a10);
  v34 = v51;
  swift_retain();
  v35 = sub_1A9BE47A4((uint64_t)v16, v53, v34, v33, a10, v52);
  swift_beginAccess();
  v59 = v35;
  sub_1A9CE6E34();
  swift_endAccess();
  v37 = v54;
  v36 = v55;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_featureAvailability] = v54;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_watchAppInstalledProvider] = v36;
  v38 = v56;
  *(_QWORD *)&v28[OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel_behavior] = v56;
  swift_unknownObjectRetain();
  v39 = v36;
  v40 = v38;

  v41 = (objc_class *)type metadata accessor for SleepActivityConfigurationModel();
  v58.receiver = v28;
  v58.super_class = v41;
  v42 = objc_msgSendSuper2(&v58, sel_init);
  swift_bridgeObjectRetain();
  v43 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_setBool_forKey_, 1, v43);

  sub_1A9BDEC64();
  sub_1A9BDE910();
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v44 = v42;
  v45 = (void *)sub_1A9CE870C();
  objc_msgSend(v37, sel_registerObserver_queue_, v44, v45);

  return v44;
}

id sub_1A9BDF750(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v23;

  v23 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepActivityConfigurationModel());
  return sub_1A9BDF3C4(a1, a2, a3, a4, a5, a6, a7, a8, v23, a10, a11, a12, a13, a14);
}

uint64_t type metadata accessor for SleepActivityConfigurationModel()
{
  uint64_t result;

  result = qword_1EEB45468;
  if (!qword_1EEB45468)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BDF830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BDE0A4(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1EEB45408, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel);
}

uint64_t sub_1A9BDF85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BDE124(a1, a2, a3, a4, &qword_1EEB45500, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__scheduleModel, &qword_1EEB45408);
}

uint64_t sub_1A9BDF890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BDE0A4(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1EEB45418, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel);
}

uint64_t sub_1A9BDF8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BDE124(a1, a2, a3, a4, &qword_1EEB454F8, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI31SleepActivityConfigurationModel__settingsModel, (unint64_t *)&unk_1EEB45418);
}

uint64_t sub_1A9BDF8F0()
{
  return type metadata accessor for SleepActivityConfigurationModel();
}

void sub_1A9BDF8F8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1A9BDFB8C(319, &qword_1EEB453F8, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1A9B92F34(319, &qword_1EEB45408, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      sub_1A9B92F34(319, (unint64_t *)&unk_1EEB45418, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SleepActivityConfigurationModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.layout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$layout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.scheduleModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$scheduleModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.settingsModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.$settingsModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sleepStore.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.nextOccurrence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sectionsViewModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.sleepTreatmentRowViewProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SleepActivityConfigurationModel.__allocating_init(sleepScheduleProvider:sleepSettingsProvider:featureAvailability:watchAppInstalledProvider:behavior:currentDateProvider:userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t sub_1A9BDFB34()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BDFB58()
{
  uint64_t v0;

  sub_1A9BDEC14(v0);
}

uint64_t sub_1A9BDFB60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BDFB84(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C6F6BC(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_1A9BDFB8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for SleepActivityConfigurationSectionLayout);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t Publisher.mapToVoid()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_1A9CE6E94();
  return swift_release();
}

uint64_t sub_1A9BDFC50()
{
  return swift_deallocObject();
}

uint64_t HKSPWeekdays.id.getter(uint64_t a1)
{
  return sub_1A9BDFC78(a1, MEMORY[0x1E0DA82F8]);
}

uint64_t HKSPWeekdays.description.getter(uint64_t a1)
{
  return sub_1A9BDFC78(a1, MEMORY[0x1E0DA84E8]);
}

uint64_t sub_1A9BDFC78(uint64_t a1, uint64_t (*a2)(void))
{
  id v2;
  uint64_t v3;

  v2 = (id)a2();
  v3 = sub_1A9CE82E0();

  return v3;
}

uint64_t sub_1A9BDFCC0()
{
  id v0;
  uint64_t v1;

  v0 = (id)NSStringFromHKSPWeekdays();
  v1 = sub_1A9CE82E0();

  return v1;
}

void sub_1A9BDFD0C(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (id)HKSPIdentifierStringForWeekdays();
  v3 = sub_1A9CE82E0();
  v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t sub_1A9BDFD5C()
{
  return MEMORY[0x1E0DEA978];
}

unint64_t sub_1A9BDFD6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB43418;
  if (!qword_1EEB43418)
  {
    type metadata accessor for HKSPWeekdays(255);
    result = MEMORY[0x1AF420284](&unk_1A9CEC1F0, v1);
    atomic_store(result, (unint64_t *)&qword_1EEB43418);
  }
  return result;
}

UIContentSizeCategory __swiftcall UIContentSizeCategory.sizeSmaller()()
{
  return (UIContentSizeCategory)(id)sub_1A9BE10B4();
}

void static UIContentSizeCategory.contentSizeCategoryFitting(startingAt:strings:size:)(void *a1, unint64_t a2, double a3, double a4)
{
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  id *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;

  v7 = a2 >> 62;
  if (a2 >> 62)
  {
    v77 = a1;
    swift_bridgeObjectRetain();
    v8 = sub_1A9CE8AC0();
    if (!v8)
      goto LABEL_10;
  }
  else
  {
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = a1;
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_10;
  }
  if (v8 < 1)
    goto LABEL_79;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v10 = 0;
    do
    {
      MEMORY[0x1AF41F600](v10++, a2);
      v11 = a1;
      sub_1A9CE87A8();
      swift_unknownObjectRelease();

    }
    while (v8 != v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *(void **)(a2 + 8 * v12++ + 32);
      v14 = a1;
      v15 = v13;
      sub_1A9CE87A8();

    }
    while (v8 != v12);
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = MEMORY[0x1E0DEE9D8];
  if (!v16)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v24)
      goto LABEL_29;
LABEL_22:
    swift_bridgeObjectRelease();
    if (a4 >= 0.0)
      return;
    goto LABEL_37;
  }
  v80 = MEMORY[0x1E0DEE9D8];
  sub_1A9BE0584(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
    goto LABEL_80;
  v18 = v80;
  if ((a2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v16; ++i)
    {
      MEMORY[0x1AF41F600](i, a2);
      sub_1A9CE8730();
      v21 = v20;
      swift_unknownObjectRelease();
      v23 = *(_QWORD *)(v80 + 16);
      v22 = *(_QWORD *)(v80 + 24);
      if (v23 >= v22 >> 1)
        sub_1A9BE0584(v22 > 1, v23 + 1, 1);
      *(_QWORD *)(v80 + 16) = v23 + 1;
      *(_QWORD *)(v80 + 8 * v23 + 32) = v21;
    }
  }
  else
  {
    v25 = (id *)(a2 + 32);
    v26 = v16;
    do
    {
      v27 = *v25;
      sub_1A9CE8730();
      v29 = v28;

      v31 = *(_QWORD *)(v80 + 16);
      v30 = *(_QWORD *)(v80 + 24);
      if (v31 >= v30 >> 1)
        sub_1A9BE0584(v30 > 1, v31 + 1, 1);
      *(_QWORD *)(v80 + 16) = v31 + 1;
      *(_QWORD *)(v80 + 8 * v31 + 32) = v29;
      ++v25;
      --v26;
    }
    while (v26);
  }
  v17 = MEMORY[0x1E0DEE9D8];
  v24 = *(_QWORD *)(v80 + 16);
  if (!v24)
    goto LABEL_22;
LABEL_29:
  if (v24 == 1)
  {
    v32 = 0;
    v33 = 0.0;
LABEL_34:
    v36 = v24 - v32;
    v37 = (double *)(v18 + 8 * v32 + 32);
    do
    {
      v38 = *v37++;
      v33 = v33 + v38;
      --v36;
    }
    while (v36);
    goto LABEL_36;
  }
  v32 = v24 & 0x7FFFFFFFFFFFFFFELL;
  v34 = (double *)(v18 + 40);
  v33 = 0.0;
  v35 = v24 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v33 = v33 + *(v34 - 1) + *v34;
    v34 += 2;
    v35 -= 2;
  }
  while (v35);
  if (v24 != v32)
    goto LABEL_34;
LABEL_36:
  swift_bridgeObjectRelease();
  if (v33 <= a4)
    return;
LABEL_37:
  v39 = a1;
  v40 = (id)sub_1A9BE10B4();

  v41 = sub_1A9CE82E0();
  v43 = v42;
  if (v41 == sub_1A9CE82E0() && v43 == v44)
  {
LABEL_73:
    swift_bridgeObjectRelease_n();
    goto LABEL_74;
  }
  v46 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
  {
LABEL_74:

    return;
  }
  v79 = a2 & 0xC000000000000001;
  v47 = v16;
  v78 = v16 & ~(v16 >> 63);
  while (1)
  {
    v49 = v40;

    if (!v8)
      goto LABEL_49;
    swift_bridgeObjectRetain();
    if (v79)
    {
      v50 = 0;
      do
      {
        MEMORY[0x1AF41F600](v50++, a2);
        v51 = v49;
        sub_1A9CE87A8();
        swift_unknownObjectRelease();

      }
      while (v8 != v50);
      swift_bridgeObjectRelease();
LABEL_49:
      if (!v47)
        goto LABEL_60;
      goto LABEL_50;
    }
    v58 = 0;
    do
    {
      v59 = *(void **)(a2 + 8 * v58++ + 32);
      v60 = v49;
      v61 = v59;
      sub_1A9CE87A8();

    }
    while (v8 != v58);
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
    if (!v47)
    {
LABEL_60:
      v52 = v17;
      v62 = *(_QWORD *)(v17 + 16);
      if (!v62)
        goto LABEL_61;
      goto LABEL_68;
    }
LABEL_50:
    sub_1A9BE0584(0, v78, 0);
    if (v47 < 0)
      break;
    v52 = v17;
    if (v79)
    {
      for (j = 0; j != v47; ++j)
      {
        MEMORY[0x1AF41F600](j, a2);
        sub_1A9CE8730();
        v55 = v54;
        swift_unknownObjectRelease();
        v57 = *(_QWORD *)(v52 + 16);
        v56 = *(_QWORD *)(v52 + 24);
        if (v57 >= v56 >> 1)
          sub_1A9BE0584(v56 > 1, v57 + 1, 1);
        *(_QWORD *)(v52 + 16) = v57 + 1;
        *(_QWORD *)(v52 + 8 * v57 + 32) = v55;
      }
    }
    else
    {
      v63 = (id *)(a2 + 32);
      v64 = v47;
      do
      {
        v65 = *v63;
        sub_1A9CE8730();
        v67 = v66;

        v69 = *(_QWORD *)(v52 + 16);
        v68 = *(_QWORD *)(v52 + 24);
        if (v69 >= v68 >> 1)
          sub_1A9BE0584(v68 > 1, v69 + 1, 1);
        *(_QWORD *)(v52 + 16) = v69 + 1;
        *(_QWORD *)(v52 + 8 * v69 + 32) = v67;
        ++v63;
        --v64;
      }
      while (v64);
    }
    v17 = MEMORY[0x1E0DEE9D8];
    v62 = *(_QWORD *)(v52 + 16);
    if (!v62)
    {
LABEL_61:
      swift_bridgeObjectRelease();

      if (a4 >= 0.0)
        return;
      goto LABEL_71;
    }
LABEL_68:
    v70 = 0;
    v71 = 0.0;
    do
    {
      v72 = *(double *)(v52 + 8 * v70++ + 32);
      v71 = v71 + v72;
    }
    while (v62 != v70);
    swift_bridgeObjectRelease();

    if (v71 <= a4)
      return;
LABEL_71:
    v39 = v49;
    v40 = (id)sub_1A9BE10B4();

    v73 = sub_1A9CE82E0();
    v75 = v74;
    if (v73 == sub_1A9CE82E0() && v75 == v76)
      goto LABEL_73;
    v48 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
      goto LABEL_74;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
}

uint64_t sub_1A9BE0464(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A9BE0614(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A9BE0480(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, (unint64_t *)&qword_1EEB44770, (void (*)(uint64_t))MEMORY[0x1E0D2B090]);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE04AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A9BE0788(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A9BE04C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, &qword_1ED2634A0, (void (*)(uint64_t))type metadata accessor for SleepStageSegment);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE04F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, &qword_1ED262958, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE0520(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A9BE0AD8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A9BE053C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE0C3C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE0558(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, (unint64_t *)&unk_1EEB45530, (void (*)(uint64_t))type metadata accessor for DayRelativeDuration);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE0584(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A9BE0DE4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A9BE05A0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, &qword_1EEB45520, (void (*)(uint64_t))type metadata accessor for ScheduleOccurrenceViewModel);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE05CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1A9BE0F4C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1A9BE05E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A9BE08F0(a1, a2, a3, (_QWORD *)*v3, &qword_1EEB45510, (void (*)(uint64_t))MEMORY[0x1E0CAE690]);
  *v3 = result;
  return result;
}

uint64_t sub_1A9BE0614(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BC42B4(0, (unint64_t *)&qword_1ED263330);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE0788(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BC42B4(0, (unint64_t *)&qword_1ED2634A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE08F0(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A9BE163C(0, a5, a6);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE0AD8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BC42B4(0, &qword_1EEB45528);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE0C3C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BE163C(0, &qword_1EEB44438, (void (*)(uint64_t))sub_1A9BB53B0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1A9BB53B0();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE0DE4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BC42B4(0, &qword_1ED263310);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE0F4C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A9BE163C(0, &qword_1EEB45518, type metadata accessor for HKCategoryValueSleepAnalysis);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A9CE8AFC();
  __break(1u);
  return result;
}

uint64_t sub_1A9BE10B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v0 = sub_1A9CE82E0();
  v2 = v1;
  if (v0 == sub_1A9CE82E0() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    v6 = MEMORY[0x1E0DC48C0];
  }
  else
  {
    v5 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DC48C0];
    if ((v5 & 1) == 0)
    {
      v7 = sub_1A9CE82E0();
      v9 = v8;
      if (v7 == sub_1A9CE82E0() && v9 == v10)
      {
        swift_bridgeObjectRelease_n();
        v6 = MEMORY[0x1E0DC48C8];
      }
      else
      {
        v12 = sub_1A9CE8BB0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = MEMORY[0x1E0DC48C8];
        if ((v12 & 1) == 0)
        {
          v13 = sub_1A9CE82E0();
          v15 = v14;
          if (v13 == sub_1A9CE82E0() && v15 == v16)
          {
            swift_bridgeObjectRelease_n();
            v6 = MEMORY[0x1E0DC48D0];
          }
          else
          {
            v18 = sub_1A9CE8BB0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v6 = MEMORY[0x1E0DC48D0];
            if ((v18 & 1) == 0)
            {
              v19 = sub_1A9CE82E0();
              v21 = v20;
              if (v19 == sub_1A9CE82E0() && v21 == v22)
              {
                swift_bridgeObjectRelease_n();
                v6 = MEMORY[0x1E0DC48D8];
              }
              else
              {
                v23 = sub_1A9CE8BB0();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v6 = MEMORY[0x1E0DC48D8];
                if ((v23 & 1) == 0)
                {
                  v24 = sub_1A9CE82E0();
                  v26 = v25;
                  if (v24 == sub_1A9CE82E0() && v26 == v27)
                  {
                    swift_bridgeObjectRelease_n();
                    v6 = MEMORY[0x1E0DC48F0];
                  }
                  else
                  {
                    v28 = sub_1A9CE8BB0();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v6 = MEMORY[0x1E0DC48F0];
                    if ((v28 & 1) == 0)
                    {
                      v29 = sub_1A9CE82E0();
                      v31 = v30;
                      if (v29 == sub_1A9CE82E0() && v31 == v32)
                      {
                        swift_bridgeObjectRelease_n();
                        v6 = MEMORY[0x1E0DC48F8];
                      }
                      else
                      {
                        v33 = sub_1A9CE8BB0();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v6 = MEMORY[0x1E0DC48F8];
                        if ((v33 & 1) == 0)
                        {
                          v34 = sub_1A9CE82E0();
                          v36 = v35;
                          if (v34 == sub_1A9CE82E0() && v36 == v37)
                          {
                            swift_bridgeObjectRelease_n();
                            v6 = MEMORY[0x1E0DC4900];
                          }
                          else
                          {
                            v38 = sub_1A9CE8BB0();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v6 = MEMORY[0x1E0DC4900];
                            if ((v38 & 1) == 0)
                            {
                              v39 = sub_1A9CE82E0();
                              v41 = v40;
                              if (v39 == sub_1A9CE82E0() && v41 == v42)
                              {
                                swift_bridgeObjectRelease_n();
                                v6 = MEMORY[0x1E0DC4918];
                              }
                              else
                              {
                                v43 = sub_1A9CE8BB0();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v6 = MEMORY[0x1E0DC4918];
                                if ((v43 & 1) == 0)
                                {
                                  v44 = sub_1A9CE82E0();
                                  v46 = v45;
                                  if (v44 == sub_1A9CE82E0() && v46 == v47)
                                  {
                                    swift_bridgeObjectRelease_n();
                                    v6 = MEMORY[0x1E0DC4920];
                                  }
                                  else
                                  {
                                    v48 = sub_1A9CE8BB0();
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    v6 = MEMORY[0x1E0DC4920];
                                    if ((v48 & 1) == 0)
                                    {
                                      v49 = sub_1A9CE82E0();
                                      v51 = v50;
                                      if (v49 == sub_1A9CE82E0() && v51 == v52)
                                      {
                                        swift_bridgeObjectRelease_n();
                                        v6 = MEMORY[0x1E0DC4930];
                                      }
                                      else
                                      {
                                        v53 = sub_1A9CE8BB0();
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        v6 = MEMORY[0x1E0DC4930];
                                        if ((v53 & 1) == 0)
                                        {
                                          v54 = sub_1A9CE82E0();
                                          v56 = v55;
                                          if (v54 == sub_1A9CE82E0() && v56 == v57)
                                          {
                                            swift_bridgeObjectRelease_n();
                                            v6 = MEMORY[0x1E0DC4908];
                                          }
                                          else
                                          {
                                            v58 = sub_1A9CE8BB0();
                                            swift_bridgeObjectRelease();
                                            swift_bridgeObjectRelease();
                                            v6 = MEMORY[0x1E0DC4938];
                                            if ((v58 & 1) != 0)
                                              v6 = MEMORY[0x1E0DC4908];
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return *(_QWORD *)v6;
}

void sub_1A9BE163C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1A9CE8B80();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t HKSPSleepSchedule.sleepDurationGoalIfSet.getter()
{
  void *v0;
  double v1;
  uint64_t v3;

  objc_msgSend(v0, sel_sleepDurationGoal);
  if (v1 <= 0.0)
    return 0;
  objc_msgSend(v0, sel_sleepDurationGoal);
  return v3;
}

uint64_t SleepSettingsProviding.sleepSettings.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(void))(a2 + 16))();
  sub_1A9CE6DD4();
  swift_release();
  return v3;
}

id SleepSettingsProviding.hasSleepFocus.getter(uint64_t a1, uint64_t a2)
{
  return sub_1A9BE173C(a1, a2, (SEL *)&selRef_hasSleepFocusMode);
}

id SleepSettingsProviding.mirrorsSleepFocus.getter(uint64_t a1, uint64_t a2)
{
  return sub_1A9BE173C(a1, a2, (SEL *)&selRef_mirrorsFocusModes);
}

id sub_1A9BE173C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4;
  id v6;

  (*(void (**)(void))(a2 + 24))();
  sub_1A9CE6DD4();
  swift_release();
  if (!v6)
    return 0;
  v4 = objc_msgSend(v6, *a3);

  return v4;
}

id SleepSettingsProvider.sleepStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t SleepSettingsProvider.currentSettingsPublisher.getter()
{
  return swift_retain();
}

uint64_t SleepSettingsProvider.currentSleepFocusConfigurationPublisher.getter()
{
  return swift_retain();
}

id SleepSettingsProvider.__allocating_init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, a2);
}

id SleepSettingsProvider.init(sleepStore:sleepSettings:)(void *a1, void *a2)
{
  char *v2;
  char *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;
  id v11;

  *(_QWORD *)&v2[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore] = a1;
  sub_1A9BB5600();
  swift_allocObject();
  v5 = v2;
  v6 = a1;
  v7 = a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_currentSettingsPublisher] = sub_1A9CE6DF8();
  v11 = objc_msgSend(v6, sel_sleepFocusConfiguration);
  sub_1A9BE1934();
  swift_allocObject();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_currentSleepFocusConfigurationPublisher] = sub_1A9CE6DF8();

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for SleepSettingsProvider();
  v8 = objc_msgSendSuper2(&v10, sel_init);
  objc_msgSend(v6, sel_addObserver_, v8);

  return v8;
}

void sub_1A9BE1934()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45568)
  {
    sub_1A9BE2564(255, (unint64_t *)&qword_1EEB45570, &qword_1EEB45578);
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45568);
  }
}

uint64_t type metadata accessor for SleepSettingsProvider()
{
  return objc_opt_self();
}

id SleepSettingsProvider.__allocating_init(sleepStore:)(void *a1)
{
  id v2;
  id v3;

  v2 = HKSPSleepStore.settings.getter();
  v3 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  return SleepSettingsProvider.init(sleepStore:sleepSettings:)(a1, v2);
}

id SleepSettingsProvider.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore], sel_removeObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepSettingsProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id SleepSettingsProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepSettingsProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1A9BE1B7C()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC13SleepHealthUI21SleepSettingsProvider_sleepStore);
}

uint64_t sub_1A9BE1B90()
{
  return swift_retain();
}

uint64_t sub_1A9BE1BA4()
{
  return swift_retain();
}

void SleepSettingsProvider.sleepStore(_:sleepSettingsDidChange:)(uint64_t a1, void *a2)
{
  sub_1A9BE1C90(a2);
}

void SleepSettingsProvider.sleepStore(_:sleepFocusConfigurationDidUpdate:)(uint64_t a1, void *a2)
{
  sub_1A9BE20D4(a2);
}

void sub_1A9BE1C90(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  char v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = sub_1A9CE80A0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v9 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DEF740], v5);
  v10 = sub_1A9CE80AC();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    if (qword_1ED2628A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1ED262888);
  v12 = a1;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  v15 = os_log_type_enabled(v13, v14);
  v33 = ObjectType;
  if (v15)
  {
    v16 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v2;
    v35 = (id)v31;
    *(_DWORD *)v16 = 136446466;
    v18 = sub_1A9CE8D48();
    v34 = sub_1A9B91D6C(v18, v19, (uint64_t *)&v35);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2114;
    v34 = (uint64_t)v12;
    v20 = v12;
    sub_1A9CE888C();
    *v17 = v12;

    _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] Settings did change: %{public}@", (uint8_t *)v16, 0x16u);
    sub_1A9BE2564(0, (unint64_t *)&qword_1ED2627B0, (unint64_t *)&qword_1ED2627A0);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v17, -1, -1);
    v21 = v31;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v21, -1, -1);
    MEMORY[0x1AF420344](v16, -1, -1);

  }
  else
  {

  }
  sub_1A9CE6DD4();
  v22 = v35;
  sub_1A9B94A18(0, &qword_1EEB45560);
  v23 = sub_1A9CE8814();

  if ((v23 & 1) != 0)
  {
    v24 = sub_1A9CE6978();
    v25 = sub_1A9CE867C();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v35 = (id)v27;
      *(_DWORD *)v26 = 136446210;
      v28 = sub_1A9CE8D48();
      v34 = sub_1A9B91D6C(v28, v29, (uint64_t *)&v35);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v24, v25, "[%{public}s] Updated settings matched previous settings. Not publishing.", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v27, -1, -1);
      MEMORY[0x1AF420344](v26, -1, -1);
    }

  }
  else
  {
    v35 = v12;
    sub_1A9CE6DC8();
  }
}

void sub_1A9BE20D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  char v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = sub_1A9CE80A0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  *v9 = sub_1A9CE870C();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DEF740], v5);
  v10 = sub_1A9CE80AC();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    if (qword_1ED2628A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1ED262888);
  v12 = a1;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  v15 = os_log_type_enabled(v13, v14);
  v35 = ObjectType;
  if (v15)
  {
    v16 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34 = v2;
    v37 = (id)v33;
    *(_DWORD *)v16 = 136446466;
    v18 = sub_1A9CE8D48();
    v36 = sub_1A9B91D6C(v18, v19, (uint64_t *)&v37);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2114;
    v36 = (uint64_t)v12;
    v20 = v12;
    sub_1A9CE888C();
    *v17 = v12;

    _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] Sleep focus did change: %{public}@", (uint8_t *)v16, 0x16u);
    sub_1A9BE2564(0, (unint64_t *)&qword_1ED2627B0, (unint64_t *)&qword_1ED2627A0);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v17, -1, -1);
    v21 = v33;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v21, -1, -1);
    MEMORY[0x1AF420344](v16, -1, -1);

  }
  else
  {

  }
  sub_1A9CE6DD4();
  v22 = v37;
  if (v37
    && (sub_1A9B94A18(0, &qword_1EEB45578),
        v23 = v12,
        v24 = sub_1A9CE8814(),
        v23,
        v23,
        v22,
        (v24 & 1) != 0))
  {
    v25 = sub_1A9CE6978();
    v26 = sub_1A9CE867C();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v37 = (id)v28;
      *(_DWORD *)v27 = 136446210;
      v29 = sub_1A9CE8D48();
      v36 = sub_1A9B91D6C(v29, v30, (uint64_t *)&v37);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v25, v26, "[%{public}s] Updated sleep focus config matched previous config. Not publishing.", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v28, -1, -1);
      MEMORY[0x1AF420344](v27, -1, -1);
    }

  }
  else
  {
    v37 = v12;
    v31 = v12;
    sub_1A9CE6DC8();

  }
}

uint64_t dispatch thunk of SleepSettingsProviding.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepSettingsProviding.currentSettingsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepSettingsProviding.currentSleepFocusConfigurationPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t method lookup function for SleepSettingsProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepSettingsProvider.__allocating_init(sleepStore:sleepSettings:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1A9BE2564(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9B94A18(255, a3);
    v4 = sub_1A9CE8880();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BE25B8()
{
  qword_1EEB57298 = 0xBFF921FB54442D18;
}

void sub_1A9BE25D4()
{
  qword_1EEB572A0 = 0;
}

void sub_1A9BE25E0()
{
  qword_1EEB572A8 = 0x401921FB54442D18;
}

double sub_1A9BE25FC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double i;

  v2 = ((double)a2 / 60.0 + (double)a1) / 24.0;
  if (qword_1EEB42CC0 != -1)
    swift_once();
  v3 = v2 * *(double *)&qword_1EEB572A8;
  if (qword_1EEB42CB0 != -1)
    swift_once();
  v4 = v3 + *(double *)&qword_1EEB57298;
  if (qword_1EEB42CB8 != -1)
    swift_once();
  for (i = *(double *)&qword_1EEB572A8 - *(double *)&qword_1EEB572A0; v4 < *(double *)&qword_1EEB572A0; v4 = i + v4)
    ;
  while (*(double *)&qword_1EEB572A8 <= v4)
    v4 = v4 - i;
  return v4;
}

uint64_t CurrentValueSubject<>.updateValueIfDifferent(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(*v2 + *MEMORY[0x1E0C95F98]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v10 - v6;
  sub_1A9CE6DD4();
  v8 = sub_1A9CE82A4();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    return sub_1A9CE6DE0();
  }
  return result;
}

id sub_1A9BE27D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  objc_super v16;

  if (a3)
  {
    v5 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for EditScheduleLinkTableViewCell();
  v6 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, a1, v5);

  v7 = qword_1ED2626A8;
  v8 = v6;
  if (v7 != -1)
    swift_once();
  v9 = (id)qword_1ED264F90;
  v10 = sub_1A9CE6168();
  v12 = v11;

  v15[3] = &type metadata for EditScheduleLinkTableViewCell.Model;
  v15[4] = &off_1E55D5B68;
  v15[0] = v10;
  v15[1] = v12;
  v15[2] = 0;
  v13 = (uint64_t)v8 + OBJC_IVAR____TtC13SleepHealthUI17TextTableViewCell_model;
  swift_beginAccess();
  sub_1A9BE2B40((uint64_t)v15, v13);
  swift_endAccess();
  sub_1A9C98F2C();
  sub_1A9BE2C2C((uint64_t)v15);
  sub_1A9BE29E8();

  return v8;
}

void sub_1A9BE29E8()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  _QWORD v6[6];

  v1 = objc_msgSend(v0, sel_textLabel);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setTextAlignment_, 1);

  }
  v3 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v6[4] = sub_1A9C219C0;
  v6[5] = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_1A9C21C90;
  v6[3] = &block_descriptor_2;
  v4 = _Block_copy(v6);
  v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v5);

}

id sub_1A9BE2AD8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EditScheduleLinkTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EditScheduleLinkTableViewCell()
{
  return objc_opt_self();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1A9BE2B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BE2B84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1A9BE2B84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45638)
  {
    sub_1A9BE2BD8();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45638);
  }
}

unint64_t sub_1A9BE2BD8()
{
  unint64_t result;

  result = qword_1EEB45640;
  if (!qword_1EEB45640)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB45640);
  }
  return result;
}

uint64_t sub_1A9BE2C2C(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BE2B84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for EditScheduleLinkTableViewCell.Model(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *_s13SleepHealthUI29EditScheduleLinkTableViewCellC5ModelVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for EditScheduleLinkTableViewCell.Model(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for EditScheduleLinkTableViewCell.Model(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for EditScheduleLinkTableViewCell.Model(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditScheduleLinkTableViewCell.Model(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditScheduleLinkTableViewCell.Model()
{
  return &type metadata for EditScheduleLinkTableViewCell.Model;
}

uint64_t sub_1A9BE2E08(uint64_t a1, uint64_t a2)
{
  return SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(a1, a2, (uint64_t)&protocol witness table for SleepOnboardingFlowController);
}

uint64_t SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3);
  sub_1A9B923D4(v3 + 88, (uint64_t)v8);
  swift_release();
  v4 = v9;
  v5 = v10;
  __swift_project_boxed_opaque_existential_1Tm(v8, v9);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v4);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

uint64_t SleepOnboardingAnalyticsTracking<>.context.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v5 = *(_BYTE *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(id *)(v4 + 16);
  result = swift_release();
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  return result;
}

void SleepOnboardingAnalyticsTracking<>.trackOnboardingStep(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
  v11 = *(unsigned __int8 *)(v10(a3, a5) + 24);
  swift_release();
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8500]), sel_initWithStep_action_entryPoint_, a1, a2, v11);
  v13 = *(id *)(v10(a3, a5) + 16);
  swift_release();
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA84F8]), sel_initWithOnboardingInfo_provenanceInfo_, v12, v13);

  objc_msgSend(v9, sel_trackEvent_, v14);
}

void SleepOnboardingAnalyticsTracking<>.trackOnboardingPromotion(context:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a2);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8500]), sel_initWithStep_action_entryPoint_, 0, 0, v4);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA84F8]), sel_initWithOnboardingInfo_provenanceInfo_, v6, v3);

  objc_msgSend(v5, sel_trackEvent_, v7);
}

uint64_t dispatch thunk of SleepOnboardingAnalyticsTracking.analyticsManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1A9BE30B4(uint64_t a1, uint64_t a2)
{
  return SleepOnboardingAnalyticsTracking<>.analyticsManager.getter(a1, a2, (uint64_t)&protocol witness table for SleepOnboardingFlowTableViewController);
}

uint64_t sub_1A9BE30C0()
{
  uint64_t v0;

  v0 = sub_1A9CE6990();
  __swift_allocate_value_buffer(v0, qword_1EEB572B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EEB572B0);
  return sub_1A9CE6984();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id SleepScheduleModel.__allocating_init(sleepScheduleProvider:currentDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  v10 = sub_1A9BE495C(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v10;
}

id SleepScheduleModel.__allocating_init(sleepStore:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  char *v6;
  id v7;

  type metadata accessor for SleepScheduleProvider();
  v2 = a1;
  v3 = SleepScheduleProvider.__allocating_init(sleepStore:)(v2);
  v4 = (id)HKSPCurrentDateProvider();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  v7 = sub_1A9BE45E8((uint64_t)v3, (uint64_t)sub_1A9BE4A30, v5, v6);

  return v7;
}

void sub_1A9BE3288(uint64_t a1)
{
  id v1;

  v1 = (id)(*(uint64_t (**)(void))(a1 + 16))();
  sub_1A9CE62C4();

}

id SleepScheduleModel.init(sleepScheduleProvider:currentDateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1E0C80A78](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_1A9BE47A4((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v13;
}

void *sub_1A9BE3384()
{
  uint64_t v0;
  void *result;
  double v2;

  result = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (result)
  {
    objc_msgSend(result, sel_windDownTime);
    return (void *)(v2 > 0.0);
  }
  return result;
}

double sub_1A9BE33B8()
{
  uint64_t v0;
  void *v1;
  double result;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (!v1)
    return 0.0;
  objc_msgSend(v1, sel_windDownTime);
  return result;
}

void sub_1A9BE33DC()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule), sel_setWindDownTime_);
  sub_1A9BE3DB8();
}

void (*sub_1A9BE3404(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  a1[1] = v1;
  a1[2] = v3;
  v4 = *(void **)(v1 + v3);
  if (v4)
    objc_msgSend(v4, sel_windDownTime);
  else
    v5 = 0;
  *a1 = v5;
  return sub_1A9BE3458;
}

void sub_1A9BE3458(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16)), sel_setWindDownTime_, *(double *)a1);
  sub_1A9BE3DB8();
}

uint64_t sub_1A9BE348C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  void *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v24)(void);
  id v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;

  v1 = sub_1A9CE8778();
  v2 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  v36 = v2;
  MEMORY[0x1E0C80A78](v1, v3);
  v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B929B4();
  v6 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  v38 = v6;
  MEMORY[0x1E0C80A78](v5, v7);
  v34 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB5404();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BE4BA0();
  v14 = v13;
  v32 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24);
  v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 32);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider), v18);
  v39 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
  v20 = MEMORY[0x1E0C95F88];
  sub_1A9BE4C70(0, (unint64_t *)&qword_1ED2628D0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
  sub_1A9BE4CF0((unint64_t *)&qword_1EEB43068, (unint64_t *)&qword_1ED2628D0, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))v20, MEMORY[0x1E0C95FB8]);
  v21 = (void *)sub_1A9CE6E88();
  swift_release();
  v39 = v21;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v40 = (id)sub_1A9CE870C();
  v22 = sub_1A9CE8700();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v12, 1, 1, v22);
  v24 = MEMORY[0x1E0C95D78];
  sub_1A9BE4C70(0, &qword_1EEB456A8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
  sub_1A9BE4CF0(&qword_1EEB456B0, &qword_1EEB456A8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))v24, MEMORY[0x1E0C95D90]);
  sub_1A9B92A68();
  sub_1A9CE6EAC();
  sub_1A9BB5AF4((uint64_t)v12);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9BE4B60(&qword_1EEB456B8, 255, (uint64_t (*)(uint64_t))sub_1A9BE4BA0, MEMORY[0x1E0C95CB8]);
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v14);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  v25 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v26 = v33;
  sub_1A9CE8784();

  v39 = (id)sub_1A9CE870C();
  v23(v12, 1, 1, v22);
  sub_1A9BE4B60(&qword_1ED2632E0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v28 = v34;
  v27 = v35;
  sub_1A9CE6EAC();
  sub_1A9BB5AF4((uint64_t)v12);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v27);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9BE4B60((unint64_t *)&unk_1ED262560, 255, (uint64_t (*)(uint64_t))sub_1A9B929B4, MEMORY[0x1E0C95CB8]);
  v29 = v37;
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v29);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  return swift_release();
}

void sub_1A9BE3964(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9BE3A4C(v2);

  }
}

uint64_t sub_1A9BE39BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v2);
  if (result)
  {
    v4 = (void *)result;
    type metadata accessor for SleepScheduleModel();
    sub_1A9BE4B60(&qword_1EEB454E8, v5, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
    sub_1A9CE6D98();

    sub_1A9CE6E10();
    return swift_release();
  }
  return result;
}

void sub_1A9BE3A4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23[4];
  uint64_t v24;

  v2 = v1;
  swift_getObjectType();
  if (!a1)
  {
    v5 = (void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
    v6 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
LABEL_10:
    if (!v6)
      return;
    v4 = 0;
    goto LABEL_12;
  }
  objc_msgSend(a1, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45698);
  if (swift_dynamicCast())
    v4 = (id)v24;
  else
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);
  v5 = (void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (!v4)
    goto LABEL_10;
  if (!v6
    || (v7 = v6,
        v8 = v4,
        v9 = sub_1A9CE8814(),
        v8,
        v7,
        (v9 & 1) == 0))
  {
LABEL_12:
    if (qword_1ED2628A0 != -1)
      swift_once();
    v10 = sub_1A9CE6990();
    __swift_project_value_buffer(v10, (uint64_t)qword_1ED262888);
    v11 = v4;
    v12 = sub_1A9CE6978();
    v13 = sub_1A9CE864C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      v15 = v23[0];
      *(_DWORD *)v14 = 136446466;
      v16 = sub_1A9CE8D48();
      v24 = sub_1A9B91D6C(v16, v17, v23);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      v24 = (uint64_t)v4;
      sub_1A9BE2564(0, &qword_1EEB45690, (unint64_t *)&qword_1EEB45698);
      v18 = v11;
      v19 = sub_1A9CE82F8();
      v24 = sub_1A9B91D6C(v19, v20, v23);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] Updating sleep schedule: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v15, -1, -1);
      MEMORY[0x1AF420344](v14, -1, -1);

    }
    else
    {

    }
    v21 = *v5;
    *v5 = v4;
    v8 = v11;

    type metadata accessor for SleepScheduleModel();
    sub_1A9BE4B60(&qword_1EEB454E8, v22, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
    sub_1A9CE6D98();
    sub_1A9CE6E10();
    swift_release();
  }

}

void sub_1A9BE3DB8()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t aBlock[6];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  if (v4)
  {
    v5 = ObjectType;
    v6 = qword_1ED2628A0;
    v7 = v4;
    if (v6 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
    v9 = v1;
    v10 = sub_1A9CE6978();
    v11 = sub_1A9CE864C();
    if (os_log_type_enabled(v10, v11))
    {
      v28 = v7;
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      aBlock[0] = v13;
      *(_DWORD *)v12 = 136446466;
      v14 = sub_1A9CE8D48();
      sub_1A9B91D6C(v14, v15, aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v16 = *(void **)&v1[v3];
      sub_1A9BE2564(0, &qword_1EEB45690, (unint64_t *)&qword_1EEB45698);
      v17 = v16;
      v18 = sub_1A9CE82F8();
      sub_1A9B91D6C(v18, v19, aBlock);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Saving sleep schedule: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v13, -1, -1);
      v20 = v12;
      v7 = v28;
      MEMORY[0x1AF420344](v20, -1, -1);

    }
    else
    {

    }
    v21 = &v9[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider];
    v22 = *(_QWORD *)&v9[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider + 24];
    v23 = *((_QWORD *)v21 + 4);
    __swift_project_boxed_opaque_existential_1Tm(v21, v22);
    v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v5;
    aBlock[4] = (uint64_t)sub_1A9BE4D74;
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9BE4D94;
    aBlock[3] = (uint64_t)&block_descriptor_3;
    v26 = _Block_copy(aBlock);
    v27 = v7;
    swift_release();
    objc_msgSend(v24, sel_saveCurrentSleepSchedule_completion_, v27, v26);
    _Block_release(v26);

  }
}

void sub_1A9BE40C0(char a1, id a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *oslog;
  void *v24;

  if ((a1 & 1) != 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v2 = sub_1A9CE6990();
    __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
    oslog = sub_1A9CE6978();
    v3 = sub_1A9CE864C();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v24 = (void *)v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_1A9CE8D48();
      sub_1A9B91D6C(v6, v7, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, oslog, v3, "[%{public}s] Successfully saved sleep schedule.", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v5, -1, -1);
      MEMORY[0x1AF420344](v4, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (a2)
    {
      v9 = a2;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_1A9BC0CD8(MEMORY[0x1E0DEE9D8]);
      sub_1A9BE4B60((unint64_t *)&qword_1EEB434A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
      sub_1A9CE61C8();
      v9 = v24;
    }
    v10 = a2;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v11 = sub_1A9CE6990();
    __swift_project_value_buffer(v11, (uint64_t)qword_1ED262888);
    v12 = v9;
    v13 = v9;
    v14 = sub_1A9CE6978();
    v15 = sub_1A9CE8664();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v24 = (void *)v17;
      *(_DWORD *)v16 = 136446466;
      v18 = sub_1A9CE8D48();
      sub_1A9B91D6C(v18, v19, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      v20 = v9;
      sub_1A9BB15F4();
      v21 = sub_1A9CE82F8();
      sub_1A9B91D6C(v21, v22, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Error saving sleep schedule: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v17, -1, -1);
      MEMORY[0x1AF420344](v16, -1, -1);

    }
    else
    {

    }
  }
}

id SleepScheduleModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepScheduleModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BE45B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SleepScheduleModel();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

id sub_1A9BE45E8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v15;
  id v16;
  objc_super v17;
  _QWORD v18[5];

  v18[3] = type metadata accessor for SleepScheduleProvider();
  v18[4] = &protocol witness table for SleepScheduleProvider;
  v18[0] = a1;
  v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  *(_QWORD *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule] = 0;
  *(_QWORD *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  sub_1A9B923D4((uint64_t)v18, (uint64_t)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider]);
  v9 = &a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
  *(_QWORD *)v9 = a2;
  *((_QWORD *)v9 + 1) = a3;
  v10 = a4;
  swift_retain();
  swift_retain();
  sub_1A9CE6DD4();
  swift_release();
  if (v16)
  {
    objc_msgSend(v16, sel_mutableCopy);
    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45698);
    if (swift_dynamicCast())
      v11 = v15;
    else
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);

  }
  else
  {
    v11 = 0;
  }
  v12 = *(void **)&a4[v8];
  *(_QWORD *)&a4[v8] = v11;

  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for SleepScheduleModel();
  v13 = objc_msgSendSuper2(&v17, sel_init);
  sub_1A9BE348C();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  return v13;
}

id sub_1A9BE47A4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v22;
  objc_super v23;
  uint64_t v24[5];

  v24[3] = a5;
  v24[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  v13 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  *(_QWORD *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule] = 0;
  *(_QWORD *)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  sub_1A9B923D4((uint64_t)v24, (uint64_t)&a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepScheduleProvider]);
  v14 = &a4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_currentDateProvider];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  v15 = a4;
  swift_retain();
  v16 = (void *)SleepScheduleProviding.sleepSchedule.getter(a5, a6);
  v17 = v16;
  if (v16)
  {
    objc_msgSend(v16, sel_mutableCopy);
    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45698);
    if (swift_dynamicCast())
      v18 = v22;
    else
      v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8528]), sel_init);

  }
  else
  {
    v18 = 0;
  }
  v19 = *(void **)&a4[v13];
  *(_QWORD *)&a4[v13] = v18;

  v23.receiver = v15;
  v23.super_class = (Class)type metadata accessor for SleepScheduleModel();
  v20 = objc_msgSendSuper2(&v23, sel_init);
  sub_1A9BE348C();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  return v20;
}

id sub_1A9BE495C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepScheduleModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return sub_1A9BE47A4((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1A9BE4A0C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A9BE4A30()
{
  uint64_t v0;

  sub_1A9BE3288(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for SleepScheduleModel()
{
  return objc_opt_self();
}

id sub_1A9BE4A58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = *(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (result)
    result = objc_msgSend(result, sel_windDownTime);
  else
    v4 = 0;
  *a2 = v4;
  return result;
}

void sub_1A9BE4AA0(double *a1, _QWORD *a2)
{
  objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule), sel_setWindDownTime_, *a1);
  sub_1A9BE3DB8();
}

uint64_t method lookup function for SleepScheduleModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepScheduleModel.__allocating_init(sleepScheduleProvider:currentDateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of SleepScheduleModel.hasWindDown.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SleepScheduleModel.windDownTime.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t sub_1A9BE4B60(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1AF420284](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1A9BE4BA0()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEB456A0)
  {
    v0 = MEMORY[0x1E0C95D78];
    sub_1A9BE4C70(255, &qword_1EEB456A8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    sub_1A9BE4CF0(&qword_1EEB456B0, &qword_1EEB456A8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))v0, MEMORY[0x1E0C95D90]);
    sub_1A9B92A68();
    v1 = sub_1A9CE6D50();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEB456A0);
  }
}

void sub_1A9BE4C70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9BE2564(255, (unint64_t *)&qword_1ED262910, (unint64_t *)&qword_1ED262900);
    v7 = a3(a1, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1A9BE4CF0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1A9BE4C70(255, a2, a3);
    result = MEMORY[0x1AF420284](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9BE4D30()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BE4D54(void **a1)
{
  uint64_t v1;

  sub_1A9BE3964(a1, v1);
}

uint64_t sub_1A9BE4D5C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BE39BC(a1, v1);
}

uint64_t sub_1A9BE4D64()
{
  return swift_deallocObject();
}

void sub_1A9BE4D74(char a1, id a2)
{
  sub_1A9BE40C0(a1, a2);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void sub_1A9BE4D94(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_1A9BE4DF4()
{
  uint64_t v1;

  swift_getObjectType();
  v1 = sub_1A9CE8D48();
  sub_1A9CE8340();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t LockScreenContentModel.stateDidChange.getter()
{
  return swift_retain();
}

uint64_t sub_1A9BE4E88@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BE4F04(uint64_t a1, void **a2)
{
  void *v2;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v2;
  sub_1A9CE6E70();
  return sub_1A9BE4F7C();
}

uint64_t sub_1A9BE4F7C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  swift_getObjectType();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49410);
  v2 = v0;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v14 = v6;
    *(_DWORD *)v5 = 136446466;
    v12 = sub_1A9CE8D48();
    v13 = v7;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9B91D6C(v12, v13, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9CE6E64();
    swift_release();
    swift_release();
    v8 = sub_1A9CE82F8();
    v11 = sub_1A9B91D6C(v8, v9, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] updated state: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }
  else
  {

  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if (v11 == 3)
    sub_1A9C12DF4();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  LOBYTE(v14) = v11;
  return sub_1A9CE6DA4();
}

uint64_t sub_1A9BE52D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9BE5340()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  sub_1A9CE6E70();
  return sub_1A9BE4F7C();
}

uint64_t (*sub_1A9BE53B0(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  *a1 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return sub_1A9BE5428;
}

uint64_t sub_1A9BE5428(uint64_t a1)
{
  char v2;
  void *v3;
  id v4;

  v2 = *(_BYTE *)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = *(void **)a1;
  *(_BYTE *)(a1 + 9) = v2;
  v4 = v3;
  sub_1A9CE6E70();
  return sub_1A9BE4F7C();
}

uint64_t sub_1A9BE549C()
{
  return sub_1A9BE59E8((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1EEB456D8, (uint64_t)&type metadata for LockScreenContentState);
}

uint64_t sub_1A9BE54B8(uint64_t a1)
{
  return sub_1A9BE5A84(a1, &qword_1EEB456E0, (uint64_t)&type metadata for LockScreenContentState, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1EEB456D8);
}

void (*sub_1A9BE54DC(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1A9B94CA0(0, &qword_1EEB456E0, (uint64_t)&type metadata for LockScreenContentState, MEMORY[0x1E0C96180]);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1A9B94CA0(0, &qword_1EEB456D8, (uint64_t)&type metadata for LockScreenContentState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v3[16] = v9;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BE55CC;
}

uint64_t sub_1A9BE55D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1A9BE564C(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = v2;
  return sub_1A9CE6E70();
}

uint64_t sub_1A9BE56B8()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1A9BE5730()
{
  void *v0;
  id v1;

  swift_getKeyPath();
  swift_getKeyPath();
  v1 = v0;
  return sub_1A9CE6E70();
}

void (*sub_1A9BE5798(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A9CE6E58();
  return sub_1A9BAFE14;
}

uint64_t sub_1A9BE5810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  swift_beginAccess();
  sub_1A9B94CA0(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BE5890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v23;

  sub_1A9B94CA0(0, a5, a6, MEMORY[0x1E0C96180]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v23 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v23 - v19, a1, v12);
  v21(v17, (uint64_t)v20, v12);
  swift_beginAccess();
  sub_1A9B94CA0(0, a8, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v20, v12);
}

uint64_t sub_1A9BE59CC()
{
  return sub_1A9BE59E8((uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0]);
}

uint64_t sub_1A9BE59E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  swift_beginAccess();
  sub_1A9B94CA0(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9BE5A60(uint64_t a1)
{
  return sub_1A9BE5A84(a1, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1EEB456F0);
}

uint64_t sub_1A9BE5A84(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_1A9B94CA0(0, a2, a3, MEMORY[0x1E0C96180]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v14 - v12, a1, v9);
  swift_beginAccess();
  sub_1A9B94CA0(0, a5, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

void (*sub_1A9BE5B74(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = MEMORY[0x1E0DEAFA0];
  sub_1A9B94CA0(0, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  v8 = malloc(v7);
  v9 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, v4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v3[16] = v10;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BE55CC;
}

uint64_t sub_1A9BE5C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v3 = sub_1A9CE6378();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A9BE9F04(0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = &v20[-v14];
  v16 = v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel____lazy_storage___gregorianCalendar;
  swift_beginAccess();
  sub_1A9BA6F90(v16, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9BE9F04);
  v17 = sub_1A9CE6444();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(a1, v15, v17);
  sub_1A9B97190((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9BE9F04);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0CB0EF8], v3);
  sub_1A9CE6384();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v12, a1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
  swift_beginAccess();
  sub_1A9BE9F20((uint64_t)v12, v16);
  return swift_endAccess();
}

void LockScreenContentModel.__allocating_init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  LockScreenContentModel.init(debugIdentifier:)(a1, a2);
}

void LockScreenContentModel.init(debugIdentifier:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  _QWORD *v48;
  objc_class *v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char v73;
  char *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t aBlock[6];
  objc_super v87;

  v3 = v2;
  v79 = a1;
  v80 = a2;
  sub_1A9BE6794(0);
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v76 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEAFA0];
  sub_1A9B94CA0(0, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
  v83 = *(_QWORD *)(v8 - 8);
  v84 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v82 = (char *)&v75 - v10;
  v11 = MEMORY[0x1E0C96198];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB456F0, v7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v75 - v16;
  sub_1A9B94CA0(0, &qword_1EEB456D8, (uint64_t)&type metadata for LockScreenContentState, (uint64_t (*)(_QWORD, uint64_t))v11);
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v75 - v22;
  v24 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_stateDidChange;
  sub_1A9BE67B0();
  swift_allocObject();
  v25 = v3;
  *(_QWORD *)&v3[v24] = sub_1A9CE6DB0();
  v26 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state];
  LOBYTE(aBlock[0]) = 0;
  sub_1A9CE6E34();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v23, v19);
  v27 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed];
  LOBYTE(aBlock[0]) = 0;
  sub_1A9CE6E34();
  v28 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v81 = v13;
  v28(v27, v17, v13);
  v29 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore;
  if (qword_1EEB42BC8 != -1)
    swift_once();
  v30 = (void *)qword_1EEB57260;
  v31 = objc_allocWithZone(MEMORY[0x1E0DA8598]);
  v32 = v30;
  v33 = (void *)sub_1A9CE82B0();
  v34 = objc_msgSend(v31, sel_initWithIdentifier_healthStore_, v33, v32);

  *(_QWORD *)&v25[v29] = v34;
  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider] = 0;
  v35 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel____lazy_storage___gregorianCalendar];
  v36 = sub_1A9CE6444();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_cancellables] = MEMORY[0x1E0DEE9E8];
  v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible] = 0;
  v37 = &v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState];
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel] = 0;
  v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState] = 4;
  v38 = (uint64_t *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_debugIdentifier];
  v40 = v79;
  v39 = v80;
  *v38 = v79;
  v38[1] = v39;
  v41 = objc_allocWithZone((Class)type metadata accessor for LocationModel());
  swift_bridgeObjectRetain_n();
  v42 = LocationModel.init(debugIdentifier:)(v40, v39);
  v43 = objc_allocWithZone((Class)type metadata accessor for WeatherModel(0));
  v44 = sub_1A9BDCFFC(v42, v40, v39);

  v45 = objc_allocWithZone((Class)type metadata accessor for WeatherPrefetchScheduler());
  v46 = WeatherPrefetchScheduler.init(sleepStore:)(v34);
  type metadata accessor for WeatherPrefetcher();
  swift_allocObject();
  v47 = v44;
  v75 = v46;
  v48 = sub_1A9C1388C(v47, v46);

  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_weatherPrefetcher] = v48;
  type metadata accessor for ContentAppearenceProvider();
  swift_allocObject();
  *(_QWORD *)&v25[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_contentAppearanceProvider] = sub_1A9C44638(v40, v39);

  v49 = (objc_class *)type metadata accessor for LockScreenContentModel();
  v87.receiver = v25;
  v87.super_class = v49;
  v50 = objc_msgSendSuper2(&v87, sel_init);
  v51 = qword_1EEB42E78;
  v52 = v50;
  if (v51 != -1)
    swift_once();
  v53 = sub_1A9CE6990();
  __swift_project_value_buffer(v53, (uint64_t)qword_1EEB49440);
  v54 = (char *)v52;
  v55 = sub_1A9CE6978();
  v56 = sub_1A9CE867C();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    aBlock[0] = v58;
    *(_DWORD *)v57 = 136446210;
    v59 = sub_1A9BE4DF4();
    v85 = sub_1A9B91D6C(v59, v60, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v55, v56, "[%{public}s] init", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v58, -1, -1);
    MEMORY[0x1AF420344](v57, -1, -1);
  }
  else
  {

  }
  v62 = v83;
  v61 = v84;
  v63 = v82;
  v64 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for AlarmProvider();
  swift_allocObject();
  v65 = sub_1A9CA9290((uint64_t)sub_1A9BE94E8, v64);
  v66 = OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider;
  *(_QWORD *)&v54[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider] = v65;
  swift_release();
  swift_beginAccess();
  sub_1A9CE6E40();
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9BE94F8();
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  v67 = *(void **)&v54[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  objc_msgSend(v67, sel_addObserver_, v54);
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = v54;
  aBlock[4] = (uint64_t)sub_1A9BE957C;
  aBlock[5] = v68;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BB6368;
  aBlock[3] = (uint64_t)&block_descriptor_4;
  v69 = _Block_copy(aBlock);
  v70 = v54;
  swift_release();
  objc_msgSend(v67, sel_sleepScheduleModelWithCompletion_, v69);
  _Block_release(v69);
  if (*(_QWORD *)&v54[v66])
  {
    swift_retain();
    sub_1A9CA9D1C();
    swift_release();
    swift_beginAccess();
    sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    v71 = v76;
    sub_1A9CE6E40();
    swift_endAccess();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92B9C(&qword_1EEB45768, (uint64_t (*)(uint64_t))sub_1A9BE6794, MEMORY[0x1E0C96190]);
    v72 = v78;
    sub_1A9CE6EC4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v71, v72);
    swift_beginAccess();
    sub_1A9CE6D74();
    swift_endAccess();
    swift_release();
    v73 = byte_1EEB456C0;

    v74 = &v70[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
    swift_beginAccess();
    *v74 = v73;
  }
  else
  {
    __break(1u);
  }
}

void sub_1A9BE6794(uint64_t a1)
{
  sub_1A9B92F34(a1, (unint64_t *)&unk_1EEB45700, (uint64_t (*)(uint64_t))sub_1A9BD979C, MEMORY[0x1E0C96180]);
}

void sub_1A9BE67B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45710)
  {
    v0 = sub_1A9CE6DBC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45710);
  }
}

void sub_1A9BE6814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  int v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for Alarm();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v38 - v11;
  sub_1A9BE95A4(0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (char *)v38 - v20;
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)v38 - v23;
  swift_beginAccess();
  v25 = MEMORY[0x1AF4203E0](a2 + 16);
  if (v25)
  {
    v26 = (void *)v25;
    if (qword_1EEB42E60 != -1)
      swift_once();
    v27 = sub_1A9CE6990();
    __swift_project_value_buffer(v27, (uint64_t)qword_1EEB49410);
    sub_1A9BA6F90(a1, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
    v28 = v26;
    v29 = sub_1A9CE6978();
    v30 = sub_1A9CE867C();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      v40 = v30;
      v38[0] = (uint64_t)v9;
      v41 = v29;
      v31 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v43 = v39;
      *(_DWORD *)v31 = 136446466;
      v32 = sub_1A9BE4DF4();
      v42 = sub_1A9B91D6C(v32, v33, &v43);
      v38[1] = (uint64_t)&v43;
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      *(_WORD *)(v31 + 12) = 2082;
      sub_1A9BA6F90((uint64_t)v24, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
      sub_1A9BA6F90((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
      {
        v34 = 0xE300000000000000;
        v35 = 7104878;
      }
      else
      {
        sub_1A9BE9FBC((uint64_t)v17, (uint64_t)v12);
        sub_1A9BA6F90((uint64_t)v12, v38[0], (uint64_t (*)(_QWORD))type metadata accessor for Alarm);
        v35 = sub_1A9CE82F8();
        v34 = v36;
        sub_1A9B97190((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Alarm);
      }
      sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
      v42 = sub_1A9B91D6C(v35, v34, &v43);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      sub_1A9B97190((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
      v29 = v41;
      _os_log_impl(&dword_1A9B87000, v41, (os_log_type_t)v40, "[%{public}s] updated alarm: %{public}s", (uint8_t *)v31, 0x16u);
      v37 = v39;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v37, -1, -1);
      MEMORY[0x1AF420344](v31, -1, -1);
    }
    else
    {

      sub_1A9B97190((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
    }

    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9CE6E64();
    swift_release();
    swift_release();
    if ((_BYTE)v43)
    {
      if (v43 != 3)
      {
        type metadata accessor for LockScreenContentModel();
        sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
        sub_1A9CE6D98();
        sub_1A9CE6E10();
        swift_release();
      }
    }

  }
}

void sub_1A9BE6C6C(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    *(_BYTE *)(v4 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible) = v2;
    sub_1A9BE712C();

  }
}

void sub_1A9BE6CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9CE6E64();
    swift_release();
    swift_release();
    if (v5 == 3)
    {
      type metadata accessor for LockScreenContentModel();
      sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
      sub_1A9CE6D98();
      sub_1A9CE6E10();
      swift_release();
    }

  }
}

id LockScreenContentModel.__deallocating_deinit()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  objc_class *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  objc_super v13;

  swift_getObjectType();
  if (qword_1EEB42E78 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49440);
  v2 = v0;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136446210;
    v10 = sub_1A9CE8D48();
    v11 = v7;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9B91D6C(v10, v11, &v12);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }
  else
  {

  }
  v8 = (objc_class *)type metadata accessor for LockScreenContentModel();
  v13.receiver = v2;
  v13.super_class = v8;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

void sub_1A9BE712C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  swift_getObjectType();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49410);
  v2 = v0;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136446466;
    v10 = sub_1A9CE8D48();
    v11 = v7;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    sub_1A9B91D6C(v10, v11, &v12);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    if (*((_BYTE *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible))
      v8 = 1702195828;
    else
      v8 = 0x65736C6166;
    if (*((_BYTE *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible))
      v9 = 0xE400000000000000;
    else
      v9 = 0xE500000000000000;
    sub_1A9B91D6C(v8, v9, &v12);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] updated visible: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }
  else
  {

  }
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_visible) == 1)
    sub_1A9BE7C1C();
}

id sub_1A9BE73B4()
{
  uint64_t v0;
  id result;
  void *v2;
  unint64_t v3;

  result = *(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel);
  if (result)
  {
    result = objc_msgSend(result, sel_sleepSettings);
    if (result)
    {
      v2 = result;
      v3 = (unint64_t)objc_msgSend(result, sel_sleepModeOptions);

      return (id)((v3 >> 3) & 1);
    }
  }
  return result;
}

uint64_t sub_1A9BE7410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider);
  if (v3)
  {
    v4 = v3 + OBJC_IVAR____TtC13SleepHealthUI13AlarmProvider_alarm;
    swift_beginAccess();
    return sub_1A9BA6F90(v4, a1, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1A9BE7480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = v1;
  swift_getObjectType();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEB49410);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1A9CE8D48();
    sub_1A9B91D6C(v9, v10, &v11);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] dismiss active alarm", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_alarmProvider))
  {
    swift_retain();
    sub_1A9CA9894(a1);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_1A9BE7638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = sub_1A9CE62E8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1EEB49410);
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v25 = ObjectType;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    v24 = v3;
    v14 = v13;
    aBlock[0] = v13;
    *(_DWORD *)v12 = 136446210;
    v15 = sub_1A9CE8D48();
    v26 = sub_1A9B91D6C(v15, v16, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] skip upcoming alarm", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    v3 = v24;
    MEMORY[0x1AF420344](v17, -1, -1);
    v18 = v12;
    ObjectType = v25;
    MEMORY[0x1AF420344](v18, -1, -1);
  }

  v19 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore);
  sub_1A9CE62DC();
  v20 = (void *)sub_1A9CE6258();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_1A9BE95D0;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_19;
  v22 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v19, sel_skipUpcomingWakeUpAlarmForDate_completion_, v20, v22);
  _Block_release(v22);

}

void sub_1A9BE78C0(char a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;

  if ((a1 & 1) == 0)
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v3 = sub_1A9CE6990();
    __swift_project_value_buffer(v3, (uint64_t)qword_1EEB49410);
    v4 = a2;
    v5 = a2;
    oslog = sub_1A9CE6978();
    v6 = sub_1A9CE8664();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v16 = v8;
      *(_DWORD *)v7 = 136446466;
      v9 = sub_1A9CE8D48();
      sub_1A9B91D6C(v9, v10, &v16);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      if (a2)
      {
        v11 = a2;
        sub_1A9BB15F4();
        v12 = sub_1A9CE82F8();
        v14 = v13;
      }
      else
      {
        v14 = 0xE300000000000000;
        v12 = 7104878;
      }
      sub_1A9B91D6C(v12, v14, &v16);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, oslog, v6, "[%{public}s] failed to skip upcoming alarm: %{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v8, -1, -1);
      MEMORY[0x1AF420344](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1A9BE7AFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A9BE7B44(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return sub_1A9BE7C1C();
}

uint64_t (*sub_1A9BE7BA4(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9BE7BEC;
}

uint64_t sub_1A9BE7BEC(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9BE7C1C();
  return result;
}

uint64_t sub_1A9BE7C1C()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  uint64_t result;

  v1 = &v0[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
  swift_beginAccess();
  if (*v1 == 4
    && (v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState],
        swift_beginAccess(),
        (v2[8] & 1) == 0))
  {
    switch(*(_QWORD *)v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        goto LABEL_3;
      default:
        result = sub_1A9CE8A84();
        __break(1u);
        break;
    }
  }
  else
  {
LABEL_3:
    swift_getKeyPath();
    swift_getKeyPath();
    v3 = v0;
    sub_1A9CE6E70();
    return sub_1A9BE4F7C();
  }
  return result;
}

void sub_1A9BE7DF0()
{
  sub_1A9BE7E4C((uint64_t)&unk_1E55D5D40, (uint64_t)sub_1A9BE95D8, (uint64_t)&block_descriptor_25, (SEL *)&selRef_dismissGoodMorningWithCompletion_);
}

void sub_1A9BE7E14(char a1, void *a2, void *a3)
{
  sub_1A9BE7F00(a1, a2, a3, "[%{public}s] dismissed wake up greeting", "[%{public}s] failed to dismiss wake up greeting: %{public}s");
}

void sub_1A9BE7E28()
{
  sub_1A9BE7E4C((uint64_t)&unk_1E55D5D90, (uint64_t)sub_1A9BE9600, (uint64_t)&block_descriptor_31, (SEL *)&selRef_dismissSleepLockWithCompletion_);
}

void sub_1A9BE7E4C(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  char *v4;
  void *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  _QWORD v12[6];

  v8 = *(void **)&v4[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v4;
  v12[4] = a2;
  v12[5] = v9;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_1A9BE4D94;
  v12[3] = a3;
  v10 = _Block_copy(v12);
  v11 = v4;
  swift_release();
  objc_msgSend(v8, *a4, v10);
  _Block_release(v10);
}

void sub_1A9BE7F00(char a1, void *a2, void *a3, const char *a4, const char *a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  swift_getObjectType();
  if ((a1 & 1) != 0)
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v10 = sub_1A9CE6990();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EEB49410);
    v29 = a3;
    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE867C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v34 = v14;
      *(_DWORD *)v13 = 136446210;
      v30 = sub_1A9CE8D48();
      v32 = v15;
      sub_1A9CE8340();
      swift_bridgeObjectRetain();
      sub_1A9CE8340();
      swift_bridgeObjectRelease();
      sub_1A9B91D6C(v30, v32, &v34);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v11, v12, a4, v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);

      return;
    }

    goto LABEL_13;
  }
  if (qword_1EEB42E60 != -1)
    swift_once();
  v16 = sub_1A9CE6990();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EEB49410);
  v17 = a3;
  v18 = a2;
  v19 = v17;
  v20 = a2;
  v29 = sub_1A9CE6978();
  v21 = sub_1A9CE8664();
  if (!os_log_type_enabled(v29, v21))
  {

LABEL_13:
    return;
  }
  v22 = swift_slowAlloc();
  v23 = swift_slowAlloc();
  v34 = v23;
  *(_DWORD *)v22 = 136446466;
  v31 = sub_1A9CE8D48();
  v33 = v24;
  sub_1A9CE8340();
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9B91D6C(v31, v33, &v34);
  sub_1A9CE888C();

  swift_bridgeObjectRelease();
  *(_WORD *)(v22 + 12) = 2082;
  if (a2)
  {
    v25 = a2;
    sub_1A9BB15F4();
    v26 = sub_1A9CE82F8();
    v28 = v27;
  }
  else
  {
    v28 = 0xE300000000000000;
    v26 = 7104878;
  }
  sub_1A9B91D6C(v26, v28, &v34);
  sub_1A9CE888C();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1A9B87000, v29, v21, a5, (uint8_t *)v22, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1AF420344](v23, -1, -1);
  MEMORY[0x1AF420344](v22, -1, -1);

}

void sub_1A9BE8370(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t aBlock;
  unint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void (*v41)();
  uint64_t v42;
  uint64_t v43;

  swift_getObjectType();
  v6 = sub_1A9CE8070();
  v7 = *(NSObject **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE8094();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
    v16 = a1;
    v36 = v7;
    v17 = v16;
    v18 = (void *)sub_1A9CE870C();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 24) = v17;
    v41 = sub_1A9BE9FB4;
    v42 = v19;
    aBlock = MEMORY[0x1E0C809B0];
    v38 = 1107296256;
    v39 = sub_1A9C0A74C;
    v40 = &block_descriptor_52;
    v20 = _Block_copy(&aBlock);
    v21 = a3;
    v22 = v17;
    swift_release();
    sub_1A9CE8088();
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1A9BE9F98(0);
    sub_1A9B92B9C((unint64_t *)&qword_1EEB45830, (uint64_t (*)(uint64_t))sub_1A9BE9F98, MEMORY[0x1E0DEAF38]);
    sub_1A9CE8904();
    MEMORY[0x1AF41F348](0, v15, v10, v20);
    _Block_release(v20);

    ((void (*)(char *, uint64_t))v36[1].isa)(v10, v6);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v23 = sub_1A9CE6990();
    __swift_project_value_buffer(v23, (uint64_t)qword_1EEB49410);
    v24 = a3;
    v25 = a2;
    v26 = v24;
    v27 = a2;
    v36 = sub_1A9CE6978();
    v28 = sub_1A9CE8664();
    if (os_log_type_enabled(v36, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v43 = v30;
      *(_DWORD *)v29 = 136446466;
      aBlock = sub_1A9CE8D48();
      v38 = v31;
      sub_1A9CE8340();
      swift_bridgeObjectRetain();
      sub_1A9CE8340();
      swift_bridgeObjectRelease();
      aBlock = sub_1A9B91D6C(aBlock, v38, &v43);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      *(_WORD *)(v29 + 12) = 2082;
      if (a2)
      {
        aBlock = (uint64_t)a2;
        v32 = a2;
        sub_1A9BB15F4();
        v33 = sub_1A9CE82F8();
        v35 = v34;
      }
      else
      {
        v35 = 0xE300000000000000;
        v33 = 7104878;
      }
      aBlock = sub_1A9B91D6C(v33, v35, &v43);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v36, v28, "[%{public}s] failed to retrieve sleep schedule model: %{public}s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v30, -1, -1);
      MEMORY[0x1AF420344](v29, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1A9BE8810(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel) = a2;
  v3 = a2;

  sub_1A9BE7C1C();
}

uint64_t sub_1A9BE885C(uint64_t a1, void *a2)
{
  return sub_1A9BE9628(a2);
}

void sub_1A9BE8864(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1EEB42E60 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EEB49410);
  v5 = a1;
  v6 = a2;
  v7 = (char *)v5;
  v8 = v6;
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v22 = v21;
    *(_DWORD *)v11 = 136446466;
    v12 = sub_1A9BE4DF4();
    sub_1A9B91D6C(v12, v13, &v22);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2082;
    v14 = v8;
    v15 = objc_msgSend(v14, sel_description);
    v16 = sub_1A9CE82E0();
    v18 = v17;

    sub_1A9B91D6C(v16, v18, &v22);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] updated sleep schedule model: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v21, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);
  }
  else
  {

  }
  v19 = *(void **)&v7[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel];
  *(_QWORD *)&v7[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepScheduleModel] = v8;
  v20 = v8;

  sub_1A9BE7C1C();
}

uint64_t sub_1A9BE8B1C()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  swift_getObjectType();
  if (qword_1EEB42E60 != -1)
    swift_once();
  v1 = sub_1A9CE6990();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EEB49410);
  v2 = v0;
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v14 = v6;
    *(_DWORD *)v5 = 136446466;
    v15 = sub_1A9CE8D48();
    v16 = v7;
    sub_1A9CE8340();
    swift_bridgeObjectRetain();
    sub_1A9CE8340();
    swift_bridgeObjectRelease();
    v15 = sub_1A9B91D6C(v15, v16, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 12) = 2082;
    v8 = &v2[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
    swift_beginAccess();
    if (*v8 == 4)
    {
      v9 = 0xE300000000000000;
      v10 = 7104878;
    }
    else
    {
      LOBYTE(v15) = *v8;
      v10 = sub_1A9CE82F8();
      v9 = v11;
    }
    v15 = sub_1A9B91D6C(v10, v9, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] updated demo state: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }
  else
  {

  }
  sub_1A9BE7C1C();
  v12 = &v2[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState];
  result = swift_beginAccess();
  byte_1EEB456C0 = *v12;
  return result;
}

uint64_t sub_1A9BE8DDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_1A9BE8E28(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  *v3 = v2;
  return sub_1A9BE8B1C();
}

uint64_t (*sub_1A9BE8E7C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9BE8EC4;
}

uint64_t sub_1A9BE8EC4(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9BE8B1C();
  return result;
}

uint64_t sub_1A9BE8EF4()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  if (*v1 == 4)
  {
    *v1 = 0;
    sub_1A9BE8B1C();
    __asm { BR              X11 }
  }
  *v1 = 4;
  return sub_1A9BE8B1C();
}

void sub_1A9BE8F7C()
{
  JUMPOUT(0x1A9BE8F64);
}

void sub_1A9BE8F84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState;
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1A9BE8FD8()
{
  _BYTE *v0;

  *v0 = 2;
  return sub_1A9BE8B1C();
}

void sub_1A9BE9000()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState;
  swift_beginAccess();
  __asm { BR              X11 }
}

uint64_t sub_1A9BE9050()
{
  _BYTE *v0;

  *v0 = 3;
  return sub_1A9BE8B1C();
}

void sub_1A9BE9074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  _QWORD v33[2];

  v2 = v1;
  v4 = sub_1A9CE6444();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE6318();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BE95A4(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BA6F90(a1, (uint64_t)v17, v18);
  v19 = type metadata accessor for Alarm();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v17, 1, v19) == 1)
  {
    sub_1A9B97190((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1A9BE95A4);
  }
  else
  {
    v20 = *(id *)&v17[*(int *)(v19 + 20)];
    sub_1A9B97190((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Alarm);
    v21 = objc_msgSend(v20, sel_alarmID);

    sub_1A9CE6300();
    sub_1A9CE62F4();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_init);
  sub_1A9BE5C64((uint64_t)v8);
  v23 = (void *)sub_1A9CE63CC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v24 = objc_msgSend(v22, sel_hk_morningIndexWithCalendar_, v23);

  v25 = objc_allocWithZone(MEMORY[0x1E0DA8508]);
  v26 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v25, sel_initWithWindDownAction_wasUsed_identifier_, 3, 1, v26);

  v28 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore), sel_analyticsManager);
  v29 = objc_msgSend(v28, sel_analyticsStore);

  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1A9CEF8A0;
  *(_QWORD *)(v30 + 32) = v27;
  v33[1] = v30;
  sub_1A9CE83E8();
  sub_1A9B94A18(0, &qword_1EEB45780);
  v31 = v27;
  v32 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_updateWindDownActions_onMorningIndex_, v32, v24);

}

id LockScreenContentModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LockScreenContentModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A9BE944C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for LockScreenContentModel();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for LockScreenContentModel()
{
  uint64_t result;

  result = qword_1EEB45810;
  if (!qword_1EEB45810)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BE94C4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BE94E8(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BE6814(a1, v1);
}

void sub_1A9BE94F0(char *a1)
{
  uint64_t v1;

  sub_1A9BE6C6C(a1, v1);
}

unint64_t sub_1A9BE94F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45758;
  if (!qword_1EEB45758)
  {
    sub_1A9B94CA0(255, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0C96180]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C96190], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45758);
  }
  return result;
}

uint64_t sub_1A9BE9558()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9BE957C(void *a1, void *a2)
{
  uint64_t v2;

  sub_1A9BE8370(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void sub_1A9BE959C(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BE6CD4(a1, v1);
}

void sub_1A9BE95A4(uint64_t a1)
{
  sub_1A9B92F34(a1, (unint64_t *)&unk_1EEB45770, (uint64_t (*)(uint64_t))type metadata accessor for Alarm, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9BE95C0()
{
  return swift_deallocObject();
}

void sub_1A9BE95D0(char a1, void *a2)
{
  sub_1A9BE78C0(a1, a2);
}

void sub_1A9BE95D8(char a1, void *a2)
{
  uint64_t v2;

  sub_1A9BE7F00(a1, a2, *(void **)(v2 + 16), "[%{public}s] dismissed wake up greeting", "[%{public}s] failed to dismiss wake up greeting: %{public}s");
}

void sub_1A9BE9600(char a1, void *a2)
{
  uint64_t v2;

  sub_1A9BE7F00(a1, a2, *(void **)(v2 + 16), "[%{public}s] dismissed sleep lock", "[%{public}s] failed to dismiss sleep lock: %{public}s");
}

uint64_t sub_1A9BE9628(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = sub_1A9CE8070();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A9CE8094();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v12 = (void *)sub_1A9CE870C();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_1A9BE9F90;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_46;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  v16 = a1;
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45820, v4, MEMORY[0x1E0DEF510]);
  sub_1A9BE9F98(0);
  sub_1A9B92B9C((unint64_t *)&qword_1EEB45830, (uint64_t (*)(uint64_t))sub_1A9BE9F98, MEMORY[0x1E0DEAF38]);
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v18);
}

uint64_t sub_1A9BE9840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BE5810(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1EEB456D8, (uint64_t)&type metadata for LockScreenContentState);
}

uint64_t sub_1A9BE986C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BE5890(a1, a2, a3, a4, &qword_1EEB456E0, (uint64_t)&type metadata for LockScreenContentState, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__state, &qword_1EEB456D8);
}

uint64_t sub_1A9BE98A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A9BE5810(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0]);
}

uint64_t sub_1A9BE98CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A9BE5890(a1, a2, a3, a4, &qword_1EEB43F70, MEMORY[0x1E0DEAFA0], (uint64_t)&OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel__alarmButtonPressed, (unint64_t *)&qword_1EEB456F0);
}

uint64_t sub_1A9BE9900@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1A9BE9958(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_lockScreenState;
  swift_beginAccess();
  *(_QWORD *)v4 = v2;
  *(_BYTE *)(v4 + 8) = v3;
  return sub_1A9BE7C1C();
}

uint64_t sub_1A9BE99B8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1A9BE9A08(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_demoState);
  swift_beginAccess();
  *v3 = v2;
  return sub_1A9BE8B1C();
}

uint64_t sub_1A9BE9A60()
{
  return type metadata accessor for LockScreenContentModel();
}

void sub_1A9BE9A68()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1A9B94CA0(319, &qword_1EEB456D8, (uint64_t)&type metadata for LockScreenContentState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1A9B94CA0(319, (unint64_t *)&qword_1EEB456F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      sub_1A9BE9F04(319);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for LockScreenContentModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LockScreenContentModel.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LockScreenContentModel.state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of LockScreenContentModel.state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of LockScreenContentModel.$state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarmButtonPressed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of LockScreenContentModel.$alarmButtonPressed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of LockScreenContentModel.__allocating_init(debugIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of LockScreenContentModel.hideTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of LockScreenContentModel.alarm.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissActiveAlarm(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of LockScreenContentModel.skipUpcomingOccurrenceAlarm()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1C0))(a1, a2 & 1);
}

uint64_t dispatch thunk of LockScreenContentModel.lockScreenState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissWakeUpGreeting()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of LockScreenContentModel.dismissSleepLock()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of LockScreenContentModel.sleepStore(_:sleepScheduleModelDidChange:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of LockScreenContentModel.demoState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of LockScreenContentModel.toggleDemoMode()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of LockScreenContentModel.moveDemoStateForward()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of LockScreenContentModel.moveDemoStateBackward()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of LockScreenContentModel.didInteractWithAlarm(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

void sub_1A9BE9F04(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED262DF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9BE9F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BE9F04(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9BE9F64()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9BE9F90()
{
  uint64_t v0;

  sub_1A9BE8864(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1A9BE9F98(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB47E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1A9BE9FB4()
{
  uint64_t v0;

  sub_1A9BE8810(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A9BE9FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Alarm();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void OptionalContentGroup<>.init(showContent:content:)(char a1@<W0>, _BYTE *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for OptionalContentGroup();
}

uint64_t sub_1A9BEA07C()
{
  uint64_t (*v0)(void);

  return v0();
}

void type metadata accessor for OptionalContentGroup()
{
  JUMPOUT(0x1AF4201F4);
}

void OptionalContentGroup.init(showContent:content:elseContent:)(char a1@<W0>, _BYTE *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for OptionalContentGroup();
}

uint64_t sub_1A9BEA0F0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t (*v1)(void);
  uint64_t v2;

  v2 = v1();
  return v0(v2);
}

uint64_t OptionalContentGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v36 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v34 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v33 - v11;
  v13 = *(_QWORD *)(v10 + 16);
  v33 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v10, v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v33 - v19;
  v21 = sub_1A9CE74F4();
  v35 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v33 - v23;
  if (*v3 == 1)
  {
    v25 = *(_QWORD *)(a1 + 32);
    sub_1A9C3C998((uint64_t)&v3[*(int *)(a1 + 52)], v13, (uint64_t)v20);
    sub_1A9C3899C((uint64_t)v20, v13, (uint64_t)v17);
    v26 = *(_QWORD *)(a1 + 40);
    sub_1A9C389B4((uint64_t)v17, v13);
    v27 = *(void (**)(char *, uint64_t))(v33 + 8);
    v27(v17, v13);
    v27(v20, v13);
  }
  else
  {
    v28 = (uint64_t)&v3[*(int *)(a1 + 56)];
    v26 = *(_QWORD *)(a1 + 40);
    sub_1A9C3C998(v28, v5, (uint64_t)v12);
    v29 = v34;
    sub_1A9C3899C((uint64_t)v12, v5, v34);
    v30 = v6;
    v25 = *(_QWORD *)(a1 + 32);
    sub_1A9C38A78(v29, v13, v5);
    v31 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v31(v29, v5);
    v31((uint64_t)v12, v5);
  }
  v37[0] = v25;
  v37[1] = v26;
  MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v21, v37);
  sub_1A9C3899C((uint64_t)v24, v21, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v24, v21);
}

uint64_t sub_1A9BEA384()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9BEA3BC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A9BEA3C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1A9BEA45C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 1) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + (((v8 | v6) + 16) & ~(v8 | v6)));
    swift_retain();
  }
  else
  {
    v13 = ~v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v14 = ((unint64_t)a1 + v6 + 1) & ~v6;
    v15 = ((unint64_t)a2 + v6 + 1) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v9) & v13, (v15 + v9) & v13, v4);
  }
  return v3;
}

uint64_t sub_1A9BEA564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_BYTE *sub_1A9BEA5CC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *sub_1A9BEA664(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *sub_1A9BEA6FC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *sub_1A9BEA794(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1A9BEA82C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v21;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 1) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFE)
      {
        v21 = (unint64_t)&a1[v8 + 1] & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v21, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v21 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *a1;
        v19 = v18 >= 2;
        v20 = (v18 + 2147483646) & 0x7FFFFFFF;
        if (v19)
          return (v20 + 1);
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 1) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A9BEA92C + 4 * byte_1A9CEF8B0[v17 - 1]))();
}

void sub_1A9BEA9D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t sub_1A9BEAC18(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;

  v2 = sub_1A9CE74F4();
  v4 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, &v4);
}

id ScheduleOccurrenceAlarmSnoozeTableViewCell.apply(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence), sel_alarmConfiguration);
  objc_msgSend(v2, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9BEAD34();
  swift_dynamicCast();
  v3 = objc_msgSend(v5, sel_allowsSnooze);

  return objc_msgSend(v1, sel_setOn_animated_, v3, 1);
}

unint64_t sub_1A9BEAD34()
{
  unint64_t result;

  result = qword_1EEB430B0;
  if (!qword_1EEB430B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB430B0);
  }
  return result;
}

unint64_t static ScheduleOccurrenceAlarmSnoozeTableViewCell.defaultReuseIdentifier.getter()
{
  return 0xD00000000000002ALL;
}

void sub_1A9BEAE74()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  _QWORD aBlock[6];

  if (qword_1ED2626A8 != -1)
    swift_once();
  v1 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v2 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setDisplayText_, v2, 0xE000000000000000);

  v3 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  aBlock[4] = sub_1A9C219C0;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C21C90;
  aBlock[3] = &block_descriptor_5;
  v4 = _Block_copy(aBlock);
  v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  objc_msgSend(v0, sel_setBackgroundColor_, v5);

}

id ScheduleOccurrenceAlarmSnoozeTableViewCell.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell()
{
  return objc_opt_self();
}

id sub_1A9BEB034(uint64_t a1)
{
  return ScheduleOccurrenceAlarmSnoozeTableViewCell.apply(_:)(a1);
}

uint64_t method lookup function for ScheduleOccurrenceAlarmSnoozeTableViewCell()
{
  return swift_lookUpClassMethod();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

char *sub_1A9BEB078(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  void *v18;
  char *v19;
  id v20;
  char *result;
  void *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  objc_super v37;

  v7 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background;
  v8 = objc_allocWithZone(MEMORY[0x1E0CD2840]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);
  v10 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v11 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator;
  *(_QWORD *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_day] = a1;
  v12 = &v9[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v12 = *(_OWORD *)a3;
  *((_OWORD *)v12 + 1) = v13;
  v15 = *(_OWORD *)(a3 + 48);
  v14 = *(_OWORD *)(a3 + 64);
  v16 = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v12 + 10) = *(_QWORD *)(a3 + 80);
  *((_OWORD *)v12 + 3) = v15;
  *((_OWORD *)v12 + 4) = v14;
  *((_OWORD *)v12 + 2) = v16;
  sub_1A9BEC7BC((_QWORD *)a3);

  v37.receiver = v9;
  v37.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  v17 = (char *)objc_msgSendSuper2(&v37, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v36 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  v18 = *(void **)&v17[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  v19 = v17;
  v20 = v18;
  result = (char *)objc_msgSend(a2, sel_veryShortStandaloneWeekdaySymbols);
  if (!result)
    goto LABEL_22;
  v22 = result;
  v23 = sub_1A9CE83DC();

  result = (char *)NSGregorianCalendarDayForHKSPDay();
  if (!result)
  {
    v25 = 0;
    goto LABEL_8;
  }
  v24 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (((unint64_t)v24 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((unint64_t)v24 >= *(_QWORD *)(v23 + 16))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = (void *)sub_1A9CE82B0();
LABEL_8:
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setText_, v25);

  v26 = v19;
  result = (char *)objc_msgSend(a2, sel_standaloneWeekdaySymbols);
  if (result)
  {
    v27 = result;
    v28 = sub_1A9CE83DC();

    result = (char *)NSGregorianCalendarDayForHKSPDay();
    if (!result)
    {
      v30 = 0;
      goto LABEL_15;
    }
    v29 = result - 1;
    if (!__OFSUB__(result, 1))
    {
      if (((unint64_t)v29 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v29 < *(_QWORD *)(v28 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v30 = (void *)sub_1A9CE82B0();
LABEL_15:
          swift_bridgeObjectRelease();
          objc_msgSend(v26, sel_setLargeContentTitle_, v30);

          v31 = objc_msgSend(v26, sel_layer);
          objc_msgSend(v31, sel_addSublayer_, *(_QWORD *)&v26[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background]);

          objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v17[v36]);
          objc_msgSend(v26, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator]);
          sub_1A9BEB494();
          sub_1A9BEB5E4();
          sub_1A9BC09A4();
          v32 = swift_allocObject();
          *(_OWORD *)(v32 + 16) = xmmword_1A9CEB520;
          v33 = sub_1A9CE6AB0();
          v34 = MEMORY[0x1E0DC29B0];
          *(_QWORD *)(v32 + 32) = v33;
          *(_QWORD *)(v32 + 40) = v34;
          swift_allocObject();
          swift_unknownObjectWeakInit();
          sub_1A9B92FDC();
          v35 = v26;
          sub_1A9CE87C0();
          sub_1A9BEC850(a3);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          return v35;
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return result;
}

id sub_1A9BEB494()
{
  char *v0;
  char *v1;
  void *v2;
  double *v3;
  void *v4;
  double v5;
  void *v6;
  id v7;
  id v8;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  v3 = (double *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  v4 = (void *)(*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration])();
  objc_msgSend(v2, sel_setFont_, v4);

  v5 = v3[7];
  v6 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator];
  objc_msgSend(v6, sel_setBackgroundColor_, *((_QWORD *)v3 + 6));
  objc_msgSend(v6, sel_setBounds_, 0.0, 0.0, v5, v5);
  v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setCornerRadius_, v5 * 0.5);

  objc_msgSend(v1, sel_setShowsLargeContentViewer_, 1);
  objc_msgSend(v1, sel_setScalesLargeContentImage_, 1);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3998]), sel_init);
  objc_msgSend(v1, sel_addInteraction_, v8);

  sub_1A9BEBD24();
  return objc_msgSend(v1, sel_setNeedsLayout);
}

void sub_1A9BEB5E4()
{
  char *v0;
  char *v1;
  uint64_t inited;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = v0;
  sub_1A9BB517C(0, (unint64_t *)&qword_1ED263330, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x80000001A9CFA560;
  v3 = (id)NSStringForHKSPDay();
  v4 = sub_1A9CE82E0();
  v6 = v5;

  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v6;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v7 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = 0x7065656C53;
  *(_QWORD *)(v7 + 56) = 0xE500000000000000;
  strcpy((char *)(v7 + 64), "ScheduleEditor");
  *(_BYTE *)(v7 + 79) = -18;
  v9 = swift_bridgeObjectRetain();
  sub_1A9BB35E8(v9);
  sub_1A9BB517C(0, &qword_1ED2632C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  sub_1A9CE8280();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  v10 = (void *)sub_1A9CE82B0();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v10);

  v11 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setAccessibilityIdentifier_, v12);

}

void sub_1A9BEB850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9BEB494();

  }
}

id sub_1A9BEB8C4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  double *v10;
  double v11;
  id v12;
  double v13;
  double v14;
  double Height;
  double v16;
  double Width;
  double v18;
  double v19;
  double v20;
  void *v21;
  CGPathRef v22;
  id v23;
  CGFloat x;
  CGFloat y;
  CGFloat v26;
  CGFloat v27;
  double MidX;
  double MidY;
  double v30;
  double v31;
  void *v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  double v37;
  void *v38;
  double v39;
  uint64_t v41;
  objc_super v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v1 = v0;
  swift_getObjectType();
  v42.receiver = v0;
  v42.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  objc_msgSendSuper2(&v42, sel_layoutSubviews);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v41 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v41);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Layout subviews", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37F8]), sel_initForTextStyle_, *MEMORY[0x1E0DC4B10]);
  v10 = (double *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
  v11 = *(double *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration + 72];
  v12 = objc_msgSend(v1, sel_traitCollection);
  objc_msgSend(v9, sel_scaledValueForValue_compatibleWithTraitCollection_, v12, v11);
  v14 = v13;

  objc_msgSend(v1, sel_bounds);
  Height = CGRectGetHeight(v43);
  v16 = v10[10];
  objc_msgSend(v1, sel_bounds);
  Width = CGRectGetWidth(v44);
  if (v14 > v11)
    v18 = v14;
  else
    v18 = v11;
  v19 = Width - v16;
  if (v19 >= Height - v16)
    v19 = Height - v16;
  if (v18 >= v19)
    v20 = v19;
  else
    v20 = v18;
  v21 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
  v45.origin.x = 0.0;
  v45.origin.y = 0.0;
  v45.size.width = v20;
  v45.size.height = v20;
  v22 = CGPathCreateWithEllipseInRect(v45, 0);
  objc_msgSend(v21, sel_setPath_, v22);

  v23 = objc_msgSend(v21, sel_path);
  objc_msgSend(v21, sel_setShadowPath_, v23);

  objc_msgSend(v21, sel_setFrame_, 0.0, 0.0, v20, v20);
  objc_msgSend(v1, sel_bounds);
  x = v46.origin.x;
  y = v46.origin.y;
  v26 = v46.size.width;
  v27 = v46.size.height;
  MidX = CGRectGetMidX(v46);
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = v26;
  v47.size.height = v27;
  MidY = CGRectGetMidY(v47);
  objc_msgSend(v21, sel_frame);
  objc_msgSend(v21, sel_setFrame_, MidX - v30 * 0.5, MidY - v31 * 0.5);
  v32 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel];
  objc_msgSend(v32, sel_sizeToFit);
  objc_msgSend(v1, sel_bounds);
  v33 = v48.origin.x;
  v34 = v48.origin.y;
  v35 = v48.size.width;
  v36 = v48.size.height;
  v37 = CGRectGetMidX(v48);
  v49.origin.x = v33;
  v49.origin.y = v34;
  v49.size.width = v35;
  v49.size.height = v36;
  objc_msgSend(v32, sel_setCenter_, v37, CGRectGetMidY(v49));
  v38 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator];
  objc_msgSend(v1, sel_bounds);
  v39 = CGRectGetMidX(v50);
  objc_msgSend(v1, sel_bounds);
  return objc_msgSend(v38, sel_setCenter_, v39, CGRectGetMaxY(v51) + 3.0);
}

void sub_1A9BEBD24()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  Class isa;
  void *v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  UIImageConfiguration_optional v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE8658();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v29 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    v28 = sub_1A9B91D6C(v7, v8, &v29);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Updating style", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  if (!objc_msgSend(v1, sel_isSelected))
  {
    v17 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
    v18 = &v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration];
    if (v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] == 1)
    {
      v19 = (void *)*((_QWORD *)v18 + 4);
      v20 = objc_msgSend(v1, sel_traitCollection);
      v21 = objc_msgSend(v19, sel_resolvedColorWithTraitCollection_, v20);
      v22 = objc_msgSend(v21, sel_CGColor);

      objc_msgSend(v17, sel_setFillColor_, v22);
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *((_QWORD *)v18 + 5));
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 0, v28, v29);
    }
    else
    {
      v24 = (void *)*((_QWORD *)v18 + 2);
      v25 = objc_msgSend(v1, sel_traitCollection);
      v26 = objc_msgSend(v24, sel_resolvedColorWithTraitCollection_, v25);
      v27 = objc_msgSend(v26, sel_CGColor);

      objc_msgSend(v17, sel_setFillColor_, v27);
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *((_QWORD *)v18 + 3));
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 1, v28, v29);
    }
    LOWORD(v29) = 28672;
    v23.value.super.isa = 0;
    isa = Symbol.uiImage(configuration:)(v23).super.isa;
    goto LABEL_12;
  }
  v9 = *(void **)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background];
  v10 = objc_msgSend(v1, sel_tintColor);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v1, sel_traitCollection);
    v13 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v12);
    v14 = objc_msgSend(v13, sel_CGColor);

    objc_msgSend(v9, sel_setFillColor_, v14);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel], sel_setTextColor_, *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_configuration + 64]);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator], sel_setHidden_, 1);
    v15 = (void *)sub_1A9CE82B0();
    isa = (Class)objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v15);

LABEL_12:
    objc_msgSend(v1, sel_setLargeContentImage_, isa, v28);

    return;
  }
  __break(1u);
}

id sub_1A9BEC370()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleDayPickerDay();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleDayPickerDay()
{
  return objc_opt_self();
}

void destroy for SleepScheduleDayPickerDay.Configuration(id *a1)
{
  swift_release();

}

uint64_t initializeWithCopy for SleepScheduleDayPickerDay.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(void **)(a2 + 32);
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = *(void **)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v9;
  v16 = v10;
  return a1;
}

_QWORD *assignWithCopy for SleepScheduleDayPickerDay.Configuration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  v8 = (void *)a2[3];
  v9 = (void *)a1[3];
  a1[3] = v8;
  v10 = v8;

  v11 = (void *)a2[4];
  v12 = (void *)a1[4];
  a1[4] = v11;
  v13 = v11;

  v14 = (void *)a2[5];
  v15 = (void *)a1[5];
  a1[5] = v14;
  v16 = v14;

  v17 = (void *)a2[6];
  v18 = (void *)a1[6];
  a1[6] = v17;
  v19 = v17;

  a1[7] = a2[7];
  v20 = (void *)a2[8];
  v21 = (void *)a1[8];
  a1[8] = v20;
  v22 = v20;

  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SleepScheduleDayPickerDay.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v6 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepScheduleDayPickerDay.Configuration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleDayPickerDay.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleDayPickerDay.Configuration()
{
  return &type metadata for SleepScheduleDayPickerDay.Configuration;
}

id sub_1A9BEC768()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_variant_maximumContentSizeCategory_, *MEMORY[0x1E0DC4A88], 1024, *MEMORY[0x1E0DC48D8]);
  if (!result)
    __break(1u);
  return result;
}

_QWORD *sub_1A9BEC7BC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = (void *)a1[2];
  v3 = (void *)a1[3];
  v4 = (void *)a1[4];
  v5 = (void *)a1[5];
  v6 = (void *)a1[6];
  v7 = (void *)a1[8];
  swift_retain();
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  return a1;
}

uint64_t sub_1A9BEC824()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BEC848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9BEB850(a1, a2, v2);
}

uint64_t sub_1A9BEC850(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);

  swift_release();
  return a1;
}

void sub_1A9BEC8B8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_background;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
  v2 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_dayLabel;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v3 = OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_elsewhereIndicator;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleDayPickerDay_isSelectedElsewhere] = 0;

  sub_1A9CE8A84();
  __break(1u);
}

id sub_1A9BEC98C(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_hk_sleepKeyColor, &qword_1ED262D48);
}

id static UIColor.primarySleep.getter()
{
  return sub_1A9BECA2C(&qword_1ED262D90, (id *)&qword_1ED262D48);
}

id sub_1A9BEC9BC(uint64_t a1)
{
  return sub_1A9BEC9D0(a1, (SEL *)&selRef_hk_sleepSecondaryColor, &qword_1EEB45930);
}

id sub_1A9BEC9D0(uint64_t a1, SEL *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), *a2);
  *a3 = result;
  return result;
}

id static UIColor.secondarySleep.getter()
{
  return sub_1A9BECA2C(qword_1EEB42CD8, (id *)&qword_1EEB45930);
}

id sub_1A9BECA2C(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_1A9BECA64(uint64_t a1)
{
  return sub_1A9BECAC8(a1, &qword_1ED262D90, (id *)&qword_1ED262D48, &qword_1ED262D68);
}

uint64_t static Color.primarySleep.getter()
{
  return sub_1A9BECCE8(&qword_1ED262D40);
}

uint64_t sub_1A9BECAA4(uint64_t a1)
{
  return sub_1A9BECAC8(a1, qword_1EEB42CD8, (id *)&qword_1EEB45930, &qword_1EEB45938);
}

uint64_t sub_1A9BECAC8(uint64_t a1, _QWORD *a2, id *a3, uint64_t *a4)
{
  uint64_t result;

  if (*a2 != -1)
    swift_once();
  result = MEMORY[0x1AF41E85C](*a3);
  *a4 = result;
  return result;
}

uint64_t static Color.secondarySleep.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42CE8);
}

uint64_t sub_1A9BECB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = sub_1A9CE7C38();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v3, *MEMORY[0x1E0CDF3E0]);
  result = MEMORY[0x1AF41E91C](v3, 0.258823529, 0.71372549, 0.921568627, 1.0);
  qword_1EEB45940 = result;
  return result;
}

uint64_t static Color.intermediateSleep.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42CF0);
}

uint64_t sub_1A9BECBE4(uint64_t a1)
{
  return sub_1A9BECC88(a1, (SEL *)&selRef_tintColor, &qword_1EEB45948);
}

uint64_t static Color.tint.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42CF8);
}

uint64_t sub_1A9BECC14(uint64_t a1)
{
  return sub_1A9BECC88(a1, (SEL *)&selRef_labelColor, &qword_1EEB45950);
}

uint64_t static Color.label.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42D00);
}

uint64_t sub_1A9BECC44(uint64_t a1)
{
  return sub_1A9BECC88(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1EEB45958);
}

uint64_t static Color.secondaryLabel.getter()
{
  return sub_1A9BECCE8(&qword_1EEB42D08);
}

uint64_t sub_1A9BECC74(uint64_t a1)
{
  return sub_1A9BECC88(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_1EEB45960);
}

uint64_t sub_1A9BECC88(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(), *a2);
  result = MEMORY[0x1AF41E85C](v4);
  *a3 = result;
  return result;
}

uint64_t static Color.tertiaryLabel.getter()
{
  return sub_1A9BECCE8(qword_1EEB42D10);
}

uint64_t sub_1A9BECCE8(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

double Color.computeContrastRatio(with:)()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  Color.linearRGB.getter();
  v3 = v2 * 0.0722 + v0 * 0.2126 + v1 * 0.7152;
  Color.linearRGB.getter();
  v7 = v6 * 0.0722 + v4 * 0.2126 + v5 * 0.7152;
  if (v3 > v7)
    v8 = v3;
  else
    v8 = v7;
  if (v7 >= v3)
    v7 = v3;
  return (v8 + 0.05) / (v7 + 0.05);
}

double Color.relativeLuminance.getter()
{
  double v0;
  double v1;
  double v2;

  Color.linearRGB.getter();
  return v2 * 0.0722 + v0 * 0.2126 + v1 * 0.7152;
}

void Color.linearRGB.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  sub_1A9BED048();
  swift_retain();
  v0 = (void *)sub_1A9CE87F0();
  v1 = objc_msgSend(v0, sel_CGColor);

  v2 = sub_1A9CE85B0();
  if (!v2)
    goto LABEL_15;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v3 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v3 < 3)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v4 = *(double *)(v2 + 32);
  v5 = *(double *)(v2 + 40);
  v6 = *(double *)(v2 + 48);
  swift_bridgeObjectRelease();
  if (v4 <= 0.03928)
  {
    if (v5 <= 0.03928)
    {
LABEL_7:
      if (v6 <= 0.03928)
        return;
LABEL_11:
      pow((v6 + 0.055) / 1.055, 2.4);
      return;
    }
  }
  else
  {
    pow((v4 + 0.055) / 1.055, 2.4);
    if (v5 <= 0.03928)
      goto LABEL_7;
  }
  pow((v5 + 0.055) / 1.055, 2.4);
  if (v6 > 0.03928)
    goto LABEL_11;
}

void Color.rgb.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;

  sub_1A9BED048();
  swift_retain();
  v0 = (void *)sub_1A9CE87F0();
  v1 = objc_msgSend(v0, sel_CGColor);

  v2 = sub_1A9CE85B0();
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    if (v3 != 1)
    {
      if (v3 >= 3)
      {
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
}

unint64_t sub_1A9BED048()
{
  unint64_t result;

  result = qword_1EEB47810;
  if (!qword_1EEB47810)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47810);
  }
  return result;
}

uint64_t dispatch thunk of SleepOnboardingViewControllerDelegate.didDismissOnboarding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepOnboardingViewControllerDelegate.didCompleteOnboarding(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

Swift::Void __swiftcall UITextView.adjustContentInsetForLineFragmentPadding()()
{
  void *v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(v0, sel_textContainer);
  objc_msgSend(v1, sel_lineFragmentPadding);
  v3 = v2;

  objc_msgSend(v0, sel_setContentInset_, 0.0, -v3, 0.0, -v3);
}

id sub_1A9BED100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  objc_super v29;

  v4 = v3;
  v6 = &v3[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  v7 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel;
  v8 = (void *)*MEMORY[0x1E0DC4A88];
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v10 = v4;
  v11 = v8;
  v12 = objc_msgSend(v9, sel_init);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v13 = v12;
  v14 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v11, 2, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v13, sel_setFont_, v14);

  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v13, sel_setLineBreakMode_, 0);
  objc_msgSend(v13, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v4[v7] = v13;
  v15 = (void *)*MEMORY[0x1E0DC4B10];
  v16 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v17 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v18 = v15;
  v19 = v16;
  v20 = objc_msgSend(v17, sel_init);
  v21 = v20;
  if (v19)
    objc_msgSend(v20, sel_setTextColor_, v19);
  v22 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel;
  v23 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v18, 0, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v21, sel_setFont_, v23);

  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v21, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v21, sel_setLineBreakMode_, 0);
  objc_msgSend(v21, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v10[v22] = v21;
  if (a3)
  {
    v24 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  v29.receiver = v10;
  v29.super_class = (Class)type metadata accessor for AddScheduleTableViewCell();
  v25 = objc_msgSendSuper2(&v29, sel_initWithStyle_reuseIdentifier_, a1, v24);

  v26 = v25;
  objc_msgSend(v26, sel_setAccessoryType_, 0);
  objc_msgSend(v26, sel_setSelectionStyle_, 0);
  sub_1A9BED490();

  return v26;
}

void sub_1A9BED490()
{
  char *v0;
  void *v1;
  uint64_t inited;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  unint64_t v16;

  v1 = v0;
  sub_1A9BB7420();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEDE30;
  v3 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel];
  *(_QWORD *)(inited + 32) = v3;
  v4 = *(void **)&v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel];
  *(_QWORD *)(inited + 40) = v4;
  v16 = inited;
  sub_1A9CE83E8();
  v5 = v3;
  v6 = v4;
  v7 = objc_msgSend(v0, sel_contentView);
  UIView.addSubviews(_:useAutoLayout:)((Swift::OpaquePointer)v16, 1);

  v8 = objc_msgSend(v1, sel_contentView);
  v9 = UIView.constraints(verticallyStackedViews:interitemSpacing:contentInsets:)(v16, 4.0, 11.0, 16.0, 11.0, 16.0);

  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v1, sel_contentView);
  v11 = objc_msgSend(v10, sel_heightAnchor);

  v12 = objc_msgSend(v11, sel_constraintGreaterThanOrEqualToConstant_, 25.0);
  v13 = v12;
  MEMORY[0x1AF41EFF4]();
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1A9CE83F4();
  sub_1A9CE8418();
  sub_1A9CE83E8();
  v14 = (void *)objc_opt_self();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
  v15 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, v15);

}

id sub_1A9BED69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[24];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA29C(v2, (uint64_t)v14);
  if (!v15)
  {
    sub_1A9BEDB34((uint64_t)v14, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    goto LABEL_8;
  }
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB449A0);
  sub_1A9B94928(0, (unint64_t *)&unk_1EEB459B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    goto LABEL_8;
  }
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_8:
    sub_1A9BEDB34((uint64_t)&v16, &qword_1EEB459A8, (unint64_t *)&unk_1EEB459B0);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel), sel_setText_, 0);
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel), sel_setText_, 0);
  }
  sub_1A9B949B8(&v16, (uint64_t)v19);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel);
  v4 = v20;
  v5 = v21;
  __swift_project_boxed_opaque_existential_1Tm(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (v6)
  {
    v7 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v3, sel_setText_, v7);

  v9 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel);
  v10 = v20;
  v11 = v21;
  __swift_project_boxed_opaque_existential_1Tm(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  if (v12)
  {
    v13 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v9, sel_setText_, v13);

  return (id)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
}

id sub_1A9BED8D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddScheduleTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AddScheduleTableViewCell()
{
  return objc_opt_self();
}

uint64_t sub_1A9BED980@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  return sub_1A9BCA29C(v3, a1);
}

uint64_t sub_1A9BED9D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item;
  swift_beginAccess();
  sub_1A9BCA1C8(a1, v3);
  swift_endAccess();
  sub_1A9BED69C();
  return sub_1A9BEDB34(a1, (unint64_t *)&qword_1EEB44998, (unint64_t *)&qword_1EEB449A0);
}

id (*sub_1A9BEDA54(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A9BEDA9C;
}

id sub_1A9BEDA9C(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1A9BED69C();
  return result;
}

uint64_t sub_1A9BEDACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1AF420284](&unk_1A9CEFAF4, a3);
  return sub_1A9CE67E0();
}

uint64_t sub_1A9BEDB34(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  sub_1A9BEDB70(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1A9BEDB70(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1A9B94928(255, a3);
    v4 = sub_1A9CE8880();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1A9BEDBC4()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_item];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_QWORD *)v2 + 4) = 0;
  v3 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_titleLabel;
  v4 = (void *)*MEMORY[0x1E0DC4A88];
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v6 = v4;
  v7 = objc_msgSend(v5, sel_init);
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45220);
  v8 = v7;
  v9 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v6, 2, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v8, sel_setFont_, v9);

  objc_msgSend(v8, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v8, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v8, sel_setLineBreakMode_, 0);
  objc_msgSend(v8, sel_setNumberOfLines_, 0);
  *(_QWORD *)&v1[v3] = v8;
  v10 = (void *)*MEMORY[0x1E0DC4B10];
  v11 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  v12 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v13 = v10;
  v14 = v11;
  v15 = objc_msgSend(v12, sel_init);
  v16 = v15;
  if (v14)
    objc_msgSend(v15, sel_setTextColor_, v14);
  v17 = OBJC_IVAR____TtC13SleepHealthUI24AddScheduleTableViewCell_detailLabel;
  v18 = static UIFont.preferredFont(for:traits:rounded:short:loose:smallCaps:monospaced:weight:)((uint64_t)v13, 0, 0, 0, 0, 0, 0, 0, 1);
  objc_msgSend(v16, sel_setFont_, v18);

  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(v16, sel_setLineBreakMode_, 0);
  objc_msgSend(v16, sel_setNumberOfLines_, 0);

  *(_QWORD *)&v1[v17] = v16;
  sub_1A9CE8A84();
  __break(1u);
}

void sub_1A9BEDE7C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E55D24B0;
}

char *sub_1A9BEDE8C(char a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  id v13;
  id v14;
  char *result;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  objc_class *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  objc_super v60;
  uint64_t v61;

  sub_1A9B92F34(0, &qword_1EEB47F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2F3A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v54 - v5;
  v1[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message] = a1;
  v61 = MEMORY[0x1E0DEE9D8];
  v59 = v1;
  sub_1A9CE8A18();
  v7 = (void *)objc_opt_self();
  v8 = 0;
  do
  {
    v12 = byte_1E55D20F0[v8 + 32];
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
    v14 = objc_msgSend(v7, sel_secondaryLabelColor);
    objc_msgSend(v13, sel_setTextColor_, v14);

    objc_msgSend(v13, sel_setNumberOfLines_, 0);
    objc_msgSend(v13, sel_setLineBreakMode_, 0);
    objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    result = (char *)objc_msgSend(v13, sel_font);
    if (!result)
      goto LABEL_19;
    v16 = result;
    result = (char *)objc_msgSend(v13, sel_textColor);
    if (!result)
      goto LABEL_20;
    v17 = result;
    if (v12)
    {
      sub_1A9B94A18(0, (unint64_t *)&unk_1EEB459F0);
      v18 = objc_msgSend(v7, sel_systemOrangeColor);
      v19 = sub_1A9CE8754();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
      sub_1A9BEEED8(v12);
      v11 = (id)sub_1A9CE8748();
    }
    else
    {
      sub_1A9BEEED8(0);
      v9 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
      v10 = (void *)sub_1A9CE82B0();
      swift_bridgeObjectRelease();
      v11 = objc_msgSend(v9, sel_initWithString_, v10);

    }
    ++v8;
    objc_msgSend(v13, sel_setAttributedText_, v11);

    sub_1A9CE89F4();
    sub_1A9CE8A24();
    sub_1A9CE8A30();
    sub_1A9CE8A00();
  }
  while (v8 != 6);
  v20 = v59;
  *(_QWORD *)&v59[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels] = v61;

  v21 = (objc_class *)type metadata accessor for SleepScheduleClockCaption();
  v60.receiver = v20;
  v60.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v60, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1A9BEE8E4();
  sub_1A9BEEA84();
  v23 = *(_QWORD *)&v22[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (!(v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24)
      goto LABEL_10;
LABEL_17:
    swift_bridgeObjectRelease();
    LODWORD(v47) = 1148846080;
    objc_msgSend(v22, sel_setContentHuggingPriority_forAxis_, 1, v47);
    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1A9CEB530;
    v49 = sub_1A9CE6AB0();
    v50 = MEMORY[0x1E0DC29B0];
    *(_QWORD *)(v48 + 32) = v49;
    *(_QWORD *)(v48 + 40) = v50;
    v51 = sub_1A9CE69A8();
    v52 = MEMORY[0x1E0DC1F90];
    *(_QWORD *)(v48 + 48) = v51;
    *(_QWORD *)(v48 + 56) = v52;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1A9B92FDC();
    v53 = v22;
    sub_1A9CE87C0();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    return v53;
  }
  swift_bridgeObjectRetain();
  v24 = sub_1A9CE8AC0();
  if (!v24)
    goto LABEL_17;
LABEL_10:
  result = (char *)objc_opt_self();
  v59 = result;
  if (v24 >= 1)
  {
    v25 = 0;
    v58 = v23 & 0xC000000000000001;
    v57 = MEMORY[0x1E0DEE9B0] + 8;
    v56 = xmmword_1A9CEDF40;
    v55 = v24;
    do
    {
      if (v58)
        v26 = (id)MEMORY[0x1AF41F600](v25, v23);
      else
        v26 = *(id *)(v23 + 8 * v25 + 32);
      v27 = v26;
      ++v25;
      objc_msgSend(v22, sel_addSubview_, v26);
      sub_1A9B94CA0(0, (unint64_t *)&qword_1ED262A60, v57, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v56;
      v29 = objc_msgSend(v27, sel_leadingAnchor);
      v30 = objc_msgSend(v22, sel_leadingAnchor);
      v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

      *(_QWORD *)(v28 + 32) = v31;
      v32 = objc_msgSend(v27, sel_topAnchor);
      v33 = objc_msgSend(v22, sel_topAnchor);
      v34 = objc_msgSend(v32, sel_constraintGreaterThanOrEqualToAnchor_, v33);

      *(_QWORD *)(v28 + 40) = v34;
      v35 = objc_msgSend(v22, sel_trailingAnchor);
      v36 = objc_msgSend(v27, sel_trailingAnchor);
      v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

      *(_QWORD *)(v28 + 48) = v37;
      v38 = objc_msgSend(v22, sel_bottomAnchor);
      v39 = objc_msgSend(v27, sel_bottomAnchor);
      v40 = objc_msgSend(v38, sel_constraintGreaterThanOrEqualToAnchor_, v39);

      *(_QWORD *)(v28 + 56) = v40;
      v41 = objc_msgSend(v22, sel_centerYAnchor);
      v42 = objc_msgSend(v27, sel_centerYAnchor);
      v43 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v42);

      *(_QWORD *)(v28 + 64) = v43;
      v61 = v28;
      sub_1A9CE83E8();
      sub_1A9B94A18(0, (unint64_t *)&qword_1EEB44570);
      v44 = (void *)sub_1A9CE83D0();
      swift_bridgeObjectRelease();
      objc_msgSend(v59, sel_activateConstraints_, v44);

      LODWORD(v45) = 1148846080;
      objc_msgSend(v27, sel_setContentHuggingPriority_forAxis_, 1, v45);
      LODWORD(v46) = 1132068864;
      objc_msgSend(v27, sel_setContentHuggingPriority_forAxis_, 0, v46);

    }
    while (v55 != v25);
    goto LABEL_17;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_1A9BEE680(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    sub_1A9BEF4B4(a2);

  }
}

double sub_1A9BEE750()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  double MinY;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  double v17;
  double v18;
  CGRect v20;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (v1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = sub_1A9CE8AC0())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AF41F600](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      if (!objc_msgSend(v4, sel_isHidden))
      {
        swift_bridgeObjectRelease_n();
        objc_msgSend(v5, sel_frame);
        v9 = v8;
        v11 = v10;
        v13 = v12;
        v15 = v14;

        v20.origin.x = v9;
        v20.origin.y = v11;
        v20.size.width = v13;
        v20.size.height = v15;
        MinY = CGRectGetMinY(v20);
        goto LABEL_12;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  MinY = 0.0;
LABEL_12:
  v16 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v0, sel_convertPoint_toView_, v16, 0.0, MinY);
  v18 = v17;

  return v18;
}

void sub_1A9BEE8E4()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  int v7;
  int v8;
  id v9;
  void *v10;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1A9CE8AC0();
    v2 = v3;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v3 = swift_bridgeObjectRetain();
    if (!v2)
      goto LABEL_10;
  }
  if (v2 < 1)
  {
    __break(1u);
LABEL_22:
    v9 = (id)MEMORY[0x1AF41F600](v3, v1);
    goto LABEL_19;
  }
  for (i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v5 = (id)MEMORY[0x1AF41F600](i, v1);
    else
      v5 = *(id *)(v1 + 8 * i + 32);
    v6 = v5;
    objc_msgSend(v5, sel_setHidden_, 1);

  }
LABEL_10:
  swift_bridgeObjectRelease();
  v7 = v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message];
  if (v7 == 6)
  {
LABEL_20:
    objc_msgSend(v0, sel_setNeedsLayout);
    sub_1A9BEEC30();
    return;
  }
  if (v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_message])
  {
    v3 = 0;
    while (v3 != 5)
    {
      v8 = *((unsigned __int8 *)&unk_1E55D1CC0 + v3++ + 33);
      if (v8 == v7)
        goto LABEL_16;
    }
    goto LABEL_20;
  }
  v3 = 0;
LABEL_16:
  if ((v1 & 0xC000000000000001) != 0)
    goto LABEL_22;
  if (v3 < *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v1 + 8 * v3 + 32);
LABEL_19:
    v10 = v9;
    objc_msgSend(v9, sel_setHidden_, 0);

    goto LABEL_20;
  }
  __break(1u);
}

void sub_1A9BEEA84()
{
  char *v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;

  v9 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4B10]);
  v1 = objc_msgSend(v0, sel_traitCollection);
  v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  LOBYTE(v1) = sub_1A9CE8790();
  if ((v1 & 1) != 0)
    v3 = 4;
  else
    v3 = 1;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_6;
LABEL_13:
    swift_bridgeObjectRelease();
    objc_msgSend(v0, sel_invalidateIntrinsicContentSize);
    objc_msgSend(v0, sel_setNeedsLayout);

    return;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1A9CE8AC0();
  if (!v5)
    goto LABEL_13;
LABEL_6:
  if (v5 >= 1)
  {
    v6 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1AF41F600](v6, v4);
      else
        v7 = *(id *)(v4 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      objc_msgSend(v7, sel_setFont_, v9);
      objc_msgSend(v8, sel_setTextAlignment_, v3);

    }
    while (v5 != v6);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1A9BEEC30()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI25SleepScheduleClockCaption_labels);
  if (v1 >> 62)
    goto LABEL_13;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = sub_1A9CE8AC0())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AF41F600](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      if (!objc_msgSend(v4, sel_isHidden))
      {
        swift_bridgeObjectRelease_n();
        v7 = MEMORY[0x1E0DEA968];
        sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_1A9CED850;
        *(_QWORD *)(v8 + 32) = sub_1A9CE82E0();
        *(_QWORD *)(v8 + 40) = v9;
        *(_QWORD *)(v8 + 48) = 0x7065656C53;
        *(_QWORD *)(v8 + 56) = 0xE500000000000000;
        strcpy((char *)(v8 + 64), "ScheduleEditor");
        *(_BYTE *)(v8 + 79) = -18;
        sub_1A9BB35E8((uint64_t)&unk_1E55D1C90);
        sub_1A9B94CA0(0, &qword_1ED2632C0, v7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1A9BA6CBC((unint64_t *)&qword_1ED262D70, &qword_1ED2632C0, v7, MEMORY[0x1E0DEAF20]);
        v10 = sub_1A9CE8280();
        v12 = v11;
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        v15 = v10;
        swift_bridgeObjectRetain();
        sub_1A9CE8340();
        v13 = v5;
        swift_bridgeObjectRelease();
        v14 = (void *)sub_1A9CE82B0();
        swift_bridgeObjectRelease();
        objc_msgSend(v13, sel_setAccessibilityIdentifier_, v14, v15, v12);

        return;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
}

void sub_1A9BEEED8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A9BEEF08()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  return v1;
}

id SleepScheduleClockCaption.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void SleepScheduleClockCaption.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepScheduleClockCaption.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepScheduleClockCaption();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SleepScheduleClockCaption()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepScheduleClockCaption()
{
  return swift_lookUpClassMethod();
}

uint64_t getEnumTagSinglePayload for SleepScheduleClockCaption.Message(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepScheduleClockCaption.Message(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A9BEF38C + 4 * byte_1A9CEFB6B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A9BEF3C0 + 4 * byte_1A9CEFB66[v4]))();
}

uint64_t sub_1A9BEF3C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BEF3C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9BEF3D0);
  return result;
}

uint64_t sub_1A9BEF3DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9BEF3E4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A9BEF3E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9BEF3F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepScheduleClockCaption.Message()
{
  return &type metadata for SleepScheduleClockCaption.Message;
}

uint64_t sub_1A9BEF40C()
{
  return sub_1A9BA6CBC(&qword_1EEB459D8, &qword_1EEB459E0, (uint64_t)&type metadata for SleepScheduleClockCaption.Message, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1A9BEF444()
{
  unint64_t result;

  result = qword_1EEB459E8;
  if (!qword_1EEB459E8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CEFC20, &type metadata for SleepScheduleClockCaption.Message);
    atomic_store(result, (unint64_t *)&qword_1EEB459E8);
  }
  return result;
}

uint64_t sub_1A9BEF488()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BEF4AC(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1A9BEE680(a1, a2, v2);
}

void sub_1A9BEF4B4(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v12;
  id v13;

  v3 = objc_msgSend(v1, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  if (a1)
  {
    v5 = objc_msgSend(a1, sel_preferredContentSizeCategory);
    v6 = sub_1A9CE82E0();
    v8 = v7;
    if (v6 == sub_1A9CE82E0() && v8 == v9)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      v11 = sub_1A9CE8BB0();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
        goto LABEL_11;
    }
    v12 = objc_msgSend(v1, sel_traitCollection);
    v13 = objc_msgSend(v12, sel_legibilityWeight);

    if (v13 == objc_msgSend(a1, sel_legibilityWeight))
      return;
    goto LABEL_11;
  }

LABEL_11:
  sub_1A9BEEA84();
}

void sub_1A9BEF614(void *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  char **v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t aBlock[6];
  uint64_t v34;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = &selRef_animateWithDuration_animations_;
  if ((objc_msgSend(a1, sel_isFiring) & 1) == 0 && !objc_msgSend(a1, sel_isSnoozed))
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v23 = sub_1A9CE6990();
    __swift_project_value_buffer(v23, (uint64_t)qword_1EEB49410);
    v32 = a1;
    v18 = sub_1A9CE6978();
    v24 = sub_1A9CE8664();
    if (!os_log_type_enabled(v18, v24))
    {

      return;
    }
    v25 = swift_slowAlloc();
    v26 = (_QWORD *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)v25 = 136446466;
    v28 = sub_1A9CE8D48();
    v34 = sub_1A9B91D6C(v28, v29, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2114;
    v34 = (uint64_t)v32;
    v30 = v32;
    sub_1A9CE888C();
    *v26 = v32;

    _os_log_impl(&dword_1A9B87000, v18, v24, "[%{public}s] attempting to dismiss inactive alarm: %{public}@", (uint8_t *)v25, 0x16u);
    sub_1A9BEFFB8();
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v26, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v27, -1, -1);
    MEMORY[0x1AF420344](v25, -1, -1);
    goto LABEL_21;
  }
  if (qword_1EEB42E60 != -1)
    swift_once();
  v6 = sub_1A9CE6990();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EEB49410);
  v7 = a1;
  v8 = sub_1A9CE6978();
  v9 = sub_1A9CE867C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)v10 = 136446466;
    v12 = sub_1A9CE8D48();
    v34 = sub_1A9B91D6C(v12, v13, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2114;
    v34 = (uint64_t)v7;
    v14 = v2;
    v15 = v7;
    sub_1A9CE888C();
    *v11 = v7;

    v2 = v14;
    v5 = &selRef_animateWithDuration_animations_;
    _os_log_impl(&dword_1A9B87000, v8, v9, "[%{public}s] dismissing active alarm: %{public}@", (uint8_t *)v10, 0x16u);
    sub_1A9BEFFB8();
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v31, -1, -1);
    MEMORY[0x1AF420344](v10, -1, -1);

  }
  else
  {

  }
  v16 = objc_msgSend(v7, sel_alarmIDString);
  if (!v16)
  {
    sub_1A9CE82E0();
    v16 = (id)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  if ((objc_msgSend(v7, v5[144]) & 1) != 0)
  {
    v17 = 6;
  }
  else if (objc_msgSend(v7, sel_isSleepAlarm))
  {
    v17 = 5;
  }
  else
  {
    v17 = 0;
  }
  v18 = objc_msgSend(v2, sel_dismissAlarmWithIdentifier_dismissAction_, v16, v17);

  if (v18)
  {
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v7;
    *(_QWORD *)(v19 + 24) = ObjectType;
    aBlock[4] = (uint64_t)sub_1A9BF006C;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A9BB6368;
    aBlock[3] = (uint64_t)&block_descriptor_6;
    v20 = _Block_copy(aBlock);
    v21 = v7;
    swift_release();
    v22 = -[NSObject addCompletionBlock:](v18, sel_addCompletionBlock_, v20);
    _Block_release(v20);

LABEL_21:
  }
}

void sub_1A9BEFB94(int a1, id a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  NSObject *oslog;
  uint64_t v27;

  if (a2)
  {
    v4 = a2;
    if (qword_1EEB42E60 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EEB49410);
    v6 = a2;
    v7 = a2;
    oslog = sub_1A9CE6978();
    v8 = sub_1A9CE8664();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v27 = v10;
      *(_DWORD *)v9 = 136446466;
      v11 = sub_1A9CE8D48();
      sub_1A9B91D6C(v11, v12, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      v13 = a2;
      sub_1A9BB15F4();
      v14 = sub_1A9CE82F8();
      sub_1A9B91D6C(v14, v15, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, oslog, v8, "[%{public}s] failed to dismiss active alarm with error: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v10, -1, -1);
      MEMORY[0x1AF420344](v9, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_1EEB42E60 != -1)
      swift_once();
    v17 = sub_1A9CE6990();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EEB49410);
    oslog = a3;
    v18 = sub_1A9CE6978();
    v19 = sub_1A9CE867C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v27 = v22;
      *(_DWORD *)v20 = 136446466;
      v23 = sub_1A9CE8D48();
      sub_1A9B91D6C(v23, v24, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2114;
      v25 = oslog;
      sub_1A9CE888C();
      *v21 = oslog;

      _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] dismissed active alarm: %{public}@", (uint8_t *)v20, 0x16u);
      sub_1A9BEFFB8();
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v22, -1, -1);
      MEMORY[0x1AF420344](v20, -1, -1);

      return;
    }

  }
}

void sub_1A9BEFFB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2627B0)
  {
    sub_1A9BF000C();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2627B0);
  }
}

unint64_t sub_1A9BF000C()
{
  unint64_t result;

  result = qword_1ED2627A0;
  if (!qword_1ED2627A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED2627A0);
  }
  return result;
}

uint64_t sub_1A9BF0048()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9BF006C(int a1, void *a2)
{
  uint64_t v2;

  sub_1A9BEFB94(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id sub_1A9BF00B0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  objc_class *v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t ObjCClassFromMetadata;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  objc_super v109;
  id v110[3];
  uint64_t v111;
  uint64_t v112;

  v1 = v0;
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v104 = (char *)&v93 - v4;
  v105 = sub_1A9CE8778();
  v101 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v5);
  v103 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B929B4();
  v107 = v7;
  v102 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v106 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BF9134();
  v99 = *(v10 - 1);
  v100 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v98 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BF91B4();
  v96 = *(_QWORD *)(v13 - 8);
  v97 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v95 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, sel_tableView);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v17 = result;
  v18 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  v19 = *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model];
  v94 = &v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider];
  sub_1A9B923D4((uint64_t)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider], (uint64_t)v110);
  v20 = v111;
  v21 = v112;
  __swift_project_boxed_opaque_existential_1Tm(v110, v111);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 24);
  swift_retain();
  v23 = v22(v20, v21);
  v24 = objc_msgSend(v1, sel_traitCollection);
  v25 = objc_msgSend(v24, sel_preferredContentSizeCategory);

  LOBYTE(v24) = sub_1A9CE8790();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v1;
  objc_allocWithZone((Class)type metadata accessor for QuickScheduleOverrideViewController.DataSource());
  v27 = v1;
  v28 = sub_1A9BF6F80(v17, v19, v23, v24 & 1, (uint64_t)sub_1A9BF92C0, v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v110);
  v29 = *(void **)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource];
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource] = v28;

  v30 = (objc_class *)type metadata accessor for QuickScheduleOverrideViewController();
  v109.receiver = v27;
  v109.super_class = v30;
  objc_msgSendSuper2(&v109, sel_viewDidLoad);
  result = objc_msgSend(v27, sel_tableView);
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v31 = result;
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB47810);
  v32 = static UIColor.invertedGroupedTableViewBackground.getter();
  objc_msgSend(v31, sel_setBackgroundColor_, v32);

  result = objc_msgSend(v27, sel_tableView);
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v33 = result;
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v35 = (void *)sub_1A9CE82B0();
  objc_msgSend(v33, sel_registerClass_forHeaderFooterViewReuseIdentifier_, ObjCClassFromMetadata, v35);

  if (qword_1ED2626A8 != -1)
    swift_once();
  v36 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  v37 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setTitle_, v37);

  v38 = objc_msgSend(v27, sel_navigationItem);
  v39 = objc_msgSend(v27, sel_title);
  objc_msgSend(v38, sel_setTitle_, v39);

  v40 = objc_msgSend(v27, sel_navigationItem);
  v41 = objc_msgSend(v27, sel_title);
  objc_msgSend(v40, sel_setBackButtonTitle_, v41);

  v42 = objc_msgSend(v27, sel_navigationController);
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, sel_navigationBar);

    v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
    objc_msgSend(v44, sel_setShadowImage_, v45);

  }
  if ((_UIBarsApplyChromelessEverywhere() & 1) == 0)
  {
    v46 = objc_msgSend(v27, sel_navigationController);
    if (v46)
    {
      v47 = v46;
      v48 = objc_msgSend(v46, sel_navigationBar);

      objc_msgSend(v48, sel_setTranslucent_, 0);
    }
  }
  v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A30]), sel_init);
  v50 = static UIColor.invertedGroupedTableViewBackground.getter();
  objc_msgSend(v49, sel_setBackgroundColor_, v50);

  v51 = objc_msgSend(v27, sel_navigationController);
  if (v51)
  {
    v52 = v51;
    v53 = objc_msgSend(v51, sel_navigationBar);

    objc_msgSend(v53, sel_setStandardAppearance_, v49);
  }
  v54 = objc_msgSend(v27, sel_navigationItem, v49);
  v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 1, v27, sel_cancelButtonPressed);
  objc_msgSend(v54, sel_setLeftBarButtonItem_, v55);

  v56 = objc_msgSend(v27, sel_navigationItem);
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 0, v27, sel_saveButtonPressed);
  objc_msgSend(v56, sel_setRightBarButtonItem_, v57);

  v58 = objc_msgSend(v27, sel_navigationItem);
  v59 = objc_msgSend(v58, sel_rightBarButtonItem);

  if (v59)
  {
    swift_retain();
    v60 = ScheduleOccurrenceEditModel.isValid.getter();
    swift_release();
    objc_msgSend(v59, sel_setEnabled_, v60 & 1);

  }
  v110[0] = *(id *)(*(_QWORD *)&v1[v18] + 16);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92B28();
  v61 = MEMORY[0x1E0C95F48];
  sub_1A9B92B9C((unint64_t *)&qword_1EEB42FA0, (uint64_t (*)(uint64_t))sub_1A9B92B28, MEMORY[0x1E0C95F48]);
  swift_retain();
  v62 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_alarmConfigurationObserver] = v62;
  swift_release();
  v110[0] = *(id *)(*(_QWORD *)&v1[v18] + 24);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92BE4();
  sub_1A9B92B9C(&qword_1EEB45B90, (uint64_t (*)(uint64_t))sub_1A9B92BE4, v61);
  swift_retain();
  v63 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelEditObserver] = v63;
  swift_release();
  v64 = (uint64_t)v94;
  sub_1A9B923D4((uint64_t)v94, (uint64_t)v110);
  v65 = v111;
  v66 = v112;
  __swift_project_boxed_opaque_existential_1Tm(v110, v111);
  v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 32))(v65, v66);
  sub_1A9B92D84(0, &qword_1ED2628E0, &qword_1ED262940, (uint64_t)&unk_1ED262930, 0x1E0DA8548);
  sub_1A9BF9234();
  v67 = v95;
  sub_1A9CE6EB8();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v110);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v68 = MEMORY[0x1E0C95988];
  sub_1A9B92B9C(&qword_1EEB45B98, (uint64_t (*)(uint64_t))sub_1A9BF91B4, MEMORY[0x1E0C95988]);
  v69 = v97;
  v70 = sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, unint64_t))(v96 + 8))(v67, v69);
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver] = v70;
  swift_release();
  sub_1A9B923D4(v64, (uint64_t)v110);
  v71 = v111;
  v72 = v112;
  __swift_project_boxed_opaque_existential_1Tm(v110, v111);
  v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);
  sub_1A9B92D84(0, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (uint64_t)&qword_1ED262900, 0x1E0DA8568);
  sub_1A9B93038();
  v73 = v98;
  sub_1A9CE6EB8();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v110);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92B9C((unint64_t *)&unk_1EEB45BA0, (uint64_t (*)(uint64_t))sub_1A9BF9134, v68);
  v74 = v100;
  v75 = sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, id))(v99 + 8))(v73, v74);
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver] = v75;
  swift_release();
  v110[0] = *(id *)(*(_QWORD *)&v1[v18] + 64);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92D08();
  sub_1A9B92B9C((unint64_t *)&qword_1EEB474C0, (uint64_t (*)(uint64_t))sub_1A9B92D08, MEMORY[0x1E0C95FB8]);
  swift_retain();
  v76 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepDurationGoalObserver] = v76;
  swift_release();
  v110[0] = *(id *)(*(_QWORD *)&v1[v18] + 32);
  sub_1A9B92D84(0, (unint64_t *)&unk_1EEB45BB0, (unint64_t *)&qword_1EEB43000, (uint64_t)&unk_1EEB45BC0, 0x1E0DA8580);
  sub_1A9B92DF8();
  v110[0] = (id)sub_1A9CE6E88();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92E68();
  sub_1A9B92B9C(&qword_1EEB43020, (uint64_t (*)(uint64_t))sub_1A9B92E68, MEMORY[0x1E0C95D90]);
  v77 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_validScheduleRangeObserver] = v77;
  swift_release();
  v100 = (id)objc_opt_self();
  v78 = objc_msgSend(v100, sel_defaultCenter);
  v79 = v103;
  sub_1A9CE8784();

  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v110[0] = (id)sub_1A9CE870C();
  v80 = sub_1A9CE8700();
  v81 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868];
  v99 = *(_QWORD *)(*(_QWORD *)(v80 - 8) + 56);
  v82 = (uint64_t)v104;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v99)(v104, 1, 1, v80);
  v98 = (char *)sub_1A9B92B9C(&qword_1ED2632E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v97 = sub_1A9B92A68();
  v83 = v105;
  v84 = v106;
  sub_1A9CE6EAC();
  sub_1A9B93BDC(v82, (unint64_t *)&qword_1ED262570, v81);

  v101 = *(_QWORD *)(v101 + 8);
  ((void (*)(char *, uint64_t))v101)(v79, v83);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v96 = sub_1A9B92B9C((unint64_t *)&unk_1ED262560, (uint64_t (*)(uint64_t))sub_1A9B929B4, MEMORY[0x1E0C95CB8]);
  v85 = v107;
  v86 = sub_1A9CE6EC4();
  swift_release();
  v87 = *(void (**)(char *, uint64_t))(v102 + 8);
  v87(v84, v85);
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_significantTimeChangeObserver] = v86;
  swift_release();
  v88 = objc_msgSend(v100, sel_defaultCenter);
  sub_1A9CE8784();

  v110[0] = (id)sub_1A9CE870C();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99)(v82, 1, 1, v80);
  sub_1A9CE6EAC();
  sub_1A9B93BDC(v82, (unint64_t *)&qword_1ED262570, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868]);

  ((void (*)(char *, uint64_t))v101)(v79, v83);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v89 = sub_1A9CE6EC4();
  swift_release();
  v87(v84, v85);
  *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_willResignActiveObserver] = v89;
  swift_release();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB43050, (uint64_t (*)(uint64_t))sub_1A9B92F8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_1A9CEB520;
  v91 = sub_1A9CE6AB0();
  v92 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v90 + 32) = v91;
  *(_QWORD *)(v90 + 40) = v92;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92FDC();
  sub_1A9CE86E8();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (id)swift_release();
}

void sub_1A9BF10F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  __int128 v18[2];
  uint64_t v19;
  id v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = a2 + 16;
  swift_beginAccess();
  v17 = (id)MEMORY[0x1AF4203E0](v2);
  if (v17)
  {
    v3 = objc_msgSend(v17, sel_tableView);
    if (!v3)
      goto LABEL_18;
    v4 = v3;
    v5 = objc_msgSend(v3, sel_visibleCells);

    sub_1A9B94A18(0, &qword_1EEB43520);
    v6 = sub_1A9CE83DC();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_5;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_5:
        if (v7 >= 1)
        {
          v8 = 0;
          v9 = v6 & 0xC000000000000001;
          v15 = v6;
          v16 = v6 & 0xC000000000000001;
          do
          {
            if (v9)
              v10 = (id)MEMORY[0x1AF41F600](v8, v6);
            else
              v10 = *(id *)(v6 + 8 * v8 + 32);
            v20 = v10;
            sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
            if (swift_dynamicCast())
            {
              sub_1A9B949B8(v18, (uint64_t)v21);
              v11 = v22;
              v12 = v23;
              __swift_project_boxed_opaque_existential_1Tm(v21, v22);
              v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8);
              v14 = swift_retain();
              v13(v14, v11, v12);
              v6 = v15;
              v9 = v16;
              swift_release();
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
            }
            else
            {
              v19 = 0;
              memset(v18, 0, sizeof(v18));
              sub_1A9BF7ED0((uint64_t)v18);
            }
            ++v8;
          }
          while (v7 != v8);
          goto LABEL_15;
        }
        __break(1u);
LABEL_18:
        __break(1u);
        return;
      }
    }
LABEL_15:

    swift_bridgeObjectRelease();
  }
}

void sub_1A9BF1328()
{
  _BYTE *v0;
  id v1;
  char v2;
  id v3;

  v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged] = 1;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  objc_msgSend(v0, sel_setModalInPresentation_, 1);
  v1 = objc_msgSend(v0, sel_navigationItem);
  v3 = objc_msgSend(v1, sel_rightBarButtonItem);

  if (v3)
  {
    swift_retain();
    v2 = ScheduleOccurrenceEditModel.isValid.getter();
    swift_release();
    objc_msgSend(v3, sel_setEnabled_, v2 & 1);

  }
}

void sub_1A9BF1444(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1AF4203E0](v4);
  if (v5)
  {
    v6 = (void *)v5;
    a3();

  }
}

uint64_t sub_1A9BF1498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    v12 = (void *)sub_1A9B91D6C(v7, v8, v13);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Next occurrence did change while editing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  sub_1A9B923D4(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider, (uint64_t)v13);
  v9 = v14;
  v10 = v15;
  __swift_project_boxed_opaque_existential_1Tm(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  sub_1A9CE6DD4();
  swift_release();
  sub_1A9BF2DA4(v12);

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
}

void sub_1A9BF1680(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9BF16D8(v2);

  }
}

void sub_1A9BF16D8(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v9);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Sleep schedule did change while editing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  sub_1A9BF2DA4(a1);
}

void sub_1A9BF1870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  char v7;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_navigationItem);
    v6 = objc_msgSend(v5, sel_rightBarButtonItem);

    if (v6)
    {
      swift_retain();
      v7 = ScheduleOccurrenceEditModel.isValid.getter();
      swift_release();
      objc_msgSend(v6, sel_setEnabled_, v7 & 1);

      v4 = v6;
    }

  }
}

void sub_1A9BF193C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_handleSignificantTimeChange);

  }
}

void sub_1A9BF1994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF4203E0](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_1A9BF1C24();

  }
}

void sub_1A9BF19E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE *v14;
  id v15;
  id v16;
  _BYTE *v17;
  uint64_t v18;

  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v18 - v9;
  swift_beginAccess();
  v11 = MEMORY[0x1AF4203E0](a3 + 16);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = *(void **)(v11 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
    v14 = v13;

    if (v13)
    {
      v15 = objc_msgSend(a1, sel_traitCollection);
      v16 = objc_msgSend(v15, sel_preferredContentSizeCategory);

      LOBYTE(v15) = sub_1A9CE8790();
      v14[qword_1EEB45AE8] = v15 & 1;
      if ((v14[qword_1EEB45AB8] & 1) == 0)
      {
        v14[qword_1EEB45AB8] = 1;
        sub_1A9BF6CDC();
        *(_QWORD *)(swift_allocObject() + 16) = v14;
        v17 = v14;
        sub_1A9CE6A8C();
        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      }

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1A9BF1C24()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  swift_getObjectType();
  if (qword_1ED262DB8 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED2630B8);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1A9CE8D48();
    sub_1A9B91D6C(v5, v6, &v7);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] App will resign active", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  sub_1A9CA17A4();
}

void sub_1A9BF1EB4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  id v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  id v28;

  v2 = v1;
  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model)
                  + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v7 = a1;
    swift_retain();
    v8 = objc_msgSend(v6, sel_alarmConfiguration);
    objc_msgSend(v8, sel_mutableCopy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
    swift_dynamicCast();
    v9 = v24[0];
    v10 = objc_msgSend(v24[0], sel_isEnabled);
LABEL_5:
    v14 = v10;

    objc_msgSend(v5, sel_setOn_animated_, v14, 1);
    swift_release();
    objc_msgSend(v5, sel_setDelegate_, v2);
LABEL_6:

    return;
  }
  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  v11 = swift_dynamicCastClass();
  if (v11)
  {
    v5 = (void *)v11;
    v12 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model)
                   + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    v7 = a1;
    swift_retain();
    v13 = objc_msgSend(v12, sel_alarmConfiguration);
    objc_msgSend(v13, sel_mutableCopy);

    sub_1A9CE88EC();
    swift_unknownObjectRelease();
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
    swift_dynamicCast();
    v9 = v24[0];
    v10 = objc_msgSend(v24[0], sel_allowsSnooze);
    goto LABEL_5;
  }
  type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
  v15 = swift_dynamicCastClass();
  if (v15)
  {
    v16 = v15;
    v7 = a1;
    v17 = swift_retain();
    sub_1A9C495AC(v17);
    swift_release();
    v18 = v16 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_delegate;
    swift_beginAccess();
    *(_QWORD *)(v18 + 8) = &off_1E55D6260;
    swift_unknownObjectWeakAssign();
    goto LABEL_6;
  }
  v28 = a1;
  sub_1A9B94A18(0, &qword_1EEB43520);
  sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
  v19 = a1;
  if (swift_dynamicCast())
  {
    sub_1A9B949B8(&v27, (uint64_t)v24);
    v20 = v25;
    v21 = v26;
    __swift_project_boxed_opaque_existential_1Tm(v24, v25);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8);
    v23 = swift_retain();
    v22(v23, v20, v21);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  }

}

void sub_1A9BF2204()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16[4];

  v1 = v0;
  swift_getObjectType();
  v2 = *(void **)(*(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model]
                + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  swift_retain();
  v3 = objc_msgSend(v2, sel_alarmConfiguration);
  objc_msgSend(v3, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  swift_release();
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v15, sel_toneIdentifier);
  v6 = objc_msgSend(v15, sel_vibrationIdentifier);
  v7 = objc_msgSend(v4, sel_hksh_alarmPickerWithToneIdentifier_vibrationIdentifier_styleProvider_, v5, v6, *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_tonePickerStyleProvider]);

  objc_msgSend(v7, sel_setDelegate_, v1);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v16[0] = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = sub_1A9CE8D48();
    sub_1A9B91D6C(v13, v14, v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] Presenting tone picker", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);
  }

  objc_msgSend(v1, sel_showViewController_sender_, v7, 0);
}

id sub_1A9BF2648(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1A9CE64E0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource;
  v12 = *(void **)(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v12)
  {
    sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1A9CEB530;
    *(_QWORD *)(v13 + 32) = a2;
    *(_QWORD *)(v13 + 40) = 0;
    v14 = v12;
    MEMORY[0x1AF41D0D4](v13);
    sub_1A9CE6A74();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v16 = v31;
    v15 = v32;
    if (v32
      && (v31 == 0xD00000000000002DLL && v32 == 0x80000001A9CF7CC0
       || (sub_1A9CE8BB0() & 1) != 0
       || v16 == 0xD00000000000003ELL && v15 == 0x80000001A9CF7D20
       || (sub_1A9CE8BB0() & 1) != 0
       || v16 == 0xD000000000000029 && v15 == 0x80000001A9CF7DE0
       || (sub_1A9CE8BB0() & 1) != 0))
    {
      goto LABEL_18;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  v31 = sub_1A9BF8FF4(0);
  sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
  v17 = sub_1A9CE82F8();
  if (v15)
  {
    if (v17 == v16 && v15 == v18)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      swift_bridgeObjectRelease();
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
    }
    v20 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v21 = *(void **)(v3 + v11);
  if (!v21)
    return 0;
  v22 = v21;
  sub_1A9BF83DC(a2);
  v24 = v23;

  if (!v24)
    return 0;
  v25 = (void *)sub_1A9CE82B0();
  v26 = objc_msgSend(a1, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v25);

  if (!v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for ScheduleOccurrenceSectionTableViewHeaderView();
  v19 = swift_dynamicCastClass();
  if (v19)
  {
    v27 = v26;
    v28 = sub_1A9CA87A0();
    v29 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setText_, v29);

  }
  else
  {
    swift_bridgeObjectRelease();

  }
  return (id)v19;
}

id sub_1A9BF2C70(uint64_t a1)
{
  return sub_1A9BC0290(a1, type metadata accessor for QuickScheduleOverrideViewController);
}

uint64_t type metadata accessor for QuickScheduleOverrideViewController()
{
  return objc_opt_self();
}

void sub_1A9BF2DA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint8_t *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1A9CE62E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged) & 1) != 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v9 = sub_1A9CE6990();
    __swift_project_value_buffer(v9, (uint64_t)qword_1ED262888);
    v31 = sub_1A9CE6978();
    v10 = sub_1A9CE867C();
    if (os_log_type_enabled(v31, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v33[0] = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1A9CE8D48();
      v32 = sub_1A9B91D6C(v13, v14, v33);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v31, v10, "[%{public}s] Ignoring occurrence reset since the user has already edited the model.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v12, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);
    }

  }
  else
  {
    if (a1)
    {
      v15 = a1;
    }
    else
    {
      if (qword_1ED2628A0 != -1)
        swift_once();
      v16 = sub_1A9CE6990();
      __swift_project_value_buffer(v16, (uint64_t)qword_1ED262888);
      v17 = sub_1A9CE6978();
      v18 = sub_1A9CE867C();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v33[0] = (uint64_t)v31;
        *(_DWORD *)v19 = 136446210;
        v30 = v19 + 4;
        v20 = sub_1A9CE8D48();
        v32 = sub_1A9B91D6C(v20, v21, v33);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] Sleep schedule is nil - creating empty schedule.", v19, 0xCu);
        v22 = v31;
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v22, -1, -1);
        MEMORY[0x1AF420344](v19, -1, -1);
      }

      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8568]), sel_init);
    }
    v23 = a1;
    sub_1A9CE62DC();
    sub_1A9B923D4(v2 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider, (uint64_t)v33);
    v24 = v34;
    v25 = v35;
    __swift_project_boxed_opaque_existential_1Tm(v33, v34);
    v26 = SleepScheduleProviding.sleepScheduleModel.getter(v24, v25);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
    v27 = (void *)sub_1A9CE6258();
    v28 = (void *)sub_1A9CE63CC();
    v29 = objc_msgSend(v26, sel_generateOverrideOccurrenceForCurrentDate_gregorianCalendar_schedule_, v27, v28, v15);

    swift_retain();
    ScheduleOccurrenceEditModel.reset(occurrence:weekdaysWithExistingOccurrences:)(v29, 0);

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void sub_1A9BF31F8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  __int128 v22[2];
  uint64_t v23;
  id v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;

  swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v0 = sub_1A9CE6990();
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED262888);
  v1 = sub_1A9CE6978();
  v2 = sub_1A9CE867C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v25[0] = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1A9CE8D48();
    *(_QWORD *)&v22[0] = sub_1A9B91D6C(v5, v6, v25);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v1, v2, "[%{public}s] Significant time changed", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v4, -1, -1);
    MEMORY[0x1AF420344](v3, -1, -1);
  }

  v7 = objc_msgSend(v21, sel_tableView);
  if (!v7)
    goto LABEL_20;
  v8 = v7;
  v9 = objc_msgSend(v7, sel_visibleCells);

  sub_1A9B94A18(0, &qword_1EEB43520);
  v10 = sub_1A9CE83DC();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_8;
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_18;
LABEL_8:
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = v10 & 0xC000000000000001;
    v19 = v10;
    v20 = v10 & 0xC000000000000001;
    do
    {
      if (v13)
        v14 = (id)MEMORY[0x1AF41F600](v12, v10);
      else
        v14 = *(id *)(v10 + 8 * v12 + 32);
      v24 = v14;
      sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
      if (swift_dynamicCast())
      {
        sub_1A9B949B8(v22, (uint64_t)v25);
        v15 = v26;
        v16 = v27;
        __swift_project_boxed_opaque_existential_1Tm(v25, v26);
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 8);
        v18 = swift_retain();
        v17(v18, v15, v16);
        v10 = v19;
        v13 = v20;
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      }
      else
      {
        v23 = 0;
        memset(v22, 0, sizeof(v22));
        sub_1A9BF7ED0((uint64_t)v22);
      }
      ++v12;
    }
    while (v11 != v12);
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1A9BF3584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62[3];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = sub_1A9CE6444();
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v7 = sub_1A9CE6990();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED262888);
  v8 = sub_1A9CE6978();
  v9 = sub_1A9CE867C();
  v10 = os_log_type_enabled(v8, v9);
  v58 = ObjectType;
  if (v10)
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v62[0] = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = sub_1A9CE8D48();
    v60[0] = sub_1A9B91D6C(v13, v14, v62);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v8, v9, "[%{public}s] Save button pressed", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);
  }

  v15 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model);
  if ((*(_BYTE *)(v16 + 48) & 1) == 0)
  {
    v17 = *(void **)(v16 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
    swift_beginAccess();
    if ((objc_msgSend(v17, sel_isEqual_, *(_QWORD *)(v16 + 40)) & 1) != 0)
    {
      v18 = sub_1A9CE6978();
      v19 = sub_1A9CE867C();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        v60[0] = v21;
        *(_DWORD *)v20 = 136446210;
        v22 = sub_1A9CE8D48();
        v59[0] = sub_1A9B91D6C(v22, v23, v60);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] save button pressed but no changes were made", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v21, -1, -1);
        MEMORY[0x1AF420344](v20, -1, -1);
      }

      v24 = v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
      result = MEMORY[0x1AF4203E0](v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate);
      if (result)
      {
        v26 = (void *)result;
        if (*(_QWORD *)(v1
                       + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
        {
          swift_retain();
          sub_1A9CE6D80();
          swift_release();
        }
        if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
        {
          swift_retain();
          sub_1A9CE6D80();
          swift_release();
        }
        objc_msgSend(v26, sel_cancelWithAnimated_, 1);
LABEL_35:
        *(_QWORD *)(v24 + 8) = 0;
        swift_unknownObjectWeakAssign();
        return swift_unknownObjectRelease();
      }
      return result;
    }
    v16 = *(_QWORD *)(v1 + v15);
  }
  if (*(_BYTE *)(v16 + 49) == 1)
  {
    swift_retain();
    sub_1A9CE6DD4();
    v27 = (void *)v59[0];
    if (v59[0])
    {
      swift_beginAccess();
      v28 = objc_msgSend(v27, sel_overridenOccurrenceForOverrideOccurrence_, *(_QWORD *)(v16 + 40));
      swift_release();

      if (v28)
      {
        v29 = sub_1A9CE6978();
        v30 = sub_1A9CE867C();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc();
          v32 = swift_slowAlloc();
          v59[0] = v32;
          *(_DWORD *)v31 = 136446210;
          v55 = v31 + 4;
          v33 = sub_1A9CE8D48();
          v61 = sub_1A9B91D6C(v33, v34, v59);
          sub_1A9CE888C();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A9B87000, v29, v30, "[%{public}s] overriding an existing occurrence, asking if we should save", v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF420344](v32, -1, -1);
          MEMORY[0x1AF420344](v31, -1, -1);
        }

        v35 = *(_QWORD *)(v1 + v15);
        v37 = v56;
        v36 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v6, v35 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v57);
        v38 = *(void **)(v35 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
        swift_beginAccess();
        v39 = *(_QWORD *)(v35 + 40);
        v40 = v38;
        swift_retain();
        v41 = objc_msgSend(v40, sel_changesFromOccurrence_, v39);
        v42 = objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E0DA82D0]);
        if (objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E0DA82D8]))
          v42 |= 2uLL;
        v43 = objc_msgSend(v41, sel_hasChangeForPropertyIdentifier_, *MEMORY[0x1E0DA82C8]);
        swift_release();

        v44 = v42 | 4;
        if (!v43)
          v44 = v42;
        v61 = v44;
        v45 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v46 = swift_allocObject();
        v47 = v58;
        *(_QWORD *)(v46 + 16) = v45;
        *(_QWORD *)(v46 + 24) = v47;
        swift_retain();
        sub_1A9BF40D8((uint64_t)v6, v40, v28, &v61, (uint64_t)sub_1A9BF9064, v46);

        swift_release();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v36);
        return swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
  v48 = sub_1A9CE6978();
  v49 = sub_1A9CE867C();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    v51 = swift_slowAlloc();
    v59[0] = v51;
    *(_DWORD *)v50 = 136446210;
    v52 = sub_1A9CE8D48();
    v61 = sub_1A9B91D6C(v52, v53, v59);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v48, v49, "[%{public}s] not overriding an existing occurrence, saving", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v51, -1, -1);
    MEMORY[0x1AF420344](v50, -1, -1);
  }

  v24 = v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
  result = MEMORY[0x1AF4203E0](v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate);
  if (result)
  {
    if (*(_QWORD *)(v1
                   + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    swift_retain();
    v54 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
    swift_release();
    sub_1A9CCE58C(v54, 0);

    goto LABEL_35;
  }
  return result;
}

void sub_1A9BF3DC8(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];

  v4 = sub_1A9CE6990();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  swift_beginAccess();
  v10 = MEMORY[0x1AF4203E0](v9);
  if (v10)
  {
    v11 = (void *)v10;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v12 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED262888);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);

    v13 = sub_1A9CE6978();
    v14 = sub_1A9CE867C();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v25[0] = v16;
      *(_DWORD *)v15 = 136446466;
      HIDWORD(v23) = a1;
      v17 = sub_1A9CE8D48();
      v24 = sub_1A9B91D6C(v17, v18, v25);
      LOBYTE(a1) = BYTE4(v23);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 1026;
      LODWORD(v24) = a1 & 1;
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] saving (deleteOverride:%{BOOL,public}d)", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v16, -1, -1);
      MEMORY[0x1AF420344](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_beginAccess();
  v19 = MEMORY[0x1AF4203E0](v9);
  if (v19)
  {
    v20 = (char *)v19;
    v21 = v19 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
    if (MEMORY[0x1AF4203E0](v19 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
    {
      if (*(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      if (*(_QWORD *)&v20[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      swift_retain();
      v22 = ScheduleOccurrenceEditModel.finalizedOccurrenceForSaving()();
      swift_release();
      sub_1A9CCE58C(v22, a1 & 1);

      *(_QWORD *)(v21 + 8) = 0;
      swift_unknownObjectWeakAssign();

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void sub_1A9BF40D8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v35;

  v7 = v6;
  ObjectType = swift_getObjectType();
  v11 = *a4;
  if (qword_1ED2628A0 != -1)
    swift_once();
  v12 = sub_1A9CE6990();
  __swift_project_value_buffer(v12, (uint64_t)qword_1ED262888);
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  if (os_log_type_enabled(v13, v14))
  {
    v30 = v11;
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v35 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = sub_1A9CE8D48();
    sub_1A9B91D6C(v17, v18, &v35);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] Presenting occurrence change alert", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v16, -1, -1);
    v19 = v15;
    v11 = v30;
    MEMORY[0x1AF420344](v19, -1, -1);
  }

  sub_1A9B94A18(0, &qword_1EEB430A8);
  v29 = objc_msgSend(a3, sel_weekdays);
  v35 = v11;
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v20;
  v21[3] = a5;
  v21[4] = a6;
  v21[5] = ObjectType;
  v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v22;
  v23[3] = a2;
  v23[4] = a3;
  v23[5] = a5;
  v23[6] = a6;
  v23[7] = ObjectType;
  v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = ObjectType;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v26 = a2;
  v27 = a3;
  swift_retain();
  v28 = static UIAlertController.createOccurrenceChangeAlert(calendar:occurrence:weekdays:changes:changeNextHandler:changeAllHandler:cancelHandler:)(a1, v26, (uint64_t)v29, &v35, (uint64_t)sub_1A9BF9098, (uint64_t)v21, (uint64_t)sub_1A9BF90E0, (uint64_t)v23, (uint64_t)sub_1A9BF93B8, v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  objc_msgSend(v7, sel_presentViewController_animated_completion_, v28, 1, 0);

}

uint64_t sub_1A9BF4480(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;

  v7 = sub_1A9CE6990();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = MEMORY[0x1AF4203E0](a2 + 16);
  if (v12)
  {
    v13 = (void *)v12;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v14 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED262888);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);

    v15 = sub_1A9CE6978();
    v16 = sub_1A9CE867C();
    if (os_log_type_enabled(v15, v16))
    {
      v24 = a3;
      v17 = swift_slowAlloc();
      v23[1] = a4;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc();
      v26 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = sub_1A9CE8D48();
      v25 = sub_1A9B91D6C(v20, v21, &v26);
      a3 = v24;
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v15, v16, "[%{public}s] change next wake up only", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v19, -1, -1);
      MEMORY[0x1AF420344](v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return a3(0);
}

void sub_1A9BF46A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_BOOL8), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  uint8_t *v32;
  uint64_t v33;
  void (*v34)(_BOOL8);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38[3];

  v11 = sub_1A9CE6990();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2 + 16;
  swift_beginAccess();
  v17 = MEMORY[0x1AF4203E0](a2 + 16);
  if (v17)
  {
    v18 = (void *)v17;
    v36 = a3;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v19 = __swift_project_value_buffer(v11, (uint64_t)qword_1ED262888);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v19, v11);

    v20 = sub_1A9CE6978();
    v21 = sub_1A9CE867C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v34 = a5;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v35 = a6;
      v25 = v24;
      v38[0] = v24;
      v33 = a4;
      *(_DWORD *)v23 = 136446210;
      v32 = v23 + 4;
      v26 = sub_1A9CE8D48();
      v37 = sub_1A9B91D6C(v26, v27, v38);
      a4 = v33;
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v20, v21, "[%{public}s] change next and future wake ups", v23, 0xCu);
      swift_arrayDestroy();
      v28 = v25;
      a6 = v35;
      MEMORY[0x1AF420344](v28, -1, -1);
      v29 = v23;
      a5 = v34;
      MEMORY[0x1AF420344](v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    a3 = v36;
  }
  swift_beginAccess();
  v30 = MEMORY[0x1AF4203E0](v16);
  if (v30)
  {
    v31 = (void *)v30;
    sub_1A9BF4910(a3, a4, a5, a6);

  }
}

void sub_1A9BF4910(void *a1, uint64_t a2, void (*a3)(_BOOL8), uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  NSObject *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  id v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  double v84;
  double v85;
  void (*v86)(char *, uint64_t, uint64_t);
  void (*v87)(_BOOL8);
  uint64_t v88;
  NSObject *v89;
  id v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;

  v5 = v4;
  ObjectType = swift_getObjectType();
  v11 = sub_1A9CE60C0();
  v96 = *(_QWORD *)(v11 - 8);
  v97 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v95 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v98 = ((char *)&v86 - v16);
  v17 = sub_1A9CE6444();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
  if ((*(_BYTE *)(*(_QWORD *)&v5[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model] + 48) & 1) != 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v23 = sub_1A9CE6990();
    __swift_project_value_buffer(v23, (uint64_t)qword_1ED262888);
    v98 = sub_1A9CE6978();
    v24 = sub_1A9CE867C();
    if (os_log_type_enabled(v98, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v100 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = sub_1A9CE8D48();
      v99 = sub_1A9B91D6C(v27, v28, &v100);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v98, v24, "[%{public}s] isAdding unexpectedly true", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v26, -1, -1);
      MEMORY[0x1AF420344](v25, -1, -1);
    }

    return;
  }
  v92 = a4;
  v93 = a1;
  v94 = ObjectType;
  sub_1A9B923D4((uint64_t)&v5[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepScheduleProvider], (uint64_t)&v100);
  v29 = v102;
  v30 = v103;
  __swift_project_boxed_opaque_existential_1Tm(&v100, v102);
  (*(void (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
  sub_1A9CE6DD4();
  swift_release();
  v31 = (void *)v99;
  if (!v99)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v100);
    if (qword_1ED2628A0 != -1)
      swift_once();
    v60 = sub_1A9CE6990();
    __swift_project_value_buffer(v60, (uint64_t)qword_1ED262888);
    v61 = sub_1A9CE6978();
    v62 = sub_1A9CE867C();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      v100 = v64;
      *(_DWORD *)v63 = 136446210;
      v65 = sub_1A9CE8D48();
      v99 = sub_1A9B91D6C(v65, v66, &v100);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v61, v62, "[%{public}s] no current sleep schedule", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v64, -1, -1);
      MEMORY[0x1AF420344](v63, -1, -1);
    }
    goto LABEL_32;
  }
  v87 = a3;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v100);
  v32 = objc_msgSend(v93, sel_convertToScheduledOccurrenceOnSameDaysAsOccurrence_, a2);
  v90 = v31;
  v33 = objc_msgSend(v31, sel_weekdaysWithOccurrences);
  v34 = v5;
  v35 = (uint64_t)v33;
  v91 = v34;
  v36 = *(_QWORD *)&v34[v22];
  v37 = *(_QWORD *)(v36 + 64);
  v38 = *(_QWORD *)(v36 + 72);
  v39 = *(_BYTE *)(v36 + 80);
  v86 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v86(v21, v36 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v17);
  type metadata accessor for ScheduleOccurrenceEditModel();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v40 = sub_1A9BD5470(v32, 0, 0, v35, v37, v38, v39, (uint64_t)v21);
  v89 = v32;

  swift_release();
  swift_release();
  v88 = v40;
  if ((ScheduleOccurrenceEditModel.isValid.getter() & 1) != 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v41 = sub_1A9CE6990();
    __swift_project_value_buffer(v41, (uint64_t)qword_1ED262888);
    v42 = sub_1A9CE6978();
    v43 = sub_1A9CE867C();
    v44 = os_log_type_enabled(v42, v43);
    v45 = v98;
    if (v44)
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v100 = swift_slowAlloc();
      v47 = v100;
      *(_DWORD *)v46 = 136446210;
      v93 = v46 + 4;
      v48 = sub_1A9CE8D48();
      v99 = sub_1A9B91D6C(v48, v49, &v100);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v42, v43, "[%{public}s] change is valid, updating the model and saving", v46, 0xCu);
      swift_arrayDestroy();
      v50 = v47;
      v45 = v98;
      MEMORY[0x1AF420344](v50, -1, -1);
      MEMORY[0x1AF420344](v46, -1, -1);
    }

    v52 = v90;
    v51 = v91;
    v53 = objc_msgSend(v90, sel_overrideOccurrence);
    if (v53)
    {
      v54 = v53;
      v86(v21, *(_QWORD *)&v51[v22] + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar, v17);
      v55 = objc_msgSend(v54, sel_wakeUpComponents);
      v56 = v95;
      sub_1A9CE6024();

      sub_1A9CE63E4();
      (*(void (**)(char *, uint64_t))(v96 + 8))(v56, v97);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      v57 = sub_1A9CE62E8();
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v58 + 48))(v45, 1, v57) == 1)
      {

        sub_1A9B93BDC((uint64_t)v45, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
        v59 = 0;
      }
      else
      {
        sub_1A9CE6288();
        v85 = v84;

        (*(void (**)(NSObject *, uint64_t))(v58 + 8))(v45, v57);
        v59 = v85 > 0.0;
      }
      v61 = v89;
      v51 = v91;
    }
    else
    {
      v59 = 0;
      v61 = v89;
    }
    *(_QWORD *)&v51[v22] = v88;
    swift_retain();
    swift_release();
    v87(v59);

    swift_release();
LABEL_32:

    return;
  }
  if (qword_1ED2628A0 != -1)
    swift_once();
  v67 = sub_1A9CE6990();
  __swift_project_value_buffer(v67, (uint64_t)qword_1ED262888);
  v68 = sub_1A9CE6978();
  v69 = sub_1A9CE867C();
  v70 = os_log_type_enabled(v68, v69);
  v71 = v90;
  if (v70)
  {
    v72 = (uint8_t *)swift_slowAlloc();
    v73 = swift_slowAlloc();
    v100 = v73;
    *(_DWORD *)v72 = 136446210;
    v74 = sub_1A9CE8D48();
    v99 = sub_1A9B91D6C(v74, v75, &v100);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v68, v69, "[%{public}s] change is invalid, not saving", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v73, -1, -1);
    MEMORY[0x1AF420344](v72, -1, -1);
  }

  sub_1A9BD4EB4((uint64_t)&v100);
  if (v101 != 1)
  {
    v76 = v100;
    sub_1A9B94A18(0, &qword_1EEB430A8);
    v100 = v76;
    v77 = swift_allocObject();
    v78 = v91;
    swift_unknownObjectWeakInit();
    v79 = swift_allocObject();
    v80 = v94;
    *(_QWORD *)(v79 + 16) = v77;
    *(_QWORD *)(v79 + 24) = v80;
    v81 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v82 = swift_allocObject();
    *(_QWORD *)(v82 + 16) = v81;
    *(_QWORD *)(v82 + 24) = v80;
    swift_retain();
    swift_retain();
    v83 = sub_1A9C0235C(&v100, v93, (uint64_t)sub_1A9BF9114, v79, (uint64_t)sub_1A9BF911C, v82);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    objc_msgSend(v78, sel_presentViewController_animated_completion_, v83, 1, 0);

  }
  swift_release();

}

void sub_1A9BF5380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22[3];

  v3 = sub_1A9CE6990();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 16;
  swift_beginAccess();
  v9 = MEMORY[0x1AF4203E0](v8);
  if (v9)
  {
    v10 = (void *)v9;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v11 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED262888);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v11, v3);

    v12 = sub_1A9CE6978();
    v13 = sub_1A9CE867C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v22[0] = v15;
      *(_DWORD *)v14 = 136446210;
      v21[0] = v14 + 4;
      v16 = sub_1A9CE8D48();
      v21[1] = sub_1A9B91D6C(v16, v17, v22);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] edit in health", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v15, -1, -1);
      MEMORY[0x1AF420344](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  swift_beginAccess();
  v18 = MEMORY[0x1AF4203E0](v8);
  if (v18)
  {
    v19 = (char *)v18;
    v20 = v18 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
    if (MEMORY[0x1AF4203E0](v18 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
    {
      if (*(_QWORD *)&v19[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver])
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      if (*(_QWORD *)&v19[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver])
      {
        swift_retain();
        sub_1A9CE6D80();
        swift_release();
      }
      sub_1A9CCE578();
      *(_QWORD *)(v20 + 8) = 0;
      swift_unknownObjectWeakAssign();

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t sub_1A9BF5638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v3 = sub_1A9CE6990();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](a2 + 16);
  if (result)
  {
    v9 = (void *)result;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v10 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED262888);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v10, v3);

    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE867C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v18 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_1A9CE8D48();
      v17[1] = sub_1A9B91D6C(v15, v16, &v18);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] cancel", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

id sub_1A9BF58BC(id a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
  {
    swift_retain();
    sub_1A9CE6D80();
    swift_release();
  }
  return objc_msgSend(a1, sel_cancelWithAnimated_, 1);
}

void sub_1A9BF593C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  void *v16;
  uint64_t v17;
  id v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  char *v29;
  void *v30;
  id v31;
  void (*v32)(char *, uint64_t);
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a1;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v35 - v3;
  v5 = sub_1A9CE64E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = 0;
  v12 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource;
  v13 = &unk_1E55D2000;
  v14 = &unk_1E55D2668;
  v37 = v4;
  do
  {
    v15 = v10;
    if (v11 >= v13[207])
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    v16 = *(void **)&v38[v12];
    if (!v16)
      goto LABEL_17;
    v17 = v14[2 * v11 + 5];
    v39 = v14[2 * v11 + 4];
    v40 = v17;
    swift_bridgeObjectRetain();
    v18 = v16;
    sub_1A9CE6A98();
    swift_bridgeObjectRelease();

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1A9B93BDC((uint64_t)v4, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
    }
    else
    {
      v19 = v9;
      v20 = v14;
      v21 = v12;
      v22 = v13;
      v23 = v5;
      v24 = v6;
      v25 = v4;
      v26 = v23;
      (*(void (**)(char *, char *))(v6 + 32))(v19, v25);
      v27 = objc_msgSend(v38, sel_tableView);
      if (!v27)
        goto LABEL_18;
      v28 = v27;
      v29 = v19;
      v30 = (void *)sub_1A9CE64B0();
      v31 = objc_msgSend(v28, sel_cellForRowAtIndexPath_, v30);

      v13 = v22;
      v12 = v21;
      v14 = v20;
      if (v31)
      {
        type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
        if (swift_dynamicCastClass())
          sub_1A9C49C58(v36);

      }
      v32 = *(void (**)(char *, uint64_t))(v24 + 8);
      v9 = v29;
      v6 = v24;
      v5 = v26;
      v32(v9, v26);
      v4 = v37;
    }
    v10 = 1;
    v11 = 1;
  }
  while ((v15 & 1) == 0);
  swift_arrayDestroy();
  v33 = objc_msgSend(v38, sel_navigationItem);
  v34 = objc_msgSend(v33, sel_rightBarButtonItem);

  if (v34)
  {
    objc_msgSend(v34, sel_setEnabled_, 0);

  }
}

uint64_t sub_1A9BF5C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void (*v24)(char *, uint64_t);
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v26 - v9;
  v11 = (__int128 *)(a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_model);
  swift_beginAccess();
  v12 = *((_QWORD *)v11 + 4);
  v13 = *((_BYTE *)v11 + 40);
  v14 = *((_BYTE *)v11 + 41);
  v15 = *((_BYTE *)v11 + 42);
  v16 = v11[1];
  v26 = *v11;
  v27 = v16;
  v28 = v12;
  v29 = v13;
  v30 = v14;
  v31 = v15;
  v17 = a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleClock_configuration;
  v18 = *(double *)(v17 + 144);
  swift_retain();
  sub_1A9C6BD5C(v18);
  v19 = *((_QWORD *)v11 + 4);
  v20 = *((_BYTE *)v11 + 40);
  v21 = *((_BYTE *)v11 + 41);
  v22 = *((_BYTE *)v11 + 42);
  v23 = v11[1];
  v26 = *v11;
  v27 = v23;
  v28 = v19;
  v29 = v20;
  v30 = v21;
  v31 = v22;
  sub_1A9C6BF60(*(double *)(v17 + 144));
  ScheduleOccurrenceEditModel.set(bedtimeComponents:wakeUpComponents:)();
  swift_release();
  v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v7, v2);
  return ((uint64_t (*)(char *, uint64_t))v24)(v10, v2);
}

uint64_t sub_1A9BF5E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double v12;
  char v13;
  uint64_t v15;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(a1 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component);
  swift_retain();
  sub_1A9C48010((uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v8 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v9 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v6, 1, v8, v9, *(double *)&qword_1EEB45000);
  }
  else
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v11 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v12 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    v10 = ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((uint64_t)v6, 1, v11, v12, *(double *)&qword_1EEB45000);
  }
  v13 = v10;
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v13 & 1;
}

id sub_1A9BF604C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id result;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  __int128 v43[2];
  uint64_t v44;
  id v45;
  uint64_t v46[3];
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v42 = v2;
  swift_getObjectType();
  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (unint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED2628A0 != -1)
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1ED262888);
  v10 = a1;
  v11 = sub_1A9CE6978();
  v12 = sub_1A9CE8658();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v40 = swift_slowAlloc();
    v46[0] = v40;
    *(_DWORD *)v13 = 136446722;
    v14 = sub_1A9CE8D48();
    *(_QWORD *)&v43[0] = sub_1A9B91D6C(v14, v15, v46);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    v41 = v5;
    v16 = v4;
    *(_WORD *)(v13 + 12) = 2080;
    LOBYTE(v43[0]) = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
    v17 = sub_1A9CE82F8();
    *(_QWORD *)&v43[0] = sub_1A9B91D6C(v17, v18, v46);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 22) = 2080;
    sub_1A9C48010(v8);
    sub_1A9B92B9C(&qword_1EEB430A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
    v19 = sub_1A9CE8B74();
    v21 = v20;
    (*(void (**)(unint64_t, uint64_t))(v41 + 8))(v8, v16);
    *(_QWORD *)&v43[0] = sub_1A9B91D6C(v19, v21, v46);
    sub_1A9CE888C();

    v4 = v16;
    v5 = v41;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] AX %s changed to %s", (uint8_t *)v13, 0x20u);
    v22 = v40;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v22, -1, -1);
    MEMORY[0x1AF420344](v13, -1, -1);

  }
  else
  {

  }
  v23 = v10[OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_component];
  swift_retain();
  sub_1A9C48010(v8);
  if ((v23 & 1) == 0)
  {
    if (qword_1EEB42C78 != -1)
      swift_once();
    v26 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v27 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(bedtimeComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)(v8, 0, v26, v27, *(double *)&qword_1EEB45000);
    goto LABEL_20;
  }
  if (qword_1EEB42C78 != -1)
    goto LABEL_35;
  while (1)
  {
    v24 = *(double *)&qword_1EEB45008;
    if (qword_1EEB42C80 != -1)
      swift_once();
    v25 = *(double *)&qword_1EEB45010;
    if (qword_1EEB42C70 != -1)
      swift_once();
    ScheduleOccurrenceEditModel.setIfValid(wakeUpComponents:minimumTimeInBed:maximumTimeInBed:editingIncrement:justChecking:)((char *)v8, 0, v24, v25, *(double *)&qword_1EEB45000);
LABEL_20:
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v8, v4);
    result = objc_msgSend(v42, sel_tableView);
    if (!result)
      break;
    v29 = result;
    v30 = objc_msgSend(result, sel_visibleCells);

    sub_1A9B94A18(0, &qword_1EEB43520);
    v8 = sub_1A9CE83DC();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = sub_1A9CE8AC0();
      swift_bridgeObjectRelease();
      if (!v31)
        return (id)swift_bridgeObjectRelease();
    }
    else
    {
      v31 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v31)
        return (id)swift_bridgeObjectRelease();
    }
    if (v31 >= 1)
    {
      v32 = 0;
      v41 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_model;
      v33 = v8 & 0xC000000000000001;
      v39 = v8;
      v40 = v8 & 0xC000000000000001;
      do
      {
        if (v33)
          v34 = (id)MEMORY[0x1AF41F600](v32, v8);
        else
          v34 = *(id *)(v8 + 8 * v32 + 32);
        v45 = v34;
        sub_1A9B94928(0, (unint64_t *)&qword_1EEB43528);
        if (swift_dynamicCast())
        {
          sub_1A9B949B8(v43, (uint64_t)v46);
          v35 = v47;
          v36 = v48;
          __swift_project_boxed_opaque_existential_1Tm(v46, v47);
          v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8);
          v38 = swift_retain();
          v37(v38, v35, v36);
          v8 = v39;
          v33 = v40;
          swift_release();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
        }
        else
        {
          v44 = 0;
          memset(v43, 0, sizeof(v43));
          sub_1A9BF7ED0((uint64_t)v43);
        }
        ++v32;
      }
      while (v31 != v32);
      return (id)swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_35:
    swift_once();
  }
  __break(1u);
  return result;
}

void sub_1A9BF66C4(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  v3 = a1;
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE8658();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = sub_1A9CE8D48();
    v13 = sub_1A9B91D6C(v8, v9, &v14);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    objc_msgSend(v3, sel_value, v13, v14);
    v10 = sub_1A9CE84CC();
    sub_1A9B91D6C(v10, v11, &v14);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Volume changed to %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);

  }
  else
  {

  }
  swift_retain();
  objc_msgSend(v3, sel_value);
  ScheduleOccurrenceEditModel.alarmVolume.setter(v12);
  swift_release();
  sub_1A9CA13F0();
}

void sub_1A9BF6950(uint64_t a1, char a2)
{
  if (a1)
  {
    type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      ScheduleOccurrenceEditModel.alarmEnabled.setter(a2 & 1);
      swift_release();
      sub_1A9CA17A4();
    }
    else
    {
      type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
      if (swift_dynamicCastClass())
      {
        swift_retain();
        ScheduleOccurrenceEditModel.allowsSnooze.setter(a2 & 1);
        swift_release();
      }
    }
  }
}

uint64_t sub_1A9BF6B68(void *a1, uint64_t a2, void *a3, uint64_t a4, char *a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  if (a4)
  {
    v10 = sub_1A9CE82E0();
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = a3;
  v14 = a1;
  sub_1A9BF8BA4(v10, v12, a5, a6);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for QuickScheduleOverrideViewController.DataSource()
{
  uint64_t result;

  result = qword_1EEB45B00;
  if (!qword_1EEB45B00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BF6C2C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE6444();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_1A9BF6CDC()
{
  uint64_t v0;
  id result;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1A9CE6A50();
  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  sub_1A9CE6A20();
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_healthAppHidden);

    if ((v3 & 1) == 0)
    {
      sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1A9CEB520;
      type metadata accessor for EditScheduleLinkTableViewCell();
      sub_1A9BF8FF4(0);
      sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
      *(_QWORD *)(v4 + 32) = sub_1A9CE82F8();
      *(_QWORD *)(v4 + 40) = v5;
      sub_1A9CE6A20();
      swift_bridgeObjectRelease();
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1A9CEB520;
      *(_QWORD *)(v6 + 32) = sub_1A9CE82F8();
      *(_QWORD *)(v6 + 40) = v7;
      sub_1A9CE6A14();
      swift_bridgeObjectRelease();
    }
    sub_1A9CE6A20();
    sub_1A9CE6A14();
    result = (id)sub_1A9CE6A14();
    if (*(_BYTE *)(v0 + qword_1EEB45AD8) == 1)
    {
      sub_1A9CE6A20();
      return (id)sub_1A9CE6A14();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1A9BF6F80(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  _BYTE *v18;
  id v19;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t ObjCClassFromMetadata;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v53 = (char *)&v52 - v15;
  *(_QWORD *)&v6[qword_1EEB45AA8] = 0;
  *(_QWORD *)&v6[qword_1EEB45AB0] = 0;
  v6[qword_1EEB45AB8] = 0;
  v16 = (uint64_t *)&v6[qword_1EEB45AE0];
  *v16 = 0;
  v16[1] = 0;
  v17 = *(void **)(a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_mutableOccurrence);
  v18 = v6;
  v19 = objc_msgSend(v17, sel_alarmConfiguration);
  objc_msgSend(v19, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB430B0);
  swift_dynamicCast();
  v20 = v57;
  LOBYTE(v17) = objc_msgSend(v57, sel_isEnabled);

  v18[qword_1EEB45AD8] = (_BYTE)v17;
  *(_QWORD *)&v18[qword_1EEB45AC0] = a3;
  v18[qword_1EEB45AC8] = *(_BYTE *)(a2 + 80);
  v21 = a2 + OBJC_IVAR____TtC13SleepHealthUI27ScheduleOccurrenceEditModel_gregorianCalendar;
  v22 = &v18[qword_1EEB45AD0];
  v23 = sub_1A9CE6444();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v21, v23);
  v18[qword_1EEB45AE8] = a4;
  v24 = *v16;
  *v16 = a5;
  v16[1] = a6;
  v56 = a6;
  v25 = a3;
  swift_retain();
  swift_retain();
  sub_1A9BF8FE4(v24);

  v26 = a1;
  v27 = (id)sub_1A9CE6A68();
  sub_1A9CE6A80();
  type metadata accessor for ScheduleOccurrenceComponentsAndDayAccessibilityTableViewCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v29 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v29);

  v30 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v30);

  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v31 = swift_getObjCClassFromMetadata();
  v32 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v31, v32);

  v33 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v31, v33);

  type metadata accessor for ScheduleOccurrenceAlarmEnabledTableViewCell();
  v34 = swift_getObjCClassFromMetadata();
  v35 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v34, v35);

  type metadata accessor for ScheduleOccurrenceAlarmSnoozeTableViewCell();
  v36 = swift_getObjCClassFromMetadata();
  v37 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v36, v37);

  type metadata accessor for ScheduleOccurrenceAlarmSoundTableViewCell();
  v38 = swift_getObjCClassFromMetadata();
  v39 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v38, v39);

  type metadata accessor for ScheduleOccurrenceAlarmVolumeTableViewCell();
  v40 = swift_getObjCClassFromMetadata();
  v41 = (void *)sub_1A9CE82B0();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v40, v41);

  type metadata accessor for EditScheduleLinkTableViewCell();
  v42 = swift_getObjCClassFromMetadata();
  v58 = sub_1A9BF8FF4(0);
  sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
  sub_1A9CE82F8();
  v43 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v26, sel_registerClass_forCellReuseIdentifier_, v42, v43);

  v44 = (char *)v27;
  v45 = v53;
  sub_1A9BF6CDC();
  sub_1A9CE6A8C();

  (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
  v58 = *(_QWORD *)(a2 + 16);
  v46 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v47 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v46;
  *(_QWORD *)(v48 + 24) = v47;
  sub_1A9B92B28();
  sub_1A9B92B9C((unint64_t *)&qword_1EEB42FA0, (uint64_t (*)(uint64_t))sub_1A9B92B28, MEMORY[0x1E0C95F48]);
  swift_retain();
  v49 = sub_1A9CE6EC4();
  swift_release();
  swift_release();
  *(_QWORD *)&v44[qword_1EEB45AA8] = v49;
  swift_release();
  v58 = v25;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9B92D84(0, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (uint64_t)&qword_1ED262900, 0x1E0DA8568);
  sub_1A9B93038();
  v50 = sub_1A9CE6EC4();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  *(_QWORD *)&v44[qword_1EEB45AB0] = v50;
  swift_release();
  return v44;
}

void sub_1A9BF7634(void **a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1AF4203E0](v5);
  if (v6)
  {
    v7 = (void *)v6;
    swift_beginAccess();
    v8 = (void *)MEMORY[0x1AF4203E0](a3 + 16);
    sub_1A9BF7B90(v4, v8);

  }
}

uint64_t sub_1A9BF76C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  void *v10;
  uint64_t v11;

  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](a2 + 16);
  if (result)
  {
    v10 = (void *)result;
    sub_1A9BF6CDC();
    sub_1A9CE6A8C();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_1A9BF778C(uint64_t a1, uint64_t a2)
{
  return sub_1A9BF83DC(a2);
}

id sub_1A9BF7794(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BB1BFC(a1, a2, a3, a4, (void (*)(uint64_t))sub_1A9BF83DC);
}

uint64_t sub_1A9BF77A0(uint64_t a1, uint64_t a2)
{
  return sub_1A9BF8E04(a2);
}

id sub_1A9BF77A8(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BB1BFC(a1, a2, a3, a4, (void (*)(uint64_t))sub_1A9BF8E04);
}

void *sub_1A9BF77B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  int v28;
  int v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void *);
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = sub_1A9CE6378();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A9CE6444();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SleepScheduleComponentsViewModel();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB33A0(0, &qword_1EEB44148, MEMORY[0x1E0DC25D0]);
  v19 = (uint64_t (*)(uint64_t, uint64_t))sub_1A9CE6AA4();
  v20 = (void *)v19(a1, a2);
  type metadata accessor for ScheduleOccurrenceComponentsEditTableViewCell();
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v39 = v6;
    v22 = (void **)(v21 + OBJC_IVAR____TtC13SleepHealthUI45ScheduleOccurrenceComponentsEditTableViewCell_editView);
    swift_beginAccess();
    v23 = v3;
    v24 = *v22;
    v25 = (uint64_t)*v22 + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_model;
    swift_beginAccess();
    *(_BYTE *)(v25 + *(int *)(v15 + 32)) = 1;
    v26 = v20;
    v27 = v24;
    sub_1A9C5B3A8();
    swift_endAccess();
    sub_1A9BD7564();

    v3 = v23;
    v28 = *(unsigned __int8 *)(v23 + qword_1EEB45AE8);
    if (((v28 ^ (*(_QWORD *)((char *)*v22
                            + OBJC_IVAR____TtC13SleepHealthUI31SleepScheduleComponentsEditView_componentsHeader) != 0)) & 1) == 0)
    {
      v29 = v28 ^ 1;
      v30 = v39;
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CB0EF8], v39);
      sub_1A9CE6384();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v30);
      SleepScheduleComponentsViewModel.init(gregorianCalendar:)((uint64_t)v14, v18);
      v31 = objc_allocWithZone((Class)type metadata accessor for SleepScheduleComponentsEditView());
      sub_1A9BD7ED4(22, 0, 7, 0, (uint64_t)v18, v29);
      v32 = *v22;
      *v22 = v33;

      v26 = v32;
    }
  }
  else
  {
    type metadata accessor for ScheduleOccurrenceComponentsAccessibilityTableViewCell();
    v34 = swift_dynamicCastClass();
    if (!v34)
      goto LABEL_7;
    v35 = v34 + OBJC_IVAR____TtC13SleepHealthUI54ScheduleOccurrenceComponentsAccessibilityTableViewCell_model;
    swift_beginAccess();
    *(_BYTE *)(v35 + *(int *)(v15 + 32)) = 1;
    v26 = v20;
    sub_1A9C5B3A8();
    swift_endAccess();
  }

LABEL_7:
  v36 = *(void (**)(void *))(v3 + qword_1EEB45AE0);
  if (v36)
  {
    swift_retain();
    v36(v20);
    sub_1A9BF8FE4((uint64_t)v36);
  }
  return v20;
}

id sub_1A9BF7AD8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;

  v5 = sub_1A9CE64E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE64BC();
  v10 = a3;
  v11 = a1;
  v12 = sub_1A9BF77B4((uint64_t)v10, (uint64_t)v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

id sub_1A9BF7B90(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  id result;
  char *v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;

  v25 = a2;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v24 - v6;
  v8 = sub_1A9CE64E0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v24 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB33A0(0, (unint64_t *)&qword_1EEB44150, (uint64_t (*)(_QWORD, _QWORD *))MEMORY[0x1E0DC24D8]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v24 - v16;
  v18 = qword_1EEB45AD8;
  v19 = *(unsigned __int8 *)(v2 + qword_1EEB45AD8);
  result = objc_msgSend(a1, sel_isEnabled);
  *(_BYTE *)(v2 + v18) = (_BYTE)result;
  if (v19 != (_DWORD)result)
  {
    sub_1A9BF6CDC();
    sub_1A9CE6A8C();
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    if ((v19 & 1) == 0)
    {
      v26 = 0xD00000000000002ALL;
      v27 = 0x80000001A9CF7E40;
      sub_1A9CE6A98();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        return (id)sub_1A9B93BDC((uint64_t)v7, (unint64_t *)&qword_1EEB45B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
      }
      else
      {
        v21 = v24;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v24, v7, v8);
        v22 = v25;
        if (v25)
        {
          v23 = (void *)sub_1A9CE64B0();
          objc_msgSend(v22, sel_scrollToRowAtIndexPath_atScrollPosition_animated_, v23, 0, 1);

        }
        return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v21, v8);
      }
    }
  }
  return result;
}

uint64_t sub_1A9BF7DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + qword_1EEB45AD0;
  v2 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return sub_1A9BF8FE4(*(_QWORD *)(v0 + qword_1EEB45AE0));
}

id sub_1A9BF7E34()
{
  return sub_1A9BC0290(0, type metadata accessor for QuickScheduleOverrideViewController.DataSource);
}

uint64_t sub_1A9BF7E44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  v2 = a1 + qword_1EEB45AD0;
  v3 = sub_1A9CE6444();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return sub_1A9BF8FE4(*(_QWORD *)(a1 + qword_1EEB45AE0));
}

uint64_t sub_1A9BF7EC8()
{
  return type metadata accessor for QuickScheduleOverrideViewController.DataSource();
}

uint64_t sub_1A9BF7ED0(uint64_t a1)
{
  uint64_t v2;

  sub_1A9B92CAC(0, (unint64_t *)&unk_1EEB43530, (uint64_t)&qword_1EEB43528, (uint64_t)&protocol descriptor for ScheduleOccurrenceEditModelConsuming, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A9B94928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A9BF7F2C()
{
  _BYTE *v0;
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_alarmConfigurationObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelEditObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_significantTimeChangeObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_sleepDurationGoalObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_validScheduleRangeObserver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_willResignActiveObserver] = 0;
  v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_modelHasChanged] = 0;
  v1 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_tonePickerStyleProvider;
  v2 = (objc_class *)type metadata accessor for TonePickerStyleProvider();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v3 = OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_vibrationPickerStyleProvider;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource] = 0;

  sub_1A9CE8A84();
  __break(1u);
}

void sub_1A9BF8064()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (!v1)
  {
    __break(1u);
    return;
  }
  v2 = v1;
  sub_1A9CE6A74();

  if (v8 && (v7 == 0xD000000000000029 && v8 == 0x80000001A9CF7DE0 || (sub_1A9CE8BB0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_1A9BF2204();
    return;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  sub_1A9BF8FF4(0);
  sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
  v3 = sub_1A9CE82F8();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (v3 == v7 && v8 == v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      return;
  }
  v6 = v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate;
  if (MEMORY[0x1AF4203E0](v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_delegate))
  {
    if (*(_QWORD *)(v0
                   + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_nextOccurrenceChangeObserver))
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_scheduleChangeObserver))
    {
      swift_retain();
      sub_1A9CE6D80();
      swift_release();
    }
    sub_1A9CCE578();
    *(_QWORD *)(v6 + 8) = 0;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
}

void sub_1A9BF824C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v1)
  {
    v2 = v1;
    sub_1A9CE6A74();

    if (v6
      && (v5 == 0xD000000000000029 && v6 == 0x80000001A9CF7DE0
       || (sub_1A9CE8BB0() & 1) != 0
       || v5 == 0xD000000000000025 && v6 == 0x80000001A9CF7E70
       || (sub_1A9CE8BB0() & 1) != 0))
    {
      goto LABEL_13;
    }
    type metadata accessor for EditScheduleLinkTableViewCell();
    sub_1A9BF8FF4(0);
    sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
    v3 = sub_1A9CE82F8();
    if (!v6)
      goto LABEL_13;
    if (v3 == v5 && v6 == v4)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      return;
    }
    sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A9BF83DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_1A9CE64E0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = 0;
  MEMORY[0x1AF41D0D4]();
  sub_1A9CE6A74();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v8 = v13;
  if (v13)
  {
    if (v12 == 0xD00000000000002BLL && v13 == 0x80000001A9CF7CF0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        return 0;
    }
    if (qword_1ED2626A8 != -1)
      swift_once();
    v10 = (id)qword_1ED264F90;
    v8 = sub_1A9CE6168();

  }
  return v8;
}

id sub_1A9BF85A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v8)
  {
    sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
    *(_QWORD *)(v9 + 32) = a1;
    *(_QWORD *)(v9 + 40) = 0;
    v10 = v8;
    MEMORY[0x1AF41D0D4](v9);
    sub_1A9CE6A74();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v11 = v16;
    if (v16)
    {
      v12 = v15;
      if (v15 == 0xD00000000000002DLL && v16 == 0x80000001A9CF7CC0
        || (sub_1A9CE8BB0() & 1) != 0
        || v12 == 0xD00000000000003ELL && v11 == 0x80000001A9CF7D20
        || (sub_1A9CE8BB0() & 1) != 0
        || v12 == 0xD00000000000002BLL && v11 == 0x80000001A9CF7CF0)
      {
        swift_bridgeObjectRelease();
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
      }
      v14 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D78]), sel_init);
    }
  }
  return 0;
}

double sub_1A9BF87A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (v8)
  {
    sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
    *(_QWORD *)(v9 + 32) = a1;
    *(_QWORD *)(v9 + 40) = 0;
    v10 = v8;
    MEMORY[0x1AF41D0D4](v9);
    sub_1A9CE6A74();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v12 = v17;
    v11 = v18;
    if (v18 && (v17 == 0xD000000000000029 && v18 == 0x80000001A9CF7DE0 || (sub_1A9CE8BB0() & 1) != 0))
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  type metadata accessor for EditScheduleLinkTableViewCell();
  v17 = sub_1A9BF8FF4(0);
  sub_1A9BF9008(0, &qword_1EEB45B60, (void (*)(uint64_t))sub_1A9BF8FF4);
  v13 = sub_1A9CE82F8();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return *MEMORY[0x1E0DC53D8];
  }
  if (v13 == v12 && v11 == v14)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    return 1.0;
  }
  v16 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 1.0;
  if ((v16 & 1) == 0)
    return *MEMORY[0x1E0DC53D8];
  return result;
}

double sub_1A9BF89AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC13SleepHealthUI35QuickScheduleOverrideViewController_dataSource);
  if (!v8)
    return *MEMORY[0x1E0DC53D8];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = 0;
  v10 = v8;
  MEMORY[0x1AF41D0D4](v9);
  sub_1A9CE6A74();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v11 = v16;
  if (!v16)
    return *MEMORY[0x1E0DC53D8];
  v12 = v15;
  if (v15 == 0xD00000000000002BLL && v16 == 0x80000001A9CF7CF0
    || (sub_1A9CE8BB0() & 1) != 0
    || v12 == 0xD00000000000002DLL && v11 == 0x80000001A9CF7CC0
    || (sub_1A9CE8BB0() & 1) != 0
    || v12 == 0xD00000000000003ELL && v11 == 0x80000001A9CF7D20)
  {
    swift_bridgeObjectRelease();
    return 9.0;
  }
  v14 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  result = 9.0;
  if ((v14 & 1) == 0)
    return *MEMORY[0x1E0DC53D8];
  return result;
}

uint64_t sub_1A9BF8BA4(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *format;
  uint64_t v20;

  swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v8 = sub_1A9CE6990();
  __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
  swift_bridgeObjectRetain_n();
  v9 = sub_1A9CE6978();
  v10 = sub_1A9CE867C();
  if (os_log_type_enabled(v9, v10))
  {
    format = a3;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1A9CE8D48();
    sub_1A9B91D6C(v13, v14, &v20);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    if (a2)
    {
      swift_bridgeObjectRetain();
      v15 = sub_1A9CE82F8();
      v17 = v16;
    }
    else
    {
      v17 = 0xE300000000000000;
      v15 = 7104878;
    }
    sub_1A9B91D6C(v15, v17, &v20);
    sub_1A9CE888C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v9, v10, format, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v12, -1, -1);
    MEMORY[0x1AF420344](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  a4(a1, a2);
  return swift_release();
}

uint64_t sub_1A9BF8E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_1A9CE64E0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB43090, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = 0;
  MEMORY[0x1AF41D0D4]();
  sub_1A9CE6A74();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v9 = v14;
  if (!v14)
    return v9;
  if (v13 == 0xD000000000000029 && v14 == 0x80000001A9CF7DE0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(v1 + qword_1EEB45AC8) != 1)
    return 0;
  if (qword_1ED2626A8 != -1)
    swift_once();
  v11 = (id)qword_1ED264F90;
  v9 = sub_1A9CE6168();

  return v9;
}

uint64_t sub_1A9BF8FE4(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1A9BF8FF4(uint64_t a1)
{
  return sub_1A9BF9008(a1, &qword_1EEB45B58, (void (*)(uint64_t))type metadata accessor for EditScheduleLinkTableViewCell);
}

uint64_t sub_1A9BF9008(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1A9BF9040()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9BF9064(int a1)
{
  uint64_t v1;

  sub_1A9BF3DC8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A9BF906C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9BF9098(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BF4480(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1A9BF90A4()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_1A9BF90E0(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF46A4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_BOOL8))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1A9BF90F0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9BF9114(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF5380(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A9BF911C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BF5638(a1, *(_QWORD *)(v1 + 16));
}

void sub_1A9BF9134()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45B68)
  {
    sub_1A9B92D84(255, (unint64_t *)&qword_1ED2628D0, (unint64_t *)&qword_1ED262910, (uint64_t)&qword_1ED262900, 0x1E0DA8568);
    sub_1A9B93038();
    v0 = sub_1A9CE6D20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45B68);
  }
}

void sub_1A9BF91B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45B70)
  {
    sub_1A9B92D84(255, &qword_1ED2628E0, &qword_1ED262940, (uint64_t)&unk_1ED262930, 0x1E0DA8548);
    sub_1A9BF9234();
    v0 = sub_1A9CE6D20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45B70);
  }
}

unint64_t sub_1A9BF9234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45B80;
  if (!qword_1EEB45B80)
  {
    sub_1A9B92D84(255, &qword_1ED2628E0, &qword_1ED262940, (uint64_t)&unk_1ED262930, 0x1E0DA8548);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45B80);
  }
  return result;
}

uint64_t sub_1A9BF929C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9BF92C0(void *a1)
{
  sub_1A9BF1EB4(a1);
}

void sub_1A9BF92E0(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF10F0(a1, v1);
}

void sub_1A9BF92E8(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF1444(a1, v1, sub_1A9BF1328);
}

void sub_1A9BF9308(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF1444(a1, v1, (void (*)(void))sub_1A9BF1498);
}

void sub_1A9BF9328(void **a1)
{
  uint64_t v1;

  sub_1A9BF1680(a1, v1);
}

void sub_1A9BF9330(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF1870(a1, v1);
}

void sub_1A9BF9338(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF193C(a1, v1);
}

void sub_1A9BF9340(uint64_t a1)
{
  uint64_t v1;

  sub_1A9BF1994(a1, v1);
}

void sub_1A9BF9348(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9BF19E4(a1, a2, v2);
}

void sub_1A9BF9350()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + qword_1EEB45AB8) = 0;
}

uint64_t sub_1A9BF9364()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1A9BF9390(void **a1)
{
  uint64_t v1;

  sub_1A9BF7634(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A9BF9398(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9BF76C4(a1, v1);
}

uint64_t type metadata accessor for SleepDiffableTableViewDataSource()
{
  uint64_t result;

  result = qword_1EEB45BE0;
  if (!qword_1EEB45BE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A9BF93F8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A9BF9440(uint64_t a1, uint64_t a2)
{
  return sub_1A9BF95E0(a2, MEMORY[0x1E0D2BB38]);
}

id sub_1A9BF9460(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BF9498(a1, a2, a3, a4, MEMORY[0x1E0D2BB38]);
}

uint64_t sub_1A9BF946C(uint64_t a1, uint64_t a2)
{
  return sub_1A9BF95E0(a2, MEMORY[0x1E0D2BB30]);
}

id sub_1A9BF948C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1A9BF9498(a1, a2, a3, a4, MEMORY[0x1E0D2BB30]);
}

id sub_1A9BF9498(void *a1, uint64_t a2, void *a3, uint64_t a4, unsigned int *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v8 = a3;
  v9 = a1;
  sub_1A9BF95E0(a4, a5);
  v11 = v10;

  if (v11)
  {
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

uint64_t sub_1A9BF951C()
{
  uint64_t v0;

  return sub_1A9B94894(v0 + qword_1EEB45BD8);
}

id sub_1A9BF952C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepDiffableTableViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9BF9560(uint64_t a1)
{
  return sub_1A9B94894(a1 + qword_1EEB45BD8);
}

uint64_t sub_1A9BF9570()
{
  char *v0;

  v0 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepDiffableTableViewDataSource());
  *(_QWORD *)&v0[qword_1EEB45BD8 + 8] = 0;
  swift_unknownObjectWeakInit();
  return sub_1A9CE6A68();
}

uint64_t sub_1A9BF95D8()
{
  return type metadata accessor for SleepDiffableTableViewDataSource();
}

uint64_t sub_1A9BF95E0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[4];

  v4 = v2;
  sub_1A9BF9950();
  MEMORY[0x1E0C80A78](v6, v7);
  v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A9CE8628();
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE85F8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A9CE64E0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1AF41D0F8](0, a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *a2, v12);
  sub_1A9CE85EC();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v22 = v4 + qword_1EEB45BD8;
  v23 = MEMORY[0x1AF4203E0](v22);
  if (!v23
    || (v24 = *(_QWORD *)(v22 + 8),
        v39[0] = v23,
        v39[1] = v24,
        sub_1A9BF9A0C(0, &qword_1EEB4A0A0),
        sub_1A9BF9A0C(0, &qword_1EEB481E0),
        (swift_dynamicCast() & 1) == 0))
  {
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    goto LABEL_7;
  }
  if (!*((_QWORD *)&v37 + 1))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    sub_1A9B97190((uint64_t)&v36, (uint64_t (*)(_QWORD))sub_1A9BF99A4);
    return 0;
  }
  sub_1A9B949B8(&v36, (uint64_t)v39);
  __swift_project_boxed_opaque_existential_1Tm(v39, v39[3]);
  sub_1A9CE68D0();
  swift_bridgeObjectRelease();
  sub_1A9BF9A0C(0, (unint64_t *)&qword_1EEB449A0);
  v25 = (uint64_t)v35;
  v26 = swift_dynamicCast();
  v27 = v34;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  if ((v26 & 1) == 0)
  {
    v28(v25, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    sub_1A9B97190(v25, (uint64_t (*)(_QWORD))sub_1A9BF9950);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    return 0;
  }
  v28(v25, 0, 1, v9);
  v29 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v33, v25, v9);
  v30 = sub_1A9CE861C();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v9);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
  return v30;
}

void sub_1A9BF9950()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45C30)
  {
    sub_1A9CE8628();
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45C30);
  }
}

void sub_1A9BF99A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45C38)
  {
    sub_1A9BF9A0C(255, &qword_1EEB481E0);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45C38);
  }
}

uint64_t sub_1A9BF9A0C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id sub_1A9BF9A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  char *v8;
  uint64_t v9;
  char v10;
  double *v11;
  double v12;
  uint64_t v13;
  double v14;
  objc_super v16;

  if (a3)
  {
    v5 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  v6 = objc_msgSendSuper2(&v16, sel_initWithStyle_reuseIdentifier_, a1, v5);

  v7 = v6;
  v8 = (char *)sub_1A9C46874();

  v9 = sub_1A9CDF60C();
  v11 = (double *)&v8[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  v12 = *(double *)&v8[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *(_QWORD *)v11 = v13;
  v11[1] = v14;
  *((_QWORD *)v11 + 2) = v9;
  *((_BYTE *)v11 + 24) = v10 & 1;
  if (v12 != v14)
  {
    objc_msgSend(v8, sel_reloadAllComponents);
    sub_1A9C2F4E8((char *)1);
  }

  return v7;
}

id sub_1A9BF9B84(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  char *v6;
  uint64_t v7;
  char v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  objc_super v14;

  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  v3 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = (char *)sub_1A9C46874();

    v7 = sub_1A9CDF60C();
    v9 = (double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    v10 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *(_QWORD *)v9 = v11;
    v9[1] = v12;
    *((_QWORD *)v9 + 2) = v7;
    *((_BYTE *)v9 + 24) = v8 & 1;
    if (v10 != v12)
    {
      objc_msgSend(v6, sel_reloadAllComponents);
      sub_1A9C2F4E8((char *)1);
    }

  }
  return v4;
}

id sub_1A9BF9C64()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalTimePickerTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GoalTimePickerTableViewCell()
{
  return objc_opt_self();
}

double SectionContent.init(item:headerText:footerText:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[3];
  uint64_t v21;

  v18 = a1[1];
  v19 = *a1;
  v11 = *((_QWORD *)a1 + 4);
  v12 = *((_WORD *)a1 + 20);
  sub_1A9B94CA0(0, &qword_1EEB446F8, (uint64_t)&type metadata for SectionItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1A9CEB520;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v11;
  *(_WORD *)(v13 + 72) = v12;
  sub_1A9BF9D90(v13, a2, a3, a4, a5, (uint64_t *)v20);
  v14 = v21;
  result = *(double *)v20;
  v16 = v20[1];
  v17 = v20[2];
  *(_OWORD *)a6 = v20[0];
  *(_OWORD *)(a6 + 16) = v16;
  *(_OWORD *)(a6 + 32) = v17;
  *(_QWORD *)(a6 + 48) = v14;
  return result;
}

uint64_t sub_1A9BF9D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  if (a3 == 1)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if (a5 != 1)
      goto LABEL_3;
LABEL_10:
    sub_1A9C01D04(a2, a3);
    result = swift_bridgeObjectRelease();
    a4 = 0;
    a5 = 0;
    v16 = 0;
    goto LABEL_11;
  }
  if (a3)
  {
    sub_1A9C01D18(a2, a3);
    sub_1A9C01D18(a2, a3);
    sub_1A9C01D18(a2, a3);
    sub_1A9C01D18(a2, a3);
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    sub_1A9CE79C8();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v18 = MEMORY[0x1E0CDDD78];
  sub_1A9B94CA0(0, &qword_1EEB45DE0, MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1A9C00EC8(&qword_1EEB45DD8, &qword_1EEB45DE0, v18, MEMORY[0x1E0CDDD58]);
  v14 = sub_1A9CE7ED8();
  sub_1A9C01D04(a2, a3);
  sub_1A9C01D04(a2, a3);
  v12 = a2;
  v13 = a3;
  if (a5 == 1)
    goto LABEL_10;
LABEL_3:
  v19 = v14;
  if (a5)
  {
    sub_1A9C01D18(a4, a5);
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain_n();
    sub_1A9CE79C8();
  }
  v15 = MEMORY[0x1E0CDDD78];
  sub_1A9B94CA0(0, &qword_1EEB45DE0, MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1A9C00EC8(&qword_1EEB45DD8, &qword_1EEB45DE0, v15, MEMORY[0x1E0CDDD58]);
  v16 = sub_1A9CE7ED8();
  sub_1A9C01D04(a4, a5);
  sub_1A9C01D04(a4, a5);
  sub_1A9C01D04(a2, a3);
  sub_1A9C01D04(a4, a5);
  result = swift_bridgeObjectRelease();
  v14 = v19;
LABEL_11:
  *a6 = v12;
  a6[1] = v13;
  a6[2] = v14;
  a6[3] = a4;
  a6[4] = a5;
  a6[5] = v16;
  a6[6] = a1;
  return result;
}

uint64_t sub_1A9BFA040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  sub_1A9B95370(0, qword_1EEB45DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E0CDDD78], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v36 - v17;
  v38 = v16;
  if (a3 != 1)
  {
    v37 = a4;
    if (a3)
    {
      v41 = a2;
      v42 = a3;
      sub_1A9C01D18(a2, a3);
      sub_1A9C01D18(a2, a3);
      sub_1A9C01D18(a2, a3);
      sub_1A9C01D18(a2, a3);
      sub_1A9BA8EA4();
      swift_bridgeObjectRetain();
      v25 = sub_1A9CE79C8();
      v29 = v28 & 1;
    }
    else
    {
      swift_bridgeObjectRetain();
      v25 = 0;
      v26 = 0;
      v29 = 0;
      v27 = 0;
    }
    v41 = v25;
    v42 = v26;
    v43 = v29;
    v44 = v27;
    v34 = MEMORY[0x1E0CDDD78];
    sub_1A9B94CA0(0, &qword_1EEB45DE0, MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1A9C00EC8(&qword_1EEB45DD8, &qword_1EEB45DE0, v34, MEMORY[0x1E0CDDD58]);
    v19 = sub_1A9CE7ED8();
    sub_1A9C01D04(a2, a3);
    sub_1A9C01D04(a2, a3);
    v39 = a3;
    v40 = a2;
    a4 = v37;
    if (a5)
      goto LABEL_3;
LABEL_13:
    sub_1A9C01D04(a2, a3);
    result = swift_bridgeObjectRelease();
    v22 = 0;
    v24 = 0;
    v32 = 0;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v39 = 0;
  v40 = 0;
  v19 = 0;
  if (!a5)
    goto LABEL_13;
LABEL_3:
  v41 = a4;
  v42 = a5;
  LOBYTE(v43) = a6;
  if (a6 == 3)
  {
    v36 = v19;
    v20 = qword_1ED2626A8;
    swift_bridgeObjectRetain();
    if (v20 != -1)
      swift_once();
    v21 = (id)qword_1ED264F90;
    v22 = sub_1A9CE6168();
    v24 = v23;

    swift_bridgeObjectRelease();
    v19 = v36;
  }
  else
  {
    v45 = a4;
    v46 = a5;
    v47 = a6;
    swift_bridgeObjectRetain();
    sub_1A9BFE3CC();
    v22 = v30;
    v24 = v31;
  }
  swift_bridgeObjectRetain();
  SleepDeepLinkTextProvider.text.getter((uint64_t)v18);
  sub_1A9C00F28();
  v32 = sub_1A9CE7ED8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A9C01D04(a2, a3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_14:
  v35 = v39;
  *a7 = v40;
  a7[1] = v35;
  a7[2] = v19;
  a7[3] = v22;
  a7[4] = v24;
  a7[5] = v32;
  a7[6] = a1;
  return result;
}

uint64_t SectionContent.init<A, B>(items:headerProvider:footerProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v61 = a7;
  v58 = a6;
  v67 = a3;
  v70 = a1;
  v68 = sub_1A9CE8880();
  v66 = *(_QWORD *)(v68 - 8);
  v13 = MEMORY[0x1E0C80A78](v68, v12);
  v15 = (char *)&v58 - v14;
  v65 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](v13, v16);
  v59 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v19);
  v60 = (char *)&v58 - v20;
  v21 = sub_1A9CE8880();
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)&v58 - v25;
  v27 = *(_QWORD *)(a4 - 8);
  v29 = MEMORY[0x1E0C80A78](v24, v28);
  v31 = (char *)&v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v32);
  v34 = (char *)&v58 - v33;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v69 = a2;
  v36 = a2;
  v38 = v37;
  v35(v26, v36, v37);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, a4);
  v63 = v22;
  v64 = v38;
  v62 = a5;
  if (v39 == 1)
  {
    v40 = *(void (**)(char *, uint64_t))(v22 + 8);
    swift_bridgeObjectRetain();
    v40(v26, v38);
    v41 = 0;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v34, v26, a4);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v31, v34, a4);
    swift_bridgeObjectRetain();
    sub_1A9BFC50C((uint64_t)v31, a4, v58, &v71);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v34, a4);
    v43 = v71;
    v42 = v72;
    v41 = v73;
    sub_1A9BFC6A4(0, 0, 0);
  }
  v44 = v66;
  v45 = v67;
  v46 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v15, v67, v68);
  v47 = v65;
  v48 = v62;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v15, 1, v62) == 1)
  {
    v49 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v49(v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v69, v64);
    v49((uint64_t)v15, v46);
    v50 = 0;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v53 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v58 = v42;
    v54 = v60;
    v53(v60, v15, v48);
    v55 = (uint64_t)v59;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v59, v54, v48);
    sub_1A9BFC50C(v55, v48, v61, &v71);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v69, v64);
    v56 = v54;
    v42 = v58;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v56, v48);
    v52 = v71;
    v51 = v72;
    v50 = v73;
    sub_1A9BFC6A4(0, 0, 0);
  }
  sub_1A9BFC674(v43, v42, v41);
  sub_1A9BFC674(v52, v51, v50);
  *a8 = v43;
  a8[1] = v42;
  a8[2] = v41;
  a8[3] = v52;
  a8[4] = v51;
  a8[5] = v50;
  a8[6] = v70;
  sub_1A9BFC6A4(v43, v42, v41);
  sub_1A9BFC6A4(v52, v51, v50);
  return swift_bridgeObjectRelease();
}

SleepHealthUI::SectionsViewModel __swiftcall SectionsViewModel.init(sections:)(SleepHealthUI::SectionsViewModel sections)
{
  SleepHealthUI::SectionsViewModel *v1;

  v1->sections._rawValue = sections.sections._rawValue;
  return sections;
}

uint64_t SectionsViewModel.sections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static SectionsViewModel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1A9BFA824(*a1, *a2);
}

uint64_t sub_1A9BFA74C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t i;
  double v13;
  double v14;
  double v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 != *(_QWORD *)(v5 + 16))
    return 0;
  v7 = 1;
  do
  {
    if (v6 && v4 != v5)
    {
      if (*(double *)(v4 + 32) != *(double *)(v5 + 32))
        return 0;
      if (v6 != 1)
      {
        if (*(double *)(v4 + 40) != *(double *)(v5 + 40))
          return 0;
        v10 = (double *)(v4 + 48);
        v11 = (double *)(v5 + 48);
        for (i = v6 - 2; i; --i)
        {
          v13 = *v10++;
          v14 = v13;
          v15 = *v11++;
          if (v14 != v15)
            return 0;
        }
      }
    }
    if (v7 == v2)
      return 1;
    result = 0;
    v9 = 8 * v7++;
    v4 = *(_QWORD *)(v3 + v9);
    v5 = *(_QWORD *)(a2 + 32 + v9);
    v6 = *(_QWORD *)(v4 + 16);
  }
  while (v6 == *(_QWORD *)(v5 + 16));
  return result;
}

uint64_t sub_1A9BFA824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    v39 = a1 + 32;
    v40 = *(_QWORD *)(a1 + 16);
    v38 = a2 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v4 + 56 * v3);
      v7 = v6[6];
      v8 = (uint64_t *)(v5 + 56 * v3);
      v9 = v8[6];
      v10 = *(_QWORD *)(v7 + 16);
      if (v10 != *(_QWORD *)(v9 + 16))
        return 0;
      v11 = *v6;
      v12 = v6[1];
      v13 = v6[2];
      v14 = v6[3];
      v16 = v6[4];
      v15 = v6[5];
      v17 = *v8;
      v18 = v8[1];
      v19 = v8[3];
      v20 = v8[4];
      v48 = v8[2];
      v49 = v13;
      v46 = *v6;
      v47 = v12;
      v45 = v19;
      v50 = v8[5];
      v43 = *v8;
      v44 = v20;
      v41 = v3;
      v42 = v18;
      if (v10)
      {
        v21 = v8[2];
        sub_1A9BFC674(v11, v12, v13);
        sub_1A9BFC674(v14, v16, v15);
        swift_bridgeObjectRetain();
        sub_1A9BFC674(v17, v18, v21);
        sub_1A9BFC674(v19, v20, v50);
        if (v7 != v9)
        {
          swift_bridgeObjectRetain();
          __asm { BR              X8 }
        }
      }
      else
      {
        v22 = v8[4];
        v23 = v8[3];
        v24 = *v8;
        v25 = v8[1];
        v26 = v8[2];
        sub_1A9BFC674(v11, v12, v13);
        sub_1A9BFC674(v14, v16, v15);
        swift_bridgeObjectRetain();
        sub_1A9BFC674(v24, v25, v26);
        sub_1A9BFC674(v23, v22, v50);
      }
      swift_bridgeObjectRetain();
      if (!v49)
        break;
      swift_bridgeObjectRetain();
      if (v48)
      {
        v27 = v42;
        swift_bridgeObjectRetain();
        v28 = v15;
        v29 = v14;
        v30 = v16;
        v32 = v43;
        v31 = v44;
        if (!v47)
          goto LABEL_19;
        if (!v42)
          goto LABEL_34;
        if (v46 == v43 && v47 == v42)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v33 = sub_1A9CE8BB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v33 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        v28 = v15;
        v29 = v14;
        v30 = v16;
        v32 = v43;
        v31 = v44;
        v27 = v42;
        if (v47)
          goto LABEL_34;
      }
LABEL_24:
      if (!v28)
      {
        if (v50)
        {
          swift_bridgeObjectRetain();
LABEL_33:
          if (v31)
            goto LABEL_34;
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      if (!v50)
      {
        if (v30)
        {
LABEL_34:
          swift_bridgeObjectRelease();
LABEL_43:
          sub_1A9BFC6A4(v32, v27, v48);
          sub_1A9BFC6A4(v45, v31, v50);
          swift_bridgeObjectRelease();
          sub_1A9BFC6A4(v46, v47, v49);
          sub_1A9BFC6A4(v29, v30, v28);
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_36:
        sub_1A9BFC6A4(v32, v27, v48);
        v34 = v45;
        v35 = v31;
        goto LABEL_37;
      }
      swift_bridgeObjectRetain();
      if (!v30)
        goto LABEL_33;
      if (!v31)
        goto LABEL_34;
      if (v29 == v45 && v30 == v31)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A9BFC6A4(v32, v27, v48);
        v34 = v29;
        v35 = v30;
LABEL_37:
        sub_1A9BFC6A4(v34, v35, v50);
        swift_bridgeObjectRelease();
        sub_1A9BFC6A4(v46, v47, v49);
        sub_1A9BFC6A4(v29, v30, v28);
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v37 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A9BFC6A4(v32, v27, v48);
      sub_1A9BFC6A4(v45, v31, v50);
      swift_bridgeObjectRelease();
      sub_1A9BFC6A4(v46, v47, v49);
      sub_1A9BFC6A4(v29, v30, v28);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
        return 0;
LABEL_38:
      v3 = v41 + 1;
      result = 1;
      v5 = v38;
      v4 = v39;
      if (v41 + 1 == v40)
        return result;
    }
    v28 = v15;
    v29 = v14;
    v30 = v16;
    v32 = v43;
    v31 = v44;
    v27 = v42;
    if (!v48)
      goto LABEL_24;
    swift_bridgeObjectRetain();
LABEL_19:
    if (v27)
      goto LABEL_34;
    goto LABEL_24;
  }
  return 1;
}

uint64_t sub_1A9BFBDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int128 v8;
  char v9;
  BOOL v11;
  _OWORD v13[2];
  uint64_t v14;
  __int16 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v9 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = a1 + 73;
      v5 = a2 + 73;
      do
      {
        v6 = *(_QWORD *)(v4 - 9);
        v7 = *(_WORD *)(v4 - 1);
        v8 = *(_OWORD *)(v4 - 25);
        v13[0] = *(_OWORD *)(v4 - 41);
        v13[1] = v8;
        v14 = v6;
        v15 = v7;
        _s13SleepHealthUI11SectionItemO2eeoiySbAC_ACtFZ_0((uint64_t)v13);
        v11 = v3-- != 0;
        if ((v9 & 1) == 0)
          break;
        v4 += 48;
        v5 += 48;
      }
      while (v11);
    }
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_1A9BFBEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD v17[2];

  v4 = type metadata accessor for SleepStageSegment(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)v17 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (v13 && a1 != a2)
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17[1] = *(_QWORD *)(v10 + 72);
      v17[0] = a1;
      sub_1A9BA6F90(a1 + v14, (uint64_t)v17 - v11, type metadata accessor for SleepStageSegment);
      sub_1A9BA6F90(a2 + v14, (uint64_t)v8, type metadata accessor for SleepStageSegment);
      __asm { BR              X10 }
    }
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1A9BFC1B8(uint64_t *a1, uint64_t *a2)
{
  return sub_1A9BFA824(*a1, *a2);
}

__n128 SectionsViewModel.init(section:)@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v6 = (__n128)a1[2];
  v3 = *((_QWORD *)a1 + 6);
  sub_1A9B94CA0(0, &qword_1EEB446F0, (uint64_t)&type metadata for SectionContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CEB520;
  *(_OWORD *)(v4 + 32) = v8;
  result = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(__n128 *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 80) = v3;
  *a2 = v4;
  return result;
}

double SectionsViewModel.init(sectionItem:headerText:footerText:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  __int16 v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];
  uint64_t v23;

  v20 = a1[1];
  v21 = *a1;
  v11 = *((_QWORD *)a1 + 4);
  v12 = *((_WORD *)a1 + 20);
  v13 = MEMORY[0x1E0DED1E8];
  sub_1A9B94CA0(0, &qword_1EEB446F0, (uint64_t)&type metadata for SectionContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A9CEB520;
  sub_1A9B94CA0(0, &qword_1EEB446F8, (uint64_t)&type metadata for SectionItem, (uint64_t (*)(_QWORD, uint64_t))v13);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1A9CEB520;
  *(_OWORD *)(v15 + 32) = v21;
  *(_OWORD *)(v15 + 48) = v20;
  *(_QWORD *)(v15 + 64) = v11;
  *(_WORD *)(v15 + 72) = v12;
  sub_1A9BF9D90(v15, a2, a3, a4, a5, (uint64_t *)v22);
  v16 = v23;
  result = *(double *)v22;
  v18 = v22[1];
  v19 = v22[2];
  *(_OWORD *)(v14 + 32) = v22[0];
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 80) = v16;
  *a6 = v14;
  return result;
}

uint64_t SectionContent.view.getter()
{
  sub_1A9B94CA0(0, &qword_1EEB45C68, (uint64_t)&type metadata for SectionItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9B92F34(0, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
  sub_1A9BFC838();
  sub_1A9BFC898();
  sub_1A9BFCC68();
  swift_bridgeObjectRetain();
  return sub_1A9CE7F5C();
}

uint64_t sub_1A9BFC454(__int128 *a1)
{
  __int128 v2[3];

  sub_1A9C01B80(a1, v2);
  sub_1A9C01B98((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C00150);
  sub_1A9BFEA64(v2);
  return sub_1A9C01B98((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A9C000DC);
}

uint64_t SectionContent.header.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + 16);
  if (result)
    result = swift_retain();
  *a1 = result;
  return result;
}

uint64_t SectionContent.footer.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + 40);
  if (result)
    result = swift_retain();
  *a1 = result;
  return result;
}

uint64_t SectionContent.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A9BFC50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v12 = v11;
  v13 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  swift_bridgeObjectRetain();
  v13(a2, a3);
  swift_getAssociatedConformanceWitness();
  v14 = sub_1A9CE7ED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v14;
  return swift_bridgeObjectRelease();
}

double SectionContent.init(items:headerText:footerText:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  _OWORD v11[3];
  uint64_t v12;

  sub_1A9BF9D90(a1, a2, a3, a4, a5, (uint64_t *)v11);
  v7 = v12;
  result = *(double *)v11;
  v9 = v11[1];
  v10 = v11[2];
  *(_OWORD *)a6 = v11[0];
  *(_OWORD *)(a6 + 16) = v9;
  *(_OWORD *)(a6 + 32) = v10;
  *(_QWORD *)(a6 + 48) = v7;
  return result;
}

uint64_t sub_1A9BFC674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1A9BFC6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1A9BFC6D4(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB45C78, (uint64_t (*)(uint64_t))sub_1A9BFC6F8, (uint64_t (*)(uint64_t))sub_1A9BFC7A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
}

void sub_1A9BFC6F8()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EEB45C80)
  {
    v0 = MEMORY[0x1E0CDB880];
    sub_1A9BAAB64(255, &qword_1EEB45C88, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    sub_1A9BAAB64(255, &qword_1EEB45C90, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v0);
    v1 = sub_1A9CE74F4();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EEB45C80);
  }
}

void sub_1A9BFC7A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45C98)
  {
    sub_1A9BFC800(255);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45C98);
  }
}

void sub_1A9BFC800(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB45CA0, (uint64_t (*)(uint64_t))sub_1A9BFC81C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1A9BFC81C(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB45CA8, (uint64_t (*)(uint64_t))type metadata accessor for SleepActivityConfigurationModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1A9BFC838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45CB0;
  if (!qword_1EEB45CB0)
  {
    sub_1A9B94CA0(255, &qword_1EEB45C68, (uint64_t)&type metadata for SectionItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45CB0);
  }
  return result;
}

unint64_t sub_1A9BFC898()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB45CB8;
  if (!qword_1EEB45CB8)
  {
    sub_1A9B92F34(255, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
    v2 = v1;
    v3 = sub_1A9BFC954(&qword_1EEB45CC0, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, sub_1A9BFC930, sub_1A9BFCBE4);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDF690], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45CB8);
  }
  return result;
}

uint64_t sub_1A9BFC930()
{
  return sub_1A9BFC954(&qword_1EEB45CC8, (uint64_t (*)(uint64_t))sub_1A9BFC6F8, (uint64_t (*)(void))sub_1A9BFC9C4, (uint64_t (*)(void))sub_1A9BFCAD4);
}

uint64_t sub_1A9BFC954(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9BFC9C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB45CD0;
  if (!qword_1EEB45CD0)
  {
    sub_1A9BAAB64(255, &qword_1EEB45C88, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9BFCA4C();
    v3[1] = sub_1A9BFCA90();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45CD0);
  }
  return result;
}

unint64_t sub_1A9BFCA4C()
{
  unint64_t result;

  result = qword_1EEB45CD8;
  if (!qword_1EEB45CD8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF4434, &type metadata for PromotionView);
    atomic_store(result, (unint64_t *)&qword_1EEB45CD8);
  }
  return result;
}

unint64_t sub_1A9BFCA90()
{
  unint64_t result;

  result = qword_1EEB45CE0;
  if (!qword_1EEB45CE0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepDeepLinkButton, &type metadata for SleepDeepLinkButton);
    atomic_store(result, (unint64_t *)&qword_1EEB45CE0);
  }
  return result;
}

unint64_t sub_1A9BFCAD4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB45CE8;
  if (!qword_1EEB45CE8)
  {
    sub_1A9BAAB64(255, &qword_1EEB45C90, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9BFCB5C();
    v3[1] = sub_1A9BFCBA0();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45CE8);
  }
  return result;
}

unint64_t sub_1A9BFCB5C()
{
  unint64_t result;

  result = qword_1EEB45CF0;
  if (!qword_1EEB45CF0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1554, &type metadata for EditScheduleButton);
    atomic_store(result, (unint64_t *)&qword_1EEB45CF0);
  }
  return result;
}

unint64_t sub_1A9BFCBA0()
{
  unint64_t result;

  result = qword_1EEB45CF8;
  if (!qword_1EEB45CF8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF74B4, &type metadata for TrailingDetailRow);
    atomic_store(result, (unint64_t *)&qword_1EEB45CF8);
  }
  return result;
}

uint64_t sub_1A9BFCBE4()
{
  return sub_1A9BC2784(&qword_1EEB45D00, (uint64_t (*)(uint64_t))sub_1A9BFC7A4, (uint64_t (*)(void))sub_1A9BFCC08, sub_1A9BFCC4C);
}

unint64_t sub_1A9BFCC08()
{
  unint64_t result;

  result = qword_1EEB45D08;
  if (!qword_1EEB45D08)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF16B4, &type metadata for NextScheduleRowView);
    atomic_store(result, (unint64_t *)&qword_1EEB45D08);
  }
  return result;
}

uint64_t sub_1A9BFCC4C()
{
  return sub_1A9B92B9C(&qword_1EEB45D10, (uint64_t (*)(uint64_t))sub_1A9BFC800, MEMORY[0x1E0CDCF80]);
}

unint64_t sub_1A9BFCC68()
{
  unint64_t result;

  result = qword_1EEB45D18;
  if (!qword_1EEB45D18)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SectionItem, &type metadata for SectionItem);
    atomic_store(result, (unint64_t *)&qword_1EEB45D18);
  }
  return result;
}

uint64_t SectionContent.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  swift_bridgeObjectRetain();
  sub_1A9BFF15C(a1, v7);
  swift_bridgeObjectRelease();
  if (v4)
    v8 = v3 == 0;
  else
    v8 = 1;
  if (v8)
  {
    sub_1A9CE8C64();
    swift_bridgeObjectRelease();
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    sub_1A9CE8C64();
    swift_bridgeObjectRetain();
    sub_1A9CE831C();
    swift_bridgeObjectRelease();
    if (!v6)
      goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    sub_1A9CE8C64();
    return swift_bridgeObjectRelease();
  }
  sub_1A9CE8C64();
  swift_bridgeObjectRetain();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t SectionContent.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_1A9CE8C4C();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BFCE04()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_1A9CE8C4C();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BFCE60()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 6);
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  v7 = v0[2];
  v8 = v1;
  sub_1A9CE8C4C();
  SectionContent.hash(into:)((uint64_t)v4);
  return sub_1A9CE8C7C();
}

uint64_t SectionContent.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain_n();
    __asm { BR              X8 }
  }
  return 0;
}

void SectionItem.id.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1A9BFD200()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[12];

  v3 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 40);
  strcpy((char *)v8, "promotion - ");
  sub_1A9C00150(v0, v5, v4, v3, v2, v6, 0);
  swift_bridgeObjectRetain();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9C000DC(v0, v5, v4, v3, v2, v6, 0);
  return v8[0];
}

uint64_t sub_1A9BFD3CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SectionContent.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t AnyTextProvider.stringRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyTextProvider.stringRepresentation.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AnyTextProvider.stringRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t AnyTextProvider.text.getter()
{
  return swift_retain();
}

uint64_t AnyTextProvider.text.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AnyTextProvider.text.modify())()
{
  return nullsub_1;
}

uint64_t sub_1A9BFD4A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t sub_1A9BFD4AC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StaticTextProvider.text.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (*(_QWORD *)(v1 + 8))
  {
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    result = sub_1A9CE79C8();
    v7 = v6 & 1;
  }
  else
  {
    result = 0;
    v4 = 0;
    v7 = 0;
    v5 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v5;
  return result;
}

uint64_t StaticTextProvider.stringRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9BFD584@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (*(_QWORD *)(v1 + 8))
  {
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    result = sub_1A9CE79C8();
    v7 = v6 & 1;
  }
  else
  {
    result = 0;
    v4 = 0;
    v7 = 0;
    v5 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v5;
  return result;
}

uint64_t sub_1A9BFD604@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;

  v2 = v1;
  v77 = a1;
  v3 = sub_1A9CE75B4();
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v76 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE73D4();
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v73 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v67 = *(_QWORD *)(v9 - 8);
  v68 = v10;
  MEMORY[0x1E0C80A78](v9, v11);
  v64 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A9CE7050();
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v65 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A9CE6150();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C0143C(0);
  v69 = v21;
  v66 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v24;
  sub_1A9C01824(0);
  v62 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C01864(0);
  v72 = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v63 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v2, v16);
  v32 = sub_1A9CE79BC();
  v34 = v33;
  v36 = v35;
  LODWORD(v17) = v37 & 1;
  v38 = *(int *)(v9 + 24);
  v39 = *(_BYTE *)(v2 + *(int *)(v9 + 20)) != 1;
  v61 = v2;
  v40 = *(_QWORD *)(v2 + v38 + 8);
  v80 = *(_BYTE *)(v2 + v38);
  v81 = v40;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DE8();
  sub_1A9C994A4(v39, v82, v83, v84, v32, v34, v17, v36, (uint64_t)v24);
  swift_release();
  swift_release();
  sub_1A9BAA670(v32, v34, v17);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v42 = v64;
  sub_1A9BA6F90(v2, v64, (uint64_t (*)(_QWORD))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
  v43 = *(unsigned __int8 *)(v67 + 80);
  v44 = (v43 + 16) & ~v43;
  v67 = v43 | 7;
  v68 += v44;
  v45 = swift_allocObject();
  sub_1A9C018B0(v42, v45 + v44);
  v46 = v65;
  sub_1A9CE7044();
  v47 = (uint64_t *)&v28[*(int *)(v62 + 36)];
  sub_1A9C01848(0);
  v49 = v70;
  v50 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))((char *)v47 + *(int *)(v48 + 28), v46, v71);
  *v47 = KeyPath;
  v51 = v66;
  v52 = v60;
  v53 = v69;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v28, v60, v69);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  v54 = v73;
  sub_1A9CE73C8();
  sub_1A9C01944();
  v55 = (uint64_t)v63;
  sub_1A9CE7B6C();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v75);
  sub_1A9B97190((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1A9C01824);
  sub_1A9BA6F90(v61, v42, (uint64_t (*)(_QWORD))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
  v56 = swift_allocObject();
  sub_1A9C018B0(v42, v56 + v44);
  v57 = v76;
  sub_1A9CE75A8();
  sub_1A9CE714C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v57, v79);
  return sub_1A9B97190(v55, (uint64_t (*)(_QWORD))sub_1A9C01864);
}

uint64_t sub_1A9BFDAEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_1A9CE7050();
  MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1A9CE7308();
}

void sub_1A9BFDB68(uint64_t a1)
{
  id v2;
  void *v3;
  unsigned int v4;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_healthAppHidden);

    if (v4)
    {
      type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
      sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
      sub_1A9CE7DDC();
    }
    else
    {
      DeepLinkOpener.open(url:completion:)(a1, 0, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1A9BFDC44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id *v16;
  id v17;
  id v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  sub_1A9C00238(0);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v23 - v8;
  v10 = sub_1A9CE6234();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  if (*(_BYTE *)(a1 + *(int *)(v15 + 20)))
  {
    v16 = (id *)MEMORY[0x1E0DA83A8];
    if (*(_BYTE *)(a1 + *(int *)(v15 + 20)) == 1)
      v16 = (id *)MEMORY[0x1E0DA83B0];
    v17 = *v16;
  }
  else
  {
    v17 = 0;
  }
  v18 = (id)HKSPSleepURL();

  if (!v18)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v6, 1, 1, v10);
    goto LABEL_11;
  }
  sub_1A9CE621C();

  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v19(v6, 0, 1, v10);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v20(v6, 1, v10) == 1)
  {
LABEL_11:
    sub_1A9B97190((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9C00238);
    v19(v9, 1, 1, v10);
    return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9C00238);
  }
  sub_1A9CE61F8();
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v6, v10);
  v19(v9, 0, 1, v10);
  if (v20(v9, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    sub_1A9BFDB68((uint64_t)v14);
    return ((uint64_t (*)(char *, uint64_t))v21)(v14, v10);
  }
  return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9C00238);
}

uint64_t SleepDeepLinkTextProvider.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v59 = a1;
  sub_1A9B95370(0, &qword_1EEB45D20, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E0CDDD78], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  v57 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v50 - v4;
  v58 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  MEMORY[0x1E0C80A78](v58, v6);
  v52 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE60FC();
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A9CE6108();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A9CE6120();
  MEMORY[0x1E0C80A78](v17, v18);
  sub_1A9C00238(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C00254(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1A9CE6150();
  v55 = *(_QWORD *)(v27 - 8);
  v56 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v51 = (char *)v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *v1;
  v60 = v1[1];
  v61 = v30;
  v31 = *((unsigned __int8 *)v1 + 16);
  if (v31 != 3)
  {
    v63 = v61;
    v64 = v60;
    v65 = v31;
    sub_1A9BFE3CC();
    if (v33)
    {
      v50[1] = v32;
      v34 = sub_1A9CE6234();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v22, 1, 1, v34);
      (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0CAF048], v12);
      (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v11, *MEMORY[0x1E0CAF020], v54);
      sub_1A9CE6114();
      sub_1A9CE6144();
      v36 = v55;
      v35 = v56;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v26, 0, 1, v56);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v26, 1, v35) != 1)
      {
        v45 = v51;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v51, v26, v35);
        v46 = (uint64_t)v52;
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v52, v45, v35);
        v47 = v58;
        v48 = v46 + *(int *)(v58 + 24);
        v62 = 0;
        sub_1A9CE7DC4();
        v49 = v64;
        *(_BYTE *)v48 = v63;
        *(_QWORD *)(v48 + 8) = v49;
        *(_BYTE *)(v46 + *(int *)(v47 + 20)) = v31;
        sub_1A9BA6F90(v46, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
        swift_storeEnumTagMultiPayload();
        sub_1A9B92B9C(&qword_1EEB45D28, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, (uint64_t)&unk_1A9CF00F0);
        sub_1A9CE74E8();
        sub_1A9B97190(v46, (uint64_t (*)(_QWORD))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v45, v35);
      }
      sub_1A9B97190((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1A9C00254);
    }
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v37 = (id)qword_1ED264F90;
  v38 = sub_1A9CE6168();
  v40 = v39;

  swift_bridgeObjectRelease();
  v63 = v38;
  v64 = v40;
  sub_1A9BA8EA4();
  *(_QWORD *)v5 = sub_1A9CE79C8();
  *((_QWORD *)v5 + 1) = v41;
  v5[16] = v42 & 1;
  *((_QWORD *)v5 + 3) = v43;
  swift_storeEnumTagMultiPayload();
  sub_1A9B92B9C(&qword_1EEB45D28, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, (uint64_t)&unk_1A9CF00F0);
  return sub_1A9CE74E8();
}

void sub_1A9BFE3CC()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A9C00238(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = sub_1A9CE6234();
  MEMORY[0x1E0C80A78](v3, v4);
  __asm { BR              X11 }
}

uint64_t sub_1A9BFE480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (id)*MEMORY[0x1E0DA83A8];
  swift_bridgeObjectRetain();
  v5 = (id)HKSPSleepURL();

  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v2, 1, 1, v0);
    goto LABEL_7;
  }
  sub_1A9CE621C();

  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v2, 0, 1, v0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v0) == 1)
  {
LABEL_7:
    sub_1A9B97190(v2, (uint64_t (*)(_QWORD))sub_1A9C00238);
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  v6 = sub_1A9CE6204();
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  swift_bridgeObjectRelease();
  if (qword_1ED2626A8 != -1)
    swift_once();
  v9 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1A9CEB520;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 64) = sub_1A9BDD3E4();
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v8;
  v11 = sub_1A9CE82BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t SleepDeepLinkTextProvider.stringRepresentation.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + 16) == 3)
  {
    if (qword_1ED2626A8 != -1)
      swift_once();
    v1 = (id)qword_1ED264F90;
    v2 = sub_1A9CE6168();

    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1A9BFE3CC();
    return v3;
  }
  return v2;
}

void sub_1A9BFE7E4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  SectionItem.id.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t SectionItem.hash(into:)()
{
  SectionItem.id.getter();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t SectionItem.hashValue.getter()
{
  sub_1A9CE8C4C();
  SectionItem.id.getter();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BFE8F4()
{
  sub_1A9CE8C4C();
  SectionItem.id.getter();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9BFE97C()
{
  SectionItem.id.getter();
  sub_1A9CE831C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9BFE9DC()
{
  sub_1A9CE8C4C();
  SectionItem.id.getter();
  sub_1A9CE831C();
  swift_bridgeObjectRelease();
  return sub_1A9CE8C7C();
}

void sub_1A9BFEA64(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  sub_1A9C01B80(a1, &v2);
  sub_1A9C01B80(a1, &v3);
  __asm { BR              X10 }
}

uint64_t sub_1A9BFEAC8()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  char v3;
  uint64_t (*v4)(void);
  _BYTE v6[136];
  _BYTE v7[72];
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v1 = *(_OWORD *)(v0 - 112);
  v2 = *(_QWORD *)(v0 - 96);
  v3 = *(_BYTE *)(v0 - 88);
  v8[0] = *(_OWORD *)(v0 - 128);
  v8[1] = v1;
  v9 = v2;
  v10 = v3;
  v11 = 0;
  sub_1A9BFCA4C();
  sub_1A9BFCA90();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A9CE74E8();
  sub_1A9C01C10((uint64_t)v6, (uint64_t)v8);
  v12 = 0;
  v4 = MEMORY[0x1E0CDB880];
  sub_1A9BAAB64(0, &qword_1EEB45C88, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  sub_1A9BAAB64(0, &qword_1EEB45C90, (uint64_t)&type metadata for EditScheduleButton, (uint64_t)&type metadata for TrailingDetailRow, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v4);
  sub_1A9BFC9C4();
  sub_1A9BFCAD4();
  sub_1A9CE74E8();
  sub_1A9C01C74((uint64_t)v6);
  sub_1A9BA6F90((uint64_t)v7, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1A9BFC6F8);
  v13 = 0;
  sub_1A9BFC6F8();
  sub_1A9BFC7A4();
  sub_1A9BFC930();
  sub_1A9BFCBE4();
  sub_1A9CE74E8();
  return sub_1A9B97190((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1A9BFC6F8);
}

uint64_t sub_1A9BFF15C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A9CE8C58();
  if (v3)
    __asm { BR              X8 }
  return result;
}

uint64_t sub_1A9BFF434(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for SleepStageSegment(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  result = sub_1A9CE8C58();
  if (v8)
  {
    sub_1A9BA6F90(a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v7, type metadata accessor for SleepStageSegment);
    __asm { BR              X9 }
  }
  return result;
}

void _s13SleepHealthUI11SectionItemO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1A9BFF650()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  char v42;
  _QWORD v43[5];
  char v44;

  v37 = v4;
  v36 = v1;
  v38 = v2;
  if (v11)
  {
    v13 = v7;
    v14 = v6;
    v15 = v0;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A9C00150(v12, v13, v40, v5, v8, v37, v11);
    sub_1A9C000DC(v38, v39, v36, v14, v15, v3, v10);
    sub_1A9C000DC(v12, v13, v40, v5, v8, v37, v11);
    v16 = 0;
  }
  else
  {
    v43[0] = v2;
    v43[1] = v9;
    v43[2] = v1;
    v43[3] = v6;
    v43[4] = v0;
    v44 = v3;
    v41[0] = v12;
    v41[1] = v7;
    v41[2] = v40;
    v41[3] = v5;
    v41[4] = v8;
    v42 = v4;
    v18 = v7;
    v19 = v1;
    v20 = v5;
    v32 = v7;
    v21 = v6;
    v35 = v6;
    v33 = v8;
    v34 = v5;
    v22 = v0;
    v23 = v8;
    v24 = v8;
    v25 = v4;
    v26 = v4;
    v27 = v2;
    sub_1A9C00150(v12, v18, v40, v20, v23, v25, 0);
    sub_1A9C00150(v27, v9, v19, v21, v22, v3, 0);
    v28 = v27;
    v29 = v9;
    v30 = v9;
    v31 = v19;
    sub_1A9C00150(v28, v29, v19, v21, v22, v3, 0);
    sub_1A9C00150(v12, v32, v40, v34, v24, v26, 0);
    v16 = _s13SleepHealthUI18PromotionViewModelV2eeoiySbAC_ACtFZ_0((uint64_t)v43, (uint64_t)v41);
    sub_1A9C000DC(v38, v30, v31, v35, v22, v3, 0);
    sub_1A9C000DC(v12, v32, v40, v34, v33, v37, 0);
    sub_1A9C000DC(v12, v32, v40, v34, v33, v37, 0);
    sub_1A9C000DC(v38, v39, v36, v35, v22, v3, 0);
  }
  return v16 & 1;
}

uint64_t _s13SleepHealthUI14SectionContentV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1[1];
  v3 = a1[3];
  v20 = *a1;
  v21 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  if ((sub_1A9BFBDEC(a1[6], a2[6]) & 1) == 0)
  {
    v14 = 0;
    return v14 & 1;
  }
  v18 = v3;
  v19 = v4;
  if (!v21)
  {
    v12 = v10;
    v13 = v5;
    if (!v8)
      goto LABEL_17;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  if (!v8)
  {
    v12 = v10;
    v13 = v5;
    if (!v2)
      goto LABEL_17;
LABEL_15:
    v14 = 0;
LABEL_32:
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  swift_bridgeObjectRetain();
  v12 = v10;
  v13 = v5;
  if (!v2)
  {
LABEL_12:
    if (v7)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_32;
    }
    goto LABEL_17;
  }
  if (!v7)
    goto LABEL_15;
  if (v20 == v6 && v2 == v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v15 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = 0;
  if ((v15 & 1) != 0)
  {
LABEL_17:
    if (v13)
    {
      swift_bridgeObjectRetain();
      if (v12)
      {
        v16 = v11;
        swift_bridgeObjectRetain();
        if (v19)
        {
          if (v11)
          {
            if (v18 == v9 && v19 == v11)
            {
              swift_bridgeObjectRelease();
              v14 = 1;
            }
            else
            {
              v14 = sub_1A9CE8BB0();
              swift_bridgeObjectRelease();
            }
            goto LABEL_32;
          }
          goto LABEL_29;
        }
LABEL_26:
        if (v16)
          goto LABEL_27;
        goto LABEL_30;
      }
      if (v19)
      {
LABEL_29:
        v14 = 0;
        goto LABEL_32;
      }
    }
    else if (v12)
    {
      v16 = v11;
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
LABEL_30:
    v14 = 1;
  }
  return v14 & 1;
}

void sub_1A9C000DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 2:
    case 4:

      break;
    default:
      return;
  }
}

id sub_1A9C00150(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_retain();
      swift_bridgeObjectRetain();
      result = (id)swift_bridgeObjectRetain();
      break;
    case 2:
    case 4:
      result = result;
      break;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText()
{
  uint64_t result;

  result = qword_1EEB45E50;
  if (!qword_1EEB45E50)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9C00238(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C00254(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB44BA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1A9C00274()
{
  unint64_t result;

  result = qword_1EEB45D30;
  if (!qword_1EEB45D30)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SectionContent, &type metadata for SectionContent);
    atomic_store(result, (unint64_t *)&qword_1EEB45D30);
  }
  return result;
}

uint64_t sub_1A9C002B8()
{
  return MEMORY[0x1E0CDFD08];
}

uint64_t sub_1A9C002C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C002D4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1A9C002E8()
{
  unint64_t result;

  result = qword_1EEB45DB0;
  if (!qword_1EEB45DB0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SectionItem, &type metadata for SectionItem);
    atomic_store(result, (unint64_t *)&qword_1EEB45DB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionsViewModel()
{
  return &type metadata for SectionsViewModel;
}

uint64_t destroy for SectionContent(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 40))
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
      goto LABEL_3;
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SectionContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1A9C005CC((uint64_t)a1);
      v5 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
  }
  v7 = a1 + 3;
  v8 = a2 + 3;
  v9 = a2[5];
  if (a1[5])
  {
    if (v9)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[5] = a2[5];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_1A9C005CC((uint64_t)(a1 + 3));
      v10 = a2[5];
      *v7 = *v8;
      a1[5] = v10;
    }
  }
  else if (v9)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v11 = *v8;
    a1[5] = a2[5];
    *v7 = v11;
  }
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A9C005CC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = v4;
      swift_release();
      goto LABEL_6;
    }
    sub_1A9C005CC(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    sub_1A9C005CC(a1 + 24);
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = v6;
  swift_release();
LABEL_11:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionContent()
{
  return &type metadata for SectionContent;
}

uint64_t destroy for AnyTextProvider()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s13SleepHealthUI15AnyTextProviderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AnyTextProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTextProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTextProvider()
{
  return &type metadata for AnyTextProvider;
}

uint64_t dispatch thunk of TextProvider.text.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TextProvider.stringRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

_QWORD *initializeBufferWithCopyOfBuffer for StaticTextProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StaticTextProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for StaticTextProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticTextProvider(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticTextProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticTextProvider()
{
  return &type metadata for StaticTextProvider;
}

uint64_t destroy for SleepDeepLinkTextProvider()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13SleepHealthUI25SleepDeepLinkTextProviderVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SleepDeepLinkTextProvider(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for SleepDeepLinkTextProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SleepDeepLinkTextProvider()
{
  return &type metadata for SleepDeepLinkTextProvider;
}

void destroy for SectionItem(uint64_t a1)
{
  sub_1A9C000DC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(_BYTE *)(a1 + 41));
}

uint64_t initializeWithCopy for SectionItem(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 41);
  v9 = *(unsigned __int8 *)(a2 + 40);
  sub_1A9C00150(*(id *)a2, v4, v5, v6, v7, v9, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for SectionItem(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 41);
  v9 = *(unsigned __int8 *)(a2 + 40);
  sub_1A9C00150(*(id *)a2, v4, v5, v6, v7, v9, v8);
  v10 = *(void **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v15 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  v16 = *(_BYTE *)(a1 + 41);
  *(_BYTE *)(a1 + 41) = v8;
  sub_1A9C000DC(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SectionItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_WORD *)(a2 + 40);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 41);
  v12 = *(unsigned __int8 *)(a1 + 40);
  *(_WORD *)(a1 + 40) = v4;
  sub_1A9C000DC(v5, v7, v6, v8, v9, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A9C00D18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_1A9C00D20(uint64_t result, char a2)
{
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SectionItem()
{
  return &type metadata for SectionItem;
}

unint64_t sub_1A9C00D3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEB45DB8;
  if (!qword_1EEB45DB8)
  {
    sub_1A9C00D9C();
    v2 = v1;
    v3 = sub_1A9BFC898();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDFEE8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45DB8);
  }
  return result;
}

void sub_1A9C00D9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45DC0)
  {
    sub_1A9B94CA0(255, &qword_1EEB45C68, (uint64_t)&type metadata for SectionItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9B92F34(255, &qword_1EEB45C70, (uint64_t (*)(uint64_t))sub_1A9BFC6D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF678]);
    sub_1A9BFC838();
    v0 = sub_1A9CE7F68();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45DC0);
  }
}

uint64_t sub_1A9C00E60()
{
  return sub_1A9C00EC8(&qword_1EEB45DC8, &qword_1EEB45DD0, MEMORY[0x1E0CDFD18], MEMORY[0x1E0CDFD08]);
}

uint64_t sub_1A9C00E94()
{
  return sub_1A9C00EC8(&qword_1EEB45DD8, &qword_1EEB45DE0, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58]);
}

uint64_t sub_1A9C00EC8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1A9B94CA0(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = a4;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0798], v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9C00F28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB45DE8;
  if (!qword_1EEB45DE8)
  {
    sub_1A9B95370(255, qword_1EEB45DF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, MEMORY[0x1E0CDDD78], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB45D28, (uint64_t (*)(uint64_t))type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText, (uint64_t)&unk_1A9CF00F0);
    v3[1] = MEMORY[0x1E0CDDD58];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45DE8);
  }
  return result;
}

_QWORD *sub_1A9C00FC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1A9CE6150();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1A9C01068(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_1A9C010B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1A9C01128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1A9C011B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1A9C01214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1A9C01290()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C0129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1A9CE6150();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1A9C01328()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C01334(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1A9CE6150();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_1A9C013B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A9CE6150();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1A9C0142C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C0143C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[8];

  if (!qword_1EEB45E90)
  {
    sub_1A9C01538(255);
    v3 = v2;
    v4 = MEMORY[0x1E0CDDD78];
    sub_1A9BAAB64(255, &qword_1EEB45ED0, MEMORY[0x1E0CDDD78], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v6 = v5;
    v7 = sub_1A9BA8EA4();
    v8 = sub_1A9B92B9C((unint64_t *)&qword_1EEB45ED8, (uint64_t (*)(uint64_t))sub_1A9C01538, MEMORY[0x1E0CE0680]);
    v9 = sub_1A9C01758();
    v12[0] = v4;
    v12[1] = MEMORY[0x1E0DEA968];
    v12[2] = v3;
    v12[3] = v6;
    v12[4] = MEMORY[0x1E0CDDD58];
    v12[5] = v7;
    v12[6] = v8;
    v12[7] = v9;
    v10 = MEMORY[0x1AF420248](a1, v12, MEMORY[0x1E0CDEF18], 0);
    if (!v11)
      atomic_store(v10, (unint64_t *)&qword_1EEB45E90);
  }
}

void sub_1A9C01538(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB45E98, (uint64_t (*)(uint64_t))sub_1A9C01554, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C01554()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB45EA0)
  {
    sub_1A9B95370(255, (unint64_t *)&qword_1EEB45EA8, (uint64_t (*)(uint64_t))sub_1A9C015E0, (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1A9C016DC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB45EA0);
  }
}

void sub_1A9C015E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EEB45EB0)
  {
    sub_1A9BAAB64(255, &qword_1EEB45EB8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDFA38]);
    v5[0] = v2;
    v5[1] = sub_1A9C01674();
    v3 = MEMORY[0x1AF420248](a1, v5, MEMORY[0x1E0CDE5E8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEB45EB0);
  }
}

unint64_t sub_1A9C01674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45EC0;
  if (!qword_1EEB45EC0)
  {
    sub_1A9BAAB64(255, &qword_1EEB45EB8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDFA38]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDFA58], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45EC0);
  }
  return result;
}

void sub_1A9C016DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45EC8)
  {
    sub_1A9BAAB64(255, &qword_1EEB45EB8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDFA38]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45EC8);
  }
}

unint64_t sub_1A9C01758()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB45EE0;
  if (!qword_1EEB45EE0)
  {
    sub_1A9BAAB64(255, &qword_1EEB45ED0, MEMORY[0x1E0CDDD78], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3 = sub_1A9C017E0();
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB45EE0);
  }
  return result;
}

unint64_t sub_1A9C017E0()
{
  unint64_t result;

  result = qword_1EEB45EE8;
  if (!qword_1EEB45EE8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF2378, &type metadata for ClearTextCaseFromEnvironment);
    atomic_store(result, (unint64_t *)&qword_1EEB45EE8);
  }
  return result;
}

void sub_1A9C01824(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB45EF0, (uint64_t (*)(uint64_t))sub_1A9C0143C, (uint64_t (*)(uint64_t))sub_1A9C01848, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1A9C01848(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB45EF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1A9C01864(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB45F00, (uint64_t (*)(uint64_t))sub_1A9C01824, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

uint64_t sub_1A9C01888()
{
  return sub_1A9CE72FC();
}

uint64_t sub_1A9C018B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C018F4(uint64_t a1)
{
  type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText();
  sub_1A9BFDB68(a1);
  return sub_1A9CE7038();
}

unint64_t sub_1A9C01944()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[10];

  result = qword_1EEB45F08;
  if (!qword_1EEB45F08)
  {
    sub_1A9C01824(255);
    v2 = v1;
    sub_1A9C01538(255);
    v4 = v3;
    v5 = MEMORY[0x1E0CDDD78];
    sub_1A9BAAB64(255, &qword_1EEB45ED0, MEMORY[0x1E0CDDD78], (uint64_t)&type metadata for ClearTextCaseFromEnvironment, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v7 = v6;
    v8 = sub_1A9BA8EA4();
    v9 = sub_1A9B92B9C((unint64_t *)&qword_1EEB45ED8, (uint64_t (*)(uint64_t))sub_1A9C01538, MEMORY[0x1E0CE0680]);
    v10 = sub_1A9C01758();
    v11[2] = v5;
    v11[3] = MEMORY[0x1E0DEA968];
    v11[4] = v4;
    v11[5] = v7;
    v11[6] = MEMORY[0x1E0CDDD58];
    v11[7] = v8;
    v11[8] = v9;
    v11[9] = v10;
    v11[0] = swift_getOpaqueTypeConformance2();
    v11[1] = sub_1A9B92B9C(&qword_1EEB45F10, (uint64_t (*)(uint64_t))sub_1A9C01848, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v11);
    atomic_store(result, (unint64_t *)&qword_1EEB45F08);
  }
  return result;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText() - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = sub_1A9CE6150();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C01B00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepDeepLinkTextProvider.DeepLinkText() - 8) + 80);
  return sub_1A9BFDC44(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1A9C01B2C()
{
  unint64_t result;

  result = qword_1EEB47060;
  if (!qword_1EEB47060)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB47060);
  }
  return result;
}

_OWORD *sub_1A9C01B80(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(__int128 *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1A9C01B98(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
  return a1;
}

uint64_t sub_1A9C01BD4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SleepDeepLinkButton(a2, a1);
  return a2;
}

uint64_t sub_1A9C01C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BAAB64(0, &qword_1EEB45C88, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C01C74(uint64_t a1)
{
  uint64_t v2;

  sub_1A9BAAB64(0, &qword_1EEB45C88, (uint64_t)&type metadata for PromotionView, (uint64_t)&type metadata for SleepDeepLinkButton, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A9C01CD0(uint64_t a1)
{
  destroy for SleepDeepLinkButton(a1);
  return a1;
}

uint64_t sub_1A9C01D04(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1A9C01D18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A9C01D2C()
{
  return sub_1A9BC2784(&qword_1EEB45F20, (uint64_t (*)(uint64_t))sub_1A9C01864, (uint64_t (*)(void))sub_1A9C01944, sub_1A9BC15B8);
}

id static UIAlertController.createOccurrenceChangeAlert(calendar:occurrence:weekdays:changes:changeNextHandler:changeAllHandler:cancelHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock;
  uint64_t v46;
  void (*v47)(uint64_t, void *);
  void *v48;
  uint64_t v49;
  uint64_t v50;

  v15 = *a4;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v16 = sub_1A9CE6990();
  __swift_project_value_buffer(v16, (uint64_t)qword_1EEB49410);
  v17 = a2;
  v18 = sub_1A9CE6978();
  v19 = sub_1A9CE867C();
  if (os_log_type_enabled(v18, v19))
  {
    v42 = a5;
    v20 = swift_slowAlloc();
    v40 = (_QWORD *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    aBlock = v41;
    *(_DWORD *)v20 = 136446466;
    v21 = sub_1A9CE8D48();
    sub_1A9B91D6C(v21, v22, &aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2114;
    v23 = v17;
    sub_1A9CE888C();
    *v40 = v17;

    _os_log_impl(&dword_1A9B87000, v18, v19, "[%{public}s] creating action sheet for occurrence: %{public}@", (uint8_t *)v20, 0x16u);
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2627B0, (uint64_t (*)(uint64_t))sub_1A9BF000C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v40, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v41, -1, -1);
    v24 = v20;
    a5 = v42;
    MEMORY[0x1AF420344](v24, -1, -1);

  }
  else
  {

  }
  aBlock = v15;
  _sSo17UIAlertControllerC13SleepHealthUIE18changeAlertMessage8calendar10occurrence8weekdays7changesSS10Foundation8CalendarV_So27HKSPSleepScheduleOccurrenceCSo12HKSPWeekdaysVAC0pQ9EditModelC9ChangeSetVtFZ_0(a1, v17, a3, &aBlock);
  v25 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, 0, v25, 0);

  aBlock = v15;
  _sSo17UIAlertControllerC13SleepHealthUIE16changeNextAction10occurrence7changesSSSo27HKSPSleepScheduleOccurrenceC_AC0lM9EditModelC9ChangeSetVtFZ_0(v17, &aBlock);
  swift_retain();
  v27 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v49 = a5;
  v50 = a6;
  aBlock = MEMORY[0x1E0C809B0];
  v46 = 1107296256;
  v47 = sub_1A9C432C8;
  v48 = &block_descriptor_7;
  v28 = _Block_copy(&aBlock);
  swift_release();
  v29 = (void *)objc_opt_self();
  v30 = objc_msgSend(v29, sel_actionWithTitle_style_handler_, v27, 0, v28);
  _Block_release(v28);

  objc_msgSend(v26, sel_addAction_, v30);
  if (qword_1ED2626A8 != -1)
    swift_once();
  v31 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_retain();
  v32 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v49 = a7;
  v50 = a8;
  aBlock = MEMORY[0x1E0C809B0];
  v46 = 1107296256;
  v47 = sub_1A9C432C8;
  v48 = &block_descriptor_3;
  v33 = _Block_copy(&aBlock);
  swift_release();
  v34 = objc_msgSend(v29, sel_actionWithTitle_style_handler_, v32, 0, v33, 0xE000000000000000);
  _Block_release(v33);

  objc_msgSend(v26, sel_addAction_, v34);
  v35 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  sub_1A9C0344C(a9);
  v36 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (a9)
  {
    v49 = a9;
    v50 = a10;
    aBlock = MEMORY[0x1E0C809B0];
    v46 = 1107296256;
    v47 = sub_1A9C432C8;
    v48 = &block_descriptor_6;
    v37 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    v37 = 0;
  }
  v38 = objc_msgSend(v29, sel_actionWithTitle_style_handler_, v36, 1, v37, 0xE000000000000000);
  _Block_release(v37);

  objc_msgSend(v26, sel_addAction_, v38);
  return v26;
}

id sub_1A9C0235C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  uint64_t v41;
  uint64_t v42;

  v10 = *a1;
  if (qword_1EEB42E60 != -1)
    swift_once();
  v11 = sub_1A9CE6990();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EEB49410);
  v12 = a2;
  v13 = sub_1A9CE6978();
  v14 = sub_1A9CE867C();
  v35 = a5;
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = (_QWORD *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34 = a3;
    aBlock = v33;
    *(_DWORD *)v15 = 136446466;
    v17 = sub_1A9CE8D48();
    sub_1A9B91D6C(v17, v18, &aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2114;
    v19 = v10;
    v20 = v12;
    sub_1A9CE888C();
    *v16 = v12;

    v10 = v19;
    _os_log_impl(&dword_1A9B87000, v13, v14, "[%{public}s] creating issue alert occurrence: %{public}@", (uint8_t *)v15, 0x16u);
    sub_1A9B92F34(0, (unint64_t *)&qword_1ED2627B0, (uint64_t (*)(uint64_t))sub_1A9BF000C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v16, -1, -1);
    swift_arrayDestroy();
    a3 = v34;
    MEMORY[0x1AF420344](v33, -1, -1);
    MEMORY[0x1AF420344](v15, -1, -1);

  }
  else
  {

  }
  aBlock = v10;
  sub_1A9C0345C(&aBlock);
  v21 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, 0, v21, 1);

  if (qword_1ED2626A8 != -1)
    swift_once();
  v23 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_retain();
  v24 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v41 = a3;
  v42 = a4;
  aBlock = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = sub_1A9C432C8;
  v40 = &block_descriptor_9;
  v25 = _Block_copy(&aBlock);
  swift_release();
  v26 = (void *)objc_opt_self();
  v27 = objc_msgSend(v26, sel_actionWithTitle_style_handler_, v24, 0, v25, 0xE000000000000000);
  _Block_release(v25);

  objc_msgSend(v22, sel_addAction_, v27);
  v28 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  sub_1A9C0344C(v35);
  v29 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  if (v35)
  {
    v41 = v35;
    v42 = a6;
    aBlock = MEMORY[0x1E0C809B0];
    v38 = 1107296256;
    v39 = sub_1A9C432C8;
    v40 = &block_descriptor_12;
    v30 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    v30 = 0;
  }
  v31 = objc_msgSend(v26, sel_actionWithTitle_style_handler_, v29, 1, v30, 0xE000000000000000);
  _Block_release(v30);

  objc_msgSend(v22, sel_addAction_, v31);
  return v22;
}

uint64_t sub_1A9C02864(uint64_t a1)
{
  uint64_t v1;
  id v2;

  switch(a1)
  {
    case 1:
      if (qword_1ED2626A8 != -1)
        goto LABEL_18;
      goto LABEL_16;
    case 2:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_18;
    case 3:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_18;
    case 4:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_18;
    case 5:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_18;
    case 6:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_18;
    case 7:
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
LABEL_18:
      swift_once();
LABEL_16:
      v2 = (id)qword_1ED264F90;
      v1 = sub_1A9CE6168();

      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

uint64_t _sSo17UIAlertControllerC13SleepHealthUIE18changeAlertMessage8calendar10occurrence8weekdays7changesSS10Foundation8CalendarV_So27HKSPSleepScheduleOccurrenceCSo12HKSPWeekdaysVAC0pQ9EditModelC9ChangeSetVtFZ_0(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = sub_1A9CE6480();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a4;
  v14 = a3;
  if (v13 == 1)
  {
    v14 = a3;
    if (objc_msgSend(a2, sel_crossesDayBoundary))
      v14 = HKSPWeekdaysShiftBackOneDay();
  }
  if (v14 == *MEMORY[0x1E0DA8478])
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_16;
    goto LABEL_29;
  }
  if (!HKSPWeekdaysIsSingleDay())
  {
    v23 = (void *)sub_1A9CE63CC();
    v24 = HKSPWeekendDaysInCalendar();

    if (v14 == v24)
    {
      if (qword_1ED2626A8 == -1)
        goto LABEL_16;
      goto LABEL_29;
    }
    v25 = (void *)sub_1A9CE63CC();
    v26 = HKSPWeekdayDaysInCalendar();

    if (v14 == v26)
    {
      if (qword_1ED2626A8 == -1)
      {
LABEL_16:
        v27 = (id)qword_1ED264F90;
        v28 = sub_1A9CE6168();

        return v28;
      }
LABEL_29:
      swift_once();
      goto LABEL_16;
    }
    v29 = (void *)sub_1A9CE63CC();
    v30 = (id)HKSPDaysForWeekdaysInCalendar();

    sub_1A9CE6450();
    if (sub_1A9CE6468() != 2
      || (v31 = sub_1A9CE6474(), (v32 & 1) != 0)
      || (v33 = v31, v34 = sub_1A9CE645C(), (v35 & 1) != 0))
    {
      v58 = 0;
      v59 = 0;
      v42 = (void *)sub_1A9CE63CC();
      v43 = HKSPWeekdaysAreConsecutiveInCalendar();

      if (!v43)
      {
        if (qword_1ED2626A8 != -1)
          swift_once();
        v51 = (id)qword_1ED264F90;
        sub_1A9CE6168();

        sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = xmmword_1A9CEB520;
        v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
        objc_msgSend(v53, sel_setFormattingContext_, 2);
        v54 = NSDateFormatter.localizedCommaSeparatedList(using:calendar:useShortSymbols:)(v14, a1, 0);
        v56 = v55;

        *(_QWORD *)(v52 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v52 + 64) = sub_1A9BDD3E4();
        *(_QWORD *)(v52 + 32) = v54;
        *(_QWORD *)(v52 + 40) = v56;
        v50 = sub_1A9CE82BC();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      v57 = sub_1A9C02864(v59);
      v38 = v44;
      v39 = sub_1A9C02864(v58);
      v41 = v45;
      if (qword_1ED2626A8 == -1)
      {
LABEL_24:
        v46 = (id)qword_1ED264F90;
        sub_1A9CE6168();

        sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = xmmword_1A9CEB530;
        v48 = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v47 + 56) = MEMORY[0x1E0DEA968];
        v49 = sub_1A9BDD3E4();
        *(_QWORD *)(v47 + 32) = v57;
        *(_QWORD *)(v47 + 40) = v38;
        *(_QWORD *)(v47 + 96) = v48;
        *(_QWORD *)(v47 + 104) = v49;
        *(_QWORD *)(v47 + 64) = v49;
        *(_QWORD *)(v47 + 72) = v39;
        *(_QWORD *)(v47 + 80) = v41;
        v50 = sub_1A9CE82BC();
        swift_bridgeObjectRelease();
LABEL_28:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        return v50;
      }
    }
    else
    {
      v36 = v34;
      v57 = sub_1A9C02864(v33);
      v38 = v37;
      v39 = sub_1A9C02864(v36);
      v41 = v40;
      if (qword_1ED2626A8 == -1)
        goto LABEL_24;
    }
    swift_once();
    goto LABEL_24;
  }
  if (qword_1ED2626A8 != -1)
    swift_once();
  v15 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1A9CEB520;
  v17 = HKSPDayForWeekdays();
  v18 = sub_1A9C02864(v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v16 + 64) = sub_1A9BDD3E4();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  v21 = sub_1A9CE82BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t _sSo17UIAlertControllerC13SleepHealthUIE16changeNextAction10occurrence7changesSSSo27HKSPSleepScheduleOccurrenceC_AC0lM9EditModelC9ChangeSetVtFZ_0(void *a1, uint64_t *a2)
{
  uint64_t v2;
  id v3;
  unsigned int v4;
  id v5;
  uint64_t v6;

  v2 = *a2;
  if (*a2 == 1)
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_9;
    goto LABEL_10;
  }
  v3 = objc_msgSend(a1, sel_alarmConfiguration);
  v4 = objc_msgSend(v3, sel_isEnabled);

  if ((v2 & 4) == 0 && !v4)
  {
    if (qword_1ED2626A8 == -1)
      goto LABEL_9;
    goto LABEL_10;
  }
  if (qword_1ED2626A8 != -1)
LABEL_10:
    swift_once();
LABEL_9:
  v5 = (id)qword_1ED264F90;
  v6 = sub_1A9CE6168();

  return v6;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1A9C0344C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1A9C0345C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = 2;
  }
  else if ((v1 & 2) != 0)
  {
    v3 = 3;
  }
  else if ((v1 & 4) != 0)
  {
    v3 = 4;
  }
  else
  {
    if ((v1 & 8) == 0)
      return 0;
    v3 = 5;
  }
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB452D8, (uint64_t (*)(uint64_t))sub_1A9C01B2C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1A9CEB530;
  sub_1A9BEEED8(v3);
  v6 = v5;
  v8 = v7;
  v9 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
  v10 = sub_1A9BDD3E4();
  *(_QWORD *)(v4 + 64) = v10;
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  if (qword_1ED2626A8 != -1)
    swift_once();
  v11 = (id)qword_1ED264F90;
  v12 = sub_1A9CE6168();
  v14 = v13;

  *(_QWORD *)(v4 + 96) = v9;
  *(_QWORD *)(v4 + 104) = v10;
  *(_QWORD *)(v4 + 72) = v12;
  *(_QWORD *)(v4 + 80) = v14;
  v2 = sub_1A9CE82BC();
  swift_bridgeObjectRelease();
  return v2;
}

_QWORD *initializeBufferWithCopyOfBuffer for ListRowBackgroundColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ListRowBackgroundColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for ListRowBackgroundColor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowBackgroundColor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowBackgroundColor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowBackgroundColor()
{
  return &type metadata for ListRowBackgroundColor;
}

uint64_t sub_1A9C0376C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C0377C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v22)(char *, uint64_t, uint64_t);
  _QWORD v23[2];

  sub_1A9C039E8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BABD28(0, &qword_1EEB45F38, (uint64_t (*)(uint64_t))sub_1A9C03A84, v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v23 - v13;
  sub_1A9C03A84(0);
  v16 = v15;
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v23[1] = a2;
    swift_retain();
    v20 = sub_1A9CE7ED8();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v19, a1, v5);
    *(_QWORD *)&v19[*(int *)(v16 + 36)] = v20;
    sub_1A9C03BB8((uint64_t)v19, (uint64_t)v14);
    swift_storeEnumTagMultiPayload();
    sub_1A9C03B20();
    sub_1A9B92B9C(&qword_1EEB45F60, (uint64_t (*)(uint64_t))sub_1A9C039E8, MEMORY[0x1E0CDBF10]);
    sub_1A9CE74E8();
    return sub_1A9C03BFC((uint64_t)v19);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v22(v9, a1, v5);
    v22(v14, (uint64_t)v9, v5);
    swift_storeEnumTagMultiPayload();
    sub_1A9C03B20();
    sub_1A9B92B9C(&qword_1EEB45F60, (uint64_t (*)(uint64_t))sub_1A9C039E8, MEMORY[0x1E0CDBF10]);
    sub_1A9CE74E8();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_1A9C039C8()
{
  return sub_1A9CE6FCC();
}

uint64_t sub_1A9C039E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1A9C0377C(a1, *v1);
}

void sub_1A9C039E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45F28)
  {
    sub_1A9C03A40();
    v0 = sub_1A9CE7548();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45F28);
  }
}

unint64_t sub_1A9C03A40()
{
  unint64_t result;

  result = qword_1EEB45F30;
  if (!qword_1EEB45F30)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0198, &type metadata for ListRowBackgroundColor);
    atomic_store(result, (unint64_t *)&qword_1EEB45F30);
  }
  return result;
}

void sub_1A9C03A84(uint64_t a1)
{
  sub_1A9BABD28(a1, &qword_1EEB45F40, (uint64_t (*)(uint64_t))sub_1A9C039E8, (uint64_t (*)(uint64_t))sub_1A9C03AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1A9C03AA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45F48)
  {
    sub_1A9CE75F0();
    sub_1A9B92B9C(&qword_1EEB45F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDC800], MEMORY[0x1E0CDC7F8]);
    v0 = sub_1A9CE753C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45F48);
  }
}

unint64_t sub_1A9C03B20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB45F58;
  if (!qword_1EEB45F58)
  {
    sub_1A9C03A84(255);
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB45F60, (uint64_t (*)(uint64_t))sub_1A9C039E8, MEMORY[0x1E0CDBF10]);
    v3[1] = sub_1A9B92B9C((unint64_t *)&qword_1EEB45F68, (uint64_t (*)(uint64_t))sub_1A9C03AA8, MEMORY[0x1E0CDBEF0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45F58);
  }
  return result;
}

uint64_t sub_1A9C03BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C03A84(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C03BFC(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C03A84(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A9C03C3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB45F70;
  if (!qword_1EEB45F70)
  {
    sub_1A9BABD28(255, &qword_1EEB45F78, (uint64_t (*)(uint64_t))sub_1A9C03A84, (uint64_t (*)(uint64_t))sub_1A9C039E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1A9C03B20();
    v3[1] = sub_1A9B92B9C(&qword_1EEB45F60, (uint64_t (*)(uint64_t))sub_1A9C039E8, MEMORY[0x1E0CDBF10]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB45F70);
  }
  return result;
}

id HKSPSleepStore.settings.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v19[2];

  v19[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_getObjectType();
  v19[0] = 0;
  v1 = objc_msgSend(v0, sel_currentSleepSettingsWithError_, v19);
  if (v1)
  {
    v2 = v1;
    v3 = v19[0];
  }
  else
  {
    v4 = v19[0];
    v5 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    if (qword_1ED2628A0 != -1)
      swift_once();
    v6 = sub_1A9CE6990();
    __swift_project_value_buffer(v6, (uint64_t)qword_1ED262888);
    v7 = v5;
    v8 = v5;
    v9 = sub_1A9CE6978();
    v10 = sub_1A9CE8664();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = (void *)swift_slowAlloc();
      v19[0] = v12;
      *(_DWORD *)v11 = 136446466;
      v13 = sub_1A9CE8D48();
      sub_1A9B91D6C(v13, v14, (uint64_t *)v19);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      v15 = v5;
      sub_1A9BB15F4();
      v16 = sub_1A9CE82F8();
      sub_1A9B91D6C(v16, v17, (uint64_t *)v19);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v9, v10, "[%{public}s] Error retrieving current sleep settings: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v12, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);
    }
    else
    {

    }
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8588]), sel_init);

  }
  return v2;
}

id HKSPSleepStore.schedule.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  os_log_type_t type;
  void *v20;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_getObjectType();
  v21[0] = 0;
  v1 = objc_msgSend(v0, sel_currentSleepScheduleWithError_, v21);
  v2 = v21[0];
  if (v1)
  {
    v3 = v21[0];
  }
  else if (v21[0])
  {
    v5 = qword_1ED2628A0;
    v6 = v21[0];
    if (v5 != -1)
      swift_once();
    v7 = sub_1A9CE6990();
    __swift_project_value_buffer(v7, (uint64_t)qword_1ED262888);
    v8 = v6;
    v9 = sub_1A9CE6978();
    v10 = sub_1A9CE8664();
    if (os_log_type_enabled(v9, v10))
    {
      type = v10;
      v11 = swift_slowAlloc();
      v20 = (void *)swift_slowAlloc();
      v21[0] = v20;
      *(_DWORD *)v11 = 136446466;
      v12 = sub_1A9CE8D48();
      sub_1A9B91D6C(v12, v13, (uint64_t *)v21);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      v14 = v8;
      v15 = objc_msgSend(v14, sel_description);
      v16 = sub_1A9CE82E0();
      v18 = v17;

      sub_1A9B91D6C(v16, v18, (uint64_t *)v21);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v9, type, "[%{public}s] Error retrieving current sleep schedule: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v20, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);

    }
    else
    {

    }
  }

  return v1;
}

void HKSPSleepStore.applySettingsModifications(settingsModifications:completion:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t ObjectType;
  id v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD aBlock[6];
  void *v16;

  v5 = v4;
  ObjectType = swift_getObjectType();
  v10 = HKSPSleepStore.settings.getter();
  objc_msgSend(v10, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9C0463C();
  swift_dynamicCast();
  v11 = v16;
  a1(v16);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = ObjectType;
  aBlock[4] = sub_1A9C046A4;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9BE4D94;
  aBlock[3] = &block_descriptor_8;
  v13 = _Block_copy(aBlock);
  v14 = v11;
  sub_1A9C0344C(a3);
  swift_release();
  objc_msgSend(v5, sel_saveCurrentSleepSettings_completion_, v14, v13);
  _Block_release(v13);

}

void sub_1A9C0439C(char a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;

  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      v5 = a2;
    }
    else
    {
      sub_1A9C046C8();
      v5 = (id)swift_allocError();
    }
    v6 = a2;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v7 = sub_1A9CE6990();
    __swift_project_value_buffer(v7, (uint64_t)qword_1ED262888);
    v8 = v5;
    v9 = v5;
    v10 = sub_1A9CE6978();
    v11 = sub_1A9CE8664();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20 = v13;
      *(_DWORD *)v12 = 136446466;
      v14 = sub_1A9CE8D48();
      sub_1A9B91D6C(v14, v15, &v20);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v16 = v5;
      sub_1A9BB15F4();
      v17 = sub_1A9CE82F8();
      sub_1A9B91D6C(v17, v18, &v20);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Error saving sleep settings: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v13, -1, -1);
      MEMORY[0x1AF420344](v12, -1, -1);

      if (!a3)
        goto LABEL_14;
    }
    else
    {

      if (!a3)
      {
LABEL_14:

        return;
      }
    }
    v19 = v5;
    a3(v5, 1);

    goto LABEL_14;
  }
  if (a3)
    a3(0, 0);
}

unint64_t sub_1A9C0463C()
{
  unint64_t result;

  result = qword_1EEB45F80;
  if (!qword_1EEB45F80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB45F80);
  }
  return result;
}

uint64_t sub_1A9C04678()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

void sub_1A9C046A4(char a1, void *a2)
{
  uint64_t v2;

  sub_1A9C0439C(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t sub_1A9C046C8()
{
  unint64_t result;

  result = qword_1EEB45F88;
  if (!qword_1EEB45F88)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF01FC, &_s12UnknownErrorVN);
    atomic_store(result, (unint64_t *)&qword_1EEB45F88);
  }
  return result;
}

ValueMetadata *_s12UnknownErrorVMa()
{
  return &_s12UnknownErrorVN;
}

void DeepLinkOpener.open(url:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];

  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)sub_1A9CE6210();
    v8 = sub_1A9C04AE8();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a3;
    v11[4] = sub_1A9C04C3C;
    v11[5] = v9;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1107296256;
    v11[2] = sub_1A9C04A40;
    v11[3] = &block_descriptor_9;
    v10 = _Block_copy(v11);
    sub_1A9C0344C(a2);
    swift_release();
    objc_msgSend(v6, sel_openURL_configuration_completionHandler_, v7, v8, v10);
    _Block_release(v10);

  }
}

uint64_t sub_1A9C04840(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v7 = sub_1A9CE8070();
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A9CE8094();
  v11 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C04C74();
  v15 = (void *)sub_1A9CE870C();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a2;
  aBlock[4] = sub_1A9C04CE4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A9C0A74C;
  aBlock[3] = &block_descriptor_6_0;
  v17 = _Block_copy(aBlock);
  sub_1A9C0344C(a3);
  v18 = a2;
  swift_release();
  sub_1A9CE8088();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1A9C04D0C();
  sub_1A9B92F34(0, &qword_1EEB47E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9C04D54();
  sub_1A9CE8904();
  MEMORY[0x1AF41F348](0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v20);
}

uint64_t sub_1A9C04A40(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
    v5 = sub_1A9CE8214();
  else
    v5 = 0;
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1A9C04AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  DeepLinkOpener.open(url:completion:)(a1, a2, a3);
}

id sub_1A9C04AE8()
{
  id v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5938]), sel_init);
  sub_1A9B92F34(0, &qword_1EEB45F90, (uint64_t (*)(uint64_t))sub_1A9BC0F54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(inited + 32) = sub_1A9CE82E0();
  *(_QWORD *)(inited + 40) = v2;
  v3 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = sub_1A9CE82E0();
  *(_QWORD *)(inited + 88) = v4;
  *(_QWORD *)(inited + 120) = v3;
  *(_BYTE *)(inited + 96) = 1;
  sub_1A9BAC8D4(inited);
  v5 = (void *)sub_1A9CE8208();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setFrontBoardOptions_, v5);

  objc_msgSend(v0, sel_setSensitive_, 1);
  return v0;
}

uint64_t sub_1A9C04C10()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C04C3C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1A9C04840(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t dispatch thunk of DeepLinkOpening.open(url:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for DeepLinkOpener()
{
  return &type metadata for DeepLinkOpener;
}

unint64_t sub_1A9C04C74()
{
  unint64_t result;

  result = qword_1ED2625C0;
  if (!qword_1ED2625C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED2625C0);
  }
  return result;
}

uint64_t sub_1A9C04CB0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A9C04CE4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(*(_QWORD *)(v0 + 32));
  return result;
}

unint64_t sub_1A9C04D0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45820;
  if (!qword_1EEB45820)
  {
    v1 = sub_1A9CE8070();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45820);
  }
  return result;
}

unint64_t sub_1A9C04D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB45830;
  if (!qword_1EEB45830)
  {
    sub_1A9B92F34(255, &qword_1EEB47E30, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB45830);
  }
  return result;
}

uint64_t SleepOnboardingUserInfo.sleepDurationGoal.getter()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  uint64_t v3;

  swift_beginAccess();
  objc_msgSend(*(id *)(v0 + 40), sel_sleepDurationGoal);
  result = 0;
  if (v2 > 0.0)
  {
    objc_msgSend(*(id *)(v0 + 40), sel_sleepDurationGoal);
    return v3;
  }
  return result;
}

id SleepOnboardingUserInfo.isSleepModeEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return objc_msgSend(*(id *)(v0 + 48), sel_scheduledSleepMode);
}

id SleepOnboardingUserInfo.windDownDuration.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return objc_msgSend(*(id *)(v0 + 40), sel_windDownTime);
}

BOOL SleepOnboardingUserInfo.isWindDownEnabled.getter()
{
  uint64_t v0;
  double v1;

  swift_beginAccess();
  objc_msgSend(*(id *)(v0 + 40), sel_windDownTime);
  return v1 > 0.0;
}

BOOL static SleepOnboardingUserInfo.SleepScheduleType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepOnboardingUserInfo.SleepScheduleType.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t SleepOnboardingUserInfo.SleepScheduleType.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

id SleepOnboardingUserInfo.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;

  v2 = *(void **)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return v2;
}

void sub_1A9C04F8C(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

uint64_t (*sub_1A9C04FD0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_1A9C0500C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;
  v5 = v2;

}

id sub_1A9C05060()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 48);
}

void sub_1A9C05090(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;

}

uint64_t (*sub_1A9C050D4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_1A9C05110(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v2;
  v5 = v2;

}

void *sub_1A9C05164()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void sub_1A9C051A4(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;

}

uint64_t (*sub_1A9C051E8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A9C05224()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1A9C05254(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1A9C05290())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id SleepOnboardingUserInfo.gregorianCalendarCache.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 72);
}

uint64_t sub_1A9C052D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 80);
  return result;
}

uint64_t sub_1A9C05314(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 80) = v2;
  return result;
}

uint64_t (*sub_1A9C05350())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t SleepOnboardingUserInfo.onboardingManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B923D4(v1 + 88, a1);
}

uint64_t sub_1A9C05398()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t sub_1A9C053C8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 128) = a1;
  return result;
}

uint64_t (*sub_1A9C05404())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t SleepOnboardingUserInfo.__allocating_init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)(_QWORD *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  uint64_t v10;

  swift_allocObject();
  v10 = sub_1A9C05E68(a1, a2, a3, a4, a5);

  return v10;
}

uint64_t SleepOnboardingUserInfo.init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)(_QWORD *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  uint64_t v6;

  v6 = sub_1A9C05E68(a1, a2, a3, a4, a5);

  return v6;
}

id SleepOnboardingUserInfo.windDownDuration.setter(double a1)
{
  uint64_t v1;

  swift_beginAccess();
  return objc_msgSend(*(id *)(v1 + 40), sel_setWindDownTime_, a1);
}

BOOL sub_1A9C0552C()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 24) & 1) == 0;
}

id *SleepOnboardingUserInfo.deinit()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 11));
  return v0;
}

uint64_t SleepOnboardingUserInfo.__deallocating_deinit()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 11));
  return swift_deallocClassInstance();
}

id sub_1A9C055CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  id *v4;
  id result;
  double v6;
  double v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (id *)(*a1 + 40);
  swift_beginAccess();
  result = objc_msgSend(*(id *)(v3 + 40), sel_sleepDurationGoal);
  v7 = v6;
  v8 = 0;
  if (v7 > 0.0)
    result = objc_msgSend(*v4, sel_sleepDurationGoal, 0.0);
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v7 <= 0.0;
  return result;
}

id SleepOnboardingUserInfo.sleepDurationGoal.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
    *(double *)&a1 = 0.0;
  swift_beginAccess();
  return objc_msgSend(*(id *)(v2 + 40), sel_setSleepDurationGoal_, *(double *)&a1);
}

void (*SleepOnboardingUserInfo.sleepDurationGoal.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  double v4;
  double v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_sleepDurationGoal);
  v5 = v4;
  v6 = 0;
  if (v5 > 0.0)
    objc_msgSend(*(id *)(v1 + 40), sel_sleepDurationGoal, 0.0);
  v3[3] = v6;
  *((_BYTE *)v3 + 32) = v5 <= 0.0;
  return sub_1A9C05754;
}

void sub_1A9C05754(uint64_t a1)
{
  void *v1;
  double v2;

  v1 = *(void **)a1;
  v2 = *(double *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(*(_QWORD *)a1 + 32))
    v2 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 40), sel_setSleepDurationGoal_, v2);
  free(v1);
}

void (*SleepOnboardingUserInfo.windDownDuration.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_windDownTime);
  v3[3] = v4;
  return sub_1A9C05808;
}

void sub_1A9C05808(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 40), sel_setWindDownTime_, *(double *)(*(_QWORD *)a1 + 24));
  free(v1);
}

id SleepOnboardingUserInfo.isWindDownEnabled.setter(char a1)
{
  uint64_t v1;
  id *v2;
  id result;
  double v4;

  v2 = (id *)(v1 + 40);
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    result = objc_msgSend(*v2, sel_windDownTime);
    if (v4 == 0.0)
      return objc_msgSend(*v2, sel_setWindDownTime_, *MEMORY[0x1E0DA84A8] * 60.0);
  }
  else
  {
    swift_beginAccess();
    return objc_msgSend(*v2, sel_setWindDownTime_, 0.0);
  }
  return result;
}

void (*SleepOnboardingUserInfo.isWindDownEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  double v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  objc_msgSend(*(id *)(v1 + 40), sel_windDownTime);
  *((_BYTE *)v3 + 32) = v4 > 0.0;
  return sub_1A9C05954;
}

void sub_1A9C05954(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  void *v3;
  double v4;
  double v5;

  v1 = *(_QWORD **)a1;
  v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 32);
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 40);
  v4 = 0.0;
  if (!v2)
    goto LABEL_4;
  objc_msgSend(v3, sel_windDownTime, 0.0);
  if (v5 == 0.0)
  {
    v3 = *(void **)(v1[3] + 40);
    v4 = *MEMORY[0x1E0DA84A8] * 60.0;
LABEL_4:
    objc_msgSend(v3, sel_setWindDownTime_, v4);
  }
  free(v1);
}

void SleepOnboardingUserInfo.isSleepModeEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  swift_beginAccess();
  if ((a1 & 1) != 0)
    v3 = 0x4000;
  else
    v3 = 0;
  objc_msgSend(*(id *)(v1 + 48), sel_setScheduledSleepMode_, a1 & 1);
  v4 = *(id *)(v1 + 48);
  objc_msgSend(v4, sel_setSleepModeOptions_, (unint64_t)objc_msgSend(v4, sel_sleepModeOptions) & 0xFFFFFFFFFFFFBFFFLL | v3);

}

void (*SleepOnboardingUserInfo.isSleepModeEnabled.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = objc_msgSend(*(id *)(v1 + 48), sel_scheduledSleepMode);
  return sub_1A9C05AC4;
}

void sub_1A9C05AC4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  SleepOnboardingUserInfo.isSleepModeEnabled.setter(*(_BYTE *)(*(_QWORD *)a1 + 32));
  free(v1);
}

uint64_t SleepOnboardingUserInfo.hasWatch.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsSleepTracking.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsSleepStages.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsRespiratoryRate.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsWristTemperature.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2) & 1;
}

uint64_t SleepOnboardingUserInfo.watchSupportsHealthStatus.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[14];
  v2 = v0[15];
  __swift_project_boxed_opaque_existential_1Tm(v0 + 11, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 136))(v1, v2) & 1;
}

uint64_t sub_1A9C05CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2) & 1;
}

uint64_t sub_1A9C05CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2) & 1;
}

uint64_t sub_1A9C05D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2) & 1;
}

uint64_t sub_1A9C05D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2) & 1;
}

uint64_t sub_1A9C05DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2) & 1;
}

uint64_t sub_1A9C05E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(*(_QWORD *)v0 + 88), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 136))(v1, v2) & 1;
}

uint64_t sub_1A9C05E68(_QWORD *a1, uint64_t *a2, void *a3, char *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id *v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  id v33;
  id *v34;
  char v35;
  uint64_t v36;

  v6 = v5;
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = a2[2];
  v35 = *a4;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 1;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6360]), sel_init);
  *(_BYTE *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 72) = v13;
  *(_QWORD *)(v6 + 16) = v10;
  *(_BYTE *)(v6 + 24) = v11;
  *(_QWORD *)(v6 + 32) = v12;
  sub_1A9B923D4((uint64_t)a1, v6 + 88);
  if (a3)
    v14 = a3;
  else
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8568]), sel_init);
  v15 = a3;
  objc_msgSend(v14, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45698);
  swift_dynamicCast();
  *(_QWORD *)(v6 + 40) = v36;
  v16 = (id *)(v6 + 40);
  if (a5)
    v17 = a5;
  else
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8588]), sel_init);
  v18 = a5;
  objc_msgSend(v17, sel_mutableCopy);

  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45F80);
  swift_dynamicCast();
  *(_QWORD *)(v6 + 48) = v36;
  if (a3)
  {
    v19 = objc_msgSend(v15, sel_occurrences);
    sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
    v20 = sub_1A9CE83DC();

    if (v20 >> 62)
      goto LABEL_23;
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v21; v21 = sub_1A9CE8AC0())
    {
      v33 = v18;
      v34 = v16;
      v18 = (id)(v20 & 0xC000000000000001);
      v22 = 4;
      v16 = (id *)&selRef_animateWithDuration_animations_;
      while (1)
      {
        v23 = v18 ? (id)MEMORY[0x1AF41F600](v22 - 4, v20) : *(id *)(v20 + 8 * v22);
        v24 = v23;
        v25 = v22 - 3;
        if (__OFADD__(v22 - 4, 1))
          break;
        if ((objc_msgSend(v23, sel_isRepeating) & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          objc_msgSend(v24, sel_mutableCopy);

          sub_1A9CE88EC();
          swift_unknownObjectRelease();
          sub_1A9B94A18(0, (unint64_t *)&unk_1EEB4A1D0);
          if (swift_dynamicCast())
            v26 = v36;
          else
            v26 = 0;
          goto LABEL_21;
        }

        ++v22;
        if (v25 == v21)
        {
          swift_bridgeObjectRelease_n();
          v26 = 0;
LABEL_21:
          v18 = v33;
          v16 = v34;
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
  }
  v26 = 0;
LABEL_26:
  swift_beginAccess();
  v27 = *(void **)(v6 + 56);
  *(_QWORD *)(v6 + 56) = v26;

  *(_BYTE *)(v6 + 80) = v35;
  v28 = a1[3];
  v29 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 144))(v28, v29);
  swift_beginAccess();
  *(_BYTE *)(v6 + 128) = v30 & 1;
  if ((*(_BYTE *)(v6 + 24) & 1) == 0)
  {
    v31 = *MEMORY[0x1E0DA84A8] * 60.0;
    swift_beginAccess();
    objc_msgSend(*v16, sel_setWindDownTime_, v31);
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v6;
}

unint64_t sub_1A9C062B0()
{
  unint64_t result;

  result = qword_1EEB45F98;
  if (!qword_1EEB45F98)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for SleepOnboardingUserInfo.SleepScheduleType, &type metadata for SleepOnboardingUserInfo.SleepScheduleType);
    atomic_store(result, (unint64_t *)&qword_1EEB45F98);
  }
  return result;
}

id sub_1A9C062F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 40);
  *a2 = v4;
  return v4;
}

id sub_1A9C0633C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 48);
  *a2 = v4;
  return v4;
}

id sub_1A9C06384@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 56);
  *a2 = v4;
  return v4;
}

uint64_t sub_1A9C063CC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 64);
  return result;
}

uint64_t sub_1A9C06410(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 64) = v2;
  return result;
}

uint64_t sub_1A9C06450@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 80);
  return result;
}

uint64_t sub_1A9C06494(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 80) = v2;
  return result;
}

uint64_t sub_1A9C064D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 128);
  return result;
}

uint64_t sub_1A9C06518(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 128) = v2;
  return result;
}

id sub_1A9C0655C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double v3;

  v2 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 = 0.0;
  else
    v3 = *(double *)a1;
  swift_beginAccess();
  return objc_msgSend(*(id *)(v2 + 40), sel_setSleepDurationGoal_, v3);
}

id sub_1A9C065C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id result;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  result = objc_msgSend(*(id *)(v3 + 40), sel_windDownTime);
  *a2 = v5;
  return result;
}

id sub_1A9C06614(double *a1, uint64_t *a2)
{
  double v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  return objc_msgSend(*(id *)(v3 + 40), sel_setWindDownTime_, v2);
}

id sub_1A9C0666C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  id result;
  double v5;

  v3 = *a1;
  swift_beginAccess();
  result = objc_msgSend(*(id *)(v3 + 40), sel_windDownTime);
  *a2 = v5 > 0.0;
  return result;
}

id sub_1A9C066C4(char *a1)
{
  return SleepOnboardingUserInfo.isWindDownEnabled.setter(*a1);
}

id sub_1A9C066E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  id result;

  v3 = *a1;
  swift_beginAccess();
  result = objc_msgSend(*(id *)(v3 + 48), sel_scheduledSleepMode);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1A9C06738(char *a1)
{
  SleepOnboardingUserInfo.isSleepModeEnabled.setter(*a1);
}

uint64_t type metadata accessor for SleepOnboardingUserInfo()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepOnboardingUserInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSchedule.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepSettings.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.suggestedSleepScheduleOccurrence.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.requestNotificationAuthorization.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.sleepScheduleType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.healthStatusEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.__allocating_init(onboardingManager:onboardingContext:sleepSchedule:sleepScheduleType:sleepSettings:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of SleepOnboardingUserInfo.isFullOnboardingFlow.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t storeEnumTagSinglePayload for SleepOnboardingUserInfo.SleepScheduleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A9C068C0 + 4 * byte_1A9CF0275[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A9C068F4 + 4 * asc_1A9CF0270[v4]))();
}

uint64_t sub_1A9C068F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C068FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C06904);
  return result;
}

uint64_t sub_1A9C06910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C06918);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A9C0691C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C06924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepOnboardingUserInfo.SleepScheduleType()
{
  return &type metadata for SleepOnboardingUserInfo.SleepScheduleType;
}

id sub_1A9C06940(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  __int128 aBlock;
  id (*v61)(uint64_t, void *);
  void *v62;
  id (*v63)(void *);
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[4];

  v56 = a7;
  v57 = a1;
  v58 = a5;
  v59 = a6;
  v12 = sub_1A9CE64E0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED262DB8 != -1)
    swift_once();
  v17 = sub_1A9CE6990();
  v18 = __swift_project_value_buffer(v17, (uint64_t)qword_1ED2630B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  swift_bridgeObjectRetain_n();
  v19 = sub_1A9CE6978();
  v20 = sub_1A9CE867C();
  v21 = os_log_type_enabled(v19, v20);
  v55 = a8;
  if (v21)
  {
    v22 = swift_slowAlloc();
    v53 = v18;
    v23 = v22;
    v52 = swift_slowAlloc();
    *(_QWORD *)&aBlock = v52;
    *(_DWORD *)v23 = 136446722;
    v24 = sub_1A9CE8D48();
    v54 = a4;
    v66[0] = sub_1A9B91D6C(v24, v25, (uint64_t *)&aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    sub_1A9C075DC();
    v26 = sub_1A9CE8B74();
    v66[0] = sub_1A9B91D6C(v26, v27, (uint64_t *)&aBlock);
    a4 = v54;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    *(_WORD *)(v23 + 22) = 2080;
    swift_bridgeObjectRetain();
    v66[0] = sub_1A9B91D6C(a3, a4, (uint64_t *)&aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A9B87000, v19, v20, "[%{public}s] Cell provider called for indexPath %s itemIdentifier %s", (uint8_t *)v23, 0x20u);
    v28 = v52;
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v28, -1, -1);
    MEMORY[0x1AF420344](v23, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

    swift_bridgeObjectRelease_n();
  }
  swift_getObjectType();
  sub_1A9CE67B0();
  if (v62)
  {
    v29 = a3;
    sub_1A9B949B8(&aBlock, (uint64_t)v66);
    __swift_project_boxed_opaque_existential_1Tm(v66, v66[3]);
    sub_1A9CE6738();
    v30 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v57, sel_dequeueReusableCellWithIdentifier_, v30);

    if (v31)
    {
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v32 = v31;
      else
        v32 = 0;
      if (v32)
      {
        swift_getObjectType();
        sub_1A9B923D4((uint64_t)v66, (uint64_t)&aBlock);
        v33 = v31;
        sub_1A9CE67C8();

      }
      if (v56)
      {
        objc_msgSend(v31, sel_setBackgroundColor_);
      }
      else
      {
        if (objc_msgSend(v57, sel_style) == (id)2)
        {
          v38 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
          v63 = sub_1A9C219C0;
          v64 = 0;
          *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v61 = sub_1A9C21C90;
          v62 = &block_descriptor_10;
          v39 = _Block_copy(&aBlock);
          v40 = v31;
          v41 = objc_msgSend(v38, sel_initWithDynamicProvider_, v39);
          _Block_release(v39);
          swift_release();
          objc_msgSend(v40, sel_setBackgroundColor_, v41);

        }
        else
        {
          v42 = (void *)objc_opt_self();
          v43 = v31;
          v41 = objc_msgSend(v42, sel_systemBackgroundColor);
          objc_msgSend(v43, sel_setBackgroundColor_, v41);

        }
      }
    }
    else if (!v56)
    {
      objc_msgSend(v57, sel_style);
    }
    swift_bridgeObjectRetain_n();
    v44 = sub_1A9CE6978();
    v45 = sub_1A9CE867C();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v47;
      *(_DWORD *)v46 = 136446466;
      v48 = sub_1A9CE8D48();
      v65 = sub_1A9B91D6C(v48, v49, (uint64_t *)&aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain();
      v65 = sub_1A9B91D6C(v29, a4, (uint64_t *)&aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A9B87000, v44, v45, "[%{public}s] Returning cell for item %s", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v47, -1, -1);
      MEMORY[0x1AF420344](v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
  }
  else
  {
    sub_1A9BCA260((uint64_t)&aBlock);
    swift_bridgeObjectRetain_n();
    v34 = sub_1A9CE6978();
    v35 = sub_1A9CE867C();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v37;
      *(_DWORD *)v36 = 136446210;
      swift_bridgeObjectRetain();
      v66[0] = sub_1A9B91D6C(a3, a4, (uint64_t *)&aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A9B87000, v34, v35, "The CellProvider block called us back with an item that no longer exists. Item Identifier: %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v37, -1, -1);
      MEMORY[0x1AF420344](v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D50]), sel_init);
  }
  return v31;
}

uint64_t sub_1A9C070F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = *v0;
  sub_1A9C07624();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v0 + 49) = 1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v9 = sub_1A9CE6990();
  __swift_project_value_buffer(v9, (uint64_t)qword_1ED2630B8);
  v10 = sub_1A9CE6978();
  v11 = sub_1A9CE867C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21 = v4;
    v14 = v13;
    v23 = v13;
    v20 = v5;
    *(_DWORD *)v12 = 136446210;
    v15 = sub_1A9CE8D48();
    v22 = sub_1A9B91D6C(v15, v16, &v23);
    v5 = v20;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v10, v11, "[%{public}s] Applying diffable snapshot", v12, 0xCu);
    swift_arrayDestroy();
    v17 = v14;
    v4 = v21;
    MEMORY[0x1AF420344](v17, -1, -1);
    MEMORY[0x1AF420344](v12, -1, -1);
  }

  *((_BYTE *)v1 + 50) = *((_BYTE *)v1 + 48);
  swift_getObjectType();
  sub_1A9CE67BC();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v1;
  *(_QWORD *)(v18 + 24) = v2;
  swift_retain();
  sub_1A9CE6A8C();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1A9C07340(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, &v9);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Finished applying snapshot", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  *(_BYTE *)(a1 + 50) = 0;
}

uint64_t sub_1A9C074BC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SleepDiffableTableViewAdaptor()
{
  return objc_opt_self();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t sub_1A9C075DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46260;
  if (!qword_1EEB46260)
  {
    v1 = sub_1A9CE64E0();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CB1698], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46260);
  }
  return result;
}

void sub_1A9C07624()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB44150)
  {
    v0 = sub_1A9CE6A5C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB44150);
  }
}

uint64_t sub_1A9C07688()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9C076AC()
{
  uint64_t v0;

  sub_1A9C07340(*(_QWORD *)(v0 + 16));
}

uint64_t dispatch thunk of ScheduleOccurrenceEditModelConsuming.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id SleepOnboardingManager.analyticsManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id SleepOnboardingManager.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t SleepOnboardingManager.notificationManager.getter()
{
  return swift_retain();
}

uint64_t SleepOnboardingManager.sleepActionsStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SleepOnboardingManager.sleepCoachingStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SleepOnboardingManager.sleepTrackingStore.getter()
{
  return swift_unknownObjectRetain();
}

id SleepOnboardingManager.sleepStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

uint64_t SleepOnboardingManager.sleepScheduleProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B923D4(v1 + 72, a1);
}

uint64_t SleepOnboardingManager.sleepSettingsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9B923D4(v1 + 112, a1);
}

_QWORD *SleepOnboardingManager.__allocating_init(sleepStore:healthStore:)(void *a1, void *a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  type metadata accessor for HealthStatusFeatureProvider();
  v4 = (_QWORD *)swift_allocObject();
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB50A8], a2);
  v6 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB46270);
  v7 = MEMORY[0x1E0D2C1E8];
  v4[5] = v6;
  v4[6] = v7;
  v4[2] = v5;
  sub_1A9CE66E4();
  v4[7] = sub_1A9CE66D8();
  type metadata accessor for SleepOnboardingManager();
  v8 = (_QWORD *)swift_allocObject();
  v9 = sub_1A9C0C290(a1, a2, (uint64_t)v4, v8);

  return v9;
}

_QWORD *SleepOnboardingManager.__allocating_init(sleepStore:healthStore:healthStatusFeatureProvider:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  v10 = sub_1A9C0C75C(a1, a2, v9, v3, v7, v8);

  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v10;
}

_QWORD *SleepOnboardingManager.init(sleepStore:healthStore:healthStatusFeatureProvider:)(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x1E0C80A78](v9, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = sub_1A9C0C4F0(a1, a2, (uint64_t)v11, v3, v7, v8);

  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v13;
}

id sub_1A9C07950()
{
  return sub_1A9C081EC((SEL *)&selRef_hksp_hasActivePairedDevice);
}

id sub_1A9C0795C()
{
  id v0;
  void *v1;
  id v2;
  id v3;

  sub_1A9CE82E0();
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, sel_BOOLForKey_, *MEMORY[0x1E0CB7540]);

  return v3;
}

uint64_t sub_1A9C07A0C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  id v11;
  void *v12;
  id v13;
  unsigned int v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  id v37[2];

  v37[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 56);
  v37[0] = 0;
  v2 = objc_msgSend(v1, sel_isFeatureCapabilitySupportedOnActivePairedDeviceWithError_, v37);
  v3 = v37[0];
  if (v2
    && (v4 = v2,
        v5 = v37[0],
        v6 = objc_msgSend(v4, sel_BOOLValue),
        v4,
        v37[0] = 0,
        v7 = objc_msgSend(v1, sel_isCurrentOnboardingVersionCompletedWithError_, v37),
        v3 = v37[0],
        v7))
  {
    v8 = v7;
    v9 = v37[0];
    v10 = objc_msgSend(v8, sel_BOOLValue);

    sub_1A9CE82E0();
    v11 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    v12 = (void *)sub_1A9CE82B0();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

    if (v13)
    {
      v14 = objc_msgSend(v13, sel_BOOLForKey_, *MEMORY[0x1E0CB7540]);

    }
    else
    {
      v14 = 0;
    }
    if (qword_1ED262DB8 != -1)
      swift_once();
    v29 = sub_1A9CE6990();
    __swift_project_value_buffer(v29, (uint64_t)qword_1ED2630B8);
    v30 = sub_1A9CE6978();
    v31 = sub_1A9CE867C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v33 = (void *)swift_slowAlloc();
      v37[0] = v33;
      *(_DWORD *)v32 = 136446978;
      v34 = sub_1A9CE8D48();
      sub_1A9B91D6C(v34, v35, (uint64_t *)v37);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 1026;
      sub_1A9CE888C();
      *(_WORD *)(v32 + 18) = 1026;
      sub_1A9CE888C();
      *(_WORD *)(v32 + 24) = 1026;
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v30, v31, "[%{public}s] Watch onboarding check: isSupported:%{BOOL,public}d hasOnboarded:%{BOOL,public}d isWatchAgeGated:%{BOOL,public}d", (uint8_t *)v32, 0x1Eu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v33, -1, -1);
      MEMORY[0x1AF420344](v32, -1, -1);
    }

    if (v6)
      return (v10 | v14) ^ 1;
  }
  else
  {
    v15 = v3;
    v16 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    if (qword_1ED262DB8 != -1)
      swift_once();
    v17 = sub_1A9CE6990();
    __swift_project_value_buffer(v17, (uint64_t)qword_1ED2630B8);
    v18 = v16;
    v19 = v16;
    v20 = sub_1A9CE6978();
    v21 = sub_1A9CE8664();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = (void *)swift_slowAlloc();
      v37[0] = v23;
      *(_DWORD *)v22 = 136446466;
      v24 = sub_1A9CE8D48();
      sub_1A9B91D6C(v24, v25, (uint64_t *)v37);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      v26 = v16;
      sub_1A9BB15F4();
      v27 = sub_1A9CE82F8();
      sub_1A9B91D6C(v27, v28, (uint64_t *)v37);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v20, v21, "[%{public}s] Error sleep tracking capability: %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v23, -1, -1);
      MEMORY[0x1AF420344](v22, -1, -1);

    }
    else
    {

    }
  }
  return 0;
}

id sub_1A9C07F30()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 48);
  v21[0] = 0;
  v2 = objc_msgSend(v1, sel_isFeatureCapabilitySupportedOnActivePairedDeviceWithError_, v21);
  if (v2)
  {
    v3 = v2;
    v4 = v21[0];
    v5 = objc_msgSend(v3, sel_BOOLValue);

  }
  else
  {
    v6 = v21[0];
    v7 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    if (qword_1ED262DB8 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
    v9 = v7;
    v10 = v7;
    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE8664();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = (void *)swift_slowAlloc();
      v21[0] = v14;
      *(_DWORD *)v13 = 136446466;
      v15 = sub_1A9CE8D48();
      sub_1A9B91D6C(v15, v16, (uint64_t *)v21);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      v17 = v7;
      sub_1A9BB15F4();
      v18 = sub_1A9CE82F8();
      sub_1A9B91D6C(v18, v19, (uint64_t *)v21);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] Unable to fetch sleep coaching state with error %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return v5;
}

id sub_1A9C081E0()
{
  return sub_1A9C081EC((SEL *)&selRef_hksp_activePairedDeviceSupportsSleepStages);
}

id sub_1A9C081EC(SEL *a1)
{
  id result;
  void *v3;
  id v4;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, *a1);

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1A9C08248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v9;

  v1 = sub_1A9CE6930();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
  sub_1A9CE6948();
  v6 = (void *)sub_1A9CE693C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = objc_msgSend(v6, sel_areAllRequirementsSatisfied);

  return v7;
}

id sub_1A9C08508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v9;

  v1 = sub_1A9CE6930();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 216));
  sub_1A9CE6948();
  v6 = (void *)sub_1A9CE693C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = objc_msgSend(v6, sel_areAllRequirementsSatisfied);

  return v7;
}

uint64_t sub_1A9C087C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  sub_1A9B923D4(v0 + 232, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_1A9C08848@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = *a1 + 232;
  swift_beginAccess();
  sub_1A9B923D4(v3, (uint64_t)v7);
  v4 = v8;
  v5 = v9;
  __swift_project_boxed_opaque_existential_1Tm(v7, v8);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  *a2 = v3 & 1;
  return result;
}

uint64_t sub_1A9C088D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  sub_1A9B923D4(v0 + 232, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v1 & 1;
}

uint64_t sub_1A9C08954(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[3];

  v2 = v1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v4 = sub_1A9CE6990();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED2630B8);
  v5 = sub_1A9CE6978();
  v6 = sub_1A9CE867C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)v7 = 136446466;
    v9 = sub_1A9CE8D48();
    sub_1A9B91D6C(v9, v10, v17);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    if ((a1 & 1) != 0)
      v11 = 1702195828;
    else
      v11 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v12 = 0xE400000000000000;
    else
      v12 = 0xE500000000000000;
    sub_1A9B91D6C(v11, v12, v17);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v5, v6, "[%{public}s] Updating health status features enabled: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v8, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);
  }

  v13 = v2 + 232;
  swift_beginAccess();
  v15 = *(_QWORD *)(v2 + 256);
  v14 = *(_QWORD *)(v2 + 264);
  __swift_mutable_project_boxed_opaque_existential_1(v13, v15);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 24))(a1 & 1, v15, v14);
  return swift_endAccess();
}

void (*sub_1A9C08B7C(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  swift_beginAccess();
  sub_1A9B923D4(v1 + 232, (uint64_t)v3);
  v4 = v3[3];
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  *((_BYTE *)v3 + 72) = v4 & 1;
  return sub_1A9C08C1C;
}

void sub_1A9C08C1C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  sub_1A9C08954(*(_BYTE *)(*(_QWORD *)a1 + 72));
  free(v1);
}

id sub_1A9C08C48()
{
  return HKSPSleepStore.settings.getter();
}

id sub_1A9C08C68()
{
  return HKSPSleepStore.schedule.getter();
}

void sub_1A9C08C88(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = *v2;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v7 = sub_1A9CE6990();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED2630B8);
  v8 = sub_1A9CE6978();
  v9 = sub_1A9CE867C();
  if (os_log_type_enabled(v8, v9))
  {
    v20 = a1;
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    aBlock[0] = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_1A9CE8D48();
    sub_1A9B91D6C(v12, v13, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v8, v9, "[%{public}s] Fetching suggested sleep schedule", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v11, -1, -1);
    v14 = v10;
    a1 = v20;
    MEMORY[0x1AF420344](v14, -1, -1);
  }

  sub_1A9BB7420();
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1A9CEDE30;
  *(_QWORD *)(v15 + 32) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProactiveSuggestionProvider()), sel_init);
  *(_QWORD *)(v15 + 40) = (id)HKSPDefaultScheduleProvider();
  aBlock[0] = v15;
  sub_1A9CE83E8();
  v16 = (void *)v3[8];
  sub_1A9C0C814();
  v17 = (void *)sub_1A9CE83D0();
  swift_bridgeObjectRelease();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v6;
  aBlock[4] = (uint64_t)sub_1A9C0C88C;
  aBlock[5] = (uint64_t)v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9C09184;
  aBlock[3] = (uint64_t)&block_descriptor_11;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_suggestedSleepScheduleWithProviders_completion_, v17, v19);
  _Block_release(v19);

}

uint64_t sub_1A9C08F34(uint64_t a1, uint64_t a2, id a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if (a3)
  {
    v8 = a3;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v9 = sub_1A9CE6990();
    __swift_project_value_buffer(v9, (uint64_t)qword_1ED2630B8);
    v10 = a3;
    v11 = a3;
    v12 = sub_1A9CE6978();
    v13 = sub_1A9CE8664();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v22 = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = sub_1A9CE8D48();
      sub_1A9B91D6C(v16, v17, &v22);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      v18 = a3;
      sub_1A9BB15F4();
      v19 = sub_1A9CE82F8();
      sub_1A9B91D6C(v19, v20, &v22);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v12, v13, "[%{public}s] Unable to retrieve schedule with error %{public}s)", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v15, -1, -1);
      MEMORY[0x1AF420344](v14, -1, -1);

    }
    else
    {

    }
  }
  return a4(a1, a2);
}

void sub_1A9C09184(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void (*v7)(void *, uint64_t, void *);
  id v8;
  id v9;

  v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v9 = a2;
  swift_unknownObjectRetain();
  v8 = a4;
  v7(a2, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
}

id sub_1A9C09210(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  void *v10;
  id result;
  void *v12;
  unsigned int v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  id v56[2];

  v2 = v1;
  v56[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = sub_1A9CE82E0();
  v6 = v5;
  if (v4 == sub_1A9CE82E0() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
      goto LABEL_15;
  }
  v10 = *(void **)(v2 + 24);
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend(result, sel_hksp_supportsSleep);

    if (!v13
      || (v14 = objc_msgSend(v10, sel_profileIdentifier),
          v15 = objc_msgSend(v14, sel_type),
          v14,
          v15 == (id)3))
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v16 = sub_1A9CE6990();
      __swift_project_value_buffer(v16, (uint64_t)qword_1ED2630B8);
      v17 = sub_1A9CE6978();
      v18 = sub_1A9CE8664();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v20 = (void *)swift_slowAlloc();
        v56[0] = v20;
        *(_DWORD *)v19 = 136446210;
        v21 = sub_1A9CE8D48();
        sub_1A9B91D6C(v21, v22, (uint64_t *)v56);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] Sleep coaching not supported", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v20, -1, -1);
        MEMORY[0x1AF420344](v19, -1, -1);
      }
      goto LABEL_25;
    }
LABEL_15:
    if (qword_1ED262DB8 != -1)
      swift_once();
    v23 = sub_1A9CE6990();
    __swift_project_value_buffer(v23, (uint64_t)qword_1ED2630B8);
    v24 = a1;
    v25 = sub_1A9CE6978();
    v26 = sub_1A9CE867C();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v54 = (void *)swift_slowAlloc();
      v56[0] = v54;
      *(_DWORD *)v27 = 136446466;
      v28 = sub_1A9CE8D48();
      sub_1A9B91D6C(v28, v29, (uint64_t *)v56);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      v30 = v24;
      v31 = sub_1A9CE876C();
      v33 = v32;

      sub_1A9B91D6C(v31, v33, (uint64_t *)v56);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v25, v26, "[%{public}s] Fetching onboarded state for feature with identifier %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v54, -1, -1);
      MEMORY[0x1AF420344](v27, -1, -1);

    }
    else
    {

    }
    sub_1A9C0C8B0();
    v56[0] = 0;
    v34 = objc_msgSend((id)swift_unknownObjectRetain(), sel_isCurrentOnboardingVersionCompletedWithError_, v56);
    if (v34)
    {
      v35 = v56[0];
      v36 = objc_msgSend(v34, sel_BOOLValue);

      swift_unknownObjectRelease();
      return v36;
    }
    v37 = v56[0];
    v38 = (void *)sub_1A9CE61E0();

    swift_willThrow();
    v39 = v24;
    v40 = v38;
    v41 = v39;
    v42 = v38;
    v17 = sub_1A9CE6978();
    v43 = sub_1A9CE8664();
    if (os_log_type_enabled(v17, v43))
    {
      v44 = swift_slowAlloc();
      v55 = (void *)swift_slowAlloc();
      v56[0] = v55;
      *(_DWORD *)v44 = 136446722;
      v45 = sub_1A9CE8D48();
      sub_1A9B91D6C(v45, v46, (uint64_t *)v56);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2082;
      v47 = v41;
      v48 = sub_1A9CE876C();
      v50 = v49;

      sub_1A9B91D6C(v48, v50, (uint64_t *)v56);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2082;
      v51 = v38;
      sub_1A9BB15F4();
      v52 = sub_1A9CE82F8();
      sub_1A9B91D6C(v52, v53, (uint64_t *)v56);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v17, v43, "[%{public}s] Error reading onboarding completion for feature identifier %{public}s: %{public}s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v55, -1, -1);
      MEMORY[0x1AF420344](v44, -1, -1);
      swift_unknownObjectRelease();

      return 0;
    }
    swift_unknownObjectRelease();

LABEL_25:
    return 0;
  }
  __break(1u);
  return result;
}

void sub_1A9C09930(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t aBlock[9];

  v2 = v1;
  v4 = *v1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
  v6 = sub_1A9CE6978();
  v7 = sub_1A9CE867C();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    aBlock[0] = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = sub_1A9CE8D48();
    aBlock[6] = sub_1A9B91D6C(v10, v11, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Onboarding did complete for sleep", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v9, -1, -1);
    MEMORY[0x1AF420344](v8, -1, -1);
  }

  v12 = (id *)(a1 + 48);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    swift_beginAccess();
    if (objc_msgSend(*v12, sel_sleepTracking))
    {
      v13 = *v12;
      v14 = sub_1A9CE6978();
      v15 = sub_1A9CE867C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        aBlock[0] = v17;
        *(_DWORD *)v16 = 136446210;
        v18 = sub_1A9CE8D48();
        sub_1A9B91D6C(v18, v19, aBlock);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Saving sleep settings", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v17, -1, -1);
        MEMORY[0x1AF420344](v16, -1, -1);
      }

      v20 = (void *)v2[8];
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v4;
      aBlock[4] = (uint64_t)sub_1A9C0CA58;
      aBlock[5] = v21;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1A9BE4D94;
      aBlock[3] = (uint64_t)&block_descriptor_6_1;
      v22 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v20, sel_saveCurrentSleepSettings_options_completion_, v13, 2, v22);
      _Block_release(v22);

      sub_1A9C09D4C(a1);
    }
  }
  else
  {
    swift_beginAccess();
    objc_msgSend(*(id *)(a1 + 48), sel_setTimeInBedTracking_, 1);
    objc_msgSend(*(id *)(a1 + 48), sel_setWakeUpResults_, 1);
    swift_beginAccess();
    objc_msgSend(*(id *)(a1 + 40), sel_setEnabled_, 1);
    objc_msgSend(*(id *)(a1 + 48), sel_setSpringBoardGreetingDisabled_, 1);
    sub_1A9C0A778(a1);
  }
}

uint64_t sub_1A9C09D4C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  sub_1A9C0AB80((void *)*MEMORY[0x1E0CB50A0]);
  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 128) == 1)
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v3 = sub_1A9CE6990();
    __swift_project_value_buffer(v3, (uint64_t)qword_1ED2630B8);
    v4 = sub_1A9CE6978();
    v5 = sub_1A9CE867C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v10 = v7;
      *(_DWORD *)v6 = 136446210;
      v8 = sub_1A9CE8D48();
      sub_1A9B91D6C(v8, v9, &v10);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Enabling health status notifications", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v7, -1, -1);
      MEMORY[0x1AF420344](v6, -1, -1);
    }

    return sub_1A9C08954(1);
  }
  return result;
}

void sub_1A9C09F04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t aBlock[6];

  v1 = *v0;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    aBlock[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1A9CE8D48();
    sub_1A9B91D6C(v7, v8, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Sending tips discoverability signal", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  aBlock[4] = (uint64_t)sub_1A9C0CA90;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9C0A74C;
  aBlock[3] = (uint64_t)&block_descriptor_12_0;
  v10 = _Block_copy(aBlock);
  v11 = objc_msgSend((id)objc_opt_self(), sel_blockOperationWithBlock_, v10);
  _Block_release(v10);
  swift_release();
  sub_1A9B94A18(0, &qword_1EEB462E0);
  v12 = (void *)sub_1A9CE86C4();
  objc_msgSend(v12, sel_addOperation_, v11);

}

void sub_1A9C0A148(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[6];

  v2 = objc_allocWithZone(MEMORY[0x1E0D2A7C8]);
  v3 = (void *)sub_1A9CE82B0();
  v4 = objc_msgSend(v2, sel_initWithIdentifier_, v3);

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = a1;
  v8[4] = sub_1A9C0CD04;
  v8[5] = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1A9C0A6F8;
  v8[3] = &block_descriptor_36;
  v6 = _Block_copy(v8);
  v7 = v4;
  swift_release();
  objc_msgSend(v7, sel_donateSignalWithCompletion_, v6);
  _Block_release(v6);

}

void sub_1A9C0A250(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *oslog;
  uint64_t v34;

  if (a1)
  {
    v4 = a1;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
    v6 = a2;
    v7 = a1;
    v8 = v6;
    v9 = a1;
    oslog = sub_1A9CE6978();
    v10 = sub_1A9CE8664();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v34 = v12;
      *(_DWORD *)v11 = 136446722;
      v13 = sub_1A9CE8D48();
      sub_1A9B91D6C(v13, v14, &v34);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      v15 = objc_msgSend(v8, sel_identifier);
      v16 = sub_1A9CE82E0();
      v18 = v17;

      sub_1A9B91D6C(v16, v18, &v34);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2082;
      v19 = a1;
      sub_1A9BB15F4();
      v20 = sub_1A9CE82F8();
      sub_1A9B91D6C(v20, v21, &v34);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, oslog, v10, "[%{public}s] failed to submit tip for id %{public}s with error: %{public}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v12, -1, -1);
      MEMORY[0x1AF420344](v11, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v22 = sub_1A9CE6990();
    __swift_project_value_buffer(v22, (uint64_t)qword_1ED2630B8);
    oslog = a2;
    v23 = sub_1A9CE6978();
    v24 = sub_1A9CE867C();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v34 = v26;
      *(_DWORD *)v25 = 136446466;
      v27 = sub_1A9CE8D48();
      sub_1A9B91D6C(v27, v28, &v34);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      v29 = -[NSObject identifier](oslog, sel_identifier);
      v30 = sub_1A9CE82E0();
      v32 = v31;

      sub_1A9B91D6C(v30, v32, &v34);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v23, v24, "[%{public}s] Tip with id %{public}s submitted successfully", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v26, -1, -1);
      MEMORY[0x1AF420344](v25, -1, -1);

      return;
    }

  }
}

void sub_1A9C0A6F8(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_1A9C0A74C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1A9C0A778(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  char v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t, void *);
  id v16;
  id v17;
  id *v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *aBlock;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, void *);
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = *v1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
  v6 = sub_1A9CE6978();
  v7 = sub_1A9CE867C();
  v30 = v4;
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    aBlock = (void *)v9;
    *(_DWORD *)v8 = 136446210;
    v10 = sub_1A9CE8D48();
    v37 = sub_1A9B91D6C(v10, v11, (uint64_t *)&aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Saving has completed sleep coaching onboarding", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v9, -1, -1);
    MEMORY[0x1AF420344](v8, -1, -1);
  }

  sub_1A9C0B2C0();
  swift_beginAccess();
  v13 = *(_BYTE *)(a1 + 24);
  v15 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v14 = *(void **)(a1 + 40);
  aBlock = *(void **)(a1 + 16);
  v12 = aBlock;
  LOBYTE(v32) = v13;
  v33 = v15;
  v16 = v14;
  v17 = v12;
  sub_1A9C0B4E4((uint64_t)v16);

  v18 = (id *)(a1 + 48);
  swift_beginAccess();
  v19 = *(id *)(a1 + 48);
  v20 = sub_1A9CE6978();
  v21 = sub_1A9CE867C();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    aBlock = (void *)v23;
    *(_DWORD *)v22 = 136446210;
    v24 = v30;
    v25 = sub_1A9CE8D48();
    sub_1A9B91D6C(v25, v26, (uint64_t *)&aBlock);
    sub_1A9CE888C();
    v18 = (id *)(a1 + 48);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v20, v21, "[%{public}s] Saving sleep settings", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v23, -1, -1);
    MEMORY[0x1AF420344](v22, -1, -1);

  }
  else
  {

    v24 = v30;
  }
  v27 = (void *)v2[8];
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v24;
  v35 = sub_1A9C0CD1C;
  v36 = v28;
  aBlock = (void *)MEMORY[0x1E0C809B0];
  v32 = 1107296256;
  v33 = sub_1A9BE4D94;
  v34 = &block_descriptor_43;
  v29 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v27, sel_saveCurrentSleepSettings_options_completion_, v19, 2, v29);
  _Block_release(v29);

  if (objc_msgSend(*v18, sel_sleepTracking))
    sub_1A9C09D4C(a1);
  sub_1A9C0AB80((void *)*MEMORY[0x1E0CB5098]);
  sub_1A9C0BB00();
}

uint64_t sub_1A9C0AB80(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  os_log_type_t type;
  uint64_t v22;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = *v2;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
  v6 = a1;
  v7 = sub_1A9CE6978();
  v8 = sub_1A9CE867C();
  if (os_log_type_enabled(v7, v8))
  {
    type = v8;
    v9 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)v9 = 136446466;
    v10 = sub_1A9CE8D48();
    sub_1A9B91D6C(v10, v11, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    v12 = v6;
    v13 = sub_1A9CE876C();
    v15 = v14;

    sub_1A9B91D6C(v13, v15, aBlock);
    sub_1A9CE888C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v7, type, "[%{public}s] Saving has onboarded feature with identifier %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v22, -1, -1);
    MEMORY[0x1AF420344](v9, -1, -1);

  }
  else
  {

  }
  v16 = (void *)sub_1A9C0C8B0();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = v4;
  aBlock[4] = (uint64_t)sub_1A9C0CCFC;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_30;
  v18 = _Block_copy(aBlock);
  v19 = v6;
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v16, sel_setCurrentOnboardingVersionCompletedForCountryCode_countryCodeProvenance_date_settings_completion_, 0, 0, 0, 0, v18);
  _Block_release(v18);
  return swift_unknownObjectRelease();
}

void sub_1A9C0AE44(int a1, id a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSObject *oslog;
  uint64_t v35;

  if (a2)
  {
    v5 = a2;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v6 = sub_1A9CE6990();
    __swift_project_value_buffer(v6, (uint64_t)qword_1ED2630B8);
    v7 = a3;
    v8 = a2;
    v9 = v7;
    v10 = a2;
    oslog = sub_1A9CE6978();
    v11 = sub_1A9CE8664();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v35 = v13;
      *(_DWORD *)v12 = 136446722;
      v14 = sub_1A9CE8D48();
      sub_1A9B91D6C(v14, v15, &v35);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v16 = v9;
      v17 = sub_1A9CE876C();
      v19 = v18;

      sub_1A9B91D6C(v17, v19, &v35);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2082;
      v20 = a2;
      sub_1A9BB15F4();
      v21 = sub_1A9CE82F8();
      sub_1A9B91D6C(v21, v22, &v35);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, oslog, v11, "[%{public}s] Failed to save onboarding state for feature %{public}s with error: %{public}s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v13, -1, -1);
      MEMORY[0x1AF420344](v12, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v23 = sub_1A9CE6990();
    __swift_project_value_buffer(v23, (uint64_t)qword_1ED2630B8);
    oslog = a3;
    v24 = sub_1A9CE6978();
    v25 = sub_1A9CE867C();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v35 = v27;
      *(_DWORD *)v26 = 136446466;
      v28 = sub_1A9CE8D48();
      sub_1A9B91D6C(v28, v29, &v35);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      v30 = oslog;
      v31 = sub_1A9CE876C();
      v33 = v32;

      sub_1A9B91D6C(v31, v33, &v35);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v24, v25, "[%{public}s] Saved onboarding complete for feature %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v27, -1, -1);
      MEMORY[0x1AF420344](v26, -1, -1);

      return;
    }

  }
}

void sub_1A9C0B2C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = *v0;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v3 = sub_1A9CE6990();
  __swift_project_value_buffer(v3, (uint64_t)qword_1ED2630B8);
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE867C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1A9CE8D48();
    sub_1A9B91D6C(v8, v9, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Creating sleep focus", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);
  }

  v10 = (void *)v1[8];
  v11 = objc_msgSend((id)objc_opt_self(), sel_defaultConfigurationState);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v2;
  aBlock[4] = (uint64_t)sub_1A9C0CCB0;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_24;
  v13 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_createSleepFocusInState_completion_, v11, v13);
  _Block_release(v13);
}

void sub_1A9C0B4E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = *v1;
  if (qword_1ED262DB8 != -1)
    swift_once();
  v5 = sub_1A9CE6990();
  __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
  v6 = sub_1A9CE6978();
  v7 = sub_1A9CE867C();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = v4;
    v10 = a1;
    v11 = swift_slowAlloc();
    aBlock[0] = v11;
    *(_DWORD *)v8 = 136446210;
    v12 = sub_1A9CE8D48();
    sub_1A9B91D6C(v12, v13, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v6, v7, "[%{public}s] Saving sleep schedule", v8, 0xCu);
    swift_arrayDestroy();
    v14 = v11;
    a1 = v10;
    v4 = v9;
    MEMORY[0x1AF420344](v14, -1, -1);
    MEMORY[0x1AF420344](v8, -1, -1);
  }

  v15 = (id)HKSPAnalyticsScheduleChangeContext();
  sub_1A9CE8214();

  v16 = (void *)v2[8];
  v17 = (void *)sub_1A9CE8208();
  swift_bridgeObjectRelease();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v4;
  aBlock[4] = (uint64_t)sub_1A9C0CC78;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_18;
  v19 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v16, sel_saveCurrentSleepSchedule_options_context_completion_, a1, 3, v17, v19);
  _Block_release(v19);

}

void sub_1A9C0B784(int a1, id a2, uint64_t a3, const char *a4, const char *a5)
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *oslog;
  uint64_t v27;

  if (a2)
  {
    v7 = a2;
    if (qword_1ED262DB8 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED2630B8);
    v9 = a2;
    v10 = a2;
    oslog = sub_1A9CE6978();
    v11 = sub_1A9CE8664();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v27 = v13;
      *(_DWORD *)v12 = 136446466;
      v14 = sub_1A9CE8D48();
      sub_1A9B91D6C(v14, v15, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v16 = a2;
      sub_1A9BB15F4();
      v17 = sub_1A9CE82F8();
      sub_1A9B91D6C(v17, v18, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, oslog, v11, a4, (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v13, -1, -1);
      MEMORY[0x1AF420344](v12, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_1ED262DB8 != -1)
      swift_once();
    v20 = sub_1A9CE6990();
    __swift_project_value_buffer(v20, (uint64_t)qword_1ED2630B8);
    oslog = sub_1A9CE6978();
    v21 = sub_1A9CE867C();
    if (os_log_type_enabled(oslog, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v27 = v23;
      *(_DWORD *)v22 = 136446210;
      v24 = sub_1A9CE8D48();
      sub_1A9B91D6C(v24, v25, &v27);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, oslog, v21, a5, v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v23, -1, -1);
      MEMORY[0x1AF420344](v22, -1, -1);

      return;
    }
  }

}

void sub_1A9C0BB00()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstanceForHealthStore_, *(_QWORD *)(v0 + 24));
  if (v1)
  {
    v2 = v1;
    v3 = (void *)sub_1A9CE8508();
    v4 = objc_msgSend(v2, sel_displayTypeWithIdentifier_, v3);

    if (v4)
    {
      sub_1A9CE6720();
      oslog = objc_msgSend(v4, sel_objectType);
      sub_1A9CE6714();

    }
    else
    {
      if (qword_1ED262DB8 != -1)
        swift_once();
      v5 = sub_1A9CE6990();
      __swift_project_value_buffer(v5, (uint64_t)qword_1ED2630B8);
      oslog = sub_1A9CE6978();
      v6 = sub_1A9CE8664();
      if (os_log_type_enabled(oslog, v6))
      {
        v7 = swift_slowAlloc();
        v8 = (_QWORD *)swift_slowAlloc();
        v9 = swift_slowAlloc();
        v14 = v9;
        *(_DWORD *)v7 = 136446466;
        v10 = sub_1A9CE8D48();
        sub_1A9B91D6C(v10, v11, &v14);
        sub_1A9CE888C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v7 + 12) = 2114;
        v13 = sub_1A9CE8508();
        sub_1A9CE888C();
        *v8 = v13;
        _os_log_impl(&dword_1A9B87000, oslog, v6, "[%{public}s] Unable to create display type from identifier %{public}@", (uint8_t *)v7, 0x16u);
        sub_1A9BEFFB8();
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v8, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v9, -1, -1);
        MEMORY[0x1AF420344](v7, -1, -1);

        return;
      }
    }

  }
  else
  {
    __break(1u);
  }
}

id *SleepOnboardingManager.deinit()
{
  id *v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 9));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 19));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 29));
  return v0;
}

uint64_t SleepOnboardingManager.__deallocating_deinit()
{
  SleepOnboardingManager.deinit();
  return swift_deallocClassInstance();
}

id sub_1A9C0BE40()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 24);
}

uint64_t sub_1A9C0BE4C()
{
  return swift_retain();
}

id sub_1A9C0BE58()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 64);
}

uint64_t sub_1A9C0BE64@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1A9B923D4(*v1 + 112, a1);
}

uint64_t sub_1A9C0BE84@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1A9B923D4(*v1 + 72, a1);
}

uint64_t sub_1A9C0BEA4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9C0BEB0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1A9C0BEBC()
{
  return swift_unknownObjectRetain();
}

id sub_1A9C0BEC8(uint64_t a1, uint64_t a2)
{
  return sub_1A9C0BF28(a1, a2, (SEL *)&selRef_hksp_hasActivePairedDevice);
}

uint64_t sub_1A9C0BED4()
{
  return sub_1A9C07A0C() & 1;
}

unint64_t sub_1A9C0BEF8()
{
  return (unint64_t)sub_1A9C07F30() & 1;
}

id sub_1A9C0BF1C(uint64_t a1, uint64_t a2)
{
  return sub_1A9C0BF28(a1, a2, (SEL *)&selRef_hksp_activePairedDeviceSupportsSleepStages);
}

id sub_1A9C0BF28(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result;
  void *v5;
  id v6;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(result, *a3);

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1A9C0BF84()
{
  return (unint64_t)sub_1A9C08248() & 1;
}

unint64_t sub_1A9C0BFA8()
{
  return (unint64_t)sub_1A9C08508() & 1;
}

uint64_t sub_1A9C0BFCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *v0 + 232;
  swift_beginAccess();
  sub_1A9B923D4(v1, (uint64_t)v5);
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1Tm(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  return v2 & 1;
}

uint64_t sub_1A9C0C050()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *v0 + 232;
  swift_beginAccess();
  sub_1A9B923D4(v1, (uint64_t)v5);
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1Tm(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  return v2 & 1;
}

uint64_t sub_1A9C0C0D4(char a1)
{
  return sub_1A9C08954(a1);
}

void (*sub_1A9C0C0F4(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v4 = *v1;
  v3[8] = *v1;
  v5 = v4 + 232;
  swift_beginAccess();
  sub_1A9B923D4(v5, (uint64_t)v3);
  v6 = v3[3];
  v7 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v6);
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  *((_BYTE *)v3 + 72) = v6 & 1;
  return sub_1A9C08C1C;
}

id sub_1A9C0C198()
{
  return HKSPSleepStore.settings.getter();
}

id sub_1A9C0C1BC()
{
  return HKSPSleepStore.schedule.getter();
}

void sub_1A9C0C1E0(uint64_t a1, uint64_t a2)
{
  sub_1A9C08C88(a1, a2);
}

unint64_t sub_1A9C0C200(void *a1)
{
  return (unint64_t)sub_1A9C09210(a1) & 1;
}

void sub_1A9C0C224(uint64_t a1)
{
  sub_1A9C09930(a1);
}

void sub_1A9C0C244()
{
  sub_1A9C09F04();
}

id sub_1A9C0C264()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 16);
}

uint64_t type metadata accessor for SleepOnboardingManager()
{
  return objc_opt_self();
}

_QWORD *sub_1A9C0C290(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_class *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v26 = type metadata accessor for HealthStatusFeatureProvider();
  v27 = &protocol witness table for HealthStatusFeatureProvider;
  *(_QWORD *)&v25 = a3;
  a4[2] = objc_msgSend(a1, sel_analyticsManager);
  a4[3] = a2;
  v8 = (void *)objc_opt_self();
  v9 = a2;
  v10 = objc_msgSend(v8, sel_hksp_healthNotificationCenter);
  type metadata accessor for SleepNotificationManager();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  a4[4] = v11;
  a4[8] = a1;
  v12 = type metadata accessor for SleepScheduleProvider();
  v13 = a1;
  v14 = SleepScheduleProvider.__allocating_init(sleepStore:)(v13);
  a4[12] = v12;
  a4[13] = &protocol witness table for SleepScheduleProvider;
  a4[9] = v14;
  v15 = v13;
  v16 = HKSPSleepStore.settings.getter();
  v17 = (objc_class *)type metadata accessor for SleepSettingsProvider();
  v18 = objc_allocWithZone(v17);
  v19 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v15, v16);
  a4[17] = v17;
  a4[18] = &protocol witness table for SleepSettingsProvider;
  a4[14] = v19;
  a4[5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB5090], v15);
  a4[6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB5098], v15);
  a4[7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB50A0], v15);
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB5088], v9);
  v21 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB46270);
  v22 = MEMORY[0x1E0D2C1E8];
  a4[22] = v21;
  a4[23] = v22;
  a4[19] = v20;
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB50B0], v9);
  a4[27] = v21;
  a4[28] = v22;
  a4[24] = v23;
  sub_1A9B949B8(&v25, (uint64_t)(a4 + 29));
  return a4;
}

_QWORD *sub_1A9C0C4F0(void *a1, void *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  objc_class *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a5;
  v31 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  a4[2] = objc_msgSend(a1, sel_analyticsManager);
  a4[3] = a2;
  v12 = (void *)objc_opt_self();
  v13 = a2;
  v14 = objc_msgSend(v12, sel_hksp_healthNotificationCenter);
  type metadata accessor for SleepNotificationManager();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  a4[4] = v15;
  a4[8] = a1;
  v16 = type metadata accessor for SleepScheduleProvider();
  v17 = a1;
  v18 = SleepScheduleProvider.__allocating_init(sleepStore:)(v17);
  a4[12] = v16;
  a4[13] = &protocol witness table for SleepScheduleProvider;
  a4[9] = v18;
  v19 = v17;
  v20 = HKSPSleepStore.settings.getter();
  v21 = (objc_class *)type metadata accessor for SleepSettingsProvider();
  v22 = objc_allocWithZone(v21);
  v23 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v19, v20);
  a4[17] = v21;
  a4[18] = &protocol witness table for SleepSettingsProvider;
  a4[14] = v23;
  a4[5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB5090], v19);
  a4[6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB5098], v19);
  a4[7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8510]), sel_initWithFeatureIdentifier_sleepStore_, *MEMORY[0x1E0CB50A0], v19);
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB5088], v13);
  v25 = sub_1A9B94A18(0, (unint64_t *)&qword_1EEB46270);
  v26 = MEMORY[0x1E0D2C1E8];
  a4[22] = v25;
  a4[23] = v26;
  a4[19] = v24;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, *MEMORY[0x1E0CB50B0], v13);
  a4[27] = v25;
  a4[28] = v26;
  a4[24] = v27;
  sub_1A9B949B8(&v29, (uint64_t)(a4 + 29));
  return a4;
}

_QWORD *sub_1A9C0C75C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SleepOnboardingManager();
  v14 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  return sub_1A9C0C4F0(a1, a2, (uint64_t)v13, v14, a5, a6);
}

unint64_t sub_1A9C0C814()
{
  unint64_t result;

  result = qword_1EEB46278;
  if (!qword_1EEB46278)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB46278);
  }
  return result;
}

uint64_t sub_1A9C0C868()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C0C88C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1A9C08F34(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_1A9C0C8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v1 = sub_1A9CE82E0();
  v3 = v2;
  if (v1 == sub_1A9CE82E0() && v3 == v4)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v6 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
LABEL_15:
    v17 = v0 + 40;
    return *(_QWORD *)v17;
  }
  v7 = sub_1A9CE82E0();
  v9 = v8;
  if (v7 != sub_1A9CE82E0() || v9 != v10)
  {
    v12 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v13 = sub_1A9CE82E0();
      v15 = v14;
      if (v13 == sub_1A9CE82E0() && v15 == v16)
      {
        swift_bridgeObjectRelease_n();
LABEL_19:
        v17 = v0 + 56;
        return *(_QWORD *)v17;
      }
      v19 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        goto LABEL_19;
    }
    v17 = v0 + 48;
    return *(_QWORD *)v17;
  }
  swift_bridgeObjectRelease_n();
  v17 = v0 + 48;
  return *(_QWORD *)v17;
}

uint64_t sub_1A9C0CA48()
{
  return swift_deallocObject();
}

void sub_1A9C0CA58(int a1, void *a2)
{
  uint64_t v2;

  sub_1A9C0B784(a1, a2, *(_QWORD *)(v2 + 16), "[%{public}s] Onboarding failed to save sleep settings with error: %{public}s", "[%{public}s] Onboarding successfully saved sleep settings");
}

uint64_t sub_1A9C0CA80()
{
  return swift_deallocObject();
}

void sub_1A9C0CA90()
{
  uint64_t v0;

  sub_1A9C0A148(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A9C0CA9C(char *a1)
{
  return sub_1A9C08954(*a1);
}

uint64_t dispatch thunk of SleepOnboardingManaging.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.notificationManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepSettingsProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepScheduleProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepActionsStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepCoachingStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sleepTrackingStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.hasPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isWatchAgeGated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepTrackingOnboardableOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepCoachingSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isSleepStagesSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isRespiratoryRateSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isWristTemperatureSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.isHealthStatusSupportedOnPairedWatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.areHealthStatusNotificationsEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.currentSleepSettings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.currentSleepSchedule()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.suggestedSleepSchedule(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.hasOnboardedFeature(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.saveHasCompletedOnboarding(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingManaging.sendTipsDiscoverabilitySignal()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t method lookup function for SleepOnboardingManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepOnboardingManager.__allocating_init(sleepStore:healthStore:healthStatusFeatureProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of SleepOnboardingManager.hasPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isWatchAgeGated.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepTrackingOnboardableOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepCoachingSupportedOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isSleepStagesSupportedOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isRespiratoryRateSupportedOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isWristTemperatureSupportedOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SleepOnboardingManager.isHealthStatusSupportedOnPairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SleepOnboardingManager.areHealthStatusNotificationsEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SleepOnboardingManager.currentSleepSettings()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of SleepOnboardingManager.currentSleepSchedule()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SleepOnboardingManager.suggestedSleepSchedule(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SleepOnboardingManager.hasOnboardedFeature(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SleepOnboardingManager.saveHasCompletedOnboarding(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SleepOnboardingManager.sendTipsDiscoverabilitySignal()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t sub_1A9C0CC68()
{
  return swift_deallocObject();
}

void sub_1A9C0CC78(int a1, void *a2)
{
  uint64_t v2;

  sub_1A9C0B784(a1, a2, *(_QWORD *)(v2 + 16), "[%{public}s] Onboarding failed to save sleep schedule with error: %{public}s", "[%{public}s] Onboarding successfully saved sleep schedule");
}

uint64_t sub_1A9C0CCA0()
{
  return swift_deallocObject();
}

void sub_1A9C0CCB0(int a1, void *a2)
{
  uint64_t v2;

  sub_1A9C0B784(a1, a2, *(_QWORD *)(v2 + 16), "[%{public}s] Onboarding failed to create sleep focus with error: %{public}s", "[%{public}s] Onboarding successfully created sleep focus");
}

uint64_t sub_1A9C0CCD8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9C0CCFC(int a1, void *a2)
{
  uint64_t v2;

  sub_1A9C0AE44(a1, a2, *(void **)(v2 + 16));
}

void sub_1A9C0CD04(void *a1)
{
  uint64_t v1;

  sub_1A9C0A250(a1, *(void **)(v1 + 16));
}

uint64_t sub_1A9C0CD0C()
{
  return swift_deallocObject();
}

id static NSDateComponentsFormatter.abbreviated.getter()
{
  return sub_1A9C0D2A0(96);
}

uint64_t static NSDateComponentsFormatter.shorterDateString(from:)(double a1)
{
  return sub_1A9C0CFD4(type metadata accessor for ShorterDateComponentsFormatter, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, a1);
}

id ShorterDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  return sub_1A9C0D094(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
}

uint64_t static NSDateComponentsFormatter.forceDoubleZerosString(from:)(uint64_t a1)
{
  return sub_1A9C0D190(a1, type metadata accessor for ForceDoubleZerosDateComponentsFormatter);
}

uint64_t static NSDateComponentsFormatter.briefOneHourIsSixtyMinString(from:)(double a1)
{
  return sub_1A9C0D0F4(type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter, a1);
}

uint64_t static NSDateComponentsFormatter.briefOneHourIsSixtyMinString(from:)(uint64_t a1)
{
  return sub_1A9C0D190(a1, type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t static NSDateComponentsFormatter.shorterDateString(from:)()
{
  objc_class *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_super v7;

  v0 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v7.receiver = v1;
  v7.super_class = v0;
  v2 = objc_msgSendSuper2(&v7, sel_init);
  v3 = (void *)sub_1A9CE6018();
  v4 = objc_msgSend(v2, sel_stringFromDateComponents_, v3);

  if (!v4)
    return 0;
  v5 = sub_1A9CE82E0();

  return v5;
}

uint64_t static NSDateComponentsFormatter.shortHourString(from:)(double a1)
{
  objc_class *v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  objc_super v8;

  v2 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
  v8.receiver = v3;
  v8.super_class = v2;
  v4 = objc_msgSendSuper2(&v8, sel_init);
  objc_msgSend(v4, sel_setUnitsStyle_, 2);
  objc_msgSend(v4, sel_setAllowedUnits_, 32);
  v5 = objc_msgSend(v4, sel_stringFromTimeInterval_, a1);

  if (!v5)
    return 0;
  v6 = sub_1A9CE82E0();

  return v6;
}

id ShortHourDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  id v4;
  objc_super v6;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  v4 = objc_msgSendSuper2(&v6, sel_init);
  objc_msgSend(v4, sel_setUnitsStyle_, 2);
  objc_msgSend(v4, sel_setAllowedUnits_, 32);

  return v4;
}

uint64_t static NSDateComponentsFormatter.shortMinuteString(from:)(double a1)
{
  return sub_1A9C0CFD4(type metadata accessor for ShortMinuteDateComponentsFormatter, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, a1);
}

uint64_t sub_1A9C0CFD4(uint64_t (*a1)(void), _QWORD *a2, double a3)
{
  objc_class *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  objc_super v11;

  v5 = (objc_class *)a1();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[*a2] = 4;
  v11.receiver = v6;
  v11.super_class = v5;
  v7 = objc_msgSendSuper2(&v11, sel_init);
  v8 = objc_msgSend(v7, sel_stringFromTimeInterval_, a3);

  if (!v8)
    return 0;
  v9 = sub_1A9CE82E0();

  return v9;
}

id ShortMinuteDateComponentsFormatter.__allocating_init(options:)(uint64_t a1)
{
  return sub_1A9C0D094(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
}

id sub_1A9C0D094(uint64_t a1, _QWORD *a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[*a2] = a1;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t static NSDateComponentsFormatter.abbreviatedOneHourIsSixtyMinString(from:)(double a1)
{
  return sub_1A9C0D0F4(type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter, a1);
}

uint64_t sub_1A9C0D0F4(uint64_t (*a1)(void), double a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = objc_msgSend(objc_allocWithZone((Class)a1()), sel_init);
  v4 = objc_msgSend(v3, sel_stringFromTimeInterval_, a2);

  if (!v4)
    return 0;
  v5 = sub_1A9CE82E0();

  return v5;
}

uint64_t static NSDateComponentsFormatter.abbreviatedOneHourIsSixtyMinString(from:)(uint64_t a1)
{
  return sub_1A9C0D190(a1, type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t sub_1A9C0D190(uint64_t a1, uint64_t (*a2)(void))
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)a2()), sel_init);
  v3 = (void *)sub_1A9CE6018();
  v4 = objc_msgSend(v2, sel_stringFromDateComponents_, v3);

  if (!v4)
    return 0;
  v5 = sub_1A9CE82E0();

  return v5;
}

id static NSDateComponentsFormatter.briefStandaloneDuration.getter()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v0, sel_setAllowedUnits_, 96);
  objc_msgSend(v0, sel_setUnitsStyle_, 5);
  objc_msgSend(v0, sel_setFormattingContext_, 2);
  return v0;
}

id static NSDateComponentsFormatter.abbreviatedHours.getter()
{
  return sub_1A9C0D2A0(32);
}

id sub_1A9C0D2A0(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v2, sel_setAllowedUnits_, a1);
  objc_msgSend(v2, sel_setUnitsStyle_, 1);
  return v2;
}

id static NSDateComponentsFormatter.full.getter()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3570]), sel_init);
  objc_msgSend(v0, sel_setUnitsStyle_, 3);
  return v0;
}

void __swiftcall NSDateComponentsFormatter.spellOutFormatter()(NSDateComponentsFormatter *__return_ptr retstr)
{
  void *v1;
  id v2;

  objc_msgSend(v1, sel_copy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9C0EF9C();
  swift_dynamicCast();
  objc_msgSend(v2, sel_setUnitsStyle_, 4);
}

uint64_t sub_1A9C0D5E0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v23 - v10;
  sub_1A9BB7054(0, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - v14;
  v16 = objc_msgSend(v2, sel_calendar);
  if (v16)
  {
    v17 = v16;
    sub_1A9CE63D8();

    v18 = sub_1A9CE6444();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 0, 1, v18);
  }
  else
  {
    v18 = sub_1A9CE6444();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
  }
  sub_1A9C0F218((uint64_t)v8, (uint64_t)v11);
  sub_1A9CE6444();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v11, 1, v18))
  {
    sub_1A9C0F26C((uint64_t)v11, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    v19 = sub_1A9CE6360();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 1, 1, v19);
LABEL_7:
    sub_1A9CE6348();
    return sub_1A9C0F26C((uint64_t)v15, (unint64_t *)&qword_1ED262D60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  }
  sub_1A9CE6408();
  sub_1A9C0F26C((uint64_t)v11, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  v20 = sub_1A9CE6360();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20) == 1)
    goto LABEL_7;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v15, v20);
}

uint64_t sub_1A9C0D818(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v45 = sub_1A9CE5EE0();
  v4 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A9CE6360();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C0D5E0((uint64_t)v12);
  v13 = sub_1A9CE6324();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v13 == 0x53555F6E65 && v15 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v17 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
LABEL_8:
    v18 = 0xE400000000000000;
    v50 = a1;
    v51 = a2;
    v48 = 7155744;
    v49 = 0xE300000000000000;
    v44 = 1831874592;
    v46 = 1831874592;
    v47 = 0xE400000000000000;
    sub_1A9BA8EA4();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = sub_1A9CE88D4();
    v21 = v20;
    v50 = 7155744;
    v51 = 0xE300000000000000;
    sub_1A9CE5EBC();
    v22 = sub_1A9CE88C8();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v4 + 8);
    v26 = v45;
    v43 = v25;
    v25(v7, v45);
    swift_bridgeObjectRelease();
    if (v19 != v22 || v21 != v24)
    {
      v27 = sub_1A9CE8BB0();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_12;
      swift_bridgeObjectRelease();
      v18 = 0xE600000000000000;
      v50 = v19;
      v51 = v21;
      v48 = *(_QWORD *)" 0min";
      v49 = 0xE500000000000000;
      v44 = 0x6E696D303020;
      v46 = 0x6E696D303020;
      v47 = 0xE600000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = sub_1A9CE88D4();
      v31 = v30;
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)" 0min";
      v51 = 0xE500000000000000;
      sub_1A9CE5EBC();
      v32 = sub_1A9CE88C8();
      v34 = v33;
      v26 = v45;
      v43(v7, v45);
      swift_bridgeObjectRelease();
      if (v29 != v32 || v31 != v34)
      {
        v35 = sub_1A9CE8BB0();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0)
          goto LABEL_12;
        swift_bridgeObjectRelease();
        v18 = 0xE700000000000000;
        v50 = v29;
        v51 = v31;
        v48 = *(_QWORD *)" 0 min";
        v49 = 0xE600000000000000;
        v44 = 0x6E696D20303020;
        v46 = 0x6E696D20303020;
        v47 = 0xE700000000000000;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1 = sub_1A9CE88D4();
        v37 = v36;
        swift_bridgeObjectRelease();
        v50 = *(_QWORD *)" 0 min";
        v51 = 0xE600000000000000;
        sub_1A9CE5EBC();
        v38 = sub_1A9CE88C8();
        v40 = v39;
        v26 = v45;
        v43(v7, v45);
        swift_bridgeObjectRelease();
        if (a1 != v38 || v37 != v40)
        {
          v41 = sub_1A9CE8BB0();
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            sub_1A9C0EFD8();
            swift_arrayDestroy();
            return a1;
          }
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    v50 = v44;
    v51 = v18;
    sub_1A9CE5EBC();
    a1 = sub_1A9CE88C8();
    v43(v7, v26);
    swift_bridgeObjectRelease();
    return a1;
  }
  swift_bridgeObjectRetain();
  return a1;
}

id ForceDoubleZerosDateComponentsFormatter.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ForceDoubleZerosDateComponentsFormatter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ForceDoubleZerosDateComponentsFormatter.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ForceDoubleZerosDateComponentsFormatter();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ForceDoubleZerosDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for ForceDoubleZerosDateComponentsFormatter);
}

id BriefOneHourIsSixtyMinDateComponentsFormatter.init()()
{
  void *v0;
  id v1;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter();
  v1 = objc_msgSendSuper2(&v3, sel_init);
  objc_msgSend(v1, sel_setZeroFormattingBehavior_, 0x10000);
  objc_msgSend(v1, sel_setUnitsStyle_, 5);

  return v1;
}

void BriefOneHourIsSixtyMinDateComponentsFormatter.init(coder:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C0E074()
{
  void *v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  objc_super v12;

  v1 = v0;
  v2 = sub_1A9CE6084();
  if ((v3 & 1) != 0)
    v4 = 0;
  else
    v4 = v2;
  v5 = sub_1A9CE6048();
  if ((v6 & 1) == 0)
  {
    if (v5 == 1)
    {
      if (!v4)
        goto LABEL_8;
      goto LABEL_10;
    }
    if (v5)
      goto LABEL_10;
  }
  if (v4 <= 60)
  {
LABEL_8:
    v7 = 64;
    goto LABEL_11;
  }
LABEL_10:
  v7 = 96;
LABEL_11:
  objc_msgSend(v0, sel_setAllowedUnits_, v7);
  v8 = (void *)sub_1A9CE6018();
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter();
  v9 = objc_msgSendSuper2(&v12, sel_stringFromDateComponents_, v8);

  if (!v9)
    return 0;
  v10 = sub_1A9CE82E0();

  return v10;
}

id BriefOneHourIsSixtyMinDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter);
}

uint64_t sub_1A9C0E164()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A9C0E1A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1A9C0E1F0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id ShorterDateComponentsFormatter.init(options:)(uint64_t a1)
{
  return sub_1A9C0EAF8(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, type metadata accessor for ShorterDateComponentsFormatter);
}

id ShorterDateComponentsFormatter.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void ShorterDateComponentsFormatter.init(coder:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C0E420()
{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;

  v1 = sub_1A9CE6048();
  if ((v2 & 1) != 0)
    v3 = 0;
  else
    v3 = v1;
  result = sub_1A9CE6084();
  v6 = 60 * v3;
  if ((unsigned __int128)(v3 * (__int128)60) >> 64 != (60 * v3) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((v5 & 1) != 0)
    v7 = 0;
  else
    v7 = result;
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  if (v8)
    goto LABEL_14;
  v10 = objc_msgSend(v0, sel_stringFromTimeInterval_, (double)v9 * 60.0);
  if (!v10)
    return 0;
  v11 = v10;
  v12 = sub_1A9CE82E0();

  return v12;
}

id sub_1A9C0E4E8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v6 = sub_1A9CE60C0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE6024();
  v11 = a1;
  a4(v10);
  v13 = v12;

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (!v13)
    return 0;
  v14 = (void *)sub_1A9CE82B0();
  swift_bridgeObjectRelease();
  return v14;
}

id ShorterDateComponentsFormatter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ShorterDateComponentsFormatter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ShorterDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for ShorterDateComponentsFormatter);
}

uint64_t sub_1A9C0E640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A9C0E684(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1A9C0E6CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id ShortHourDateComponentsFormatter.init(options:)(uint64_t a1)
{
  char *v1;
  id v2;
  objc_super v4;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ShortHourDateComponentsFormatter();
  v2 = objc_msgSendSuper2(&v4, sel_init);
  objc_msgSend(v2, sel_setUnitsStyle_, 2);
  objc_msgSend(v2, sel_setAllowedUnits_, 32);

  return v2;
}

void ShortHourDateComponentsFormatter.init(coder:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

uint64_t sub_1A9C0E838(double a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  id v5;
  objc_super v7;

  if (a1 / 60.0 / 60.0 != 0.0)
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a1);
    swift_beginAccess();
    v3 = (id)HKTimePeriodString();

    if (v3)
      goto LABEL_3;
    return 0;
  }
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for ShortHourDateComponentsFormatter();
  v3 = objc_msgSendSuper2(&v7, sel_stringFromTimeInterval_, a1);
  if (!v3)
    return 0;
LABEL_3:
  v4 = sub_1A9CE82E0();

  return v4;
}

void ShortHourDateComponentsFormatter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ShortHourDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for ShortHourDateComponentsFormatter);
}

uint64_t sub_1A9C0EA14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A9C0EA58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1A9C0EAA0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id ShortMinuteDateComponentsFormatter.init(options:)(uint64_t a1)
{
  return sub_1A9C0EAF8(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, type metadata accessor for ShortMinuteDateComponentsFormatter);
}

id sub_1A9C0EAF8(uint64_t a1, _QWORD *a2, uint64_t (*a3)(void))
{
  char *v3;
  objc_super v5;

  *(_QWORD *)&v3[*a2] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)a3();
  return objc_msgSendSuper2(&v5, sel_init);
}

void ShortMinuteDateComponentsFormatter.init(coder:)()
{
  sub_1A9CE8A84();
  __break(1u);
}

void ShortMinuteDateComponentsFormatter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ShortMinuteDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for ShortMinuteDateComponentsFormatter);
}

id AbbreviatedOneHourIsSixtyMinDateComponentsFormatter.init()()
{
  void *v0;
  id v1;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter();
  v1 = objc_msgSendSuper2(&v3, sel_init);
  objc_msgSend(v1, sel_setUnitsStyle_, 1);
  objc_msgSend(v1, sel_setAllowedUnits_, 96);

  return v1;
}

id AbbreviatedOneHourIsSixtyMinDateComponentsFormatter.__deallocating_deinit()
{
  return sub_1A9C0EEAC(type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter);
}

id sub_1A9C0EEAC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ShorterDateComponentsFormatter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ForceDoubleZerosDateComponentsFormatter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for BriefOneHourIsSixtyMinDateComponentsFormatter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ShortHourDateComponentsFormatter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ShortMinuteDateComponentsFormatter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AbbreviatedOneHourIsSixtyMinDateComponentsFormatter()
{
  return objc_opt_self();
}

unint64_t sub_1A9C0EF9C()
{
  unint64_t result;

  result = qword_1EEB46538;
  if (!qword_1EEB46538)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB46538);
  }
  return result;
}

void sub_1A9C0EFD8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46540)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46540);
  }
}

uint64_t sub_1A9C0F038@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options, a2);
}

uint64_t sub_1A9C0F044(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options);
}

uint64_t sub_1A9C0F050@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options, a2);
}

uint64_t sub_1A9C0F05C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options);
}

uint64_t sub_1A9C0F068@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options, a2);
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1A9C0F0C0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options);
}

uint64_t keypath_setTm(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t method lookup function for ForceDoubleZerosDateComponentsFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ForceDoubleZerosDateComponentsFormatter.forcingDoubleZerosForEnglish(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t method lookup function for ShorterDateComponentsFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.options.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShorterDateComponentsFormatter.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for ShortHourDateComponentsFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for ShortMinuteDateComponentsFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.options.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ShortMinuteDateComponentsFormatter.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1A9C0F218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9BB7054(0, &qword_1ED262DF0, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C0F26C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1A9BB7054(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id SleepSettingsModel.__allocating_init(sleepSettingsProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  v6 = sub_1A9C10EFC(v5, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v6;
}

id SleepSettingsModel.__allocating_init(sleepStore:)(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  char *v5;
  id v6;
  id v7;

  v1 = a1;
  v2 = HKSPSleepStore.settings.getter();
  v3 = objc_allocWithZone((Class)type metadata accessor for SleepSettingsProvider());
  v4 = SleepSettingsProvider.init(sleepStore:sleepSettings:)(v1, v2);
  v5 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  v6 = v4;
  v7 = sub_1A9C10C24((uint64_t)v6, v5);

  return v7;
}

id SleepSettingsModel.init(sleepSettingsProvider:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = sub_1A9C10D90((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

id sub_1A9C0F450()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_scheduledSleepMode);
}

void sub_1A9C0F478(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setScheduledSleepMode_);
}

void (*sub_1A9C0F484(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_scheduledSleepMode);
  return sub_1A9C0F4CC;
}

void sub_1A9C0F4CC(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setScheduledSleepMode_);
}

unint64_t sub_1A9C0F4D8()
{
  uint64_t v0;

  return ((unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) >> 14) & 1;
}

void sub_1A9C0F504(char a1)
{
  uint64_t v1;
  id v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  v4 = (unint64_t)objc_msgSend(v3, sel_sleepModeOptions);
  v5 = 0x4000;
  if ((a1 & 1) == 0)
    v5 = 0;
  objc_msgSend(v3, sel_setSleepModeOptions_, v4 & 0xFFFFFFFFFFFFBFFFLL | v5);

  sub_1A9C10408();
}

void (*sub_1A9C0F570(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = ((unsigned __int16)objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) & 0x4000) != 0;
  return sub_1A9C0F5BC;
}

void sub_1A9C0F5BC(uint64_t a1)
{
  sub_1A9C0F504(*(_BYTE *)(a1 + 8));
}

id sub_1A9C0F5E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepTracking);
}

void sub_1A9C0F608(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setSleepTracking_);
}

void (*sub_1A9C0F614(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_sleepTracking);
  return sub_1A9C0F65C;
}

void sub_1A9C0F65C(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setSleepTracking_);
}

id sub_1A9C0F668()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_timeInBedTracking);
}

void sub_1A9C0F690(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setTimeInBedTracking_);
}

void (*sub_1A9C0F69C(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_timeInBedTracking);
  return sub_1A9C0F6E4;
}

void sub_1A9C0F6E4(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setTimeInBedTracking_);
}

id sub_1A9C0F6F0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_bedtimeReminders);
}

void sub_1A9C0F718(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setBedtimeReminders_);
}

void (*sub_1A9C0F724(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_bedtimeReminders);
  return sub_1A9C0F76C;
}

void sub_1A9C0F76C(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setBedtimeReminders_);
}

id sub_1A9C0F778()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_wakeUpResults);
}

void sub_1A9C0F7A0(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setWakeUpResults_);
}

void (*sub_1A9C0F7AC(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_wakeUpResults);
  return sub_1A9C0F7F4;
}

void sub_1A9C0F7F4(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setWakeUpResults_);
}

unint64_t sub_1A9C0F800()
{
  uint64_t v0;

  return ((unint64_t)objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) >> 3) & 1;
}

void sub_1A9C0F82C(char a1)
{
  uint64_t v1;
  id v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  v4 = (unint64_t)objc_msgSend(v3, sel_sleepModeOptions);
  v5 = 8;
  if ((a1 & 1) == 0)
    v5 = 0;
  objc_msgSend(v3, sel_setSleepModeOptions_, v4 & 0xFFFFFFFFFFFFFFF7 | v5);

  sub_1A9C10408();
}

void (*sub_1A9C0F898(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions) & 8) != 0;
  return sub_1A9C0F8E4;
}

void sub_1A9C0F8E4(uint64_t a1)
{
  sub_1A9C0F82C(*(_BYTE *)(a1 + 8));
}

id sub_1A9C0F908()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_chargingReminders);
}

void sub_1A9C0F930(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setChargingReminders_);
}

void (*sub_1A9C0F93C(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_chargingReminders);
  return sub_1A9C0F984;
}

void sub_1A9C0F984(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setChargingReminders_);
}

id sub_1A9C0F990()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_shareAcrossDevices);
}

void sub_1A9C0F9B8(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setShareAcrossDevices_);
}

void (*sub_1A9C0F9C4(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_shareAcrossDevices);
  return sub_1A9C0FA0C;
}

void sub_1A9C0FA0C(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setShareAcrossDevices_);
}

id sub_1A9C0FA18()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_watchSleepFeaturesEnabled);
}

void sub_1A9C0FA40(char a1)
{
  sub_1A9C0FA4C(a1, (SEL *)&selRef_setWatchSleepFeaturesEnabled_);
}

void sub_1A9C0FA4C(char a1, SEL *a2)
{
  uint64_t v2;

  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), *a2, a1 & 1);
  sub_1A9C10408();
}

void (*sub_1A9C0FA78(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = objc_msgSend(*(id *)(v1 + v2), sel_watchSleepFeaturesEnabled);
  return sub_1A9C0FAC0;
}

void sub_1A9C0FAC0(uint64_t a1, uint64_t a2)
{
  sub_1A9C0FACC(a1, a2, (SEL *)&selRef_setWatchSleepFeaturesEnabled_);
}

void sub_1A9C0FACC(uint64_t a1, uint64_t a2, SEL *a3)
{
  objc_msgSend(*(id *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)), *a3, *(unsigned __int8 *)(a1 + 16));
  sub_1A9C10408();
}

uint64_t sub_1A9C0FB00()
{
  return sub_1A9C0FB18((uint64_t (*)(uint64_t, uint64_t))SleepSettingsProviding.hasSleepFocus.getter);
}

uint64_t sub_1A9C0FB0C()
{
  return sub_1A9C0FB18((uint64_t (*)(uint64_t, uint64_t))SleepSettingsProviding.mirrorsSleepFocus.getter);
}

uint64_t sub_1A9C0FB18(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24);
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  return a1(v4, v5) & 1;
}

uint64_t sub_1A9C0FB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD v26[2];
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  sub_1A9C115FC(0, &qword_1EEB46658, (uint64_t)&qword_1EEB46660, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1A9C11864, (void (*)(void))sub_1A9C115A4);
  v2 = *(_QWORD *)(v1 - 8);
  v29 = v1;
  v30 = v2;
  MEMORY[0x1E0C80A78](v1, v3);
  v28 = (char *)v26 - v4;
  sub_1A9BB5404();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C115FC(0, &qword_1EEB46670, (uint64_t)&qword_1EEB46678, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1A9C116A8, (void (*)(void))sub_1A9C11720);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)v26 - v13;
  v15 = (_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 32);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider), v16);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  sub_1A9C116A8(0, (unint64_t *)&qword_1EEB441B8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
  sub_1A9C11778();
  v18 = sub_1A9CE6E88();
  swift_release();
  v31 = v18;
  sub_1A9B94A18(0, (unint64_t *)&qword_1ED2625C0);
  v32 = (id)sub_1A9CE870C();
  v19 = sub_1A9CE8700();
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v27(v8, 1, 1, v19);
  sub_1A9C116A8(0, &qword_1EEB46678, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
  sub_1A9C11720();
  v26[1] = sub_1A9B92A68();
  sub_1A9CE6EAC();
  sub_1A9BB5AF4((uint64_t)v8);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9C117FC();
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  v20 = v15[3];
  v21 = v15[4];
  __swift_project_boxed_opaque_existential_1Tm(v15, v20);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
  sub_1A9C11864(0, (unint64_t *)&qword_1EEB45568, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
  sub_1A9C118CC();
  v22 = sub_1A9CE6E88();
  swift_release();
  v31 = v22;
  v32 = (id)sub_1A9CE870C();
  v27(v8, 1, 1, v19);
  sub_1A9C11864(0, &qword_1EEB46660, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
  sub_1A9C115A4();
  v23 = v28;
  sub_1A9CE6EAC();
  sub_1A9BB5AF4((uint64_t)v8);

  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A9C1192C();
  v24 = v29;
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  return swift_release();
}

void sub_1A9C0FFE4(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF4203E0](v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_1A9C100CC(v2);

  }
}

uint64_t sub_1A9C1003C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1AF4203E0](v2);
  if (result)
  {
    v4 = (void *)result;
    type metadata accessor for SleepSettingsModel();
    sub_1A9BE4B60(&qword_1EEB46650, v5, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
    sub_1A9CE6D98();

    sub_1A9CE6E10();
    return swift_release();
  }
  return result;
}

void sub_1A9C100CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  void *v25;
  uint64_t v26[4];

  v2 = v1;
  swift_getObjectType();
  objc_msgSend(a1, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45F80);
  if (swift_dynamicCast())
    v4 = v25;
  else
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8538]), sel_init);
  v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings;
  v6 = *(id *)(v2 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings);
  v7 = sub_1A9CE8814();

  if ((v7 & 1) == 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v8 = sub_1A9CE6990();
    __swift_project_value_buffer(v8, (uint64_t)qword_1ED262888);
    v9 = v4;
    v10 = sub_1A9CE6978();
    v11 = sub_1A9CE864C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v24 = swift_slowAlloc();
      v26[0] = v24;
      *(_DWORD *)v12 = 136446466;
      v13 = sub_1A9CE8D48();
      sub_1A9B91D6C(v13, v14, v26);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v15 = v9;
      type = v11;
      v16 = objc_msgSend(v15, sel_description);
      v17 = sub_1A9CE82E0();
      v19 = v18;

      sub_1A9B91D6C(v17, v19, v26);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v10, type, "[%{public}s] Updating sleep settings: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v24, -1, -1);
      MEMORY[0x1AF420344](v12, -1, -1);

    }
    else
    {

    }
    v20 = *(void **)(v2 + v5);
    *(_QWORD *)(v2 + v5) = v9;
    v21 = v9;

    type metadata accessor for SleepSettingsModel();
    sub_1A9BE4B60(&qword_1EEB46650, v22, (uint64_t (*)(uint64_t))type metadata accessor for SleepSettingsModel, (uint64_t)&protocol conformance descriptor for SleepSettingsModel);
    sub_1A9CE6D98();
    sub_1A9CE6E10();
    swift_release();
  }

}

void sub_1A9C10408()
{
  void *v0;
  uint64_t ObjectType;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  __objc2_class_ro **p_info;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t aBlock[6];

  ObjectType = swift_getObjectType();
  if (qword_1ED2628A0 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
  v3 = v0;
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE864C();
  p_info = _TtC13SleepHealthUI23SleepOnboardingUserInfo.info;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    aBlock[0] = v23;
    *(_DWORD *)v7 = 136446466;
    v8 = sub_1A9CE8D48();
    sub_1A9B91D6C(v8, v9, aBlock);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v10 = *(id *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings];
    v11 = objc_msgSend(v10, sel_description);
    v12 = sub_1A9CE82E0();
    v13 = ObjectType;
    v15 = v14;

    p_info = (__objc2_class_ro **)(_TtC13SleepHealthUI23SleepOnboardingUserInfo + 32);
    sub_1A9B91D6C(v12, v15, aBlock);
    sub_1A9CE888C();

    ObjectType = v13;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Saving sleep settings: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v23, -1, -1);
    MEMORY[0x1AF420344](v7, -1, -1);

  }
  else
  {

  }
  v16 = *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 24];
  v17 = *(_QWORD *)&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider + 32];
  __swift_project_boxed_opaque_existential_1Tm(&v3[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider], v16);
  v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
  v19 = *(void **)((char *)&p_info[194]->flags + (_QWORD)v3);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_1A9C119A4;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_12;
  v21 = _Block_copy(aBlock);
  v22 = v19;
  swift_release();
  objc_msgSend(v18, sel_saveCurrentSleepSettings_completion_, v22, v21);
  _Block_release(v21);

}

void sub_1A9C10710(char a1, id a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *oslog;
  void *v24;

  if ((a1 & 1) != 0)
  {
    if (qword_1ED2628A0 != -1)
      swift_once();
    v2 = sub_1A9CE6990();
    __swift_project_value_buffer(v2, (uint64_t)qword_1ED262888);
    oslog = sub_1A9CE6978();
    v3 = sub_1A9CE864C();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v24 = (void *)v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_1A9CE8D48();
      sub_1A9B91D6C(v6, v7, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, oslog, v3, "[%{public}s] Successfully saved sleep settings.", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v5, -1, -1);
      MEMORY[0x1AF420344](v4, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (a2)
    {
      v9 = a2;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_1A9BC0CD8(MEMORY[0x1E0DEE9D8]);
      sub_1A9BE4B60((unint64_t *)&qword_1EEB434A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1A9CEC328);
      sub_1A9CE61C8();
      v9 = v24;
    }
    v10 = a2;
    if (qword_1ED2628A0 != -1)
      swift_once();
    v11 = sub_1A9CE6990();
    __swift_project_value_buffer(v11, (uint64_t)qword_1ED262888);
    v12 = v9;
    v13 = v9;
    v14 = sub_1A9CE6978();
    v15 = sub_1A9CE8664();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v24 = (void *)v17;
      *(_DWORD *)v16 = 136446466;
      v18 = sub_1A9CE8D48();
      sub_1A9B91D6C(v18, v19, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      v20 = v9;
      sub_1A9BB15F4();
      v21 = sub_1A9CE82F8();
      sub_1A9B91D6C(v21, v22, (uint64_t *)&v24);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Error saving sleep settings: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v17, -1, -1);
      MEMORY[0x1AF420344](v16, -1, -1);

    }
    else
    {

    }
  }
}

id SleepSettingsModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepSettingsModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepSettingsModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepSettingsModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C10BEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SleepSettingsModel();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

id sub_1A9C10C24(uint64_t a1, char *a2)
{
  char *v4;
  id v5;
  id v6;
  objc_super v8;
  void *v9;
  id v10;
  _QWORD v11[5];

  v11[3] = type metadata accessor for SleepSettingsProvider();
  v11[4] = &protocol witness table for SleepSettingsProvider;
  v11[0] = a1;
  *(_QWORD *)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  sub_1A9B923D4((uint64_t)v11, (uint64_t)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider]);
  v4 = a2;
  swift_retain();
  sub_1A9CE6DD4();
  swift_release();
  objc_msgSend(v10, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45F80);
  if (swift_dynamicCast())
    v5 = v9;
  else
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8538]), sel_init);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings] = v5;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for SleepSettingsModel();
  v6 = objc_msgSendSuper2(&v8, sel_init);
  sub_1A9C0FB6C();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  return v6;
}

id sub_1A9C10D90(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  char *v9;
  void *v10;
  id v11;
  id v12;
  objc_super v14;
  void *v15;
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(_QWORD *)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_subscriptions] = MEMORY[0x1E0DEE9E8];
  sub_1A9B923D4((uint64_t)v16, (uint64_t)&a2[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettingsProvider]);
  v9 = a2;
  v10 = (void *)SleepSettingsProviding.sleepSettings.getter(a3, a4);
  objc_msgSend(v10, sel_mutableCopy);
  sub_1A9CE88EC();
  swift_unknownObjectRelease();
  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB45F80);
  if (swift_dynamicCast())
    v11 = v15;
  else
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA8538]), sel_init);

  *(_QWORD *)&v9[OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings] = v11;
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for SleepSettingsModel();
  v12 = objc_msgSendSuper2(&v14, sel_init);
  sub_1A9C0FB6C();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  return v12;
}

id sub_1A9C10EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (char *)objc_allocWithZone((Class)type metadata accessor for SleepSettingsModel());
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return sub_1A9C10D90((uint64_t)v9, v10, a3, a4);
}

uint64_t type metadata accessor for SleepSettingsModel()
{
  return objc_opt_self();
}

id sub_1A9C10FB4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_scheduledSleepMode, a2);
}

void sub_1A9C10FC0(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setScheduledSleepMode_);
}

id sub_1A9C10FCC@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions);
  *a2 = ((unsigned __int16)result & 0x4000) != 0;
  return result;
}

void sub_1A9C1100C(char *a1)
{
  sub_1A9C0F504(*a1);
}

id sub_1A9C11030@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_sleepTracking, a2);
}

void sub_1A9C1103C(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setSleepTracking_);
}

id sub_1A9C11048@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_timeInBedTracking, a2);
}

void sub_1A9C11054(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setTimeInBedTracking_);
}

id sub_1A9C11060@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_bedtimeReminders, a2);
}

void sub_1A9C1106C(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setBedtimeReminders_);
}

id sub_1A9C11078@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_wakeUpResults, a2);
}

void sub_1A9C11084(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setWakeUpResults_);
}

id sub_1A9C11090@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), sel_sleepModeOptions);
  *a2 = (result & 8) != 0;
  return result;
}

void sub_1A9C110D0(char *a1)
{
  sub_1A9C0F82C(*a1);
}

id sub_1A9C110F4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_chargingReminders, a2);
}

void sub_1A9C11100(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setChargingReminders_);
}

id sub_1A9C1110C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_shareAcrossDevices, a2);
}

void sub_1A9C11118(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setShareAcrossDevices_);
}

id sub_1A9C11124@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, (SEL *)&selRef_watchSleepFeaturesEnabled, a2);
}

id keypath_getTm_0@<X0>(_QWORD *a1@<X0>, SEL *a2@<X3>, _BYTE *a3@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), *a2);
  *a3 = (_BYTE)result;
  return result;
}

void sub_1A9C11168(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm_0(a1, a2, a3, a4, (SEL *)&selRef_setWatchSleepFeaturesEnabled_);
}

void keypath_setTm_0(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC13SleepHealthUI18SleepSettingsModel_sleepSettings), *a5, *a1);
  sub_1A9C10408();
}

uint64_t method lookup function for SleepSettingsModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepSettingsModel.__allocating_init(sleepSettingsProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isScheduledSleepFocusEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isUseSleepScreenEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isSleepTrackingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SleepSettingsModel.isTimeInBedTrackingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SleepSettingsModel.isBedtimeRemindersEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SleepSettingsModel.isWakeUpResultsEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SleepSettingsModel.isHideTimeEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SleepSettingsModel.isChargingRemindersEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of SleepSettingsModel.isShareAcrossDevicesEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of SleepSettingsModel.watchSleepFeaturesEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of SleepSettingsModel.hasSleepFocusMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of SleepSettingsModel.mirrorsSleepFocusMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

void sub_1A9C11540()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB45570)
  {
    sub_1A9B94A18(255, &qword_1EEB45578);
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB45570);
  }
}

unint64_t sub_1A9C115A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46668;
  if (!qword_1EEB46668)
  {
    sub_1A9C11864(255, &qword_1EEB46660, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46668);
  }
  return result;
}

void sub_1A9C115FC(uint64_t a1, unint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t (*)(void)), void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a4(255, a3, MEMORY[0x1E0C95D78]);
    sub_1A9B94A18(255, (unint64_t *)&qword_1ED2625C0);
    a5();
    sub_1A9B92A68();
    v7 = sub_1A9CE6D50();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1A9C116A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1A9B94A18(255, &qword_1EEB45560);
    v7 = a3(a1, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1A9C11720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46680;
  if (!qword_1EEB46680)
  {
    sub_1A9C116A8(255, &qword_1EEB46678, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46680);
  }
  return result;
}

unint64_t sub_1A9C11778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB441C0;
  if (!qword_1EEB441C0)
  {
    sub_1A9C116A8(255, (unint64_t *)&qword_1EEB441B8, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB441C0);
  }
  return result;
}

uint64_t sub_1A9C117D0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A9C117F4(void **a1)
{
  uint64_t v1;

  sub_1A9C0FFE4(a1, v1);
}

unint64_t sub_1A9C117FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46688;
  if (!qword_1EEB46688)
  {
    sub_1A9C115FC(255, &qword_1EEB46670, (uint64_t)&qword_1EEB46678, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1A9C116A8, (void (*)(void))sub_1A9C11720);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95CB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46688);
  }
  return result;
}

void sub_1A9C11864(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9C11540();
    v7 = a3(a1, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1A9C118CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46690;
  if (!qword_1EEB46690)
  {
    sub_1A9C11864(255, (unint64_t *)&qword_1EEB45568, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F88]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46690);
  }
  return result;
}

uint64_t sub_1A9C11924(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C1003C(a1, v1);
}

unint64_t sub_1A9C1192C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46698;
  if (!qword_1EEB46698)
  {
    sub_1A9C115FC(255, &qword_1EEB46658, (uint64_t)&qword_1EEB46660, (void (*)(uint64_t, uint64_t, uint64_t (*)(void)))sub_1A9C11864, (void (*)(void))sub_1A9C115A4);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0C95CB8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46698);
  }
  return result;
}

uint64_t sub_1A9C11994()
{
  return swift_deallocObject();
}

void sub_1A9C119A4(char a1, id a2)
{
  sub_1A9C10710(a1, a2);
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

_QWORD *WeatherPrefetcher.__allocating_init(model:scheduler:)(void *a1, void *a2)
{
  _QWORD *v4;

  swift_allocObject();
  v4 = sub_1A9C1388C(a1, a2);

  return v4;
}

id WeatherPrefetcher.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1A9C11A24()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C11A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  sub_1A9BD979C(0);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1A9BA6F90(a1, (uint64_t)&v11 - v8, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  swift_retain();
  sub_1A9CE6E70();
  return sub_1A9B97190((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1A9BD979C);
}

uint64_t sub_1A9C11B84()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C11BE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  sub_1A9BD979C(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9BA6F90(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  swift_retain();
  sub_1A9CE6E70();
  return sub_1A9B97190(a1, (uint64_t (*)(_QWORD))sub_1A9BD979C);
}

void (*sub_1A9C11CAC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1A9CE6E58();
  return sub_1A9BAFE14;
}

uint64_t sub_1A9C11D24()
{
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C11D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  sub_1A9BE6794(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12((char *)&v14 - v10, a1, v3);
  v12(v8, (uint64_t)v11, v3);
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t sub_1A9C11EBC()
{
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E40();
  return swift_endAccess();
}

uint64_t sub_1A9C11F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_1A9BE6794(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  sub_1A9CE6E4C();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1A9C12014(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1A9BE6794(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v3[16] = v9;
  sub_1A9CE6E40();
  swift_endAccess();
  return sub_1A9BB02B4;
}

_QWORD *WeatherPrefetcher.init(model:scheduler:)(void *a1, void *a2)
{
  _QWORD *v4;

  v4 = sub_1A9C1388C(a1, a2);

  return v4;
}

uint64_t sub_1A9C12128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t Strong;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58[3];

  v55 = a3;
  sub_1A9C13ED0(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BD979C(0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  v15 = (char *)&v50 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v50 - v17;
  v19 = type metadata accessor for CurrentWeatherModel(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (char *)&v50 - v26;
  sub_1A9BA6F90(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v28 = (uint64_t (*)(_QWORD))sub_1A9BD979C;
    v29 = (uint64_t)v18;
  }
  else
  {
    v53 = v20;
    v54 = v19;
    sub_1A9C13EEC((uint64_t)v18, (uint64_t)v27);
    if (qword_1EEB42E60 != -1)
      swift_once();
    v30 = sub_1A9CE6990();
    __swift_project_value_buffer(v30, (uint64_t)qword_1EEB49410);
    sub_1A9BA6F90((uint64_t)v27, (uint64_t)v24, type metadata accessor for CurrentWeatherModel);
    v31 = sub_1A9CE6978();
    v32 = sub_1A9CE867C();
    v33 = os_log_type_enabled(v31, v32);
    v52 = v11;
    if (v33)
    {
      v34 = swift_slowAlloc();
      v51 = swift_slowAlloc();
      v58[0] = v51;
      *(_DWORD *)v34 = 136446466;
      v35 = sub_1A9CE8D48();
      v57 = sub_1A9B91D6C(v35, v36, v58);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2082;
      v37 = sub_1A9C12634();
      v57 = sub_1A9B91D6C(v37, v38, v58);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      sub_1A9B97190((uint64_t)v24, type metadata accessor for CurrentWeatherModel);
      _os_log_impl(&dword_1A9B87000, v31, v32, "[%{public}s] weather model updated: %{public}s", (uint8_t *)v34, 0x16u);
      v39 = v51;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v39, -1, -1);
      MEMORY[0x1AF420344](v34, -1, -1);
    }
    else
    {
      sub_1A9B97190((uint64_t)v24, type metadata accessor for CurrentWeatherModel);
    }

    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    v42 = v53;
    v41 = v54;
    if (Strong)
    {
      v43 = Strong;
      v44 = (uint64_t)v56;
      sub_1A9CE62D0();
      v45 = sub_1A9CE62E8();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
      v46 = v43 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
      swift_beginAccess();
      sub_1A9C141CC(v44, v46);
      swift_endAccess();
      swift_release();
    }
    swift_beginAccess();
    v47 = swift_weakLoadStrong();
    if (v47)
    {
      v48 = *(id *)(v47 + 16);
      swift_release();
      sub_1A9BDA2B8();

    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1A9BA6F90((uint64_t)v27, (uint64_t)v15, type metadata accessor for CurrentWeatherModel);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v41);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_1A9BA6F90((uint64_t)v15, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_1A9BD979C);
      swift_retain();
      sub_1A9CE6E70();
      sub_1A9B97190((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1A9BD979C);
      swift_release();
      v29 = (uint64_t)v27;
      v28 = type metadata accessor for CurrentWeatherModel;
    }
    else
    {
      v28 = type metadata accessor for CurrentWeatherModel;
      v29 = (uint64_t)v27;
    }
  }
  return sub_1A9B97190(v29, v28);
}

uint64_t sub_1A9C12634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;

  sub_1A9C14210(0);
  v56 = v1;
  v60 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v61 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v5);
  v55 = (char *)&v54 - v6;
  v59 = sub_1A9CE65D0();
  v63 = *(char **)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v7);
  v57 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1A9CE6498();
  v9 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A9CE62E8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C14268(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v62 = (uint64_t)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v58 = (char *)&v54 - v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v66 = (uint64_t)&v54 - v26;
  v27 = sub_1A9CE6564();
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v32;
  v65 = v31;
  (*(void (**)(char *, uint64_t))(v32 + 16))(v30, v0);
  v33 = type metadata accessor for CurrentWeatherModel(0);
  sub_1A9CE654C();
  sub_1A9CE648C();
  v34 = v55;
  sub_1A9CE660C();
  v35 = *(void (**)(char *, uint64_t))(v9 + 8);
  v36 = v56;
  v35(v12, v54);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v69 = 0;
  v70 = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v69 = 60;
  v70 = 0xE100000000000000;
  v67 = v33;
  sub_1A9C14284();
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  v37 = v57;
  sub_1A9CE6558();
  sub_1A9B92B9C(&qword_1EEB46808, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEEB98], MEMORY[0x1E0CEEBD0]);
  v38 = v59;
  sub_1A9CE8B74();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  (*((void (**)(char *, uint64_t))v63 + 1))(v37, v38);
  sub_1A9CE8340();
  v63 = v30;
  sub_1A9CE6534();
  sub_1A9B92B9C(&qword_1EEB46810, (uint64_t (*)(uint64_t))sub_1A9C14210, MEMORY[0x1E0CAE360]);
  sub_1A9CE8B74();
  sub_1A9CE8340();
  v39 = (uint64_t)v58;
  swift_bridgeObjectRelease();
  v40 = *(void (**)(char *, uint64_t))(v60 + 8);
  v40(v34, v36);
  sub_1A9CE8340();
  sub_1A9BA6F90(v66, v39, (uint64_t (*)(_QWORD))sub_1A9C14268);
  v41 = sub_1A9CE6504();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  if (v44 == 1)
  {
    sub_1A9B97190(v39, (uint64_t (*)(_QWORD))sub_1A9C14268);
    v45 = 0;
    v46 = v61;
  }
  else
  {
    sub_1A9CE64EC();
    v46 = v61;
    sub_1A9CE5EB0();
    v40(v34, v36);
    sub_1A9CE5E98();
    v45 = v47;
    v40(v46, v36);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v41);
  }
  v67 = v45;
  v68 = v44 == 1;
  sub_1A9C142BC();
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  v48 = v62;
  sub_1A9BA6F90(v66, v62, (uint64_t (*)(_QWORD))sub_1A9C14268);
  v49 = v43(v48, 1, v41);
  if (v49 == 1)
  {
    sub_1A9B97190(v48, (uint64_t (*)(_QWORD))sub_1A9C14268);
    v50 = 0;
  }
  else
  {
    sub_1A9CE64F8();
    sub_1A9CE5EB0();
    v40(v34, v36);
    sub_1A9CE5E98();
    v50 = v51;
    v40(v46, v36);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v48, v41);
  }
  v67 = v50;
  v68 = v49 == 1;
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  v52 = v69;
  sub_1A9B97190(v66, (uint64_t (*)(_QWORD))sub_1A9C14268);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  return v52;
}

void sub_1A9C12C2C(uint64_t a1, uint64_t a2, const char *a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t Strong;
  id v14;
  uint64_t v15;
  uint64_t v16[3];

  if (qword_1EEB42E60 != -1)
    swift_once();
  v6 = sub_1A9CE6990();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EEB49410);
  v7 = sub_1A9CE6978();
  v8 = sub_1A9CE867C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16[0] = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = sub_1A9CE8D48();
    sub_1A9B91D6C(v11, v12, v16);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v7, v8, a3, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v10, -1, -1);
    MEMORY[0x1AF420344](v9, -1, -1);
  }

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = *(id *)(Strong + 16);
    v15 = swift_release();
    a4(v15);

  }
}

void sub_1A9C12DF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[3];
  uint64_t v86;
  uint64_t v87;

  v1 = v0;
  v81 = *v0;
  sub_1A9C13ED0(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v80 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A9CE62E8();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v76 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v74 - v11;
  sub_1A9BD979C(0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (char *)&v74 - v20;
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)&v74 - v23;
  v25 = type metadata accessor for CurrentWeatherModel(0);
  v83 = *(_QWORD *)(v25 - 8);
  v84 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EEB42E60 != -1)
    swift_once();
  v29 = sub_1A9CE6990();
  v82 = __swift_project_value_buffer(v29, (uint64_t)qword_1EEB49410);
  v30 = sub_1A9CE6978();
  v31 = sub_1A9CE867C();
  v32 = os_log_type_enabled(v30, v31);
  v77 = v17;
  v78 = v21;
  if (v32)
  {
    v33 = swift_slowAlloc();
    v74 = v5;
    v34 = (uint8_t *)v33;
    v35 = swift_slowAlloc();
    v85[0] = v35;
    v75 = v12;
    *(_DWORD *)v34 = 136446210;
    v79 = v6;
    v36 = sub_1A9CE8D48();
    v87 = sub_1A9B91D6C(v36, v37, v85);
    v6 = v79;
    v12 = v75;
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v30, v31, "[%{public}s] refreshing weather", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v35, -1, -1);
    v38 = v34;
    v5 = v74;
    MEMORY[0x1AF420344](v38, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1A9CE6E64();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v24, 1, v84) == 1)
  {
    v39 = sub_1A9BD979C;
    v40 = (uint64_t)v24;
LABEL_9:
    sub_1A9B97190(v40, (uint64_t (*)(_QWORD))v39);
    v44 = sub_1A9CE6978();
    v45 = sub_1A9CE867C();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v87 = v47;
      *(_DWORD *)v46 = 136446210;
      v48 = sub_1A9CE8D48();
      v86 = sub_1A9B91D6C(v48, v49, &v87);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v44, v45, "[%{public}s] weather not prefetched, fetching now", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v47, -1, -1);
      MEMORY[0x1AF420344](v46, -1, -1);
    }

    sub_1A9BD9D4C();
    return;
  }
  sub_1A9C13EEC((uint64_t)v24, (uint64_t)v28);
  v41 = (uint64_t)v1 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
  swift_beginAccess();
  v42 = v41;
  v43 = v80;
  sub_1A9BA6F90(v42, v80, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v43, 1, v5) == 1)
  {
    sub_1A9B97190((uint64_t)v28, type metadata accessor for CurrentWeatherModel);
    v39 = sub_1A9C13ED0;
    v40 = v43;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v12, v43, v5);
  sub_1A9CE6288();
  if (v50 <= -300.0)
  {
    v60 = v76;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v76, v12, v5);
    v61 = sub_1A9CE6978();
    v62 = sub_1A9CE867C();
    v63 = v62;
    if (os_log_type_enabled(v61, v62))
    {
      v64 = swift_slowAlloc();
      v82 = (uint64_t)v28;
      v65 = v64;
      v80 = swift_slowAlloc();
      v87 = v80;
      *(_DWORD *)v65 = 136446466;
      v66 = sub_1A9CE8D48();
      LODWORD(v81) = v63;
      v86 = sub_1A9B91D6C(v66, v67, &v87);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      sub_1A9B92B9C((unint64_t *)&qword_1ED262A68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v68 = sub_1A9CE8B74();
      v86 = sub_1A9B91D6C(v68, v69, &v87);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      v70 = *(void (**)(char *, uint64_t))(v6 + 8);
      v70(v60, v5);
      _os_log_impl(&dword_1A9B87000, v61, (os_log_type_t)v81, "[%{public}s] weather was prefetched at %s and is stale, fetching now", (uint8_t *)v65, 0x16u);
      v71 = v80;
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v71, -1, -1);
      v72 = v65;
      v28 = (char *)v82;
      MEMORY[0x1AF420344](v72, -1, -1);
    }
    else
    {
      v70 = *(void (**)(char *, uint64_t))(v6 + 8);
      v70(v60, v5);
    }

    v73 = (uint64_t)v78;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v78, 1, 1, v84);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9BA6F90(v73, (uint64_t)v77, (uint64_t (*)(_QWORD))sub_1A9BD979C);
    swift_retain();
    sub_1A9CE6E70();
    sub_1A9B97190(v73, (uint64_t (*)(_QWORD))sub_1A9BD979C);
    sub_1A9BD9D4C();
    v70(v12, v5);
    v59 = (uint64_t)v28;
  }
  else
  {
    v79 = v6;
    v51 = sub_1A9CE6978();
    v52 = sub_1A9CE867C();
    if (os_log_type_enabled(v51, v52))
    {
      v75 = v12;
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v87 = v54;
      *(_DWORD *)v53 = 136446210;
      v55 = sub_1A9CE8D48();
      v86 = sub_1A9B91D6C(v55, v56, &v87);
      v12 = v75;
      sub_1A9CE888C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v51, v52, "[%{public}s] weather was prefetched, updating", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v54, -1, -1);
      MEMORY[0x1AF420344](v53, -1, -1);
    }

    v58 = (uint64_t)v77;
    v57 = (uint64_t)v78;
    sub_1A9BA6F90((uint64_t)v28, (uint64_t)v78, type metadata accessor for CurrentWeatherModel);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v57, 0, 1, v84);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1A9BA6F90(v57, v58, (uint64_t (*)(_QWORD))sub_1A9BD979C);
    swift_retain();
    sub_1A9CE6E70();
    sub_1A9B97190(v57, (uint64_t (*)(_QWORD))sub_1A9BD979C);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v12, v5);
    v59 = (uint64_t)v28;
  }
  sub_1A9B97190(v59, type metadata accessor for CurrentWeatherModel);
}

uint64_t WeatherPrefetcher.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1A9B97190(v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WeatherPrefetcher.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1A9B97190(v0 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate, (uint64_t (*)(_QWORD))sub_1A9C13ED0);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C13850@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for WeatherPrefetcher();
  result = sub_1A9CE6D98();
  *a1 = result;
  return result;
}

_QWORD *sub_1A9C1388C(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];

  v3 = v2;
  v51 = a1;
  v52 = a2;
  v55 = *v2;
  sub_1A9BE6794(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v50 - v12;
  sub_1A9BD979C(0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v50 - v20;
  v22 = (char *)v2 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher__currentWeather;
  v23 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  sub_1A9BA6F90((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  sub_1A9CE6E34();
  sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9BD979C);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v22, v13, v9);
  v24 = (char *)v2 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_lastFetchedDate;
  v25 = sub_1A9CE62E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13SleepHealthUI17WeatherPrefetcher_cancellables) = MEMORY[0x1E0DEE9E8];
  if (qword_1EEB42E60 != -1)
    swift_once();
  v26 = sub_1A9CE6990();
  __swift_project_value_buffer(v26, (uint64_t)qword_1EEB49410);
  v27 = sub_1A9CE6978();
  v28 = sub_1A9CE867C();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v57[0] = v30;
    *(_DWORD *)v29 = 136446210;
    v50 = v7;
    v31 = v55;
    v32 = sub_1A9CE8D48();
    v56 = sub_1A9B91D6C(v32, v33, v57);
    sub_1A9CE888C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A9B87000, v27, v28, "[%{public}s] initializing...", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v30, -1, -1);
    v34 = v29;
    v35 = v31;
    v7 = v50;
    MEMORY[0x1AF420344](v34, -1, -1);

  }
  else
  {

    v35 = v55;
  }
  v37 = v51;
  v36 = v52;
  v3[2] = v51;
  v3[3] = v36;
  swift_beginAccess();
  v38 = v37;
  v39 = v36;
  sub_1A9CE6E40();
  swift_endAccess();
  v40 = swift_allocObject();
  swift_weakInit();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = v40;
  *(_QWORD *)(v41 + 24) = v35;
  sub_1A9B92B9C(&qword_1EEB45768, (uint64_t (*)(uint64_t))sub_1A9BE6794, MEMORY[0x1E0C96190]);
  v42 = v54;
  sub_1A9CE6EC4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v42);
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  v57[0] = *(_QWORD *)&v39[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldPrefetch];
  v43 = swift_allocObject();
  swift_weakInit();
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v43;
  *(_QWORD *)(v44 + 24) = v35;
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = sub_1A9C140F0;
  *(_QWORD *)(v45 + 24) = v44;
  sub_1A9C1413C();
  sub_1A9B92B9C(&qword_1EEB467F0, (uint64_t (*)(uint64_t))sub_1A9C1413C, MEMORY[0x1E0C95F48]);
  swift_retain();
  sub_1A9CE6EC4();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  v57[0] = *(_QWORD *)&v39[OBJC_IVAR____TtC13SleepHealthUI24WeatherPrefetchScheduler_onShouldCancel];
  v46 = swift_allocObject();
  swift_weakInit();
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v46;
  *(_QWORD *)(v47 + 24) = v35;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = sub_1A9C141A4;
  *(_QWORD *)(v48 + 24) = v47;
  swift_retain();
  sub_1A9CE6EC4();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_1A9CE6D74();
  swift_endAccess();
  swift_release();
  sub_1A9C5E3C8();
  return v3;
}

void sub_1A9C13ED0(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1ED2625E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1A9C13EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentWeatherModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C13F38()
{
  return type metadata accessor for WeatherPrefetcher();
}

uint64_t type metadata accessor for WeatherPrefetcher()
{
  uint64_t result;

  result = qword_1EEB466E0;
  if (!qword_1EEB466E0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1A9C13F7C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A9B92F34(319, &qword_1EEB45760, (uint64_t (*)(uint64_t))sub_1A9BD979C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1A9C13ED0(319);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for WeatherPrefetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of WeatherPrefetcher.currentWeather.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of WeatherPrefetcher.$currentWeather.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of WeatherPrefetcher.__allocating_init(model:scheduler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of WeatherPrefetcher.refreshWeather()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t sub_1A9C140A0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C140C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1A9C12128(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1A9C140CC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9C140F0()
{
  uint64_t v0;

  sub_1A9C12C2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), "[%{public}s] prefetching weather", (void (*)(uint64_t))sub_1A9BD9D4C);
}

uint64_t sub_1A9C14118()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1A9C1413C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB482A0)
  {
    v0 = sub_1A9CE6DBC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB482A0);
  }
}

void sub_1A9C141A4()
{
  uint64_t v0;

  sub_1A9C12C2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), "[%{public}s] cancelling weather", (void (*)(uint64_t))sub_1A9BDA2B8);
}

uint64_t sub_1A9C141CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9C13ED0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1A9C14210(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB452C0, (uint64_t (*)(uint64_t))sub_1A9C1422C, MEMORY[0x1E0CAE328]);
}

unint64_t sub_1A9C1422C()
{
  unint64_t result;

  result = qword_1EEB452C8;
  if (!qword_1EEB452C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB452C8);
  }
  return result;
}

void sub_1A9C14268(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB467F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1A9C14284()
{
  unint64_t result;

  result = qword_1EEB46800;
  if (!qword_1EEB46800)
  {
    type metadata accessor for CurrentWeatherModel(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB46800);
  }
  return result;
}

void sub_1A9C142BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED2628F0)
  {
    v0 = sub_1A9CE8880();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED2628F0);
  }
}

void _s9DragStateVwxx(uint64_t a1)
{

}

uint64_t _s9DragStateVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = v3;
  return a1;
}

uint64_t _s9DragStateVwca(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(void **)(a2 + 40);
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  v5 = v3;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9DragStateVwta(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t _s9DragStateVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s9DragStateVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s9DragStateVMa()
{
  return &_s9DragStateVN;
}

double sub_1A9C144E0(double a1, double a2)
{
  uint64_t v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double result;

  v5 = CACurrentMediaTime();
  v6 = *(double *)(v2 + 8);
  v7 = a1 - v6;
  if (a1 - v6 > 3.14159265)
  {
    v8 = a1 + -6.28318531;
    v6 = 0.0 - v6;
LABEL_5:
    v7 = v8 + v6;
    goto LABEL_6;
  }
  if (v7 < -3.14159265)
  {
    v8 = 6.28318531 - a1;
    goto LABEL_5;
  }
LABEL_6:
  if ((*(_BYTE *)(v2 + 1) & 1) == 0 && fabs(v7) > 2.22044605e-16)
  {
    *(_BYTE *)(v2 + 1) = 1;
    v7 = 0.0;
  }
  v9 = v7 / (v5 - *(double *)(v2 + 16));
  *(double *)(v2 + 32) = v9;
  v10 = a2;
  v11 = 1.0;
  if (v10 < 0.15)
  {
    v11 = 0.0;
    if (v10 > 0.0)
    {
      *(float *)&v11 = v10 / 0.15;
      objc_msgSend(*(id *)(v2 + 40), sel__solveForInput_, v11);
      v11 = v12;
    }
  }
  v13 = fabs(v9) / 0.975;
  if (v13 <= 1.0)
    v14 = v13 * 0.75 + 0.25;
  else
    v14 = 1.0;
  result = *(double *)(v2 + 24) + v7 * v14 * v11;
  *(double *)(v2 + 16) = v5;
  *(double *)(v2 + 24) = result;
  *(double *)(v2 + 8) = a1;
  return result;
}

uint64_t _s9DragStateV12GestureStateOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A9C14678 + 4 * byte_1A9CF081D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A9C146AC + 4 * byte_1A9CF0818[v4]))();
}

uint64_t sub_1A9C146AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C146B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C146BCLL);
  return result;
}

uint64_t sub_1A9C146C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C146D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A9C146D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C146DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9DragStateV12GestureStateOMa()
{
  return &_s9DragStateV12GestureStateON;
}

uint64_t _s9DragStateV8MovementOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A9C14744 + 4 * byte_1A9CF0827[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A9C14778 + 4 * byte_1A9CF0822[v4]))();
}

uint64_t sub_1A9C14778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C14780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A9C14788);
  return result;
}

uint64_t sub_1A9C14794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A9C1479CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A9C147A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A9C147A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s9DragStateV8MovementOMa()
{
  return &_s9DragStateV8MovementON;
}

unint64_t sub_1A9C147C8()
{
  unint64_t result;

  result = qword_1EEB46818;
  if (!qword_1EEB46818)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF088C, &_s9DragStateV8MovementON);
    atomic_store(result, (unint64_t *)&qword_1EEB46818);
  }
  return result;
}

unint64_t sub_1A9C14810()
{
  unint64_t result;

  result = qword_1EEB46820;
  if (!qword_1EEB46820)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF08F4, &_s9DragStateV12GestureStateON);
    atomic_store(result, (unint64_t *)&qword_1EEB46820);
  }
  return result;
}

uint64_t type metadata accessor for ScheduleOnboardingSection(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB46848);
}

uint64_t sub_1A9C14868()
{
  return swift_initClassMetadata2();
}

void sub_1A9C148CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t i;
  id v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char *v94;
  int64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(id *, _QWORD);
  __int128 v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  char *v129;
  void (*v130)(unint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  id v137;
  unint64_t v138;
  id v139;
  char v140;
  uint64_t v141;

  sub_1A9C07624();
  v123 = v1;
  v120 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (uint64_t)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v121 = (char *)&v116 - v7;
  v136 = sub_1A9CE6840();
  v132 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136, v8);
  v122 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v116 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v129 = (char *)&v116 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v133 = (char *)&v116 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v125 = (char *)&v116 - v22;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (uint64_t)&v116 - v26;
  v126 = v0;
  v28 = sub_1A9C155DC(v25);
  LOBYTE(v137) = *(_BYTE *)(v28 + 96);
  v30 = *(_QWORD *)(v28 + 32);
  v29 = *(_QWORD *)(v28 + 40);
  v31 = *(_QWORD *)(v28 + 48);
  swift_retain();
  sub_1A9BBBE74(v29, v30, v31, v27);
  swift_release();
  swift_release();
  v32 = (char *)MEMORY[0x1E0DEE9D8];
  v33 = sub_1A9CADFB4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v35 = *(_QWORD *)(v33 + 16);
  v34 = *(_QWORD *)(v33 + 24);
  v36 = v35 + 1;
  if (v35 >= v34 >> 1)
LABEL_70:
    v33 = sub_1A9CADFB4(v34 > 1, v36, 1, v33);
  *(_QWORD *)(v33 + 16) = v36;
  v124 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
  v135 = *(_QWORD *)(v132 + 72);
  v130 = *(void (**)(unint64_t, uint64_t, uint64_t))(v132 + 32);
  v130(v33 + v124 + v135 * v35, v27, v136);
  v141 = v33;
  v37 = v126;
  v134 = *(void (**)(char *, uint64_t))(v126 + qword_1EEB46828);
  sub_1A9CE6DD4();
  v38 = v137;
  v39 = objc_msgSend(v137, sel_occurrences);

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  v40 = sub_1A9CE83DC();

  v137 = v32;
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    v41 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v119 = v4;
  if (v41)
  {
    if (v41 < 1)
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      return;
    }
    for (i = 0; i != v41; ++i)
    {
      if ((v40 & 0xC000000000000001) != 0)
        v43 = (id)MEMORY[0x1AF41F600](i, v40);
      else
        v43 = *(id *)(v40 + 8 * i + 32);
      v44 = v43;
      if ((objc_msgSend(v43, sel_isSingleDayOverride) & 1) != 0)
      {

      }
      else
      {
        sub_1A9CE89F4();
        sub_1A9CE8A24();
        sub_1A9CE8A30();
        sub_1A9CE8A00();
      }
    }
    swift_bridgeObjectRelease();
    v45 = (unint64_t)v137;
    v37 = v126;
  }
  else
  {
    swift_bridgeObjectRelease();
    v45 = MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  v46 = sub_1A9C16C40(v45, v37);
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  v131 = v46;
  sub_1A9BB373C(v46);
  sub_1A9CE6DD4();
  v47 = v137;
  v48 = objc_msgSend(v137, sel_weekdaysWithOccurrences);
  v118 = v13;
  if (!v48)
  {
    v49 = 1;
LABEL_21:
    v50 = 1;
    goto LABEL_22;
  }
  if (!objc_msgSend(v47, sel_weekdaysWithoutOccurrences))
  {
    v49 = 0;
    goto LABEL_21;
  }
  v49 = (uint64_t)objc_msgSend(v47, sel_weekdaysWithOccurrences);
  v50 = 0;
LABEL_22:

  v51 = *(_QWORD *)(v37 + qword_1EEB46838);
  v52 = MEMORY[0x1E0DEA968];
  v53 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v117 = v54;
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v55 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v55 + 40) = v56;
  *(_QWORD *)(v55 + 48) = 0x7065656C53;
  *(_QWORD *)(v55 + 56) = 0xE500000000000000;
  *(_QWORD *)(v55 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v55 + 72) = 0xEA0000000000676ELL;
  v137 = (id)v55;
  sub_1A9BB35E8((uint64_t)&unk_1E55D1D78);
  sub_1A9B94CA0(0, &qword_1ED2632C0, v52, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v57 = sub_1A9CE8280();
  v59 = v58;
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  sub_1A9C17528(0, &qword_1EEB44438, (unint64_t *)&qword_1EEB449A0, MEMORY[0x1E0D2A060], v53);
  v60 = swift_allocObject();
  v116 = xmmword_1A9CEB520;
  *(_OWORD *)(v60 + 16) = xmmword_1A9CEB520;
  *(_QWORD *)(v60 + 56) = &type metadata for AddSchedulePromptRow;
  *(_QWORD *)(v60 + 64) = sub_1A9C1793C();
  v61 = swift_allocObject();
  *(_QWORD *)(v60 + 32) = v61;
  *(_QWORD *)(v61 + 16) = v49;
  *(_BYTE *)(v61 + 24) = v50;
  *(_QWORD *)(v61 + 32) = v51;
  *(_QWORD *)(v61 + 40) = v57;
  *(_QWORD *)(v61 + 48) = v59;
  v137 = 0;
  v138 = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  v137 = (id)0xD000000000000013;
  v138 = 0x80000001A9CFB930;
  sub_1A9CE6DD4();
  v62 = v139;
  if (objc_msgSend(v139, sel_weekdaysWithOccurrences))
  {
    v63 = objc_msgSend(v62, sel_weekdaysWithoutOccurrences);
    v32 = (char *)v124;
    v64 = v133;
    v65 = (void (*)(char *, char *, uint64_t))v130;
    if (v63)
    {
      v27 = (uint64_t)objc_msgSend(v62, sel_weekdaysWithOccurrences);
      v66 = 0;
    }
    else
    {
      v27 = 0;
      v66 = 1;
    }
  }
  else
  {
    v27 = 1;
    v66 = 1;
    v32 = (char *)v124;
    v64 = v133;
    v65 = (void (*)(char *, char *, uint64_t))v130;
  }

  v139 = (id)v27;
  v140 = v66;
  sub_1A9CE82F8();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  v67 = v125;
  sub_1A9CE6834();
  v130 = *(void (**)(unint64_t, uint64_t, uint64_t))(v132 + 16);
  v130((unint64_t)v64, (uint64_t)v67, v136);
  v36 = v141;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = sub_1A9CADFB4(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  v35 = *(_QWORD *)(v36 + 16);
  v68 = *(_QWORD *)(v36 + 24);
  if (v35 >= v68 >> 1)
    v36 = sub_1A9CADFB4(v68 > 1, v35 + 1, 1, v36);
  *(_QWORD *)(v36 + 16) = v35 + 1;
  v65(&v32[v36 + v35 * v135], v64, v136);
  v141 = v36;
  v134 = *(void (**)(char *, uint64_t))(v36 + 16);
  if (!v134)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    v77 = 0;
    goto LABEL_66;
  }
  v133 = *(char **)(v131 + 16);
  v128 = &v32[v131];
  swift_bridgeObjectRetain();
  v13 = 0;
  v4 = 32;
  while (1)
  {
    v33 = (unint64_t)&v32[v36];
    v69 = sub_1A9CE6828();
    v71 = v70;
    if (!v133)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    v34 = *(_QWORD *)(v131 + 16);
    if (!v34)
    {
      __break(1u);
      goto LABEL_70;
    }
    v72 = v69;
    v73 = v129;
    v74 = v136;
    v130((unint64_t)v129, (uint64_t)v128, v136);
    v75 = sub_1A9CE6828();
    v27 = v76;
    v127 = *(void (**)(char *, uint64_t))(v132 + 8);
    v127(v73, v74);
    if (v72 == v75 && v71 == v27)
      break;
    v35 = sub_1A9CE8BB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
LABEL_34:
    ++v13;
    v4 += 16;
    v32 += v135;
    if ((char *)v134 == v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_44:
  v78 = v121;
  sub_1A9CE6888();
  v79 = v123;
  v80 = sub_1A9CE6A38();
  v81 = *(void (**)(char *, uint64_t))(v120 + 8);
  v81(v78, v79);
  v82 = *(_QWORD *)(v80 + 16);
  swift_bridgeObjectRelease();
  if ((unint64_t)v13 >= v82 || (unint64_t)v13 >= *(_QWORD *)(v141 + 16))
  {
    v77 = 0;
    goto LABEL_66;
  }
  v83 = v119;
  sub_1A9CE6888();
  v84 = sub_1A9CE6A38();
  v81((char *)v83, v79);
  if ((unint64_t)v13 >= *(_QWORD *)(v84 + 16))
    goto LABEL_73;
  v134 = v81;
  v86 = *(_QWORD *)(v84 + v4);
  v85 = *(_QWORD *)(v84 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((unint64_t)v13 >= *(_QWORD *)(v141 + 16))
    goto LABEL_74;
  v87 = &v32[v141];
  v88 = v118;
  v89 = v136;
  v130((unint64_t)v118, (uint64_t)v87, v136);
  v90 = sub_1A9CE6828();
  v92 = v91;
  v127(v88, v89);
  if (v86 == v90 && v85 == v92)
  {
    swift_bridgeObjectRelease_n();
LABEL_65:
    v77 = 0;
    goto LABEL_66;
  }
  v93 = sub_1A9CE8BB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v93 & 1) != 0)
    goto LABEL_65;
  v94 = (char *)v141;
  v95 = *(_QWORD *)(v141 + 16);
  v96 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v95)
  {
    v137 = (id)MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1A9BE0464(0, v95, 0);
    v133 = v94;
    v97 = &v94[v124];
    do
    {
      v98 = v122;
      v99 = v136;
      v130((unint64_t)v122, (uint64_t)v97, v136);
      v100 = sub_1A9CE6828();
      v102 = v101;
      v127(v98, v99);
      v96 = v137;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A9BE0464(0, v96[2] + 1, 1);
        v96 = v137;
      }
      v104 = v96[2];
      v103 = v96[3];
      if (v104 >= v103 >> 1)
      {
        sub_1A9BE0464(v103 > 1, v104 + 1, 1);
        v96 = v137;
      }
      v96[2] = v104 + 1;
      v105 = &v96[2 * v104];
      v105[4] = v100;
      v105[5] = v102;
      v97 += v135;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
    v79 = v123;
  }
  v106 = v121;
  sub_1A9CE6888();
  v107 = sub_1A9CE6A38();
  v108 = v134;
  v134(v106, v79);
  if ((unint64_t)v13 >= *(_QWORD *)(v107 + 16))
    goto LABEL_75;
  v109 = *(_QWORD *)(v107 + v4);
  v110 = *(_QWORD *)(v107 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v109) = sub_1A9C15FD4(v109, v110, v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v109 & 1) == 0)
    goto LABEL_65;
  v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = v116;
  v111 = v121;
  sub_1A9CE6888();
  v112 = sub_1A9CE6A38();
  v108(v111, v79);
  if ((unint64_t)v13 >= *(_QWORD *)(v112 + 16))
    goto LABEL_76;
  v114 = *(_QWORD *)(v112 + v4);
  v113 = *(_QWORD *)(v112 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v77 + 32) = v114;
  *(_QWORD *)(v77 + 40) = v113;
LABEL_66:
  swift_bridgeObjectRetain();
  sub_1A9CE6864();
  swift_bridgeObjectRelease();
  if (v77)
  {
    v115 = (void (*)(id *, _QWORD))sub_1A9CE687C();
    sub_1A9CE6A2C();
    swift_bridgeObjectRelease();
    v115(&v137, 0);
    sub_1A9CE6870();
  }
  (*(void (**)(char *, uint64_t))(v132 + 8))(v125, v136);
  swift_bridgeObjectRelease();
}

uint64_t sub_1A9C155DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v1 = qword_1EEB46840;
  if (*(_QWORD *)(v0 + qword_1EEB46840))
  {
    v2 = *(_QWORD *)(v0 + qword_1EEB46840);
  }
  else
  {
    v3 = v0;
    v4 = *(_QWORD *)(v0 + qword_1EEB46838);
    v8 = 1;
    v5 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for GoalSectionProvider();
    swift_allocObject();
    v6 = swift_retain();
    v2 = sub_1A9BBCF68(v6, v4, &v8, (uint64_t)sub_1A9C17B34, v5);
    swift_release();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1A9C156D8()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1A9C148CC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9C1572C(void *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  _QWORD v16[2];

  v4 = v3;
  v8 = sub_1A9CE6318();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + qword_1EEB46840) = 0;
  v16[0] = a1;
  sub_1A9C17A9C();
  swift_allocObject();
  swift_retain();
  v13 = a1;
  *(_QWORD *)(v4 + qword_1EEB46828) = sub_1A9CE6DF8();
  *(double *)v16 = a3;
  LOBYTE(v16[1]) = 0;
  sub_1A9B92D08();
  swift_allocObject();
  *(_QWORD *)(v4 + qword_1EEB46830) = sub_1A9CE6DF8();
  *(_QWORD *)(v4 + qword_1EEB46838) = a2;
  swift_release();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  sub_1A9CE89B8();
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "MutableArray<");
  HIWORD(v16[1]) = -4864;
  sub_1A9CE630C();
  sub_1A9CE62F4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE8340();
  v14 = sub_1A9CE684C();
  swift_retain();
  sub_1A9C148CC();
  swift_release();

  return v14;
}

void sub_1A9C15908()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A9C15934()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1A9C15970()
{
  sub_1A9CE6894();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A9C159CC()
{
  return type metadata accessor for ScheduleOnboardingSection(0);
}

uint64_t sub_1A9C159D4@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t inited;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v44 = a2;
  v46 = a3;
  v72 = *MEMORY[0x1E0C80C00];
  v45 = type metadata accessor for ScheduleOccurrenceRow(0);
  MEMORY[0x1E0C80A78](v45, v4);
  v47 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *a1;
  sub_1A9CE77A0();
  *(_QWORD *)&v42 = sub_1A9CE77E8();
  swift_release();
  if (qword_1ED262D40 != -1)
    swift_once();
  v41 = qword_1ED262D68;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7818();
  v40 = sub_1A9CE786C();
  swift_release();
  if (qword_1EEB42D08 != -1)
    swift_once();
  v6 = qword_1EEB42EB8;
  v39 = qword_1EEB45958;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v38 = sub_1A9CE77E8();
  if (qword_1EEB42D00 != -1)
    swift_once();
  v7 = qword_1EEB45950;
  swift_retain();
  v8 = sub_1A9CE77E8();
  v9 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE7860();
  sub_1A9CE7824();
  v10 = sub_1A9CE786C();
  swift_release();
  v11 = qword_1EEB45958;
  swift_retain();
  sub_1A9CE78C0();
  sub_1A9CE7824();
  v12 = sub_1A9CE786C();
  swift_release();
  *(_QWORD *)&v48 = v42;
  BYTE8(v48) = 2;
  v49 = v41;
  v50 = 0;
  v51 = v40;
  v52 = 2;
  v53 = v39;
  v54 = 0;
  v55 = v38;
  v56 = 2;
  v57 = v7;
  v58 = 0;
  v59 = v8;
  v60 = 2;
  v61 = v9;
  v62 = 0;
  v63 = v10;
  v64 = 2;
  v65 = v11;
  v66 = 0;
  v67 = v12;
  v68 = 2;
  v69 = qword_1EEB45958;
  v70 = 0;
  v71 = 0;
  swift_retain();
  v13 = v47;
  v14 = v43;
  ScheduleOccurrenceViewModel.init(scheduleOccurrence:windDownTimeInterval:viewStyle:)(v43, 0, 1, &v48, v47);
  v15 = v44;
  v16 = *(_QWORD *)(v44 + qword_1EEB46828);
  swift_retain();
  v17 = objc_msgSend(v14, sel_weekdays);
  v18 = *(_QWORD *)(v15 + qword_1EEB46838);
  v43 = v17;
  v44 = v18;
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED263330, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v42 = xmmword_1A9CEB530;
  *(_OWORD *)(inited + 16) = xmmword_1A9CEB530;
  swift_retain();
  v20 = (id)HKSPIdentifierStringForWeekdays();
  v21 = sub_1A9CE82E0();
  v23 = v22;

  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 40) = v23;
  *(_QWORD *)(inited + 48) = 0xD000000000000010;
  *(_QWORD *)(inited + 56) = 0x80000001A9CFB950;
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1A9CED850;
  *(_QWORD *)(v24 + 32) = sub_1A9CE82E0();
  *(_QWORD *)(v24 + 40) = v25;
  *(_QWORD *)(v24 + 48) = 0x7065656C53;
  *(_QWORD *)(v24 + 56) = 0xE500000000000000;
  *(_QWORD *)(v24 + 64) = 0x696472616F626E4FLL;
  *(_QWORD *)(v24 + 72) = 0xEA0000000000676ELL;
  *(_QWORD *)&v48 = v24;
  v26 = swift_bridgeObjectRetain();
  sub_1A9BB35E8(v26);
  sub_1A9B94CA0(0, &qword_1ED2632C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9BB51C4();
  v27 = sub_1A9CE8280();
  v29 = v28;
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  sub_1A9C17528(0, &qword_1EEB44438, (unint64_t *)&qword_1EEB449A0, MEMORY[0x1E0D2A060], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = v42;
  v31 = v45;
  *(_QWORD *)(v30 + 56) = v45;
  *(_QWORD *)(v30 + 64) = sub_1A9B92B9C(&qword_1EEB468E8, type metadata accessor for ScheduleOccurrenceRow, (uint64_t)&unk_1A9CF0CF8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v30 + 32));
  sub_1A9BA6F90(v13, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ScheduleOccurrenceRow);
  *(_QWORD *)(v30 + 96) = &type metadata for EditScheduleOccurrenceRow;
  *(_QWORD *)(v30 + 104) = sub_1A9C179B8();
  v33 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v30 + 72) = v33;
  v34 = v43;
  v33[2] = v16;
  v33[3] = v34;
  v33[4] = v44;
  v33[5] = v27;
  v33[6] = v29;
  *(_QWORD *)&v48 = v31;
  sub_1A9C17A28();
  swift_retain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v48 = sub_1A9CE82F8();
  *((_QWORD *)&v48 + 1) = v35;
  sub_1A9CE8340();
  ScheduleOccurrenceViewModel.description.getter();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  sub_1A9CE6834();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1A9C17A60(v13);
}

uint64_t sub_1A9C15FD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1A9CE8BB0();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1A9CE8BB0() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C16098()
{
  type metadata accessor for ScheduleOccurrenceTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44758, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleOccurrenceTableViewCell, (uint64_t)&unk_1A9CF2D5C);
  sub_1A9CE8604();
  type metadata accessor for AddScheduleTableViewCell();
  sub_1A9B92B9C(&qword_1EEB468A0, (uint64_t (*)(uint64_t))type metadata accessor for AddScheduleTableViewCell, (uint64_t)&unk_1A9CEFB2C);
  sub_1A9CE8604();
  sub_1A9CE681C();
  sub_1A9CE8604();
  type metadata accessor for GoalTimePickerTableViewCell();
  sub_1A9B92B9C(&qword_1EEB44498, (uint64_t (*)(uint64_t))type metadata accessor for GoalTimePickerTableViewCell, (uint64_t)&unk_1A9CF2B08);
  return sub_1A9CE8604();
}

uint64_t sub_1A9C16174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t *v37;
  id v38;

  v37 = a1;
  sub_1A9C16BDC();
  v2 = v1;
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BB7054(0, &qword_1EEB468B0, (void (*)(uint64_t))MEMORY[0x1E0D2BB60]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - v8;
  v10 = sub_1A9CE85F8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1A9CE85E0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    v16 = sub_1A9CE64D4();
    v17 = *(int *)(v2 + 48);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v5, v14, v10);
    *(_QWORD *)&v5[v17] = v16;
    v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v5, v10);
    if (v18 == *MEMORY[0x1E0D2BB38])
    {
      if (v16 == 1)
      {
        if (qword_1ED2626A8 != -1)
          swift_once();
        v19 = (id)qword_1ED264F90;
        sub_1A9CE6168();

        v20 = sub_1A9CE8628();
        v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BB88];
        v22 = v37;
        v37[3] = v20;
        v22[4] = sub_1A9B92B9C(&qword_1EEB468C8, v21, MEMORY[0x1E0D2BB70]);
        __swift_allocate_boxed_opaque_existential_1(v22);
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    if (v18 == *MEMORY[0x1E0D2BB48])
    {
      if (v16 != 1)
      {
LABEL_21:
        v30 = sub_1A9CE85D4();
        v31 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BB28];
        v32 = v37;
        v37[3] = v30;
        v32[4] = sub_1A9B92B9C(&qword_1EEB468C0, v31, MEMORY[0x1E0D2BB10]);
        __swift_allocate_boxed_opaque_existential_1(v32);
        sub_1A9CE85C8();
        goto LABEL_25;
      }
LABEL_20:
      v27 = sub_1A9CE8640();
      v28 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BBA0];
      v29 = v37;
      v37[3] = v27;
      v29[4] = sub_1A9B92B9C(&qword_1EEB468B8, v28, MEMORY[0x1E0D2BB90]);
      __swift_allocate_boxed_opaque_existential_1(v29);
      sub_1A9CE8634();
LABEL_25:
      v36 = *(void (**)(char *, uint64_t))(v11 + 8);
      v36(v14, v10);
      return ((uint64_t (*)(char *, uint64_t))v36)(v5, v10);
    }
    if (v18 != *MEMORY[0x1E0D2BB30])
    {
      if (v18 == *MEMORY[0x1E0D2BB40])
      {
        v26 = *(_QWORD *)(sub_1A9CE6858() + 16);
        swift_bridgeObjectRelease();
        if (v26 - 1 != v16)
          goto LABEL_21;
      }
      goto LABEL_20;
    }
    v23 = *(_QWORD *)(sub_1A9CE6858() + 16);
    swift_bridgeObjectRelease();
    if (v23 - 1 != v16)
      goto LABEL_20;
    sub_1A9CE6DD4();
    v24 = v38;
    if (objc_msgSend(v38, sel_weekdaysWithOccurrences))
    {
      if (!objc_msgSend(v24, sel_weekdaysWithoutOccurrences))
      {

LABEL_23:
        v33 = v37;
        v34 = sub_1A9CE8628();
        v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BB88];
        v33[3] = v34;
        v33[4] = sub_1A9B92B9C(&qword_1EEB468C8, v35, MEMORY[0x1E0D2BB70]);
        __swift_allocate_boxed_opaque_existential_1(v33);
LABEL_24:
        sub_1A9CE8610();
        goto LABEL_25;
      }
      objc_msgSend(v24, sel_weekdaysWithOccurrences);
    }

    if (qword_1ED2626A8 != -1)
      swift_once();
    v25 = (id)qword_1ED264F90;
    sub_1A9CE6168();

    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A9C166B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A9C16174(a1);
}

uint64_t sub_1A9C166D4()
{
  uint64_t v1;

  sub_1A9C17A28();
  v1 = sub_1A9CE82F8();
  sub_1A9CE8340();
  ScheduleOccurrenceViewModel.description.getter();
  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1A9C16744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A9BA6F90(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for ScheduleOccurrenceViewModel);
}

uint64_t sub_1A9C16768()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C167A8()
{
  sub_1A9CE8C4C();
  ScheduleOccurrenceViewModel.hash(into:)();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C167E4()
{
  id v0;
  uint64_t v2;

  sub_1A9C19BB0();
  v2 = sub_1A9CE82F8();
  sub_1A9CE8340();
  v0 = (id)HKSPIdentifierStringForWeekdays();
  sub_1A9CE82E0();

  sub_1A9CE8340();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A9C1687C()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  return v1;
}

uint64_t (*sub_1A9C1693C())()
{
  return nullsub_1;
}

uint64_t sub_1A9C1694C()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C16990()
{
  return sub_1A9CE8C58();
}

uint64_t sub_1A9C169B8()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

BOOL sub_1A9C169F8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void sub_1A9C16A0C(uint64_t a1, void *a2)
{
  sub_1A9C16F2C(a2);
}

uint64_t sub_1A9C16A48()
{
  sub_1A9C19B78();
  return sub_1A9CE82F8();
}

uint64_t sub_1A9C16A78()
{
  return ScheduledDaysState.localizedPrompt.getter();
}

id sub_1A9C16AB0()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  id result;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    v2 = v1 == 2;
  else
    v2 = 1;
  if (v2)
  {
    result = (id)HKHealthTintColor();
    if (result)
      return result;
    __break(1u);
  }
  if (v1 != 1)
  {
LABEL_12:
    result = (id)sub_1A9CE8BBC();
    __break(1u);
    return result;
  }
  result = (id)BPSBridgeTintColor();
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1A9C16B2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A9C16B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

void sub_1A9C16B8C(uint64_t a1, void *a2)
{
  sub_1A9C17588(a2);
}

unint64_t sub_1A9C16B98()
{
  unint64_t result;

  result = qword_1EEB46898;
  if (!qword_1EEB46898)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0A00, &type metadata for EditScheduleOccurrenceRow);
    atomic_store(result, (unint64_t *)&qword_1EEB46898);
  }
  return result;
}

void sub_1A9C16BDC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB468A8)
  {
    sub_1A9CE85F8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB468A8);
  }
}

uint64_t sub_1A9C16C40(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v3 = v2;
  v19 = a2;
  v18 = sub_1A9CE6840();
  v5 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    if (!v9)
      return v10;
    v21 = MEMORY[0x1E0DEE9D8];
    result = sub_1A9BE0480(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v12 = 0;
    v10 = v21;
    v17 = a1 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v17)
        v13 = (id)MEMORY[0x1AF41F600](v12, a1);
      else
        v13 = *(id *)(a1 + 8 * v12 + 32);
      v14 = v13;
      v20 = v13;
      sub_1A9C159D4(&v20, v19, (uint64_t)v8);
      if (v3)
      {
        swift_release();

        return v10;
      }
      v3 = 0;

      v21 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1A9BE0480(v15 > 1, v16 + 1, 1);
        v10 = v21;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16, v8, v18);
      if (v9 == v12)
        return v10;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v9 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1A9C16E1C(uint64_t a1, uint64_t a2)
{
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  id v7;

  sub_1A9CE6DD4();
  v3 = objc_msgSend(v7, sel_occurrencesOnDays_, a2);

  sub_1A9B94A18(0, (unint64_t *)&qword_1EEB43540);
  v4 = sub_1A9CE83DC();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1A9CE8AC0();
    swift_bridgeObjectRelease();
    if (!v6)
      goto LABEL_6;
  }
  else if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1AF41F600](0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

void sub_1A9C16F2C(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;

  if (qword_1ED262DB8 != -1)
    swift_once();
  v3 = sub_1A9CE6990();
  __swift_project_value_buffer(v3, (uint64_t)qword_1ED2630B8);
  v4 = sub_1A9CE6978();
  v5 = sub_1A9CE867C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v34[0] = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)&v31[0] = sub_1A9B91D6C(0xD000000000000040, 0x80000001A9CFB8A0, v34);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v4, v5, "[%{public}s] Edit schedule occurrence row tapped", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v7, -1, -1);
    MEMORY[0x1AF420344](v6, -1, -1);
  }

  v33 = (uint64_t)a1;
  sub_1A9B94A18(0, &qword_1EEB43070);
  sub_1A9B94928(0, &qword_1EEB468D0);
  v8 = a1;
  if (swift_dynamicCast())
  {
    sub_1A9B949B8(v31, (uint64_t)v34);
    sub_1A9C16E1C(*v1, v1[1]);
    if (v9)
    {
      v10 = v9;
      v11 = v35;
      v12 = v36;
      __swift_project_boxed_opaque_existential_1Tm(v34, v35);
      (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v10, v11, v12);

    }
    else
    {
      sub_1A9BBE164((uint64_t)(v1 + 3), (uint64_t)v31);
      swift_retain();
      sub_1A9BBE1E8((uint64_t)v31);
      swift_retain();
      sub_1A9BBE1E8((uint64_t)v31);
      v23 = sub_1A9CE6978();
      v24 = sub_1A9CE8664();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v33 = v26;
        *(_DWORD *)v25 = 136446466;
        sub_1A9B91D6C(0xD000000000000040, 0x80000001A9CFB8A0, &v33);
        sub_1A9CE888C();
        *(_WORD *)(v25 + 12) = 2082;
        v27 = (id)NSStringFromHKSPWeekdays();
        v28 = sub_1A9CE82E0();
        v30 = v29;

        sub_1A9B91D6C(v28, v30, &v33);
        sub_1A9CE888C();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1A9BBE238((uint64_t)v31);
        swift_release();
        sub_1A9BBE238((uint64_t)v31);
        _os_log_impl(&dword_1A9B87000, v23, v24, "[%{public}s] Unable to edit occurrence for identifier: %{public}s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF420344](v26, -1, -1);
        MEMORY[0x1AF420344](v25, -1, -1);
      }
      else
      {
        swift_release();
        sub_1A9BBE238((uint64_t)v31);
        swift_release();
        sub_1A9BBE238((uint64_t)v31);
      }

    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  }
  else
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_1A9C174CC((uint64_t)v31);
    v13 = v8;
    v14 = sub_1A9CE6978();
    v15 = sub_1A9CE867C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v34[0] = v17;
      *(_DWORD *)v16 = 136446466;
      *(_QWORD *)&v31[0] = sub_1A9B91D6C(0xD000000000000040, 0x80000001A9CFB8A0, v34);
      sub_1A9CE888C();
      *(_WORD *)(v16 + 12) = 2082;
      v18 = v13;
      v19 = objc_msgSend(v18, sel_description);
      v20 = sub_1A9CE82E0();
      v22 = v21;

      *(_QWORD *)&v31[0] = sub_1A9B91D6C(v20, v22, v34);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v14, v15, "[%{public}s] Unable to present schedule edit on unknown view controller: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v17, -1, -1);
      MEMORY[0x1AF420344](v16, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1A9C174CC(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C17528(0, &qword_1EEB468D8, &qword_1EEB468D0, (uint64_t)&protocol descriptor for ScheduleActionHandling, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A9C17528(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1A9B94928(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1A9C17588(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  void *v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;

  if (qword_1ED262DB8 != -1)
    swift_once();
  v2 = sub_1A9CE6990();
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED2630B8);
  v3 = sub_1A9CE6978();
  v4 = sub_1A9CE867C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v23[0] = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)&v20[0] = sub_1A9B91D6C(0xD00000000000003BLL, 0x80000001A9CFB8F0, v23);
    sub_1A9CE888C();
    _os_log_impl(&dword_1A9B87000, v3, v4, "[%{public}s] Add schedule occurrence prompt row tapped", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF420344](v6, -1, -1);
    MEMORY[0x1AF420344](v5, -1, -1);
  }

  v22 = a1;
  sub_1A9B94A18(0, &qword_1EEB43070);
  sub_1A9B94928(0, &qword_1EEB468D0);
  v7 = a1;
  if (swift_dynamicCast())
  {
    sub_1A9B949B8(v20, (uint64_t)v23);
    v8 = v24;
    v9 = v25;
    __swift_project_boxed_opaque_existential_1Tm(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  }
  else
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_1A9C174CC((uint64_t)v20);
    v10 = v7;
    v11 = sub_1A9CE6978();
    v12 = sub_1A9CE867C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v23[0] = v14;
      *(_DWORD *)v13 = 136446466;
      *(_QWORD *)&v20[0] = sub_1A9B91D6C(0xD00000000000003BLL, 0x80000001A9CFB8F0, v23);
      sub_1A9CE888C();
      *(_WORD *)(v13 + 12) = 2082;
      v15 = v10;
      v16 = objc_msgSend(v15, sel_description);
      v17 = sub_1A9CE82E0();
      v19 = v18;

      *(_QWORD *)&v20[0] = sub_1A9B91D6C(v17, v19, v23);
      sub_1A9CE888C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A9B87000, v11, v12, "[%{public}s] Unable to present schedule compose on unknown view controller: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v14, -1, -1);
      MEMORY[0x1AF420344](v13, -1, -1);

    }
    else
    {

    }
  }
}

unint64_t sub_1A9C1793C()
{
  unint64_t result;

  result = qword_1EEB468E0;
  if (!qword_1EEB468E0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0D28, &type metadata for AddSchedulePromptRow);
    atomic_store(result, (unint64_t *)&qword_1EEB468E0);
  }
  return result;
}

uint64_t sub_1A9C17980()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ScheduleOccurrenceRow(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB46960);
}

unint64_t sub_1A9C179B8()
{
  unint64_t result;

  result = qword_1EEB468F0;
  if (!qword_1EEB468F0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0CC8, &type metadata for EditScheduleOccurrenceRow);
    atomic_store(result, (unint64_t *)&qword_1EEB468F0);
  }
  return result;
}

uint64_t sub_1A9C179FC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A9C17A28()
{
  unint64_t result;

  result = qword_1EEB468F8;
  if (!qword_1EEB468F8)
  {
    type metadata accessor for ScheduleOccurrenceRow(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB468F8);
  }
  return result;
}

uint64_t sub_1A9C17A60(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScheduleOccurrenceRow(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1A9C17A9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46900)
  {
    sub_1A9B94A18(255, (unint64_t *)&qword_1EEB45698);
    v0 = sub_1A9CE6DEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46900);
  }
}

uint64_t sub_1A9C17B10()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A9C17B34()
{
  return sub_1A9C156D8();
}

uint64_t *sub_1A9C17B3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v39;
  uint64_t v40;
  char *__dst;

  v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_1A9CE60C0();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = v6[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = v6[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *(uint64_t *)((char *)a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
    v19 = v6[10];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v20[24] = v21[24];
    v20[25] = v21[25];
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    v20[40] = v21[40];
    *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
    v20[56] = v21[56];
    v20[57] = v21[57];
    *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    v20[72] = v21[72];
    *((_QWORD *)v20 + 10) = *((_QWORD *)v21 + 10);
    v20[88] = v21[88];
    v20[89] = v21[89];
    *((_QWORD *)v20 + 12) = *((_QWORD *)v21 + 12);
    v20[104] = v21[104];
    *((_QWORD *)v20 + 14) = *((_QWORD *)v21 + 14);
    v20[120] = v21[120];
    v20[121] = v21[121];
    *((_QWORD *)v20 + 16) = *((_QWORD *)v21 + 16);
    v20[136] = v21[136];
    *((_QWORD *)v20 + 18) = *((_QWORD *)v21 + 18);
    v20[152] = v21[152];
    v20[153] = v21[153];
    *((_QWORD *)v20 + 20) = *((_QWORD *)v21 + 20);
    v20[168] = v21[168];
    *((_QWORD *)v20 + 22) = *((_QWORD *)v21 + 22);
    v20[184] = v21[184];
    v20[185] = v21[185];
    *((_QWORD *)v20 + 24) = *((_QWORD *)v21 + 24);
    v22 = v6[11];
    __dst = (char *)a1 + v22;
    v39 = (char *)a2 + v22;
    v23 = sub_1A9CE62E8();
    v40 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v24(v39, 1, v23))
    {
      sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      v26 = v40;
    }
    else
    {
      v26 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v39, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v23);
    }
    v27 = v6[12];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    if (v24((char *)a2 + v27, 1, v23))
    {
      sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v23);
    }
    v31 = v6[13];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    if (v24((char *)a2 + v31, 1, v23))
    {
      sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v32, v33, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v23);
    }
    v35 = v6[14];
    v36 = *(void **)((char *)a2 + v35);
    *(uint64_t *)((char *)a1 + v35) = (uint64_t)v36;
    v37 = v36;
  }
  return a1;
}

void _s13SleepHealthUI22ScheduleOccurrenceViewVwxx_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v2 = sub_1A9CE60C0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v4(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  v5 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v6 = a1 + v5[5];
  if (!v4(v6, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = a1 + v5[11];
  v8 = sub_1A9CE62E8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = a1 + v5[12];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  v12 = a1 + v5[13];
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);

}

char *sub_1A9C181D4(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v36;
  char *__dst;
  char *v38;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v6(a2, 1, v4))
  {
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  if (v6(&a2[v9], 1, v4))
  {
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v11, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  v13 = v8[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  a1[v8[9]] = a2[v8[9]];
  v16 = v8[10];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v17[24] = v18[24];
  v17[25] = v18[25];
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v17[40] = v18[40];
  *((_QWORD *)v17 + 6) = *((_QWORD *)v18 + 6);
  v17[56] = v18[56];
  v17[57] = v18[57];
  *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
  v17[72] = v18[72];
  *((_QWORD *)v17 + 10) = *((_QWORD *)v18 + 10);
  v17[88] = v18[88];
  v17[89] = v18[89];
  *((_QWORD *)v17 + 12) = *((_QWORD *)v18 + 12);
  v17[104] = v18[104];
  *((_QWORD *)v17 + 14) = *((_QWORD *)v18 + 14);
  v17[120] = v18[120];
  v17[121] = v18[121];
  *((_QWORD *)v17 + 16) = *((_QWORD *)v18 + 16);
  v17[136] = v18[136];
  *((_QWORD *)v17 + 18) = *((_QWORD *)v18 + 18);
  v17[152] = v18[152];
  v17[153] = v18[153];
  *((_QWORD *)v17 + 20) = *((_QWORD *)v18 + 20);
  v17[168] = v18[168];
  *((_QWORD *)v17 + 22) = *((_QWORD *)v18 + 22);
  v17[184] = v18[184];
  v17[185] = v18[185];
  *((_QWORD *)v17 + 24) = *((_QWORD *)v18 + 24);
  v19 = v8[11];
  v38 = a2;
  __dst = &a1[v19];
  v36 = &a2[v19];
  v20 = sub_1A9CE62E8();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v22(v36, 1, v20))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v36, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  v24 = v8[12];
  v25 = &a1[v24];
  v26 = &v38[v24];
  if (v22(&v38[v24], 1, v20))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v25, v26, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
  }
  v28 = v8[13];
  v29 = &a1[v28];
  v30 = &v38[v28];
  if (v22(&v38[v28], 1, v20))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v29, v30, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v29, 0, 1, v20);
  }
  v32 = v8[14];
  v33 = *(void **)&v38[v32];
  *(_QWORD *)&a1[v32] = v33;
  v34 = v33;
  return a1;
}

char *sub_1A9C186A0(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 24))(a1, a2, v4);
LABEL_7:
  v10 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v6(&a1[v11], 1, v4);
  v15 = v6(v13, 1, v4);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v12, v13, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_12:
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 24))(v12, v13, v4);
LABEL_13:
  v17 = v10[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  *(_QWORD *)&a1[v10[7]] = *(_QWORD *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  v21 = v10[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  swift_retain();
  swift_release();
  v22[8] = v23[8];
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  swift_retain();
  swift_release();
  v22[24] = v23[24];
  v22[25] = v23[25];
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  swift_retain();
  swift_release();
  v22[40] = v23[40];
  *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
  swift_retain();
  swift_release();
  v22[56] = v23[56];
  v22[57] = v23[57];
  *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
  swift_retain();
  swift_release();
  v22[72] = v23[72];
  *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
  swift_retain();
  swift_release();
  v22[88] = v23[88];
  v22[89] = v23[89];
  *((_QWORD *)v22 + 12) = *((_QWORD *)v23 + 12);
  swift_retain();
  swift_release();
  v22[104] = v23[104];
  *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
  swift_retain();
  swift_release();
  v22[120] = v23[120];
  v22[121] = v23[121];
  *((_QWORD *)v22 + 16) = *((_QWORD *)v23 + 16);
  swift_retain();
  swift_release();
  v22[136] = v23[136];
  *((_QWORD *)v22 + 18) = *((_QWORD *)v23 + 18);
  swift_retain();
  swift_release();
  v22[152] = v23[152];
  v22[153] = v23[153];
  *((_QWORD *)v22 + 20) = *((_QWORD *)v23 + 20);
  swift_retain();
  swift_release();
  v22[168] = v23[168];
  *((_QWORD *)v22 + 22) = *((_QWORD *)v23 + 22);
  swift_retain();
  swift_release();
  v22[184] = v23[184];
  v22[185] = v23[185];
  *((_QWORD *)v22 + 24) = *((_QWORD *)v23 + 24);
  v24 = v10[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_1A9CE62E8();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_18:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_19:
  v33 = v10[12];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = v29(&a1[v33], 1, v27);
  v37 = v29(v35, 1, v27);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v34, v35, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
LABEL_24:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v34, v35, v27);
LABEL_25:
  v39 = v10[13];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = v29(&a1[v39], 1, v27);
  v43 = v29(v41, 1, v27);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v40, v41, v27);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v40, v27);
    goto LABEL_30;
  }
  if (v43)
  {
LABEL_30:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v40, v41, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v40, 0, 1, v27);
LABEL_31:
  v45 = v10[14];
  v46 = *(void **)&a1[v45];
  v47 = *(void **)&a2[v45];
  *(_QWORD *)&a1[v45] = v47;
  v48 = v47;

  return a1;
}

char *sub_1A9C18CE8(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v6(a2, 1, v4))
  {
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  v8 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  if (v6(&a2[v9], 1, v4))
  {
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v11, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  }
  v13 = v8[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  a1[v8[9]] = a2[v8[9]];
  v16 = v8[10];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_OWORD *)v18 + 3);
  *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
  *((_OWORD *)v17 + 3) = v19;
  v20 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v20;
  v21 = *((_OWORD *)v18 + 7);
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  *((_OWORD *)v17 + 7) = v21;
  v22 = *((_OWORD *)v18 + 5);
  *((_OWORD *)v17 + 4) = *((_OWORD *)v18 + 4);
  *((_OWORD *)v17 + 5) = v22;
  *((_QWORD *)v17 + 24) = *((_QWORD *)v18 + 24);
  v23 = *((_OWORD *)v18 + 11);
  *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
  *((_OWORD *)v17 + 11) = v23;
  v24 = *((_OWORD *)v18 + 9);
  *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
  *((_OWORD *)v17 + 9) = v24;
  v25 = v8[11];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_1A9CE62E8();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = v8[12];
  v33 = &a1[v32];
  v34 = &a2[v32];
  if (v30(&a2[v32], 1, v28))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v34, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  v36 = v8[13];
  v37 = &a1[v36];
  v38 = &a2[v36];
  if (v30(&a2[v36], 1, v28))
  {
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v37, v38, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  *(_QWORD *)&a1[v8[14]] = *(_QWORD *)&a2[v8[14]];
  return a1;
}

char *sub_1A9C19048(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;

  v4 = sub_1A9CE60C0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(a1, a2, v4);
LABEL_7:
  v10 = (int *)type metadata accessor for ScheduleOccurrenceViewModel();
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v6(&a1[v11], 1, v4);
  v15 = v6(v13, 1, v4);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v13, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_12:
    sub_1A9BB7054(0, &qword_1EEB44248, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v12, v13, v4);
LABEL_13:
  v17 = v10[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)&a1[v10[7]] = *(_QWORD *)&a2[v10[7]];
  a1[v10[8]] = a2[v10[8]];
  a1[v10[9]] = a2[v10[9]];
  v20 = v10[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  swift_release();
  v21[8] = v22[8];
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  swift_release();
  v21[24] = v22[24];
  v21[25] = v22[25];
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  swift_release();
  v21[40] = v22[40];
  *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
  swift_release();
  v21[56] = v22[56];
  v21[57] = v22[57];
  *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
  swift_release();
  v21[72] = v22[72];
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  swift_release();
  v21[88] = v22[88];
  v21[89] = v22[89];
  *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
  swift_release();
  v21[104] = v22[104];
  *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
  swift_release();
  v21[120] = v22[120];
  v21[121] = v22[121];
  *((_QWORD *)v21 + 16) = *((_QWORD *)v22 + 16);
  swift_release();
  v21[136] = v22[136];
  *((_QWORD *)v21 + 18) = *((_QWORD *)v22 + 18);
  swift_release();
  v21[152] = v22[152];
  v21[153] = v22[153];
  *((_QWORD *)v21 + 20) = *((_QWORD *)v22 + 20);
  swift_release();
  v21[168] = v22[168];
  *((_QWORD *)v21 + 22) = *((_QWORD *)v22 + 22);
  swift_release();
  v21[184] = v22[184];
  v21[185] = v22[185];
  *((_QWORD *)v21 + 24) = *((_QWORD *)v22 + 24);
  v23 = v10[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = sub_1A9CE62E8();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_18:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_19:
  v32 = v10[12];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = v28(&a1[v32], 1, v26);
  v36 = v28(v34, 1, v26);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v34, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
LABEL_24:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v33, v34, v26);
LABEL_25:
  v38 = v10[13];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = v28(&a1[v38], 1, v26);
  v42 = v28(v40, 1, v26);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v39, v40, v26);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v39, v26);
    goto LABEL_30;
  }
  if (v42)
  {
LABEL_30:
    sub_1A9BB7054(0, &qword_1ED2625E0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v39, v40, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v39, 0, 1, v26);
LABEL_31:
  v44 = v10[14];
  v45 = *(void **)&a1[v44];
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];

  return a1;
}

uint64_t sub_1A9C1962C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C19638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1A9C19674()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C19680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScheduleOccurrenceViewModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1A9C196C0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ScheduleOccurrenceViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for EditScheduleOccurrenceRow()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EditScheduleOccurrenceRow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EditScheduleOccurrenceRow(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EditScheduleOccurrenceRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditScheduleOccurrenceRow(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditScheduleOccurrenceRow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditScheduleOccurrenceRow()
{
  return &type metadata for EditScheduleOccurrenceRow;
}

uint64_t destroy for AddSchedulePromptRow()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AddSchedulePromptRow(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AddSchedulePromptRow(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AddSchedulePromptRow(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AddSchedulePromptRow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AddSchedulePromptRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AddSchedulePromptRow()
{
  return &type metadata for AddSchedulePromptRow;
}

unint64_t sub_1A9C19AC0()
{
  unint64_t result;

  result = qword_1EEB46998;
  if (!qword_1EEB46998)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0970, &type metadata for AddSchedulePromptRow);
    atomic_store(result, (unint64_t *)&qword_1EEB46998);
  }
  return result;
}

unint64_t sub_1A9C19B08()
{
  unint64_t result;

  result = qword_1EEB469A0;
  if (!qword_1EEB469A0)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF09B8, &type metadata for EditScheduleOccurrenceRow);
    atomic_store(result, (unint64_t *)&qword_1EEB469A0);
  }
  return result;
}

uint64_t sub_1A9C19B4C()
{
  return sub_1A9B92B9C(&qword_1EEB469A8, type metadata accessor for ScheduleOccurrenceRow, (uint64_t)&unk_1A9CF0C28);
}

unint64_t sub_1A9C19B78()
{
  unint64_t result;

  result = qword_1EEB469B0;
  if (!qword_1EEB469B0)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB469B0);
  }
  return result;
}

unint64_t sub_1A9C19BB0()
{
  unint64_t result;

  result = qword_1EEB469B8;
  if (!qword_1EEB469B8)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEB469B8);
  }
  return result;
}

uint64_t ScheduleStatus.enabledTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  return v1;
}

uint64_t ScheduleStatus.disabledTitle.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v0 = (id)qword_1ED264F90;
  v1 = sub_1A9CE6168();

  return v1;
}

uint64_t static ScheduleStatus.== infix(_:_:)()
{
  return 1;
}

uint64_t ScheduleStatus.hash(into:)()
{
  return sub_1A9CE8C58();
}

uint64_t ScheduleStatus.hashValue.getter()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C19DC0()
{
  return 1;
}

uint64_t sub_1A9C19DC8()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

uint64_t sub_1A9C19E08()
{
  return sub_1A9CE8C58();
}

uint64_t sub_1A9C19E2C()
{
  sub_1A9CE8C4C();
  sub_1A9CE8C58();
  return sub_1A9CE8C7C();
}

unint64_t sub_1A9C19E6C()
{
  unint64_t result;

  result = qword_1EEB469C0;
  if (!qword_1EEB469C0)
  {
    result = MEMORY[0x1AF420284](&protocol conformance descriptor for ScheduleStatus, &type metadata for ScheduleStatus);
    atomic_store(result, (unint64_t *)&qword_1EEB469C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScheduleStatus(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ScheduleStatus(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A9C19F44 + 4 * byte_1A9CF0D58[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A9C19F64 + 4 * byte_1A9CF0D5D[v4]))();
}

_BYTE *sub_1A9C19F44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A9C19F64(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A9C19F6C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A9C19F74(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A9C19F7C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A9C19F84(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1A9C19F90()
{
  return 0;
}

ValueMetadata *type metadata accessor for ScheduleStatus()
{
  return &type metadata for ScheduleStatus;
}

void sub_1A9C19FA8(double a1)
{
  double v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;

  v1 = a1 / 3600.0;
  if (a1 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((*(_QWORD *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v2 = 3600 * (uint64_t)v1;
  if ((unsigned __int128)((uint64_t)v1 * (__int128)3600) >> 64 == v2 >> 63)
  {
    v3 = (double)v2;
    v4 = a1 - (double)v2;
    sub_1A9B94CA0(0, (unint64_t *)&qword_1ED2634A8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1A9CEB530;
    *(double *)(v5 + 32) = v3;
    *(double *)(v5 + 40) = v4;
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1A9C1A074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  double v26;
  double v27;
  objc_class *v28;
  char *v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t *v41;
  uint64_t (*v42)(void);
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  void *v72;
  void **v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  void *v85;
  objc_super v86;
  __int128 v87;

  v2 = v1;
  sub_1A9B92F34(0, &qword_1EEB46A18, (uint64_t (*)(uint64_t))sub_1A9C1B6A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v72 - v6;
  sub_1A9C1B858();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C1B7F4();
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C1B748(0);
  v76 = v19;
  v78 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v79 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v77 = (char *)&v72 - v24;
  v25 = *(void **)(*(_QWORD *)(v2 + 8) + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v25)
  {
    objc_msgSend(v25, sel_windDownTime);
    v27 = v26;
  }
  else
  {
    v27 = 0.0;
  }
  v28 = (objc_class *)type metadata accessor for ShorterDateComponentsFormatter();
  v29 = (char *)objc_allocWithZone(v28);
  *(_QWORD *)&v29[OBJC_IVAR____TtC13SleepHealthUI30ShorterDateComponentsFormatter_options] = 4;
  v86.receiver = v29;
  v86.super_class = v28;
  v30 = objc_msgSendSuper2(&v86, sel_init);
  v31 = objc_msgSend(v30, sel_stringFromTimeInterval_, v27);

  if (v31)
  {
    v75 = v7;
    v74 = a1;
    v32 = sub_1A9CE82E0();
    v34 = v33;

    v35 = (_OWORD *)swift_allocObject();
    v73 = &v72;
    v36 = *(_OWORD *)(v2 + 48);
    v35[3] = *(_OWORD *)(v2 + 32);
    v35[4] = v36;
    v35[5] = *(_OWORD *)(v2 + 64);
    v37 = *(_OWORD *)(v2 + 16);
    v35[1] = *(_OWORD *)v2;
    v35[2] = v37;
    MEMORY[0x1E0C80A78](v35, v38);
    *(&v72 - 2) = (void *)v32;
    *(&v72 - 1) = v34;
    sub_1A9C1BC34((_QWORD *)v2);
    sub_1A9C1B8D0();
    sub_1A9B92B9C((unint64_t *)&qword_1EEB46A68, (uint64_t (*)(uint64_t))sub_1A9C1B8D0, MEMORY[0x1E0CDFB10]);
    sub_1A9CE7E00();
    swift_bridgeObjectRelease();
    v39 = sub_1A9CE7CD4();
    KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v18, v13, v9);
    v41 = (uint64_t *)&v18[*(int *)(v15 + 36)];
    *v41 = KeyPath;
    v41[1] = v39;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v87 = *(_OWORD *)(v2 + 32);
    v82 = *(_OWORD *)(v2 + 32);
    v42 = MEMORY[0x1E0CDF9A8];
    sub_1A9C1BCB8(0, &qword_1EEB46AA0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
    sub_1A9CE7DD0();
    v43 = (_OWORD *)swift_allocObject();
    v44 = *(_OWORD *)(v2 + 48);
    v43[3] = *(_OWORD *)(v2 + 32);
    v43[4] = v44;
    v43[5] = *(_OWORD *)(v2 + 64);
    v45 = *(_OWORD *)(v2 + 16);
    v43[1] = *(_OWORD *)v2;
    v43[2] = v45;
    sub_1A9C1BC34((_QWORD *)v2);
    sub_1A9B94CA0(0, &qword_1EEB469C8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1A9C1BA7C();
    sub_1A9C1BB14();
    v46 = v79;
    sub_1A9CE7C08();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1A9C1BD90((uint64_t)v18);
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v46, v76);
    v82 = *(_OWORD *)(v2 + 16);
    sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v42);
    sub_1A9CE7DD0();
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    if (v80 == 1)
    {
      v55 = *(_OWORD *)(v2 + 64);
      v80 = *(_OWORD *)(v2 + 48);
      v81 = v55;
      sub_1A9B94CA0(0, &qword_1EEB46AA8, (uint64_t)&type metadata for WindDownPickerModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
      sub_1A9CE7DE8();
      v48 = (void **)*((_QWORD *)&v82 + 1);
      v47 = v82;
      v49 = v83;
      v50 = v84;
      v51 = v85;
      v80 = v87;
      sub_1A9CE7DE8();
      v53 = *((_QWORD *)&v82 + 1);
      v52 = v82;
      v54 = v83;
    }
    v72 = v51;
    v73 = v48;
    v56 = v79;
    v57 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
    v58 = v76;
    v59 = v52;
    v60 = v53;
    v61 = v54;
    v57(v79, v77, v76);
    v62 = v75;
    v57(v75, v56, v58);
    sub_1A9C1B6C4();
    v64 = (uint64_t *)&v62[*(int *)(v63 + 48)];
    v65 = (uint64_t)v73;
    *v64 = v47;
    v64[1] = v65;
    v64[2] = v49;
    v64[3] = (uint64_t)v50;
    v66 = v72;
    v64[4] = (uint64_t)v72;
    v64[5] = v59;
    v64[6] = v60;
    v64[7] = v61;
    sub_1A9C1BDCC(v47, v65, v49, v50, v66);
    v67 = *(void (**)(char *, uint64_t))(v78 + 8);
    v67(v77, v58);
    sub_1A9C1BE58(v47, v65, v49, v50, v66);
    v67(v79, v58);
    sub_1A9C1B6A8(0);
    v69 = (uint64_t)v75;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v75, 0, 1, v68);
    return sub_1A9C1BEE0(v69, v74);
  }
  else
  {
    sub_1A9C1B6A8(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(a1, 1, 1, v71);
  }
}

uint64_t sub_1A9C1A6A8()
{
  sub_1A9CE8004();
  sub_1A9CE70A4();
  return swift_release();
}

uint64_t sub_1A9C1A704()
{
  sub_1A9B94CA0(0, (unint64_t *)&qword_1EEB446A0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DD0();
  return sub_1A9CE7DDC();
}

__n128 sub_1A9C1A798@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v2 = sub_1A9CE7398();
  sub_1A9C1A828((uint64_t)&v11);
  v3 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v15;
  v7 = v17;
  v8 = v18;
  result = v11;
  v10 = v16;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  return result;
}

uint64_t sub_1A9C1A828@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_1ED2626A8 != -1)
    swift_once();
  v2 = (id)qword_1ED264F90;
  sub_1A9CE6168();

  swift_bridgeObjectRelease();
  sub_1A9BA8EA4();
  v3 = sub_1A9CE79C8();
  v22 = v4;
  v23 = v3;
  v24 = v5;
  v21 = v6 & 1;
  swift_bridgeObjectRetain();
  v7 = sub_1A9CE79C8();
  v9 = v8;
  v11 = v10 & 1;
  v12 = objc_msgSend((id)objc_opt_self(), sel_tintColor, 0xE000000000000000);
  MEMORY[0x1AF41E85C](v12);
  v13 = sub_1A9CE7968();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release();
  v17 &= 1u;
  sub_1A9BAA670(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v22;
  *(_BYTE *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v15;
  *(_BYTE *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v19;
  sub_1A9BAA680(v23, v22, v21);
  swift_bridgeObjectRetain();
  sub_1A9BAA680(v13, v15, v17);
  swift_bridgeObjectRetain();
  sub_1A9BAA670(v13, v15, v17);
  swift_bridgeObjectRelease();
  sub_1A9BAA670(v23, v22, v21);
  return swift_bridgeObjectRelease();
}

void sub_1A9C1AA70(uint64_t a1, uint64_t a2, __int128 *a3)
{
  double v4;
  uint64_t v5;
  void *v6;
  double v7;
  void *v8;
  id v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void *v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  id v19;
  objc_class *v20;
  char *v21;
  objc_super v22;
  objc_super v23;
  __int128 v24;

  v4 = sub_1A9C1ACC8();
  v24 = *a3;
  v5 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  v6 = *(void **)(*((_QWORD *)&v24 + 1) + OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule);
  if (v6)
  {
    objc_msgSend(v6, sel_windDownTime);
    if (v7 == v4)
      return;
    v8 = *(void **)(*((_QWORD *)&v24 + 1) + v5);
  }
  else
  {
    if (v4 == 0.0)
      return;
    v8 = 0;
  }
  v9 = *((id *)&v24 + 1);
  objc_msgSend(v8, sel_setWindDownTime_, v4);
  sub_1A9BE3DB8();
  sub_1A9C1BF3C((uint64_t)&v24);
  v10 = *MEMORY[0x1E0DA84B0] * 60.0;
  sub_1A9CBB30C(0.0, v10 + 1.0, 3600.0);
  v12 = v11;
  if (v4 >= v10)
  {
    v15 = &unk_1E55D2728;
  }
  else
  {
    v13 = *MEMORY[0x1E0DA84C8] * 60.0;
    if (v13 == 0.0)
    {
      __break(1u);
      return;
    }
    sub_1A9CBB30C(0.0, 3600.0, v13);
    v15 = v14;
  }
  sub_1A9C1BCB8(0, qword_1EEB469D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1A9CEB530;
  *(_QWORD *)(v16 + 32) = v12;
  *(_QWORD *)(v16 + 40) = v15;
  v17 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
  v18 = (char *)objc_allocWithZone(v17);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
  v23.receiver = v18;
  v23.super_class = v17;
  v19 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v19, sel_setUnitsStyle_, 2);
  objc_msgSend(v19, sel_setAllowedUnits_, 32);

  v20 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
  v21 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v21[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
  v22.receiver = v21;
  v22.super_class = v20;
  objc_msgSendSuper2(&v22, sel_init);
  sub_1A9B94CA0(0, &qword_1EEB46AA8, (uint64_t)&type metadata for WindDownPickerModel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DDC();
}

double sub_1A9C1ACC8()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t v9;

  sub_1A9C1BCB8(0, &qword_1EEB46AA0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDF9A8]);
  sub_1A9CE7DD0();
  v0 = *(_QWORD *)(v9 + 16);
  if (!v0)
  {
    v2 = 0.0;
    goto LABEL_10;
  }
  if (v0 == 1)
  {
    v1 = 0;
    v2 = 0.0;
LABEL_8:
    v5 = v0 - v1;
    v6 = (double *)(v9 + 8 * v1 + 32);
    do
    {
      v7 = *v6++;
      v2 = v2 + v7;
      --v5;
    }
    while (v5);
    goto LABEL_10;
  }
  v1 = v0 & 0x7FFFFFFFFFFFFFFELL;
  v3 = (double *)(v9 + 40);
  v2 = 0.0;
  v4 = v0 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v2 = v2 + *(v3 - 1) + *v3;
    v3 += 2;
    v4 -= 2;
  }
  while (v4);
  if (v0 != v1)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1A9C1AD98@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C1A074(a1);
}

unint64_t sub_1A9C1ADD8(unint64_t result, unint64_t a2, uint64_t a3, id a4, id a5)
{
  uint64_t v5;
  double v6;
  id v7;
  id v8;
  uint64_t v9;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a3 + 16) <= a2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(a3 + 8 * a2 + 32);
  if (*(_QWORD *)(v5 + 16) <= result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v6 = *(double *)(v5 + 8 * result + 32);
  if (a2)
    v7 = objc_msgSend(a5, sel_stringFromTimeInterval_, v6);
  else
    v7 = objc_msgSend(a4, sel_stringFromTimeInterval_, v6);
  v8 = v7;
  if (!v8)
    return 0;
  v9 = sub_1A9CE82E0();

  return v9;
}

uint64_t sub_1A9C1AE9C()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_1A9C1AEA4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1A9C1ADD8(a1, a2, *(_QWORD *)v2, *(id *)(v2 + 8), *(id *)(v2 + 16));
}

uint64_t sub_1A9C1AEB4(uint64_t *a1, uint64_t *a2)
{
  return sub_1A9BFA74C(*a1, *a2);
}

void sub_1A9C1AEC0(void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  id v25;
  objc_class *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  objc_super v32;

  sub_1A9CE7DC4();
  type metadata accessor for SleepScheduleModel();
  sub_1A9B92B9C(&qword_1EEB454E8, (uint64_t (*)(uint64_t))type metadata accessor for SleepScheduleModel, (uint64_t)&protocol conformance descriptor for SleepScheduleModel);
  v4 = a1;
  v5 = sub_1A9CE70F8();
  v7 = v6;
  v8 = OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule;
  v9 = *(void **)&v4[OBJC_IVAR____TtC13SleepHealthUI18SleepScheduleModel_sleepSchedule];
  v10 = 0.0;
  v11 = 0.0;
  if (v9)
    objc_msgSend(v9, sel_windDownTime, 0.0);
  sub_1A9C19FA8(v11);
  sub_1A9B94CA0(0, &qword_1EEB469C8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1A9CE7DC4();
  v12 = *(void **)&v4[v8];
  if (v12)
  {
    objc_msgSend(v12, sel_windDownTime);
    v10 = v13;
  }
  v14 = *MEMORY[0x1E0DA84B0] * 60.0;
  sub_1A9CBB30C(0.0, v14 + 1.0, 3600.0);
  v16 = v15;
  if (v10 >= v14)
  {
    v18 = *((_QWORD *)&v28 + 1);
    v19 = v28;
    v21 = &unk_1E55D2728;
    goto LABEL_9;
  }
  v17 = *MEMORY[0x1E0DA84C8] * 60.0;
  if (v17 != 0.0)
  {
    v18 = *((_QWORD *)&v28 + 1);
    v19 = v28;
    sub_1A9CBB30C(0.0, 3600.0, v17);
    v21 = v20;
LABEL_9:
    sub_1A9C1BCB8(0, qword_1EEB469D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1A9CEB530;
    *(_QWORD *)(v22 + 32) = v16;
    *(_QWORD *)(v22 + 40) = v21;
    v23 = (objc_class *)type metadata accessor for ShortHourDateComponentsFormatter();
    v24 = (char *)objc_allocWithZone(v23);
    *(_QWORD *)&v24[OBJC_IVAR____TtC13SleepHealthUI32ShortHourDateComponentsFormatter_options] = 4;
    v32.receiver = v24;
    v32.super_class = v23;
    v25 = objc_msgSendSuper2(&v32, sel_init);
    objc_msgSend(v25, sel_setUnitsStyle_, 2);
    objc_msgSend(v25, sel_setAllowedUnits_, 32);

    v26 = (objc_class *)type metadata accessor for ShortMinuteDateComponentsFormatter();
    v27 = (char *)objc_allocWithZone(v26);
    *(_QWORD *)&v27[OBJC_IVAR____TtC13SleepHealthUI34ShortMinuteDateComponentsFormatter_options] = 4;
    v31.receiver = v27;
    v31.super_class = v26;
    objc_msgSendSuper2(&v31, sel_init);
    sub_1A9CE7DC4();
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v18;
    *(_OWORD *)(a2 + 32) = v28;
    *(_OWORD *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 64) = v29;
    *(_QWORD *)(a2 + 72) = v30;
    return;
  }
  __break(1u);
}

void destroy for WindDownPickerModel(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *_s13SleepHealthUI19WindDownPickerModelVwCP_0(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  v6 = v4;
  return a1;
}

_QWORD *assignWithCopy for WindDownPickerModel(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for WindDownPickerModel(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for WindDownPickerModel()
{
  return &type metadata for WindDownPickerModel;
}

uint64_t destroy for WindDownPickerRowView(id *a1)
{

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(void **)(a2 + 56);
  v7 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = v6;
  v10 = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 56);
  v8 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 64);
  v11 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for WindDownPickerRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();

  v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindDownPickerRowView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WindDownPickerRowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WindDownPickerRowView()
{
  return &type metadata for WindDownPickerRowView;
}

uint64_t sub_1A9C1B624()
{
  return MEMORY[0x1E0DEB0A0];
}

unint64_t sub_1A9C1B630(uint64_t a1)
{
  unint64_t result;

  result = sub_1A9C1B654();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A9C1B654()
{
  unint64_t result;

  result = qword_1EEB46A10;
  if (!qword_1EEB46A10)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0E28, &type metadata for WindDownPickerModel);
    atomic_store(result, (unint64_t *)&qword_1EEB46A10);
  }
  return result;
}

uint64_t sub_1A9C1B698()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C1B6A8(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB46A20, (uint64_t (*)(uint64_t))sub_1A9C1B6C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1A9C1B6C4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46A28)
  {
    sub_1A9C1B748(255);
    sub_1A9B92F34(255, &qword_1EEB46A88, (uint64_t (*)(uint64_t))sub_1A9C1BB84, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46A28);
  }
}

void sub_1A9C1B748(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EEB46A30)
  {
    sub_1A9C1B7F4();
    v3 = v2;
    sub_1A9B94CA0(255, &qword_1EEB469C8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1A9C1BA7C();
    v7[3] = sub_1A9C1BB14();
    v5 = MEMORY[0x1AF420248](a1, v7, MEMORY[0x1E0CDF150], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEB46A30);
  }
}

void sub_1A9C1B7F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46A38)
  {
    sub_1A9C1B858();
    sub_1A9C1BA10();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46A38);
  }
}

void sub_1A9C1B858()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46A40)
  {
    sub_1A9C1B8D0();
    sub_1A9B92B9C((unint64_t *)&qword_1EEB46A68, (uint64_t (*)(uint64_t))sub_1A9C1B8D0, MEMORY[0x1E0CDFB10]);
    v0 = sub_1A9CE7E24();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46A40);
  }
}

void sub_1A9C1B8D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46A48)
  {
    sub_1A9B92F34(255, (unint64_t *)&qword_1EEB46A50, (uint64_t (*)(uint64_t))sub_1A9C1B948, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9C1B9B0();
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46A48);
  }
}

void sub_1A9C1B948()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EEB46A58)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EEB46A58);
  }
}

unint64_t sub_1A9C1B9B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46A60;
  if (!qword_1EEB46A60)
  {
    sub_1A9B92F34(255, (unint64_t *)&qword_1EEB46A50, (uint64_t (*)(uint64_t))sub_1A9C1B948, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46A60);
  }
  return result;
}

void sub_1A9C1BA10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED263358)
  {
    sub_1A9B94CA0(255, &qword_1ED263360, MEMORY[0x1E0CDF5D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1A9CE76B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED263358);
  }
}

unint64_t sub_1A9C1BA7C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46A70;
  if (!qword_1EEB46A70)
  {
    sub_1A9C1B7F4();
    v2 = v1;
    v3[0] = sub_1A9B92B9C(&qword_1EEB46A78, (uint64_t (*)(uint64_t))sub_1A9C1B858, MEMORY[0x1E0CDFA58]);
    v3[1] = sub_1A9B92B9C((unint64_t *)&qword_1ED263350, (uint64_t (*)(uint64_t))sub_1A9C1BA10, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46A70);
  }
  return result;
}

unint64_t sub_1A9C1BB14()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEB46A80;
  if (!qword_1EEB46A80)
  {
    sub_1A9B94CA0(255, &qword_1EEB469C8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = MEMORY[0x1E0DEB0A0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0DEAF30], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEB46A80);
  }
  return result;
}

void sub_1A9C1BB84(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EEB46A90)
  {
    v2 = sub_1A9C1BBDC();
    v4 = type metadata accessor for MultiPicker(a1, (uint64_t)&type metadata for WindDownPickerModel, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEB46A90);
  }
}

unint64_t sub_1A9C1BBDC()
{
  unint64_t result;

  result = qword_1EEB46A98;
  if (!qword_1EEB46A98)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF0E50, &type metadata for WindDownPickerModel);
    atomic_store(result, (unint64_t *)&qword_1EEB46A98);
  }
  return result;
}

uint64_t sub_1A9C1BC24()
{
  return sub_1A9C1A6A8();
}

double sub_1A9C1BC2C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1A9C1A798(a1).n128_u64[0];
  return result;
}

_QWORD *sub_1A9C1BC34(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v2 = (void *)a1[1];
  v3 = (void *)a1[7];
  v4 = (void *)a1[8];
  swift_retain();
  v5 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = v4;
  return a1;
}

void sub_1A9C1BCB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1A9B94CA0(255, &qword_1EEB469C8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t objectdestroyTm_2()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_1A9C1BD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1A9C1AA70(a1, a2, (__int128 *)(v2 + 16));
}

uint64_t sub_1A9C1BD90(uint64_t a1)
{
  uint64_t v2;

  sub_1A9C1B7F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1A9C1BDCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v6;
  id result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v6 = a4;
    return a5;
  }
  return result;
}

uint64_t sub_1A9C1BE58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1A9C1BEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1A9B92F34(0, &qword_1EEB46A18, (uint64_t (*)(uint64_t))sub_1A9C1B6A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A9C1BF3C(uint64_t a1)
{

  return a1;
}

uint64_t sub_1A9C1BF64()
{
  return sub_1A9C1A704();
}

uint64_t sub_1A9C1BF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 0;
      v3 = 0.0;
    }
    else
    {
      v2 = v1 & 0x7FFFFFFFFFFFFFFELL;
      v4 = (double *)(a1 + 40);
      v3 = 0.0;
      v5 = v1 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v3 = v3 + *(v4 - 1) + *v4;
        v4 += 2;
        v5 -= 2;
      }
      while (v5);
      if (v1 == v2)
        goto LABEL_10;
    }
    v6 = v1 - v2;
    v7 = (double *)(a1 + 8 * v2 + 32);
    do
    {
      v8 = *v7++;
      v3 = v3 + v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    v3 = 0.0;
  }
LABEL_10:
  v9 = *MEMORY[0x1E0DA84B0] * 60.0;
  if (v3 <= v9)
    return swift_bridgeObjectRetain();
  sub_1A9B94CA0(0, (unint64_t *)&qword_1ED2634A8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1A9CEB530;
  *(double *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

unint64_t sub_1A9C1C070()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB46AB0;
  if (!qword_1EEB46AB0)
  {
    sub_1A9B92F34(255, &qword_1EEB46A18, (uint64_t (*)(uint64_t))sub_1A9C1B6A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB46AB8, (uint64_t (*)(uint64_t))sub_1A9C1B6A8, MEMORY[0x1E0CE0680]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0798], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46AB0);
  }
  return result;
}

uint64_t sub_1A9C1C100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a1;
  v27 = a2;
  v2 = sub_1A9CE8CC4();
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A9CE8CAC();
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1A9CE8D00();
  v10 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1A9CE8D0C();
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C1C368();
  sub_1A9CE8CE8();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1A9CEB530;
  sub_1A9CE8CD0();
  sub_1A9CE8CDC();
  sub_1A9C4B4B4(v18);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1A9CE8CF4();
  sub_1A9CE8CA0();
  sub_1A9CE8CB8();
  sub_1A9CE5E8C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v21);
  sub_1A9C1C3BC();
  sub_1A9CE8D18();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v14);
  return v28;
}

void sub_1A9C1C368()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED262750)
  {
    sub_1A9CE8CE8();
    v0 = sub_1A9CE8B80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED262750);
  }
}

unint64_t sub_1A9C1C3BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED262768;
  if (!qword_1ED262768)
  {
    v1 = sub_1A9CE8D0C();
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CB2838], v1);
    atomic_store(result, (unint64_t *)&qword_1ED262768);
  }
  return result;
}

Swift::Void __swiftcall UICollectionView.registerGoalTimePickerCell()()
{
  type metadata accessor for GoalTimePickerCollectionViewCell();
  sub_1A9C1C454();
  sub_1A9CE86D0();
}

uint64_t type metadata accessor for GoalTimePickerCollectionViewCell()
{
  return objc_opt_self();
}

unint64_t sub_1A9C1C454()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46AC0;
  if (!qword_1EEB46AC0)
  {
    v1 = type metadata accessor for GoalTimePickerCollectionViewCell();
    result = MEMORY[0x1AF420284](&unk_1A9CEE904, v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46AC0);
  }
  return result;
}

id sub_1A9C1C498(double a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  char *v10;
  uint64_t v11;
  char v12;
  double *v13;
  double v14;
  uint64_t v15;
  double v16;
  objc_super v18;

  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  v9 = objc_msgSendSuper2(&v18, sel_initWithFrame_, a1, a2, a3, a4);
  v10 = (char *)sub_1A9BC9C0C();

  v11 = sub_1A9CDF60C();
  v13 = (double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
  v14 = *(double *)&v10[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
  *(_QWORD *)v13 = v15;
  v13[1] = v16;
  *((_QWORD *)v13 + 2) = v11;
  *((_BYTE *)v13 + 24) = v12 & 1;
  if (v14 != v16)
  {
    objc_msgSend(v10, sel_reloadAllComponents);
    sub_1A9C2F4E8((char *)1);
  }

  return v9;
}

id sub_1A9C1C588(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  char *v6;
  uint64_t v7;
  char v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  objc_super v14;

  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  v3 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = (char *)sub_1A9BC9C0C();

    v7 = sub_1A9CDF60C();
    v9 = (double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration];
    v10 = *(double *)&v6[OBJC_IVAR____TtC13SleepHealthUI22TimeIntervalPickerView_configuration + 8];
    *(_QWORD *)v9 = v11;
    v9[1] = v12;
    *((_QWORD *)v9 + 2) = v7;
    *((_BYTE *)v9 + 24) = v8 & 1;
    if (v10 != v12)
    {
      objc_msgSend(v6, sel_reloadAllComponents);
      sub_1A9C2F4E8((char *)1);
    }

  }
  return v4;
}

id sub_1A9C1C668()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GoalTimePickerCollectionViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A9C1C6B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A9C1C6C0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for LockScreenGreetingView(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB46B58);
}

uint64_t sub_1A9C1C6E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C1C6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v41;
  _BOOL8 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  char v122;
  _BYTE v123[7];
  uint64_t v124;
  char v125;
  _BYTE v126[7];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  _BYTE v132[7];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  __int16 v138;
  char v139;
  _BYTE v140[7];
  _BYTE v141[7];
  _BYTE v142[7];
  char v143;
  _BYTE v144[7];
  char v145;
  unsigned __int8 v146;

  v114 = a2;
  v100 = type metadata accessor for LockScreenGreetingView(0);
  v106 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100, v3);
  v107 = v4;
  v109 = (uint64_t)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1A9CE7110();
  v103 = *(_QWORD *)(v104 - 8);
  v6 = MEMORY[0x1E0C80A78](v104, v5);
  v102 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v8);
  v101 = (uint64_t)&v91 - v9;
  sub_1A9C1DBC0(0);
  v113 = v10;
  v111 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v112 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14);
  v110 = (char *)&v91 - v15;
  v99 = sub_1A9CE7884();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99, v16);
  v97 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1A9CE6360();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v18);
  v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1A9CE62E8();
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94, v21);
  v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1A9CE6378();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1A9CE6444();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v29);
  v31 = (char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB46BA8, (uint64_t (*)(uint64_t))sub_1A9C1D9A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  v105 = (uint64_t)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v36);
  v38 = (char *)&v91 - v37;
  v108 = a1;
  v39 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v40 = v39;
  sub_1A9CE6E64();

  swift_release();
  swift_release();
  v115 = v38;
  if (v146 > 2u)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v28, *MEMORY[0x1E0CB0EF8], v24);
    sub_1A9CE6384();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    sub_1A9CE62DC();
    sub_1A9CE6348();
    v42 = Calendar.dayPeriod(for:in:)((uint64_t)v23);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v20, v96);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v23, v94);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v31, v92);
    v116 = 0;
    sub_1A9CBC680(&v116, v42);
    if (qword_1ED2626A8 != -1)
      swift_once();
    v43 = (id)qword_1ED264F90;
    v44 = sub_1A9CE6168();
    v46 = v45;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    KeyPath = (void *)swift_getKeyPath();
    v48 = swift_getKeyPath();
    v95 = v48;
    v96 = sub_1A9CE7CA4();
    v49 = swift_getKeyPath();
    sub_1A9CE7794();
    v50 = v98;
    v51 = v97;
    v52 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, *MEMORY[0x1E0CDD6D8], v99);
    v53 = sub_1A9CE78A8();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    swift_release();
    v54 = swift_getKeyPath();
    LOBYTE(v43) = sub_1A9CE774C();
    sub_1A9CE6F24();
    v145 = 0;
    v143 = 1;
    v139 = 0;
    *(_DWORD *)((char *)&v118 + 1) = *(_DWORD *)v144;
    HIDWORD(v118) = *(_DWORD *)&v144[3];
    *(_DWORD *)v123 = *(_DWORD *)v142;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v142[3];
    *(_DWORD *)v126 = *(_DWORD *)v141;
    *(_DWORD *)&v126[3] = *(_DWORD *)&v141[3];
    *(_DWORD *)v132 = *(_DWORD *)v140;
    *(_DWORD *)&v132[3] = *(_DWORD *)&v140[3];
    v116 = v44;
    v117 = v46;
    LOBYTE(v118) = 0;
    v119 = MEMORY[0x1E0DEE9D8];
    v120 = KeyPath;
    v121 = 0;
    v122 = 1;
    v124 = v48;
    v125 = 1;
    v127 = v49;
    v128 = v96;
    v129 = v54;
    v130 = v53;
    v131 = (char)v43;
    v133 = v55;
    v134 = v56;
    v135 = v57;
    v136 = v58;
    v137 = 0;
    v138 = 256;
    sub_1A9BCC414(0, &qword_1EEB46BB8, sub_1A9C1D9BC);
    sub_1A9C1FB58();
    v59 = (uint64_t)v115;
    sub_1A9CE7B78();
    sub_1A9BAA670(v44, v46, 0);
    swift_release();
    swift_release();
    v38 = (char *)v59;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1A9C1D9A0(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
  }
  else
  {
    sub_1A9C1D9A0(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v38, 1, 1, v41);
  }
  v61 = v108;
  v62 = v101;
  sub_1A9C82CBC(v101);
  v63 = v103;
  v64 = v102;
  v65 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, *MEMORY[0x1E0CD98E0], v104);
  sub_1A9B92B9C((unint64_t *)&qword_1ED263180, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], MEMORY[0x1E0CD9980]);
  v66 = sub_1A9CE828C();
  v67 = *(void (**)(char *, uint64_t))(v63 + 8);
  v67(v64, v65);
  v67((char *)v62, v65);
  v68 = *(void **)(v61 + 8);
  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  v69 = v68;
  v70 = sub_1A9CE70F8();
  v72 = v71;
  v73 = v69;
  v74 = sub_1A9CE70F8();
  LOBYTE(v116) = (v66 & 1) == 0;
  v117 = v70;
  v118 = v72;
  v119 = v74;
  v120 = v75;
  v76 = v109;
  sub_1A9BA6F90(v61, v109, type metadata accessor for LockScreenGreetingView);
  v77 = (*(unsigned __int8 *)(v106 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
  v78 = swift_allocObject();
  sub_1A9BA0D6C(v76, v78 + v77, type metadata accessor for LockScreenGreetingView);
  sub_1A9C1DC4C();
  sub_1A9B92B9C(&qword_1EEB46C08, (uint64_t (*)(uint64_t))sub_1A9C1DC4C, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
  v79 = v110;
  sub_1A9CE7AB8();
  swift_release();
  v80 = v118;

  v81 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v82 = v105;
  sub_1A9BC3120((uint64_t)v38, v105, &qword_1EEB46BA8, (uint64_t (*)(uint64_t))sub_1A9C1D9A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v83 = v111;
  v84 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v85 = v112;
  v86 = v113;
  v84(v112, v79, v113);
  v87 = v114;
  sub_1A9BC3120(v82, v114, &qword_1EEB46BA8, (uint64_t (*)(uint64_t))sub_1A9C1D9A0, v81);
  sub_1A9C1D91C();
  v84((char *)(v87 + *(int *)(v88 + 48)), v85, v86);
  v89 = *(void (**)(char *, uint64_t))(v83 + 8);
  v89(v79, v86);
  sub_1A9BAAEE4((uint64_t)v115, (uint64_t)&qword_1EEB46BA8, (uint64_t)sub_1A9C1D9A0, (uint64_t)v81, (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v89(v85, v86);
  return sub_1A9BAAEE4(v82, (uint64_t)&qword_1EEB46BA8, (uint64_t)sub_1A9C1D9A0, (uint64_t)v81, (uint64_t (*)(_QWORD))sub_1A9B92F34);
}

void sub_1A9C1D188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for LockScreenGreetingView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2, v5);
  v6 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB48C00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - v9;
  v11 = sub_1A9CE6234();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9CE82E0();
  sub_1A9CE6228();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v10, (uint64_t)&qword_1EEB48C00, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    if (qword_1EEB42E60 != -1)
      swift_once();
    v16 = sub_1A9CE6990();
    __swift_project_value_buffer(v16, (uint64_t)qword_1EEB49410);
    v17 = sub_1A9CE6978();
    v18 = sub_1A9CE8664();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v35 = v20;
      *(_DWORD *)v19 = 136446210;
      v34 = sub_1A9B91D6C(0xD000000000000016, 0x80000001A9CF0F00, &v35);
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v17, v18, "[%{public}s] Error trying to open Weather app", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v20, -1, -1);
      MEMORY[0x1AF420344](v19, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
    if (qword_1EEB42E60 != -1)
      swift_once();
    v21 = sub_1A9CE6990();
    __swift_project_value_buffer(v21, (uint64_t)qword_1EEB49410);
    v22 = sub_1A9CE6978();
    v23 = sub_1A9CE867C();
    if (os_log_type_enabled(v22, v23))
    {
      v32 = a1;
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = v25;
      v35 = v25;
      v31 = v3;
      *(_DWORD *)v24 = 136446210;
      v34 = sub_1A9B91D6C(0xD000000000000016, 0x80000001A9CF0F00, &v35);
      v3 = v31;
      a1 = v32;
      sub_1A9CE888C();
      _os_log_impl(&dword_1A9B87000, v22, v23, "[%{public}s] Opening Weather app", v24, 0xCu);
      swift_arrayDestroy();
      v27 = v26;
      v6 = v33;
      MEMORY[0x1AF420344](v27, -1, -1);
      MEMORY[0x1AF420344](v24, -1, -1);
    }

    sub_1A9BA6F90(a1, (uint64_t)v6, type metadata accessor for LockScreenGreetingView);
    v28 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v29 = swift_allocObject();
    sub_1A9BA0D6C((uint64_t)v6, v29 + v28, type metadata accessor for LockScreenGreetingView);
    DeepLinkOpener.open(url:completion:)((uint64_t)v15, (uint64_t)sub_1A9C1FEA8, v29);
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

void sub_1A9C1D5FC(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t aBlock[6];

  if (a1)
  {
    v4 = a1;
    if (qword_1EEB42E60 != -1)
      swift_once();
    v5 = sub_1A9CE6990();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EEB49410);
    v6 = a1;
    v7 = a1;
    v8 = sub_1A9CE6978();
    v9 = sub_1A9CE8664();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      aBlock[0] = v11;
      *(_DWORD *)v10 = 136446466;
      sub_1A9B91D6C(0xD000000000000016, 0x80000001A9CF0F00, aBlock);
      sub_1A9CE888C();
      *(_WORD *)(v10 + 12) = 2082;
      v12 = a1;
      sub_1A9BB15F4();
      v13 = sub_1A9CE82F8();
      sub_1A9B91D6C(v13, v14, aBlock);
      sub_1A9CE888C();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A9B87000, v8, v9, "[%{public}s] Error trying to open Weather app: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF420344](v11, -1, -1);
      MEMORY[0x1AF420344](v10, -1, -1);

    }
    else
    {

    }
  }
  v15 = *(char **)(a2 + 8);
  v16 = *(void **)&v15[OBJC_IVAR____TtC13SleepHealthUI22LockScreenContentModel_sleepStore];
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  aBlock[4] = (uint64_t)sub_1A9C1FF08;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A9BE4D94;
  aBlock[3] = (uint64_t)&block_descriptor_13;
  v18 = _Block_copy(aBlock);
  v19 = v15;
  swift_release();
  objc_msgSend(v16, sel_dismissGoodMorningWithCompletion_, v18);
  _Block_release(v18);

}

uint64_t sub_1A9C1D8C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_1A9CE73F8();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1A9BCC718(0, &qword_1EEB46B90, &qword_1EEB46B98, (uint64_t (*)(uint64_t))sub_1A9C1D91C);
  return sub_1A9C1C6F8(v1, a1 + *(int *)(v3 + 44));
}

void sub_1A9C1D91C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46BA0)
  {
    sub_1A9B92F34(255, &qword_1EEB46BA8, (uint64_t (*)(uint64_t))sub_1A9C1D9A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1A9C1DBC0(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46BA0);
  }
}

void sub_1A9C1D9A0(uint64_t a1)
{
  sub_1A9C214C0(a1, &qword_1EEB46BB0, &qword_1EEB46BB8, sub_1A9C1D9BC);
}

void sub_1A9C1D9BC(uint64_t a1)
{
  sub_1A9BCC414(a1, &qword_1EEB46BC0, (void (*)(uint64_t))sub_1A9C1D9D8);
}

void sub_1A9C1D9D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46BC8)
  {
    sub_1A9C1DA54();
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46BC8);
  }
}

void sub_1A9C1DA54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46BD0)
  {
    sub_1A9C1DAD0();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46BD0);
  }
}

void sub_1A9C1DAD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46BD8)
  {
    sub_1A9C1DB4C();
    sub_1A9B94CA0(255, &qword_1ED262998, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46BD8);
  }
}

void sub_1A9C1DB4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46BE0)
  {
    sub_1A9BA3F70(255, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46BE0);
  }
}

void sub_1A9C1DBC0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1EEB46BE8)
  {
    v4[0] = sub_1A9C1DC4C();
    v4[1] = sub_1A9B92B9C(&qword_1EEB46C08, (uint64_t (*)(uint64_t))sub_1A9C1DC4C, (uint64_t)&protocol conformance descriptor for OptionalContentGroup<A, B>);
    v2 = MEMORY[0x1AF420248](a1, v4, MEMORY[0x1E0CDE248], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EEB46BE8);
  }
}

uint64_t sub_1A9C1DC4C()
{
  uint64_t result;

  result = qword_1EEB46BF0;
  if (!qword_1EEB46BF0)
  {
    sub_1A9C1DCC4();
    sub_1A9C1DD08();
    type metadata accessor for OptionalContentGroup();
  }
  return result;
}

unint64_t sub_1A9C1DCC4()
{
  unint64_t result;

  result = qword_1EEB46BF8;
  if (!qword_1EEB46BF8)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF1138, &type metadata for ShortWeatherDetailView);
    atomic_store(result, (unint64_t *)&qword_1EEB46BF8);
  }
  return result;
}

unint64_t sub_1A9C1DD08()
{
  unint64_t result;

  result = qword_1EEB46C00;
  if (!qword_1EEB46C00)
  {
    result = MEMORY[0x1AF420284](&unk_1A9CF10E8, &type metadata for WeatherDetailView);
    atomic_store(result, (unint64_t *)&qword_1EEB46C00);
  }
  return result;
}

uint64_t sub_1A9C1DD54@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v4 = type metadata accessor for WeatherIconView(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (uint64_t *)((char *)&v26 - v10);
  sub_1A9B92F34(0, &qword_1EEB45270, type metadata accessor for CurrentWeatherModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - v14;
  swift_getKeyPath();
  swift_getKeyPath();
  v16 = a1;
  sub_1A9CE6E64();

  swift_release();
  swift_release();
  v17 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v15, (uint64_t)&qword_1EEB45270, (uint64_t)type metadata accessor for CurrentWeatherModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  else
  {
    sub_1A9CE81F0();
    swift_allocObject();
    sub_1A9CE81E4();
    v18 = sub_1A9CE81D8();
    v21 = v20;
    swift_release();
    if (v21)
    {
      v19 = v21;
    }
    else
    {
      v18 = 0;
      v19 = 0xE000000000000000;
    }
    sub_1A9B97190((uint64_t)v15, type metadata accessor for CurrentWeatherModel);
  }
  *(uint64_t *)((char *)v11 + *(int *)(v4 + 20)) = swift_getKeyPath();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  v22 = v16;
  *v11 = sub_1A9CE70F8();
  v11[1] = v23;
  sub_1A9BA6F90((uint64_t)v11, (uint64_t)v8, type metadata accessor for WeatherIconView);
  *a2 = v18;
  a2[1] = v19;
  sub_1A9C200F4();
  sub_1A9BA6F90((uint64_t)v8, (uint64_t)a2 + *(int *)(v24 + 48), type metadata accessor for WeatherIconView);
  swift_bridgeObjectRetain();
  sub_1A9B97190((uint64_t)v11, type metadata accessor for WeatherIconView);
  sub_1A9B97190((uint64_t)v8, type metadata accessor for WeatherIconView);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A9C1E03C@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C1E484(sub_1A9C200D8, (uint64_t (*)(uint64_t, uint64_t))sub_1A9C1DD54, a1);
}

uint64_t sub_1A9C1E050@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a2;
  v3 = sub_1A9CE6498();
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A9CE62E8();
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, &qword_1EEB45270, type metadata accessor for CurrentWeatherModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - v14;
  sub_1A9B92F34(0, &qword_1EEB467F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608], v11);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v45 - v18;
  v20 = type metadata accessor for WeatherIconView(0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25);
  v27 = (uint64_t *)((char *)&v45 - v26);
  *(uint64_t *)((char *)v27 + *(int *)(v20 + 20)) = swift_getKeyPath();
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for LockScreenContentModel();
  sub_1A9B92B9C(qword_1EEB45840, (uint64_t (*)(uint64_t))type metadata accessor for LockScreenContentModel, (uint64_t)&protocol conformance descriptor for LockScreenContentModel);
  v28 = a1;
  *v27 = sub_1A9CE70F8();
  v27[1] = v29;
  swift_getKeyPath();
  swift_getKeyPath();
  v30 = v28;
  sub_1A9CE6E64();

  swift_release();
  swift_release();
  v31 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v15, 1, v31) == 1)
  {
    v32 = &qword_1EEB45270;
    v33 = type metadata accessor for CurrentWeatherModel;
    v34 = MEMORY[0x1E0DEB940];
    v35 = (uint64_t)v15;
  }
  else
  {
    sub_1A9CE654C();
    sub_1A9CE648C();
    sub_1A9CE660C();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v49);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
    sub_1A9B97190((uint64_t)v15, type metadata accessor for CurrentWeatherModel);
    v36 = sub_1A9CE6504();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v19, 1, v36) != 1)
    {
      v38 = DayWeather.shortNaturalLanguageDescription.getter();
      v39 = v40;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v36);
      goto LABEL_7;
    }
    v32 = &qword_1EEB467F8;
    v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEE608];
    v34 = MEMORY[0x1E0DEB940];
    v35 = (uint64_t)v19;
  }
  sub_1A9BAAEE4(v35, (uint64_t)v32, (uint64_t)v33, (uint64_t)v34, (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v38 = 0;
  v39 = 0xE000000000000000;
LABEL_7:
  sub_1A9BA6F90((uint64_t)v27, (uint64_t)v24, type metadata accessor for WeatherIconView);
  v41 = v50;
  sub_1A9BA6F90((uint64_t)v24, v50, type metadata accessor for WeatherIconView);
  sub_1A9C20050();
  v43 = (uint64_t *)(v41 + *(int *)(v42 + 48));
  *v43 = v38;
  v43[1] = v39;
  swift_bridgeObjectRetain();
  sub_1A9B97190((uint64_t)v27, type metadata accessor for WeatherIconView);
  swift_bridgeObjectRelease();
  return sub_1A9B97190((uint64_t)v24, type metadata accessor for WeatherIconView);
}

uint64_t sub_1A9C1E470@<X0>(uint64_t a1@<X8>)
{
  return sub_1A9C1E484(sub_1A9C20034, (uint64_t (*)(uint64_t, uint64_t))sub_1A9C1E050, a1);
}

uint64_t sub_1A9C1E484@<X0>(void (*a1)(_QWORD)@<X2>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;

  v8 = *v3;
  v7 = v3[1];
  *(_QWORD *)a3 = sub_1A9CE73F8();
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  a1(0);
  return a2(v8, v7);
}

uint64_t sub_1A9C1E4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v5 = sub_1A9CE7884();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20D94(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20EF8();
  v39 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20F74();
  v41 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20FF0();
  v42 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9BCC414(0, &qword_1EEB46DE8, v26);
  v40 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v39 - v29;
  swift_bridgeObjectRetain();
  sub_1A9C1E868(a1, a2, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v13);
  swift_bridgeObjectRelease();
  sub_1A9CE77DC();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0CDD6D8], v5);
  v31 = sub_1A9CE78A8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_release();
  KeyPath = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1A9C20D94);
  v33 = (uint64_t *)&v17[*(int *)(v39 + 36)];
  *v33 = KeyPath;
  v33[1] = v31;
  sub_1A9B97190((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1A9C20D94);
  v34 = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9C20EF8);
  v35 = &v21[*(int *)(v41 + 36)];
  *(_QWORD *)v35 = v34;
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 1;
  sub_1A9B97190((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1A9C20EF8);
  v36 = swift_getKeyPath();
  sub_1A9BA6F90((uint64_t)v21, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1A9C20F74);
  v37 = &v25[*(int *)(v42 + 36)];
  *(_QWORD *)v37 = v36;
  v37[8] = 1;
  sub_1A9B97190((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1A9C20F74);
  sub_1A9BA6F90((uint64_t)v25, (uint64_t)v30, (uint64_t (*)(_QWORD))sub_1A9C20FF0);
  *(_WORD *)&v30[*(int *)(v40 + 36)] = 256;
  sub_1A9B97190((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1A9C20FF0);
  sub_1A9C2106C();
  sub_1A9CE7B78();
  return sub_1A9BAAEE4((uint64_t)v30, (uint64_t)&qword_1EEB46DE8, (uint64_t)sub_1A9C20FF0, MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD))sub_1A9BCC414);
}

uint64_t sub_1A9C1E868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a1;
  v46 = a5;
  v9 = sub_1A9CE6F6C();
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v43 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB46DB8, (uint64_t (*)(uint64_t))sub_1A9C20EDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (uint64_t *)((char *)&v41 - v15);
  sub_1A9C20EDC(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20DB8(0);
  v22 = v21;
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1A9CE7554();
  KeyPath = swift_getKeyPath();
  a3 &= 1u;
  sub_1A9BAA680(a1, a2, a3);
  swift_bridgeObjectRetain();
  sub_1A9CE7FC8();
  v27 = sub_1A9CE7FD4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 0, 1, v27);
  sub_1A9BA6F90((uint64_t)v20, (uint64_t)v16 + *(int *)(v13 + 28), (uint64_t (*)(_QWORD))sub_1A9C20EDC);
  *v16 = KeyPath;
  v28 = (uint64_t)&v25[*(int *)(v22 + 36)];
  v29 = MEMORY[0x1E0CDCF68];
  sub_1A9BC3120((uint64_t)v16, v28, &qword_1EEB46DB8, (uint64_t (*)(uint64_t))sub_1A9C20EDC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  v30 = v41;
  *(_QWORD *)v25 = v41;
  *((_QWORD *)v25 + 1) = a2;
  v25[16] = a3;
  *((_QWORD *)v25 + 3) = a4;
  *((_DWORD *)v25 + 8) = v42;
  v31 = v30;
  sub_1A9BAA680(v30, a2, a3);
  swift_bridgeObjectRetain();
  sub_1A9BAAEE4((uint64_t)v16, (uint64_t)&qword_1EEB46DB8, (uint64_t)sub_1A9C20EDC, (uint64_t)v29, (uint64_t (*)(_QWORD))sub_1A9B92F34);
  sub_1A9B97190((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1A9C20EDC);
  sub_1A9BAA670(v31, a2, a3);
  swift_bridgeObjectRelease();
  v32 = swift_getKeyPath();
  v34 = v43;
  v33 = v44;
  v35 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v43, *MEMORY[0x1E0CD86D0], v45);
  sub_1A9C20D94(0);
  v37 = v46;
  v38 = (uint64_t *)(v46 + *(int *)(v36 + 36));
  sub_1A9B92F34(0, &qword_1EEB46DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))((char *)v38 + *(int *)(v39 + 28), v34, v35);
  *v38 = v32;
  sub_1A9BA6F90((uint64_t)v25, v37, (uint64_t (*)(_QWORD))sub_1A9C20DB8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  return sub_1A9B97190((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1A9C20DB8);
}

uint64_t sub_1A9C1EB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1A9C1E4E8(*v1, v1[1], a1);
}

uint64_t sub_1A9C1EBA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v25 = a1;
  sub_1A9B92F34(0, &qword_1EEB45270, type metadata accessor for CurrentWeatherModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - v4;
  v6 = sub_1A9CE6564();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v24 - v13;
  v24 = v1;
  v15 = *(void **)(v1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v16 = v15;
  sub_1A9CE6E64();

  swift_release();
  swift_release();
  v17 = type metadata accessor for CurrentWeatherModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v5, 1, v17) == 1)
  {
    sub_1A9BAAEE4((uint64_t)v5, (uint64_t)&qword_1EEB45270, (uint64_t)type metadata accessor for CurrentWeatherModel, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9C209F0();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v25, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v5, v6);
    sub_1A9B97190((uint64_t)v5, type metadata accessor for CurrentWeatherModel);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v11, v6);
    v20 = sub_1A9CE7398();
    v21 = v25;
    *v25 = v20;
    v21[1] = 0x4008000000000000;
    *((_BYTE *)v21 + 16) = 0;
    sub_1A9C20C30();
    sub_1A9C1EDFC((uint64_t)v14, v24, (uint64_t)v21 + *(int *)(v22 + 44));
    sub_1A9C209F0();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 0, 1, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
}

uint64_t sub_1A9C1EDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t);
  int v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t (*v97)(void);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  __int128 v163;

  v128 = a2;
  v145 = a3;
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1A9B92F34(0, (unint64_t *)&qword_1ED263210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v141 = (char *)&v119 - v7;
  v139 = sub_1A9CE813C();
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v8);
  v137 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1A9CE86F4();
  v135 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136, v10);
  v134 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB452C0, (uint64_t (*)(uint64_t))sub_1A9C1422C, MEMORY[0x1E0CAE328]);
  v132 = v12;
  v131 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v130 = (char *)&v119 - v14;
  sub_1A9C20BD4();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v144 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v142 = (char *)&v119 - v21;
  MEMORY[0x1E0C80A78](v20, v22);
  v143 = (uint64_t)&v119 - v23;
  v147 = sub_1A9CE7110();
  v146 = *(_QWORD *)(v147 - 8);
  v25 = MEMORY[0x1E0C80A78](v147, v24);
  v129 = (uint64_t)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v123 = (uint64_t)&v119 - v29;
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v119 - v31;
  v122 = (_QWORD *)sub_1A9CE7D10();
  v121 = *(v122 - 1);
  MEMORY[0x1E0C80A78](v122, v33);
  v35 = (char *)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9B92F34(0, &qword_1EEB452B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF788], v4);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v119 - v38;
  v40 = sub_1A9CE65D0();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v42);
  v44 = (char *)&v119 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1A9CE8130();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v119 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A9C20AF4();
  v127 = v50;
  v52 = MEMORY[0x1E0C80A78](v50, v51);
  v140 = (uint64_t)&v119 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x1E0C80A78](v52, v54);
  v126 = (char *)&v119 - v56;
  v58 = MEMORY[0x1E0C80A78](v55, v57);
  v125 = (char *)&v119 - v59;
  MEMORY[0x1E0C80A78](v58, v60);
  v148 = (uint64_t)&v119 - v61;
  sub_1A9CE6558();
  v133 = a1;
  sub_1A9CE6528();
  sub_1A9CE65B8();
  v62 = *(void (**)(char *, uint64_t))(v41 + 8);
  v124 = v40;
  v63 = v40;
  v64 = v32;
  v120 = v62;
  v62(v44, v63);
  sub_1A9CE8124();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
  sub_1A9CE7D04();
  v65 = *MEMORY[0x1E0CDF760];
  v66 = sub_1A9CE7D34();
  v67 = *(_QWORD *)(v66 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 104))(v39, v65, v66);
  v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56);
  v69 = v147;
  v68(v39, 0, 1, v66);
  sub_1A9CE7D1C();
  swift_release();
  sub_1A9BAAEE4((uint64_t)v39, (uint64_t)&qword_1EEB452B8, (uint64_t)MEMORY[0x1E0CDF788], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v70 = v121;
  v71 = v122;
  (*(void (**)(char *, _QWORD, _QWORD *))(v121 + 104))(v35, *MEMORY[0x1E0CDF6F8], v122);
  v72 = sub_1A9CE7D4C();
  swift_release();
  (*(void (**)(char *, _QWORD *))(v70 + 8))(v35, v71);
  v73 = v128 + *(int *)(type metadata accessor for WeatherIconView(0) + 20);
  sub_1A9C82CBC((uint64_t)v32);
  v74 = *(uint64_t (**)(char *, uint64_t))(v146 + 88);
  v75 = v74(v32, v69);
  v76 = *MEMORY[0x1E0CD98E8];
  v77 = (_DWORD *)MEMORY[0x1E0CD98F0];
  if (v75 != *MEMORY[0x1E0CD98E8] && v75 != *MEMORY[0x1E0CD98F0])
    (*(void (**)(char *, uint64_t))(v146 + 8))(v64, v69);
  v78 = v123;
  v128 = v73;
  sub_1A9C82CBC(v123);
  v122 = v74;
  v79 = v74((char *)v78, v69);
  LODWORD(v121) = v76;
  if (v79 != v76 && v79 != *v77)
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v78, v69);
  sub_1A9CE7FEC();
  sub_1A9CE6FE4();
  v151 = v72;
  v152 = 0;
  v153 = 1;
  v154 = v159;
  v155 = v160;
  v156 = v161;
  v157 = v162;
  v158 = v163;
  sub_1A9CE6558();
  v80 = sub_1A9CE65C4();
  v82 = v81;
  v120(v44, v124);
  v149 = v80;
  v150 = v82;
  sub_1A9C20B58();
  sub_1A9C20CAC((unint64_t *)&qword_1EEB46D88, (uint64_t (*)(uint64_t))sub_1A9C20B58, (uint64_t (*)(void))sub_1A9C20D14, MEMORY[0x1E0CD8D70]);
  sub_1A9BA8EA4();
  v83 = (uint64_t)v126;
  sub_1A9CE7B30();
  swift_bridgeObjectRelease();
  swift_release();
  v84 = (uint64_t)v125;
  sub_1A9CE7158();
  sub_1A9B97190(v83, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
  sub_1A9BA0D6C(v84, v148, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
  v85 = v130;
  sub_1A9CE6534();
  v86 = v134;
  sub_1A9CE8118();
  v87 = v138;
  v88 = v137;
  v89 = v139;
  (*(void (**)(char *, _QWORD, uint64_t))(v138 + 104))(v137, *MEMORY[0x1E0DCC860], v139);
  sub_1A9CE6630();
  sub_1A9CE6624();
  sub_1A9B92B9C(&qword_1EEB452D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DCCAA0], MEMORY[0x1E0DCCA98]);
  v90 = v132;
  v91 = v136;
  v133 = sub_1A9CE5EA4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v86, v91);
  v92 = v85;
  v93 = v147;
  (*(void (**)(char *, uint64_t))(v131 + 8))(v92, v90);
  v94 = v129;
  sub_1A9C82CBC(v129);
  v95 = ((uint64_t (*)(uint64_t, uint64_t))v122)(v94, v93);
  if (v95 != (_DWORD)v121 && v95 != *MEMORY[0x1E0CD98F0])
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v94, v93);
  sub_1A9CE780C();
  v96 = sub_1A9CE7800();
  v97 = MEMORY[0x1E0CDD560];
  v98 = (uint64_t)v141;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v141, 1, 1, v96);
  sub_1A9CE7830();
  sub_1A9BAAEE4(v98, (uint64_t)&qword_1ED263210, (uint64_t)v97, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))sub_1A9B92F34);
  v99 = sub_1A9CE7998();
  v101 = v100;
  LOBYTE(v98) = v102;
  swift_bridgeObjectRelease();
  swift_release();
  v103 = v98 & 1;
  sub_1A9CE7CA4();
  v104 = sub_1A9CE7968();
  v106 = v105;
  v108 = v107;
  v110 = v109;
  swift_release();
  v108 &= 1u;
  sub_1A9BAA670(v99, v101, v103);
  swift_bridgeObjectRelease();
  v151 = v104;
  v152 = v106;
  LOBYTE(v153) = v108;
  v154 = v110;
  v111 = (uint64_t)v142;
  sub_1A9CE7B78();
  sub_1A9BAA670(v104, v106, v108);
  swift_bridgeObjectRelease();
  v112 = v143;
  sub_1A9BA0D6C(v111, v143, (uint64_t (*)(_QWORD))sub_1A9C20BD4);
  v113 = v148;
  v114 = v140;
  sub_1A9BA6F90(v148, v140, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
  v115 = v144;
  sub_1A9BA6F90(v112, v144, (uint64_t (*)(_QWORD))sub_1A9C20BD4);
  v116 = v145;
  sub_1A9BA6F90(v114, v145, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
  sub_1A9C20A88();
  sub_1A9BA6F90(v115, v116 + *(int *)(v117 + 48), (uint64_t (*)(_QWORD))sub_1A9C20BD4);
  sub_1A9B97190(v112, (uint64_t (*)(_QWORD))sub_1A9C20BD4);
  sub_1A9B97190(v113, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
  sub_1A9B97190(v115, (uint64_t (*)(_QWORD))sub_1A9C20BD4);
  return sub_1A9B97190(v114, (uint64_t (*)(_QWORD))sub_1A9C20AF4);
}

uint64_t sub_1A9C1FA0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  sub_1A9C20EDC(0);
  MEMORY[0x1E0C80A78](v2, v3);
  sub_1A9BA6F90(a1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  return sub_1A9CE7290();
}

uint64_t sub_1A9C1FA88@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1A9CE7338();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1A9C1FAB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1A9CE7338();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1A9C1FAE8()
{
  return sub_1A9CE7344();
}

uint64_t sub_1A9C1FB14()
{
  return sub_1A9CE7344();
}

unint64_t sub_1A9C1FB58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46C10;
  if (!qword_1EEB46C10)
  {
    sub_1A9BCC414(255, &qword_1EEB46BB8, sub_1A9C1D9BC);
    v2 = v1;
    v3[0] = sub_1A9C20CAC(&qword_1EEB46C18, (uint64_t (*)(uint64_t))sub_1A9C1D9BC, (uint64_t (*)(void))sub_1A9C1FBF8, MEMORY[0x1E0CD9758]);
    v3[1] = MEMORY[0x1E0CDA1F0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46C10);
  }
  return result;
}

unint64_t sub_1A9C1FBF8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46C20;
  if (!qword_1EEB46C20)
  {
    sub_1A9C1D9D8();
    v2 = v1;
    v3[0] = sub_1A9C1FC80();
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1EEB43E00, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46C20);
  }
  return result;
}

unint64_t sub_1A9C1FC80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46C28;
  if (!qword_1EEB46C28)
  {
    sub_1A9C1DA54();
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB46C30, (uint64_t (*)(uint64_t))sub_1A9C1DAD0, (uint64_t (*)(void))sub_1A9C1FD28, (uint64_t (*)(void))sub_1A9BC8614);
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1ED263350, (unint64_t *)&qword_1ED263358, &qword_1ED263360, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46C28);
  }
  return result;
}

unint64_t sub_1A9C1FD28()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB46C38;
  if (!qword_1EEB46C38)
  {
    sub_1A9C1DB4C();
    v2 = v1;
    v3 = sub_1A9BAC06C((unint64_t *)&qword_1EEB44660, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB46C38);
  }
  return result;
}

void sub_1A9C1FDB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LockScreenGreetingView(0) - 8) + 80);
  sub_1A9C1D188(v0 + ((v1 + 16) & ~v1));
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for LockScreenGreetingView(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;

  v4 = v0 + v3 + *(int *)(v1 + 20);
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1A9CE7110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_1A9C1FEA8(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LockScreenGreetingView(0) - 8) + 80);
  sub_1A9C1D5FC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1A9C1FEE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A9C1FF08(char a1, void *a2)
{
  uint64_t v2;

  sub_1A9BE7E14(a1, a2, *(void **)(v2 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for WeatherDetailView()
{
  return &type metadata for WeatherDetailView;
}

ValueMetadata *type metadata accessor for ShortWeatherDetailView()
{
  return &type metadata for ShortWeatherDetailView;
}

uint64_t sub_1A9C1FF50()
{
  return sub_1A9B92B9C(&qword_1EEB46C40, (uint64_t (*)(uint64_t))sub_1A9C1FF7C, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9C1FF7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46C48)
  {
    sub_1A9B92F34(255, &qword_1EEB46B98, (uint64_t (*)(uint64_t))sub_1A9C1D91C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB46C50, &qword_1EEB46B98, (uint64_t (*)(uint64_t))sub_1A9C1D91C);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46C48);
  }
}

uint64_t sub_1A9C20014()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C20024()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C20034(uint64_t a1)
{
  sub_1A9BCC718(a1, &qword_1EEB46C58, &qword_1EEB46C60, (uint64_t (*)(uint64_t))sub_1A9C20050);
}

void sub_1A9C20050()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46C68)
  {
    type metadata accessor for WeatherIconView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46C68);
  }
}

uint64_t type metadata accessor for WeatherIconView(uint64_t a1)
{
  return sub_1A9BA3C2C(a1, qword_1EEB46CE0);
}

void sub_1A9C200D8(uint64_t a1)
{
  sub_1A9BCC718(a1, &qword_1EEB46C70, &qword_1EEB46C78, (uint64_t (*)(uint64_t))sub_1A9C200F4);
}

void sub_1A9C200F4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46C80)
  {
    type metadata accessor for WeatherIconView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46C80);
  }
}

uint64_t *sub_1A9C20158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = (uint64_t)v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
    v9 = v5;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_1A9CE7110();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_1A9C20250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = sub_1A9CE7110();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1A9C202DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v8 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1A9CE7110();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
  }
  else
  {
    *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_1A9C203A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  *a1 = *a2;
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = v6;
  v8 = v6;

  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4((uint64_t)a1 + v9, (uint64_t)&qword_1EEB46AF0, (uint64_t)MEMORY[0x1E0CD9958], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, v12, v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = sub_1A9CE7110();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
    }
    else
    {
      *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1A9C204AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  v8 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1A9CE7110();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1A9C20568(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v6;

  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
    v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1A9BAAEE4((uint64_t)a1 + v8, (uint64_t)&qword_1EEB46AF0, (uint64_t)MEMORY[0x1E0CD9958], (uint64_t)MEMORY[0x1E0CD87D0], (uint64_t (*)(_QWORD))sub_1A9B92F34);
    sub_1A9B92F34(0, (unint64_t *)&qword_1EEB46AF0, v11, v12);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_1A9CE7110();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v9, v10, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A9C2066C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1A9B92F34(0, qword_1EEB46AF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], MEMORY[0x1E0CD87E8]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1A9C20710()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1A9B92F34(0, qword_1EEB46AF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], MEMORY[0x1E0CD87E8]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1A9C207AC()
{
  unint64_t v0;

  sub_1A9B92F34(319, (unint64_t *)&qword_1EEB46AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for WeatherDescriptionText()
{
  return &type metadata for WeatherDescriptionText;
}

uint64_t sub_1A9C20848()
{
  return sub_1A9B92B9C(&qword_1EEB46D18, (uint64_t (*)(uint64_t))sub_1A9C20874, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9C20874()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D20)
  {
    sub_1A9B92F34(255, &qword_1EEB46C60, (uint64_t (*)(uint64_t))sub_1A9C20050, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB46D28, &qword_1EEB46C60, (uint64_t (*)(uint64_t))sub_1A9C20050);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D20);
  }
}

uint64_t sub_1A9C2090C()
{
  return sub_1A9B92B9C(&qword_1EEB46D30, (uint64_t (*)(uint64_t))sub_1A9C20938, MEMORY[0x1E0CDFCC0]);
}

void sub_1A9C20938()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D38)
  {
    sub_1A9B92F34(255, &qword_1EEB46C78, (uint64_t (*)(uint64_t))sub_1A9C200F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB46D40, &qword_1EEB46C78, (uint64_t (*)(uint64_t))sub_1A9C200F4);
    v0 = sub_1A9CE7EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D38);
  }
}

uint64_t sub_1A9C209D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A9C209E0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1A9C209F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D48)
  {
    sub_1A9B92F34(255, &qword_1EEB46D50, (uint64_t (*)(uint64_t))sub_1A9C20A88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1A9BCC5EC(&qword_1EEB46D78, &qword_1EEB46D50, (uint64_t (*)(uint64_t))sub_1A9C20A88);
    v0 = sub_1A9CE7E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D48);
  }
}

void sub_1A9C20A88()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEB46D58)
  {
    sub_1A9C20AF4();
    sub_1A9C20BD4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEB46D58);
  }
}

void sub_1A9C20AF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D60)
  {
    sub_1A9C20B58();
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D60);
  }
}

void sub_1A9C20B58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D68)
  {
    sub_1A9BAAB64(255, &qword_1EEB46D70, MEMORY[0x1E0CDF840], MEMORY[0x1E0CDB178], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D68);
  }
}

void sub_1A9C20BD4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB43DD0)
  {
    sub_1A9CE76BC();
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB43DD0);
  }
}

void sub_1A9C20C30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46D80)
  {
    sub_1A9B92F34(255, &qword_1EEB46D50, (uint64_t (*)(uint64_t))sub_1A9C20A88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1A9CE708C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46D80);
  }
}

uint64_t sub_1A9C20CAC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A9C20D14()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EEB46D90;
  if (!qword_1EEB46D90)
  {
    sub_1A9BAAB64(255, &qword_1EEB46D70, MEMORY[0x1E0CDF840], MEMORY[0x1E0CDB178], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2[0] = MEMORY[0x1E0CDF820];
    v2[1] = MEMORY[0x1E0CDB158];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EEB46D90);
  }
  return result;
}

void sub_1A9C20D94(uint64_t a1)
{
  sub_1A9C20DDC(a1, &qword_1EEB46D98, sub_1A9C20DB8, &qword_1EEB46DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8]);
}

void sub_1A9C20DB8(uint64_t a1)
{
  sub_1A9C20DDC(a1, &qword_1EEB46DA0, (void (*)(uint64_t))sub_1A9C20E60, &qword_1EEB46DB8, (uint64_t (*)(uint64_t))sub_1A9C20EDC);
}

void sub_1A9C20DDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_1A9B92F34(255, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v8 = sub_1A9CE7164();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1A9C20E60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46DA8)
  {
    sub_1A9BAAB64(255, &qword_1EEB46DB0, MEMORY[0x1E0CDBFD8], MEMORY[0x1E0CDBFB8], MEMORY[0x1E0CDC700]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46DA8);
  }
}

void sub_1A9C20EDC(uint64_t a1)
{
  sub_1A9B92F34(a1, &qword_1EEB46DC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE01B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1A9C20EF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46DD0)
  {
    sub_1A9C20D94(255);
    sub_1A9BA3F70(255, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46DD0);
  }
}

void sub_1A9C20F74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46DD8)
  {
    sub_1A9C20EF8();
    sub_1A9BA3F70(255, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46DD8);
  }
}

void sub_1A9C20FF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEB46DE0)
  {
    sub_1A9C20F74();
    sub_1A9B94CA0(255, &qword_1ED262998, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1A9CE7164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEB46DE0);
  }
}

unint64_t sub_1A9C2106C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46DF0;
  if (!qword_1EEB46DF0)
  {
    sub_1A9BCC414(255, &qword_1EEB46DE8, (void (*)(uint64_t))sub_1A9C20FF0);
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB46DF8, (uint64_t (*)(uint64_t))sub_1A9C20FF0, (uint64_t (*)(void))sub_1A9C2110C, (uint64_t (*)(void))sub_1A9BC8614);
    v3[1] = MEMORY[0x1E0CDA1F0];
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46DF0);
  }
  return result;
}

unint64_t sub_1A9C2110C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46E00;
  if (!qword_1EEB46E00)
  {
    sub_1A9C20F74();
    v2 = v1;
    v3[0] = sub_1A9C21194();
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1EEB44660, (unint64_t *)&qword_1EEB44600, &qword_1EEB44608, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46E00);
  }
  return result;
}

unint64_t sub_1A9C21194()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EEB46E08;
  if (!qword_1EEB46E08)
  {
    sub_1A9C20EF8();
    v2 = v1;
    v3[0] = sub_1A9BC2784(&qword_1EEB46E10, (uint64_t (*)(uint64_t))sub_1A9C20D94, sub_1A9C2123C, sub_1A9C21394);
    v3[1] = sub_1A9BAC06C((unint64_t *)&qword_1EEB43E00, &qword_1EEB43D80, &qword_1EEB43D88, MEMORY[0x1E0CDD840]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46E08);
  }
  return result;
}

uint64_t sub_1A9C2123C()
{
  return sub_1A9BC2784(&qword_1EEB46E18, (uint64_t (*)(uint64_t))sub_1A9C20DB8, (uint64_t (*)(void))sub_1A9C21260, sub_1A9C21330);
}

unint64_t sub_1A9C21260()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEB46E20;
  if (!qword_1EEB46E20)
  {
    sub_1A9C20E60();
    v2 = v1;
    v3 = sub_1A9C212C8();
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEB46E20);
  }
  return result;
}

unint64_t sub_1A9C212C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEB46E28;
  if (!qword_1EEB46E28)
  {
    sub_1A9BAAB64(255, &qword_1EEB46DB0, MEMORY[0x1E0CDBFD8], MEMORY[0x1E0CDBFB8], MEMORY[0x1E0CDC700]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDC718], v1);
    atomic_store(result, (unint64_t *)&qword_1EEB46E28);
  }
  return result;
}

uint64_t sub_1A9C21330()
{
  return sub_1A9C2134C(&qword_1EEB46E30, &qword_1EEB46DB8, (uint64_t (*)(uint64_t))sub_1A9C20EDC);
}

uint64_t sub_1A9C2134C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1A9B92F34(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CDCF80], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A9C21394()
{
  return sub_1A9C2134C(&qword_1EEB46E38, &qword_1EEB46DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8]);
}

uint64_t sub_1A9C213B0()
{
  return sub_1A9CE7284();
}

unint64_t sub_1A9C213E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EEB46E40;
  if (!qword_1EEB46E40)
  {
    sub_1A9B92F34(255, &qword_1EEB46E48, (uint64_t (*)(uint64_t))sub_1A9C209F0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1A9B92B9C(&qword_1EEB46E50, (uint64_t (*)(uint64_t))sub_1A9C209F0, MEMORY[0x1E0CDFB10]);
    result = MEMORY[0x1AF420284](MEMORY[0x1E0CE0798], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEB46E40);
  }
  return result;
}

uint64_t sub_1A9C21470()
{
  return sub_1A9BC2784(&qword_1EEB46E58, (uint64_t (*)(uint64_t))sub_1A9C214A4, (uint64_t (*)(void))sub_1A9C2106C, sub_1A9BC15B8);
}

void sub_1A9C214A4(uint64_t a1)
{
  sub_1A9C214C0(a1, &qword_1EEB46E60, &qword_1EEB46DE8, (void (*)(uint64_t))sub_1A9C20FF0);
}

void sub_1A9C214C0(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1A9BCC414(255, a3, a4);
    sub_1A9CE76BC();
    v5 = sub_1A9CE7164();
    if (!v6)
      atomic_store(v5, a2);
  }
}

id static UIColor.dynamic(light:dark:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v11[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v11[4] = sub_1A9C218AC;
  v11[5] = v4;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1A9C21C90;
  v11[3] = &block_descriptor_14;
  v6 = _Block_copy(v11);
  v7 = a1;
  v8 = a2;
  v9 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  return v9;
}

id static UIColor.invertedGroupedCellBackground.getter()
{
  id v0;
  void *v1;
  id v2;
  _QWORD v4[6];

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4[4] = sub_1A9C219C0;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = sub_1A9C21C90;
  v4[3] = &block_descriptor_3_0;
  v1 = _Block_copy(v4);
  v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  swift_release();
  return v2;
}

CGColorRef __swiftcall UIColor.cgColor(with:)(UITraitCollection with)
{
  void *v1;
  id v2;
  CGColor *v3;

  v2 = objc_msgSend(v1, sel_resolvedColorWithTraitCollection_, with.super.isa);
  v3 = (CGColor *)objc_msgSend(v2, sel_CGColor);

  return v3;
}

id static UIColor.invertedGroupedTableViewBackground.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v10[6];

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_systemBackgroundColor);
  v2 = objc_msgSend(v0, sel_systemGroupedBackgroundColor);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10[4] = sub_1A9C218AC;
  v10[5] = v3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1A9C21C90;
  v10[3] = &block_descriptor_10;
  v5 = _Block_copy(v10);
  v6 = v1;
  v7 = v2;
  v8 = objc_msgSend(v4, sel_initWithDynamicProvider_, v5);
  _Block_release(v5);

  swift_release();
  return v8;
}

id sub_1A9C21834(void *a1, void *a2, void *a3)
{
  id v4;
  BOOL v5;
  void *v6;

  v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4)
  {
    v5 = v4 == (id)2;
    v6 = a3;
    if (!v5)
      v6 = a2;
  }
  else
  {
    v6 = a3;
  }
  return v6;
}

uint64_t sub_1A9C21880()
{
  uint64_t v0;

  return swift_deallocObject();
}

id static UIColor.dynamic(light:dark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v13[6];

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v13[4] = sub_1A9C21D24;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1A9C21C90;
  v13[3] = &block_descriptor_16;
  v10 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  v11 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
  _Block_release(v10);
  swift_release();
  return v11;
}

id sub_1A9C219A0(void *a1)
{
  return sub_1A9C219D8(a1, (SEL *)&selRef_systemGray4Color, (SEL *)&selRef_blackColor, 0.7);
}

id sub_1A9C219C0(void *a1)
{
  return sub_1A9C219D8(a1, (SEL *)&selRef_secondarySystemBackgroundColor, (SEL *)&selRef_secondarySystemBackgroundColor, 0.8);
}

id sub_1A9C219D8(void *a1, SEL *a2, SEL *a3, double a4)
{
  id v8;
  BOOL v9;
  id v10;
  id v11;
  id v12;

  v8 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v8)
    v9 = v8 == (id)2;
  else
    v9 = 1;
  if (v9)
    return objc_msgSend((id)objc_opt_self(), *a3);
  v10 = objc_msgSend((id)objc_opt_self(), *a2);
  v11 = objc_msgSend(v10, sel_resolvedColorWithTraitCollection_, a1);

  v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, a4);
  return v12;
}

UIColor __swiftcall UIColor.resolved(with:)(UITraitCollection with)
{
  void *v1;

  return (UIColor)objc_msgSend(v1, sel_resolvedColorWithTraitCollection_, with.super.isa);
}

id static UIColor.ringGoalMetColor.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v10[6];

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_whiteColor);
  v2 = objc_msgSend(v0, sel_secondarySystemBackgroundColor);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v10[4] = sub_1A9C218AC;
  v10[5] = v3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1A9C21C90;
  v10[3] = &block_descriptor_23;
  v5 = _Block_copy(v10);
  v6 = v1;
  v7 = v2;
  v8 = objc_msgSend(v4, sel_initWithDynamicProvider_, v5);
  _Block_release(v5);

  swift_release();
  return v8;
}

id static UIColor.ringGoalMissColor.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_systemOrangeColor);
}

id sub_1A9C21C90(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_1A9C21CF8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A9C21D24(void *a1)
{
  uint64_t v1;
  uint64_t (*v3)(void *);
  uint64_t (*v4)(void *);
  id v5;
  BOOL v6;

  v3 = *(uint64_t (**)(void *))(v1 + 16);
  v4 = *(uint64_t (**)(void *))(v1 + 32);
  v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v5)
    v6 = v5 == (id)2;
  else
    v6 = 1;
  if (v6)
    return v4(a1);
  else
    return v3(a1);
}

id sub_1A9C21D90(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v2 = *(void **)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4 == (id)2)
    v5 = v3;
  else
    v5 = v2;
  if (v4)
    v6 = v5;
  else
    v6 = v3;
  return v6;
}

void SleepOnboardingViewRepresentation.init(healthStore:sleepStore:onboardingContext:)(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *a3;
  v8 = *((_BYTE *)a3 + 8);
  v23 = a3[2];
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F7B8]), sel_init);
  type metadata accessor for HealthStatusFeatureProvider();
  v10 = (_QWORD *)swift_allocObject();
  v11 = *MEMORY[0x1E0CB50A8];
  v12 = objc_allocWithZone(MEMORY[0x1E0CB6730]);
  v13 = v9;
  v14 = a1;
  v15 = a2;
  v16 = objc_msgSend(v12, sel_initWithFeatureIdentifier_healthStore_, v11, v14);
  v17 = sub_1A9C224D4();
  v18 = MEMORY[0x1E0D2C1E8];
  v10[5] = v17;
  v10[6] = v18;
  v10[2] = v16;
  sub_1A9CE66E4();
  v10[7] = sub_1A9CE66D8();
  v19 = type metadata accessor for SleepOnboardingManager();
  v20 = (_QWORD *)swift_allocObject();
  v21 = sub_1A9C0C290(v15, v14, (uint64_t)v10, v20);
  type metadata accessor for SleepOnboardingCoordinator();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 40) = v19;
  *(_QWORD *)(v22 + 48) = &protocol witness table for SleepOnboardingManager;
  *(_QWORD *)(v22 + 16) = v21;
  *(_BYTE *)(v22 + 96) = 0;
  *(_QWORD *)(v22 + 56) = v7;
  *(_BYTE *)(v22 + 64) = v8;
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 88) = v13;
  *(_QWORD *)(v22 + 72) = v23;

  swift_retain();
  sub_1A9C7FAA0(0, 0, 0);
  swift_release();

  *a4 = v13;
  a4[1] = v22;
}

